{"title":"扯淡😄","date":"2019-04-01T09:41:10.000Z","thumbnail":"https://i.loli.net/2019/02/27/5c75f47d51065.jpg","slug":"docker-github","comments":true,"tags":["Dockera","Github"],"categories":["Docker"],"updated":"2019-04-01T09:51:53.123Z","content":"<p>纯属扯淡<br><a id=\"more\"></a></p>\n<p><br></p>\n<h3 id=\"一-扯淡\"><font color=\"#FF6347\" face=\"Comic sans MS\">一. 扯淡</font><a href=\"post/docker-github#一-扯淡\"></a></h3><p><strong>一</strong><br>有好些时日没有更新了，但这并不意味着我没学习😭，说实话我还真是真心喜欢学习技术方面的东西。如果说仅仅是兴趣的话我大可不会这样觉得，毕竟兴趣并不能作为一种长期的精神支柱。不过话又说回来，兴趣确实也很重要哎哟…..我觉得最重要的还是有比较大的求知欲，当一次次解决了一些较麻烦的问题，我就会心情很好。嗯，真好玩，原来学习这些东西是真的好玩。比如说学些SQL注入的小东西，无论是手工亦或是借助一些工具。XSS玩玩也挺不错的，还有就是隐写逼格好高哦…..内网渗透可真是无孔不入….等等….我都觉得挺有意思。</p>\n<p>但是无奈(  ᵒ̴̶̷̥́ _ᵒ̴̶̷̣̥̀  )，就目前来说没有这么多时间去搞这些了😔…..</p>\n<p>但是，我是绝对不会停下脚步滴。今天复习到下午就开始有些无聊了，难道？嗯，是的，我的课程设计还没搞好呢，正好可以转移注意力去搞搞项目(๑╹︎ڡ╹︎๑)⃛，也好放松一下,毕竟Docker和ThinkPHP还没学完呢，那就开始搞吧…..</p>\n<p><strong>二</strong><br>曾经听说过这样一句话：一项技术兴起并有可能占有重要地位时，我们应该尽早去学习掌握它，因为早开始就意味着早成才。<br>无论学什么都应该始终保持一颗对求知充满欲望的心，我比较喜欢电影《功夫熊猫2》里的一句台词：Your story may not have a such happy begining, but that doesn’t make who you are. It is the rest of your story, who you choose to be. （你人生故事的开头也许充满坎坷，不过这并不影响你成为什么样的人。关键看你后来的人生路，你自己选择怎么走下去。）</p>\n<p>我一直都对那些存有高度自律能力的人充满敬仰，对大多数成年人来说惰性始终是一生之敌。我也时常在思考一个问题，一个人做一件事做多久才能称得上坚持？现在我也终于明白，原来被叫做坚持的这种东西它本身是不具有方向性的或者说它对于每个不同的人来说都有特殊的意义，只要认为是值得就坚持得有意义。</p>\n<p>而我最怕的是找个理由在心理上说服了自己放弃…..这才是一个人最可怕的地方。所以我得出这样一个结论：一定要找到一个理由来支撑坚持，无论是一个目标还是心中强大的欲望。因为放弃太简单了，一个简单的想法就可以让自己放弃。这个理由也有可能是一生所求吧….</p>\n<p><strong>三</strong><br>好了，扯淡也差不多了。还是回来再看看最近遇到的问题，也好写个总结，方便以后自己再次查阅能够方便些。</p>\n<p><br></p>\n<h3 id=\"二-Docker、Github文件部署\"><font color=\"#FF6347\" face=\"Comic sans MS\">二. Docker、Github文件部署</font><a href=\"post/docker-github#二-Docker、Github文件部署\"></a></h3><h4 id=\"2-1-关于我的Docker\"><font color=\"#3CB371\" face=\"Comic sans MS\">2.1 关于我的Docker</font><a href=\"post/docker-github#2-1-关于我的Docker\"></a></h4><p><strong>一、Web服务器已经完成的工作</strong><br>截至2019.4.1号，我在docker里装了一个ubuntu，ubuntu里搭了一个Web服务器（Apache2+mysql+php7.2）。</p>\n<p><strong>结构</strong>：<br>ubuntu18.04（1）</p>\n<p>├─ ubuntu18.04（2）<br>│   ├─apache2<br>│   ├─mysql<br>│   ├─php7.2<br>apache2对外目录<code>/var/www/html</code></p>\n<ol>\n<li><p><code>docker ps -a</code> （已经将apache280端口映射到ubuntu18.04（1）的90端口）列出</p>\n<p>CONTAINER<br> ID |IMAGE|COMMAND|CREATED|STATUS |PORTS | NAMES<br>:-:|:-|:-|:-|:-|<br>7b8832c95393|0517335286ae|”/bin/bash”|9 days ago |Exited (0) 3 hours ago|   | webtest<br>83a664e24ae4|ubuntu|”/bin/bash”|10 days ago|Exited (0) 9 days ago||ubuntu-web</p>\n</li>\n<li><p><code>docker start -i 7b8832c95393</code> 进入ubuntu，<code>ls</code>，<code>cat uplogs</code></p>\n</li>\n<li><p>在主目录下建立了service.sh脚本，目的是启动apache2和mysql服务器；一定要给脚本文足够的权限，否则脚本运行不了。</p>\n</li>\n<li>在主目录下建立了uplogs.txt文件，目的是记录容器的更新；</li>\n<li>在 /var/www/html建立test1.php文件，内容为：</li>\n</ol>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">     <span class=\"token delimiter\">&lt;?php</span>\n      <span class=\"token keyword\">echo</span> <span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>   但是在客户机浏览器看到显示为空，上网查了一下，需要修改PHP配置，如下：<br>   vim /etc/php/7.2/apache2/php.ini   修改PHP配置信息将short_open_tags=on；<br>   参考链接： <a href=\"https://www.cnblogs.com/smallrookie/p/5635814.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5635814.html</a> </p>\n<p><strong>二、将建立好的容器转为镜像并部署到 Dockerhub</strong></p>\n<ol>\n<li>容器转成镜像<ol>\n<li><code>dock kill &lt;containerID&gt;</code> 停止要转换的容器；</li>\n<li><code>docker commit -a &quot;Alvin-Web&quot; -m &quot;my webserver&quot; 83a664e24ae4 apachemysql/php7.2:v1.2</code><ul>\n<li><code>-a</code> 是取作者名字</li>\n<li><code>-m</code> 是给这个镜像取一个名字</li>\n<li><code>83a664e24ae4</code> 容器ID</li>\n<li><code>apache/php7.2</code> 镜像仓库名</li>\n<li><code>:v1.0</code> 镜像的<code>tag</code>是<code>v1.0</code><br>完整命令<code>docker commit -a &quot;xxxx&quot; -m &quot;xxx&quot; &lt;containerID&gt;  镜像仓库名xx:tag名x</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>将转换好的镜像部署到Dockerhub<ol>\n<li>在Dockerhub建立一个Repositories。我的是<code>webservice-apache2-mysql-php7.2</code>，我的用户名是<code>treecat</code>，则全名是<code>treecat/webservice-apache2-mysql-php7.2</code></li>\n<li><code>docker login</code> 登陆远程仓库</li>\n<li>将本地要部署的镜像仓库名必须改为和远程<code>webservice-apache2-mysql-php7.2</code>一样 ----&gt;<br><code>docker tag apachemysql/php7.2:v1.2 treecat/webservice-apache2-mysql-php7.2:v1.2</code></li>\n<li>部署 <code>docker push treecat/webservice-apache2-mysql-php7.2:v1.2</code></li>\n</ol>\n</li>\n</ol>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/04/02/5ca244ed60683.png\" alt=\"1.png\" data-zoomable></p></div>\n<p><strong>三、准备在ubuntu18.04（2）里装ThinkPHP5</strong><br>本来想的挺好的在里面装个ThinkPHP5就直接用了，无奈<code>composer.phar</code>都已经安装好了，但是如下的错误始终无法解决：</p>\n<ol>\n<li></li>\n</ol>\n<pre class=\"line-numbers language-linux\"><code class=\"language-linux\">`root@7b8832c95393:/var/www/html# sudo composer create-project topthink/thinkphp tp5\nbash: sudo: command not found\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-linux\"><code class=\"language-linux\">root@7b8832c95393:/var/www/html# composer create-project topthink/thinkphp tp5\nDo not run Composer as root/super user! See https://getcomposer.org/root for details\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>docker里面的ubuntu不能用<code>sudo</code>因为自身就是root了，我不想建立用户组，管理有些麻烦；</p>\n<ol start=\"2\">\n<li>第二个问题就是<code>Do not run Composer as root/super user! See https://getcomposer.org/root for details</code>，根据报错知道不能直接用root或者超级用户，网上找了些方法都是建立用户组的用户就好了。</li>\n<li>我仔细一想不就是在<code>/war/www/html</code>下装个ThinkPHP5么，而且它本身就是文件夹和文件。简单啊，我先将这个文件夹放到我的Github，然后直接用ubuntu18.04（2）从我的github仓库<code>git clone</code>就好了呀….说干就干。无奈如果直接在github仓库直接<code>Upload files</code>的话，每次上传的文件个数有要求，所以我就想到了用<strong>Git</strong>啊，命令行直接干上去….<br>又是说干就干，不过成功了！哈哈哈，往下看我是怎么将本地文件上传到我的Github仓库的，之前只是部署博客倒是挺溜的，这次终于有机会上传文件玩玩了….</li>\n</ol>\n<p><br></p>\n<h4 id=\"2-2-将本地文件部署到Github\"><font color=\"#3CB371\" face=\"Comic sans MS\">2.2 将本地文件部署到Github</font><a href=\"post/docker-github#2-2-将本地文件部署到Github\"></a></h4><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/04/02/5ca2469255478.png\" alt=\"github.png\" data-zoomable><br><img src=\"https://i.loli.net/2019/04/02/5ca247588b094.png\" alt=\"github2.png\" data-zoomable><br><img src=\"https://i.loli.net/2019/04/02/5ca2479b7ab9a.png\" alt=\"github3.png\" data-zoomable></p></div>\n<p><strong>目录结构</strong><br>初始的目录结构如下：</p>\n<p>www  WEB部署目录（或者子目录）<br>├─application           应用目录<br>│  ├─common             公共模块目录（可以更改）<br>│  ├─module_name        模块目录<br>│  │  ├─config.php      模块配置文件<br>│  │  ├─common.php      模块函数文件<br>│  │  ├─controller      控制器目录<br>│  │  ├─model           模型目录<br>│  │  ├─view            视图目录<br>│  │  └─ …            更多类库目录<br>│  │<br>│  ├─command.php        命令行工具配置文件<br>│  ├─common.php         公共函数文件<br>│  ├─config.php         公共配置文件<br>│  ├─route.php          路由配置文件<br>│  ├─tags.php           应用行为扩展定义文件<br>│  └─database.php       数据库配置文件<br>│<br>├─public                WEB目录（对外访问目录）<br>│  ├─index.php          入口文件<br>│  ├─router.php         快速测试文件<br>│  └─.htaccess          用于apache的重写<br>│<br>├─thinkphp              框架系统目录<br>│  ├─lang               语言文件目录<br>│  ├─library            框架类库目录<br>│  │  ├─think           Think类库包目录<br>│  │  └─traits          系统Trait目录<br>│  │<br>│  ├─tpl                系统模板目录<br>│  ├─base.php           基础定义文件<br>│  ├─console.php        控制台入口文件<br>│  ├─convention.php     框架惯例配置文件<br>│  ├─helper.php         助手函数文件<br>│  ├─phpunit.xml        phpunit配置文件<br>│  └─start.php          框架入口文件<br>│<br>├─extend                扩展类库目录<br>├─runtime               应用的运行时目录（可写，可定制）<br>├─vendor                第三方类库目录（Composer依赖库）<br>├─build.php             自动生成定义文件（参考）<br>├─composer.json         composer 定义文件<br>├─LICENSE.txt           授权说明文件<br>├─README.md             README 文件<br>├─think                 命令行入口文件</p>\n<blockquote>\n<p>router.php用于php自带webserver支持，可用于快速测试 切换到public目录后，启动命令：php -S localhost:8888 router.php 上面的目录结构和名称是可以改变的，这取决于你的入口文件和配置参数。</p>\n</blockquote>\n","next":{"title":"Docker","slug":"docker"},"link":"https://Directoree.github.io/post/docker-github/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 扯淡</font>","id":"一-扯淡","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. Docker、Github文件部署</font>","id":"二-Docker、Github文件部署","index":"2","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.1 关于我的Docker</font>","id":"2-1-关于我的Docker","index":"2.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.2 将本地文件部署到Github</font>","id":"2-2-将本地文件部署到Github","index":"2.2"}]}],"copyright":{"author":"Directoree","link":"<a href=\"https://Directoree.github.io/post/docker-github/\" title=\"扯淡😄\">https://Directoree.github.io/post/docker-github/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}