{"title":"Docker","date":"2019-03-25T11:36:11.000Z","thumbnail":"https://i.loli.net/2019/03/01/5c780b7be7025.jpg","slug":"docker","comments":true,"tags":["Docker"],"categories":["Docker"],"updated":"2019-03-29T16:32:27.893Z","content":"<p>项目需要，我也来学学Docker和ThinkPHP5…<br>学习需要时间和精力，早开始早熟练…..(｡◕︎‿◕︎)ﾉﾟ･ﾟ･<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Docker</strong></font> </center>\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-Docker初识\"><font color=\"#FF6347\" face=\"Comic sans MS\">一. Docker初识</font><a href=\"post/docker#一-Docker初识\"></a></h3><p><br></p>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>关于Docker</strong></font></p>\n<ol>\n<li>为什么要使用Docker？</li>\n<li>Docker和虚拟机(virtual machine)有什么区别？</li>\n<li>什么是Docker？</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p><strong>一、 为什么要使用Docker？</strong></p>\n<p><strong>环境配置的难题</strong></p>\n<p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p>\n<p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p>\n<p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：“它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p>\n<p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p>\n<p><br></p>\n<p><strong>二、 Docker和虚拟机(virtual machine)有什么区别？</strong></p>\n<p><strong>1. 虚拟机</strong></p>\n<p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。<br>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p>\n<p><strong>（1）资源占用多</strong></p>\n<p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p>\n<p><strong>（2）冗余步骤多</strong></p>\n<p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p>\n<p><strong>（3）启动慢</strong></p>\n<p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p>\n<p><br></p>\n<p><strong>2. Linux 容器</strong></p>\n<p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。<br>由于容器是进程级别的，相比虚拟机有很多优势。</p>\n<p><strong>（1）启动快</strong></p>\n<p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p>\n<p><strong>（2）资源占用少</strong></p>\n<p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p>\n<p><strong>（3）体积小</strong></p>\n<p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。<br>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p>\n<p><br></p>\n<p><strong>三、 什么是Docker？</strong></p>\n<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>\n<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>\n<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p><br></p>\n<p><strong>四、Docker 的用途</strong></p>\n<p>Docker 的主要用途，目前有三大类。</p>\n<p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。<br>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。<br>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>\n<p><br></p>\n<h3 id=\"二-Docker架构\"><font color=\"#FF6347\" face=\"Comic sans MS\">二. Docker架构</font><a href=\"post/docker#二-Docker架构\"></a></h3><p><br></p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/25/5c98a0633af86.png\" alt=\"docker-architecture.png\" data-zoomable></p></div>\n<font color=\"#FF7F00\"><strong>Docker是CS架构，Docker 的核心组件包括：</strong></font>\n\n<ol>\n<li><p><strong>Docker客户端 （Client）：</strong>通过docker在host上构建和运行容器</p>\n</li>\n<li><p><strong>Docker服务器（Docker daemon）：</strong>是服务器组件，以 Linux 后台服务的方式运行。 运行在宿主机上，Docker守护进程，用户通过Docker client(Docker命令CLI)与Docker daemon交互。</p>\n</li>\n<li><p><strong>Docker镜像 （Image）：</strong>通过它可以创建 Docker 容器。镜像是只读的，镜像中包含有需要运行的文件。镜像用来创建container，一个镜像可以运行多个container；<font color=\"#FF7F00\"><strong>镜像可以通过Dockerfile创建，也可以从Docker hub/registry上下载</strong></font>。</p>\n</li>\n<li><p><strong>Docker容器（Container）：</strong>容器是Docker的运行组件，启动一个镜像就是一个容器，容器是一个隔离环境，多个容器之间不会相互影响，保证容器中的程序运行在一个相对安全的环境中。</p>\n</li>\n<li><p><strong>Docker hub/Registry：</strong>注册服务器，用于<font color=\"#FF7F00\"><strong>管理多个镜像仓库（Repository）</strong></font>，起到的是服务器的作用。</p>\n</li>\n<li><p><strong>Repository：</strong>镜像仓库，用于存储具体的docker镜像，起到的是仓库存储作用。</p>\n</li>\n</ol>\n<p><br></p>\n<p><strong>Registry和Repository的关系：</strong></p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/25/5c98a4fc5fc7e.png\" alt=\"docker1.png\" data-zoomable></p></div>\n<p><br></p>\n<p><strong>架构扩充知识：</strong></p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/25/5c98a77024a1a.png\" alt=\"2.png\" data-zoomable></p></div>\n<p><br></p>\n<p>最核心的是 Docker Daemon我们称之为Docker守护进程，也就是Server端，Server端可以部署在远程，也可以部署在本地，因为Server端与客户端(Docker Client)是通过Rest API进行通信。</p>\n<p>docker CLI 实现容器和镜像的管理，为用户提供统一的操作界面,这个 客户端提供一个只读的镜像，然后通过镜像可以创建一个或者多个容器(container)，这些容器可以只是一个RFS(Root File System),也可以是一个包含了用户应用的RFS。容器在docker Client中只是一个进程，两个进程是互不可见的。</p>\n<p>用户不能与server直接交互，但可以通过与容器这个桥梁来交互，由于是操作系统级别的虚拟技术，中间的损耗几乎可以不计</p>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>CLI：</strong></font>command line interface 命令行接口.</p>\n<p><font color=\"#FF7F00\"><strong>RFS：</strong></font>Root File System 根文件系统.</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"三-Docker常用命令\"><font color=\"#FF6347\" face=\"Comic sans MS\">三.  Docker常用命令</font><a href=\"post/docker#三-Docker常用命令\"></a></h3><p><br></p>\n<h4 id=\"3-1-镜像管理\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.1 镜像管理</font><a href=\"post/docker#3-1-镜像管理\"></a></h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">docker images                 ------ 列出本地所有镜像\ndocker search &lt;IMAGE_ID/NAME> ------ 查找image\ndocker pull <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IMAGE_ID</span><span class=\"token punctuation\">></span></span>        ------ 下载image\ndocker push <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IMAGE_ID</span><span class=\"token punctuation\">></span></span>        ------ 上传image\ndocker rmi <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IMAGE_ID</span><span class=\"token punctuation\">></span></span>         ------ 删除image\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<h4 id=\"3-2-容器管理\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.2 容器管理</font><a href=\"post/docker#3-2-容器管理\"></a></h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">docker run -i -t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IMAGE_ID</span><span class=\"token punctuation\">></span></span> /bin/bash\n-i            ------ 标准输入给容器    \n-t            ------ 分配一个虚拟终端   \n/bin/bash     ------ 执行bash脚本\n-d            ------ 以守护进程方式运行（后台）\n-P            ------ 默认匹配docker容器的5000端口号到宿主机的49153 to 65535端口\n-p <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HOT_PORT</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_PORT</span><span class=\"token punctuation\">></span></span>\n              ------ 指定端口号,前者为映射端口，后者为容器端口\n--name        ------ 指定容器的名称，方便区别\n--rm          ------ 退出时删除容器\n--------------------------------------------------------------------------------\ndocker stop <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>  \n              ------ 等待运行结束并停止container\ndocker kill <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>  \n              ------ 强制停止container\ndocker start <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span> -i /bin/bash\n              ------ 重新启动container       \n--------------------------------------------------------------------------------         \ndocker ps     ------ 显示正在运行过的容器\n-l            ------ 显示最后启动的容器\n-a            ------ 显示所有容器\n--------------------------------------------------------------------------------\ndocker attach <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span> ------ 连接到启动的容器\ndocker logs <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>   ------ 输出容器日志\n-f                           ------ 实时输出\ndocker cp <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>:path hostpath\n                             ------ 复制容器内的文件到宿主机目录上\ndocker rm <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>     ------ 删除container\ndocker rm `docker ps -a -q`  ------ 删除所有容器\ndocker kill `docker ps -q`\ndocker rmi `docker images -q -a`\ndocker wait <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>   ------ 阻塞对容器的其他调用方法，直到容器停止后退出\n\ndocker top <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>    ------ 查看容器中运行的进程\ndocker diff <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>   ------ 查看容器中的变化\ndocker inspect <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span> ------ 查看容器详细信息（输出为Json）\n-f：查找特定信息，如\n    docker inspect -f '{{ .NetworkSettings.IPAddress }}'\n    docker commit -m \"comment\" -a \"author\" <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span>  ouruser/imagename:tag\n--------------------------------------------------------------------------------\ndocker extc -it <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>COMMAND</span><span class=\"token punctuation\">></span></span>\n                             ------ 在容器里执行命令，并输出结果\ndocker exec -i -t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span> /bin/bash\n                             ------ 重新进入守护式进程            \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<h4 id=\"3-3-网络管理\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.3 网络管理</font><a href=\"post/docker#3-3-网络管理\"></a></h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">docker run -P                         ------ 随机分配端口号\ndocker run -p 2560:5000               ------ 绑定特定端口号（主机的所有网络接口的2560端口均绑定容器的5000端口）\ndocker run -p 127.0.0.1:5000:5000     ------ 绑定主机的特定接口的端口号\ndocker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n                                      ------ 绑定udp端口号\ndocker port <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_ID</span><span class=\"token punctuation\">></span></span> 5000       ------ 查看容器的5000端口对应本地机器的IP和端口号\n--------------------------------------------------------------------------------\n使用Docker Linking连接容器：\nDocker为源容器和接收容器创建一个安全的通道，容器之间不需要暴露端口，接收的容器可以访问源容器的数据\ndocker run -d -P --name <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_NAME</span><span class=\"token punctuation\">></span></span> --link <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CONTAINER_NAME_TO_LINK</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ALIAS</span><span class=\"token punctuation\">></span></span>  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<h4 id=\"3-4-数据管理\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.4 数据管理</font><a href=\"post/docker#3-4-数据管理\"></a></h4><p>Data Volumes：volume是在一个或多个容器里指定的特殊目录</p>\n<ul>\n<li>数据卷可以在容器间共享和重复使用</li>\n<li>可以直接修改容器卷的数据</li>\n<li>容器卷里的数据不会被包含到镜像中</li>\n<li>容器卷保持到没有容器再使用它</li>\n</ul>\n<p>a. 可以在容器启动的时候添加<code>-v</code>参数指定容器卷，也可以在Dockerfile里用VOLUMN命令添加<br><strong><code>docker run -d -P --name web -v /webapp training/webapp python app.py</code></strong></p>\n<p>b. 也可以将容器卷挂载到宿主机目录或宿主机的文件上，<code>&lt;容器目录或文件&gt;</code>的内容会被替换为<code>&lt;宿主机目录或文件&gt;</code>的内容，默认容器对这个目录有可读写权限<br><strong><code>docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt; training/webapp python app.py</code></strong></p>\n<p>c. 可以通过指定<code>ro</code>，将权限改为只读<br><strong><code>docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt;:ro training/webapp python app.py</code></strong></p>\n<p>d. 在一个容器创建容器卷后，其他容器便可以通过<code>--volumes-from</code>共享这个容器卷数据，如下：<br><strong><code>docker run -d -v /dbdata --name db1 training/postgres echo Data-only container for postgres</code></strong><br>首先启动了一个容器，并为这个容器增加一个数据卷<code>/dbdata</code>，然后启动另一个容器，共享这个数据卷</p>\n<p>e. <strong><code>docker run -d --volumes-from db1 --name db2 training/postgres</code></strong><br>此时db2使用了db1的容器卷，当容器db1被删除时，容器卷也不会被删除，只有所有容器不再使用此容器卷时，才会被删除<br><code>docker rm -v</code> ：删除容器卷</p>\n<p>f. 除了共享数据外，容器卷另一个作用是用来备份、恢复和迁移数据<br><strong><code>docker run --volumes-from db1 -v /home/backup:/backup ubuntu tar cvf /backup/backup.tar /dbdata</code></strong></p>\n<p>g. 启动一个容器数据卷使用db1容器的数据卷，同时新建立一个数据卷指向宿主机目录<code>/home/backup</code>，将<code>/dbdata</code>目录的数据压缩为<code>/backup/backup.tar</code></p>\n<p>h. <strong><code>docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</code></strong><br><strong><code>docker run --volumes-from dbdata2 -v /home/backup:/backup busybox tar xvf /backup/backup.tar</code></strong><br>启动一个容器，同时把<code>backup.tar</code>的内容解压到容器的 <code>backup</code></p>\n<p><br></p>\n<p><strong>仓库管理</strong></p>\n<p>docker login ：登录</p>\n","next":{"title":"JavaScript","slug":"JavaScript"},"link":"https://Directoree.github.io/post/docker/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. Docker初识</font>","id":"一-Docker初识","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. Docker架构</font>","id":"二-Docker架构","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三.  Docker常用命令</font>","id":"三-Docker常用命令","index":"3","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.1 镜像管理</font>","id":"3-1-镜像管理","index":"3.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.2 容器管理</font>","id":"3-2-容器管理","index":"3.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.3 网络管理</font>","id":"3-3-网络管理","index":"3.3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.4 数据管理</font>","id":"3-4-数据管理","index":"3.4"}]}],"copyright":{"author":"Directoree","link":"<a href=\"https://Directoree.github.io/post/docker/\" title=\"Docker\">https://Directoree.github.io/post/docker/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}